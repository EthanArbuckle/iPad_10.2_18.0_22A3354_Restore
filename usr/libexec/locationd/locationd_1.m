void sub_100094164(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  char *v10;
  NSObject *v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  void *__p[2];
  int64_t v16;
  std::string v17;

  if (sub_1000CC504(a1))
  {
    sub_100074DEC(a1, &v14);
    v4 = std::string::append(&v14, " WHERE ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v13, "MAC");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v17, " = ? ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v16 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v16 >= 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v10);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  v11 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v17.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getEntriesForMac() without a backing database in CLWifiHarvestDatabase!", (uint8_t *)&v17, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v17, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
    LOWORD(v13.__r_.__value_.__l.__data_) = 0;
    v12 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v17, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getEntriesForMac() without a backing database in CLWifiHarvestDatabase!", &v13, 2);
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getEntriesForMac(const CLMacAddress &)", "%s\n", (const char *)v12);
    if (v12 != &v17)
      free(v12);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_100094778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a52 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10009483C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100094850(uint64_t result, _QWORD *a2, __int128 *a3, int a4, int a5, uint64_t a6, double a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)result = *a2;
  v7 = *a3;
  *(_OWORD *)(result + 24) = a3[1];
  *(_OWORD *)(result + 8) = v7;
  v8 = a3[2];
  v9 = a3[3];
  v10 = a3[4];
  *(_OWORD *)(result + 88) = a3[5];
  *(_OWORD *)(result + 72) = v10;
  *(_OWORD *)(result + 56) = v9;
  *(_OWORD *)(result + 40) = v8;
  v11 = a3[6];
  v12 = a3[7];
  v13 = a3[8];
  *(_OWORD *)(result + 148) = *(__int128 *)((char *)a3 + 140);
  *(_OWORD *)(result + 136) = v13;
  *(_OWORD *)(result + 120) = v12;
  *(_OWORD *)(result + 104) = v11;
  *(_DWORD *)(result + 164) = a4;
  *(_DWORD *)(result + 168) = a5;
  *(double *)(result + 176) = a7;
  *(_QWORD *)(result + 184) = a6;
  return result;
}

uint64_t sub_1000948A8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v11;
  int *v12;
  _OWORD *v13;
  NSObject *v14;
  void **v15;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  _BYTE buf[12];
  __int16 v24;
  int v25;
  char v26;
  int v27;
  _BYTE *v28;
  __int16 v29;
  int v30;
  void *__p[2];
  char v32;

  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  if (*(_BYTE *)a2)
  {
    v11 = a2[2];
    if (v11 - 3 <= 2)
    {
      v12 = (int *)sub_100704A28((uint64_t)a2);
      sub_1007034C8(a1, v12, a3);
    }
    switch(v11)
    {
      case 0u:
      case 1u:
      case 2u:
      case 7u:
        v13 = (_OWORD *)sub_1007057DC((uint64_t)a2);
        sub_100704A50(a1, v13, a3);
      case 6u:
        v17 = sub_1001E3CA4((uint64_t)a2);
        sub_100094C0C(a1, v17, a3);
      case 9u:
        v18 = (_OWORD *)sub_100706590((uint64_t)a2);
        sub_100705804(a1, v18, a3);
      case 0xAu:
        v19 = (_OWORD *)sub_1007073B4((uint64_t)a2);
        sub_1007065B4(a1, v19, a3);
      default:
        break;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_101347C78(a2, __p);
    v15 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v15;
    v24 = 1024;
    v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CELL_LOC: best match cell, %s, bestMatch, %d", buf, 0x12u);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v20 = qword_1022A02D8;
    sub_101347C78(a2, buf);
    if (v26 >= 0)
      v21 = buf;
    else
      v21 = *(_BYTE **)buf;
    v27 = 136315394;
    v28 = v21;
    v29 = 1024;
    v30 = 0;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 2, "CELL_LOC: best match cell, %s, bestMatch, %d", (const char *)&v27, 18);
    if (v26 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation(const CLCell &, CLDaemonLocation &)", "%s\n", v22);
    if (v22 != (char *)__p)
      free(v22);
  }
  return 0;
}

void sub_100094C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v10[5];
  uint64_t v11;

  v3 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v3;
  v10[4] = *(_OWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v4;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  sub_100095A14(a1, (uint64_t)v10, a3);
}

void sub_1000959BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(exception_object);
}

void sub_100095A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v12;
  void *v13;
  _OWORD v14[5];
  uint64_t v15;

  v5 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v5;
  v14[4] = *(_OWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v6;
  sub_10009643C((unsigned int *)v14, &v13);
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v12 = sub_100096670(a1);
  sub_1000963C4(*(_QWORD *)(v12 + 32));
}

void sub_100096338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000963C4(uint64_t a1)
{
  sub_1000CD250(a1);
}

uint64_t sub_10009643C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  void *__p[2];
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;

  sub_100263E50((uint64_t)v32);
  v4 = sub_100263F7C(&v33, (uint64_t)"[", 1);
  v5 = sub_100263F7C(v4, (uint64_t)" MCC=", 5);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)" AND MNC=", 9);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v9 = sub_100263F7C(v8, (uint64_t)" AND TAC=", 9);
  v10 = (_QWORD *)std::ostream::operator<<(v9, a1[2]);
  v11 = sub_100263F7C(v10, (uint64_t)" AND CI=", 8);
  v12 = (_QWORD *)std::ostream::operator<<(v11, a1[3]);
  v13 = sub_100263F7C(v12, (uint64_t)" AND UARFCN=", 12);
  v14 = (_QWORD *)std::ostream::operator<<(v13, a1[4]);
  v15 = sub_100263F7C(v14, (uint64_t)" AND PID=", 9);
  v16 = (_QWORD *)std::ostream::operator<<(v15, a1[5]);
  v17 = sub_100263F7C(v16, (uint64_t)" AND RSCP=", 10);
  v18 = (_QWORD *)std::ostream::operator<<(v17, a1[12]);
  v19 = sub_100263F7C(v18, (uint64_t)" AND ECN0=", 10);
  v20 = (_QWORD *)std::ostream::operator<<(v19, a1[13]);
  v21 = sub_100263F7C(v20, (uint64_t)" AND BANDINFO=", 14);
  v22 = (_QWORD *)std::ostream::operator<<(v21, a1[6]);
  v23 = sub_100263F7C(v22, (uint64_t)" AND DEPLOYMENTTYPE=", 20);
  v24 = (_QWORD *)std::ostream::operator<<(v23, a1[14]);
  v25 = sub_100263F7C(v24, (uint64_t)" AND BANDWIDTH=", 15);
  v26 = (_QWORD *)std::ostream::operator<<(v25, a1[15]);
  sub_100263F7C(v26, (uint64_t)" ]", 2);
  std::stringbuf::str(__p, v34);
  if (v31 >= 0)
    v27 = (char *)__p;
  else
    v27 = (char *)__p[0];
  sub_1015A2E04(a2, v27);
  if (v31 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v32
  v33 = v28;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_100096640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100096670(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 272);
  if (!result)
    operator new();
  return result;
}

void sub_1000966D4()
{
  operator delete();
}

uint64_t sub_1000966F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 280);
  if (!result)
    operator new();
  return result;
}

void sub_10009675C()
{
  operator delete();
}

uint64_t sub_100096780(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  CFDataRef v12;
  NSObject *v13;
  __int128 v14;
  __int128 v15;
  const char *v17;
  char *v18;
  double v19;
  float64x2_t v20;
  UInt8 v21[16];
  UInt8 bytes[16];
  _BYTE v23[32];
  __int128 v24;
  float64x2_t v25;
  uint64_t v26;
  int v27;
  float64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  _BYTE buf[12];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v26 = 0;
  *(float64x2_t *)bytes = vcvtq_f64_f32(*(float32x2_t *)(a2 + 20));
  *(double *)v23 = *(float *)(a2 + 28);
  v20 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 32));
  *(float64x2_t *)&v23[8] = v20;
  *(double *)&v23[24] = *(float *)(a2 + 40);
  v24 = COERCE_UNSIGNED_INT64(CFAbsoluteTimeGetCurrent());
  v25 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 52));
  LODWORD(v26) = *(_DWORD *)(a2 + 44);
  sub_100119F3C(v21);
  v4 = *(double *)(a1 + 96);
  if (v4 < 0.0 || *(double *)(a1 + 64) <= 0.0 || sub_100096C00(v20.f64[0], v4) >= *(double *)(a1 + 64))
  {
    v12 = CFDataCreate(kCFAllocatorDefault, bytes, 88);
    if (v12)
    {
      if (sub_10011B54C((uint64_t)v21, "kCLConnectionMessageHeadingDataKey", (uint64_t)v12))
      {
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v21);
        sub_10001BC00(a1, buf);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10219D130);
        v13 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v26;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "sent kCLConnectionMessageHeading,data.heading.calibration,%d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_10219D130);
          v27 = 67109120;
          LODWORD(v28) = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "sent kCLConnectionMessageHeading,data.heading.calibration,%d", &v27);
          v18 = (char *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
      CFRelease(v12);
    }
    v14 = v24;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v23[16];
    *(_OWORD *)(a1 + 120) = v14;
    *(float64x2_t *)(a1 + 136) = v25;
    *(_QWORD *)(a1 + 152) = v26;
    v15 = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)bytes;
    *(_OWORD *)(a1 + 88) = v15;
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_10219D130);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 134218496;
      *(float64_t *)&buf[4] = v20.f64[0];
      v34 = 2048;
      v35 = v6;
      v36 = 2048;
      v37 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "new heading %.2f is within heading filter of %.2f from previous heading %.2f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10219D130);
      v8 = *(_QWORD *)(a1 + 64);
      v9 = *(_QWORD *)(a1 + 96);
      v27 = 134218496;
      v28 = v20.f64[0];
      v29 = 2048;
      v30 = v8;
      v31 = 2048;
      v32 = v9;
      LODWORD(v19) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "new heading %.2f is within heading filter of %.2f from previous heading %.2f", COERCE_DOUBLE(&v27), v19, v20.f64[0]);
      v11 = (char *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  return sub_10011A5A8(v21);
}

void sub_100096BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

double sub_100096C00(double a1, double a2)
{
  double v2;

  v2 = vabdd_f64(a1, a2);
  if (v2 > 180.0)
  {
    if (a1 >= 180.0)
      a1 = 360.0 - a1;
    if (a2 >= 180.0)
      a2 = 360.0 - a2;
    return a1 + a2;
  }
  return v2;
}

uint64_t sub_100096C40(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {

    sub_100261F44(v1 + 1160);
    if (*(char *)(v1 + 927) < 0)
      operator delete(*(void **)(v1 + 904));
    sub_100261F44(v1 + 800);
    sub_100261F44(v1 + 680);
    operator delete();
  }
  return result;
}

uint64_t sub_100096CB4(uint64_t a1, unsigned int a2, const std::string *a3, uint64_t a4, double a5, double a6, double a7)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  _BOOL4 v12;
  double v13;
  double v14;
  double v15;
  __int128 v18;
  uint64_t v19;
  NSObject *v20;
  double v21;
  double v22;
  NSObject *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _BYTE *v34;
  uint64_t v35;
  _BOOL4 v36;
  NSObject *v37;
  _BYTE *v38;
  _BOOL4 v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  NSObject *v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  unsigned int v50;
  const char *v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  NSObject *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  _BYTE *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE *v77;
  __int128 v78;
  NSObject *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  NSObject *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  double v104;
  float32_t v105;
  NSObject *v106;
  int v107;
  int v108;
  _BYTE *v109;
  _QWORD *v110;
  BOOL v111;
  char v112;
  NSObject *v113;
  _BYTE *v114;
  uint64_t v115;
  NSObject *v116;
  double v117;
  double v118;
  uint64_t v119;
  NSObject *v120;
  int v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  int v125;
  int v126;
  void **v127;
  char *v128;
  char *v129;
  uint64_t v130;
  int v131;
  int v132;
  void **v133;
  char *v134;
  char *v135;
  uint64_t v136;
  _BYTE *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  double v141;
  double v142;
  uint64_t v143;
  const char *v144;
  char *v145;
  int v147;
  NSObject *v148;
  int v150;
  const char *v151;
  uint64_t v152;
  _BYTE *v153;
  char *v154;
  char *v155;
  const char *v156;
  char *v157;
  uint64_t v158;
  double v159;
  double v160;
  std::string::size_type v161;
  const char *v162;
  char *v163;
  uint64_t v164;
  _BYTE *v165;
  char *v166;
  uint8_t v167;
  const char *v168;
  const char *v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::string *__str;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  std::string v195;
  unsigned int v196;
  _BYTE __p[14];
  double v198;
  _BYTE v199[14];
  _BYTE v200[24];
  std::string v201;
  void *v202[2];
  char v203;
  _BYTE buf[1620];

  v196 = a2;
  if (a2)
  {
    sub_101944464();
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v13 = a7;
  v14 = a6;
  v15 = a5;
  v8 = a1;
  sub_1000C1928((uint64_t)&v193, &v196);
  __str = &v195;
  std::string::operator=(&v195, a3);
  v18 = *(_OWORD *)(a4 + 16);
  v190 = *(_OWORD *)a4;
  v191 = v18;
  v192 = *(_QWORD *)(a4 + 32);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 224))(v8);
  v9 = v19;
  v7 = __p;
  if (!*(_BYTE *)v19)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v46 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v47 = v196;
      v48 = sub_1001CC818(v196);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v48;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, type, %d, %s, not active", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v49 = qword_1022A02D8;
      v50 = v196;
      v51 = sub_1001CC818(v196);
      *(_DWORD *)v200 = 67109378;
      *(_DWORD *)&v200[4] = v50;
      *(_WORD *)&v200[8] = 2080;
      *(_QWORD *)&v200[10] = v51;
      LODWORD(v168) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "WIFITILE: requestDownload, type, %d, %s, not active", v200, v168);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    goto LABEL_265;
  }
  sub_1001CB024((uint64_t)&v193, -1, v15, v14, *(double *)(v19 + 152), *(double *)(v19 + 160));
  if (!sub_1001C8DA8((unsigned int *)&v193))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v54 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240((unsigned int *)&v193, buf);
      v55 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v200 = 136380675;
      *(_QWORD *)&v200[4] = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_FAULT, "WIFITILE: requestDownload, invalid tile ID: %{private}s, #CloneMe", v200, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_91;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v56 = qword_1022A0058;
    sub_100BCC240((unsigned int *)&v193, v200);
    if (v200[23] >= 0)
      v57 = v200;
    else
      v57 = *(_BYTE **)v200;
    *(_DWORD *)__p = 136380675;
    *(_QWORD *)&__p[4] = v57;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 17, "WIFITILE: requestDownload, invalid tile ID: %{private}s, #CloneMe", __p, 12);
    v59 = v58;
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v59);
    if (v59 == buf)
      goto LABEL_91;
LABEL_272:
    free(v59);
LABEL_91:
    v62 = 0;
    goto LABEL_266;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v21 = sub_1001C087C((uint64_t)&v193);
    v22 = sub_1001C0858((uint64_t)&v193);
    *(_DWORD *)buf = 134284033;
    *(double *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2049;
    v7 = __p;
    *(double *)&buf[14] = v22;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)&buf[24] = v190;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@TileDl, wifi, request, llsw, %{private}.2lf, %{private}.2lf, currOverCell, %{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v63 = qword_1022A0048;
    v64 = sub_1001C087C((uint64_t)&v193);
    v65 = sub_1001C0858((uint64_t)&v193);
    *(_DWORD *)v200 = 134284033;
    *(double *)&v200[4] = v64;
    *(_WORD *)&v200[12] = 2049;
    v7 = __p;
    *(double *)&v200[14] = v65;
    *(_WORD *)&v200[22] = 1026;
    LODWORD(v201.__r_.__value_.__l.__data_) = v190;
    LODWORD(v168) = 28;
    v10 = buf;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, 1, "@TileDl, wifi, request, llsw, %{private}.2lf, %{private}.2lf, currOverCell, %{public}d", v200);
    v67 = (char *)v66;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v66);
    if (v67 != buf)
      free(v67);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v10 = buf;
    sub_100FA4168((double *)&v190, buf);
    v24 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v200 = 136446210;
    *(_QWORD *)&v200[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TileDl, wifi, %{public}s", v200, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v25 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v25)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v68 = qword_1022A0048;
    v10 = v200;
    sub_100FA4168((double *)&v190, v200);
    if (v200[23] >= 0)
      v69 = v200;
    else
      v69 = *(_BYTE **)v200;
    *(_DWORD *)__p = 136446210;
    *(_QWORD *)&__p[4] = v69;
    LODWORD(v168) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 2, "TileDl, wifi, %{public}s", __p);
    v71 = v70;
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
    v25 = sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v186 = v8;
  if (!*(_BYTE *)(v8 + 217))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v60 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v61 = *(unsigned __int8 *)(v186 + 216);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v61;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_91;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v150 = *(unsigned __int8 *)(v186 + 216);
    *(_DWORD *)v200 = 67109120;
    *(_DWORD *)&v200[4] = v150;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", v200);
    v59 = (char *)v151;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v151);
    if (v59 == buf)
      goto LABEL_91;
    goto LABEL_272;
  }
  if (*(_BYTE *)(v9 + 176))
  {
    sub_10194431C(v25, v26, v27, v28, v29, v30, v31, v32, v167, (uint64_t)v168, (uint64_t)v169, v170, (uint64_t)v171, v172, v175, v176, v177, v178, v179,
      v180,
      v182,
      v183,
      v184,
      v185);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 1289, "requestDownload");
    goto LABEL_107;
  }
  LODWORD(v10) = *(_DWORD *)(v8 + 408);
  v184 = v8 + 128;
  v11 = sub_1001C8840(v8 + 128, (uint64_t)&v193);
  v185 = v9 + 184;
  v12 = sub_1001C0618(v9 + 184, (unsigned int *)&v193);
  if (qword_1022A02D0 != -1)
LABEL_108:
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v181 = (_QWORD *)(v8 + 136);
  v33 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_100BCC240((unsigned int *)&v193, v200);
    v34 = v200[23] >= 0 ? v200 : *(_BYTE **)v200;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = v34;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v181 != v11;
    *(_WORD *)&buf[24] = 1024;
    v7 = __p;
    *(_DWORD *)&buf[26] = 0;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&buf[32] = v12;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d", buf, 0x24u);
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
  }
  if (!sub_1001BFF7C(115, 2))
  {
    if (v12)
      goto LABEL_29;
LABEL_119:
    if (v181 != v11)
    {
      v76 = v11[10];
      v77 = (_BYTE *)(v76 + 112);
      v39 = *(unsigned __int8 *)(v76 + 114) != BYTE2(v190)
         || *v77 != v190
         || *(unsigned __int8 *)(v76 + 113) != BYTE1(v190);
      if (*(_BYTE *)(v76 + 114))
        BYTE2(v190) = 1;
      if (*v77)
        LOBYTE(v190) = 1;
      if (*(_BYTE *)(v76 + 113))
        BYTE1(v190) = 1;
      v78 = v191;
      *(_OWORD *)v77 = v190;
      *(_OWORD *)(v76 + 128) = v78;
      *(_WORD *)(v76 + 144) = v192;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v79 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v76 + 16))(v200, v76);
        v80 = v200[23];
        v81 = *(_BYTE **)v200;
        sub_100FA4168((double *)&v190, __p);
        v82 = v200;
        if (v80 < 0)
          v82 = v81;
        if (v199[1] >= 0)
          v83 = __p;
        else
          v83 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v82;
        *(_WORD *)&buf[12] = 2080;
        v7 = __p;
        *(_QWORD *)&buf[14] = v83;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v39;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %s, will be downloaded, details, %s, updated, %d", buf, 0x1Cu);
        if ((v199[1] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v8 = v186;
        if ((v200[23] & 0x80000000) != 0)
          operator delete(*(void **)v200);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v84 = qword_1022A02D8;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v76 + 16))(__p, v76);
        v85 = v199[1];
        v86 = *(_BYTE **)__p;
        sub_100FA4168((double *)&v190, v202);
        v87 = __p;
        if (v85 < 0)
          v87 = v86;
        if (v203 >= 0)
          v88 = v202;
        else
          v88 = (void **)v202[0];
        *(_DWORD *)v200 = 136315650;
        *(_QWORD *)&v200[4] = v87;
        *(_WORD *)&v200[12] = 2080;
        v7 = __p;
        *(_QWORD *)&v200[14] = v88;
        *(_WORD *)&v200[22] = 1024;
        LODWORD(v201.__r_.__value_.__l.__data_) = v39;
        LODWORD(v168) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v84, 2, "WIFITILE: requestDownload, tileid, %s, will be downloaded, details, %s, updated, %d", v200, v168, (_DWORD)v169);
        v90 = v89;
        if (v203 < 0)
          operator delete(v202[0]);
        if ((v199[1] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v90);
        if (v90 != buf)
          free(v90);
        v8 = v186;
      }
      goto LABEL_177;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v91 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      sub_100FA4168((double *)&v190, v200);
      v92 = v200[23] >= 0 ? v200 : *(_BYTE **)v200;
      *(_DWORD *)buf = 134218498;
      *(double *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      v7 = __p;
      *(double *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v92;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", buf, 0x20u);
      if ((v200[23] & 0x80000000) != 0)
        operator delete(*(void **)v200);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_167;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v164 = qword_1022A02D8;
    sub_100FA4168((double *)&v190, __p);
    if (v199[1] >= 0)
      v165 = __p;
    else
      v165 = *(_BYTE **)__p;
    *(_DWORD *)v200 = 134218498;
    *(double *)&v200[4] = v15;
    *(_WORD *)&v200[12] = 2048;
    v7 = __p;
    *(double *)&v200[14] = v14;
    *(_WORD *)&v200[22] = 2080;
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
    LODWORD(v168) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v164, 2, "WIFITILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", COERCE_DOUBLE(v200), *(double *)&v168, v169);
    v45 = v166;
    if ((v199[1] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_299;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v72 = qword_1022A02D8;
  sub_100BCC240((unsigned int *)&v193, __p);
  if (v199[1] >= 0)
    v73 = __p;
  else
    v73 = *(_BYTE **)__p;
  *(_DWORD *)v200 = 136316162;
  *(_QWORD *)&v200[4] = v73;
  *(_WORD *)&v200[12] = 1024;
  *(_DWORD *)&v200[14] = v12;
  *(_WORD *)&v200[18] = 1024;
  *(_DWORD *)&v200[20] = v181 != v11;
  LOWORD(v201.__r_.__value_.__l.__data_) = 1024;
  v7 = __p;
  *(_DWORD *)&v201.__r_.__value_.__s.__data_[2] = 0;
  HIWORD(v201.__r_.__value_.__r.__words[0]) = 1024;
  LODWORD(v201.__r_.__value_.__r.__words[1]) = v12;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 2, "WIFITILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d", v200, 36, (_DWORD)v169, v170, (_DWORD)v171);
  v75 = v74;
  if ((v199[1] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v75);
  if (v75 != buf)
    free(v75);
  v8 = v186;
  if (!v12)
    goto LABEL_119;
LABEL_29:
  v35 = sub_1001C85FC(v185, (unsigned int *)&v193);
  v36 = sub_100077820(v35, (int)v10 > 1, *(float *)(v9 + 128), v13);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v37 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(v200, v35);
    v38 = v200[23] >= 0 ? v200 : *(_BYTE **)v200;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v38;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = BYTE1(v192);
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v36;
    *(_WORD *)&buf[24] = 1024;
    v7 = __p;
    *(_DWORD *)&buf[26] = v181 != v11;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", buf, 0x1Eu);
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v152 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(__p, v35);
    if (v199[1] >= 0)
      v153 = __p;
    else
      v153 = *(_BYTE **)__p;
    *(_DWORD *)v200 = 136315906;
    *(_QWORD *)&v200[4] = v153;
    *(_WORD *)&v200[12] = 1024;
    *(_DWORD *)&v200[14] = BYTE1(v192);
    *(_WORD *)&v200[18] = 1024;
    *(_DWORD *)&v200[20] = v36;
    LOWORD(v201.__r_.__value_.__l.__data_) = 1024;
    v7 = __p;
    *(_DWORD *)&v201.__r_.__value_.__s.__data_[2] = v181 != v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v152, 2, "WIFITILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", v200, 30, (_DWORD)v169, v170);
    v155 = v154;
    if ((v199[1] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v155);
    if (v155 != buf)
      free(v155);
    v8 = v186;
  }
  if (BYTE1(v192))
    sub_1011B2478(v8, v35, buf, v13);
  LOBYTE(v39) = 0;
  if (!v36 || v181 != v11)
    goto LABEL_177;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v40 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(buf, v35);
    v41 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v200 = 136315138;
    *(_QWORD *)(v7 + 52) = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, refresh download, %s", v200, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v42 = qword_1022A02D8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v35 + 16))(v200, v35);
    if (v200[23] >= 0)
      v43 = v200;
    else
      v43 = *(_BYTE **)v200;
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v43;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 2, "WIFITILE: requestDownload, refresh download, %s", __p);
    v45 = v44;
    if ((v200[23] & 0x80000000) != 0)
      operator delete(*(void **)v200);
LABEL_299:
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v45);
    if (v45 != buf)
      free(v45);
    v8 = v186;
  }
LABEL_167:
  sub_101191978(*(_DWORD *)(v9 + 4), __p);
  v93 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  v189 = v93;
  sub_1011AEFB0(v8, &v189, (uint64_t)&v193, &v190);
  v94 = v189;
  v189 = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v95 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v96 = sub_1001C087C((uint64_t)&v193);
    v97 = sub_1001C0858((uint64_t)&v193);
    v98 = *(_QWORD *)(v8 + 144);
    *(_DWORD *)buf = 134284033;
    *(double *)&buf[4] = v96;
    *(_WORD *)&buf[12] = 2049;
    v7 = __p;
    *(double *)&buf[14] = v97;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v98;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v158 = qword_1022A0048;
    v159 = sub_1001C087C((uint64_t)&v193);
    v160 = sub_1001C0858((uint64_t)&v193);
    v161 = *(_QWORD *)(v186 + 144);
    *(_DWORD *)v200 = 134284033;
    *(double *)&v200[4] = v159;
    *(_WORD *)&v200[12] = 2049;
    v7 = __p;
    *(double *)&v200[14] = v160;
    *(_WORD *)&v200[22] = 2050;
    v201.__r_.__value_.__r.__words[0] = v161;
    LODWORD(v168) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v158, 0, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", v200, v168);
    v163 = (char *)v162;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v162);
    if (v163 != buf)
      free(v163);
    v8 = v186;
  }
  v99 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  LOBYTE(v39) = 1;
LABEL_177:
  *(_OWORD *)v200 = v193;
  *(_QWORD *)&v200[16] = v194;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&v201, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
  else
    v201 = *__str;
  v100 = v39;
  LOWORD(v190) = 0;
  BYTE2(v190) = 0;
  if ((v191 & 0x80000000) == 0)
  {
    v101 = -(int)v191;
    v173 = (2 * v191) | 1;
    v174 = -(int)v191;
    HIDWORD(v171) = v191;
    do
    {
      v102 = v173;
      v103 = v174;
      do
      {
        if (v103 | v101)
        {
          *(_OWORD *)v200 = v193;
          *(_QWORD *)&v200[16] = v194;
          std::string::operator=(&v201, __str);
          v104 = *(double *)(v9 + 160);
          v105 = *(double *)(v9 + 152);
          *(float *)&v104 = v104;
          sub_1001C85C8((uint64_t)v200, v101, v103, v105, *(float32x2_t *)&v104);
          if (sub_1001C8DA8((unsigned int *)v200))
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A5408);
            v106 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              v107 = *(_DWORD *)&v200[8];
              v108 = *(_DWORD *)&v200[4];
              sub_100BCC240((unsigned int *)v200, __p);
              v109 = __p;
              if (v199[1] < 0)
                v109 = *(_BYTE **)__p;
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v101;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v103;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v107;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v108;
              *(_WORD *)&buf[26] = 2080;
              v7 = __p;
              *(_QWORD *)&buf[28] = v109;
              _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
              if ((v199[1] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v8 = v186;
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A5408);
              v124 = qword_1022A02D8;
              v125 = *(_DWORD *)&v200[8];
              v126 = *(_DWORD *)&v200[4];
              sub_100BCC240((unsigned int *)v200, v202);
              v127 = v202;
              if (v203 < 0)
                v127 = (void **)v202[0];
              *(_DWORD *)__p = 67110146;
              *(_DWORD *)&__p[4] = v101;
              *(_WORD *)&__p[8] = 1024;
              *(_DWORD *)&__p[10] = v103;
              LOWORD(v198) = 1024;
              *(_DWORD *)((char *)&v198 + 2) = v125;
              HIWORD(v198) = 1024;
              *(_DWORD *)v199 = v126;
              *(_WORD *)&v199[4] = 2080;
              v7 = __p;
              *(_QWORD *)&v199[6] = v127;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v124, 2, "WIFITILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", __p, 36, (_DWORD)v169, v170, v171);
              v129 = v128;
              if (v203 < 0)
                operator delete(v202[0]);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v129);
              v8 = v186;
              if (v129 != buf)
                free(v129);
            }
            v110 = sub_1001C8840(v184, (uint64_t)v200);
            v111 = sub_1001C0618(v185, (unsigned int *)v200);
            if (*(_BYTE *)(v8 + 216))
              v112 = 1;
            else
              v112 = v111;
            if ((v112 & 1) == 0 && v181 == v110)
            {
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A5408);
              v113 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
              {
                sub_100BCC240((unsigned int *)v200, buf);
                v114 = buf;
                if (buf[23] < 0)
                  v114 = *(_BYTE **)buf;
                *(_DWORD *)__p = 136315138;
                *(_QWORD *)&__p[4] = v114;
                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, adding neighbour, %s", __p, 0xCu);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_1021A5408);
                v136 = qword_1022A02D8;
                sub_100BCC240((unsigned int *)v200, __p);
                v137 = __p;
                if (v199[1] < 0)
                  v137 = *(_BYTE **)__p;
                LODWORD(v202[0]) = 136315138;
                *(_QWORD *)(v7 + 100) = v137;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v136, 2, "WIFITILE: requestDownload, adding neighbour, %s", (const char *)v202);
                v139 = v138;
                if ((v199[1] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v139);
                if (v139 != buf)
                  free(v139);
              }
              sub_101191978(*(_DWORD *)(v9 + 4), &v188);
              sub_1011AEFB0(v8, &v188, (uint64_t)v200, &v190);
              v115 = v188;
              v188 = 0;
              if (v115)
                (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021A53E8);
              v116 = qword_1022A0048;
              if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
              {
                v117 = sub_1001C087C((uint64_t)v200);
                v118 = sub_1001C0858((uint64_t)v200);
                v119 = *(_QWORD *)(v8 + 144);
                *(_DWORD *)buf = 134284033;
                *(double *)&buf[4] = v117;
                *(_WORD *)&buf[12] = 2049;
                v7 = __p;
                *(double *)&buf[14] = v118;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)&buf[24] = v119;
                _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x20u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_1021A53E8);
                v140 = qword_1022A0048;
                v141 = sub_1001C087C((uint64_t)v200);
                v142 = sub_1001C0858((uint64_t)v200);
                v143 = *(_QWORD *)(v8 + 144);
                *(_DWORD *)__p = 134284033;
                *(double *)&__p[4] = v141;
                *(_WORD *)&__p[12] = 2049;
                v198 = v142;
                *(_WORD *)v199 = 2050;
                *(_QWORD *)&v199[2] = v143;
                LODWORD(v168) = 32;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v140, 0, "@TileReq, wifi, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", __p, v168);
                v145 = (char *)v144;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v144);
                if (v145 != buf)
                  free(v145);
              }
              v100 = 1;
            }
          }
          else
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021A5408);
            v120 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              v121 = *(_DWORD *)&v200[8];
              v122 = *(_DWORD *)&v200[4];
              sub_100BCC240((unsigned int *)v200, __p);
              v123 = __p;
              if (v199[1] < 0)
                v123 = *(_BYTE **)__p;
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v101;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v103;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v121;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v122;
              *(_WORD *)&buf[26] = 2080;
              v7 = __p;
              *(_QWORD *)&buf[28] = v123;
              _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "WIFITILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
              if ((v199[1] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v8 = v186;
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021A5408);
              v130 = qword_1022A02D8;
              v131 = *(_DWORD *)&v200[8];
              v132 = *(_DWORD *)&v200[4];
              sub_100BCC240((unsigned int *)v200, v202);
              v133 = v202;
              if (v203 < 0)
                v133 = (void **)v202[0];
              *(_DWORD *)__p = 67110146;
              *(_DWORD *)&__p[4] = v101;
              *(_WORD *)&__p[8] = 1024;
              *(_DWORD *)&__p[10] = v103;
              LOWORD(v198) = 1024;
              *(_DWORD *)((char *)&v198 + 2) = v131;
              HIWORD(v198) = 1024;
              *(_DWORD *)v199 = v132;
              *(_WORD *)&v199[4] = 2080;
              v7 = __p;
              *(_QWORD *)&v199[6] = v133;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v130, 2, "WIFITILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", __p, 36, (_DWORD)v169, v170, v171);
              v135 = v134;
              if (v203 < 0)
                operator delete(v202[0]);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v135);
              v8 = v186;
              if (v135 != buf)
                free(v135);
            }
          }
        }
        ++v103;
        --v102;
      }
      while (v102);
    }
    while (v101++ != HIDWORD(v171));
  }
  if ((v100 & 1) != 0)
  {
    v147 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v186 + 448) + 80))(*(_QWORD *)(v186 + 448));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v148 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v147;
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, set, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v147;
      LODWORD(v168) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, wifi, set, %{public}d", __p, v168);
      v157 = (char *)v156;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v156);
      if (v157 != buf)
        free(v157);
    }
    sub_100075414(v186, 0, v13);
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v201.__r_.__value_.__l.__data_);
LABEL_265:
  v62 = 1;
LABEL_266:
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  return v62;
}

void sub_100098EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100099048(void *a1, void *a2, void *a3)
{
  uint64_t result;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  if (a1 && a2 && a3 && objc_msgSend(a2, "length") && objc_msgSend(a3, "length"))
  {
    if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
      return 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v22) = objc_msgSend(a1, "slotID");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,areMccAndMncValid,invalidSlot,%d", buf, 8u);
    }
    v10 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AADC0);
      v11 = qword_1022A0028;
      v15 = 67109120;
      LODWORD(v16) = objc_msgSend(a1, "slotID");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "#ctcl,#cterror,areMccAndMncValid,invalidSlot,%d", &v15);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::areMccAndMncValid(CTXPCServiceSubscriptionContext *, NSString *, NSString *)", "%s\n", v12);
      if (v13 == buf)
        return 0;
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      v22 = a1;
      v23 = 2048;
      v24 = a2;
      v25 = 2048;
      v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,areMccAndMncValid,invalid,context,%p,mccString,%p,mncString,%p", buf, 0x20u);
    }
    v8 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AADC0);
      v15 = 134218496;
      v16 = a1;
      v17 = 2048;
      v18 = a2;
      v19 = 2048;
      v20 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#ctcl,#cterror,areMccAndMncValid,invalid,context,%p,mccString,%p,mncString,%p", &v15, 32);
      v13 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::areMccAndMncValid(CTXPCServiceSubscriptionContext *, NSString *, NSString *)", "%s\n", v14);
      if (v13 == buf)
        return 0;
LABEL_26:
      free(v13);
      return 0;
    }
  }
  return result;
}

void sub_1000993D0(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  __CFString *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[12];
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  _BYTE buf[12];
  __int16 v35;
  id v36;
  __int16 v37;
  id v38;

  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(v6 + 104), "silo");
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC failed,replacing with -1", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC failed,replacing with -1", v29, 2);
    goto LABEL_51;
  }
  if (!a2 || !-[__CFString length](a2, "length"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC returned nil,replacing with -1", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MNC returned nil,replacing with -1", v29, 2);
    goto LABEL_51;
  }
  if ((unint64_t)-[__CFString length](a2, "length") < 4)
    goto LABEL_27;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,queryServingMccAndMnc,MNC is too many digits,replacing with -1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    *(_WORD *)v29 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,queryServingMccAndMnc,MNC is too many digits,replacing with -1", v29, 2);
LABEL_51:
    v26 = (char *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v8);
    if (v26 != buf)
      free(v26);
  }
LABEL_26:
  a2 = CFSTR("-1");
LABEL_27:
  if ((sub_100099048(*(void **)(a1 + 32), *(void **)(a1 + 40), a2) & 1) != 0)
  {
    v11 = a2;
    sub_10009A960((uint64_t)buf, *(void **)(a1 + 40), a2);
    v28 = sub_100099E54((uint64_t)objc_msgSend(*(id *)(a1 + 32), "slotID"));
    *(_QWORD *)v29 = &v28;
    v12 = sub_1001E59F8(v6 + 328, &v28, (uint64_t)&unk_101B9EB60, (_DWORD **)v29);
    *(_QWORD *)((char *)v12 + 20) = *(_QWORD *)buf;
    *((_BYTE *)v12 + 28) = buf[8];
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v16 = -[__CFString UTF8String](a2, "UTF8String");
      *(_DWORD *)buf = 138478339;
      *(_QWORD *)&buf[4] = v14;
      v35 = 2082;
      v36 = v15;
      v37 = 2082;
      v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ctcl,queryServingMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v18 = qword_1022A0078;
      v19 = *(_QWORD *)(a1 + 32);
      v20 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v21 = -[__CFString UTF8String](a2, "UTF8String");
      *(_DWORD *)v29 = 138478339;
      *(_QWORD *)&v29[4] = v19;
      v30 = 2082;
      v31 = v20;
      v32 = 2082;
      v33 = v21;
      LODWORD(v27) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "#ctcl,queryServingMccAndMnc,context,%{private}@,mcc,%{public}s,mnc,%{public}s", v29, v27);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    objc_msgSend(*(id *)(v6 + 112), "sendNotificationToClients:notificationData:", CFSTR("kServingMccAndMncNotification"), sub_10009AB40(v6 + 328));

  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,MCC and MNC invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      *(_WORD *)v29 = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,MCC and MNC invalid", v29, v27);
      v25 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }

}

void sub_100099AA8(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  _BYTE buf[12];
  __int16 v20;
  void *v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)&buf[4] = a2;
    v20 = 2113;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,#ci,onCellInfoChanged context %{private}@, info %{private}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15 = 138478083;
    v16 = a2;
    v17 = 2113;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,#ci,onCellInfoChanged context %{private}@, info %{private}@", &v15, 22);
    v10 = (char *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::onCellInfoChanged(CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_10009A2E8(a1, a2);
  if ((sub_10009A634(a2) & 1) != 0)
  {
    sub_100099E98((id *)&v15, a3);
    v14 = sub_100099E54((uint64_t)objc_msgSend(a2, "slotID"));
    *(_QWORD *)buf = &v14;
    v7 = sub_1001DC028(a1 + 368, &v14, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1001DC284((id *)v7 + 3, (id *)&v15);
    sub_1001DC534(&v15);
    objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kCellInfoNotification"), sub_10009A4D8(a1 + 368));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,#ci,isCellInfoValid failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v15) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,#ci,isCellInfoValid failed", &v15, v13);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::onCellInfoChanged(CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100099E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001DC534(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100099E54(uint64_t a1)
{
  char v2;
  unsigned int v3;
  unsigned int v4;

  v2 = sub_1001DC538();
  if ((unint64_t)(a1 - 1) <= 1)
    v3 = a1 != 1;
  else
    v3 = 255;
  if (a1 == 1)
    v4 = 0;
  else
    v4 = 255;
  if ((v2 & 1) != 0)
    return v3;
  else
    return v4;
}

id *sub_100099E98(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v12;
  id v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  int v17;
  id v18;
  uint8_t buf[4];
  id v20;

  *a1 = 0;
  if (!a2)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTCellInfo, cellInfo is null", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return a1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTCellInfo, cellInfo is null", &v17, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v8);
LABEL_30:
    if (v9 != buf)
      free(v9);
    return a1;
  }
  v3 = objc_msgSend(a2, "legacyInfo");
  *a1 = v3;
  if (v3)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v4 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*a1, "count");
      *(_DWORD *)buf = 134217984;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, cellList size,%lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v12 = qword_1022A02A8;
      v13 = objc_msgSend(*a1, "count");
      v17 = 134217984;
      v18 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#clct,CLCTCellInfo, cellList size,%lu", &v17);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v6 = *a1;
    return a1;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v10 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, cellList size,0", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 0, "#clct,CLCTCellInfo, cellList size,0", &v17, 2);
    v9 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CTCellInfo *)", "%s\n", v16);
    goto LABEL_30;
  }
  return a1;
}

void sub_10009A2C0(_Unwind_Exception *a1)
{
  id *v1;

  sub_1001DC500(v1);
  _Unwind_Resume(a1);
}

id sub_10009A2E8(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[6];
  int v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,queryServingMccAndMnc,context,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = 138477827;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,queryServingMccAndMnc,context,%{private}@", &v11, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = a2;
  v6 = *(void **)(a1 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100065D58;
  v10[3] = &unk_10215FFB0;
  v10[4] = a2;
  v10[5] = a1;
  return objc_msgSend(v6, "copyMobileCountryCode:completion:", a2, v10);
}

id sub_10009A4D8(uint64_t a1)
{
  id v2;
  char *v3;
  char *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = sub_1001DC028(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_10009A5B4((NSNull **)v3 + 3), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = sub_1001DC028(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_10009A5B4((NSNull **)v4 + 3), CFSTR("kSlotTwo"));
  }
  return v2;
}

NSDictionary *sub_10009A5B4(NSNull **a1)
{
  NSNull *v1;
  const __CFString *v3;
  NSNull *v4;

  v3 = CFSTR("kCellRefreshNotification");
  v1 = *a1;
  if (!v1)
    v1 = +[NSNull null](NSNull, "null");
  v4 = v1;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1);
}

uint64_t sub_10009A634(void *a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  if (!a1)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,cellInfo,invalid,context,%p", buf, 0xCu);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v4)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v11 = 134217984;
    v12 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "#ctcl,#cterror,cellInfo,invalid,context,%p", &v11);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isCellInfoValid(const CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v5);
    if (v6 == buf)
      return 0;
LABEL_12:
    free(v6);
    return 0;
  }
  if ((char *)objc_msgSend(a1, "slotID") - 1 < (char *)2)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021AADC0);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v14) = objc_msgSend(a1, "slotID");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,cellInfo,invalidSlot,%d", buf, 8u);
  }
  v8 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v8)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v9 = qword_1022A0028;
    v11 = 67109120;
    LODWORD(v12) = objc_msgSend(a1, "slotID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#ctcl,#cterror,cellInfo,invalidSlot,%d", &v11);
    v6 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::isCellInfoValid(const CTXPCServiceSubscriptionContext *, CTCellInfo *)", "%s\n", v10);
    if (v6 == buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10009A960(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = -1;
  *(_BYTE *)(a1 + 8) = 0;
  if (a2 && a3)
  {
    *(_DWORD *)a1 = objc_msgSend(a2, "integerValue");
    *(_DWORD *)(a1 + 4) = objc_msgSend(a3, "integerValue");
    if (objc_msgSend(a3, "length") == (id)3)
      *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v5 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMccAndMnc, mcc or mnc is nil", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMccAndMnc, mcc or mnc is nil", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(NSString *, NSString *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  return a1;
}

id sub_10009AB40(uint64_t a1)
{
  id v2;
  unsigned int *v3;
  unsigned int *v4;
  int v6;
  int *v7;

  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = 0;
  v7 = &v6;
  v3 = (unsigned int *)sub_1001E59F8(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
  objc_msgSend(v2, "setObject:forKey:", sub_10009AC1C(v3 + 5), CFSTR("kSlotOne"));
  if (sub_1001DC538())
  {
    v6 = 1;
    v7 = &v6;
    v4 = (unsigned int *)sub_1001E59F8(a1, &v6, (uint64_t)&unk_101B9EB60, &v7);
    objc_msgSend(v2, "setObject:forKey:", sub_10009AC1C(v4 + 5), CFSTR("kSlotTwo"));
  }
  return v2;
}

NSDictionary *sub_10009AC1C(unsigned int *a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("kMccKey");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *a1);
  v3[1] = CFSTR("kMncKey");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[1]);
  v3[2] = CFSTR("kIs3DigitMnc");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 8));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_10009AD98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;

  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v14 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v20 = v11;
        v21 = 1026;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10213E430);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v15 = 136446466;
        v16 = v12;
        v17 = 1026;
        v18 = a2;
        LODWORD(v14) = 18;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

uint64_t *sub_10009B00C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  sub_100008848(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

void sub_10009B048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;

  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v14 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B88E0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v20 = v11;
        v21 = 1026;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021B88E0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v15 = 136446466;
        v16 = v12;
        v17 = 1026;
        v18 = a2;
        LODWORD(v14) = 18;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

void sub_10009B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;

  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v14 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021545E8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v20 = v11;
        v21 = 1026;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021545E8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v15 = 136446466;
        v16 = v12;
        v17 = 1026;
        v18 = a2;
        LODWORD(v14) = 18;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::removeClient(int) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

BOOL sub_10009B530(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021545E8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021545E8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10009B8B8(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10009B91C((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_10009B91C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_10008A9F0(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  operator delete((void *)a2);
  return v3;
}

void sub_10009B95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;

  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v14 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215E918);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v20 = v11;
        v21 = 1026;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10215E918);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v15 = 136446466;
        v16 = v12;
        v17 = 1026;
        v18 = a2;
        LODWORD(v14) = 18;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

BOOL sub_10009BBD0(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10215E918);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10215E918);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_10009BF58(uint64_t a1, double a2)
{
  float64x2_t v4;
  void (***v5)(_BYTE *__return_ptr, _QWORD, _OWORD *, uint64_t, _QWORD, double);
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  float v17;
  NSObject *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  float v25;
  float v26;
  __int32 v27;
  NSDate *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  float v46;
  double v47;
  double v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  _BOOL4 v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  NSObject *v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  float v72;
  double v73;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  float64x2_t v89;
  float v90;
  float v91;
  int8x16_t v92;
  int v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float64x2_t v102;
  int v103;
  char v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  dispatch_queue_t *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  double v128;
  uint64_t v129;
  void **v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  dispatch_queue_t *v142;
  __int128 v143;
  double v144;
  double v145;
  uint64_t v146;
  double v147;
  uint64_t (**v148)();
  double v149;
  double v150;
  float64x2_t v151;
  double v152;
  _QWORD *v153;
  char *v154;
  const char *v155;
  _OWORD *v156;
  char *v157;
  _QWORD *v158;
  _OWORD *v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  _QWORD *v163;
  _QWORD *v164;
  _OWORD *v165;
  _OWORD *v166;
  _OWORD *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  double v171;
  float v172;
  float v173;
  float v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  void *v181[2];
  char v182;
  float v183;
  float v184;
  uint64_t v185;
  float v186;
  float v187;
  double v188[2];
  char v189;
  float32x2_t v190;
  float v191;
  float v192;
  float v193;
  float v194;
  unsigned int v195;
  float v196;
  unsigned int v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  char v200[8];
  double v201;
  _OWORD v202[14];
  uint64_t v203;
  _BYTE __p[32];
  __int128 v205;
  _BYTE v206[128];
  double v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  int v223;
  __int16 v224;
  uint64_t v225;
  _BYTE buf[32];
  __int128 v227;
  _BYTE v228[32];
  _BYTE v229[64];
  _BYTE v230[32];
  double v231;
  _OWORD v232[110];
  uint64_t v233;
  char v234;
  _OWORD v235[9];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;

  if ((*(unsigned int (**)(_QWORD, _OWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), v235))
  {
    v5 = *(void (****)(_BYTE *__return_ptr, _QWORD, _OWORD *, uint64_t, _QWORD, double))(a1 + 32);
    v6 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), a2);
    (**v5)(buf, v5, v235, v6, *(_QWORD *)(a1 + 40), a2);
    (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)buf + 24))(*(_QWORD *)buf, *(_QWORD *)(a1 + 40), a2);
    v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 216))
  {
    v176 = 0;
    v177 = 0;
    v10 = 0;
    v175 = 0;
    v150 = 0.0;
    v178 = 0;
    v180 = a1 + 72;
    v170 = 0;
    v4.f64[0] = 0.0;
    v151 = v4;
    HIDWORD(v149) = 1067869798;
    v148 = off_102171D18;
    v169 = (char *)&v232[27] + 8;
    v167 = (_OWORD *)((char *)&v232[31] + 8);
    v168 = (char *)&v232[29] + 8;
    v165 = &v232[43];
    v166 = (_OWORD *)((char *)&v232[37] + 8);
    v163 = (_QWORD *)((char *)&v232[46] + 14);
    v164 = (_QWORD *)&v232[45] + 1;
    v161 = &v232[57];
    v162 = (char *)&v232[47] + 8;
    v159 = &v232[65];
    v160 = (char *)&v232[63] + 8;
    v157 = (char *)&v232[69] + 8;
    v158 = (_QWORD *)&v232[66] + 1;
    v155 = (const char *)&v232[73];
    v156 = &v232[71];
    v153 = (_QWORD *)&v232[76] + 1;
    v154 = (char *)&v232[74] + 8;
    while (1)
    {
      if (!*(_QWORD *)(a1 + 112))
      {
LABEL_148:
        v141 = sub_10009ED0C();
        *((_QWORD *)&v143 + 1) = __PAIR64__(v170, LODWORD(v150));
        *(_QWORD *)&v143 = __PAIR64__(HIDWORD(v150), v175);
        sub_10009EA8C(v141, SHIDWORD(v177), v176, v178, SHIDWORD(v176), v10, v177, SHIDWORD(v178), *(float *)v151.f64, *((float *)v151.f64 + 1), v143, SHIDWORD(v170));
        *(_DWORD *)buf = HIDWORD(v177);
        *(_DWORD *)&buf[4] = v10;
        *(_QWORD *)&buf[8] = v178;
        *(_QWORD *)&buf[16] = v170;
        v142 = (dispatch_queue_t *)sub_10009EC60();
        sub_10009ECA0(v142, (uint64_t)buf);
        return;
      }
      v11 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((*(_QWORD *)(a1 + 104) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (*(_QWORD *)(a1 + 104) & 0x1FFLL));
      if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 48) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), v11)&& (*(unsigned int (**)(_QWORD, _OWORD *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), v235, v11))
      {
        v12 = (uint64_t *)(a1 + 40);
        v13 = (*(uint64_t (**)(_QWORD, char *, double))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v200, v11);
        if (v201 > 120.0)
          v14 = v13;
        else
          v14 = 0;
        (***(void (****)(uint64_t *__return_ptr, _QWORD, _OWORD *, uint64_t, uint64_t, double))(a1 + 32))(&v198, *(_QWORD *)(a1 + 32), v235, v14, *v12, v11);
        if ((sub_10009DA30(v198, *v12, v11) & 1) != 0
          || (v15 = *(_QWORD *)(a1 + 112) + *(_QWORD *)(a1 + 104) - 1,
              vabdd_f64(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF)), v11) > *(double *)(a1 + 16)))
        {
          sub_100236CCC(*(_QWORD *)(a1 + 40), v11);
          (*(void (**)(float32x2_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v198 + 16))(&v190, v198, *(_QWORD *)(a1 + 40));
          v16 = v197;
          if (v197)
          {
            v17 = v192;
          }
          else
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(__p, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)__p + 16))(buf, *(_QWORD *)__p, *(_QWORD *)(a1 + 40));
            v20 = *(std::__shared_weak_count **)&__p[8];
            if (*(_QWORD *)&__p[8])
            {
              v21 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v17 = *(float *)&buf[12];
            v16 = DWORD1(v227);
          }
          if (*((float *)&v236 + 2) <= 1.0 && (DWORD2(v235[0]) & 0xFFFFFFFB) == 3)
            v24 = 1;
          else
            v24 = DWORD2(v235[0]);
          v25 = sub_10023797C((float *)(*(_QWORD *)(a1 + 40) + 1352), v24);
          v26 = sub_10009D6D8(v17, v25);
          if (v16 <= 1)
            v27 = 1;
          else
            v27 = v16;
          sub_100197040();
          if (sub_100195F08())
            sub_100F4B3B8(*(int64x2_t **)(a1 + 64), v27, *(double *)(*(_QWORD *)(a1 + 40) + 128), v26);
          sub_10023CAB0(a1 + 520, *(_QWORD *)(a1 + 40), (uint64_t)v188);
          if (v189)
          {
            v28 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v188[1]);
            objc_msgSend(*(id *)(a1 + 56), "writeToHealthRunningPower:startDate:endDate:", v28, v28, v188[0]);
          }
          if (*(_BYTE *)(a1 + 218) && *(_BYTE *)(*(_QWORD *)(a1 + 40) + 352))
          {
            *(_QWORD *)__p = v148;
            *(_QWORD *)&__p[8] = CFAbsoluteTimeGetCurrent();
            *(float *)&__p[20] = v194;
            *(float32x2_t *)&__p[24] = v190;
            *(_QWORD *)&v205 = __PAIR64__(LODWORD(v193), v195);
            v29 = sub_1011B78D4();
            sub_1011B8DB0(v29, (uint64_t)__p);
            sub_1015EB864(buf);
            sub_101605668((uint64_t)buf);
            v234 |= 1u;
            *(_QWORD *)&v232[27] = *(_QWORD *)&__p[8];
            v30 = v233;
            v31 = v194;
            *(_BYTE *)(v233 + 28) |= 1u;
            *(float *)(v30 + 8) = v31;
            v32 = v233;
            v33 = v190.i32[1];
            *(_DWORD *)(v233 + 16) = v190.i32[0];
            *(_BYTE *)(v32 + 28) |= 4u;
            v34 = v233;
            *(_BYTE *)(v233 + 28) |= 8u;
            *(_DWORD *)(v34 + 20) = v33;
            v35 = v233;
            v36 = v195;
            *(_BYTE *)(v233 + 28) |= 0x10u;
            *(_DWORD *)(v35 + 24) = v36;
            v37 = v233;
            v38 = v193;
            *(_BYTE *)(v233 + 28) |= 2u;
            *(float *)(v37 + 12) = v38;
            if (qword_1023118A8 != -1)
              dispatch_once(&qword_1023118A8, &stru_102146C98);
            if (qword_1023118B0)
              sub_101888B64(qword_1023118B0, (uint64_t)buf);
            sub_1015EE304((PB::Base *)buf);
          }
          v39 = v194;
          v174 = v191;
          if (v196 <= 0.0)
            v40 = v194;
          else
            v40 = v196;
          v41 = v190.f32[1];
          v173 = v190.f32[0];
          (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(buf);
          (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)buf + 16))(&v185, *(_QWORD *)buf, *(_QWORD *)(a1 + 40));
          v42 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v172 = v26;
          if (v186 > 0.0)
          {
            if (v39 >= *((float *)&v149 + 1))
              v45 = v39;
            else
              v45 = *((float *)&v149 + 1);
            v39 = v45 + v186;
            if (v40 >= *((float *)&v149 + 1))
              v46 = v40;
            else
              v46 = *((float *)&v149 + 1);
            if ((float)(v46 + v187) <= 0.0)
              v40 = v186;
            else
              v40 = v187;
          }
          v47 = sub_10009E708(a1 + 248, *(double *)(*(_QWORD *)(a1 + 40) + 120), v39);
          v171 = v41;
          v48 = sub_10009E708(a1 + 344, *(double *)(*(_QWORD *)(a1 + 40) + 120), v41);
          v49 = *(float *)(a1 + 224);
          v50 = v49;
          if (v49 <= -1.0)
          {
            v51 = v47;
            v50 = sub_10009D6D8(v51, v25);
            v49 = *(float *)(a1 + 224);
          }
          v184 = v50;
          if (v49 <= -1.0)
            v49 = sub_10009D6D8(v39, v25);
          v52 = *(float *)(a1 + 236);
          if (v52 <= -1.0)
            v52 = sub_10009D6D8(v40, v25);
          v53 = v48;
          v54 = sub_10009D6D8(v53, v25);
          v55 = sub_1002294AC(a1 + 448, *(_QWORD *)(a1 + 40), v49);
          v179 = sub_10009E45C(*(double *)(*(_QWORD *)(a1 + 40) + 128) - *(double *)(*(_QWORD *)(a1 + 40) + 120), v55, v240, (_QWORD *)(a1 + 120), &v184);
          v57 = v184;
          v58 = v184 > (float)(v25 + 0.00000011921) && v179 > 0.0;
          v59 = *(_QWORD *)(a1 + 40);
          v60 = *(float *)(v59 + 1364);
          v183 = v52;
          sub_10009E45C(*(double *)(v59 + 128) - *(double *)(v59 + 120), v56, v240, (_QWORD *)(a1 + 168), &v183);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102146C78);
          v61 = v179 * (float)(v25 * v60) / 3600.0;
          v62 = v179 * (float)(v60 * v57) / 3600.0;
          v63 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
          {
            v64 = v179 * (float)(v25 * v60) / 3600.0;
            v65 = v54;
            v66 = v10;
            v67 = *(_QWORD *)(a1 + 40);
            v68 = *(_QWORD *)(a1 + 112) + *(_QWORD *)(a1 + 104) - 1;
            v69 = *(_QWORD *)(v67 + 128);
            v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v68 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v68 & 0x1FF));
            v71 = *(_DWORD *)(v67 + 152);
            v72 = v183;
            sub_100236BFC(v67, __p);
            v73 = v72;
            v54 = v65;
            v74 = *(_QWORD *)(a1 + 40);
            if (__p[23] >= 0)
              v75 = __p;
            else
              v75 = *(_BYTE **)__p;
            v76 = *(_DWORD *)(v74 + 520);
            v77 = *(_DWORD *)(v74 + 288);
            v78 = *(unsigned __int8 *)(v74 + 324);
            v79 = *(unsigned __int8 *)(v74 + 352);
            v80 = *(_QWORD *)(v74 + 328);
            v81 = *(_QWORD *)(v74 + 408);
            v82 = *(_QWORD *)(v74 + 416);
            v83 = *(unsigned __int8 *)(v74 + 542);
            v84 = *(_QWORD *)(v74 + 448);
            *(_DWORD *)buf = 134224898;
            *(_QWORD *)&buf[4] = v69;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v70;
            LOWORD(v227) = 1024;
            *(_DWORD *)((char *)&v227 + 2) = v71;
            WORD3(v227) = 2048;
            *((double *)&v227 + 1) = v57;
            *(_WORD *)v228 = 2048;
            *(double *)&v228[2] = v65;
            *(_WORD *)&v228[10] = 2048;
            *(double *)&v228[12] = v171;
            *(_WORD *)&v228[20] = 2048;
            *(double *)&v228[22] = v172;
            *(_WORD *)&v228[30] = 2048;
            *(double *)v229 = v52;
            *(_WORD *)&v229[8] = 2048;
            *(double *)&v229[10] = v73;
            *(_WORD *)&v229[18] = 2048;
            *(double *)&v229[20] = v25;
            *(_WORD *)&v229[28] = 2048;
            *(double *)&v229[30] = v179;
            *(_WORD *)&v229[38] = 1024;
            *(_DWORD *)&v229[40] = v58;
            *(_WORD *)&v229[44] = 2080;
            *(_QWORD *)&v229[46] = v75;
            *(_WORD *)&v229[54] = 2048;
            *(double *)&v229[56] = v173;
            *(_WORD *)v230 = 2048;
            *(double *)&v230[2] = v174;
            *(_WORD *)&v230[10] = 2048;
            *(_QWORD *)&v230[12] = (uint64_t)(float)(v62 * 1000.0);
            *(_WORD *)&v230[20] = 2048;
            *(_QWORD *)&v230[22] = (uint64_t)(float)(v64 * 1000.0);
            *(_WORD *)&v230[30] = 2048;
            v231 = *((float *)&v236 + 2);
            LOWORD(v232[0]) = 1024;
            *(_DWORD *)((char *)v232 + 2) = v76;
            WORD3(v232[0]) = 1024;
            DWORD2(v232[0]) = v77;
            WORD6(v232[0]) = 1024;
            *(_DWORD *)((char *)v232 + 14) = v78;
            WORD1(v232[1]) = 1024;
            DWORD1(v232[1]) = v79;
            WORD4(v232[1]) = 1024;
            *(_DWORD *)((char *)&v232[1] + 10) = v80;
            HIWORD(v232[1]) = 2048;
            *(_QWORD *)&v232[2] = v81;
            WORD4(v232[2]) = 2048;
            *(_QWORD *)((char *)&v232[2] + 10) = v82;
            WORD1(v232[3]) = 1024;
            DWORD1(v232[3]) = v83;
            WORD4(v232[3]) = 2048;
            *(_QWORD *)((char *)&v232[3] + 10) = v84;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d,userMets,%f,wrMets,%f,rawWRMets,%f,physicalEffortMets, %f, rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s,rawHRMets,%f,rawFMMets,%f,totalCalories,%lld,basalCalories,%lld,VectorMag,%f,pushCount,%d,activityWithoutOverride,%d,isStanding,%d,isMotionOverrideSet,%d, mediaType, %d,pedDistance,%f,pedRawDistance,%f,distanceSource,%hu,currentPace,%f", buf, 0xFAu);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v10 = v66;
            v61 = v64;
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            *((float *)&v147 + 1) = v54;
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_102146C78);
            v122 = qword_10229FC98;
            v123 = *(_QWORD *)(a1 + 40);
            v146 = *(_QWORD *)(v123 + 128);
            v124 = *(_QWORD *)(a1 + 112) + *(_QWORD *)(a1 + 104) - 1;
            v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((v124 >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * (v124 & 0x1FF));
            HIDWORD(v145) = *(_DWORD *)(v123 + 152);
            v126 = v184;
            v127 = v183;
            sub_100236BFC(v123, v181);
            v85 = (uint64_t)(float)(v62 * 1000.0);
            v86 = (uint64_t)(float)(v61 * 1000.0);
            v128 = v127;
            v87 = v52;
            v54 = *((float *)&v147 + 1);
            v129 = *(_QWORD *)(a1 + 40);
            if (v182 >= 0)
              v130 = v181;
            else
              v130 = (void **)v181[0];
            v131 = *(_DWORD *)(v129 + 520);
            v132 = *(_DWORD *)(v129 + 288);
            v133 = *(unsigned __int8 *)(v129 + 324);
            v134 = *(unsigned __int8 *)(v129 + 352);
            v135 = *(_QWORD *)(v129 + 328);
            v137 = *(_QWORD *)(v129 + 408);
            v136 = *(_QWORD *)(v129 + 416);
            v138 = *(unsigned __int8 *)(v129 + 542);
            v139 = *(_QWORD *)(v129 + 448);
            *(_DWORD *)__p = 134224898;
            *(_QWORD *)&__p[4] = v146;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v11;
            *(_WORD *)&__p[22] = 2048;
            *(_QWORD *)&__p[24] = v125;
            LOWORD(v205) = 1024;
            *(_DWORD *)((char *)&v205 + 2) = HIDWORD(v145);
            WORD3(v205) = 2048;
            *((double *)&v205 + 1) = v126;
            *(_WORD *)v206 = 2048;
            *(double *)&v206[2] = *((float *)&v147 + 1);
            *(_WORD *)&v206[10] = 2048;
            *(double *)&v206[12] = v171;
            *(_WORD *)&v206[20] = 2048;
            *(double *)&v206[22] = v172;
            *(_WORD *)&v206[30] = 2048;
            *(double *)&v206[32] = v52;
            *(_WORD *)&v206[40] = 2048;
            *(double *)&v206[42] = v128;
            *(_WORD *)&v206[50] = 2048;
            *(double *)&v206[52] = v25;
            *(_WORD *)&v206[60] = 2048;
            *(double *)&v206[62] = v179;
            *(_WORD *)&v206[70] = 1024;
            *(_DWORD *)&v206[72] = v58;
            *(_WORD *)&v206[76] = 2080;
            *(_QWORD *)&v206[78] = v130;
            *(_WORD *)&v206[86] = 2048;
            *(double *)&v206[88] = v173;
            *(_WORD *)&v206[96] = 2048;
            *(double *)&v206[98] = v174;
            *(_WORD *)&v206[106] = 2048;
            *(_QWORD *)&v206[108] = (uint64_t)(float)(v62 * 1000.0);
            *(_WORD *)&v206[116] = 2048;
            *(_QWORD *)&v206[118] = v86;
            *(_WORD *)&v206[126] = 2048;
            v207 = *((float *)&v236 + 2);
            v208 = 1024;
            v209 = v131;
            v210 = 1024;
            v211 = v132;
            v212 = 1024;
            v213 = v133;
            v214 = 1024;
            v215 = v134;
            v216 = 1024;
            v217 = v135;
            v218 = 2048;
            v219 = v137;
            v220 = 2048;
            v221 = v136;
            v222 = 1024;
            v223 = v138;
            v224 = 2048;
            v225 = v139;
            LODWORD(v144) = 250;
            v140 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v122, 1, "METS consumed,startTime,%.3f,computeTime,%.3f,now,%.3f,activity,%d,userMets,%f,wrMets,%f,rawWRMets,%f,physicalEffortMets, %f, rawTruthMets,%f,avgTruthMets,%f,basalMets,%f,duration,%lf,stored,%d,%s,rawHRMets,%f,rawFMMets,%f,totalCalories,%lld,basalCalories,%lld,VectorMag,%f,pushCount,%d,activityWithoutOverride,%d,isStanding,%d,isMotionOverrideSet,%d, mediaType, %d,pedDistance,%f,pedRawDistance,%f,distanceSource,%hu,currentPace,%f", COERCE_DOUBLE(__p), v144, v145, v146, v147, *(double *)&v148, v149,
                             v150,
                             v151.f64[0],
                             v151.f64[1],
                             v152,
                             *(double *)&v153,
                             (_DWORD)v154,
                             v155,
                             *(double *)&v156,
                             *(double *)&v157,
                             v158,
                             v159,
                             *(double *)&v160,
                             (_DWORD)v161,
                             (_DWORD)v162,
                             (_DWORD)v163,
                             (_DWORD)v164,
                             (_DWORD)v165,
                             *(double *)&v166,
                             *(double *)&v167,
                             (_DWORD)v168,
                             *(double *)&v169);
            if (v182 < 0)
              operator delete(v181[0]);
            sub_100512490("Generic", 1, 0, 2, "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)", "%s\n", v140);
            if (v140 != buf)
              free(v140);
          }
          else
          {
            v85 = (uint64_t)(float)(v62 * 1000.0);
            v86 = (uint64_t)(float)(v61 * 1000.0);
            v87 = v52;
          }
          v207 = 0.0;
          v88 = *(_QWORD *)(a1 + 40);
          v89 = vcvtq_f64_f32(*(float32x2_t *)(v88 + 1372));
          memset(&v206[64], 0, 64);
          memset(&v206[32], 0, 32);
          memset(v206, 0, 40);
          *(_OWORD *)&__p[16] = 0u;
          v205 = 0u;
          *(_OWORD *)__p = 0u;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v88 + 128);
          *(_DWORD *)&__p[24] = *(_DWORD *)(v88 + 152);
          __p[28] = *(_BYTE *)(v88 + 352);
          __p[29] = *(_BYTE *)(v88 + 184);
          v90 = v184;
          *(double *)&v205 = v184;
          *((double *)&v205 + 1) = v183;
          *(_QWORD *)v206 = v85;
          *(_QWORD *)&v206[8] = v86;
          *(_OWORD *)&v206[16] = *(unint64_t *)&v179;
          *(_DWORD *)&v206[40] = v195;
          v91 = *(double *)(v88 + 840);
          *(_DWORD *)&v206[56] = *(_DWORD *)(v88 + 832);
          *(float64x2_t *)&v206[64] = v89;
          v206[80] = *(double *)(v88 + 616) > 0.0;
          v92 = *(int8x16_t *)(v88 + 448);
          *(double *)&v206[48] = v91 * *(double *)v92.i64;
          *(int8x16_t *)&v206[88] = vextq_s8(v92, v92, 8uLL);
          v206[104] = *(_BYTE *)(v88 + 528) == 1;
          *(float *)&v206[108] = v54;
          v93 = *(_DWORD *)(v88 + 520);
          *(_DWORD *)&v206[112] = *(_DWORD *)(v88 + 400);
          *(_DWORD *)&v206[116] = v93;
          *(double *)&v206[120] = v87;
          LOBYTE(v207) = v58;
          uuid_copy(&v206[24], (const unsigned __int8 *)(v88 + 354));
          WORD4(v232[23]) = 0;
          LODWORD(v232[27]) = 0;
          DWORD2(v232[42]) = 0;
          *((_QWORD *)&v232[68] + 1) = 0;
          LODWORD(v232[69]) = 0;
          BYTE4(v232[69]) = 0;
          memset(v232, 0, 24);
          memset(&v232[2], 0, 226);
          *((_QWORD *)&v232[16] + 1) = 0;
          memset(&v232[17], 0, 20);
          *(_OWORD *)((char *)&v232[18] + 8) = 0u;
          *(_OWORD *)((char *)&v232[19] + 8) = 0u;
          *(_OWORD *)((char *)&v232[20] + 8) = 0u;
          *(_OWORD *)((char *)&v232[21] + 8) = 0u;
          DWORD2(v232[22]) = 0;
          memset(&v232[24], 0, 33);
          *(_QWORD *)((char *)&v232[26] + 4) = 0;
          *(_DWORD *)((char *)&v232[26] + 11) = 0;
          *((_QWORD *)v169 + 1) = 0;
          *((_QWORD *)v169 + 2) = 0;
          *(_QWORD *)v169 = 0;
          v169[24] = 0;
          *(_QWORD *)v168 = 0;
          *((_QWORD *)v168 + 1) = 0;
          *((_DWORD *)v168 + 6) = 0;
          *((_QWORD *)v168 + 2) = 0;
          *(_OWORD *)((char *)v167 + 76) = 0u;
          v167[3] = 0u;
          v167[4] = 0u;
          v167[1] = 0u;
          v167[2] = 0u;
          *v167 = 0u;
          *(_OWORD *)((char *)v166 + 57) = 0u;
          v166[2] = 0u;
          v166[3] = 0u;
          *v166 = 0u;
          v166[1] = 0u;
          *((_DWORD *)v165 + 8) = 0;
          *v165 = 0u;
          v165[1] = 0u;
          *v164 = 0;
          v164[1] = 0;
          *(_QWORD *)((char *)v164 + 13) = 0;
          *v163 = 0;
          *((_DWORD *)v162 + 36) = 0;
          *((_OWORD *)v162 + 7) = 0u;
          *((_OWORD *)v162 + 8) = 0u;
          *((_OWORD *)v162 + 5) = 0u;
          *((_OWORD *)v162 + 6) = 0u;
          *((_OWORD *)v162 + 3) = 0u;
          *((_OWORD *)v162 + 4) = 0u;
          *((_OWORD *)v162 + 1) = 0u;
          *((_OWORD *)v162 + 2) = 0u;
          *(_OWORD *)v162 = 0u;
          *((_DWORD *)v161 + 24) = 0;
          v161[4] = 0u;
          v161[5] = 0u;
          v161[2] = 0u;
          v161[3] = 0u;
          *v161 = 0u;
          v161[1] = 0u;
          *(_QWORD *)v160 = 0;
          *((_QWORD *)v160 + 1) = 0;
          *((_DWORD *)v160 + 4) = 0;
          *(_QWORD *)v159 = 0;
          *((_QWORD *)v159 + 1) = 0;
          *((_DWORD *)v159 + 4) = 0;
          *v158 = 0;
          v158[1] = 0;
          *(_QWORD *)((char *)v158 + 21) = 0;
          v158[2] = 0;
          *(_QWORD *)v157 = 0;
          *((_QWORD *)v157 + 1) = 0;
          *((_DWORD *)v157 + 4) = 0;
          *(_QWORD *)v156 = 0;
          *((_QWORD *)v156 + 1) = 0;
          *((_DWORD *)v156 + 6) = 0;
          *((_QWORD *)v156 + 2) = 0;
          *(_QWORD *)v155 = 0;
          *((_QWORD *)v155 + 1) = 0;
          *((_DWORD *)v155 + 4) = 0;
          *(_QWORD *)v154 = 0;
          *((_QWORD *)v154 + 1) = 0;
          v154[24] = 0;
          *((_QWORD *)v154 + 2) = 0;
          *v153 = 0;
          v153[1] = 0;
          v227 = v205;
          *(_OWORD *)v228 = *(_OWORD *)v206;
          *(_OWORD *)buf = *(_OWORD *)__p;
          *(_OWORD *)&buf[16] = *(_OWORD *)&__p[16];
          *(_OWORD *)&v229[16] = *(_OWORD *)&v206[48];
          *(_OWORD *)&v229[32] = *(_OWORD *)&v206[64];
          *(_OWORD *)&v228[16] = *(_OWORD *)&v206[16];
          *(_OWORD *)v229 = *(_OWORD *)&v206[32];
          *(_QWORD *)&v232[23] = 0;
          v231 = v207;
          *(_OWORD *)v230 = *(_OWORD *)&v206[96];
          *(_OWORD *)&v230[16] = *(_OWORD *)&v206[112];
          v94 = (const void *)(*(_QWORD *)(a1 + 40) + 112);
          *(_OWORD *)&v229[48] = *(_OWORD *)&v206[80];
          memcpy(v232, v94, 0x4D8uLL);
          v95 = *(_QWORD *)(a1 + 440);
          if (v95)
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v95 + 8))(v95, buf);
          if (v58)
          {
            v96 = *(_QWORD *)(a1 + 40);
            v97 = *(double *)(v96 + 448);
            v98 = HIDWORD(v178);
            if (*(double *)(v96 + 408) != *(double *)(v96 + 416))
              v98 = HIDWORD(v178) + 1;
            HIDWORD(v178) = v98;
            v99 = v97 > 1.11847 || v97 == 0.0;
            v100 = HIDWORD(v176);
            if (v195 == 1)
              v100 = HIDWORD(v176) + 1;
            HIDWORD(v176) = v100;
            v101 = v177;
            if (v195 == 3)
              v101 = v177 + 1;
            LODWORD(v177) = v101;
            if (v195 == 2)
              v10 = (v10 + 1);
            else
              v10 = v10;
            if (v190.f32[0] != 0.0 && v190.f32[1] != 0.0)
            {
              v102 = vaddq_f64(vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(vmul_n_f32(v190, *(float *)(v96 + 1364))), v179), (float64x2_t)vdupq_n_s64(0x40AC200000000000uLL)), vcvtq_f64_f32(*(float32x2_t *)&v151.f64[0]));
              *(float32x2_t *)&v102.f64[0] = vcvt_f32_f64(v102);
              v151 = v102;
            }
            v103 = *(_DWORD *)(v96 + 700);
            if (v103 == 2)
            {
              ++HIDWORD(v170);
            }
            else if (v103 == 1)
            {
              LODWORD(v170) = v170 + 1;
            }
            if (*(_DWORD *)&v206[56] == 3)
            {
              ++LODWORD(v150);
            }
            else if (*(_DWORD *)&v206[56] == 1)
            {
              ++HIDWORD(v150);
            }
            v105 = v206[80];
            v106 = *(_DWORD *)(v96 + 400);
            v107 = *(unsigned __int8 *)(v96 + 489);
            v108 = sub_10009ED0C();
            sub_10134C70C(v108, v193);
            v109 = sub_10009ED0C();
            sub_10134CE88(v109, (uint64_t)v90);
            if (!(_BYTE)v240)
            {
              v110 = sub_100BFA9D4();
              sub_100BFAD2C(v110, v90, v186);
            }
            v111 = (dispatch_queue_t *)sub_10009EC60();
            sub_100EA50F4(v111, v90);
            sub_1005CBA50(v11, v112, *(_QWORD *)(a1 + 40), (uint64_t)v235, (uint64_t)__p, (int *)&v190);
            v113 = v10;
            v114 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 1392);
            sub_100197040();
            v115 = sub_100195F08();
            ++HIDWORD(v177);
            LODWORD(v176) = v176 + v105;
            LODWORD(v178) = v178 + v107;
            v175 += v99;
            if (v114)
              v116 = v115;
            else
              v116 = 0;
            if (v116 == 1)
            {
              v117 = sub_100BFA9D4();
              v10 = v113;
              v202[12] = v239;
              v202[13] = v240;
              v203 = v241;
              v202[8] = v235[8];
              v202[9] = v236;
              v202[10] = v237;
              v202[11] = v238;
              v202[4] = v235[4];
              v202[5] = v235[5];
              v202[6] = v235[6];
              v202[7] = v235[7];
              v202[0] = v235[0];
              v202[1] = v235[1];
              v202[2] = v235[2];
              v202[3] = v235[3];
              sub_100BFAAA8(v117, v106, (uint64_t)v202, (float)*(uint64_t *)v206, v194);
            }
            else
            {
              v10 = v113;
            }
          }
          *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_101B9DFC0);
          sub_10047F604(v180, 1);
          v19 = 0;
          v104 = 1;
        }
        else
        {
          v104 = 0;
          v19 = 3;
        }
        v118 = v199;
        if (v199)
        {
          p_shared_owners = (unint64_t *)&v199->__shared_owners_;
          do
            v120 = __ldaxr(p_shared_owners);
          while (__stlxr(v120 - 1, p_shared_owners));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        if ((v104 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102146C78);
        v18 = qword_10229FC98;
        if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Popping out an activity since there's no activity associated with current time.  This shouldn't happen", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_102146C78);
          *(_WORD *)__p = 0;
          LODWORD(v144) = 2;
          v121 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "Popping out an activity since there's no activity associated with current time.  This shouldn't happen", __p, *(_QWORD *)&v144);
          sub_100512490("Generic", 1, 0, 0, "void CLCalorieController::updateCalorimetry(CFAbsoluteTime)", "%s\n", v121);
          if (v121 != buf)
            free(v121);
        }
        *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_101B9DFC0);
        sub_10047F604(v180, 1);
      }
      v19 = 0;
LABEL_26:
      if (v19)
        goto LABEL_148;
    }
  }
}

void sub_10009D404(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

BOOL sub_10009D4A4(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0x11uLL))
                   + 232 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0x11uLL));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_100CE1758(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_10009D5DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v18, &v16);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1) == *((_QWORD *)&v17 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v19 == *((_QWORD *)&v19 + 1))
        v4 = *(_QWORD *)(v19 - 8) + 3944;
      v5 = *(_OWORD *)(v4 - 232);
      v6 = *(_OWORD *)(v4 - 200);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(v4 - 216);
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)a2 = v5;
      v7 = *(_OWORD *)(v4 - 184);
      v8 = *(_OWORD *)(v4 - 168);
      v9 = *(_OWORD *)(v4 - 136);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v4 - 152);
      *(_OWORD *)(a2 + 96) = v9;
      *(_OWORD *)(a2 + 48) = v7;
      *(_OWORD *)(a2 + 64) = v8;
      v10 = *(_OWORD *)(v4 - 120);
      v11 = *(_OWORD *)(v4 - 104);
      v12 = *(_OWORD *)(v4 - 72);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(v4 - 88);
      *(_OWORD *)(a2 + 160) = v12;
      *(_OWORD *)(a2 + 112) = v10;
      *(_OWORD *)(a2 + 128) = v11;
      v13 = *(_OWORD *)(v4 - 56);
      v14 = *(_OWORD *)(v4 - 40);
      v15 = *(_OWORD *)(v4 - 24);
      *(_QWORD *)(a2 + 224) = *(_QWORD *)(v4 - 8);
      *(_OWORD *)(a2 + 192) = v14;
      *(_OWORD *)(a2 + 208) = v15;
      *(_OWORD *)(a2 + 176) = v13;
      return 1;
    }
  }
  return result;
}

float sub_10009D6D8(float a1, float a2)
{
  float v2;
  double v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v8;
  uint8_t buf[4];
  double v10;
  __int16 v11;
  double v12;

  v2 = a2;
  if (a1 < a2)
    return v2;
  v3 = a1;
  if (a1 <= 30.0)
  {
    v2 = a1;
    if (a1 > 20.0)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102146C78);
      v6 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        v10 = v3;
        v11 = 2048;
        v12 = 20.0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "In-human MET spike,%f,setting to upper bound,%f", buf, 0x16u);
      }
      v2 = 20.0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102146C78);
        v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "In-human MET spike,%f,setting to upper bound,%f");
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102146C78);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      v10 = v3;
      v11 = 2048;
      v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "MET spike,%f,setting to basal,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102146C78);
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 16, "MET spike,%f,setting to basal,%f");
LABEL_21:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "float CLCalorieController::sanitizeMets(float, float)", "%s\n", v5);
      if (v8 != buf)
        free(v8);
    }
  }
  return v2;
}

_QWORD *sub_10009D9DC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a3 + 352))
    v4 = *(_QWORD *)(a3 + 328) == 2;
  else
    v4 = 0;
  if (v4)
  {
    v6 = result[7];
    v5 = result[8];
  }
  else if (*(_DWORD *)(a2 + 8) == 5)
  {
    v6 = result[1];
    v5 = result[2];
  }
  else
  {
    v6 = result[5];
    v5 = result[6];
  }
  *a4 = v6;
  a4[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t sub_10009DA30(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  _BYTE v7[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), v7, a3);
    if ((_DWORD)result)
    {
      if (v7[208])
        return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 32))(a1, a2, a3);
      result = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a2 + 32) + 48))(*(_QWORD *)(a2 + 32), a3);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 32))(a1, a2, a3);
    }
  }
  return result;
}

uint64_t sub_10009DB00(double a1, uint64_t a2, _QWORD **a3)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  _DWORD v9[52];
  char v10;

  (*(void (**)(_QWORD *, _DWORD *))(*a3[6] + 24))(a3[6], v9);
  v5 = CLMotionActivity::isTypePedestrian(v9[2]) ^ 1;
  if (v10)
    v6 = v5;
  else
    v6 = 1;
  v7 = (*(uint64_t (**)(_QWORD *, double))(*a3[5] + 48))(a3[5], a1);
  result = v6 & v7;
  if ((v6 & 1) == 0)
  {
    if (v7)
      return (*(uint64_t (**)(_QWORD *, double))(*a3[3] + 48))(a3[3], a1);
  }
  return result;
}

uint64_t sub_10009DBC8(uint64_t a1, uint64_t a2, double a3)
{
  int v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = 24;
  if (v6)
    v7 = 8;
  return (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + v7) + 32))(*(_QWORD *)(a1 + v7), a2, a3);
}

BOOL sub_10009DC24(uint64_t a1, uint64_t a2)
{
  return sub_10009DDEC(*(double *)(a2 + 448), *(float *)(a2 + 1360));
}

uint64_t sub_10009DC34(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v10, &v8);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1) == *((_QWORD *)&v9 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v11 == *((_QWORD *)&v11 + 1))
        v4 = *(_QWORD *)(v11 - 8) + 4096;
      v5 = *(_OWORD *)(v4 - 64);
      v6 = *(_OWORD *)(v4 - 48);
      v7 = *(_OWORD *)(v4 - 16);
      a2[2] = *(_OWORD *)(v4 - 32);
      a2[3] = v7;
      *a2 = v5;
      a2[1] = v6;
      return 1;
    }
  }
  return result;
}

BOOL sub_10009DCC8(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 8 * (*(_QWORD *)(a1 + 56) >> 6));
  if (*(_QWORD *)(a1 + 40) == v4)
    v6 = 0;
  else
    v6 = *v5 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (uint64_t *)(v9 + 8 * (v8 >> 6));
  if (*(_QWORD *)(a1 + 40) == v9)
    v11 = 0;
  else
    v11 = *v10 + ((v8 & 0x3F) << 6);
  v12 = a3[3];
  if (v11 != v12)
  {
    v13 = *v10;
    v14 = 1.79769313e308;
    v15 = v11;
    v16 = v10;
    while (1)
    {
      v17 = v15;
      if (v15 == v13)
        v17 = *(v16 - 1) + 4096;
      v18 = vabdd_f64(*(double *)(v17 - 24), a4);
      if (v18 < v14 && v18 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v15;
        v13 = *v16;
        v19 = v15;
        if (v15 == *v16)
          v19 = *(v16 - 1) + 4096;
        v14 = v18;
        if (*(double *)(v19 - 24) == a4)
          break;
      }
      if (v15 == v13)
      {
        v20 = *--v16;
        v13 = v20;
        v15 = v20 + 4096;
      }
      v15 -= 64;
      v12 = a3[3];
      if (v15 == v12)
        return v12 != *(_QWORD *)(a2 + 24);
    }
    v12 = a3[3];
  }
  return v12 != *(_QWORD *)(a2 + 24);
}

BOOL sub_10009DDEC(double a1, double a2)
{
  float v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;

  v2 = a2 * 39.3700981;
  v3 = fmax((v2 + -59.0) * 0.0375 + 4.2, 4.2);
  v4 = 2.23693991 / v3;
  v5 = v3 <= 4.8;
  v6 = 0.466029147;
  if (v5)
    v6 = v4;
  return v6 > a1 && a1 > 0.0;
}

BOOL sub_10009DE5C(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  NSObject *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char *v21;
  double v22;
  _OWORD v23[2];
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v4 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v4 + *(_BYTE *)(a1 + 56) - 1));
  else
    v5 = -1.79769313e308;
  if (v5 >= a2 && sub_100218CAC(a1, (uint64_t)v24, v23, a2)
    || (v6 = *(double *)(a1 + 104), v6 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) >= a2)
    || *(_BYTE *)(a1 + 121))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v7 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2);
      *(_DWORD *)buf = 136315650;
      v32 = v8;
      v33 = 2048;
      v34 = a2;
      v35 = 2048;
      v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s is ready at, %f, timeout, %f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v18 = qword_10229FC98;
      v19 = *(_QWORD *)(a1 + 8);
      v20 = (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2);
      v25 = 136315650;
      v26 = v19;
      v27 = 2048;
      v28 = a2;
      v29 = 2048;
      v30 = v20;
      LODWORD(v22) = 32;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "%s is ready at, %f, timeout, %f", (const char *)&v25, v22, *(double *)v23);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    return 1;
  }
  else
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v11 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2);
      *(_DWORD *)buf = 136315650;
      v32 = v12;
      v33 = 2048;
      v34 = a2;
      v35 = 2048;
      v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s is not ready at, %f, timeout, %f", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v14 = qword_10229FC98;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2);
      v25 = 136315650;
      v26 = v15;
      v27 = 2048;
      v28 = a2;
      v29 = 2048;
      v30 = v16;
      LODWORD(v22) = 32;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "%s is not ready at, %f, timeout, %f", (const char *)&v25, v22, *(double *)v23);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
      return 0;
    }
  }
  return result;
}

double sub_10009E29C(uint64_t a1, double a2)
{
  double v2;
  uint64_t v3;
  double v4;

  v2 = 2.0;
  if (*(_BYTE *)(a1 + 120) && !*(_BYTE *)(a1 + 123))
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      v4 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                 + (((unint64_t)(v3 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v3 + *(_BYTE *)(a1 + 56) - 1))
         + 180.0
         + 20.0;
    else
      v4 = -1.79769313e308;
    v2 = v4 - a2;
  }
  *(double *)(a1 + 96) = v2;
  return v2;
}

BOOL sub_10009E310(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((v4 + *(_QWORD *)(a1 + 56) - 1) / 0x17uLL))
                   + 176 * ((v4 + *(_QWORD *)(a1 + 56) - 1) % 0x17uLL)
                   + 8);
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_1011DA89C(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

double sub_10009E454(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

double sub_10009E45C(double a1, uint64_t a2, int a3, _QWORD *a4, float *a5)
{
  double v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double *v23;
  double *v24;
  void **v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  void *v32;
  float v33;
  double v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;

  v6 = a1;
  if (!a3)
  {
    v13 = *(unsigned int *)a5;
    *(double *)&v39 = a1;
    *((_QWORD *)&v39 + 1) = v13;
    sub_10009E64C(a4, &v39);
    v14 = (void **)a4[1];
    v6 = 0.0;
    v15 = a4[2] - (_QWORD)v14;
    if (!v15)
      return v6;
    v16 = a4[4];
    v17 = &v14[v16 >> 8];
    v18 = *v17;
    v19 = (uint64_t)*v17 + 16 * v16;
    v20 = a4[5] + v16;
    v21 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v21)
      return v6;
    v22 = 0.0;
    v23 = (double *)*v17;
    v24 = (double *)((char *)*v17 + 16 * v16);
    v25 = &v14[v16 >> 8];
    do
    {
      v26 = *v24;
      v24 += 2;
      v27 = v26;
      if ((char *)v24 - (char *)v23 == 4096)
      {
        v28 = (double *)v25[1];
        ++v25;
        v23 = v28;
        v24 = v28;
      }
      v22 = v22 + v27;
    }
    while (v24 != (double *)v21);
    v6 = 0.0;
    if (v22 < 10.0)
      return v6;
    v29 = (uint64_t)v14[v20 >> 8] + 16 * v20;
    if (v19 == v29)
    {
      v34 = 0.0;
    }
    else
    {
      v30 = 0.0;
      do
      {
        v31 = v19 + 16;
        if (v19 + 16 - (_QWORD)v18 == 4096)
        {
          v32 = v17[1];
          ++v17;
          v18 = v32;
          v31 = (uint64_t)v32;
        }
        v33 = *(double *)v19 * *(float *)(v19 + 8);
        v30 = v30 + v33;
        v19 = v31;
      }
      while (v31 != v29);
      v34 = v30;
    }
    v35 = v34 / v22;
    *a5 = v35;
    a4[5] = 0;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v14);
        v36 = a4[2];
        v14 = (void **)(a4[1] + 8);
        a4[1] = v14;
        v15 = v36 - (_QWORD)v14;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      v37 = 128;
    }
    else
    {
      if (v15 >> 3 != 2)
        return v22;
      v37 = 256;
    }
    a4[4] = v37;
    return v22;
  }
  v7 = (void **)a4[1];
  v8 = a4[2];
  a4[5] = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = a4[2];
      v7 = (void **)(a4[1] + 8);
      a4[1] = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 128;
    goto LABEL_21;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 256;
LABEL_21:
    a4[4] = v11;
  }
  return v6;
}

uint64_t sub_10009E64C(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1005CC308(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  v8 = a1[4];
  v9 = a1[5] + 1;
  a1[5] = v9;
  v10 = v8 + v9;
  v11 = a1[1];
  v12 = (_QWORD *)(v11 + 8 * (v10 >> 8));
  v13 = *v12 + 16 * v10;
  if (a1[2] == v11)
    v13 = 0;
  if (v13 == *v12)
    v13 = *(v12 - 1) + 4096;
  return v13 - 16;
}

double sub_10009E708(uint64_t a1, double a2, double a3)
{
  double v6;
  double v7;

  v7 = a3;
  if (a2 - *(double *)(a1 + 88) > 11.0)
    sub_10047F1D4((_QWORD *)a1);
  sub_10009E858(a1, &v7);
  *(double *)(a1 + 88) = a2;
  v6 = -1.0;
  sub_10009E784((_QWORD *)a1, 2, &v6);
  return v6;
}

uint64_t sub_10009E784(_QWORD *a1, int a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  float v10;
  int v11;
  _QWORD *v12;
  int i;
  _QWORD *v14;

  v3 = a1[10];
  if (!v3)
    return 0;
  if (a2 == 2)
  {
    v10 = (double)v3 * 0.5;
    v11 = vcvtms_s32_f32(v10);
    v12 = (_QWORD *)a1[8];
    if (v11 < 1)
    {
      v7 = (_QWORD *)a1[8];
    }
    else
    {
      for (i = 0; i != v11; ++i)
      {
        v14 = (_QWORD *)v12[1];
        if (v14)
        {
          do
          {
            v7 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v12[2];
            v8 = *v7 == (_QWORD)v12;
            v12 = v7;
          }
          while (!v8);
        }
        v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      v6 = (_QWORD *)a1[9];
      v4 = a1 + 9;
      v5 = v6;
      if (v6)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  v7 = (_QWORD *)a1[8];
LABEL_22:
  *a3 = v7[4];
  return 1;
}

void sub_10009E858(uint64_t a1, double *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;

  v3 = (_QWORD *)(a1 + 16);
  v4 = (uint64_t **)(a1 + 64);
  v6 = sub_10009E97C((uint64_t **)(a1 + 64), a2);
  sub_10009EA08(v3, &v6);
  if (*(_QWORD *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(_QWORD *)(a1 + 48) & 0x1FFLL));
    sub_10008A9F0(v4, v5);
    operator delete(v5);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_101B9DFC0);
    sub_10047F604((uint64_t)v3, 1);
  }
}

uint64_t sub_10009E904(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  sub_10008A9F0((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_10009E97C(uint64_t **a1, double *a2)
{
  uint64_t *v4;
  double v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *(_QWORD *)a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((double *)v7 + 4))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_10009EA08(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10047F2F0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10009EA8C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, float a10, __int128 a11, int a12)
{
  NSObject *v22;
  _QWORD block[5];
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  int v32;
  __int128 v33;
  int v34;

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v22 = *(NSObject **)(a1 + 480);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020AD14;
  block[3] = &unk_1021AB840;
  block[4] = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v30 = a9;
  v31 = a10;
  v32 = a8;
  v33 = a11;
  v34 = a12;
  dispatch_sync(v22, block);
}

uint64_t sub_10009EB6C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), &v9, a3);
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(v7 + 8) = v11;
      *(_BYTE *)(v7 + 9) = CLMotionActivity::isTypeIndoorPedestrian(v10);
      v8 = *(_QWORD *)(a1 + 24);
      *(_BYTE *)(v8 + 8) = v11;
      result = CLMotionActivity::isTypeIndoorPedestrian(v10);
      *(_BYTE *)(v8 + 9) = result;
      if (v11)
      {
        sub_1004C5730(*(_QWORD *)(a2 + 24));
        sub_1004C5730(*(_QWORD *)(a2 + 8));
        result = CLMotionActivity::isTypeIndoorPedestrian(v10);
        if ((_DWORD)result)
          return sub_1004C5730(*(_QWORD *)(a2 + 64));
      }
    }
  }
  return result;
}

uint64_t sub_10009EC60()
{
  if (qword_102308D40 != -1)
    dispatch_once(&qword_102308D40, &stru_102190188);
  return qword_102311898;
}

void sub_10009ECA0(dispatch_queue_t *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*a1);
  v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020ACD0;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_10009ED0C()
{
  if (qword_10230E3E8 != -1)
    dispatch_once(&qword_10230E3E8, &stru_1021AFF08);
  return qword_102313FC0;
}

BOOL sub_10009ED4C(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  _BYTE *v6;
  double v7;
  double v8;
  _OWORD v10[2];
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    v5 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                               + (((unint64_t)(v4 + *(_QWORD *)(a1 + 56) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v4 + *(_QWORD *)(a1 + 56) - 1) & 0x3F) << 6)
                   + 40);
  else
    v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    if (sub_10009DCC8(a1, (uint64_t)v11, v10, a2))
      return 1;
    v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }
  v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, a2) < a2)
        return 0;
    }
LABEL_11:
    if (*v6)
      return 1;
  }
  return *(_BYTE *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_10009EE70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  NSObject *v6;
  _BYTE *v7;
  id v8;
  double Current;
  double v10;
  double v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int **v20;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  double v41;
  _BYTE buf[12];
  __int16 v43;
  double v44;
  char v45;
  int v46;
  _BYTE *v47;
  _BYTE __p[1632];

  sub_100033ACC(a2);
  if ((sub_10018626C() & 1) != 0)
  {
    v4 = (void *)sub_1000A0810(*(_QWORD *)(a1 + 464));
    if (v4 && (v5 = v4, (objc_msgSend(v4, "isValid") & 1) != 0))
    {
      objc_msgSend(v5, "purgeOlderRecords");
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v5, "getBasicInfo");
        v7 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, fetching associated AP centroid from local store, %{private}s", buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v34 = qword_1022A0048;
        objc_msgSend(v5, "getBasicInfo");
        if (v45 >= 0)
          v35 = buf;
        else
          v35 = *(_BYTE **)buf;
        v46 = 136380675;
        v47 = v35;
        v36 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 0, "WifiAssociatedApCentroidStore, fetching associated AP centroid from local store, %{private}s", &v46, 12);
        if (v45 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v36);
        if (v36 != __p)
          free(v36);
      }
      v8 = objc_msgSend(v5, "fetchRecord:", sub_1000A0818(a1));
      if (v8)
      {
        Current = CFAbsoluteTimeGetCurrent();
        objc_msgSend(v8, "lastUpdated");
        if (qword_1022A0040 != -1)
        {
          v41 = v10;
          dispatch_once(&qword_1022A0040, &stru_102191998);
          v10 = v41;
        }
        v11 = Current - v10;
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v13 = objc_msgSend(objc_msgSend(v8, "description"), "UTF8String");
          *(_DWORD *)__p = 136380931;
          *(_QWORD *)&__p[4] = v13;
          *(_WORD *)&__p[12] = 2049;
          *(double *)&__p[14] = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, found associated AP centroid from local store: %{private}s, age: %{private}.1fs", __p, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102191998);
          v37 = qword_1022A0048;
          v38 = objc_msgSend(objc_msgSend(v8, "description"), "UTF8String");
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v38;
          v43 = 2049;
          v44 = v11;
          LODWORD(v40) = 22;
          v39 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v37, 0, "WifiAssociatedApCentroidStore, found associated AP centroid from local store: %{private}s, age: %{private}.1fs", buf, v40);
          sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v39);
          if (v39 != __p)
            free(v39);
        }
        objc_msgSend(v8, "latitude");
        *(_QWORD *)a2 = v14;
        objc_msgSend(v8, "longitude");
        *(_QWORD *)(a2 + 8) = v15;
        objc_msgSend(v8, "altitude");
        *(_QWORD *)(a2 + 16) = v16;
        objc_msgSend(v8, "horizontalAccuracy");
        *(_QWORD *)(a2 + 32) = v17;
        objc_msgSend(v8, "verticalAccuracy");
        *(_QWORD *)(a2 + 40) = v18;
        *(_DWORD *)(a2 + 52) = objc_msgSend(v8, "reach");
        objc_msgSend(v8, "stationaryTimeInSeconds");
        *(_QWORD *)(a1 + 1376) = v19;
        sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(v8, "loiType"), "UTF8String"));
        v20 = (int **)(a1 + 1352);
        if (*(char *)(a1 + 1375) < 0)
          operator delete(*v20);
        *(_OWORD *)v20 = *(_OWORD *)__p;
        *(_QWORD *)(a1 + 1368) = *(_QWORD *)&__p[16];
        if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
        {
          switch(*(_BYTE *)(a1 + 1375))
          {
            case 3:
              if (*(_WORD *)v20 != 31047 || *(_BYTE *)(a1 + 1354) != 109)
                goto LABEL_85;
              goto LABEL_61;
            case 4:
              v30 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 == 1701670728)
                goto LABEL_89;
              goto LABEL_72;
            case 6:
              if (*(_DWORD *)v20 != 1869112147 || *(_WORD *)(a1 + 1356) != 27759)
                goto LABEL_85;
              goto LABEL_79;
            case 7:
              goto LABEL_81;
            default:
              goto LABEL_85;
          }
        }
        switch(*(_QWORD *)(a1 + 1360))
        {
          case 3:
            if (*(_WORD *)*v20 != 31047 || *((_BYTE *)*v20 + 2) != 109)
              goto LABEL_85;
LABEL_61:
            v27 = 0;
            v28 = 1;
            v29 = 3;
            break;
          case 4:
            if (**v20 == 1701670728)
            {
LABEL_89:
              v29 = 0;
              v27 = 0;
            }
            else
            {
              v30 = **v20;
LABEL_72:
              if (v30 != 1802661719)
                goto LABEL_85;
              v27 = 0;
              v29 = 1;
            }
            v28 = 1;
            break;
          case 6:
            if (**v20 != 1869112147 || *((_WORD *)*v20 + 2) != 27759)
              goto LABEL_85;
LABEL_79:
            v27 = 0;
            v28 = 1;
            v29 = 2;
            break;
          case 7:
            v20 = (int **)*v20;
LABEL_81:
            if (*(_DWORD *)v20 != 1852534357 || *(_DWORD *)((char *)v20 + 3) != 1853321070)
              goto LABEL_85;
            v27 = -256;
            v28 = 1;
            v29 = 255;
            break;
          default:
LABEL_85:
            v29 = 0;
            v28 = 0;
            v27 = 0;
            break;
        }
        *(_QWORD *)(a1 + 1336) = v27 | v29;
        *(_BYTE *)(a1 + 1344) = v28;

        return;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v25 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, could not find associated AP centroid from local store", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        *(_WORD *)buf = 0;
        LODWORD(v40) = 2;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, could not find associated AP centroid from local store", buf, v40);
        sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v23);
LABEL_45:
        if (v23 != __p)
          free(v23);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v24 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as the store is invalid", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        *(_WORD *)buf = 0;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as the store is invalid", buf, 2);
        sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v23);
        goto LABEL_45;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as it is disabled by settings", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      *(_WORD *)buf = 0;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as it is disabled by settings", buf, 2);
      sub_100512490("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v23);
      goto LABEL_45;
    }
  }
}

void sub_10009F81C(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isValid"))
    sub_10009F85C(objc_msgSend(*(id *)(a1 + 32), "provider"), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(void **)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10009F85C(_QWORD *a1, uint64_t a2, int a3, void *a4)
{
  int v6;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  char *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  const char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  const char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  const char *v58;
  const char *v59;
  char *v60;
  int v61;
  unsigned int v62[3];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD __src[65];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  int v104;
  const char *v105;
  _BYTE v106[513];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  std::__shared_weak_count *v115;
  void *v116;
  char v117;
  std::__shared_weak_count *v118;
  id v119;

  if (a3 > 24)
  {
    if (a3 == 25)
    {
      if (CLClientGetError(a4, v62) && v62[0] <= 1)
      {
        LODWORD(__src[0]) = 9;
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(*a1 + 144))(a1, __src, 1, 0xFFFFFFFFLL);
      }
    }
    else if (a3 == 27)
    {
      v61 = 0;
      if (CLClientGetAuthorizationStatus(a4, &v61))
      {
        v6 = v61;
        *((_DWORD *)a1 + 45) = v61;
        if (v6 == 3)
        {
          LODWORD(__src[0]) = 9;
          (*(void (**)(_QWORD *, _QWORD *))(*a1 + 120))(a1, __src);
          *(_QWORD *)((char *)&__src[1] + 4) = 0;
          *(_QWORD *)((char *)__src + 4) = 0;
          *(_OWORD *)((char *)&__src[2] + 4) = xmmword_101BAFC90;
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)((char *)&__src[4] + 4) = _Q0;
          *(_OWORD *)((char *)&__src[6] + 4) = _Q0;
          *(_OWORD *)((char *)&__src[8] + 4) = _Q0;
          LODWORD(__src[0]) = 0xFFFF;
          HIDWORD(__src[10]) = 0;
          __src[11] = 0xBFF0000000000000;
          memset(&__src[12], 0, 20);
          *(_QWORD *)((char *)&__src[14] + 4) = 0xBFF0000000000000;
          HIDWORD(__src[15]) = 0x7FFFFFFF;
          memset(&__src[16], 0, 25);
          if (((*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 232))(a1, __src) & 1) == 0)
            sub_100BCD724((uint64_t)a1);
        }
        else
        {
          (*(void (**)(_QWORD *))(*a1 + 304))(a1);
          LODWORD(__src[0]) = 9;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(*a1 + 144))(a1, __src, 1, 0xFFFFFFFFLL);
        }
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v20 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          v21 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning BLP: Could not get authorization status (%s)", (uint8_t *)__src, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102178638);
          v22 = qword_1022A02D8;
          v23 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          v104 = 136315138;
          v105 = v23;
          _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, v22, 0, "#Warning BLP: Could not get authorization status (%s)", (const char *)&v104);
          v25 = (char *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v24);
          if (v25 != (char *)__src)
            free(v25);
        }
      }
      LODWORD(__src[0]) = 14;
      (*(void (**)(_QWORD *, _QWORD *, _QWORD, uint64_t))(*a1 + 144))(a1, __src, 0, 0xFFFFFFFFLL);
    }
  }
  else
  {
    if (a3)
    {
      if (a3 == 3)
      {
        LODWORD(__src[0]) = 9;
        (*(void (**)(_QWORD *, _QWORD *, _QWORD, uint64_t))(*a1 + 144))(a1, __src, 0, 0xFFFFFFFFLL);
      }
      return;
    }
    if (a1[17] == a2)
    {
      objc_msgSend(objc_msgSend(a4, "objectForKey:", CFSTR("LocationCount")), "integerValue");
      objc_msgSend(objc_msgSend(a4, "objectForKey:", CFSTR("Locations")), "bytes");
      sub_100129CA0((uint64_t)__src);
      operator new();
    }
    if (a1[18] == a2)
    {
      sub_100129CA0((uint64_t)&v104);
      if (CLClientGetLocation(a2, a4, &v104))
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        sub_1000A0754(a4, &v63);
        sub_1000A0750((uint64_t)__src, (uint64_t)&v63);
        memcpy(v106, __src, sizeof(v106));
        v26 = v96;
        v96 = 0u;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        v107 = v26;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v112 = v101;
        v113 = v102;
        v108 = v97;
        v109 = v98;
        v110 = v99;
        v111 = v100;
        v114 = v103;
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        LODWORD(__src[0]) = 39;
        (*(void (**)(_QWORD *, _QWORD *, int *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, __src, &v104, 0, 0xFFFFFFFFLL, 0);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v44 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          v45 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#Warning Could not get location from location event (%s)", (uint8_t *)__src, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102178638);
          v57 = qword_1022A02D8;
          v58 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          LODWORD(v63) = 136315138;
          *(_QWORD *)((char *)&v63 + 4) = v58;
          _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, v57, 0, "#Warning Could not get location from location event (%s)", (const char *)&v63);
          v60 = (char *)v59;
          sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v59);
          if (v60 != (char *)__src)
            free(v60);
        }
      }

      v46 = v118;
      if (v118)
      {
        v47 = (unint64_t *)&v118->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v117 < 0)
        operator delete(v116);
      v49 = v115;
      if (v115)
      {
        v50 = (unint64_t *)&v115->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v43 = __ldaxr(v52);
        while (__stlxr(v43 - 1, v52));
LABEL_93:
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    else
    {
      sub_100129CA0((uint64_t)&v104);
      if (CLClientGetLocation(a2, a4, &v104))
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        sub_1000A0754(a4, &v63);
        sub_1000A0750((uint64_t)__src, (uint64_t)&v63);
        memcpy(v106, __src, sizeof(v106));
        v13 = v96;
        v96 = 0u;
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        v107 = v13;
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v112 = v101;
        v113 = v102;
        v108 = v97;
        v109 = v98;
        v110 = v99;
        v111 = v100;
        v114 = v103;
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        LODWORD(__src[0]) = 0;
        (*(void (**)(_QWORD *, _QWORD *, int *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, __src, &v104, 0, 0xFFFFFFFFLL, 0);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v33 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          v34 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          LODWORD(__src[0]) = 136315138;
          *(_QWORD *)((char *)__src + 4) = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Could not get location from location event (%s)", (uint8_t *)__src, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102178638);
          v53 = qword_1022A02D8;
          v54 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
          LODWORD(v63) = 136315138;
          *(_QWORD *)((char *)&v63 + 4) = v54;
          _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, v53, 0, "#Warning Could not get location from location event (%s)", (const char *)&v63);
          v56 = (char *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)", "%s\n", v55);
          if (v56 != (char *)__src)
            free(v56);
        }
      }

      v35 = v118;
      if (v118)
      {
        v36 = (unint64_t *)&v118->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v117 < 0)
        operator delete(v116);
      v38 = v115;
      if (v115)
      {
        v39 = (unint64_t *)&v115->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        goto LABEL_93;
      }
    }
  }
}

void sub_1000A0500(_Unwind_Exception *a1)
{
  sub_1004B4F0C((uint64_t)&STACK[0x8B0]);
  _Unwind_Resume(a1);
}

double sub_1000A059C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  v7 = *(_OWORD *)(a2 + 248);
  v8 = *(_OWORD *)(a2 + 264);
  v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 280) = v9;
  *(_OWORD *)(a1 + 248) = v7;
  v10 = *(_OWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  *(_BYTE *)(a1 + 425) = *(_BYTE *)(a2 + 425);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_BYTE *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 544) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = -1;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 592) = _Q0;
  *(_WORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 610) = 0;
  *(_DWORD *)(a1 + 612) = 0;
  result = *(double *)(a2 + 536);
  *(double *)(a1 + 616) = result;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 552);
  return result;
}

uint64_t sub_1000A0754@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;

  memcpy(a2, &unk_101BB5438, 0x230uLL);
  result = (uint64_t)objc_msgSend(a1, "objectForKey:", CFSTR("LocationsPrivate"));
  if (result)
  {
    v5 = (void *)result;
    result = (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("LocationCount")), "integerValue");
    if (result >= 1)
    {
      v6 = result;
      result = (uint64_t)objc_msgSend(v5, "bytes");
      if (result)
        return (uint64_t)memcpy(a2, (const void *)(result + 560 * v6 - 560), 0x230uLL);
    }
  }
  return result;
}

uint64_t sub_1000A0810(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

NSString *sub_1000A0818(uint64_t a1)
{
  std::string *p_p;
  NSString *v2;
  std::string __p;

  sub_1000C2254((_QWORD *)(a1 + 352), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1000A0880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A09D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A0A10(uint64_t a1@<X0>, void ****a2@<X1>, _BYTE *a3@<X8>)
{
  void ***v6;
  void ***v7;
  void **v8;
  char v9[8];
  int v10[8];
  void ***v11;
  void ***v12;
  char v13;
  _BYTE v14[32];

  v12 = *a2;
  LODWORD(v11) = 0;
  v13 = 0;
  sub_1000A0C9C((uint64_t)v14, (uint64_t)&v11);
  v13 = 1;
  sub_1000A0BC4((uint64_t)&v11);
  v9[0] = 0;
  if (v13)
  {
    sub_1000A0C08(v10, (uint64_t)v14);
    v9[0] = 1;
  }
  sub_1000CB370(a1, (uint64_t)v9, &v11);
  if (v9[0])
  {
    sub_1000A0BC4((uint64_t)v10);
    v9[0] = 0;
  }
  v6 = v11;
  v7 = v12;
  while (1)
  {
    if (v6 == v7)
    {
      v8 = (void **)&v11;
      sub_100B04710(&v8);
      *a3 = 0;
      a3[112] = 0;
      goto LABEL_11;
    }
    v8 = *v6;
    if (sub_10009483C(&v8, a2))
      break;
    v6 += 14;
  }
  sub_100D48060((uint64_t)a3, (uint64_t)v6);
  v8 = (void **)&v11;
  sub_100B04710(&v8);
LABEL_11:
  if (v13)
    sub_1000A0BC4((uint64_t)v14);
}

void sub_1000A0B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  a9 = (void **)&a15;
  sub_100B04710(&a9);
  if (a19)
    sub_1000A0BC4(v19);
  _Unwind_Resume(a1);
}

void sub_1000A0BC4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1)
  {
    if (v1 != 1)
      sub_10055A5D8();
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
}

int *sub_1000A0C08(int *a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v5;
  __int128 v6;

  v2 = (_QWORD *)(a2 + 8);
  v5 = a1 + 2;
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      *(_QWORD *)v5 = *v2;
      break;
    case 1:
      if (*(char *)(a2 + 31) < 0)
      {
        sub_100115CE4(v5, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
      }
      else
      {
        v6 = *(_OWORD *)v2;
        *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)v5 = v6;
      }
      break;
    default:
      sub_10055A5D8();
  }
  *a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

uint64_t sub_1000A0C9C(uint64_t result, uint64_t a2)
{
  _OWORD *v2;
  __int128 *v3;
  int v4;
  __int128 v5;

  v2 = (_OWORD *)(result + 8);
  v3 = (__int128 *)(a2 + 8);
  v4 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v4 == 1)
  {
    v5 = *v3;
    *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    *v2 = v5;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)v3 = 0;
    v4 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  }
  else
  {
    if (v4)
      sub_10055A5D8();
    *(_QWORD *)v2 = *(_QWORD *)v3;
  }
  *(_DWORD *)result = v4;
  return result;
}

void sub_1000A0F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  sub_100B04710(&a23);
  _Unwind_Resume(a1);
}

void sub_1000A0FD0(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  __int128 *v7[3];
  uint64_t v8[3];
  __int128 **v9;

  sub_1000A11BC(a1, v7);
  sub_1000A1248(v8, v7);
  v9 = v7;
  sub_100B04710((void ***)&v9);
  sub_1000A1074(v8, a2, a3, a4);
  v7[0] = (__int128 *)v8;
  sub_100B04710((void ***)v7);
}

void sub_1000A104C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100B04710((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000A1074(uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (sub_1008BB1C4(v4, a3) > *a2)
      {
        v9 = a4[1];
        if (v9 >= a4[2])
        {
          v10 = sub_100B56DB8(a4, v4);
        }
        else
        {
          sub_100B56D30((uint64_t)a4, v4);
          v10 = v9 + 112;
        }
        a4[1] = v10;
      }
      v4 += 112;
    }
    while (v4 != v5);
  }
}

void sub_1000A1118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100B04710((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000A1130(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3[3];
  uint64_t *v4[3];
  __int128 **v5;

  sub_1000A11BC(a1, v3);
  sub_1000A1248(v4, v3);
  v5 = v3;
  sub_100B04710((void ***)&v5);
  sub_1000A1298(v4, a2);
  v3[0] = (__int128 *)v4;
  sub_100B04710((void ***)v3);
}

void sub_1000A1194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100B04710((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000A11BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v2[8];
  uint64_t v3;

  v2[0] = 0;
  sub_1000CB370(a1, (uint64_t)v2, a2);
  if (v2[0])
    sub_1000A0BC4((uint64_t)&v3);
}

void sub_1000A1228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10)
{
  if (a9)
    sub_1000A0BC4((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000A1248(_QWORD *a1, __int128 **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100B56B4C(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2));
  return a1;
}

uint64_t sub_1000A1298@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v22;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_100263E50((uint64_t)v23);
  v5 = *a1;
  v4 = a1[1];
  v6 = sub_100263F7C(&v24, (uint64_t)"count: ", 7);
  std::ostream::operator<<(v6, 0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (char *)v5) >> 4));
  if (v4 != v5)
  {
    v7 = sub_100263F7C(&v24, (uint64_t)", samples: ", 11);
    v8 = (char *)-[__CFString UTF8String]((id)sub_100B569C0(a1, 5), "UTF8String");
    sub_1015A2E04(__p, v8);
    if ((v22 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v10 = v22;
    else
      v10 = (uint64_t)__p[1];
    sub_100263F7C(v7, (uint64_t)v9, v10);
    if ((char)v22 < 0)
      operator delete(__p[0]);
    v11 = sub_100263F7C(&v24, (uint64_t)", average age: ", 15);
    v12 = *v11;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 2;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
    sub_100B5671C((uint64_t *)a1);
    v14 = (_QWORD *)std::ostream::operator<<(v11, v13);
    sub_100263F7C(v14, (uint64_t)"h", 1);
    v15 = sub_100263F7C(&v24, (uint64_t)", oldest age: ", 14);
    v16 = *v15;
    *(uint64_t *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 16) = 2;
    *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
    v17 = sub_100B567B4((uint64_t *)a1);
    v18 = (_QWORD *)std::ostream::operator<<(v15, v17);
    sub_100263F7C(v18, (uint64_t)"h", 1);
  }
  std::stringbuf::str(a2, v25);
  *(_QWORD *)((char *)v23
  v24 = v19;
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_1000A14C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_1000A14F8(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD buf[102];

  v1 = a1;
  v10 = *a1;
  sub_1001E4804(buf);
  v2 = sub_1001FD98C(*(uint64_t *)&buf[0], "databasePurgeThreshold", &v10);
  v3 = v2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_5;
  v5 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      return *(double *)v1;
  }
  else
  {
LABEL_5:
    if (!v2)
      return *(double *)v1;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134283521;
    *(_QWORD *)((char *)buf + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, #Warning defaults write databasePurgeThreshold to %{private}.1f", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AF6B8);
    v11 = 134283521;
    v12 = v10;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLWifi1Settings, #Warning defaults write databasePurgeThreshold to %{private}.1f", &v11, 12);
    sub_100512490("Generic", 1, 0, 2, "CFTimeInterval CLWifi1Settings::WifiPositionWithAssociatedAp::getDatabasePurgeThreshold()", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v1 = &v10;
  return *(double *)v1;
}

void sub_1000A1718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1000A1914(uint64_t a1)
{
  return sub_1000CC4F4(a1 + 72);
}

uint64_t sub_1000A192C(uint64_t a1)
{
  uint64_t *v2;
  double v3;
  NSObject *v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  CFAbsoluteTime Current;
  std::string::size_type *v14;
  NSObject *v15;
  std::string *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  NSObject *v22;
  std::string *v23;
  NSObject *v24;
  std::string *p_buf;
  _QWORD *v26;
  NSObject *v27;
  std::string *v28;
  NSObject *v29;
  std::string *v30;
  double v31;
  NSObject *v32;
  std::string *v33;
  std::string::size_type v34;
  double v35;
  double v36;
  NSObject *v37;
  std::string *v38;
  NSObject *v39;
  std::string *v40;
  std::string::size_type v41;
  NSObject *v42;
  std::string *v43;
  NSObject *v44;
  std::string *v45;
  NSObject *v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  std::string *v67;
  _QWORD *v68;
  std::string *v69;
  uint64_t v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  std::string *v74;
  std::string *v75;
  uint64_t v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  std::string *v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  std::string *v84;
  uint64_t v85;
  std::string *v86;
  std::string *v87;
  uint64_t v88;
  __int128 __p;
  _QWORD *v90;
  std::string v91;
  std::string buf;
  double v93;
  std::string v94;
  double v95;

  v2 = sub_1000A3224();
  if (!sub_10023E934((uint64_t)v2))
  {
    sub_1015A2E04(&buf, "NO: disabled_by_settings");
    sub_100040370(a1 + 728, &buf);
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    return 0;
  }
  if ((sub_100182290(a1 + 156) & 1) == 0)
  {
    sub_1015A2E04(&buf, "NO: centroid_invalid");
    sub_100040370(a1 + 728, &buf);
    goto LABEL_16;
  }
  v3 = *((double *)sub_1000A3224() + 6);
  if (*(double *)(a1 + 176) > v3)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      v5 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v94
         : (std::string *)v94.__r_.__value_.__r.__words[0];
      v6 = *(_QWORD *)(a1 + 176);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v93 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as its uncertainty %{public}.1f is greater than %{public}.1f", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v48 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v91);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v91;
      else
        v49 = (std::string *)v91.__r_.__value_.__r.__words[0];
      v50 = *(_QWORD *)(a1 + 176);
      LODWORD(v94.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v50;
      HIWORD(v94.__r_.__value_.__r.__words[2]) = 2050;
      v95 = v3;
      v51 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as its uncertainty %{public}.1f is greater than %{public}.1f", &v94, 32);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v51);
      if (v51 != &buf)
        free(v51);
    }
    sub_1015A2E04(&buf, "NO: uncertainty_too_large");
    sub_100040370(a1 + 728, &buf);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 1384) != 2)
  {
    if (!*(_BYTE *)(a1 + 1344))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        v23 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v94.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as we cannot determine its LOI type", (uint8_t *)&v94, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v63 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v94;
        else
          v64 = (std::string *)v94.__r_.__value_.__r.__words[0];
        LODWORD(v91.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
        v65 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v63, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as we cannot determine its LOI type", &v91, 12);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v65);
        if (v65 != &buf)
          free(v65);
      }
      sub_1015A2E04(&buf, "NO: cannot_infer_LOI");
      sub_100040370(a1 + 728, &buf);
      goto LABEL_16;
    }
    v8 = *(_QWORD *)(a1 + 1336);
    v9 = sub_1000A3224();
    if (!sub_10023E99C((unsigned __int8 *)v9, v8))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v24 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        v26 = (_QWORD *)(a1 + 1352);
        if (*(char *)(a1 + 1375) < 0)
          v26 = (_QWORD *)*v26;
        LODWORD(v94.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        WORD2(v94.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as its LOI type %{private}s is not enabled", (uint8_t *)&v94, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v66 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        v67 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v94;
        v68 = (_QWORD *)(a1 + 1352);
        if (*(char *)(a1 + 1375) < 0)
          v68 = (_QWORD *)*v68;
        LODWORD(v91.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
        WORD2(v91.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v91.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v68;
        v69 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v66, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as its LOI type %{private}s is not enabled", &v91, 22);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v69);
        if (v69 != &buf)
          free(v69);
      }
      sub_1015A2E04(&buf, "NO: LOI_disabled");
      sub_100040370(a1 + 728, &buf);
      goto LABEL_16;
    }
  }
  if (*(_BYTE *)(a1 + 456))
    goto LABEL_255;
  v10 = *(_QWORD *)(a1 + 464);
  v11 = *(_QWORD *)(a1 + 352);
  v12 = operator new(8uLL);
  *(_QWORD *)&__p = v12;
  *v12 = v11;
  *((_QWORD *)&__p + 1) = v12 + 1;
  v90 = v12 + 1;
  sub_100014168(a1 + 536, (uint64_t)&v94);
  sub_10018FFD0((uint64_t)&v94, (uint64_t)&buf);
  Current = j__CFAbsoluteTimeGetCurrent();
  (*(void (**)(std::string *__return_ptr, uint64_t, __int128 *, std::string *, CFAbsoluteTime))(*(_QWORD *)v10 + 16))(&v91, v10, &__p, &buf, Current);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v14 = sub_100191618((uint64_t)&v91, (_QWORD *)(a1 + 352));
  if (&v91.__r_.__value_.__r.__words[1] == v14)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v27 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v94.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "WifiCalc, still could not look up centroid from tile/als for associated AP %s", (uint8_t *)&v94, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v79 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v94;
      else
        v80 = (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v80;
      v81 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v79, 0, "WifiCalc, still could not look up centroid from tile/als for associated AP %s", (const char *)&__p);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v81);
      if (v81 != &buf)
        free(v81);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      v16 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v94.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiCalc, found centroid from tile/als for associated AP %s", (uint8_t *)&v94, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v70 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v94;
      else
        v71 = (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v71;
      v72 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v70, 0, "WifiCalc, found centroid from tile/als for associated AP %s", (const char *)&__p);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v72);
      if (v72 != &buf)
        free(v72);
    }
    v17 = *(unsigned __int8 *)(a1 + 456);
    v18 = *(_OWORD *)(v14 + 7);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v14 + 5);
    *(_OWORD *)(a1 + 376) = v18;
    v19 = *(_OWORD *)(v14 + 11);
    v20 = *(_OWORD *)(v14 + 15);
    v21 = *(_OWORD *)(v14 + 9);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(v14 + 13);
    *(_OWORD *)(a1 + 440) = v20;
    *(_OWORD *)(a1 + 392) = v21;
    *(_OWORD *)(a1 + 408) = v19;
    if (!v17)
      *(_BYTE *)(a1 + 456) = 1;
  }
  sub_100008848((uint64_t)&v91, (_QWORD *)v91.__r_.__value_.__l.__size_);
  if (*(_BYTE *)(a1 + 456))
  {
LABEL_255:
    if (sub_100219C3C(a1 + 360))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v29 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        v30 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v94.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "WifiCalc, warning, associated AP %{private}s server-side centroid from tile/als is moving", (uint8_t *)&v94, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v60 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v94;
        else
          v61 = (std::string *)v94.__r_.__value_.__r.__words[0];
        LODWORD(v91.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
        v62 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v60, 0, "WifiCalc, warning, associated AP %{private}s server-side centroid from tile/als is moving", &v91, 12);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v62);
        if (v62 != &buf)
          free(v62);
      }
    }
  }
  v31 = (double)*((int *)sub_1000A3224() + 4);
  if (*(double *)(a1 + 1376) >= v31)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v39 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      v40 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v94
          : (std::string *)v94.__r_.__value_.__r.__words[0];
      v41 = *(_QWORD *)(a1 + 1376);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v93 = v31;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "WifiCalc, will update computed location using associated AP %{private}s as stationary time %.1f is no less than threshold %.1f", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v56 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v91);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v91;
      else
        v57 = (std::string *)v91.__r_.__value_.__r.__words[0];
      v58 = *(_QWORD *)(a1 + 1376);
      LODWORD(v94.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v58;
      HIWORD(v94.__r_.__value_.__r.__words[2]) = 2048;
      v95 = v31;
      LODWORD(v88) = 32;
      v59 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v56, 0, "WifiCalc, will update computed location using associated AP %{private}s as stationary time %.1f is no less than threshold %.1f", &v94, v88);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v59);
      if (v59 != &buf)
        free(v59);
    }
    sub_1015A2E04(&buf, "YES: stationary_enough");
    sub_100040370(a1 + 728, &buf);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      v33 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v94
          : (std::string *)v94.__r_.__value_.__r.__words[0];
      v34 = *(_QWORD *)(a1 + 1376);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v93 = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP %{private}s has stationary time %.1f, less than threshold %.1f", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v52 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v91);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v91;
      else
        v53 = (std::string *)v91.__r_.__value_.__r.__words[0];
      v54 = *(_QWORD *)(a1 + 1376);
      LODWORD(v94.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v54;
      HIWORD(v94.__r_.__value_.__r.__words[2]) = 2048;
      v95 = v31;
      LODWORD(v88) = 32;
      v55 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v52, 0, "WifiCalc, associated AP %{private}s has stationary time %.1f, less than threshold %.1f", &v94, v88);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v55);
      if (v55 != &buf)
        free(v55);
    }
    if (!*(_BYTE *)(a1 + 456))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v42 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        v43 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v94.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is unavailable", (uint8_t *)&v94, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v73 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v94;
        else
          v74 = (std::string *)v94.__r_.__value_.__r.__words[0];
        LODWORD(v91.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
        LODWORD(v88) = 12;
        v75 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v73, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is unavailable", &v91, v88);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v75);
        if (v75 != &buf)
          free(v75);
      }
      sub_1015A2E04(&buf, "NO: server_side_centroid_unavailable");
      sub_100040370(a1 + 728, &buf);
      goto LABEL_16;
    }
    if (!sub_10018FDEC((double *)(a1 + 360)))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v44 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &buf);
        v45 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v94.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is invalid", (uint8_t *)&v94, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v76 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v94;
        else
          v77 = (std::string *)v94.__r_.__value_.__r.__words[0];
        LODWORD(v91.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
        LODWORD(v88) = 12;
        v78 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v76, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is invalid", &v91, v88);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v78);
        if (v78 != &buf)
          free(v78);
      }
      sub_1015A2E04(&buf, "NO: server_side_centroid_invalid");
      sub_100040370(a1 + 728, &buf);
      goto LABEL_16;
    }
    v35 = sub_10011E634((double *)(a1 + 312), *(double *)(a1 + 368), *(double *)(a1 + 376), *(double *)(a1 + 536), *(double *)(a1 + 544), 0.0);
    v36 = *((double *)sub_1000A3224() + 5);
    if (v35 > v36)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v46 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254((_QWORD *)(a1 + 352), &v94);
        v47 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v94
            : (std::string *)v94.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v35;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        v93 = v36;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as distance %.1f is greater than threshold %.0f", (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102191998);
        v85 = qword_1022A0048;
        sub_1000C2254((_QWORD *)(a1 + 352), &v91);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v91;
        else
          v86 = (std::string *)v91.__r_.__value_.__r.__words[0];
        LODWORD(v94.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v86;
        WORD2(v94.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v35;
        HIWORD(v94.__r_.__value_.__r.__words[2]) = 2048;
        v95 = v36;
        LODWORD(v88) = 32;
        v87 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v85, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as distance %.1f is greater than threshold %.0f", &v94, v88);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v87);
        if (v87 != &buf)
          free(v87);
      }
      sub_1015A2E04(&buf, "NO: far_away_from_server_side_centroid");
      sub_100040370(a1 + 728, &buf);
      goto LABEL_16;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v37 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), &v94);
      v38 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v94
          : (std::string *)v94.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v35;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v93 = v36;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "WifiCalc, will update computed location using associated AP %{private}s as distance %.1f is no more than threshold %.0f", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v82 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &v91);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v91;
      else
        v83 = (std::string *)v91.__r_.__value_.__r.__words[0];
      LODWORD(v94.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
      WORD2(v94.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v94.__r_.__value_.__r.__words[1] + 6) = v35;
      HIWORD(v94.__r_.__value_.__r.__words[2]) = 2048;
      v95 = v36;
      LODWORD(v88) = 32;
      v84 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v82, 0, "WifiCalc, will update computed location using associated AP %{private}s as distance %.1f is no more than threshold %.0f", &v94, v88);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v84);
      if (v84 != &buf)
        free(v84);
    }
    sub_1015A2E04(&buf, "YES: consistent_with_server_side_centroid");
    sub_100040370(a1 + 728, &buf);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1000A3198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_100008848((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000A3224()
{
  return &qword_1022FF670;
}

void sub_1000A3230(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000A3264(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return pthread_dependency_fulfill_np(*(_QWORD *)(a1 + 40), 0);
}

uint64_t *sub_1000A3294(uint64_t a1)
{
  return sub_1000A32A4(*(_QWORD **)(a1 + 32), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

uint64_t *sub_1000A32A4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *result;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v5 = a1[2];
  v6 = a2;
  v7 = v5 + 80 * (int)a2;
  v10 = *(_QWORD **)(v7 + 40);
  v8 = (uint64_t *)(v7 + 40);
  v9 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v8;
  do
  {
    v12 = v9[4];
    v13 = v12 >= a3;
    if (v12 >= a3)
      v14 = v9;
    else
      v14 = v9 + 1;
    if (v13)
      v11 = v9;
    v9 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v8 && v11[4] <= a3)
  {
    sub_10008A9F0((uint64_t **)v8 - 1, v11);
    operator delete(v11);
    v19 = sub_10023D16C((uint64_t)a1, a2);
    v28 = v19;
    v20 = sub_10023D200((uint64_t)a1, a2);
    v27 = v20;
    v21 = a1[2];
    v22 = (double *)(v21 + 80 * v6);
    if (v19 != *v22)
    {
      *v22 = v19;
      *(double *)(a1[2] + 80 * v6 + 16) = (*(double (**)(_QWORD *, uint64_t, double *))(*a1 + 16))(a1, a2, &v28);
      sub_1000A61A0((uint64_t)a1, a2);
      v21 = a1[2];
    }
    v23 = v21 + 80 * v6;
    v25 = *(double *)(v23 + 8);
    v24 = (double *)(v23 + 8);
    if (v20 != v25)
    {
      *v24 = v20;
      v26 = (*(double (**)(_QWORD *, uint64_t, double *))(*a1 + 24))(a1, a2, &v27);
      v21 = a1[2];
      *(double *)(v21 + 80 * v6 + 24) = v26;
    }
    return (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, *(_QWORD *)(v21 + 80 * v6 + 48) + 1);
  }
  else
  {
LABEL_12:
    v15 = (_QWORD *)(v5 + 80 * (int)a2);
    v16 = v15 + 7;
    for (result = (uint64_t *)v15[8]; result != v16; result = (uint64_t *)result[1])
    {
      if (result[2] == a3)
      {
        if (result != v16)
        {
          v18 = *result;
          *(_QWORD *)(v18 + 8) = result[1];
          *(_QWORD *)result[1] = v18;
          --v15[9];
          operator delete(result);
          return (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 32))(a1, a2, *(_QWORD *)(a1[2] + 80 * v6 + 72));
        }
        return result;
      }
    }
  }
  return result;
}

void sub_1000A34A8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(v1 + 216))
    {
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v2 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending initial configuration.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_1021477D0);
        v6[0] = 0;
        v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "Sending initial configuration.", v6, 2);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
      }
      sub_1010245A0(v1);
    }
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v3 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to configure motion coprocessor", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v6[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 16, "Failed to configure motion coprocessor", v6, 2);
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    sub_101023534(v1);
  }
}

uint64_t sub_1000A3798(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[245] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 552))(v1, 0);
}

void sub_1000A37B8(uint64_t a1)
{
  sub_1000A45B4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56), *(void **)(a1 + 32));
}

void sub_1000A37CC(uint64_t a1, char a2, NSObject *a3, id a4)
{
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  id v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char *v61;
  id v62;
  int v63;
  int v64;
  int v65;
  NSObject *v66;
  NSObject *v67;
  _QWORD aBlock[7];
  _DWORD v69[2];
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  uint8_t buf[4];
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  double v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;

  sub_100127B9C();
  sub_100127BDC();
  *(_BYTE *)(a1 + 246) = a2;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v8 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
  {
    v9 = *(unsigned __int8 *)(a1 + 218);
    v10 = *(unsigned __int8 *)(a1 + 219);
    v11 = *(unsigned __int8 *)(a1 + 223);
    v12 = *(unsigned __int8 *)(a1 + 264);
    v13 = *(unsigned __int8 *)(a1 + 220);
    v14 = *(unsigned __int8 *)(a1 + 221);
    v15 = *(unsigned __int8 *)(a1 + 222);
    v16 = *(unsigned __int8 *)(a1 + 242);
    v17 = *(unsigned __int8 *)(a1 + 243);
    v18 = *(unsigned __int8 *)(a1 + 225);
    v19 = *(unsigned __int8 *)(a1 + 226);
    v20 = *(float *)(a1 + 230);
    v21 = *(unsigned __int8 *)(a1 + 224);
    v22 = *(char *)(a1 + 227);
    v23 = *(unsigned __int8 *)(a1 + 245);
    v24 = *(unsigned __int16 *)(a1 + 228);
    v25 = *(unsigned __int8 *)(a1 + 255);
    v26 = *(unsigned __int8 *)(a1 + 256);
    v27 = *(unsigned __int8 *)(a1 + 257);
    v28 = *(unsigned __int8 *)(a1 + 258);
    v29 = *(unsigned __int8 *)(a1 + 259);
    v30 = a4;
    v31 = *(_QWORD *)(a1 + 247);
    v32 = *(unsigned __int8 *)(a1 + 267);
    v66 = a3;
    v33 = *(unsigned __int8 *)(a1 + 244);
    v63 = *(unsigned __int8 *)(a1 + 271);
    v64 = *(unsigned __int8 *)(a1 + 282);
    v65 = *(unsigned __int8 *)(a1 + 272);
    *(_DWORD *)buf = 67181313;
    v123 = v9;
    v124 = 1025;
    v125 = v10;
    v126 = 1025;
    v127 = v11;
    v128 = 1025;
    v129 = v12;
    v130 = 1025;
    v131 = v13;
    v132 = 1025;
    v133 = v14;
    v134 = 1025;
    v135 = v15;
    v136 = 1026;
    v137 = v16;
    v138 = 1026;
    v139 = v17;
    v140 = 1026;
    v141 = v18;
    v142 = 1026;
    v143 = v19;
    v144 = 2050;
    v145 = v20;
    v146 = 1026;
    v147 = v21;
    v148 = 1026;
    v149 = v22;
    v150 = 1025;
    v151 = v23;
    v152 = 1026;
    v153 = v24;
    v154 = 1025;
    v155 = v25;
    v156 = 1025;
    v157 = v26;
    v158 = 1025;
    v159 = v27;
    v160 = 1025;
    v161 = v28;
    v162 = 1025;
    v163 = v29;
    v164 = 2050;
    v165 = v31;
    a4 = v30;
    v166 = 1025;
    v167 = v32;
    v168 = 1025;
    v169 = v33;
    a3 = v66;
    v170 = 1025;
    v171 = v63;
    v172 = 1025;
    v173 = v64;
    v174 = 1025;
    v175 = v65;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending new config to SPU:enableActivity,%{private}u,enableStepCounting,%{private}u,enableOnBodyDetection,%{private}u,enableStepCountPeriodFast,%{private}uactivityForceCodeTransition,%{private}u,stepCountingForceCodeTransition,%{private}u,enableThreshold,%{private}u,disableDynamicBias,%{public}u,ignoreDynamicBias,%{public}u,ispEnable,%{public}u,ispMode,%{public}u,ISPUpdateIntervalOverride,%{public}f,stickyIsp,%{public}d,logLevel,%{public}d,enableCoarseElevation,%{private}d,proactiveRevisitTime,%{public}u,fallStatsMode,%{private}u,sensorRecordingActive,%{private}u,simulateEvent,%{private}u,userStudyPressureDataCollection,%{private}u,detectorEnabled,%{private}u,lastAckedAopTimestamp,%{public}llu,gateDynamicBiasOnChargerStatus,%{private}u,supportsOISImprovements,%{private}u,compassCoexDuringBasebandUse,%{private}u,enableComputeWhileStatic,%{private}u,magnetometer50HzODRUse,%{private}u", buf, 0xACu);
  }
  if (!sub_1001BFF7C(115, 2))
  {
    if (!a4)
      goto LABEL_9;
    goto LABEL_7;
  }
  bzero(buf, 0x65CuLL);
  v67 = a3;
  v62 = a4;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_1021477D0);
  v34 = *(unsigned __int8 *)(a1 + 218);
  v35 = *(unsigned __int8 *)(a1 + 219);
  v36 = *(unsigned __int8 *)(a1 + 223);
  v37 = *(unsigned __int8 *)(a1 + 264);
  v38 = *(unsigned __int8 *)(a1 + 220);
  v39 = *(unsigned __int8 *)(a1 + 221);
  v40 = *(unsigned __int8 *)(a1 + 222);
  v41 = *(unsigned __int8 *)(a1 + 242);
  v42 = *(unsigned __int8 *)(a1 + 243);
  v43 = *(unsigned __int8 *)(a1 + 225);
  v44 = *(unsigned __int8 *)(a1 + 226);
  v45 = *(float *)(a1 + 230);
  v46 = *(unsigned __int8 *)(a1 + 224);
  v47 = *(char *)(a1 + 227);
  v48 = *(unsigned __int8 *)(a1 + 245);
  v49 = *(unsigned __int16 *)(a1 + 228);
  v50 = *(unsigned __int8 *)(a1 + 255);
  v51 = *(unsigned __int8 *)(a1 + 256);
  v52 = *(unsigned __int8 *)(a1 + 257);
  v53 = *(unsigned __int8 *)(a1 + 258);
  v54 = *(unsigned __int8 *)(a1 + 259);
  v55 = *(_QWORD *)(a1 + 247);
  v56 = *(unsigned __int8 *)(a1 + 267);
  v57 = *(unsigned __int8 *)(a1 + 244);
  v58 = *(unsigned __int8 *)(a1 + 271);
  v59 = *(unsigned __int8 *)(a1 + 282);
  v60 = *(unsigned __int8 *)(a1 + 272);
  v69[0] = 67181313;
  v69[1] = v34;
  v70 = 1025;
  v71 = v35;
  v72 = 1025;
  v73 = v36;
  v74 = 1025;
  v75 = v37;
  v76 = 1025;
  v77 = v38;
  v78 = 1025;
  v79 = v39;
  v80 = 1025;
  v81 = v40;
  v82 = 1026;
  v83 = v41;
  v84 = 1026;
  v85 = v42;
  v86 = 1026;
  v87 = v43;
  v88 = 1026;
  v89 = v44;
  v90 = 2050;
  v91 = v45;
  v92 = 1026;
  v93 = v46;
  v94 = 1026;
  v95 = v47;
  v96 = 1025;
  v97 = v48;
  v98 = 1026;
  v99 = v49;
  v100 = 1025;
  v101 = v50;
  v102 = 1025;
  v103 = v51;
  v104 = 1025;
  v105 = v52;
  v106 = 1025;
  v107 = v53;
  v108 = 1025;
  v109 = v54;
  v110 = 2050;
  v111 = v55;
  v112 = 1025;
  v113 = v56;
  v114 = 1025;
  v115 = v57;
  v116 = 1025;
  v117 = v58;
  v118 = 1025;
  v119 = v59;
  v120 = 1025;
  v121 = v60;
  v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Sending new config to SPU:enableActivity,%{private}u,enableStepCounting,%{private}u,enableOnBodyDetection,%{private}u,enableStepCountPeriodFast,%{private}uactivityForceCodeTransition,%{private}u,stepCountingForceCodeTransition,%{private}u,enableThreshold,%{private}u,disableDynamicBias,%{public}u,ignoreDynamicBias,%{public}u,ispEnable,%{public}u,ispMode,%{public}u,ISPUpdateIntervalOverride,%{public}f,stickyIsp,%{public}d,logLevel,%{public}d,enableCoarseElevation,%{private}d,proactiveRevisitTime,%{public}u,fallStatsMode,%{private}u,sensorRecordingActive,%{private}u,simulateEvent,%{private}u,userStudyPressureDataCollection,%{private}u,detectorEnabled,%{private}u,lastAckedAopTimestamp,%{public}llu,gateDynamicBiasOnChargerStatus,%{private}u,supportsOISImprovements,%{private}u,compassCoexDuringBasebandUse,%{private}u,enableComputeWhileStatic,%{private}u,magnetometer50HzODRUse,%{private}u", v69, 172);
  sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)", "%s\n", v61);
  if (v61 != (char *)buf)
    free(v61);
  a3 = v67;
  a4 = v62;
  if (v62)
  {
LABEL_7:
    a4 = objc_msgSend(a4, "copy");
    if (a3)
      dispatch_retain(a3);
  }
LABEL_9:
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10020D9B4;
  aBlock[3] = &unk_102147798;
  aBlock[5] = a4;
  aBlock[6] = a1;
  aBlock[4] = a3;
  sub_1000A3D94(a1 + 192, (__int128 *)(a1 + 217), aBlock);
}

void sub_1000A3CE0(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 560))(a1, a2, 0, 0);
  }
  else
  {
    v5 = sub_100127B9C();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005D0EBC;
    v6[3] = &unk_1021468D0;
    v6[4] = a1;
    v7 = a2;
    sub_1000A57FC(v5, (uint64_t)v6);
  }
}

void sub_1000A3D94(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[7];
  _QWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;

  if (*(_QWORD *)(a1 + 8))
  {
    v9[0] = 0;
    v9[1] = v9;
    v9[3] = sub_1005D50C4;
    v9[4] = nullsub_217;
    v9[2] = 0x7812000000;
    v9[5] = &unk_102080316;
    v4 = a2[3];
    v12 = a2[2];
    v13 = v4;
    v14 = *((_WORD *)a2 + 32);
    v5 = *a2;
    v11 = a2[1];
    v10 = v5;
    if (aBlock)
      v6 = _Block_copy(aBlock);
    else
      v6 = 0;
    v7 = *(NSObject **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10020DCA0;
    v8[3] = &unk_102147938;
    v8[5] = v9;
    v8[6] = a1;
    v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1000A3E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A3EB0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  _QWORD block[5];
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if ((sub_1000A42B0() & 1) != 0)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v2 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(unsigned __int8 *)(a1 + 1025);
      v4 = *(unsigned __int8 *)(a1 + 1008);
      v5 = *(_QWORD *)(a1 + 1088);
      *(_DWORD *)buf = 67240704;
      v23 = v3;
      v24 = 1026;
      v25 = v4;
      v26 = 2050;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLGBE] SPUEnabled,%{public}d,BuildingGYTT,%{public}d,NumClients,%{public}lu", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v12 = *(unsigned __int8 *)(a1 + 1025);
      v13 = *(unsigned __int8 *)(a1 + 1008);
      v14 = *(_QWORD *)(a1 + 1088);
      v17[0] = 67240704;
      v17[1] = v12;
      v18 = 1026;
      v19 = v13;
      v20 = 2050;
      v21 = v14;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "[CLGBE] SPUEnabled,%{public}d,BuildingGYTT,%{public}d,NumClients,%{public}lu", v17, 24);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    if (*(_QWORD *)(a1 + 1088))
    {
      if (*(_BYTE *)(a1 + 1025))
      {
        sub_100238298(a1);
        v6 = sub_1001FBB04(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 + 136) + 16))(v6 + 136, 1);
      }
      if (*(_BYTE *)(a1 + 1008) || !*(_BYTE *)(a1 + 1024))
        sub_1011E01D8(a1);
    }
    if (*(_BYTE *)(a1 + 1024))
    {
      if (*(_BYTE *)(a1 + 1025)
        || (v9 = sub_1001FBB04(0),
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 136) + 16))(v9 + 136, 0),
            *(_BYTE *)(a1 + 1024)))
      {
        if (*(_BYTE *)(a1 + 1008))
          return;
        goto LABEL_26;
      }
    }
    if (!*(_QWORD *)(a1 + 1088))
    {
LABEL_26:
      v10 = dispatch_time(0, 2000000000);
      v11 = *(NSObject **)(a1 + 1016);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1011E0674;
      block[3] = &unk_10212ECA0;
      block[4] = a1;
      dispatch_after(v10, v11, block);
    }
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v7 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLGBE] Gyro not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      LOWORD(v17[0]) = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Gyro not available", v17, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
}

void sub_1000A42A8(uint64_t a1, int a2)
{
  sub_1000A42B8(a1 - 136, a2);
}

uint64_t sub_1000A42B0()
{
  return 1;
}

void sub_1000A42B8(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  BYTE6(v8) = 21;
  HIBYTE(v8) = a2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10219ACE8);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v5 = "stopping";
    if (a2)
      v5 = "starting";
    *(_DWORD *)buf = 136446210;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLMotionCoprocessor %{public}s gyro bias and variance updates", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v6 = "stopping";
    if (a2)
      v6 = "starting";
    v9 = 136446210;
    v10 = v6;
    LODWORD(v8) = 12;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLMotionCoprocessor %{public}s gyro bias and variance updates", &v9, v8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::startStopGyroBiasAndVariance(const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  sub_1000A44B0(a1 + 192, (__int16 *)&v8 + 3, 0);
}

void sub_1000A44B0(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_101036B3C;
    v7[4] = nullsub_1361;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10020DD08;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1000A459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A45B4(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  char v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  if (*(_BYTE *)(a1 + 1065))
    return;
  v8 = sub_1000A4854((_QWORD *)a1, a2);
  if (a4 || (v8 & 1) != 0)
  {
    if (a4)
      sub_100016E1C(a1, a2, a3, a4);
    v10 = a1 + 1072;
    v11 = *(_QWORD *)(a1 + 1080);
    if (v11 == a1 + 1072)
    {
      *(_BYTE *)(a1 + 1008) = 0;
      v11 = a1 + 1072;
      if (!*(_BYTE *)(a1 + 1024))
        goto LABEL_26;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 1080);
      while (!*(_BYTE *)(v12 + 32))
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (v12 == v10)
        {
          *(_BYTE *)(a1 + 1008) = 0;
          goto LABEL_21;
        }
      }
      *(_BYTE *)(a1 + 1008) = v12 != v10;
      if (v12 != v10)
        *(_DWORD *)(a1 + 932) = 1105199104;
LABEL_21:
      if (!*(_BYTE *)(a1 + 1024))
        goto LABEL_26;
      while (*(_BYTE *)(v11 + 32))
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11 == v10)
        {
          v11 = a1 + 1072;
          break;
        }
      }
    }
    *(_BYTE *)(a1 + 1025) = v11 != v10;
LABEL_26:
    sub_1000A3EB0(a1);
    return;
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v9 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[CLGBE] Client instance %{public}p already unregistered", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v14 = 134349056;
    v15 = a2;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Client instance %{public}p already unregistered", &v14, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::setHandlerForInstanceInternal(const void *, const BOOL, Handler)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
}

uint64_t sub_1000A4854(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  v2 = (uint64_t *)a1[135];
  if (v2 == a1 + 134)
    return 0;
  while (v2[2] != a2)
  {
    v2 = (uint64_t *)v2[1];
    if (v2 == a1 + 134)
      return 0;
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v6 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[CLGBE] Removing client %{public}p", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v9 = 134349056;
    v10 = a2;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Removing client %{public}p", &v9, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGyroBiasEstimator::removeClientInternal(const void *)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  _Block_release((const void *)v2[3]);
  v7 = *v2;
  *(_QWORD *)(v7 + 8) = v2[1];
  *(_QWORD *)v2[1] = v7;
  --a1[136];
  operator delete(v2);
  return 1;
}

void sub_1000A4A6C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v6 = sub_100127B9C();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000A3294;
  v7[3] = &unk_102149608;
  v8 = a2;
  v7[4] = a1;
  v7[5] = a3;
  sub_1000A50A8(v6, (uint64_t)v7);
}

uint64_t sub_1000A4AE0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  void **v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  uint64_t **v9;
  uint64_t result;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  uint64_t *v15;
  uint8_t buf[48];
  uint64_t v17;
  uint64_t v18[5];
  int v19;

  v2 = *(_QWORD *)(a1 + 32);
  memset(buf, 0, sizeof(buf));
  v3 = 0uLL;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0xBFF0000000000000;
  v4 = (void **)(v2 + 56);
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    v3 = 0uLL;
  }
  *v4 = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(v2 + 88) = 0x600000000;
  *(_QWORD *)(v2 + 96) = 0xCF0000004F000000;
  *(_QWORD *)(v2 + 104) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v2 + 112) = v3;
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = v3;
  *(_OWORD *)(v2 + 160) = v3;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0x8000000080000000;
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = v3;
  *(_BYTE *)(v2 + 224) = 6;
  v5 = *(_OWORD *)buf;
  v6 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 257) = *(_OWORD *)&buf[32];
  *(_OWORD *)(v2 + 241) = v6;
  *(_OWORD *)(v2 + 225) = v5;
  *(_DWORD *)(v2 + 273) = 0;
  *(_DWORD *)(v2 + 276) = 0;
  *(_DWORD *)(v2 + 324) = 6;
  sub_1000A659C((uint64_t)buf);
  *(_QWORD *)(v2 + 440) = v17;
  v7 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 392) = *(_OWORD *)buf;
  *(_OWORD *)(v2 + 408) = v7;
  *(_OWORD *)(v2 + 424) = *(_OWORD *)&buf[32];
  sub_1000A6464(v2 + 448, v18);
  *(_DWORD *)(v2 + 488) = v19;
  sub_100067AC4((uint64_t)v18);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021905A0);
  v8 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v9 + 23) < 0)
      v9 = (uint64_t **)*v9;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "starting metric session (CompassSession) for %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021905A0);
    v11 = *(uint64_t **)(a1 + 40);
    if (*((char *)v11 + 23) < 0)
      v11 = (uint64_t *)*v11;
    v14 = 136315138;
    v15 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "starting metric session (CompassSession) for %s", (const char *)&v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLCompassSessionStatsCollector::start(const std::string &)_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_BYTE *)(v2 + 40) = 1;
  *(CFAbsoluteTime *)(v2 + 48) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(v2 + 56), *(const std::string **)(a1 + 40));
  sub_1000A5944();
  *(_DWORD *)(v2 + 276) = sub_1000A6504();
  if (!*(_QWORD *)(v2 + 8))
    operator new();
  if (!*(_QWORD *)(v2 + 16))
    operator new();
  result = sub_1001B7910();
  if ((result & 0x10) != 0)
  {
    if (!*(_QWORD *)(v2 + 24))
      operator new();
    if (!*(_QWORD *)(v2 + 32))
      operator new();
  }
  return result;
}

void sub_1000A4FA0()
{
  operator delete();
}

uint64_t sub_1000A4FD8(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v8 = sub_100127B9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A5160;
  v11[3] = &unk_102162C00;
  v11[4] = &v13;
  v11[5] = a1;
  v12 = a2;
  v11[6] = a3;
  *(double *)&v11[7] = a4;
  sub_1000A50A8(v8, (uint64_t)v11);
  v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1000A5090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A50A8(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  void *v4;
  _QWORD v5[6];
  _BYTE v6[16];

  if (CFRunLoopGetCurrent() == *(CFRunLoopRef *)qword_1023110F8)
  {
    v4 = objc_autoreleasePoolPush();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    inited = pthread_dependency_init_np(v6, *(_QWORD *)(qword_1023110F8 + 8), 0);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000A3264;
    v5[3] = &unk_1021380D0;
    v5[4] = a2;
    v5[5] = v6;
    sub_1000A57FC(inited, (uint64_t)v5);
    pthread_dependency_wait_np(v6);
  }
}

BOOL sub_1000A5160(uint64_t a1)
{
  _BOOL8 result;

  result = sub_1000A519C(*(_QWORD **)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), (double *)(a1 + 56));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL sub_1000A519C(_QWORD *a1, uint64_t a2, uint64_t a3, double *a4)
{
  unsigned int v8;
  double v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  NSObject *v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  double v30;
  double v31;
  double v33;
  double v34;
  char *v35;
  double v36;
  double v37;
  double v38;
  _DWORD v39[2];
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  uint8_t buf[8];
  _BYTE v45[24];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v9 = *a4;
  v10 = *a4 * (double)v8;
  v38 = v10;
  if (v9 != 0.0)
  {
    if (v9 >= 0.0)
    {
      v16 = a1[2];
      if (v10 > 0.0
        && ((v17 = v16 + 80 * (int)a2, v19 = *(double *)(v17 + 8), v18 = (double *)(v17 + 8), v20 = v19, v10 < v19)
         || v20 <= 0.0))
      {
        *v18 = v10;
        v22 = (*(double (**)(_QWORD *, uint64_t, double *))(*a1 + 24))(a1, a2, &v38);
        v16 = a1[2];
        *(double *)(v16 + 80 * (int)a2 + 24) = v22;
        v21 = *a4;
        v10 = v38;
      }
      else
      {
        v21 = v9;
      }
      v23 = (double *)(v16 + 80 * (int)a2);
      if (v21 < *v23 || *v23 <= 0.0)
      {
        *v23 = v21;
        v27 = (*(double (**)(_QWORD *, uint64_t, double *))(*a1 + 16))(a1, a2, a4);
        v28 = a1[2] + 80 * (int)a2;
        *(double *)(v28 + 16) = v27;
        *(_QWORD *)buf = a3;
        *(_QWORD *)v45 = &_mh_execute_header;
        *(double *)&v45[8] = v21;
        *(double *)&v45[16] = v10;
        sub_1000A587C((uint64_t **)(v28 + 32), (unint64_t *)buf, (uint64_t)buf);
        sub_1000A61A0((uint64_t)a1, a2);
      }
      else
      {
        if (*(double *)(v16 + 80 * (int)a2 + 16) <= 0.0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102162C30);
          v24 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_102162C30);
            LOWORD(v39[0]) = 0;
            v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!", v39, 2);
            sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v35);
            if (v35 != (char *)buf)
              free(v35);
          }
        }
        v25 = a1[2] + 80 * (int)a2;
        v26 = llround(*a4 / *(double *)(v25 + 16));
        *(_QWORD *)buf = a3;
        *(_DWORD *)v45 = 0;
        *(_DWORD *)&v45[4] = v26;
        *(double *)&v45[8] = v21;
        *(double *)&v45[16] = v10;
        sub_1000A587C((uint64_t **)(v25 + 32), (unint64_t *)buf, (uint64_t)buf);
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, *(_QWORD *)(a1[2] + 80 * (int)a2 + 48) - 1);
    }
    else
    {
      v11 = (_QWORD *)(a1[2] + 80 * (int)a2);
      v12 = operator new(0x18uLL);
      v12[2] = a3;
      v13 = v11[7];
      v11 += 7;
      *v12 = v13;
      v12[1] = v11;
      *(_QWORD *)(v13 + 8) = v12;
      *v11 = v12;
      ++v11[2];
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, a2);
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v29 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v30 = *a4;
      v31 = 0.0;
      if (*a4 > 0.0)
        v31 = 1.0 / v30;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)v45 = 2048;
      *(double *)&v45[2] = v30;
      *(_WORD *)&v45[10] = 2048;
      *(double *)&v45[12] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return v9 != 0.0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    v33 = *a4;
    v34 = 0.0;
    if (*a4 > 0.0)
      v34 = 1.0 / v33;
    v39[0] = 67109632;
    v39[1] = a2;
    v40 = 2048;
    v41 = v33;
    v42 = 2048;
    v43 = v34;
    LODWORD(v36) = 28;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)", v39, v36, v37);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v15);
LABEL_41:
    if (v15 != (char *)buf)
      free(v15);
    return v9 != 0.0;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102162C30);
  v14 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102162C30);
    LOWORD(v39[0]) = 0;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.", v39, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "%s\n", v15);
    goto LABEL_41;
  }
  return v9 != 0.0;
}

uint64_t sub_1000A57F4()
{
  return 1;
}

void sub_1000A57FC(uint64_t a1, uint64_t a2)
{
  __CFRunLoop *v2;
  _QWORD block[5];

  v2 = *(__CFRunLoop **)qword_1023110F8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A3230;
  block[3] = &unk_102162918;
  block[4] = a2;
  CFRunLoopPerformBlock(v2, kCFRunLoopDefaultMode, block);
  CFRunLoopWakeUp(*(CFRunLoopRef *)qword_1023110F8);
}

uint64_t **sub_1000A587C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  _QWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x40uLL);
    v10[4] = *(_QWORD *)a3;
    v10[5] = *(_QWORD *)(a3 + 8);
    *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 16);
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_1000A5944()
{
  if (qword_102306440 != -1)
    dispatch_once(&qword_102306440, &stru_102166050);
  return qword_102311148;
}

void sub_1000A5984(_BYTE *a1, int a2, uint64_t a3)
{
  void (*v6)(_BYTE *, uint64_t);
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  char *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  NSObject *v16;
  uint8_t *v17;
  _QWORD v18[2];
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  sub_100127B9C();
  sub_100127BDC();
  switch(a2)
  {
    case 31:
      if (a3)
      {
        if (!a1[1419])
        {
          v6 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 544);
LABEL_51:
          v6(a1, 1);
        }
      }
      else if (a1[1419])
      {
        v6 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 544);
LABEL_57:
        v6(a1, 0);
      }
      return;
    case 32:
    case 33:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
      return;
    case 34:
      if (a3)
      {
        if (a1[1420])
          return;
        a1[1420] = 1;
        BYTE1(v19[0]) = 1;
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_10219AC48);
        v7 = qword_10229FC88;
        if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Turning on AOP SPL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_10219AC48);
          LOWORD(v18[0]) = 0;
          v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Turning on AOP SPL", v18, 2, v18[0]);
LABEL_81:
          v17 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)", "%s\n", v8);
          if (v17 != buf)
            free(v17);
        }
      }
      else
      {
        if (!a1[1420])
          return;
        a1[1420] = 0;
        BYTE1(v19[0]) = 0;
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_10219AC48);
        v16 = qword_10229FC88;
        if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Turning off AOP SPL", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_10219AC48);
          LOWORD(v18[0]) = 0;
          v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Turning off AOP SPL", v18, 2, v18[0]);
          goto LABEL_81;
        }
      }
      sub_10103526C((uint64_t)(a1 + 192), (__int16 *)v19, 0);
      return;
    case 35:
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v9 = qword_10229FC88;
      if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v21 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "kNotificationPedometerPathStraightness, numberOfSpectators = %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_10219AC48);
        v19[0] = 67240192;
        v19[1] = a3;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "kNotificationPedometerPathStraightness, numberOfSpectators = %{public}d", v19, 8);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
      return;
    case 40:
      if (a3)
      {
        if (a1[1813])
          return;
        a1[1813] = 1;
        v11 = 305;
      }
      else
      {
        if (!a1[1813])
          return;
        a1[1813] = 0;
        v11 = 49;
      }
      *(_WORD *)buf = v11;
      sub_10103A314((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 41:
      if (a3)
      {
        if (a1[1814])
          return;
        a1[1814] = 1;
        v12 = 308;
      }
      else
      {
        if (!a1[1814])
          return;
        a1[1814] = 0;
        v12 = 52;
      }
      *(_WORD *)buf = v12;
      sub_10103A490((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 43:
      if (a3)
      {
        if (!a1[1815])
        {
          a1[1815] = 1;
          v13 = 310;
LABEL_54:
          *(_WORD *)buf = v13;
          sub_10103A60C((uint64_t)(a1 + 192), (__int16 *)buf, 0);
        }
      }
      else if (a1[1815])
      {
        a1[1815] = 0;
        v13 = 54;
        goto LABEL_54;
      }
      return;
    case 44:
      if (a3)
      {
        if (a1[1816])
          return;
        a1[1816] = 1;
        v14 = 311;
      }
      else
      {
        if (!a1[1816])
          return;
        a1[1816] = 0;
        v14 = 55;
      }
      *(_WORD *)buf = v14;
      sub_10103A788((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 45:
      if (a3)
      {
        if (a1[1817])
          return;
        a1[1817] = 1;
        v15 = 312;
      }
      else
      {
        if (!a1[1817])
          return;
        a1[1817] = 0;
        v15 = 56;
      }
      *(_WORD *)buf = v15;
      sub_10103A904((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    default:
      switch(a2)
      {
        case 0:
          if (a3 && a1[859])
            sub_10014C2F4((uint64_t)a1, 0, (uint64_t)(a1 + 680), 160);
          break;
        case 2:
          if (a3)
            sub_10014C2F4((uint64_t)a1, 2, (uint64_t)(a1 + 840), 16);
          break;
        case 4:
          if (a3 && a1[283] && a1[859])
            sub_10014C2F4((uint64_t)a1, 4, (uint64_t)(a1 + 284), 60);
          break;
        case 7:
          if (!a1[861])
          {
            v6 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 200);
            if (!a3)
              goto LABEL_57;
            goto LABEL_51;
          }
          break;
        default:
          return;
      }
      return;
  }
}

uint64_t sub_1000A604C(uint64_t result, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  if (!a2 && a3 < a4)
  {
    v4 = result;
    if (!*(_BYTE *)(result + 184))
    {
      result = sub_1000A617C(result, 0);
      v5 = (_QWORD *)result;
      v7 = v6;
      if ((_QWORD *)result != v6)
      {
        while (1)
        {
          v8 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[4] + 32))(v5[4]);
          v10 = objc_opt_class(NSDictionary, v9);
          result = objc_opt_isKindOfClass(v8, v10);
          if ((result & 1) != 0)
          {
            v11 = objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ClientName"));
            v13 = objc_opt_class(NSString, v12);
            result = objc_opt_isKindOfClass(v11, v13);
            if ((result & 1) != 0)
            {
              result = (uint64_t)objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.NanoMaps"));
              if ((result & 1) != 0)
                break;
            }
          }
          v14 = (_QWORD *)v5[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v5[2];
              v16 = *v15 == (_QWORD)v5;
              v5 = v15;
            }
            while (!v16);
          }
          v5 = v15;
          if (v15 == v7)
          {
            v5 = v7;
            break;
          }
        }
      }
      *(_BYTE *)(v4 + 184) = v5 != v7;
    }
  }
  return result;
}

uint64_t sub_1000A6174(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1000A617C(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 32);
}

double sub_1000A6194()
{
  return -1.0;
}

void sub_1000A61A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  double v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 + 80 * a2;
  v6 = *(_QWORD **)(v3 + 32);
  v4 = v3 + 32;
  v5 = v6;
  v7 = *(double *)(v4 - 16);
  if (v7 <= 0.0)
  {
    if (v5 != (_QWORD *)(v4 + 8))
    {
      do
      {
        *((_DWORD *)v5 + 11) = 1;
        v18 = (_QWORD *)v5[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v5[2];
            v15 = *v19 == (_QWORD)v5;
            v5 = v19;
          }
          while (!v15);
        }
        v5 = v19;
      }
      while (v19 != (_QWORD *)(v4 + 8));
    }
  }
  else if (v5 != (_QWORD *)(v2 + 80 * a2 + 40))
  {
    do
    {
      if (v7 <= 0.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102162C30);
        v10 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 16);
          *(_DWORD *)buf = 134217984;
          v23 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102162C30);
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 16);
          v20 = 134217984;
          v21 = v16;
          v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f", COERCE_DOUBLE(&v20));
          sub_100512490("Generic", 1, 0, 0, "void CLMotionNotifier::updateSamplePeriods(int)", "%s\n", v17);
          if (v17 != (char *)buf)
            free(v17);
        }
      }
      v12 = *(_QWORD *)(a1 + 16);
      v7 = *(double *)(v12 + 80 * a2 + 16);
      *((_DWORD *)v5 + 11) = llround(*((double *)v5 + 6) / v7);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      v5 = v14;
    }
    while (v14 != (_QWORD *)(v12 + 80 * a2 + 40));
  }
}

void sub_1000A6464(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_10001BB9C((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t sub_1000A6504()
{
  uint64_t v0;
  int v1;

  v0 = sub_1000A6998();
  v1 = sub_1000A69D8(v0);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t sub_1000A652C(char a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[4];
  char v5;

  result = qword_1023108E0;
  if (!qword_1023108E0)
  {
    v3 = sub_100127B9C();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1005CC714;
    v4[3] = &unk_102146CB8;
    v5 = a1;
    sub_1000A50A8(v3, (uint64_t)v4);
    return qword_1023108E0;
  }
  return result;
}

uint64_t sub_1000A659C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int *v5;

  *(_WORD *)a1 = 1542;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101C2CEB0;
  v2 = a1 + 56;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 0;
  v4 = 0;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(a1 + 56, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 1;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 2;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 3;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 4;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 5;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  v4 = 6;
  v5 = &v4;
  *((_DWORD *)sub_1000A6778(v2, &v4, (uint64_t)&unk_101B9EB60, &v5) + 5) = 0;
  return a1;
}

void sub_1000A674C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A6778(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1000A6984(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A6998()
{
  if (qword_102307C00 != -1)
    dispatch_once(&qword_102307C00, &stru_10217F410);
  return qword_102311520;
}

uint64_t sub_1000A69D8(uint64_t a1)
{
  double Current;
  double v3;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 88);
  if (v3 == 1.79769313e308)
    return 2;
  if (v3 >= Current + -1800.0)
    return v3 <= Current;
  return 0;
}

uint64_t sub_1000A6A30()
{
  if (qword_102306AD0 != -1)
    dispatch_once(&qword_102306AD0, &stru_102169448);
  return qword_1023111D8;
}

void sub_1000A6A70(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  NSObject *v5;
  char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  __int16 v16;
  size_t v17;
  _BYTE length[12];
  __int16 v19;
  const char *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *string;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    v7 = "CONNECTION_INVALID";
    v8 = "DEFAULT";
    if (object == &_xpc_error_termination_imminent)
      v8 = "TERMINATION_IMMINENT";
    if (object != &_xpc_error_connection_invalid)
      v7 = v8;
    if (object == &_xpc_error_connection_interrupted)
      v9 = "CONNECTION_INTERRUPTED";
    else
      v9 = v7;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v22 = v9;
      v23 = 2080;
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsdClient,XPC_ERROR_%{public}s,ErrorDesc,%s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      v14 = qword_1022A0078;
      *(_DWORD *)length = 136446466;
      *(_QWORD *)&length[4] = v9;
      v19 = 2080;
      v20 = xpc_dictionary_get_string(object, _xpc_error_key_description);
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#gpsdClient,XPC_ERROR_%{public}s,ErrorDesc,%s", length, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    if (object == &_xpc_error_connection_interrupted)
    {
      sub_1016DFBE4(a1);
    }
    else if (object == &_xpc_error_termination_imminent)
    {
      sub_1016DFA60();
    }
    else if (object == &_xpc_error_connection_invalid)
    {
      sub_1016DFD94(a1);
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    *(_QWORD *)length = 0;
    if (xpc_dictionary_get_data(object, "gpsdResponse", (size_t *)length))
      operator new();
    v17 = 0;
    if (xpc_dictionary_get_data(object, "gpsdIndication", &v17))
      operator new();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsdClient,#Warning,Received XPC dictionary without gpsdResponse or gpsdIndication", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      v16 = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,#Warning,Received XPC dictionary without gpsdResponse or gpsdIndication", &v16, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v6);
      goto LABEL_64;
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_connection)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected XPC_TYPE_CONNECTION", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      *(_WORD *)length = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,Unexpected XPC_TYPE_CONNECTION", length, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v6);
      goto LABEL_64;
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_endpoint)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected XPC_TYPE_ENDPOINT", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      *(_WORD *)length = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,Unexpected XPC_TYPE_ENDPOINT", length, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v6);
      goto LABEL_64;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Unexpected unknown xpc_type_t", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      *(_WORD *)length = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,Unexpected unknown xpc_type_t", length, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleMessageFromGpsd(xpc_connection_t)", "%s\n", v6);
LABEL_64:
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_1000A72C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1000A7344(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193420;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_1000A7374(_QWORD *result)
{
  *result = off_102193420;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1000A7388(std::mutex *a1, _QWORD *a2)
{
  std::mutex *v2;
  std::mutex *v3;
  _QWORD *v4;
  uint64_t *v5;
  NSObject *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  int v12;
  void **v13;
  void **v14;
  _BYTE *v15;
  char *v16;
  void *__p[2];
  char v18;
  _BYTE buf[12];
  __int16 v20;
  void **v21;
  char v22;
  int v23;
  void **v24;
  __int16 v25;
  _BYTE *v26;
  void *v27[2];
  char v28;

  if (!*a2)
  {
    sub_1016E0200();
    __break(1u);
LABEL_18:
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
    goto LABEL_5;
  }
  v4 = a2;
  v3 = a1;
  v2 = a1 + 2;
  std::mutex::lock(a1 + 2);
  *(_DWORD *)&v3[3].__m_.__opaque[40] = 2;
  if (*(_DWORD *)&v3[3].__m_.__opaque[44] == *(_DWORD *)(*v4 + 16))
  {
    *(_DWORD *)&v3[3].__m_.__opaque[48] = sub_1000A76D4(*(_DWORD *)(*v4 + 20));
    std::condition_variable::notify_one((std::condition_variable *)&v3[3]);
    goto LABEL_16;
  }
  v5 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_18;
LABEL_5:
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    sub_10173E9F0(*(_DWORD *)(*v4 + 16), (uint64_t)v27);
    v7 = v28;
    v8 = (void **)v27[0];
    sub_10173E9F0(*(_DWORD *)&v3[3].__m_.__opaque[44], (uint64_t)__p);
    v9 = v27;
    if (v7 < 0)
      v9 = v8;
    if (v18 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v9;
    v20 = 2082;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsdClient,Response mismatch,ReceivedType,%{public}s,BlockedType,%{public}s", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(v27, 0x65CuLL);
    if (v5[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v11 = qword_1022A0078;
    sub_10173E9F0(*(_DWORD *)(*v4 + 16), (uint64_t)__p);
    v12 = v18;
    v13 = (void **)__p[0];
    sub_10173E9F0(*(_DWORD *)&v3[3].__m_.__opaque[44], (uint64_t)buf);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v22 >= 0)
      v15 = buf;
    else
      v15 = *(_BYTE **)buf;
    v23 = 136446466;
    v24 = v14;
    v25 = 2082;
    v26 = v15;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, v27, 1628, &_mh_execute_header, v11, 16, "#gpsdClient,Response mismatch,ReceivedType,%{public}s,BlockedType,%{public}s", &v23, 22);
    if (v22 < 0)
      operator delete(*(void **)buf);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 0, "void CLGpsdClient::gpsdResponseHandler(std::unique_ptr<proto::gpsd::Response>)", "%s\n", v16);
    if (v16 != (char *)v27)
      free(v16);
  }
LABEL_16:
  std::mutex::unlock(v2);
}

void sub_1000A7680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::mutex *v30;

  std::mutex::unlock(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A76D4(int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  int v7;

  if ((a1 - 1) < 9)
    return dword_101CDB7F0[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF88);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsdUtil,Unhandled proto::gnss::Result enum,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF88);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsdUtil,Unhandled proto::gnss::Result enum,%{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "Result gnss::Convert::fromProtobuf(proto::gnss::Result)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return 7;
}

double sub_1000A789C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193498;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  return result;
}

void sub_1000A78EC(_QWORD *a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, int a5)
{
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  CFIndex Count;
  unsigned __int8 v13;
  void *v14;
  double Current;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  CFIndex v20;
  const char *v21;
  uint8_t *v22;
  char v23;
  char v24;
  int v25;
  _BYTE v26[16];
  _QWORD *v27;
  pthread_mutex_t *v28;
  __int16 v29;
  os_activity_scope_state_s state;
  _BYTE v31[18];
  char v32;
  char v33;
  uint8_t buf[96];
  char v35;
  _BYTE v36[32];
  uint64_t v37;

  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientScanCacheCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (!a4 || a5)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v16 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = a5;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "WifiMgr, error, cache callback, %{public}d, %{public}p", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_DWORD *)v31 = 67240448;
      *(_DWORD *)&v31[4] = a5;
      *(_WORD *)&v31[8] = 2050;
      *(_QWORD *)&v31[10] = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, error, cache callback, %{public}d, %{public}p", v31, 18);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  else
  {
    sub_1000A8D50((uint64_t)a1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      Count = CFArrayGetCount(a4);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "WifiMgr, onWiFiDeviceClientScanCacheCallback, %{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v19 = qword_1022A0048;
      v20 = CFArrayGetCount(a4);
      *(_DWORD *)v31 = 134349056;
      *(_QWORD *)&v31[4] = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 1, "WifiMgr, onWiFiDeviceClientScanCacheCallback, %{public}lu", v31, 12);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v27 = a1 + 103;
    (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
    v29 = 256;
    sub_1001C1D6C((int)v26, a3);
    v13 = atomic_load((unsigned __int8 *)&qword_102301D48);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_102301D48))
    {
      sub_1001E4804(buf);
      v31[0] = 0;
      v23 = sub_1001E4874(*(uint64_t *)buf, "printScanResultsCSV", v31);
      if (v31[0])
        v24 = v23;
      else
        v24 = 0;
      sub_100261F44((uint64_t)buf);
      byte_102301D40 = v24;
      __cxa_guard_release(&qword_102301D48);
    }
    if (byte_102301D40)
      sub_1001C1D70((uint64_t)v26, "scanResults");
    buf[0] = 5;
    sub_1000A881C((unsigned int *)a1 + 189, (char *)buf);
    ++*((_DWORD *)a1 + 189);
    *((_BYTE *)a1 + 416) = 5;
    *((CFAbsoluteTime *)a1 + 53) = CFAbsoluteTimeGetCurrent();
    sub_100279AE4(a1 + 54);
    sub_1000A99C0((uint64_t)a1, a4, (double *)a1 + 48, a1 + 54, (uint64_t)"cache");
    sub_1000A8EF0((uint64_t)a1, a1 + 54, *((char *)a1 + 416));
    if (a1[55] != a1[54])
    {
      buf[0] = 0;
      buf[8] = 0;
      v35 = 0;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      buf[1] = *((_BYTE *)a1 + 416);
      (*(void (**)(_QWORD *, _BYTE *, _BYTE *))(*a1 + 224))(a1, &v36[8], v36);
      sub_1000A7FFC((uint64_t)a1, (uint64_t)v31);
      if (v33)
        sub_1005C7EDC((uint64_t)&buf[8], (uint64_t)v31);
      v25 = 3;
      (*(void (**)(_QWORD *, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, &v25, buf, 1, 0xFFFFFFFFLL, 0);
      v14 = (void *)a1[82];
      Current = CFAbsoluteTimeGetCurrent();
      objc_msgSend(v14, "processEventTime:atCurrentTime:", Current, CFAbsoluteTimeGetCurrent());
      if (v33 && v32 < 0)
        operator delete(*(void **)&v31[8]);
      *(_QWORD *)v31 = &v36[8];
      sub_100279AA4((void ***)v31);
      if (v35 && (char)buf[39] < 0)
        operator delete(*(void **)&buf[16]);
    }
    sub_10011A5A8(v26);
    if (HIBYTE(v29))
    {
      if ((_BYTE)v29)
        pthread_mutex_unlock(v28);
      else
        (*(void (**)(_QWORD *))(*v27 + 24))(v27);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1000A7F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  sub_100261F44((uint64_t)&a34);
  __cxa_guard_abort(&qword_102301D48);
  sub_10011A5A8(&a12);
  sub_10187E514((uint64_t)&a14);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A7FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  __int128 __p;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;

  v4 = a1 + 824;
  v15 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v16 = 256;
  v8 = qword_1023114A0;
  if (byte_1023114A8[23] < 0)
  {
    sub_100115CE4(&__p, *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
  }
  else
  {
    __p = *(_OWORD *)byte_1023114A8;
    v10 = *(_QWORD *)&byte_1023114A8[16];
  }
  v11 = xmmword_1023114C0;
  v12 = xmmword_1023114D0;
  v13 = xmmword_1023114E0;
  v14 = qword_1023114F0;
  if (sub_1000A8160(a1, &v8))
  {
    *(_QWORD *)a2 = v8;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v10;
    __p = 0uLL;
    v10 = 0;
    v5 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v13;
    *(_QWORD *)(a2 + 80) = v14;
    *(_BYTE *)(a2 + 88) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v6 = SHIBYTE(v10);
    *(_BYTE *)(a2 + 88) = 0;
    if (v6 < 0)
      operator delete((void *)__p);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1000A8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_10187E514(v15 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8160(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  std::string *v10;
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  uint64_t v19;
  std::string *p_p;
  int v22;
  int v23;
  const char *v24;
  uint64_t v25;
  std::string *v26;
  void **v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  void *__dst[2];
  uint64_t v33;
  uint64_t v34;
  std::string __p;
  uint64_t v36;
  __int16 v37;
  std::string v38;
  int v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  _BYTE v43[10];
  std::string *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  v4 = a1 + 824;
  v36 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v37 = 256;
  if (!*(_QWORD *)(a1 + 312) || !*(_QWORD *)(a1 + 304))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 312) == 0;
      v13 = *(_QWORD *)(a1 + 304) == 0;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v43 = v12;
      *(_WORD *)&v43[4] = 1026;
      *(_DWORD *)&v43[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiMgr, getAssoc, fail, device, %{public}d, manager, %{public}d", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v14 = *(_QWORD *)(a1 + 312) == 0;
    v15 = *(_QWORD *)(a1 + 304) == 0;
    LODWORD(v38.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(v38.__r_.__value_.__r.__words[0]) = v14;
    LOWORD(v38.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v38.__r_.__value_.__r.__words[1] + 2) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiMgr, getAssoc, fail, device, %{public}d, manager, %{public}d", &v38, 14);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v16);
    goto LABEL_39;
  }
  if (!*(_BYTE *)(a1 + 632) || *(int *)(a1 + 584) < 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "WifiMgr, getAssoc, fail, no association", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    LOWORD(v38.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WifiMgr, getAssoc, fail, no association", &v38, 2);
    v17 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v24);
LABEL_39:
    if (v17 != buf)
      free(v17);
LABEL_25:
    v19 = 0;
    goto LABEL_26;
  }
  *a2 = *(_QWORD *)(a1 + 544);
  v5 = a2 + 1;
  std::string::operator=((std::string *)(a2 + 1), (const std::string *)(a1 + 552));
  v6 = *(_OWORD *)(a1 + 576);
  v7 = *(_OWORD *)(a1 + 592);
  v8 = *(_OWORD *)(a1 + 608);
  a2[10] = *(_QWORD *)(a1 + 624);
  *((_OWORD *)a2 + 3) = v7;
  *((_OWORD *)a2 + 4) = v8;
  *((_OWORD *)a2 + 2) = v6;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    __dst[0] = (void *)*a2;
    v10 = &v38;
    sub_1000C2150(__dst, &v38);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 31) < 0)
    {
      sub_100115CE4(&__p, (void *)a2[1], a2[2]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
      __p.__r_.__value_.__r.__words[2] = a2[3];
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = *((_DWORD *)a2 + 10);
    v23 = *((_DWORD *)a2 + 8);
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)v43 = v10;
    *(_WORD *)&v43[8] = 2081;
    v44 = p_p;
    v45 = 1026;
    v46 = v22;
    v47 = 1026;
    v48 = v23;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WifiMgr, getAssoc, mac, %{private}s, ssid, %{private}s, channel, %{public}d, rssi, %{public}d", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v25 = qword_1022A0048;
    v34 = *a2;
    v26 = &__p;
    sub_1000C2150(&v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 31) < 0)
    {
      sub_100115CE4(__dst, (void *)a2[1], a2[2]);
    }
    else
    {
      *(_OWORD *)__dst = *v5;
      v33 = a2[3];
    }
    v27 = __dst;
    if (v33 < 0)
      v27 = (void **)__dst[0];
    v28 = *((_DWORD *)a2 + 10);
    v29 = *((_DWORD *)a2 + 8);
    LODWORD(v38.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    WORD2(v38.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
    HIWORD(v38.__r_.__value_.__r.__words[2]) = 1026;
    v39 = v28;
    v40 = 1026;
    v41 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "WifiMgr, getAssoc, mac, %{private}s, ssid, %{private}s, channel, %{public}d, rssi, %{public}d", &v38, 34);
    v31 = v30;
    if (SHIBYTE(v33) < 0)
      operator delete(__dst[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
  v19 = 1;
LABEL_26:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v19;
}

void sub_1000A87B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1000A881C(unsigned int *a1, char *a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  const char *v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  _BYTE v27[18];
  char v28;
  int v29;
  _BYTE *v30;
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  char v34;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v5;
    v32 = 2080;
    v33 = sub_1000A9998(v5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WIFI: stats: increment scan, type, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v12 = qword_1022A02D8;
    v13 = *a2;
    v14 = sub_1000A9998(v13);
    *(_DWORD *)v27 = 67109378;
    *(_DWORD *)&v27[4] = v13;
    *(_WORD *)&v27[8] = 2080;
    *(_QWORD *)&v27[10] = v14;
    LODWORD(v26) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "WIFI: stats: increment scan, type, %d, %s", v27, v26);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v6 = *a2;
  if (v6 > 12)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v8 = *a2;
      v9 = sub_1000A9998(v8);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v8;
      v32 = 2082;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WIFI: stats: unknown scan type, %{public}d, %{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v21 = qword_1022A0048;
      v22 = *a2;
      v23 = sub_1000A9998(v22);
      *(_DWORD *)v27 = 67240450;
      *(_DWORD *)&v27[4] = v22;
      *(_WORD *)&v27[8] = 2082;
      *(_QWORD *)&v27[10] = v23;
      LODWORD(v26) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "WIFI: stats: unknown scan type, %{public}d, %{public}s", v27, v26);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  else
  {
    ++a1[v6 + 3];
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1005C6DFC(a1, buf);
    v11 = v34 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v27 = 136315138;
    *(_QWORD *)&v27[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WIFI: stats: scansStat, %s", v27, 0xCu);
    if (v34 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
    v17 = qword_1022A02D8;
    sub_1005C6DFC(a1, v27);
    if (v28 >= 0)
      v18 = v27;
    else
      v18 = *(_BYTE **)v27;
    v29 = 136315138;
    v30 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "WIFI: stats: scansStat, %s", (const char *)&v29);
    v20 = v19;
    if (v28 < 0)
      operator delete(*(void **)v27);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
}

uint64_t sub_1000A8D50(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(result + 536))
  {
    v1 = result;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WifiService, power mismatch", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "WifiService, power mismatch", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::handlePowerMismatch()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return sub_1005B5AA0(v1);
  }
  return result;
}

void sub_1000A8EF0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  NSObject *v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  const char *v46;
  int v47;
  _QWORD v48[5];
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  void *__dst[2];
  uint64_t v57;
  std::string::size_type v58;
  std::string __p;
  std::string v60;
  _BYTE v61[6];
  _BYTE v62[6];
  void **v63;
  _BYTE v64[6];
  _BYTE v65[6];
  _BYTE v66[6];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  _BOOL4 v72;
  _BYTE buf[12];
  __int16 v74;
  _BYTE v75[10];
  _BYTE v76[6];
  _BYTE v77[6];
  std::string *v78;
  _BYTE v79[6];
  _BYTE v80[6];
  _BYTE v81[6];
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  _BOOL4 v87;

  HIDWORD(v45) = a3;
  v46 = sub_1000A9998(a3);
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    LODWORD(v60.__r_.__value_.__l.__data_) = -1171354717 * ((unint64_t)(a2[1] - *a2) >> 3);
    sub_10011B4E4((uint64_t)buf, "scanResult", &v60);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  v7 = a2;
  v6 = *a2;
  v5 = v7[1];
  v47 = -1171354717 * ((unint64_t)(v5 - v6) >> 3);
  if (v5 == v6)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      if (*(_BYTE *)(a1 + 632) && *(int *)(a1 + 584) >= 1)
      {
        *(_QWORD *)buf = *(_QWORD *)(a1 + 544);
        v60.__r_.__value_.__r.__words[0] = *(_QWORD *)v6;
        v12 = sub_10009483C(buf, &v60);
      }
      else
      {
        v12 = 0;
      }
      if (v11 <= sub_100EF40C4())
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v13 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          __dst[0] = *(void **)v6;
          sub_1000C2254(__dst, &v60);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v60;
          else
            v14 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if (*(char *)(v6 + 31) < 0)
          {
            sub_100115CE4(&__p, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
          }
          else
          {
            v15 = *(_OWORD *)(v6 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v17 = *(_DWORD *)(v6 + 32);
          v18 = *(_DWORD *)(v6 + 36);
          v19 = *(_DWORD *)(v6 + 40);
          v20 = *(_QWORD *)(v6 + 48);
          v21 = *(_QWORD *)(v6 + 56);
          *(_DWORD *)buf = 136448771;
          *(_QWORD *)&buf[4] = v46;
          v74 = 2081;
          *(_QWORD *)v75 = v14;
          *(_WORD *)&v75[8] = 1026;
          *(_DWORD *)v76 = v11;
          *(_WORD *)&v76[4] = 1026;
          *(_DWORD *)v77 = v47;
          *(_WORD *)&v77[4] = 2081;
          v78 = p_p;
          *(_WORD *)v79 = 1026;
          *(_DWORD *)&v79[2] = v17;
          *(_WORD *)v80 = 1026;
          *(_DWORD *)&v80[2] = v18;
          *(_WORD *)v81 = 1026;
          *(_DWORD *)&v81[2] = v19;
          v82 = 2050;
          v83 = v20;
          v84 = 2050;
          v85 = v21;
          v86 = 1026;
          v87 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WifiScan, result, %{public}s, mac, %{private}s, %{public}d / %{public}d, ssid, %{private}s, rssi, %{public}d, mode, %{public}d, channel, %{public}d, age, %{public}0.1lf, timestamp, %{public}.1lf, associated, %{public}d", buf, 0x58u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v24 = qword_1022A0048;
          v58 = *(_QWORD *)v6;
          sub_1000C2254(&v58, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &__p;
          else
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (*(char *)(v6 + 31) < 0)
          {
            sub_100115CE4(__dst, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
          }
          else
          {
            v26 = *(_OWORD *)(v6 + 8);
            v57 = *(_QWORD *)(v6 + 24);
            *(_OWORD *)__dst = v26;
          }
          v27 = __dst;
          if (v57 < 0)
            v27 = (void **)__dst[0];
          v28 = *(_DWORD *)(v6 + 32);
          v29 = *(_DWORD *)(v6 + 36);
          v30 = *(_DWORD *)(v6 + 40);
          v31 = *(_QWORD *)(v6 + 48);
          v32 = *(_QWORD *)(v6 + 56);
          LODWORD(v60.__r_.__value_.__l.__data_) = 136448771;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
          WORD2(v60.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
          HIWORD(v60.__r_.__value_.__r.__words[2]) = 1026;
          *(_DWORD *)v61 = v11;
          *(_WORD *)&v61[4] = 1026;
          *(_DWORD *)v62 = v47;
          *(_WORD *)&v62[4] = 2081;
          v63 = v27;
          *(_WORD *)v64 = 1026;
          *(_DWORD *)&v64[2] = v28;
          *(_WORD *)v65 = 1026;
          *(_DWORD *)&v65[2] = v29;
          *(_WORD *)v66 = 1026;
          *(_DWORD *)&v66[2] = v30;
          v67 = 2050;
          v68 = v31;
          v69 = 2050;
          v70 = v32;
          v71 = 1026;
          v72 = v12;
          LODWORD(v45) = 88;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "WifiScan, result, %{public}s, mac, %{private}s, %{public}d / %{public}d, ssid, %{private}s, rssi, %{public}d, mode, %{public}d, channel, %{public}d, age, %{public}0.1lf, timestamp, %{public}.1lf, associated, %{public}d", &v60, v45);
          v34 = v33;
          if (SHIBYTE(v57) < 0)
            operator delete(__dst[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v34);
          if (v34 != buf)
            free(v34);
        }
      }
      v22 = sub_100129380(v6);
      v23 = sub_1000AFA5C(*(_DWORD *)(v6 + 40));
      v10 += (v22 >> 41) & 1;
      v9 += v23 ^ 1;
      v8 += v23;
      v6 += 88;
      ++v11;
    }
    while (v6 != v5);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v35 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v46;
    v74 = 1026;
    *(_DWORD *)v75 = v47;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "WifiScan, results, %{public}s, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    LODWORD(v60.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
    WORD2(v60.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v47;
    LODWORD(v45) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiScan, results, %{public}s, %{public}d", &v60, v45);
    v42 = (char *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
  if (HIDWORD(v45) != 5 || v47 >= 1)
  {
    v36 = v47;
    if (v47)
    {
      if (v47 == 1)
      {
        v36 = 1;
      }
      else if (v47 >= 5)
      {
        if (v47 >= 9)
        {
          if (v47 >= 0x11)
          {
            if (v47 >= 0x21)
            {
              if (v47 < 0x41)
                v36 = 64;
              else
                v36 = 65;
            }
            else
            {
              v36 = 32;
            }
          }
          else
          {
            v36 = 16;
          }
        }
        else
        {
          v36 = 8;
        }
      }
      else
      {
        v36 = 4;
      }
    }
    v37 = v8;
    if (v8)
    {
      if (v8 == 1)
      {
        v37 = 1;
      }
      else if (v8 >= 5)
      {
        if (v8 >= 9)
        {
          if (v8 >= 0x11)
          {
            if (v8 >= 0x21)
            {
              if (v8 < 0x41)
                v37 = 64;
              else
                v37 = 65;
            }
            else
            {
              v37 = 32;
            }
          }
          else
          {
            v37 = 16;
          }
        }
        else
        {
          v37 = 8;
        }
      }
      else
      {
        v37 = 4;
      }
    }
    v38 = v9;
    if (v9)
    {
      if (v9 == 1)
      {
        v38 = 1;
      }
      else if (v9 >= 5)
      {
        if (v9 >= 9)
        {
          if (v9 >= 0x11)
          {
            if (v9 >= 0x21)
            {
              if (v9 < 0x41)
                v38 = 64;
              else
                v38 = 65;
            }
            else
            {
              v38 = 32;
            }
          }
          else
          {
            v38 = 16;
          }
        }
        else
        {
          v38 = 8;
        }
      }
      else
      {
        v38 = 4;
      }
    }
    v39 = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        v39 = 1;
      }
      else if (v10 >= 5)
      {
        if (v10 >= 9)
        {
          if (v10 >= 0x11)
          {
            if (v10 >= 0x21)
            {
              if (v10 < 0x41)
                v39 = 64;
              else
                v39 = 65;
            }
            else
            {
              v39 = 32;
            }
          }
          else
          {
            v39 = 16;
          }
        }
        else
        {
          v39 = 8;
        }
      }
      else
      {
        v39 = 4;
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v40 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136448258;
      *(_QWORD *)&buf[4] = v46;
      v74 = 1026;
      *(_DWORD *)v75 = v47;
      *(_WORD *)&v75[4] = 1026;
      *(_DWORD *)&v75[6] = v36;
      *(_WORD *)v76 = 1026;
      *(_DWORD *)&v76[2] = v8;
      *(_WORD *)v77 = 1026;
      *(_DWORD *)&v77[2] = v37;
      LOWORD(v78) = 1026;
      *(_DWORD *)((char *)&v78 + 2) = v9;
      HIWORD(v78) = 1026;
      *(_DWORD *)v79 = v38;
      *(_WORD *)&v79[4] = 1026;
      *(_DWORD *)v80 = v10;
      *(_WORD *)&v80[4] = 1026;
      *(_DWORD *)v81 = v39;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WsMetric, scanreply, %{public}s, %{public}d, %{public}d, 2ghz, %{public}d, %{public}d, 5ghz, %{public}d, %{public}d, la, %{public}d, %{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      LODWORD(v60.__r_.__value_.__l.__data_) = 136448258;
      *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
      WORD2(v60.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v60.__r_.__value_.__r.__words[1] + 6) = v47;
      WORD1(v60.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v60.__r_.__value_.__r.__words[2]) = v36;
      *(_WORD *)v61 = 1026;
      *(_DWORD *)&v61[2] = v8;
      *(_WORD *)v62 = 1026;
      *(_DWORD *)&v62[2] = v37;
      LOWORD(v63) = 1026;
      *(_DWORD *)((char *)&v63 + 2) = v9;
      HIWORD(v63) = 1026;
      *(_DWORD *)v64 = v38;
      *(_WORD *)&v64[4] = 1026;
      *(_DWORD *)v65 = v10;
      *(_WORD *)&v65[4] = 1026;
      *(_DWORD *)v66 = v39;
      LODWORD(v45) = 60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WsMetric, scanreply, %{public}s, %{public}d, %{public}d, 2ghz, %{public}d, %{public}d, 5ghz, %{public}d, %{public}d, la, %{public}d, %{public}d", &v60, v45);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v43);
      if (v44 != buf)
        free(v44);
    }
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_1005BB7A0;
    v48[3] = &unk_102146810;
    v48[4] = v46;
    v49 = v47;
    v50 = v36;
    v51 = v8;
    v52 = v37;
    v53 = v38;
    v54 = v10;
    v55 = v39;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiservice.scanreply"), v48);
  }
}

void sub_1000A994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_1000A9998(unsigned int a1)
{
  if (a1 > 0xC)
    return "na";
  else
    return (&off_10217F350)[a1];
}

uint64_t sub_1000A99C0(uint64_t a1, CFArrayRef theArray, double *a3, uint64_t *a4, uint64_t a5)
{
  CFIndex Count;
  NSObject *v9;
  const char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  double v15;
  CFIndex v16;
  int v17;
  int v18;
  const void *ValueAtIndex;
  CFTypeID v20;
  void *TypeID;
  NSObject *v22;
  NSObject *v23;
  _BYTE *v24;
  std::string *p_p;
  NSObject *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  _BYTE *v30;
  std::string *v31;
  NSObject *v32;
  _BYTE *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  std::string *v37;
  void **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  uint64_t v44;
  std::string *v45;
  void **v46;
  char *v47;
  char *v48;
  NSObject *v49;
  const char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  uint64_t *v56;
  __int128 v57;
  double *v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void *__dst[2];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  _BYTE v69[28];
  __int16 v70;
  void **v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  std::string __p;
  _BYTE v83[32];
  _BYTE v84[32];
  __int128 v85;
  uint64_t v86;
  _BYTE buf[38];
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;

  v58 = a3;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 10001)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v9 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = a5;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = Count;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "WifiScan, warning, too many APs returned from wifid. source, %{public}s, APs, %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        *(_DWORD *)v83 = 136446466;
        *(_QWORD *)&v83[4] = a5;
        *(_WORD *)&v83[12] = 2050;
        *(_QWORD *)&v83[14] = Count;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiScan, warning, too many APs returned from wifid. source, %{public}s, APs, %{public}ld", v83, 22);
        v11 = (char *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
  else
  {
    Count = 0;
  }
  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  v12 = (_QWORD *)*a4;
  v13 = (_QWORD *)a4[1];
  while (v12 != v13)
  {
    *(_QWORD *)buf = *v12;
    sub_1000AF824((uint64_t)&v66, buf, buf);
    v12 += 11;
  }
  *(double *)&v14 = CFAbsoluteTimeGetCurrent();
  if (Count >= 1)
  {
    v15 = *(double *)&v14;
    v61 = a1;
    v56 = a4;
    v16 = 0;
    v60 = 0;
    v17 = 0;
    v18 = 0;
    v62 = 0;
    *(_QWORD *)&v14 = 67240451;
    v57 = v14;
    *(_QWORD *)&v14 = 136381187;
    v54 = v14;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
      v20 = CFGetTypeID(ValueAtIndex);
      TypeID = (void *)WiFiNetworkGetTypeID();
      if ((void *)v20 != TypeID)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v22 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "WifiScan, failed to retrieve index %{public}d in array", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          *(_DWORD *)v83 = 67240192;
          *(_DWORD *)&v83[4] = v16;
          LODWORD(v53) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiScan, failed to retrieve index %{public}d in array", v83, v53);
          v35 = (char *)v34;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        ++v18;
        goto LABEL_93;
      }
      *(_QWORD *)v83 = qword_1023114A0;
      if (byte_1023114A8[23] < 0)
      {
        TypeID = sub_100115CE4(&v83[8], *(void **)byte_1023114A8, *(unint64_t *)&byte_1023114A8[8]);
      }
      else
      {
        *(_OWORD *)&v83[8] = *(_OWORD *)byte_1023114A8;
        *(_QWORD *)&v83[24] = *(_QWORD *)&byte_1023114A8[16];
      }
      *(_OWORD *)v84 = xmmword_1023114C0;
      *(_OWORD *)&v84[16] = xmmword_1023114D0;
      v85 = xmmword_1023114E0;
      v86 = qword_1023114F0;
      if (!sub_1000AAB5C((uint64_t)TypeID, (uint64_t)ValueAtIndex, (uint64_t)v83, 0))
      {
        ++v18;
        goto LABEL_91;
      }
      *(double *)&v84[24] = v15 - *(double *)&v84[16];
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146A30);
      v23 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)v83;
        sub_1000C2150(__dst, (std::string *)v69);
        if (v69[23] >= 0)
          v24 = v69;
        else
          v24 = *(_BYTE **)v69;
        if ((v83[31] & 0x80000000) != 0)
          sub_100115CE4(&__p, *(void **)&v83[8], *(unint64_t *)&v83[16]);
        else
          __p = *(std::string *)&v83[8];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67111170;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = Count;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v24;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = p_p;
        v88 = 1024;
        v89 = *(_DWORD *)v84;
        v90 = 1024;
        v91 = *(_DWORD *)&v84[4];
        v92 = 1024;
        v93 = *(_DWORD *)&v84[8];
        v94 = 2048;
        v95 = *(_QWORD *)&v84[16];
        v96 = 2048;
        v97 = *(_QWORD *)&v84[24];
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WIFI_SCAN: raw scan result, ap, %d, %ld, mac, %-20s, ssid, %-30s, rssi, %+4d, mode, %d, channel, %3d, age, %5.2lf, timestamp, %.1lf", buf, 0x4Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v69[23] & 0x80000000) != 0)
          operator delete(*(void **)v69);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146A30);
        v36 = qword_1022A02D8;
        v65 = *(_QWORD *)v83;
        sub_1000C2150(&v65, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &__p;
        else
          v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v83[31] & 0x80000000) != 0)
        {
          sub_100115CE4(__dst, *(void **)&v83[8], *(unint64_t *)&v83[16]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)&v83[8];
          v64 = *(_QWORD *)&v83[24];
        }
        v38 = __dst;
        if (v64 < 0)
          v38 = (void **)__dst[0];
        *(_DWORD *)v69 = 67111170;
        *(_DWORD *)&v69[4] = v16;
        *(_WORD *)&v69[8] = 2048;
        *(_QWORD *)&v69[10] = Count;
        *(_WORD *)&v69[18] = 2080;
        *(_QWORD *)&v69[20] = v37;
        v70 = 2080;
        v71 = v38;
        v72 = 1024;
        v73 = *(_DWORD *)v84;
        v74 = 1024;
        v75 = *(_DWORD *)&v84[4];
        v76 = 1024;
        v77 = *(_DWORD *)&v84[8];
        v78 = 2048;
        v79 = *(_QWORD *)&v84[16];
        v80 = 2048;
        v81 = *(_QWORD *)&v84[24];
        LODWORD(v53) = 76;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "WIFI_SCAN: raw scan result, ap, %d, %ld, mac, %-20s, ssid, %-30s, rssi, %+4d, mode, %d, channel, %3d, age, %5.2lf, timestamp, %.1lf", v69, v53, (const char *)v54, *((const char **)&v54 + 1), v55, (_DWORD)v56, (_DWORD)v57, *((double *)&v57 + 1), *(double *)&v58);
        v40 = v39;
        if (SHIBYTE(v64) < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v40);
        if (v40 != buf)
          free(v40);
      }
      if ((*(_DWORD *)v84 - 1) <= 0xFFFFFF7E)
        break;
      if (*(_BYTE *)(v61 + 632))
      {
        if (*(int *)(v61 + 584) >= 1)
        {
          *(_QWORD *)buf = *(_QWORD *)v83;
          *(_QWORD *)v69 = *(_QWORD *)(v61 + 544);
          if (sub_10009483C(buf, v69))
          {
            *(_DWORD *)(v61 + 576) = *(_DWORD *)v84;
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021469D0);
            v29 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
            {
              __dst[0] = *(void **)v83;
              sub_1000C2254(__dst, (std::string *)v69);
              if (v69[23] >= 0)
                v30 = v69;
              else
                v30 = *(_BYTE **)v69;
              if ((v83[31] & 0x80000000) != 0)
                sub_100115CE4(&__p, *(void **)&v83[8], *(unint64_t *)&v83[16]);
              else
                __p = *(std::string *)&v83[8];
              v31 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = v54;
              *(_QWORD *)&buf[4] = v30;
              *(_WORD *)&buf[12] = 2081;
              *(_QWORD *)&buf[14] = v31;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = *(_DWORD *)v84;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiScan, update associated rssi, mac, %{private}s, ssid, %{private}s, rssi, %{public}d", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if ((v69[23] & 0x80000000) != 0)
                operator delete(*(void **)v69);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021469D0);
              v44 = qword_1022A0048;
              v65 = *(_QWORD *)v83;
              sub_1000C2254(&v65, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = &__p;
              else
                v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((v83[31] & 0x80000000) != 0)
              {
                sub_100115CE4(__dst, *(void **)&v83[8], *(unint64_t *)&v83[16]);
              }
              else
              {
                *(_OWORD *)__dst = *(_OWORD *)&v83[8];
                v64 = *(_QWORD *)&v83[24];
              }
              v46 = __dst;
              if (v64 < 0)
                v46 = (void **)__dst[0];
              *(_DWORD *)v69 = v54;
              *(_QWORD *)&v69[4] = v45;
              *(_WORD *)&v69[12] = 2081;
              *(_QWORD *)&v69[14] = v46;
              *(_WORD *)&v69[22] = 1026;
              *(_DWORD *)&v69[24] = *(_DWORD *)v84;
              LODWORD(v53) = 28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 2, "WifiScan, update associated rssi, mac, %{private}s, ssid, %{private}s, rssi, %{public}d", v69, v53);
              v48 = v47;
              if (SHIBYTE(v64) < 0)
                operator delete(__dst[0]);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v48);
              if (v48 != buf)
                free(v48);
            }
          }
        }
      }
      if (byte_102301D60)
      {
        *(_QWORD *)buf = *(_QWORD *)v83;
        if (sub_10009483C(&qword_102301D58, buf))
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v32 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000C2254(&qword_102301D58, (std::string *)buf);
            v33 = buf;
            if (buf[23] < 0)
              v33 = *(_BYTE **)buf;
            *(_DWORD *)v69 = v57;
            *(_DWORD *)&v69[4] = v16 + 1;
            *(_WORD *)&v69[8] = 2081;
            *(_QWORD *)&v69[10] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "WifiScan, addAp, %{public}d, excluded, %{private}s", v69, 0x12u);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_84;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v41 = qword_1022A0048;
          sub_1000C2254(&qword_102301D58, (std::string *)v69);
          v42 = v69;
          if (v69[23] < 0)
            v42 = *(_BYTE **)v69;
          LODWORD(__p.__r_.__value_.__l.__data_) = v57;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v16 + 1;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v42;
          LODWORD(v53) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "WifiScan, addAp, %{public}d, excluded, %{private}s", &__p, v53);
          v28 = v43;
          if ((v69[23] & 0x80000000) != 0)
            operator delete(*(void **)v69);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v28);
LABEL_122:
          if (v28 != buf)
            free(v28);
LABEL_84:
          ++v17;
          goto LABEL_91;
        }
      }
      *(_QWORD *)buf = *(_QWORD *)v83;
      if (sub_1000AF064(&v66, buf))
      {
        ++v62;
      }
      else if (*v58 < 0.0 || *v58 >= *(double *)&v84[16])
      {
        *(_QWORD *)buf = *(_QWORD *)v83;
        sub_1000AF824((uint64_t)&v66, buf, buf);
        sub_1005C26E8(v56, (uint64_t)v83);
        LODWORD(v60) = v60 + 1;
      }
      else
      {
        ++HIDWORD(v60);
      }
LABEL_91:
      if ((v83[31] & 0x80000000) != 0)
        operator delete(*(void **)&v83[8]);
LABEL_93:
      if (Count == ++v16)
        goto LABEL_141;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v16 + 1;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = *(_DWORD *)v84;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "WifiScan, addAp, %{public}d, badrssi, %{public}d, #CloneMe", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      *(_DWORD *)v69 = 67240448;
      *(_DWORD *)&v69[4] = v16 + 1;
      *(_WORD *)&v69[8] = 1026;
      *(_DWORD *)&v69[10] = *(_DWORD *)v84;
      LODWORD(v53) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiScan, addAp, %{public}d, badrssi, %{public}d, #CloneMe", v69, v53);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v27);
      goto LABEL_122;
    }
    goto LABEL_84;
  }
  v62 = 0;
  v18 = 0;
  v60 = 0;
  v17 = 0;
LABEL_141:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v49 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = Count;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = *((_QWORD *)&v67 + 1);
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v60;
    v88 = 1026;
    v89 = v62;
    v90 = 1026;
    v91 = v18;
    v92 = 1026;
    v93 = HIDWORD(v60);
    v94 = 1026;
    LODWORD(v95) = v17;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "WifiScan, addAps, %{public}s, returned, %{public}ld, unique, %{public}ld, insert, %{public}d, keep, %{public}d, error, %{public}d, stale, %{public}d, ignore, %{public}d", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    *(_DWORD *)v83 = 136448002;
    *(_QWORD *)&v83[4] = a5;
    *(_WORD *)&v83[12] = 2050;
    *(_QWORD *)&v83[14] = Count;
    *(_WORD *)&v83[22] = 2050;
    *(_QWORD *)&v83[24] = *((_QWORD *)&v67 + 1);
    *(_WORD *)v84 = 1026;
    *(_DWORD *)&v84[2] = v60;
    *(_WORD *)&v84[6] = 1026;
    *(_DWORD *)&v84[8] = v62;
    *(_WORD *)&v84[12] = 1026;
    *(_DWORD *)&v84[14] = v18;
    *(_WORD *)&v84[18] = 1026;
    *(_DWORD *)&v84[20] = HIDWORD(v60);
    *(_WORD *)&v84[24] = 1026;
    *(_DWORD *)&v84[26] = v17;
    LODWORD(v53) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiScan, addAps, %{public}s, returned, %{public}ld, unique, %{public}ld, insert, %{public}d, keep, %{public}d, error, %{public}d, stale, %{public}d, ignore, %{public}d", v83, v53);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  return sub_100067AC4((uint64_t)&v66);
}

void sub_1000AAAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100067AC4((uint64_t)&a33);
  _Unwind_Resume(a1);
}

BOOL sub_1000AAB5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const __CFString *Property;
  std::string::size_type size;
  NSObject *v12;
  std::string *v13;
  _BOOL4 v14;
  int v15;
  int v16;
  const void *v17;
  const void *v18;
  const __CFString *v19;
  const void *v20;
  const void *v21;
  double v22;
  int IsApplePersonalHotspot;
  std::string::size_type v24;
  _BOOL4 v25;
  unsigned int v26;
  std::string::size_type v27;
  const void *v28;
  NSObject *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  _BOOL4 v38;
  std::string *v39;
  std::string *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  std::string *v47;
  std::string *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  NSObject *v57;
  std::string *v58;
  std::string *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  NSObject *v67;
  std::string *v68;
  std::string *v69;
  const char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  double v76;
  uint64_t v77;
  int v78;
  std::string::size_type v79;
  char v80;
  char v81;
  _BOOL8 v82;
  uint64_t v83;
  NSObject *v84;
  std::string *v85;
  std::string *v86;
  std::string *v88;
  const char *v89;
  char *v90;
  std::string *v91;
  std::string *v92;
  const char *v93;
  char *v94;
  std::string *v95;
  std::string *v96;
  int v97;
  int v98;
  int v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  const char *v105;
  int v106;
  int v107;
  double v108;
  int v109;
  double v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  int v117;
  int v118;
  int v119;
  int v120;
  double v121;
  int v122;
  _BOOL4 v123;
  const void *v124;
  std::string __p;
  uint64_t v126;
  int v127;
  double v128;
  int v129;
  std::string v130;
  int v131;
  int v132;
  std::string v133;
  int v134;
  std::string *v135;
  __int16 v136;
  std::string *v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  double v145;
  __int16 v146;
  _BOOL4 v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  _BYTE buf[24];
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  double v161;
  __int16 v162;
  _BOOL4 v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;

  *(_QWORD *)a3 = qword_1023114A0;
  *(_QWORD *)&v121 = a3 + 8;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)byte_1023114A8);
  v8 = xmmword_1023114D0;
  v7 = xmmword_1023114E0;
  v9 = xmmword_1023114C0;
  *(_QWORD *)(a3 + 80) = qword_1023114F0;
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 32) = v9;
  memset(&v133, 0, sizeof(v133));
  Property = (const __CFString *)WiFiNetworkGetProperty(a2, CFSTR("BSSID"));
  if (!Property || !sub_1001C0048(Property, &v133))
    goto LABEL_6;
  size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v133.__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_6:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v13 = &v133;
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)v133.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "WifiMgr, error, bssid invalid, %{private}s, #CloneMe", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v88 = &v133;
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v88 = (std::string *)v133.__r_.__value_.__r.__words[0];
      v134 = 136380675;
      v135 = v88;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, error, bssid invalid, %{private}s, #CloneMe", &v134, 12);
      v90 = (char *)v89;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v89);
      if (v90 != buf)
        free(v90);
    }
  }
  v14 = !WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"))
     && !WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"))
     && WiFiNetworkGetProperty(a2, CFSTR("SSID_STR")) == 0;
  v15 = *(_DWORD *)(a3 + 32);
  v16 = *(_DWORD *)(a3 + 36);
  v131 = *(_DWORD *)(a3 + 40);
  v132 = v16;
  memset(&v130, 0, sizeof(v130));
  v129 = v15;
  v128 = *(double *)(a3 + 48);
  HIDWORD(v124) = *(unsigned __int8 *)(a3 + 65);
  v127 = *(_DWORD *)(a3 + 68);
  if (!v14)
  {
    v17 = (const void *)WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"));
    if (!v17 || (sub_1001C13CC(v17, &v132) & 1) == 0)
      v132 = -1;
    v18 = (const void *)WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"));
    if (!v18 || (sub_1001C13CC(v18, &v131) & 1) == 0)
      v131 = -1;
    v19 = (const __CFString *)WiFiNetworkGetProperty(a2, CFSTR("SSID_STR"));
    if (!v19 || !sub_1001C0048(v19, &v130))
    {
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      {
        *v130.__r_.__value_.__l.__data_ = 0;
        v130.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v130.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v130.__r_.__value_.__s + 23) = 0;
      }
    }
  }
  v20 = (const void *)WiFiNetworkGetProperty(a2, CFSTR("RSSI"));
  if (!v20 || (sub_1001C13CC(v20, &v129) & 1) == 0)
    v129 = -1;
  v21 = (const void *)WiFiNetworkGetProperty(a2, CFSTR("AGE"));
  v22 = -1.0;
  if (v21 && sub_1001FDC34(v21, &v128))
    v22 = v128 / 1000.0;
  v128 = v22;
  IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot(a2);
  v24 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v133.__r_.__value_.__l.__size_;
  LODWORD(v124) = IsApplePersonalHotspot;
  if (v14)
  {
    v25 = v24 != 0;
    goto LABEL_47;
  }
  if (v24)
  {
    v26 = v131;
    if (v131 < 1)
    {
      v25 = 0;
      goto LABEL_47;
    }
LABEL_46:
    v25 = v26 < 0xA6;
    goto LABEL_47;
  }
  v25 = 0;
  v27 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = v130.__r_.__value_.__l.__size_;
  if (v27)
  {
    v26 = v131;
    if (v131 >= 1)
      goto LABEL_46;
  }
LABEL_47:
  v28 = (const void *)WiFiNetworkGetProperty(a2, CFSTR("CHANNEL_FLAGS"));
  if (!v28 || (sub_1000ABDCC(v28, &v127) & 1) == 0)
    v127 = 0;
  v123 = v25;
  if (v25)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v29 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v30 = &v133;
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v30 = (std::string *)v133.__r_.__value_.__r.__words[0];
      v31 = &v130;
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v31 = (std::string *)v130.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316930;
      *(_QWORD *)&buf[4] = v30;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 1024;
      v155 = v131;
      v156 = 1024;
      v157 = v132;
      v158 = 1024;
      v159 = v129;
      v160 = 2048;
      v161 = v128;
      v162 = 1024;
      v163 = v14;
      v164 = 1024;
      LODWORD(v165) = v127;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiService, getAccessPoint, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d， rssiFlags, %u", buf, 0x3Eu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_111;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v32 = &v133;
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v133.__r_.__value_.__r.__words[0];
    v33 = &v130;
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v130.__r_.__value_.__r.__words[0];
    v134 = 136316930;
    v135 = v32;
    v136 = 2080;
    v137 = v33;
    v138 = 1024;
    v139 = v131;
    v140 = 1024;
    v141 = v132;
    v142 = 1024;
    v143 = v129;
    v144 = 2048;
    v145 = v128;
    v146 = 1024;
    v147 = v14;
    v148 = 1024;
    LODWORD(v149) = v127;
    LODWORD(v105) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiService, getAccessPoint, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d， rssiFlags, %u", (const char *)&v134, v105, v106, v109, v114, v121, v122, (_DWORD)v124);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v34);
    if (v35 == buf)
      goto LABEL_111;
LABEL_178:
    free(v35);
    goto LABEL_111;
  }
  if (*(_DWORD *)(a3 + 40))
  {
    if (*(char *)(a3 + 31) < 0)
    {
      sub_100115CE4(buf, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)buf = **(_OWORD **)&v121;
      *(_QWORD *)&buf[16] = *(_QWORD *)(*(_QWORD *)&v121 + 16);
    }
    if (buf[23] >= 0)
      v36 = buf[23];
    else
      v36 = *(_QWORD *)&buf[8];
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v36)
        goto LABEL_77;
    }
    else if (v36)
    {
LABEL_77:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v37 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v38 = v14;
        v117 = a4;
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v133;
        else
          v39 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v130;
        else
          v40 = (std::string *)v130.__r_.__value_.__r.__words[0];
        v42 = v131;
        v41 = v132;
        v107 = v129;
        v110 = v128;
        v43 = WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"));
        v44 = WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"));
        v45 = WiFiNetworkGetProperty(a2, CFSTR("SSID_STR"));
        *(_DWORD *)buf = 136382979;
        *(_QWORD *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v40;
        *(_WORD *)&buf[22] = 1026;
        v155 = v42;
        v156 = 1026;
        v157 = v41;
        v158 = 1026;
        v159 = v107;
        v160 = 2050;
        v161 = v110;
        v162 = 1026;
        v14 = v38;
        v163 = v38;
        v164 = 2050;
        v165 = v43;
        v166 = 2050;
        v167 = v44;
        v168 = 2049;
        v169 = v45;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, invalid-network, mac, %{private}s, ssid, %{private}s, channel, %{public}d, mode, 0x%{public}x, rssi, %{public}d, age, %{public}.1lf, isEPNONetwork, %{public}d, m, %{public}p, c, %{public}p, s, %{private}p", buf, 0x56u);
        a4 = v117;
      }
      if (sub_1001BFF7C(115, 0))
      {
        v46 = v14;
        v118 = a4;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &v133;
        else
          v47 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v130;
        else
          v48 = (std::string *)v130.__r_.__value_.__r.__words[0];
        v49 = v131;
        v50 = v132;
        v51 = v129;
        v108 = v128;
        v111 = qword_1022A0048;
        v52 = WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"));
        v53 = WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"));
        v54 = WiFiNetworkGetProperty(a2, CFSTR("SSID_STR"));
        v134 = 136382979;
        v135 = v47;
        v136 = 2081;
        v137 = v48;
        v138 = 1026;
        v139 = v49;
        v140 = 1026;
        v141 = v50;
        v142 = 1026;
        v143 = v51;
        v144 = 2050;
        v145 = v108;
        v146 = 1026;
        v147 = v46;
        v148 = 2050;
        v149 = v52;
        v150 = 2050;
        v151 = v53;
        v152 = 2049;
        v153 = v54;
        LODWORD(v105) = 86;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 16, "WifiService, getAccessPoint, invalid-network, mac, %{private}s, ssid, %{private}s, channel, %{public}d, mode, 0x%{public}x, rssi, %{public}d, age, %{public}.1lf, isEPNONetwork, %{public}d, m, %{public}p, c, %{public}p, s, %{private}p", &v134, v105);
        v56 = (char *)v55;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v55);
        if (v56 != buf)
          free(v56);
        a4 = v118;
      }
      goto LABEL_111;
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v57 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v115 = v14;
    v119 = a4;
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v133;
    else
      v58 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v130;
    else
      v59 = (std::string *)v130.__r_.__value_.__r.__words[0];
    v60 = *(_DWORD *)(a3 + 36);
    v61 = *(_DWORD *)(a3 + 40);
    v62 = *(_DWORD *)(a3 + 32);
    v112 = *(double *)(a3 + 48);
    v63 = WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"));
    v64 = WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"));
    v65 = WiFiNetworkGetProperty(a2, CFSTR("SSID_STR"));
    *(_DWORD *)buf = 136317442;
    *(_QWORD *)&buf[4] = v58;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v59;
    *(_WORD *)&buf[22] = 1024;
    v155 = v61;
    v156 = 1024;
    v157 = v60;
    v158 = 1024;
    v159 = v62;
    v160 = 2048;
    v161 = v112;
    v162 = 1024;
    v14 = v115;
    v163 = v115;
    v164 = 2048;
    v165 = v63;
    v166 = 2048;
    v167 = v64;
    v168 = 2048;
    v169 = v65;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "WifiService, getAccessPoint, invalid-network, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d, m, %p, c, %p, s, %p", buf, 0x56u);
    a4 = v119;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v116 = v14;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v113 = qword_1022A0048;
    v95 = (v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v133
        : (std::string *)v133.__r_.__value_.__r.__words[0];
    v96 = (v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v130
        : (std::string *)v130.__r_.__value_.__r.__words[0];
    v97 = *(_DWORD *)(a3 + 36);
    v98 = *(_DWORD *)(a3 + 40);
    v99 = *(_DWORD *)(a3 + 32);
    v100 = *(double *)(a3 + 48);
    v101 = WiFiNetworkGetProperty(a2, CFSTR("AP_MODE"));
    v102 = WiFiNetworkGetProperty(a2, CFSTR("CHANNEL"));
    v103 = WiFiNetworkGetProperty(a2, CFSTR("SSID_STR"));
    v134 = 136317442;
    v135 = v95;
    v136 = 2080;
    v137 = v96;
    v138 = 1024;
    v139 = v98;
    v140 = 1024;
    v141 = v97;
    v142 = 1024;
    v143 = v99;
    v144 = 2048;
    v145 = v100;
    v146 = 1024;
    v147 = v116;
    v148 = 2048;
    v149 = v101;
    v150 = 2048;
    v151 = v102;
    v152 = 2048;
    v153 = v103;
    LODWORD(v105) = 86;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v113, 0, "WifiService, getAccessPoint, invalid-network, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d, m, %p, c, %p, s, %p", (const char *)&v134, v105, v106, v113, v116, v121, v122, v124, __p.__r_.__value_.__l.__data_, (const void *)__p.__r_.__value_.__l.__size_);
    v35 = (char *)v104;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v104);
    a4 = v120;
    if (v35 != buf)
      goto LABEL_178;
  }
LABEL_111:
  v126 = qword_1023114A0;
  if (a4)
  {
    if (a4 == 1)
    {
      v66 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v66 = v133.__r_.__value_.__l.__size_;
      if (v66 || (*(_QWORD *)buf = qword_1023114A0, sub_100B0630C(&v126, buf)))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v67 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          v68 = &v133;
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v68 = (std::string *)v133.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v68;
          *(_WORD *)&buf[12] = 1025;
          *(_DWORD *)&buf[14] = 75312138;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, HostedNetwork, %{private}s, r%{private}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          v69 = &v133;
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v69 = (std::string *)v133.__r_.__value_.__r.__words[0];
          v134 = 136380931;
          v135 = v69;
          v136 = 1025;
          LODWORD(v137) = 75312138;
          LODWORD(v105) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, getAccessPoint, HostedNetwork, %{private}s, r%{private}d", &v134, v105);
          v71 = (char *)v70;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v70);
          if (v71 != buf)
            free(v71);
        }
      }
    }
  }
  else
  {
    v126 = sub_1000CC740((uint64_t)&v133);
  }
  v72 = v126;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    sub_100115CE4(&__p, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
  else
    __p = v130;
  v73 = v129;
  v75 = v131;
  v74 = v132;
  v76 = v128;
  v77 = *(_QWORD *)(a3 + 56);
  v78 = v127;
  *(_QWORD *)buf = __p.__r_.__value_.__l.__size_;
  v79 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)&buf[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v80 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)a3 = v72;
  if (*(char *)(a3 + 31) < 0)
  {
    operator delete(**(void ***)&v121);
    v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v81 = 0;
  }
  v82 = v123;
  v83 = *(_QWORD *)buf;
  *(_QWORD *)(a3 + 8) = v79;
  *(_QWORD *)(a3 + 16) = v83;
  *(_QWORD *)(a3 + 23) = *(_QWORD *)&buf[7];
  *(_BYTE *)(a3 + 31) = v80;
  *(_DWORD *)(a3 + 32) = v73;
  *(_DWORD *)(a3 + 36) = v74;
  *(_DWORD *)(a3 + 40) = v75;
  *(double *)(a3 + 48) = v76;
  *(_QWORD *)(a3 + 56) = v77;
  *(_BYTE *)(a3 + 64) = (_DWORD)v124 != 0;
  *(_BYTE *)(a3 + 65) = BYTE4(v124);
  *(_DWORD *)(a3 + 68) = v78;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  if (v81 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (sub_1000AC008(&v126))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v84 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v85 = &v133;
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v85 = (std::string *)v133.__r_.__value_.__r.__words[0];
      v86 = &v130;
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = (std::string *)v130.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v85;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v86;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, invalid mac, %{private}s, %{private}s, #CloneMe", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v91 = &v133;
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v91 = (std::string *)v133.__r_.__value_.__r.__words[0];
      v92 = &v130;
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v92 = (std::string *)v130.__r_.__value_.__r.__words[0];
      v134 = 136380931;
      v135 = v91;
      v136 = 2081;
      v137 = v92;
      LODWORD(v105) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, getAccessPoint, invalid mac, %{private}s, %{private}s, #CloneMe", &v134, v105);
      v94 = (char *)v93;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
    v82 = 0;
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  return v82;
}

void sub_1000ABD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ABDCC(const void *a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  result = sub_1000ABE08(a1, &v4);
  if ((_DWORD)result)
    *a2 = v4;
  return result;
}

uint64_t sub_1000ABE08(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_1001E4B1C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, a2))
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v11[0] = 0;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get value", v11, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

BOOL sub_1000AC008(_QWORD *a1)
{
  _BOOL8 v2;
  _DWORD *v5;
  uint64_t v6;
  char v7;

  sub_1000C2348(a1, &v5);
  if (v7 < 0)
  {
    v2 = v6 == 12 && *(_QWORD *)v5 == 0x6666666666666666 && v5[2] == 1717986918;
    operator delete(v5);
  }
  else
  {
    return v7 == 12 && v5 == (_DWORD *)0x6666666666666666 && (_DWORD)v6 == 1717986918;
  }
  return v2;
}

void sub_1000AC0A0(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1005C836C((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1005C852C(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100034200();
    os_activity_scope_leave(&state);
  }
}

void sub_1000AC6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1000AC70C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1000ACC08(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1000ACB2C(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021469B0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021469B0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

id sub_1000ACAE0(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1000ACC08(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

_BYTE *sub_1000ACB2C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1000ACC08(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000AD000(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1000ACC08(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1000ACC54(a1);
  else
    return 0;
}

id sub_1000ACC54(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE9E60 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE9E60 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146B10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

uint64_t **sub_1000AD000(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 3600;
    *((_QWORD *)v11 + 6) = "na";
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1000AD0CC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  void *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[8];
  _BYTE v12[32];

  CLProfilingIdentify("CLMotionStateMediator::onWifiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v12 = 2082;
      *(_QWORD *)&v12[2] = "";
      *(_WORD *)&v12[10] = 2082;
      *(_QWORD *)&v12[12] = "activity";
      *(_WORD *)&v12[20] = 2050;
      *(_QWORD *)&v12[22] = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 3)
  {
    v8 = *(void **)(*(_QWORD *)(a4 + 10272) + 16);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v12 = 3221225472;
    *(_QWORD *)&v12[8] = sub_10020E438;
    *(_QWORD *)&v12[16] = &unk_10214D370;
    *(_QWORD *)&v12[24] = a4;
    objc_msgSend(v8, "fetchScanResultWithReply:", buf);
  }
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1000AD2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000AD2DC(int a1, int *a2, unsigned __int8 *a3, id *a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLWifiServiceClient::onWifiNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B8138);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiServiceClient::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B8138);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiServiceClient::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1000AD4C4((uint64_t)a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1000AD4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AD4C4(uint64_t a1, int a2, int *a3, unsigned __int8 *a4)
{
  BOOL v8;
  int v9;
  _BOOL4 v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  uint64_t result;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _DWORD v25[2];
  __int16 v26;
  _BOOL4 v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  int v31;
  void *__p;
  int v33;
  char v34;
  char v35;

  if ((*a3 - 6) >= 2)
  {
    if (*a3 == 1)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B8158);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v12 = *a3;
        v13 = *(unsigned __int8 *)(a1 + 144);
        v14 = *a4;
        *(_DWORD *)buf = 67109632;
        v31 = v12;
        LOWORD(__p) = 1024;
        *(_DWORD *)((char *)&__p + 2) = v13;
        HIWORD(__p) = 1024;
        v33 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B8158);
        v21 = *(unsigned __int8 *)(a1 + 144);
        v22 = *a4;
        v26 = 1024;
        v27 = v21;
        v28 = 1024;
        v29 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d", v25, 20, 67109632);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      *(_BYTE *)(a1 + 144) = *a4;
    }
  }
  else
  {
    if (a4[96])
      v8 = *((_DWORD *)a4 + 12) <= 0;
    else
      v8 = 1;
    v9 = !v8;
    if (*(_BYTE *)(a1 + 136))
      v10 = *(_DWORD *)(a1 + 88) > 0;
    else
      v10 = 0;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B8158);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *a3;
      *(_DWORD *)buf = 67240704;
      v31 = v16;
      LOWORD(__p) = 1026;
      *(_DWORD *)((char *)&__p + 2) = v10;
      HIWORD(__p) = 1026;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B8158);
      v18 = *a3;
      v25[0] = 67240704;
      v25[1] = v18;
      v26 = 1026;
      v27 = v10;
      v28 = 1026;
      v29 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d", v25, 20);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    sub_100CF2884((uint64_t)(a4 + 8), (uint64_t)buf);
    sub_1005C7FFC(a1 + 48, (uint64_t)buf);
    if (v35 && v34 < 0)
      operator delete(__p);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    *(_DWORD *)buf = a2;
    return (*(uint64_t (**)(uint64_t, uint8_t *, int *, unsigned __int8 *))(*(_QWORD *)result + 48))(result, buf, a3, a4);
  }
  return result;
}

void sub_1000AD8E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1000AD8F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  sub_1000AD910(*(_QWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t sub_1000AD8FC(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *a2);
}

void sub_1000AD910(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[6];
  int v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10020119C;
  v4[3] = &unk_1021458C8;
  v5 = a2;
  v4[4] = a3;
  v4[5] = a4;
  sub_100200A5C(a1, 8u, (uint64_t)v4);
}

id sub_1000AD968(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onWifiNotification:data:", a2, a3);
}

id sub_1000AD978(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onWifiScanNotification:data:", a2, a3);
}

void sub_1000AD988(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6;
  __int16 v7;
  _BYTE v8[8];
  void *__p;
  char v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  void **v14;

  v6 = *a2;
  v7 = *a3;
  sub_10031F08C(v8, (uint64_t)(a3 + 4));
  v12 = *((_QWORD *)a3 + 13);
  memset(v13, 0, 24);
  sub_10055A7B8(v13, *((_QWORD *)a3 + 14), *((_QWORD *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3));
  v13[3] = *((_QWORD *)a3 + 17);
  objc_msgSend(a4, "onWifiServiceNotification:data:", v6, &v7);
  v14 = (void **)v13;
  sub_100279AA4(&v14);
  if (v11)
  {
    if (v10 < 0)
      operator delete(__p);
  }
}

void sub_1000ADA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_1005B5FEC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1000ADB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  sub_100279AA4((void ***)(v15 - 40));
  *(_QWORD *)(v15 - 40) = &a14;
  sub_100279AA4((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1000ADB6C(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v6;

  v6 = a1 + 103;
  (*(void (**)(_QWORD *))(a1[103] + 16))(a1 + 103);
  if (a1 + 54 != a2)
    sub_10055A264(a2, a1[54], a1[55], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[55] - a1[54]) >> 3));
  *a3 = a1[53];
  return (*(uint64_t (**)(_QWORD *))(a1[103] + 24))(v6);
}

void sub_1000ADC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ADC24(uint64_t *a1)
{
  if (*a1)
  {
    sub_100279AE4(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

id sub_1000ADC5C(_QWORD *a1)
{
  id v1;
  _QWORD v3[5];
  _QWORD v4[3];
  void **v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1002059A4;
  v3[3] = &unk_102146A90;
  v3[4] = *a1;
  memset(v4, 0, sizeof(v4));
  sub_10055A7B8(v4, a1[1], a1[2], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - a1[1]) >> 3));
  v1 = objc_msgSend(v3, "copy");
  v5 = (void **)v4;
  sub_100279AA4(&v5);
  return v1;
}

void sub_1000ADD08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_100279AA4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000ADDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1000ADDE8(uint64_t a1, uint64_t *a2)
{
  if (a2[1] != a2[2])
    sub_1000ADE00(a1 + 2544, a2);
}

void sub_1000ADE00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  void **v6;

  v3 = a1 + 2960;
  v4 = *a2;
  memset(v5, 0, sizeof(v5));
  sub_10055A7B8(v5, a2[1], a2[2], 0x2E8BA2E8BA2E8BA3 * ((a2[2] - a2[1]) >> 3));
  sub_1000ADEA8(v3, (uint64_t)&v4, *(double *)(a1 + 3192));
  v6 = (void **)v5;
  sub_100279AA4(&v6);
}

void sub_1000ADE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000ADEA8(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  double *v17;
  double *v18;
  __int128 v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  double *v30;
  unint64_t v31;
  double *v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  double *v68;
  double *v69;
  double *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  double *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  void *v80[2];
  __int128 v81;
  void *v82[2];
  _QWORD v83[4];
  void *v84;
  __int128 __p;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
  {
    v6 = (_QWORD *)result;
    v79 = (uint64_t *)(result + 24);
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      v84 = *(void **)v3;
      if (*(char *)(v3 + 31) < 0)
      {
        sub_100115CE4(&__p, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v3 + 8);
        v86 = *(_QWORD *)(v3 + 24);
        __p = v9;
      }
      v10 = *(_OWORD *)(v3 + 32);
      v11 = *(_OWORD *)(v3 + 48);
      v12 = *(_OWORD *)(v3 + 64);
      v90 = *(_QWORD *)(v3 + 80);
      v88 = v11;
      v89 = v12;
      v87 = v10;
      if (v7 != v8)
      {
        while (1)
        {
          v13 = *(_DWORD *)(v7 + 24);
          v80[0] = v84;
          v14 = sub_100129380((uint64_t)v80);
          if (v13 == sub_1000AE470(v14))
            break;
          v7 += 80;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
      }
      if (SHIBYTE(v86) < 0)
        operator delete((void *)__p);
      v15 = (int *)(v3 + 32);
      if (v7 == v6[4])
      {
        memset(v83, 0, sizeof(v83));
        v81 = 0u;
        *(_OWORD *)v82 = 0u;
        *(_OWORD *)v80 = 0u;
        if (v7 >= v6[5])
        {
          v26 = sub_10132A91C(v79, (uint64_t)v80);
          v27 = v82[0];
          v6[4] = v26;
          if (v27)
          {
            v82[1] = v27;
            operator delete(v27);
          }
        }
        else
        {
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          *(_OWORD *)v7 = *(_OWORD *)v80;
          *(_QWORD *)(v7 + 16) = v81;
          v80[0] = 0;
          v80[1] = 0;
          *(_QWORD *)&v81 = 0;
          *(_DWORD *)(v7 + 24) = DWORD2(v81);
          *(_QWORD *)(v7 + 40) = 0;
          *(_QWORD *)(v7 + 48) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_OWORD *)(v7 + 32) = *(_OWORD *)v82;
          *(_QWORD *)(v7 + 48) = v83[0];
          v82[0] = 0;
          v82[1] = 0;
          v83[0] = 0;
          v19 = *(_OWORD *)&v83[1];
          *(_DWORD *)(v7 + 72) = v83[3];
          *(_OWORD *)(v7 + 56) = v19;
          v6[4] = v7 + 80;
        }
        if (v80[0])
        {
          v80[1] = v80[0];
          operator delete(v80[0]);
        }
        v28 = v6[4];
        v80[0] = *(void **)v3;
        v29 = sub_100129380((uint64_t)v80);
        *(_DWORD *)(v28 - 56) = sub_1000AE470(v29);
        v30 = *(double **)(v28 - 72);
        v31 = *(_QWORD *)(v28 - 64);
        if ((unint64_t)v30 >= v31)
        {
          v33 = *(double **)(v28 - 80);
          v34 = v30 - v33;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_106;
          v35 = v31 - (_QWORD)v33;
          v36 = (uint64_t)(v31 - (_QWORD)v33) >> 2;
          if (v36 <= v34 + 1)
            v36 = v34 + 1;
          if (v35 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
          {
            v38 = (char *)sub_10025E6A0(v28 - 64, v37);
            v33 = *(double **)(v28 - 80);
            v30 = *(double **)(v28 - 72);
          }
          else
          {
            v38 = 0;
          }
          v53 = (double *)&v38[8 * v34];
          *v53 = a3;
          v32 = v53 + 1;
          while (v30 != v33)
          {
            v54 = *((_QWORD *)v30-- - 1);
            *((_QWORD *)v53-- - 1) = v54;
          }
          *(_QWORD *)(v28 - 80) = v53;
          *(_QWORD *)(v28 - 72) = v32;
          *(_QWORD *)(v28 - 64) = &v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v30 = a3;
          v32 = v30 + 1;
        }
        v55 = *(_QWORD *)(v28 - 32);
        *(_QWORD *)(v28 - 72) = v32;
        v56 = *v15;
        v57 = *(char **)(v28 - 40);
        if ((unint64_t)v57 >= v55)
        {
          v59 = *(char **)(v28 - 48);
          v60 = (v57 - v59) >> 2;
          if ((unint64_t)(v60 + 1) >> 62)
LABEL_104:
            sub_100259694();
          v61 = v55 - (_QWORD)v59;
          v62 = (uint64_t)(v55 - (_QWORD)v59) >> 1;
          if (v62 <= v60 + 1)
            v62 = v60 + 1;
          if (v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v62;
          if (v63)
          {
            v64 = (char *)sub_100260634(v28 - 32, v63);
            v59 = *(char **)(v28 - 48);
            v57 = *(char **)(v28 - 40);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v60];
          *(_DWORD *)v65 = v56;
          v58 = v65 + 4;
          while (v57 != v59)
          {
            v66 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          *(_QWORD *)(v28 - 48) = v65;
          *(_QWORD *)(v28 - 40) = v58;
          *(_QWORD *)(v28 - 32) = &v64[4 * v63];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *(_DWORD *)v57 = v56;
          v58 = v57 + 4;
        }
        *(_QWORD *)(v28 - 40) = v58;
      }
      else
      {
        v16 = *(_QWORD *)(v7 + 16);
        v17 = *(double **)(v7 + 8);
        if ((unint64_t)v17 >= v16)
        {
          v20 = *(double **)v7;
          v21 = ((uint64_t)v17 - *(_QWORD *)v7) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_100259694();
          v23 = v16 - (_QWORD)v20;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)sub_10025E6A0(v7 + 16, v24);
            v20 = *(double **)v7;
            v17 = *(double **)(v7 + 8);
          }
          else
          {
            v25 = 0;
          }
          v39 = (double *)&v25[8 * v21];
          *v39 = a3;
          v18 = v39 + 1;
          while (v17 != v20)
          {
            v40 = *((_QWORD *)v17-- - 1);
            *((_QWORD *)v39-- - 1) = v40;
          }
          *(_QWORD *)v7 = v39;
          *(_QWORD *)(v7 + 8) = v18;
          *(_QWORD *)(v7 + 16) = &v25[8 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v17 = a3;
          v18 = v17 + 1;
        }
        v41 = *(_QWORD *)(v7 + 48);
        *(_QWORD *)(v7 + 8) = v18;
        v42 = *v15;
        v43 = *(char **)(v7 + 40);
        if ((unint64_t)v43 >= v41)
        {
          v45 = *(char **)(v7 + 32);
          v46 = (v43 - v45) >> 2;
          if ((unint64_t)(v46 + 1) >> 62)
            goto LABEL_104;
          v47 = v41 - (_QWORD)v45;
          v48 = (uint64_t)(v41 - (_QWORD)v45) >> 1;
          if (v48 <= v46 + 1)
            v48 = v46 + 1;
          if (v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v48;
          if (v49)
          {
            v50 = (char *)sub_100260634(v7 + 48, v49);
            v45 = *(char **)(v7 + 32);
            v43 = *(char **)(v7 + 40);
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[4 * v46];
          *(_DWORD *)v51 = v42;
          v44 = v51 + 4;
          while (v43 != v45)
          {
            v52 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          *(_QWORD *)(v7 + 32) = v51;
          *(_QWORD *)(v7 + 40) = v44;
          *(_QWORD *)(v7 + 48) = &v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_DWORD *)v43 = v42;
          v44 = v43 + 4;
        }
        *(_QWORD *)(v7 + 40) = v44;
      }
      v3 += 88;
    }
    while (v3 != v4);
    v67 = v6[8];
    v68 = (double *)v6[7];
    if ((unint64_t)v68 >= v67)
    {
      v70 = (double *)v6[6];
      v71 = v68 - v70;
      if ((unint64_t)(v71 + 1) >> 61)
LABEL_106:
        sub_100259694();
      v72 = v67 - (_QWORD)v70;
      v73 = (uint64_t)(v67 - (_QWORD)v70) >> 2;
      if (v73 <= v71 + 1)
        v73 = v71 + 1;
      if (v72 >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
      {
        v75 = (char *)sub_10025E6A0((uint64_t)(v6 + 8), v74);
        v70 = (double *)v6[6];
        v68 = (double *)v6[7];
      }
      else
      {
        v75 = 0;
      }
      v76 = (double *)&v75[8 * v71];
      v77 = &v75[8 * v74];
      *v76 = a3;
      v69 = v76 + 1;
      while (v68 != v70)
      {
        v78 = *((_QWORD *)v68-- - 1);
        *((_QWORD *)v76-- - 1) = v78;
      }
      v6[6] = v76;
      v6[7] = v69;
      v6[8] = v77;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v68 = a3;
      v69 = v68 + 1;
    }
    v6[7] = v69;
    return sub_1000F0E14(v6, a3);
  }
  return result;
}

void sub_1000AE444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_10030C484((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE470(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = 0;
  LODWORD(v2) = 0;
  v3 = 63689;
  do
  {
    v2 = v3 * (_DWORD)v2 + (a1 >> v1);
    v3 *= 378551;
    v1 += 8;
  }
  while (v1 != 64);
  return v2;
}

void sub_1000AEEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  a46 = &a37;
  sub_1002A3684((void ***)&a46);
  _Unwind_Resume(a1);
}

void sub_1000AEF7C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;

  v4 = sub_1000AF064(a1, (_QWORD *)(*a2 + 8));
  if (v4)
  {
    *(_DWORD *)(v4[3] + 24) += *(_DWORD *)(*a2 + 24);
    ++*((_DWORD *)v4 + 10);
  }
  else
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v6 = (_QWORD *)(*a2 + 8);
    v12 = *a2;
    v13 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v14 = 1;
    sub_1000AF15C((uint64_t)a1, v6, v6, (uint64_t)&v12);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1000AF050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000AF064(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = sub_100129380((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (sub_10009483C(v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *sub_1000AF15C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v9 = sub_100129380((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_10009483C(v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v17 = (char *)operator new(0x30uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  *((_QWORD *)v17 + 2) = *a3;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *((_DWORD *)v17 + 10) = *(_DWORD *)(a4 + 16);
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_10012E444(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v15 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10096EBD8((uint64_t)v27, 0);
  return v15;
}

void sub_1000AF3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10096EBD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1000AF4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  double v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  _QWORD v21[2];
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  unint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;

  sub_100130B38(a3, a2);
  v6 = sub_1002232BC(a2);
  sub_1000142E4(*(_QWORD *)(a1 + 3160), (uint64_t)v21, *(double *)(a1 + 6456), v6);
  sub_1000147B8((_QWORD *)(a1 + 3248), v21);
  v7 = v22;
  v8 = v23;
  if (v22)
  {
    v9 = 0;
    do
    {
      v9 += sub_1000AFA5C(*((_DWORD *)v7 + 14));
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v10 = v22;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  v16 = 0u;
  v17 = 0u;
  for (LODWORD(v18) = 1065353216; v10; v10 = (_QWORD *)*v10)
  {
    *(_QWORD *)buf = v10[2];
    sub_1000AF824((uint64_t)&v16, buf, buf);
    *(_QWORD *)buf = v10[2];
    sub_1000AFA6C((uint64_t)v19, buf, buf, (uint64_t)(v10 + 2));
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102194CF0);
  v11 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3160) + 24);
    *(_DWORD *)buf = 134350080;
    *(_QWORD *)&buf[4] = v12;
    v35 = 2050;
    v36 = v8;
    v37 = 2050;
    v38 = v9;
    v39 = 2050;
    v40 = v8 - v9;
    v41 = 2050;
    v42 = (unint64_t)v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WifiFlow, aps, history, %{public}lu, fresh, %{public}llu, 2ghz, %{public}llu, 5ghz, %{public}llu, agethresh, %{public}llu,", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102194CF0);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 3160) + 24);
    v24 = 134350080;
    v25 = v14;
    v26 = 2050;
    v27 = v8;
    v28 = 2050;
    v29 = v9;
    v30 = 2050;
    v31 = v8 - v9;
    v32 = 2050;
    v33 = (unint64_t)v6;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, aps, history, %{public}lu, fresh, %{public}llu, 2ghz, %{public}llu, 5ghz, %{public}llu, agethresh, %{public}llu,", &v24, 52, v16, v17, v18);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::FilterScanHistory::HandleEvent::selectApsForLocationComputation(const Input &) const", "%s\n", v15);
    if (v15 != buf)
      free(v15);
  }
  sub_1000A6464((uint64_t)(a3 + 276), (uint64_t *)&v16);
  sub_100212CB0((uint64_t)(a3 + 286), (uint64_t *)v19);
  sub_100067AC4((uint64_t)&v16);
  sub_100126BFC((uint64_t)v19);
  return sub_100127554((uint64_t)v21);
}

void sub_1000AF7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_100067AC4((uint64_t)va);
  sub_100126BFC((uint64_t)va1);
  sub_100127554((uint64_t)va2);
  sub_10055829C(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000AF824(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = sub_100129380((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (sub_10009483C(i + 2, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1000AFA48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000AFA5C(int a1)
{
  return (a1 - 1) < 0xE;
}

_QWORD *sub_1000AFA6C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  v9 = sub_100129380((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_10009483C(v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_1000AFCDC(a1, v10, a3, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v24 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  v15 = v26;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1000AFCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_100279070((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AFCDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x70uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_100F4D69C((uint64_t)(v10 + 2), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1000AFD58(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_1000AFD74(uint64_t a1, int a2, int *a3)
{
  _BOOL8 v6;
  NSObject *v7;
  id v8;
  const char *v9;
  int v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  __int16 v19;
  const char *v20;

  v11 = a2;
  v6 = sub_1000AFED0((char *)a1, a2, a3);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = &v11;
    v8 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v11, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
    v9 = sub_1001B49F8(*a3);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = a2;
    v17 = 2114;
    v18 = v8;
    v19 = 2082;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp unregistration\", \"client-Id\":%{public}ld, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  return v6;
}

BOOL sub_1000AFED0(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000B072C((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10213E430);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10213E430);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_1000B0258(char *a1, uint64_t a2, unsigned int *a3)
{
  int v6;
  NSObject *v7;
  unsigned int v8;
  const char *v9;
  _BOOL8 v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  char *v16;
  const char *v17;
  int v18;
  int v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;

  v20 = a2;
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 104))(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    v9 = sub_1001B49F8(*a3);
    *(_DWORD *)buf = 67109634;
    v27 = v8;
    v28 = 2080;
    v29 = v9;
    v30 = 1024;
    v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLIENT: unregister for notification, %d, %s, wasRegistered, %d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v13 = qword_1022A01D8;
    v14 = *a3;
    v15 = sub_1001B49F8(*a3);
    v21[0] = 67109634;
    v21[1] = v14;
    v22 = 2080;
    v23 = v15;
    v24 = 1024;
    v25 = v6;
    LODWORD(v17) = 24;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "CLIENT: unregister for notification, %d, %s, wasRegistered, %d", v21, v17, v18);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  v10 = sub_1000AFED0(a1, a2, (int *)a3);
  if (v10)
  {
    if (*a3 < 3)
      v11 = v6;
    else
      v11 = 0;
    if (v11 == 1)
    {
      sub_1000C49B0((uint64_t)a1, 0);
      sub_1000C4CAC((uint64_t)a1);
    }
    *(_DWORD *)buf = 0;
    if (((*(uint64_t (**)(char *, uint64_t, uint8_t *))(*(_QWORD *)a1 + 104))(a1, a2, buf) & 1) == 0)
    {
      v21[0] = 1;
      if (((*(uint64_t (**)(char *, uint64_t, _DWORD *))(*(_QWORD *)a1 + 104))(a1, a2, v21) & 1) == 0)
      {
        v19 = 2;
        if (((*(uint64_t (**)(char *, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v19) & 1) == 0)
          sub_10009E904((uint64_t)(a1 + 1064), &v20);
      }
    }
  }
  return v10;
}

BOOL sub_1000B0530(uint64_t a1, int a2, int *a3)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __int32 v9;
  uint64_t **v10;
  id v11;
  uint64_t v12;
  int32x4_t v14;
  uint8_t buf[8];
  __int16 v16;
  const char *v17;
  __int16 v18;
  __int32 v19;
  __int16 v20;
  id v21;
  __int16 v22;
  uint64_t v23;

  v14.i32[2] = a2;
  v5 = 1;
  if (sub_100118DF8(a1, a2, a3))
  {
    v6 = sub_100B303DC();
    sub_10010F434((uint64_t)buf);
    sub_100B30A14(v6, (uint64_t *)buf);
    *(_DWORD *)buf = 1;
    v14.i32[0] = 1;
    v14.i32[1] = sub_10142DEC4((int *)buf);
    v7 = sub_1005EE584();
    *(_DWORD *)buf = 3;
    sub_1005FBA78(v7, (unsigned int *)buf, &v14, (int *)(a1 + 5124), &v14.i32[2], a3);
    v5 = sub_1000AFED0((char *)a1, v14.i32[2], a3);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = v14.i32[2];
      *(_QWORD *)buf = &v14.i64[1];
      v10 = sub_1000823D0((uint64_t **)(a1 + 80), &v14.i32[2], (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v11 = objc_msgSend(v10[8], "description", v14.i64[0]);
      v12 = *a3;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1026;
      v19 = v9;
      v20 = 2114;
      v21 = v11;
      v22 = 2050;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,unregistration\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x2Cu);
    }
    if (*a3 == 15 || !*a3)
    {
      *(_DWORD *)buf = *a3;
      if (sub_1001B7864(a1, (int *)buf, 1))
        sub_1000C6470((uint64_t **)a1, a3);
    }
  }
  return v5;
}

uint64_t sub_1000B072C(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10008A9F0((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

BOOL sub_1000B07A4(uint64_t a1, int a2, int *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  _BOOL8 v9;
  int v10;
  NSObject *v11;
  int v12;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  id v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  int v23;
  int v24;
  __int16 v25;
  id v26;
  uint8_t buf[8];
  __int16 v28;
  id v29;

  HIDWORD(v20) = a2;
  if (!*a3)
  {
    *(_QWORD *)buf = (char *)&v20 + 4;
    v5 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), (int *)&v20 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = HIDWORD(v20);
      v8 = objc_msgSend(v5, "UTF8String");
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2082;
      v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,off,GnssProviderBare,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v16 = qword_1022A0078;
      v17 = HIDWORD(v20);
      v18 = objc_msgSend(v5, "UTF8String");
      v23 = 67240450;
      v24 = v17;
      v25 = 2082;
      v26 = v18;
      LODWORD(v20) = 18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#wigo,off,GnssProviderBare,%{public}d,%{public}s", &v23, v20);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    v21[0] = CFSTR("ServiceName");
    v21[1] = CFSTR("Register");
    v22[0] = v5;
    v22[1] = &__kCFBooleanFalse;
    PLLogRegisteredEvent(4, CFSTR("gpsactivation"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2), 0);
    a2 = HIDWORD(v20);
  }
  v9 = sub_1000B0BF8((char *)a1, a2, a3);
  if (v9)
  {
    if (!*a3)
    {
      *(_DWORD *)buf = 0;
      if ((int)sub_1001B7864(a1, (int *)buf, 1) >= 1)
      {
        *(_DWORD *)buf = *a3;
        v10 = sub_1001B7864(a1, (int *)buf, 1);
        sub_10004FFE4(a1, 0, v10, a3);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = HIDWORD(v20);
      v28 = 1026;
      LODWORD(v29) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unregistering for client,%{public}d,notification,%{public}d,failed", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14 = *a3;
      v23 = 67240448;
      v24 = HIDWORD(v20);
      v25 = 1026;
      LODWORD(v26) = v14;
      LODWORD(v20) = 14;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Unregistering for client,%{public}d,notification,%{public}d,failed", &v23, v20);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  return v9;
}

BOOL sub_1000B0BF8(char *a1, int a2, int *a3)
{
  int v4;

  if ((*a3 - 1) > 1)
    return sub_1000AFED0(a1, a2, a3);
  v4 = 0;
  return sub_1000AFED0(a1, a2, &v4);
}

int *sub_1000B0C3C(int *a1)
{
  int v2;
  uint64_t v4;
  std::runtime_error *v5;
  int8x16_t v6;
  uint64_t v7;
  std::string v8;
  std::runtime_error v9;
  uint64_t v10;

  *a1 = -1;
  v2 = open("/dev/urandom", 0x1000000);
  *a1 = v2;
  if (v2 == -1)
  {
    v4 = *__error();
    sub_1015A2E04(&v8, "open /dev/urandom");
    v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_10212A630;
    v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    v7 = 60;
    sub_10026FC48(v5, &v6);
  }
  return a1;
}

void sub_1000B0CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0D18(unsigned int *a1)
{
  uint64_t result;

  result = *a1;
  if ((result & 0x80000000) == 0)
    return close(result);
  return result;
}

uint64_t sub_1000B0D38(ssize_t a1)
{
  uint64_t v2;

  sub_1000B0DAC(a1, (uint64_t)&v2, 0x10uLL);
  BYTE6(v2) = BYTE6(v2) & 0xF | 0x40;
  return v2;
}

ssize_t sub_1000B0DAC(ssize_t result, uint64_t a2, unint64_t a3)
{
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  std::string v10;
  std::runtime_error v11;
  uint64_t v12;

  if (a3)
  {
    v5 = (int *)result;
    v6 = 0;
    do
    {
      result = read(*v5, (void *)(a2 + v6), a3 - v6);
      if (result < 0)
      {
        result = (ssize_t)__error();
        if (*(_DWORD *)result != 4)
        {
          v7 = *(int *)result;
          sub_1015A2E04(&v10, "read");
          std::runtime_error::runtime_error(&v11, &v10);
          v11.__vftable = (std::runtime_error_vtbl *)&off_10212A630;
          v12 = v7;
          v8.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal."
                               "sdk/usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
          v8.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          v9 = 98;
          sub_10026FC48(&v11, &v8);
        }
      }
      else
      {
        v6 += result;
      }
    }
    while (v6 < a3);
  }
  return result;
}

void sub_1000B0E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0EAC(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_DWORD *)(result + 8) = 52;
    *(_BYTE *)(result + 12) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1000B0EC8(uint64_t a1, _OWORD *a2, int a3, uint64_t a4, double a5)
{
  *(_OWORD *)a1 = *a2;
  *(double *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 24) = a3;
  sub_1000B26F4(a1 + 32, a4);
  return a1;
}

void sub_1000B0F04(uint64_t *a1, __int128 *a2)
{
  CFStringRef v4;
  char v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  sub_1001E4804(&v16);
  v15 = 0;
  v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnableEventLogging", 0x8000100u, kCFAllocatorNull);
  v5 = sub_1001E48E4(v16, (uint64_t)v4, &v15);
  CFRelease(v4);
  v6 = v15;
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v6)
    v10 = 0;
  else
    v10 = v5;
  if ((v10 & 1) == 0)
  {
    v11 = (__int128 *)a1[1];
    if ((unint64_t)v11 >= a1[2])
    {
      v13 = sub_10029A7F0(a1, a2);
    }
    else
    {
      v12 = *a2;
      *(__int128 *)((char *)v11 + 12) = *(__int128 *)((char *)a2 + 12);
      *v11 = v12;
      sub_1000B26F4(v11 + 2, a2 + 2);
      v13 = (uint64_t)(v11 + 21);
      a1[1] = (uint64_t)(v11 + 21);
    }
    a1[1] = v13;
    v14 = 0xCF3CF3CF3CF3CF3DLL * ((v13 - *a1) >> 4);
    if (v14 >= sub_1000B10A4())
      sub_10029A064(a1);
  }
}

void sub_1000B1050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B10A4()
{
  CFStringRef v0;
  int v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v7 = 0;
  v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEventLoggerMaxBufferSize", 0x8000100u, kCFAllocatorNull);
  v1 = sub_1000B1180(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  v2 = v7;
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return 32;
}

void sub_1000B1168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B1180(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  _BYTE buf[12];
  __int16 v19;
  uint64_t v20;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_QWORD *)buf = 0;
  v6 = sub_1000ABE08(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_DWORD *)buf;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint32_t &, int) const", "%s\n", v12);
      if (v12 != buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_1000B13C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D850;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

double sub_1000B13D8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10212D580;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

uint64_t sub_1000B1438(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2560) + 112))(*(_QWORD *)(a1 + 2560));
}

uint64_t sub_1000B1448(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10212D580;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_1000B14DC(a1, a2);
  return a1;
}

void sub_1000B14C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_1000B14DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  _BYTE v78[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v78, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 17265);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v78, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v77, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v78);
  }
  v5 = *(_DWORD *)(a2 + 292);
  if (!(_BYTE)v5)
    goto LABEL_53;
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 1u;
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 8);
    if (!v7)
      v7 = *(_QWORD *)(qword_1023103F8 + 8);
    sub_1002CA258(v6, v7);
    v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 292) |= 2u;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023103F8 + 16);
  sub_1002CB7A0(v8, v9);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_23:
  *(_DWORD *)(a1 + 292) |= 4u;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    operator new();
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    v11 = *(_QWORD *)(qword_1023103F8 + 24);
  sub_1002CC240(v10, v11);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)(a1 + 292) |= 8u;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    operator new();
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_1023103F8 + 32);
  sub_1002CC850(v12, v13);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_38:
    *(_DWORD *)(a1 + 292) |= 0x20u;
    v16 = *(_QWORD *)(a1 + 48);
    if (!v16)
      operator new();
    v17 = *(_QWORD *)(a2 + 48);
    if (!v17)
      v17 = *(_QWORD *)(qword_1023103F8 + 48);
    sub_1002CDA38(v16, v17);
    v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_53;
      goto LABEL_48;
    }
    goto LABEL_43;
  }
LABEL_33:
  *(_DWORD *)(a1 + 292) |= 0x10u;
  v14 = *(_QWORD *)(a1 + 40);
  if (!v14)
    operator new();
  v15 = *(_QWORD *)(a2 + 40);
  if (!v15)
    v15 = *(_QWORD *)(qword_1023103F8 + 40);
  sub_1002CD654(v14, v15);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x20) != 0)
    goto LABEL_38;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_43:
  *(_DWORD *)(a1 + 292) |= 0x40u;
  v18 = *(_QWORD *)(a1 + 56);
  if (!v18)
    operator new();
  v19 = *(_QWORD *)(a2 + 56);
  if (!v19)
    v19 = *(_QWORD *)(qword_1023103F8 + 56);
  sub_1002CF5D0(v18, v19);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x80) != 0)
  {
LABEL_48:
    *(_DWORD *)(a1 + 292) |= 0x80u;
    v20 = *(_QWORD *)(a1 + 64);
    if (!v20)
      operator new();
    v21 = *(_QWORD *)(a2 + 64);
    if (!v21)
      v21 = *(_QWORD *)(qword_1023103F8 + 64);
    sub_1002D1100(v20, v21);
    v5 = *(_DWORD *)(a2 + 292);
  }
LABEL_53:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_103;
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x100u;
    v22 = *(_QWORD *)(a1 + 72);
    if (!v22)
      operator new();
    v23 = *(_QWORD *)(a2 + 72);
    if (!v23)
      v23 = *(_QWORD *)(qword_1023103F8 + 72);
    sub_1002CAD68(v22, v23);
    v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x200) == 0)
    {
LABEL_56:
      if ((v5 & 0x400) == 0)
        goto LABEL_57;
      goto LABEL_73;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_56;
  }
  *(_DWORD *)(a1 + 292) |= 0x200u;
  v24 = *(_QWORD *)(a1 + 80);
  if (!v24)
    operator new();
  v25 = *(_QWORD *)(a2 + 80);
  if (!v25)
    v25 = *(_QWORD *)(qword_1023103F8 + 80);
  sub_1002CCC34(v24, v25);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x400) == 0)
  {
LABEL_57:
    if ((v5 & 0x800) == 0)
      goto LABEL_58;
    goto LABEL_78;
  }
LABEL_73:
  *(_DWORD *)(a1 + 292) |= 0x400u;
  v26 = *(_QWORD *)(a1 + 88);
  if (!v26)
    operator new();
  v27 = *(_QWORD *)(a2 + 88);
  if (!v27)
    v27 = *(_QWORD *)(qword_1023103F8 + 88);
  sub_1002D1FC0(v26, v27);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x800) == 0)
  {
LABEL_58:
    if ((v5 & 0x1000) == 0)
      goto LABEL_59;
    goto LABEL_83;
  }
LABEL_78:
  *(_DWORD *)(a1 + 292) |= 0x800u;
  v28 = *(_QWORD *)(a1 + 96);
  if (!v28)
    operator new();
  v29 = *(_QWORD *)(a2 + 96);
  if (!v29)
    v29 = *(_QWORD *)(qword_1023103F8 + 96);
  sub_1002D23A4(v28, v29);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x1000) == 0)
  {
LABEL_59:
    if ((v5 & 0x2000) == 0)
      goto LABEL_60;
    goto LABEL_88;
  }
LABEL_83:
  *(_DWORD *)(a1 + 292) |= 0x1000u;
  v30 = *(_QWORD *)(a1 + 104);
  if (!v30)
    operator new();
  v31 = *(_QWORD *)(a2 + 104);
  if (!v31)
    v31 = *(_QWORD *)(qword_1023103F8 + 104);
  sub_1002D2788(v30, v31);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x2000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000) == 0)
      goto LABEL_61;
    goto LABEL_93;
  }
LABEL_88:
  *(_DWORD *)(a1 + 292) |= 0x2000u;
  v32 = *(_QWORD *)(a1 + 112);
  if (!v32)
    operator new();
  v33 = *(_QWORD *)(a2 + 112);
  if (!v33)
    v33 = *(_QWORD *)(qword_1023103F8 + 112);
  sub_1002D2B6C(v32, v33);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x4000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0)
      goto LABEL_103;
    goto LABEL_98;
  }
LABEL_93:
  *(_DWORD *)(a1 + 292) |= 0x4000u;
  v34 = *(_QWORD *)(a1 + 120);
  if (!v34)
    operator new();
  v35 = *(_QWORD *)(a2 + 120);
  if (!v35)
    v35 = *(_QWORD *)(qword_1023103F8 + 120);
  sub_1002D2F50(v34, v35);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x8000) != 0)
  {
LABEL_98:
    *(_DWORD *)(a1 + 292) |= 0x8000u;
    v36 = *(_QWORD *)(a1 + 128);
    if (!v36)
      operator new();
    v37 = *(_QWORD *)(a2 + 128);
    if (!v37)
      v37 = *(_QWORD *)(qword_1023103F8 + 128);
    sub_1002D3334(v36, v37);
    v5 = *(_DWORD *)(a2 + 292);
  }
LABEL_103:
  if ((v5 & 0xFF0000) == 0)
    goto LABEL_153;
  if ((v5 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x10000u;
    v38 = *(_QWORD *)(a1 + 136);
    if (!v38)
      operator new();
    v39 = *(_QWORD *)(a2 + 136);
    if (!v39)
      v39 = *(_QWORD *)(qword_1023103F8 + 136);
    sub_1002D3A24(v38, v39);
    v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x20000) == 0)
    {
LABEL_106:
      if ((v5 & 0x40000) == 0)
        goto LABEL_107;
      goto LABEL_123;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_106;
  }
  *(_DWORD *)(a1 + 292) |= 0x20000u;
  v40 = *(_QWORD *)(a1 + 144);
  if (!v40)
    operator new();
  v41 = *(_QWORD *)(a2 + 144);
  if (!v41)
    v41 = *(_QWORD *)(qword_1023103F8 + 144);
  sub_1002D4270(v40, v41);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x40000) == 0)
  {
LABEL_107:
    if ((v5 & 0x80000) == 0)
      goto LABEL_108;
    goto LABEL_128;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) |= 0x40000u;
  v42 = *(_QWORD *)(a1 + 152);
  if (!v42)
    operator new();
  v43 = *(_QWORD *)(a2 + 152);
  if (!v43)
    v43 = *(_QWORD *)(qword_1023103F8 + 152);
  sub_1002D4A14(v42, v43);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x80000) == 0)
  {
LABEL_108:
    if ((v5 & 0x100000) == 0)
      goto LABEL_109;
    goto LABEL_133;
  }
LABEL_128:
  *(_DWORD *)(a1 + 292) |= 0x80000u;
  v44 = *(_QWORD *)(a1 + 160);
  if (!v44)
    operator new();
  v45 = *(_QWORD *)(a2 + 160);
  if (!v45)
    v45 = *(_QWORD *)(qword_1023103F8 + 160);
  sub_1002D51B8(v44, v45);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x100000) == 0)
  {
LABEL_109:
    if ((v5 & 0x200000) == 0)
      goto LABEL_110;
    goto LABEL_138;
  }
LABEL_133:
  *(_DWORD *)(a1 + 292) |= 0x100000u;
  v46 = *(_QWORD *)(a1 + 168);
  if (!v46)
    operator new();
  v47 = *(_QWORD *)(a2 + 168);
  if (!v47)
    v47 = *(_QWORD *)(qword_1023103F8 + 168);
  sub_1002D5AE8(v46, v47);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x200000) == 0)
  {
LABEL_110:
    if ((v5 & 0x400000) == 0)
      goto LABEL_111;
    goto LABEL_143;
  }
LABEL_138:
  *(_DWORD *)(a1 + 292) |= 0x200000u;
  v48 = *(_QWORD *)(a1 + 176);
  if (!v48)
    operator new();
  v49 = *(_QWORD *)(a2 + 176);
  if (!v49)
    v49 = *(_QWORD *)(qword_1023103F8 + 176);
  sub_1002D628C(v48, v49);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x400000) == 0)
  {
LABEL_111:
    if ((v5 & 0x800000) == 0)
      goto LABEL_153;
    goto LABEL_148;
  }
LABEL_143:
  *(_DWORD *)(a1 + 292) |= 0x400000u;
  v50 = *(_QWORD *)(a1 + 184);
  if (!v50)
    operator new();
  v51 = *(_QWORD *)(a2 + 184);
  if (!v51)
    v51 = *(_QWORD *)(qword_1023103F8 + 184);
  sub_1002D6E6C(v50, v51);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x800000) != 0)
  {
LABEL_148:
    *(_DWORD *)(a1 + 292) |= 0x800000u;
    v52 = *(_QWORD *)(a1 + 192);
    if (!v52)
      operator new();
    v53 = *(_QWORD *)(a2 + 192);
    if (!v53)
      v53 = *(_QWORD *)(qword_1023103F8 + 192);
    sub_1002D77AC(v52, v53);
    v5 = *(_DWORD *)(a2 + 292);
  }
LABEL_153:
  if (!HIBYTE(v5))
    goto LABEL_203;
  if ((v5 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x1000000u;
    v54 = *(_QWORD *)(a1 + 200);
    if (!v54)
      operator new();
    v55 = *(_QWORD *)(a2 + 200);
    if (!v55)
      v55 = *(_QWORD *)(qword_1023103F8 + 200);
    sub_1002D7DC8(v54, v55);
    v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x2000000) == 0)
    {
LABEL_156:
      if ((v5 & 0x4000000) == 0)
        goto LABEL_157;
      goto LABEL_173;
    }
  }
  else if ((v5 & 0x2000000) == 0)
  {
    goto LABEL_156;
  }
  *(_DWORD *)(a1 + 292) |= 0x2000000u;
  v56 = *(_QWORD *)(a1 + 208);
  if (!v56)
    operator new();
  v57 = *(_QWORD *)(a2 + 208);
  if (!v57)
    v57 = *(_QWORD *)(qword_1023103F8 + 208);
  sub_1002D8860(v56, v57);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_158;
    goto LABEL_178;
  }
LABEL_173:
  *(_DWORD *)(a1 + 292) |= 0x4000000u;
  v58 = *(_QWORD *)(a1 + 216);
  if (!v58)
    operator new();
  v59 = *(_QWORD *)(a2 + 216);
  if (!v59)
    v59 = *(_QWORD *)(qword_1023103F8 + 216);
  sub_1002D8E70(v58, v59);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_158:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_159;
    goto LABEL_183;
  }
LABEL_178:
  *(_DWORD *)(a1 + 292) |= 0x8000000u;
  v60 = *(_QWORD *)(a1 + 224);
  if (!v60)
    operator new();
  v61 = *(_QWORD *)(a2 + 224);
  if (!v61)
    v61 = *(_QWORD *)(qword_1023103F8 + 224);
  sub_1002DE1B8(v60, v61);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_159:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_160;
    goto LABEL_188;
  }
LABEL_183:
  *(_DWORD *)(a1 + 292) |= 0x10000000u;
  v62 = *(_DWORD **)(a1 + 232);
  if (!v62)
    operator new();
  v63 = *(_QWORD *)(a2 + 232);
  if (!v63)
    v63 = *(_QWORD *)(qword_1023103F8 + 232);
  sub_1002DE53C(v62, v63);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_160:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_161;
    goto LABEL_193;
  }
LABEL_188:
  *(_DWORD *)(a1 + 292) |= 0x20000000u;
  v64 = *(_QWORD *)(a1 + 240);
  if (!v64)
    operator new();
  v65 = *(_QWORD *)(a2 + 240);
  if (!v65)
    v65 = *(_QWORD *)(qword_1023103F8 + 240);
  sub_1002DE640(v64, v65);
  v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_161:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_203;
    goto LABEL_198;
  }
LABEL_193:
  *(_DWORD *)(a1 + 292) |= 0x40000000u;
  v66 = *(_QWORD *)(a1 + 248);
  if (!v66)
    operator new();
  v67 = *(_QWORD *)(a2 + 248);
  if (!v67)
    v67 = *(_QWORD *)(qword_1023103F8 + 248);
  sub_1002DE72C(v66, v67);
  if ((*(_DWORD *)(a2 + 292) & 0x80000000) != 0)
  {
LABEL_198:
    *(_DWORD *)(a1 + 292) |= 0x80000000;
    v68 = *(_QWORD *)(a1 + 256);
    if (!v68)
      operator new();
    v69 = *(_QWORD *)(a2 + 256);
    if (!v69)
      v69 = *(_QWORD *)(qword_1023103F8 + 256);
    sub_1000B2608(v68, v69);
  }
LABEL_203:
  LOBYTE(v70) = *(_BYTE *)(a2 + 296);
  if (!(_BYTE)v70)
    return;
  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
  {
    *(_DWORD *)(a1 + 296) |= 1u;
    v71 = *(_QWORD *)(a1 + 264);
    if (!v71)
      operator new();
    v72 = *(_QWORD *)(a2 + 264);
    if (!v72)
      v72 = *(_QWORD *)(qword_1023103F8 + 264);
    sub_1002DE8BC(v71, v72);
    v70 = *(_DWORD *)(a2 + 296);
    if ((v70 & 2) == 0)
    {
LABEL_206:
      if ((v70 & 4) == 0)
        return;
      goto LABEL_218;
    }
  }
  else if ((*(_BYTE *)(a2 + 296) & 2) == 0)
  {
    goto LABEL_206;
  }
  *(_DWORD *)(a1 + 296) |= 2u;
  v73 = *(_QWORD *)(a1 + 272);
  if (!v73)
    operator new();
  v74 = *(_QWORD *)(a2 + 272);
  if (!v74)
    v74 = *(_QWORD *)(qword_1023103F8 + 272);
  sub_1002DE988(v73, v74);
  if ((*(_DWORD *)(a2 + 296) & 4) != 0)
  {
LABEL_218:
    *(_DWORD *)(a1 + 296) |= 4u;
    v75 = *(_QWORD *)(a1 + 280);
    if (!v75)
      operator new();
    v76 = *(_QWORD *)(a2 + 280);
    if (!v76)
      v76 = *(_QWORD *)(qword_1023103F8 + 280);
    sub_1002D9A74(v75, v76);
  }
}

void sub_1000B25F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000B2608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", 19772);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0))
        sub_1018F2754();
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(_BYTE *)(a1 + 12) = v7;
    }
  }
}

void sub_1000B26DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B26F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 336;
    sub_1000B2748((wireless_diagnostics::google::protobuf::MessageLite *)(i - 304));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000B2748(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D580;
  sub_1000B2778(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

_QWORD *sub_1000B2778(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((_QWORD *)qword_1023103F8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[10];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[12];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[13];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[14];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[15];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[16];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[17];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[18];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[19];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[20];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v1[21];
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v1[22];
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v1[23];
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v1[24];
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v1[25];
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v1[26];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v1[27];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v1[28];
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v1[29];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v1[30];
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v1[31];
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v1[32];
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v1[33];
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v1[34];
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    result = (_QWORD *)v1[35];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1000B2A68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10212D850;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1000B2A98(uint64_t a1, uint64_t a2)
{
  unint64_t TimeStamp;
  double v5;
  double DoubleValue;
  double v7;
  double v8;
  int v9;

  TimeStamp = IOHIDEventGetTimeStamp(a2);
  v5 = sub_100127828(TimeStamp);
  DoubleValue = IOHIDEventGetDoubleValue(a2, 786439);
  v7 = IOHIDEventGetDoubleValue(a2, 786440);
  v8 = IOHIDEventGetDoubleValue(a2, 786441);
  v9 = sub_1000B2B34(DoubleValue, v7, v8);
  return sub_1001FC800(a1, v9, v5);
}

uint64_t sub_1000B2B34(double a1, double a2, double a3)
{
  uint64_t v6;
  double v9;
  NSObject *v10;
  const char *v14;
  uint8_t *v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;

  if (a2 >= 4.0)
  {
    if (a3 < a2 && a2 < 100.0 && a3 < a1)
    {
      v6 = 1;
    }
    else
    {
      v9 = a1 * 0.8;
      if (a2 >= 200.0 || v9 > a3)
      {
        if (a2 >= 1000.0 || v9 <= a3)
        {
          if (a2 >= 30000.0 || v9 <= a3)
          {
            if (a2 >= 10000.0)
              v6 = 6;
            else
              v6 = 5;
          }
          else
          {
            v6 = 4;
          }
        }
        else
        {
          v6 = 3;
        }
      }
      else
      {
        v6 = 2;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AFD8);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    v25 = a1;
    v26 = 2050;
    v27 = a2;
    v28 = 2050;
    v29 = a3;
    v30 = 1026;
    v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "AmbientLight,DecisionTree,x,%{public}f,y,%{public}f,z,%{public}f,out,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AFD8);
    v16 = 134349824;
    v17 = a1;
    v18 = 2050;
    v19 = a2;
    v20 = 2050;
    v21 = a3;
    v22 = 1026;
    v23 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "AmbientLight,DecisionTree,x,%{public}f,y,%{public}f,z,%{public}f,out,%{public}d", &v16, 38);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "CLAmbientLightDecisionTreeOutput CLAmbientLightDecisionTree::decisionTree(const double, const double, const double) const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  return v6;
}

uint64_t sub_1000B2DE8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  _DWORD v45[6];
  uint64_t v46;
  uint64_t v47;
  int v48;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        bzero(v45, 0x578uLL);
        *(_QWORD *)buf = 0x7FEFFFFFFFFFFFFFLL;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0xBFF0000000000000;
        v48 = 0;
        v45[0] = 0;
        v46 = 0;
        v47 = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1000B5750();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022FDDF9;
        HIDWORD(v38) = v17;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_1000B326C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FDDF8);
}

_BYTE *sub_1000B3280(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1000B357C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1000B335C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1000B357C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_1000B33A8(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A7530);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C454BDLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A7530);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C454BDLL & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

id sub_1000B357C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1000B33A8(a1);
  else
    return 0;
}

uint64_t sub_1000B35C8(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x590uLL);
  return 1;
}

id sub_1000B3638(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10188E7FC(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10188EB74(a1);
  else
    return 0;
}

uint64_t sub_1000B36B0(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[1638];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10071F64C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022A3FF9;
        HIDWORD(v38) = v17;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_1000B3B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3FF8);
}

BOOL sub_1000B3B20(uint64_t a1, int a2, unsigned int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v40 = v10;
      v16 = sub_1001CFE7C(a3);
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = sub_1001CFE7C(a3);
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v24;
        if (v27 >= v24)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v24 >= *(_DWORD *)(v26 + 32))
      {
        *(_QWORD *)v42 = v26;
        v35 = *(_QWORD *)(v26 + 56);
        v36 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v36;
        *(_QWORD *)buf = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1005AA148();
        }
        sub_1001358BC((const void **)buf);
        if (v35)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v42 = a1 + 64;
        v30 = byte_1022A30A1;
        HIDWORD(v39) = sub_1001CFE7C(a3);
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = sub_1001CFE7C(a3);
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = sub_1001CFE7C(a3);
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        v34 = v40;
        *(_DWORD *)buf = sub_1001CFE7C(a3);
        sub_1000C6190((uint64_t **)(v34 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021460C0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v37 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v37 = (_QWORD *)*v37;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v37;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v42,
                    v39);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

void sub_1000B3FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1001358BC((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A30A0);
}

uint64_t sub_1000B3FE0(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        bzero(buf, 0x658uLL);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1012A5E98();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022FE4D1;
        HIDWORD(v38) = v17;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v45 = 1026;
    v46 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_1000B4444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FE4D0);
}

uint64_t sub_1000B4458(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x658uLL);
  return 1;
}

uint64_t sub_1000B44C8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _OWORD buf[102];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 160);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1000B57E8();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022A33C9;
        HIDWORD(v38) = v17;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102147D30);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102147D30);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_1000B4940(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000B56AC(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1000B49C0(uint64_t a1, int a2, int *a3, uint64_t **a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  _QWORD *v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  _OWORD buf[102];

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v40 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v38 = v26;
        v33 = *(_QWORD *)(v26 + 56);
        *(_QWORD *)&buf[0] = &v39;
        sub_100041CE0((uint64_t **)(v26 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = *a4;
        memset(buf, 0, 192);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1000B55F4();
        }
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v38 = a1 + 64;
        v30 = byte_1022A3750;
        HIDWORD(v37) = v17;
        *(_QWORD *)&buf[0] = (char *)&v37 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v37) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v37 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        HIDWORD(v37) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v37 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v39;
        sub_100041CE0(v32 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = *a4;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102148DD8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102148DD8);
    v34 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v34 = (_QWORD *)*v34;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v34;
    v41 = 1026;
    v42 = a2;
    LODWORD(v37) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v40,
      v37);
    v36 = (char *)v35;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v35);
    if (v36 != (char *)buf)
      free(v36);
    return 0;
  }
  return result;
}

uint64_t sub_1000B4E3C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_OWORD **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  v13 = v11[2];
  v14 = v11[3];
  v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  v16 = v11[6];
  v17 = v11[7];
  v18 = v11[9];
  a3[8] = v11[8];
  a3[9] = v18;
  a3[6] = v16;
  a3[7] = v17;
  return 1;
}

uint64_t sub_1000B4EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3748);
}

_BYTE *sub_1000B4ED0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_1000B4FF8(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_100041CE0(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_1000B4FAC(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_1000B4FF8(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_1000B4FF8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_100621B30(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_1000B5070(a1);
  }
}

id sub_1000B5070(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB845ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB845ELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102148F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1000B541C(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLDaemonClient::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102174F38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102174F38);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 5)
    *(_BYTE *)(a4 + 371) = *a3;
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1000B55D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000B55F4()
{
  operator new();
}

id sub_1000B56AC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100621F58(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1006222E0(a1);
  else
    return 0;
}

uint64_t sub_1000B5724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A33C8);
}

uint64_t sub_1000B5738(uint64_t a1)
{
  sub_1001B7388(a1);
  return 1;
}

void sub_1000B5750()
{
  operator new();
}

void sub_1000B57E8()
{
  operator new();
}

uint64_t sub_1000B5898(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  double v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1000B58D8(uint64_t a1, int *a2, double *a3)
{
  double v3;
  uint64_t *v4;

  v3 = *a3;
  v4 = *(uint64_t **)(a1 + 8);
  sub_1000B5918(*v4, *a2, *a3);
  return sub_1000B5CF0(v4, v3);
}

uint64_t *sub_1000B5918(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *result;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  double v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  uint64_t v21;

  HIDWORD(v13) = a2;
  *(_BYTE *)a1 = 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102152E50);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v19) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "AmbientLightDecisionTreeOutput,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102152E50);
    v14 = 67240192;
    LODWORD(v15) = a2;
    LODWORD(v13) = 8;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "AmbientLightDecisionTreeOutput,%{public}d", &v14, v13);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::ALSProcessor::measurementInput(const CLAmbientLightDecisionTreeOutput, const CFTimeInterval)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  if (vabdd_f64(a3, *(double *)(a1 + 16)) > 1.0)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)a1 = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102152E50);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      v19 = a3;
      v20 = 2050;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "ALSProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102152E50);
      v11 = *(_QWORD *)(a1 + 16);
      v14 = 134349312;
      v15 = a3;
      v16 = 2050;
      v17 = v11;
      LODWORD(v13) = 22;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "ALSProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", &v14, v13);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::ALSProcessor::measurementInput(const CLAmbientLightDecisionTreeOutput, const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  *(double *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a2;
  result = sub_1000B5C9C((uint64_t)&unk_102310CC0, (int *)&v13 + 1);
  *(double *)(a1 + 8) = *(double *)(a1 + 8) * 0.9 + *(double *)result * 0.1;
  return result;
}

uint64_t *sub_1000B5C9C(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_100263950("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_1000B5CF0(uint64_t *a1, double a2)
{
  uint64_t result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v12;
  int v13;
  double v14;
  double v15;
  int v16;

  result = a1[7];
  if (result)
  {
    v13 = 0;
    v14 = 0.0;
    v16 = 0;
    v15 = a2;
    v4 = *a1;
    if (*a1)
    {
      v5 = *(double *)(v4 + 16);
      v6 = vabdd_f64(a2, v5);
      v7 = 0.0;
      if (v6 <= 1.0 && *(_BYTE *)v4)
      {
        v8 = *(double *)(v4 + 8);
        LODWORD(v4) = 2 * (v8 > 0.8);
        v7 = v5;
      }
      else
      {
        LODWORD(v4) = 0;
        v8 = 0.0;
      }
      v13 = v4;
      v14 = v8;
      v15 = v7;
    }
    v9 = a1[2];
    if (v9)
    {
      v10 = *(double *)(v9 + 8);
      if (v10 > 0.65 && (_DWORD)v4 != 2)
      {
        v12 = *(double *)(v9 + 16);
        v13 = 1;
        v14 = v10;
        v15 = v12;
        v16 = 1;
      }
    }
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 48))(result, &v13);
  }
  return result;
}

void sub_1000B5DC0(uint64_t a1, uint64_t a2)
{
  double v2;
  __int128 v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  _DWORD v27[2];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  void *__p;
  char v49;
  std::__shared_weak_count *v50;
  id v51;
  int v52;
  int v53;
  __int128 v54;

  v2 = *(double *)(a1 + 736);
  if (vabdd_f64(*(double *)(a2 + 16), v2) >= 1.0)
  {
    if (*(_BYTE *)(a1 + 752))
      *(_BYTE *)(a1 + 752) = 0;
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 720) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 736) = v5;
    *(_BYTE *)(a1 + 752) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 720);
      v8 = *(_QWORD *)(a1 + 728);
      v9 = *(_QWORD *)(a1 + 736);
      v10 = sub_100B303DC();
      *(_DWORD *)buf = 67241216;
      v37 = v7;
      v38 = 2050;
      v39 = v8;
      v40 = 2050;
      v41 = v9;
      v42 = 2050;
      v43 = v2;
      v44 = 2050;
      v45 = sub_100B309E0(v10);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "LocationController,gnssPredictedAvailability,%{public}d,probability,%{public}.3f,timestamp,%{public}.3f,lastPredictionTimestamp,%{public}.3f,propagation_us,%{public}.3f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v20 = qword_1022A0028;
      v21 = *(_DWORD *)(a1 + 720);
      v22 = *(_QWORD *)(a1 + 728);
      v23 = *(_QWORD *)(a1 + 736);
      v24 = sub_100B303DC();
      v27[0] = 67241216;
      v27[1] = v21;
      v28 = 2050;
      v29 = v22;
      v30 = 2050;
      v31 = v23;
      v32 = 2050;
      v33 = v2;
      v34 = 2050;
      v35 = sub_100B309E0(v24);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "LocationController,gnssPredictedAvailability,%{public}d,probability,%{public}.3f,timestamp,%{public}.3f,lastPredictionTimestamp,%{public}.3f,propagation_us,%{public}.3f", v27, 48);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::predictedGnssAvailabilityCallback(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_100129CA0((uint64_t)buf);
    v53 = *(_DWORD *)(a1 + 720);
    v54 = *(_OWORD *)(a1 + 728);
    v52 = *(_DWORD *)(a1 + 744);
    v27[0] = 36;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v27, buf, 1, 0xFFFFFFFFLL, 0);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 248))(*(_QWORD *)(a1 + 288), a2);

    v11 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v49 < 0)
      operator delete(__p);
    v14 = v47;
    if (v47)
    {
      v15 = (unint64_t *)&v47->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v46;
    if (v46)
    {
      v18 = (unint64_t *)&v46->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1000B615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_1000B618C(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  const char *v34;
  double v35;
  uint64_t v36;
  double v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88[2];
  int v89;
  double v90;
  __int16 v91;
  _BYTE v92[14];
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  unsigned int v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  double v144;
  uint8_t buf[4];
  _BYTE v146[44];
  __int16 v147;
  unsigned int v148;
  __int16 v149;
  const char *v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  int v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  double v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  int v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  double v194;

  *(_DWORD *)buf = 1;
  v88[0] = 1;
  v88[1] = sub_10142DEC4((int *)buf);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  v89 = v8;
  sub_1005FA6E8(v9, (unsigned int *)buf, (int32x4_t *)(a1 + 5124), v88, &v89, a2, a3);
  if (!*a2)
  {
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214C640);
    v10 = qword_1022A02F8;
    if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(_QWORD *)(a3 + 4);
      v54 = *(_QWORD *)(a3 + 12);
      v60 = *(_QWORD *)(a3 + 20);
      v11 = *(_DWORD *)(a3 + 96);
      v52 = sub_10014D1E0(v11);
      v58 = *(_QWORD *)(a3 + 44);
      v64 = *(_QWORD *)(a3 + 60);
      v68 = *(_DWORD *)(a3 + 84);
      v72 = *(_QWORD *)(a3 + 88);
      v76 = *(_QWORD *)(a3 + 28);
      v80 = *(_QWORD *)(a3 + 36);
      v84 = *(_QWORD *)(a3 + 76);
      v12 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v13 = sub_100B30608(v12, buf) - *(double *)(a3 + 76);
      v14 = *(_QWORD *)(a3 + 184);
      v15 = *(_QWORD *)(a3 + 52);
      v86 = a4;
      v16 = *(_QWORD *)(a3 + 68);
      v17 = *(_DWORD *)(a3 + 124);
      v46 = *(_DWORD *)(a3 + 128);
      v50 = *(_QWORD *)(a3 + 100);
      v56 = *(_QWORD *)(a3 + 108);
      v62 = *(_QWORD *)(a3 + 116);
      v66 = *(_DWORD *)(a3 + 132);
      v70 = *(_DWORD *)(a3 + 136);
      v74 = *(unsigned __int8 *)(a3 + 516);
      v78 = *(_DWORD *)(a3 + 696);
      v82 = *(_DWORD *)(a3 + 140);
      v18 = sub_100B303DC();
      v19 = sub_100B309E0(v18);
      *(_DWORD *)buf = 136322306;
      *(_QWORD *)v146 = "CL";
      *(_WORD *)&v146[8] = 1024;
      *(_DWORD *)&v146[10] = 1;
      *(_WORD *)&v146[14] = 2048;
      *(_QWORD *)&v146[16] = v48;
      *(_WORD *)&v146[24] = 2048;
      *(_QWORD *)&v146[26] = v54;
      *(_WORD *)&v146[34] = 2048;
      *(_QWORD *)&v146[36] = v60;
      v147 = 1024;
      v148 = v11;
      v149 = 2080;
      v150 = v52;
      v151 = 2048;
      v152 = v58;
      v153 = 2048;
      v154 = v64;
      v155 = 1024;
      v156 = v68;
      v157 = 2048;
      v158 = v72;
      v159 = 2048;
      v160 = v76;
      v161 = 2048;
      v162 = v80;
      v163 = 2048;
      v164 = v84;
      v165 = 2048;
      v166 = v13;
      v167 = 2048;
      v168 = v14;
      v169 = 1024;
      v170 = v17;
      v171 = 2048;
      v172 = v15;
      v173 = 2048;
      v174 = v16;
      a4 = v86;
      v175 = 1024;
      v176 = v46;
      v177 = 2048;
      v178 = v50;
      v179 = 2048;
      v180 = v56;
      v181 = 2048;
      v182 = v62;
      v183 = 1024;
      v184 = v66;
      v185 = 1024;
      v186 = v70;
      v187 = 1024;
      v188 = v74;
      v189 = 1024;
      v190 = v78;
      v191 = 1024;
      v192 = v82;
      v193 = 2050;
      v194 = v19;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d,gnssContent,%d,signalEnv,%d,propagation_us,%{public}.3f", buf, 0xFCu);
    }
    if (sub_1001BFF7C(117, 2))
    {
      bzero(buf, 0x65CuLL);
      v87 = a4;
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v85 = qword_1022A02F8;
      v30 = *(_QWORD *)(a3 + 4);
      v31 = *(_QWORD *)(a3 + 12);
      v32 = *(_QWORD *)(a3 + 20);
      v33 = *(_DWORD *)(a3 + 96);
      v34 = sub_10014D1E0(v33);
      v45 = *(_QWORD *)(a3 + 44);
      v47 = *(_QWORD *)(a3 + 60);
      v51 = *(_DWORD *)(a3 + 84);
      v55 = *(_QWORD *)(a3 + 88);
      v57 = *(_QWORD *)(a3 + 28);
      v61 = *(_QWORD *)(a3 + 36);
      v65 = *(double *)(a3 + 76);
      v35 = sub_1005FECEC() - v65;
      v53 = *(_QWORD *)(a3 + 184);
      v59 = *(_QWORD *)(a3 + 52);
      v63 = *(_QWORD *)(a3 + 68);
      v49 = *(_DWORD *)(a3 + 124);
      v67 = *(_DWORD *)(a3 + 128);
      v69 = *(_QWORD *)(a3 + 100);
      v71 = *(_QWORD *)(a3 + 108);
      v73 = *(_QWORD *)(a3 + 116);
      v75 = *(_DWORD *)(a3 + 132);
      v77 = *(_DWORD *)(a3 + 136);
      v79 = *(unsigned __int8 *)(a3 + 516);
      v81 = *(_DWORD *)(a3 + 696);
      v83 = *(_DWORD *)(a3 + 140);
      v36 = sub_100B303DC();
      v37 = sub_100B309E0(v36);
      v89 = 136322306;
      v90 = COERCE_DOUBLE("CL");
      v91 = 1024;
      *(_DWORD *)v92 = 1;
      *(_WORD *)&v92[4] = 2048;
      *(_QWORD *)&v92[6] = v30;
      v93 = 2048;
      v94 = v31;
      v95 = 2048;
      v96 = v32;
      v97 = 1024;
      v98 = v33;
      v99 = 2080;
      v100 = v34;
      v101 = 2048;
      v102 = v45;
      v103 = 2048;
      v104 = v47;
      v105 = 1024;
      v106 = v51;
      v107 = 2048;
      v108 = v55;
      v109 = 2048;
      v110 = v57;
      v111 = 2048;
      v112 = v61;
      v113 = 2048;
      v114 = v65;
      v115 = 2048;
      v116 = v35;
      v117 = 2048;
      v118 = v53;
      v119 = 1024;
      v120 = v49;
      v121 = 2048;
      v122 = v59;
      v123 = 2048;
      v124 = v63;
      v125 = 1024;
      v126 = v67;
      v127 = 2048;
      v128 = v69;
      v129 = 2048;
      v130 = v71;
      v131 = 2048;
      v132 = v73;
      v133 = 1024;
      v134 = v75;
      v135 = 1024;
      v136 = v77;
      v137 = 1024;
      v138 = v79;
      v139 = 1024;
      v140 = v81;
      v141 = 1024;
      v142 = v83;
      v143 = 2050;
      v144 = v37;
      v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d,gnssContent,%d,signalEnv,%d,propagation_us,%{public}.3f", &v89, 252);
      sub_100512490("LOCATION", 1, 0, 2, "virtual void CLLocationController::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v38);
      if (v38 != (char *)buf)
        free(v38);
      a4 = v87;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10214C6A0);
    v20 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v21 = *a2;
      *(_DWORD *)buf = 68289795;
      *(_WORD *)&v146[4] = 2082;
      *(_DWORD *)v146 = 0;
      *(_QWORD *)&v146[6] = "";
      *(_WORD *)&v146[14] = 1040;
      *(_DWORD *)&v146[16] = 156;
      *(_WORD *)&v146[20] = 2097;
      *(_QWORD *)&v146[22] = a3;
      *(_WORD *)&v146[30] = 2050;
      *(_QWORD *)&v146[32] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Notifying clients with location\", \"location\":%{private, location:CLClientLocation}.*P, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x2Cu);
    }
    v22 = *(double *)(a3 + 88);
    if (v22 >= 0.0)
    {
      v23 = v22 + *(double *)(a3 + 76);
      v24 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      if (v23 < sub_100B30608(v24, buf))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v25 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          v26 = sub_100B303DC();
          *(_DWORD *)buf = 0;
          v27 = sub_100B30608(v26, buf) - *(double *)(a3 + 76);
          v28 = sub_100B303DC();
          v29 = sub_100B309E0(v28);
          *(_DWORD *)buf = 134349312;
          *(double *)v146 = v27;
          *(_WORD *)&v146[8] = 2050;
          *(double *)&v146[10] = v29;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Notifying clients of an already-expired location,age,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v39 = qword_1022A0028;
          v40 = sub_1005FECEC() - *(double *)(a3 + 76);
          v41 = sub_100B303DC();
          v42 = sub_100B309E0(v41);
          v89 = 134349312;
          v90 = v40;
          v91 = 2050;
          *(double *)v92 = v42;
          LODWORD(v44) = 22;
          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "LocationController,#Warning,Notifying clients of an already-expired location,age,%{public}.3f,propagation_us,%{public}.3f", &v89, v44);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationController::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v43);
          if (v43 != (char *)buf)
            free(v43);
        }
      }
    }
  }
  sub_10011BAC4((char *)a1, a2, a3, a4, 0xFFFFFFFFLL, 0);
}

void sub_1000B6AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 2808))
  {
    v2 = *(_QWORD *)(a1 + 2800);
    if (v2)
      sub_1000B6AC0(v2, a2);
  }
}

void sub_1000B6AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  double v7;
  _BOOL4 v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  _DWORD v26[2];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  _BOOL4 v38;
  uint8_t buf[8];
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  _BOOL4 v51;

  v4 = a1 + 2388;
  v5 = sub_10011CE88(*(double *)(a1 + 2388), *(double *)(a1 + 2396));
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)buf = sub_1001FCBB4();
    v7 = sub_1000B6F08(v6, (double *)buf);
    v8 = sub_1000B7150(v7, *(double *)(v4 + 72), 315360000.0) < 900.0;
  }
  else
  {
    v8 = 0;
  }
  if (sub_1000B71A0(a1))
  {
    v9 = 236;
    if (!*(_BYTE *)(a1 + 237))
      v9 = 360;
    if (*(_BYTE *)(a1 + v9))
      v10 = !v5;
    else
      v10 = 1;
    v11 = !v10 && v8;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF668);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v13 = *(_DWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 16);
      v16 = 236;
      if (!*(_BYTE *)(a1 + 237))
        v16 = 360;
      v17 = *(unsigned __int8 *)(a1 + v16);
      *(_DWORD *)buf = 67241728;
      *(_DWORD *)&buf[4] = v13;
      v40 = 2050;
      v41 = v14;
      v42 = 2050;
      v43 = v15;
      v44 = 1026;
      v45 = v17;
      v46 = 1026;
      v47 = v5;
      v48 = 1026;
      v49 = v8;
      v50 = 1026;
      v51 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,gnssAvailability,%{public}d,probability,%{public}.3lf,timestamp,%{public}.3lf,refPresFeatureOn,%{public}d,locValid,%{public}d,locRecent,%{public}d,shouldHandleGnssAvlPredUpdate,%{public}d", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF668);
      v19 = *(_DWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = 236;
      if (!*(_BYTE *)(a1 + 237))
        v22 = 360;
      v23 = *(unsigned __int8 *)(a1 + v22);
      v26[0] = 67241728;
      v26[1] = v19;
      v27 = 2050;
      v28 = v20;
      v29 = 2050;
      v30 = v21;
      v31 = 1026;
      v32 = v23;
      v33 = 1026;
      v34 = v5;
      v35 = 1026;
      v36 = v8;
      v37 = 1026;
      v38 = v11;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "BaroAlt,gnssAvailability,%{public}d,probability,%{public}.3lf,timestamp,%{public}.3lf,refPresFeatureOn,%{public}d,locValid,%{public}d,locRecent,%{public}d,shouldHandleGnssAvlPredUpdate,%{public}d", v26, 52);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateGnssAvailabilityPred(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    if (v11)
      sub_1000B7B08(a1, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF668);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Outdoor calibration trigger disabled or AVL file not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF668);
      LOWORD(v26[0]) = 0;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "BaroAlt,#Warning,Outdoor calibration trigger disabled or AVL file not available", v26, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateGnssAvailabilityPred(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
}

double sub_1000B6F08(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double Current;
  int v6;
  NSObject *v7;
  double v8;
  double v10;
  char *v11;
  int v12;
  double v13;
  __int16 v14;
  int v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;

  v3 = *(double *)(a1 + 208);
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v3 <= 0.0
    || (v4 = *(double *)(a1 + 200), (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v4 <= 0.0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v6 = 0;
  }
  else
  {
    Current = v4 + *a2 - v3;
    v6 = 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v8 = *a2;
    *(_DWORD *)buf = 134349568;
    v19 = v8;
    v20 = 1026;
    v21 = v6;
    v22 = 2050;
    v23 = Current;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,time,%{public}lf,getGpsTimeDerivedCFAbsoluteTimeOrSystemTime,success,%{public}d,cfAbsTime,%{public}lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v10 = *a2;
    v12 = 134349568;
    v13 = v10;
    v14 = 1026;
    v15 = v6;
    v16 = 2050;
    v17 = Current;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,time,%{public}lf,getGpsTimeDerivedCFAbsoluteTimeOrSystemTime,success,%{public}d,cfAbsTime,%{public}lf", &v12, 28);
    sub_100512490("Generic", 1, 0, 2, "CFAbsoluteTime CLBarometricAltimeterCore::getGpsTimeDerivedCFAbsoluteTimeOrSystemTime(const CFTimeInterval &) const", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  return Current;
}

double sub_1000B7150(double a1, double a2, double a3)
{
  double v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v3 = fabs(a1);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = v3 == 2.22044605e-16;
    v5 = v3 < 2.22044605e-16;
  }
  else
  {
    v4 = 1;
    v5 = 0;
  }
  v6 = *(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL;
  v7 = fabs(a2);
  if (v5 || v4)
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = __OFSUB__(v6, 0x7FEFFFFFFFFFFFFFLL);
    v8 = v6 == 0x7FEFFFFFFFFFFFFFLL;
    v9 = v6 - 0x7FEFFFFFFFFFFFFFLL < 0;
  }
  if (v9 ^ v10 | v8)
  {
    v11 = v7 == 2.22044605e-16;
    v12 = v7 < 2.22044605e-16;
  }
  else
  {
    v11 = 1;
    v12 = 0;
  }
  if (v12 || v11)
    return a3;
  else
    return vabdd_f64(a1, a2);
}

uint64_t sub_1000B71A0(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  result = *(_QWORD *)(a1 + 2240);
  if (result)
  {
    if ((sub_1000B7358(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 239))
        return *(unsigned __int8 *)(a1 + 238);
      else
        return *(unsigned __int8 *)(a1 + 362);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v3 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Als Baro,pressure not available at location", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v5[0] = 0;
        v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,Als Baro,pressure not available at location", v5, 2);
        sub_100512490("Generic", 1, 0, 2, "uint32_t CLBarometricAltimeter::getBaroAlsOutDoorSupported() const", "%s\n", v4);
        if (v4 != (char *)buf)
          free(v4);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000B7358(uint64_t a1, double a2, long double a3)
{
  char *v6;
  void **v7;
  std::string::size_type v8;
  NSObject *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  std::string *v17;
  char *v18;
  std::string v19;
  int v20;
  std::string *v21;
  void *__p[2];
  uint64_t v23;

  v6 = (char *)sub_1001FD94C();
  sub_1000B7884(v6, (uint64_t)&v19);
  if (*(char *)(a1 + 599) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 576), *(_QWORD *)(a1 + 584));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 576);
    v23 = *(_QWORD *)(a1 + 592);
  }
  if (v23 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v23 >= 0)
    v8 = HIBYTE(v23);
  else
    v8 = (std::string::size_type)__p[1];
  std::string::append(&v19, (const std::string::value_type *)v7, v8);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v10 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#CLPDM,isPressureAvailableForLocation,%s", (uint8_t *)__p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v17 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
    v20 = 136315138;
    v21 = v17;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,isPressureAvailableForLocation,%s", (const char *)&v20);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::isPressureAvailableForLocation(double, double)", "%s\n", v18);
    if (v18 != (char *)__p)
      free(v18);
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (!sub_1000B78B0((const char *)v11))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#CLPDM,Avl file not available", (uint8_t *)__p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_38;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v20) = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,Avl file not available", &v20, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::isPressureAvailableForLocation(double, double)", "%s\n", v14);
    goto LABEL_51;
  }
  if ((sub_1000B78D8(a1 + 216, a2, a3) & 1) != 0)
  {
    v12 = 1;
    goto LABEL_39;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6348);
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#CLPDM,Pressure not available at location", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6348);
    LOWORD(v20) = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 1, "#CLPDM,Pressure not available at location", &v20, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureDataManager::isPressureAvailableForLocation(double, double)", "%s\n", v14);
LABEL_51:
    if (v14 != (char *)__p)
      free(v14);
  }
LABEL_38:
  v12 = 0;
LABEL_39:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1000B7838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1000B7884@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[95] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 9), *((_QWORD *)result + 10));
  *(_OWORD *)a2 = *(_OWORD *)(result + 72);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 11);
  return result;
}

BOOL sub_1000B78B0(const char *a1)
{
  stat v2;

  return stat(a1, &v2) == 0;
}

uint64_t sub_1000B78D8(uint64_t a1, double a2, long double a3)
{
  unsigned int v6;
  uint64_t result;
  NSObject *v8;
  char *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  unsigned int v12;

  v6 = (int)(floor(a3 * 20.0) * 100000.0) + vcvtmd_s64_f64((a2 + 90.0) * 20.0);
  if (v6 == *(_DWORD *)a1)
    return *(_BYTE *)(a1 + 4) != 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C6368);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLPDA,Tile not queried before,%{private}ul", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C6368);
    v10[0] = 67174657;
    v10[1] = v6;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#CLPDA,Tile not queried before,%{private}ul", v10, 8);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPressureTileAvailability::isTileAvailable(double, double)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  result = sub_1016880D0(a1, a2, a3);
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)a1 = v6;
    *(_BYTE *)(a1 + 4) = result;
  }
  return result;
}

void sub_1000B7B08(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  BOOL v6;
  NSObject *v7;
  double v8;
  BOOL v9;
  char *v10;
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  if (!*(_DWORD *)(a2 + 24))
  {
    v4 = sub_1001FCBB4();
    if (*(_DWORD *)a2 == 2
      && ((v5 = *(double *)(a2 + 8), (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        ? (v6 = v5 <= 1.0)
        : (v6 = 0),
          v6
       && v5 >= 0.08
       && (v8 = *(double *)(a2 + 16), (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
       && (v8 > 0.0 ? (v9 = v4 - v8 <= 5.0) : (v9 = 0), v9)))
    {
      if (sub_1017D3E4C(a1, v4))
        sub_1017D480C(a1, 0, v4);
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v14 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,gnssAvailability,not strong outdoor,time,%{public}lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v11 = 134349056;
        v12 = v4;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,gnssAvailability,not strong outdoor,time,%{public}lf", &v11, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleGnssAvailabilityPredictionUpdate(const CLGnssAvailabilityPredictor::Output &)", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
    }
  }
}

void sub_1000B7D74(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3)
{
  const std::string *v6;
  void **v7;
  char *size;
  std::string::size_type v9;
  int64_t v10;
  char *v11;
  char *v12;
  std::string::size_type v13;
  std::string::size_type v15;
  std::string *v27;
  int v28;
  void *v29;
  char *v30;
  char *v31;
  BOOL v32;
  BOOL v33;
  BOOL v35;
  BOOL v36;
  BOOL v40;
  std::string::size_type v42;
  uint64_t v43;
  CLConnectionMessage *v45;
  unint64_t *v46;
  unint64_t v47;
  CLConnectionMessage *v48;
  CLConnectionMessage *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  CLConnectionMessage *v54;
  unint64_t *v55;
  unint64_t v56;
  CLConnectionMessage *v57;
  unint64_t *v58;
  unint64_t v59;
  CLConnectionMessage *v60;
  CLConnectionMessage *v61;
  unint64_t *v62;
  unint64_t v63;
  CLConnectionMessage *v64;
  unint64_t *v65;
  unint64_t v66;
  CLConnectionMessage *v67;
  unint64_t *v68;
  unint64_t v69;
  CLConnectionMessage *v70;
  unint64_t *v71;
  unint64_t v72;
  CLConnectionMessage *v73;
  unint64_t *v74;
  unint64_t v75;
  CLConnectionMessage *v76;
  unint64_t *v77;
  unint64_t v78;
  CLConnectionMessage *v79;
  unint64_t *v80;
  unint64_t v81;
  void *Dictionary;
  id v83;
  NSObject *v84;
  id v85;
  NSObject *v86;
  _BYTE *v87;
  CLConnectionMessage *v88;
  unint64_t *v89;
  unint64_t v90;
  CLConnectionMessage *v91;
  unint64_t *v92;
  unint64_t v93;
  CLConnectionMessage *v94;
  unint64_t *v95;
  unint64_t v96;
  CLConnectionMessage *v97;
  unint64_t *v98;
  unint64_t v99;
  CLConnectionMessage *v100;
  unint64_t *v101;
  unint64_t v102;
  CLConnectionMessage *v103;
  unint64_t *v104;
  unint64_t v105;
  CLConnectionMessage *v106;
  unint64_t *v107;
  unint64_t v108;
  CLConnectionMessage *v109;
  unint64_t *v110;
  unint64_t v111;
  NSObject *v112;
  int v113;
  uint8_t *v114;
  uint8_t *v115;
  _BYTE *v116;
  NSObject *v117;
  uint8_t *v118;
  int v119;
  _BYTE *v120;
  int RemotePid;
  _BYTE *v122;
  NSObject *v123;
  uint8_t *v124;
  int v125;
  _BYTE *v126;
  int v127;
  _BYTE *v128;
  NSObject *v129;
  CLConnection *v130;
  uint8_t *v131;
  int v132;
  _BYTE *v133;
  int v134;
  _BYTE *v135;
  uint64_t v136;
  uint8_t *v137;
  char *v138;
  char *v139;
  _QWORD v140[5];
  __int128 v141;
  uint64_t v142;
  CLConnectionMessage *v143;
  CLConnectionMessage *v144;
  CLConnectionMessage *v145;
  CLConnectionMessage *v146;
  CLConnectionMessage *v147;
  CLConnectionMessage *v148;
  CLConnectionMessage *v149;
  CLConnectionMessage *v150;
  CLConnectionMessage *v151;
  CLConnectionMessage *v152;
  CLConnectionMessage *v153;
  CLConnectionMessage *v154;
  CLConnectionMessage *v155;
  CLConnectionMessage *v156;
  CLConnectionMessage *v157;
  CLConnectionMessage *v158;
  CLConnectionMessage *v159;
  CLConnectionMessage *v160;
  CLConnectionMessage *v161;
  CLConnectionMessage *v162;
  CLConnectionMessage *v163;
  CLConnectionMessage *v164;
  CLConnectionMessage *v165;
  CLConnectionMessage *v166;
  CLConnectionMessage *v167;
  CLConnectionMessage *v168;
  CLConnectionMessage *v169;
  CLConnectionMessage *v170;
  CLConnectionMessage *v171[2];
  CLConnectionMessage *v172[4];
  std::string v173;
  void *__p[2];
  unsigned __int8 v175;
  _BYTE buf[38];
  __int16 v177;
  void *v178;
  __int16 v179;
  int v180;
  __int16 v181;
  const char *v182;
  __int16 v183;
  const char *v184;
  _BYTE v185[12];
  char v186;
  uint8_t v187[16];
  uint64_t v188;

  v6 = (const std::string *)CLConnectionMessage::name(*a3);
  v7 = __p;
  sub_1015A2E04(__p, "/");
  size = (char *)HIBYTE(v6->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v9 = (std::string::size_type)v6;
  else
    v9 = v6->__r_.__value_.__r.__words[0];
  if ((v175 & 0x80u) == 0)
  {
    v10 = v175;
  }
  else
  {
    v7 = (void **)__p[0];
    v10 = (int64_t)__p[1];
  }
  if (v10)
  {
    if ((char)size < 0)
      size = (char *)v6->__r_.__value_.__l.__size_;
    v11 = &size[v9];
    if ((uint64_t)size >= v10)
    {
      v28 = *(char *)v7;
      v29 = (void *)v9;
      do
      {
        v30 = &size[-v10];
        if (v30 == (char *)-1)
          break;
        v31 = (char *)memchr(v29, v28, (size_t)(v30 + 1));
        if (!v31)
          break;
        v12 = v31;
        if (!memcmp(v31, v7, v10))
          goto LABEL_12;
        v29 = v12 + 1;
        size = (char *)(v11 - (v12 + 1));
      }
      while ((uint64_t)size >= v10);
    }
    v12 = v11;
LABEL_12:
    if (v12 == v11)
      v13 = -1;
    else
      v13 = (std::string::size_type)&v12[-v9];
  }
  else
  {
    v13 = 0;
  }
  std::string::basic_string(&v173, v6, 0, v13, (std::allocator<char> *)buf);
  if ((*((_BYTE *)&v173.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v15 = v173.__r_.__value_.__l.__size_;
    if (v173.__r_.__value_.__l.__size_ == 15
      && *(_QWORD *)v173.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
      && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 7) == 0x726567616E614D6ELL)
    {
      goto LABEL_149;
    }
    if (v173.__r_.__value_.__l.__size_ == 19)
    {
      if (*(_QWORD *)v173.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
        && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 8) == 0x4C72657461647055
        && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 11) == 0x6576694C72657461)
      {
        goto LABEL_131;
      }
      v15 = v173.__r_.__value_.__l.__size_;
    }
    if (v15 != 25)
      goto LABEL_63;
    if (*(_QWORD *)v173.__r_.__value_.__l.__data_ == 0x6E6F697461636F4CLL
      && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 8) == 0x4872657461647055
      && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 16) == 0x616369726F747369
      && *(_BYTE *)(v173.__r_.__value_.__r.__words[0] + 24) == 108)
    {
      goto LABEL_131;
    }
    v15 = v173.__r_.__value_.__l.__size_;
    if (v173.__r_.__value_.__l.__size_ != 25)
      goto LABEL_63;
    if (*(_QWORD *)v173.__r_.__value_.__l.__data_ == 0x756F72676B636142
      && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 8) == 0x697669746341646ELL
      && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 16) == 0x6F69737365537974
      && *(_BYTE *)(v173.__r_.__value_.__r.__words[0] + 24) == 110)
    {
      goto LABEL_131;
    }
    if ((*((_BYTE *)&v173.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_63:
      if (v15 == 19)
      {
        if (*(_QWORD *)v173.__r_.__value_.__l.__data_ == 0x756363416C6C7546
          && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 8) == 0x7373655379636172
          && *(_QWORD *)(v173.__r_.__value_.__r.__words[0] + 11) == 0x6E6F697373655379)
        {
          goto LABEL_131;
        }
        v15 = v173.__r_.__value_.__l.__size_;
      }
      if (v15 != 14)
        goto LABEL_126;
      v27 = (std::string *)v173.__r_.__value_.__r.__words[0];
      goto LABEL_122;
    }
  }
  else
  {
    if (HIBYTE(v173.__r_.__value_.__r.__words[2]) <= 0x12u)
    {
      if (HIBYTE(v173.__r_.__value_.__r.__words[2]) != 14)
      {
        if (HIBYTE(v173.__r_.__value_.__r.__words[2]) != 15)
          goto LABEL_126;
        if (v173.__r_.__value_.__r.__words[0] != 0x6E6F697461636F4CLL
          || *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 7) != 0x726567616E614D6ELL)
        {
          goto LABEL_126;
        }
LABEL_149:
        v60 = *a3;
        v61 = a3[1];
        v172[2] = v60;
        v172[3] = v61;
        if (v61)
        {
          v62 = (unint64_t *)((char *)v61 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        sub_1000B92B8();
      }
      goto LABEL_121;
    }
    if (HIBYTE(v173.__r_.__value_.__r.__words[2]) != 19)
    {
      if (HIBYTE(v173.__r_.__value_.__r.__words[2]) == 25)
      {
        v32 = v173.__r_.__value_.__r.__words[0] == 0x6E6F697461636F4CLL
           && v173.__r_.__value_.__l.__size_ == 0x4872657461647055;
        v33 = v32 && v173.__r_.__value_.__r.__words[2] == 0x616369726F747369;
        if (v33 && LOBYTE(__p[0]) == 108)
          goto LABEL_131;
        v35 = v173.__r_.__value_.__r.__words[0] == 0x756F72676B636142
           && v173.__r_.__value_.__l.__size_ == 0x697669746341646ELL;
        v36 = v35 && v173.__r_.__value_.__r.__words[2] == 0x6F69737365537974;
        if (v36 && LOBYTE(__p[0]) == 110)
          goto LABEL_131;
      }
LABEL_126:
      if (sub_1007B7A68("Monitor", &v173))
      {
        v45 = a3[1];
        v171[0] = *a3;
        v171[1] = v45;
        if (v45)
        {
          v46 = (unint64_t *)((char *)v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        sub_1007B8380(a1, a2, v171);
        sub_100261F44((uint64_t)v171);
        goto LABEL_183;
      }
      if (sub_1007B7A68("MotionActivityLite", &v173))
      {
        v54 = a3[1];
        v169 = *a3;
        v170 = v54;
        if (v54)
        {
          v55 = (unint64_t *)((char *)v54 + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        sub_1007B86D8();
      }
      if (sub_1007B7A68("InUseAssertion", &v173))
      {
        v57 = a3[1];
        v167 = *a3;
        v168 = v57;
        if (v57)
        {
          v58 = (unint64_t *)((char *)v57 + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        sub_1000B9900();
      }
      if (sub_1007B7A68("LocationIndependenceAssertion", &v173))
      {
        v64 = a3[1];
        v165 = *a3;
        v166 = v64;
        if (v64)
        {
          v65 = (unint64_t *)((char *)v64 + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        sub_1007B8A34();
      }
      if (sub_1007B7A68("kCLConnectionMessageBBTimeFreqTransferAssert", &v173))
      {
        v67 = a3[1];
        v163 = *a3;
        v164 = v67;
        if (v67)
        {
          v68 = (unint64_t *)((char *)v67 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        sub_1007B8D90();
      }
      if (sub_1007B7A68("kCLConnectionMessageGnssDisablementAssertReq", &v173))
      {
        v70 = a3[1];
        v161 = *a3;
        v162 = v70;
        if (v70)
        {
          v71 = (unint64_t *)((char *)v70 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        sub_1007B90EC();
      }
      if (sub_1007B7A68("kCLConnectionMessageBBGnssStatusQuery", &v173))
      {
        v73 = a3[1];
        v159 = *a3;
        v160 = v73;
        if (v73)
        {
          v74 = (unint64_t *)((char *)v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        sub_1007B9448();
      }
      if (sub_1007B7A68("EmergencyEnablementAssertion", &v173))
      {
        v76 = a3[1];
        v157 = *a3;
        v158 = v76;
        if (v76)
        {
          v77 = (unint64_t *)((char *)v76 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        sub_1007B97A4();
      }
      if (sub_1007B7A68("kCLConnectionMessageGnssExtensionsClient", &v173))
      {
        v79 = a3[1];
        v155 = *a3;
        v156 = v79;
        if (v79)
        {
          v80 = (unint64_t *)((char *)v79 + 8);
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
        }
        sub_1007B9B00();
      }
      if (sub_1007B7A68("LaunchdManagedClients", &v173))
      {
        Dictionary = (void *)CLConnectionMessage::getDictionary(*a3);
        v83 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("UUID"));
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v84 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v85 = objc_msgSend(v83, "UTF8String");
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v85;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"UserEventAgent reached out to locationd with registration message.\", \"UUID\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        if (!*(_QWORD *)(a1 + 936))
        {
          *(_QWORD *)(a1 + 936) = a2;
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
          v86 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            CLConnection::getName(a2);
            v87 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v187 = 136446210;
            *(_QWORD *)&v187[4] = v87;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "UserEventAgent connected (from %{public}s)", v187, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v136 = qword_1022A01D8;
            CLConnection::getName(a2);
            if (v188 >= 0)
              v137 = v187;
            else
              v137 = *(uint8_t **)v187;
            *(_DWORD *)v185 = 136446210;
            *(_QWORD *)&v185[4] = v137;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v136, 0, "UserEventAgent connected (from %{public}s)", v185, 12);
            v139 = v138;
            if (SHIBYTE(v188) < 0)
              operator delete(*(void **)v187);
            sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleNewConnectionWithFirstMsg(CLConnection *, std::shared_ptr<CLConnectionMessage>)", "%s\n", v139);
            if (v139 != buf)
              free(v139);
          }
          CLConnection::start(*(CLConnection **)(a1 + 936));
          goto LABEL_183;
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v117 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v118 = v187;
          CLConnection::getName(*(CLConnection **)(a1 + 936));
          if (v188 < 0)
            v118 = *(uint8_t **)v187;
          CLConnection::getName(a2);
          v119 = v186;
          v120 = *(_BYTE **)v185;
          RemotePid = CLConnection::getRemotePid(a2);
          v122 = v185;
          *(_DWORD *)buf = 68290563;
          if (v119 < 0)
            v122 = v120;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v118;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v122;
          v177 = 2114;
          v178 = Dictionary;
          v179 = 1026;
          v180 = RemotePid;
          v181 = 2082;
          v182 = "assert";
          v183 = 2081;
          v184 = "!fUserEventAgentConnection";
          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
          if (v186 < 0)
            operator delete(*(void **)v185);
          if (SHIBYTE(v188) < 0)
            operator delete(*(void **)v187);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v123 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v124 = v187;
          CLConnection::getName(*(CLConnection **)(a1 + 936));
          if (v188 < 0)
            v124 = *(uint8_t **)v187;
          CLConnection::getName(a2);
          v125 = v186;
          v126 = *(_BYTE **)v185;
          v127 = CLConnection::getRemotePid(a2);
          v128 = v185;
          *(_DWORD *)buf = 68290563;
          if (v125 < 0)
            v128 = v126;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v124;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v128;
          v177 = 2114;
          v178 = Dictionary;
          v179 = 1026;
          v180 = v127;
          v181 = 2082;
          v182 = "assert";
          v183 = 2081;
          v184 = "!fUserEventAgentConnection";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v123, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Connection to User Event Agent already exists.", "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
          if (v186 < 0)
            operator delete(*(void **)v185);
          if (SHIBYTE(v188) < 0)
            operator delete(*(void **)v187);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v129 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          v130 = *(CLConnection **)(a1 + 936);
          v131 = v187;
          CLConnection::getName(v130);
          if (v188 < 0)
            v131 = *(uint8_t **)v187;
          CLConnection::getName(a2);
          v132 = v186;
          v133 = *(_BYTE **)v185;
          v134 = CLConnection::getRemotePid(a2);
          v135 = v185;
          *(_DWORD *)buf = 68290563;
          if (v132 < 0)
            v135 = v133;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v131;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v135;
          v177 = 2114;
          v178 = Dictionary;
          v179 = 1026;
          v180 = v134;
          v181 = 2082;
          v182 = "assert";
          v183 = 2081;
          v184 = "!fUserEventAgentConnection";
          _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Connection to User Event Agent already exists.\", \"ExistingConnection\":%{public, location:escape_only}s, \"IncomingConnection\":%{public, location:escape_only}s, \"Payload\":%{public, location:escape_only}@, \"PID\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x4Au);
          if (v186 < 0)
            operator delete(*(void **)v185);
          if (SHIBYTE(v188) < 0)
            operator delete(*(void **)v187);
        }
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", 869, "handleNewConnectionWithFirstMsg");
      }
      else
      {
        if (sub_1007B7A68("Health", &v173))
        {
          v88 = a3[1];
          v153 = *a3;
          v154 = v88;
          if (v88)
          {
            v89 = (unint64_t *)((char *)v88 + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          sub_1007B9E5C();
        }
        if (sub_1007B7A68("SpringTracking", &v173))
        {
          v91 = a3[1];
          v151 = *a3;
          v152 = v91;
          if (v91)
          {
            v92 = (unint64_t *)((char *)v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          sub_1007BA1B8();
        }
        if (sub_1007B7A68("DurianManagement", &v173))
        {
          v94 = a3[1];
          v149 = *a3;
          v150 = v94;
          if (v94)
          {
            v95 = (unint64_t *)((char *)v94 + 8);
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
          }
          sub_1007BA514();
        }
        if (sub_1007B7A68("DistributedSensing", &v173))
        {
          v97 = a3[1];
          v147 = *a3;
          v148 = v97;
          if (v97)
          {
            v98 = (unint64_t *)((char *)v97 + 8);
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          sub_1007BA870();
        }
        if (sub_1007B7A68("kCLConnectionMessageAudioAccessoryUsageMetricsSubscription", &v173))
        {
          v100 = a3[1];
          v145 = *a3;
          v146 = v100;
          if (v100)
          {
            v101 = (unint64_t *)((char *)v100 + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          sub_1007BABCC();
        }
        if (sub_1007B7A68("WaterSubmersion", &v173))
        {
          v103 = a3[1];
          v143 = *a3;
          v144 = v103;
          if (v103)
          {
            v104 = (unint64_t *)((char *)v103 + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          sub_1007BAF28();
        }
        if (!sub_1007B7A68("CoreLocationAgent", &v173))
        {
          if (sub_1007B7A68("PedestrianFence", &v173))
          {
            v106 = a3[1];
            if (v106)
            {
              v107 = (unint64_t *)((char *)v106 + 8);
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            sub_1007BB8E4();
          }
          v109 = a3[1];
          if (v109)
          {
            v110 = (unint64_t *)((char *)v109 + 8);
            do
              v111 = __ldxr(v110);
            while (__stxr(v111 + 1, v110));
          }
          sub_1001B899C();
        }
        CLConnection::getUserName(a2);
        if (a1 + 872 == sub_10019C4C0(a1 + 864, (const void **)v187))
        {
          v140[0] = _NSConcreteStackBlock;
          v140[1] = 3321888768;
          v140[2] = sub_1007BB284;
          v140[3] = &unk_102153B08;
          v140[4] = a1;
          if (SHIBYTE(v188) < 0)
          {
            sub_100115CE4(&v141, *(void **)v187, *(unint64_t *)&v187[8]);
          }
          else
          {
            v141 = *(_OWORD *)v187;
            v142 = v188;
          }
          CLConnection::setDefaultMessageHandler(a2, v140);
          if (SHIBYTE(v188) < 0)
          {
            sub_100115CE4(buf, *(void **)v187, *(unint64_t *)&v187[8]);
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)v187;
            *(_QWORD *)&buf[16] = v188;
          }
          *(_QWORD *)&buf[24] = a2;
          sub_1007F7E20((uint64_t **)(a1 + 864), (const void **)buf, (uint64_t)buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          CLConnection::start(a2);
          if (qword_1022A01D0 == -1)
            goto LABEL_254;
          goto LABEL_311;
        }
        sub_10190838C();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", 903, "handleNewConnectionWithFirstMsg");
      }
      __break(1u);
LABEL_311:
      dispatch_once(&qword_1022A01D0, &stru_102154528);
LABEL_254:
      v112 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v113 = SHIBYTE(v188);
        v114 = *(uint8_t **)v187;
        CLConnection::getName(a2);
        v115 = v187;
        if (v113 < 0)
          v115 = v114;
        if (v186 >= 0)
          v116 = v185;
        else
          v116 = *(_BYTE **)v185;
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v115;
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = v116;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CoreLocationAgent connected\", \"User\":%{public, location:escape_only}s, \"Connection\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v186 < 0)
          operator delete(*(void **)v185);
      }
      if (SHIBYTE(v142) < 0)
        operator delete((void *)v141);
      if (SHIBYTE(v188) < 0)
        operator delete(*(void **)v187);
      goto LABEL_183;
    }
    if (v173.__r_.__value_.__r.__words[0] == 0x6E6F697461636F4CLL
      && v173.__r_.__value_.__l.__size_ == 0x4C72657461647055
      && *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 3) == 0x6576694C72657461)
    {
      goto LABEL_131;
    }
  }
  if (HIBYTE(v173.__r_.__value_.__r.__words[2]) != 14)
  {
    if (HIBYTE(v173.__r_.__value_.__r.__words[2]) == 19)
    {
      v40 = v173.__r_.__value_.__r.__words[0] == 0x756363416C6C7546
         && v173.__r_.__value_.__l.__size_ == 0x7373655379636172;
      if (v40 && *(std::string::size_type *)((char *)&v173.__r_.__value_.__r.__words[1] + 3) == 0x6E6F697373655379)
        goto LABEL_131;
    }
    goto LABEL_126;
  }
LABEL_121:
  v27 = &v173;
LABEL_122:
  v42 = v27->__r_.__value_.__r.__words[0];
  v43 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
  if (v42 != 0x5365636976726553 || v43 != 0x6E6F697373655365)
    goto LABEL_126;
LABEL_131:
  v48 = *a3;
  v49 = a3[1];
  v172[0] = v48;
  v172[1] = v49;
  if (v49)
  {
    v50 = (unint64_t *)((char *)v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  sub_1007B7AF4(a1, a2, v172, &v173);
  if (v49)
  {
    v52 = (unint64_t *)((char *)v49 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v49 + 16))(v49);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v49);
    }
  }
LABEL_183:
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if ((char)v175 < 0)
    operator delete(__p[0]);
}

void sub_1000B90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;

  if (a64 < 0)
    operator delete(__p);
  if (a70 < 0)
    operator delete(a65);
  _Unwind_Resume(a1);
}

void sub_1000B92B8()
{
  operator new();
}

void sub_1000B952C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B9570(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t **sub_1000B9578(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

CLClientManagerAuthorizationContext *sub_1000B9630(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v5;

  v5 = sub_100196E90(a1, a2);
  if (sub_1001A4DD4(a1, (uint64_t)v5))
    return sub_10019EE88(a1, (uint64_t)v5, a3);
  else
    return (CLClientManagerAuthorizationContext *)objc_msgSend(*(id *)(a1 + 1080), "objectForKeyedSubscript:", objc_msgSend(v5, "legacyClientKey"));
}

uint64_t sub_1000B96A4(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v3, "bundleId") || objc_msgSend(v3, "bundlePath"))
  {
    if (objc_msgSend(v3, "isValidCKP"))
      return (uint64_t)objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("BackgroundIndicatorEnabled"), v3, 1);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Error no bundle ID or bundle path found - enabling background indicator %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = 138543362;
      v9 = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Error no bundle ID or bundle path found - enabling background indicator %{public}@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::getClientBackgroundIndicatorEnabled(CLClientKeyPath *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 1;
}

void sub_1000B98C8(uint64_t a1, char a2)
{
  _QWORD *v3;

  *(_BYTE *)(a1 + 120) = a2;
  v3 = sub_10011AC50(a1);
  if (v3)
    sub_1001BAB40((uint64_t)v3, *(unsigned __int8 *)(a1 + 120));
}

void sub_1000B9900()
{
  operator new();
}

void sub_1000B9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000B9C5C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_10218BB10;
  a1[3] = objc_alloc_init(CLDaemonInUseAssertionAdapter);
  a1[4] = 0;
  return a1;
}

void sub_1000B9C9C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10008ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_1000B9CB4(_QWORD *a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  CLConnectionMessage *v11;
  CLConnectionMessage *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  CLConnectionMessage *v17[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  _QWORD *v26;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 35)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = (const char *)v7;
        else
          v8 = *(const char **)v7;
        *(_DWORD *)buf = 68289282;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2082;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 35)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "InUseAssertion/kCLConnectionMessage", 0x23uLL))
    goto LABEL_7;
  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: InUseAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2082;
    v24 = "activity";
    v25 = 2050;
    v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"InUseAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v11 = *a2;
  v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)((char *)v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_1000B9F5C(a1, v17);
  if (v12)
  {
    v15 = (unint64_t *)((char *)v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1000B9F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_100261F44((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1000B9F5C(_QWORD *a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  NSObject *v5;
  CLConnectionMessage *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  uint8_t *v10;
  char *v11;
  char v12;
  char v13;
  void *Dictionary;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  __int128 v20;
  NSObject *v21;
  _BYTE *v22;
  uint64_t v23;
  uint8_t *v24;
  NSObject *v25;
  _BYTE *v26;
  uint64_t v27;
  uint8_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  id v34;
  _BYTE *v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  std::string *v39;
  char *v40;
  NSObject *v41;
  unsigned int v42;
  NSObject *v43;
  unsigned int v44;
  NSObject *v45;
  _BYTE *v46;
  uint64_t v47;
  std::string *v48;
  _QWORD v49[5];
  os_activity_scope_state_s state;
  int v51;
  std::string *v52;
  std::string v53;
  uint8_t v54[16];
  _QWORD v55[4];
  __int128 v56;
  _QWORD v57[5];
  __int128 v58;
  _OWORD v59[4];
  _BYTE buf[40];
  CLConnectionMessage *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int16 v74;
  char v75;

  v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonInUseAssertion::handleMessageInUseAssertion", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 2050;
    v61 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonInUseAssertion::handleMessageInUseAssertion\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"message\":\"%{public}p\"}", buf, 0x30u);
  }
  if (a1[4])
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
      v8 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v54 = 136446210;
      *(_QWORD *)&v54[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#warning InUseAssertion already taken by %{public}s", v54, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v9 = qword_1022A01C8;
      (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 24))(v54, a1);
      if (v55[0] >= 0)
        v10 = v54;
      else
        v10 = *(uint8_t **)v54;
      LODWORD(v53.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 0, "#warning InUseAssertion already taken by %{public}s", &v53, 12);
      if (SHIBYTE(v55[0]) < 0)
        operator delete(*(void **)v54);
LABEL_22:
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
LABEL_68:
      if (v11 != buf)
        free(v11);
      goto LABEL_159;
    }
    goto LABEL_159;
  }
  sub_1015A2E04(buf, "com.apple.locationd.usage_oracle");
  v12 = sub_1000BAFFC(a1, (uint64_t *)buf);
  v13 = v12;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v13 & 1) != 0)
      goto LABEL_25;
  }
  else if ((v12 & 1) != 0)
  {
LABEL_25:
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v15 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
    v16 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
    v17 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
    v18 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAssertionLevelKey"));
    if (!v15 || !v16 || !v17 || (v19 = v18) == 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v25 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
        v26 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v54 = 136446210;
        *(_QWORD *)&v54[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument", v54, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10218BB70);
        v27 = qword_1022A01C8;
        (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 24))(v54, a1);
        if (v55[0] >= 0)
          v28 = v54;
        else
          v28 = *(uint8_t **)v54;
        LODWORD(v53.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 17, "#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument", &v53, 12);
        if (SHIBYTE(v55[0]) < 0)
          operator delete(*(void **)v54);
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
        goto LABEL_68;
      }
      goto LABEL_159;
    }
    memset(v57, 0, 35);
    v56 = 0u;
    *(_OWORD *)v54 = 0u;
    memset(v55, 0, sizeof(v55));
    v58 = 0u;
    memset(v59, 0, 59);
    if (objc_msgSend(v15, "length"))
    {
      sub_1015A2E04(&v53, (char *)objc_msgSend(v15, "UTF8String"));
      sub_1001AE67C(&v53, (uint64_t)buf);
      if (SHIBYTE(v55[0]) < 0)
        operator delete(*(void **)v54);
      v20 = *(_OWORD *)buf;
    }
    else
    {
      sub_1015A2E04(&v53, (char *)objc_msgSend(v16, "UTF8String"));
      sub_1001B8590(&v53, (uint64_t)buf);
      if (SHIBYTE(v55[0]) < 0)
        operator delete(*(void **)v54);
      v20 = *(_OWORD *)buf;
    }
    *(_OWORD *)v54 = v20;
    v55[0] = *(_QWORD *)&buf[16];
    buf[23] = 0;
    buf[0] = 0;
    if (SHIBYTE(v55[3]) < 0)
      operator delete((void *)v55[1]);
    *(_OWORD *)&v55[1] = *(_OWORD *)&buf[24];
    v55[3] = v61;
    HIBYTE(v61) = 0;
    buf[24] = 0;
    if (SHIBYTE(v57[0]) < 0)
      operator delete((void *)v56);
    v56 = v62;
    v57[0] = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    if (SHIBYTE(v57[3]) < 0)
      operator delete((void *)v57[1]);
    *(_OWORD *)&v57[1] = v64;
    v57[3] = v65;
    HIBYTE(v65) = 0;
    LOBYTE(v64) = 0;
    LOWORD(v57[4]) = v66;
    BYTE2(v57[4]) = v67;
    if (SBYTE7(v59[0]) < 0)
      operator delete((void *)v58);
    v58 = v68;
    *(_QWORD *)&v59[0] = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    if (SHIBYTE(v59[1]) < 0)
      operator delete(*((void **)&v59[0] + 1));
    v29 = 0;
    *(_OWORD *)((char *)v59 + 8) = v70;
    *((_QWORD *)&v59[1] + 1) = v71;
    HIBYTE(v71) = 0;
    LOBYTE(v70) = 0;
    if (SBYTE7(v59[3]) < 0)
    {
      operator delete(*(void **)&v59[2]);
      v29 = HIBYTE(v71);
    }
    v59[2] = v72;
    *(_QWORD *)&v59[3] = v73;
    HIBYTE(v73) = 0;
    LOBYTE(v72) = 0;
    WORD4(v59[3]) = v74;
    BYTE10(v59[3]) = v75;
    if (v29 < 0)
      operator delete((void *)v70);
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if (SHIBYTE(v63) < 0)
      operator delete((void *)v62);
    if (SHIBYTE(v61) < 0)
      operator delete(*(void **)&buf[24]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    sub_1001A8D50((uint64_t)v54);
    v30 = BYTE7(v59[0]);
    if (SBYTE7(v59[0]) < 0)
      v30 = *((_QWORD *)&v58 + 1);
    if (v30)
      goto LABEL_171;
    v31 = HIBYTE(v57[0]);
    if (v57[0] < 0)
      v31 = *((_QWORD *)&v56 + 1);
    if (v31)
    {
LABEL_171:
      if (objc_msgSend(v17, "length"))
      {
        v32 = objc_msgSend(v19, "intValue");
        if (v32 >= 3)
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10218BB70);
          v41 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            v42 = objc_msgSend(v19, "intValue");
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v42;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Received invalid assertion level\", \"assertionLevel\":%{public}d}", buf, 0x18u);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10218BB70);
          }
          v43 = qword_1022A01C8;
          if (os_signpost_enabled((os_log_t)qword_1022A01C8))
          {
            v44 = objc_msgSend(v19, "intValue");
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v44;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Received invalid assertion level", "{\"msg%{public}.0s\":\"#CLIUA Received invalid assertion level\", \"assertionLevel\":%{public}d}", buf, 0x18u);
          }
        }
        else
        {
          v33 = dword_101C29F08[v32];
          v34 = objc_msgSend(objc_msgSend((id)a1[2], "vendor"), "proxyForService:", CFSTR("CLClientManager"));
          objc_msgSend(v34, "registerDelegate:inSilo:", a1[3], objc_msgSend((id)a1[2], "silo"));
          sub_1001A885C((uint64_t)v54, (uint64_t)buf);
          if (buf[23] >= 0)
            v35 = buf;
          else
            v35 = *(_BYTE **)buf;
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472;
          v49[2] = sub_100E4939C;
          v49[3] = &unk_10218BB38;
          v49[4] = a1;
          objc_msgSend(v34, "takeInUseAssertionForClientKey:reason:assertionLevel:withReply:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35), +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", objc_msgSend(v17, "UTF8String")), v33, v49);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
LABEL_145:
        if (SBYTE7(v59[3]) < 0)
          operator delete(*(void **)&v59[2]);
        if (SHIBYTE(v59[1]) < 0)
          operator delete(*((void **)&v59[0] + 1));
        if (SBYTE7(v59[0]) < 0)
          operator delete((void *)v58);
        if (SHIBYTE(v57[3]) < 0)
          operator delete((void *)v57[1]);
        if (SHIBYTE(v57[0]) < 0)
          operator delete((void *)v56);
        if (SHIBYTE(v55[3]) < 0)
          operator delete((void *)v55[1]);
        if (SHIBYTE(v55[0]) < 0)
          operator delete(*(void **)v54);
        goto LABEL_159;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v36 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
        v37 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v53.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s", (uint8_t *)&v53, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_145;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v38 = qword_1022A01C8;
      (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 24))(&v53, a1);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v53;
      else
        v39 = (std::string *)v53.__r_.__value_.__r.__words[0];
      v51 = 136446210;
      v52 = v39;
      v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 17, "#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s", &v51, 12);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v45 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
        v46 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v53.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s", (uint8_t *)&v53, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_145;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
      v47 = qword_1022A01C8;
      (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 24))(&v53, a1);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v53;
      else
        v48 = (std::string *)v53.__r_.__value_.__r.__words[0];
      v51 = 136446210;
      v52 = v48;
      v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 17, "#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s", &v51, 12);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
    }
    sub_100512490("Generic", 1, 0, 0, "void CLDaemonInUseAssertion::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v40);
    if (v40 != buf)
      free(v40);
    goto LABEL_145;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  v21 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(buf, a1);
    v22 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v54 = 136446210;
    *(_QWORD *)&v54[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s", v54, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    v23 = qword_1022A01C8;
    (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a1 + 24))(v54, a1);
    if (v55[0] >= 0)
      v24 = v54;
    else
      v24 = *(uint8_t **)v54;
    LODWORD(v53.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 0, "#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s", &v53, 12);
    if (SHIBYTE(v55[0]) < 0)
      operator delete(*(void **)v54);
    goto LABEL_22;
  }
LABEL_159:
  os_activity_scope_leave(&state);
}

void sub_1000BAF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  sub_100010174((uint64_t)&a27);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BAFF4(uint64_t a1)
{
  return CLConnection::getName(*(CLConnection **)(a1 + 8));
}

uint64_t sub_1000BAFFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  _BYTE *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v10;
  void **v11;
  const char *v12;
  uint64_t *v13;
  char *v14;
  const char *v15;
  void *v16[2];
  char v17;
  _BYTE __p[12];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t *v22;
  uint8_t buf[4];
  _BYTE *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t *v28;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v6 = *(_BYTE **)__p;
    v7 = "not entitled";
    if (v21 >= 0)
      v6 = __p;
    if ((_DWORD)isEntitled)
      v7 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315650;
    v24 = v6;
    v25 = 2080;
    v26 = v7;
    v27 = 2080;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v21) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    v10 = qword_1022A01C8;
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(v16, a1);
    v11 = (void **)v16[0];
    v12 = "not entitled";
    if (v17 >= 0)
      v11 = v16;
    if ((_DWORD)isEntitled)
      v12 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v11;
    v19 = 2080;
    v20 = v12;
    v21 = 2080;
    v22 = v13;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "%s is %s for %s", __p, 32, v15);
    if (v17 < 0)
      operator delete(v16[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonInUseAssertion::isEntitled(const std::string &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  return isEntitled;
}

uint64_t sub_1000BB2F0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000BBA38(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

BOOL sub_1000BB370(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  uint8_t buf[32];
  __int128 v44;
  void *v45[2];
  void *__p[2];
  _BYTE v47[19];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[4];
  char v52;
  int v53;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v38 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v40 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v39;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        memset(v47, 0, sizeof(v47));
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)__p = 0u;
        v44 = 0u;
        memset(buf, 0, sizeof(buf));
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        memset(v51, 0, 27);
        v52 = 0;
        v53 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1007F9860();
        }
        if (SHIBYTE(v51[2]) < 0)
          operator delete(v51[0]);
        if (SHIBYTE(v50) < 0)
          operator delete(*((void **)&v49 + 1));
        if (SBYTE7(v49) < 0)
          operator delete((void *)v48);
        if ((v47[15] & 0x80000000) != 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v45[0]);
        if (SHIBYTE(v44) < 0)
          operator delete(*(void **)&buf[24]);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v40 = a1 + 64;
        v29 = byte_1022A4590;
        HIDWORD(v37) = v16;
        *(_QWORD *)buf = (char *)&v37 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v37) = *a3;
        *(_QWORD *)buf = (char *)&v37 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v37) = *a3;
        *(_QWORD *)buf = (char *)&v37 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v39;
        v32 = sub_1000BC378(v31 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = v39;
    LODWORD(v37) = 18;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v40,
                    v37);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
    return 0;
  }
  return result;
}

void sub_1000BB884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = atomic_load((unsigned __int8 *)&qword_1022A4588);
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v8 = a3;
    v7 = a2;
    v5 = __cxa_guard_acquire(&qword_1022A4588);
    a2 = v7;
    a3 = v8;
    v6 = v5;
    a1 = v9;
    if (v6)
    {
      qword_1022A4570 = 0;
      *(_QWORD *)algn_1022A4578 = 0;
      qword_1022A4580 = 0;
      __cxa_atexit((void (*)(void *))sub_1005CB0EC, &qword_1022A4570, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A4588);
      a1 = v9;
      a2 = v7;
      a3 = v8;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &qword_1022A4570);
}

uint64_t sub_1000BB94C(uint64_t a1, int *a2, std::string *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  std::string::value_type v13;
  __int16 v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  std::string::operator=(this, *(const std::string **)(v8 + 64));
  std::string::operator=(this + 1, (const std::string *)(v12 + 24));
  std::string::operator=(this + 2, (const std::string *)(v12 + 48));
  std::string::operator=(this + 3, (const std::string *)(v12 + 72));
  v13 = *(_BYTE *)(v12 + 98);
  LOWORD(this[4].__r_.__value_.__l.__data_) = *(_WORD *)(v12 + 96);
  this[4].__r_.__value_.__s.__data_[2] = v13;
  std::string::operator=((std::string *)((char *)this + 104), (const std::string *)(v12 + 104));
  std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(v12 + 128));
  std::string::operator=((std::string *)((char *)this + 152), (const std::string *)(v12 + 152));
  v14 = *(_WORD *)(v12 + 176);
  this[7].__r_.__value_.__s.__data_[10] = *(_BYTE *)(v12 + 178);
  LOWORD(this[7].__r_.__value_.__r.__words[1]) = v14;
  this[7].__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 184);
  return 1;
}

id sub_1000BBA38(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1007F94B4(a1);
  else
    return 0;
}

void sub_1000BBA84(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1000BBF80(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1000BBEA4(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021545E8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021545E8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

id sub_1000BBE58(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1000BBF80(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

_BYTE *sub_1000BBEA4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1000BBF80(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1000BC378(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1000BBF80(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1000BBFCC(a1);
  else
    return 0;
}

id sub_1000BBFCC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC20DALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC20DALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLClientManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

uint64_t **sub_1000BC378(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1000BC43C(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  std::string::size_type size;
  std::string *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  NSObject *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string v35;
  std::string v36;
  std::string __p;
  std::string v38;
  std::string v39;
  _QWORD v40[2];

  if (*(_BYTE *)(a1 + 1664))
  {
    sub_1001E4804(&v39);
    v2 = v39.__r_.__value_.__r.__words[0];
    sub_1000BE558((uint64_t)&v36);
    sub_1017FAFF4(a1, &v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v35;
    else
      v3 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    v5 = std::string::append(&v36, (const std::string::value_type *)v3, size);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_1005F0F40(v2, "GpsAssistanceFileDstUrl", &__p, (uint64_t)&v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v7 = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_)
    {
      v8 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    memset(&v36, 0, sizeof(v36));
    operator new();
  }
  memset(&v36, 0, sizeof(v36));
  sub_1001E4804(&v38);
  if (sub_1000BCB64((uint64_t)v38.__r_.__value_.__l.__data_, "GpsAssistanceFileSrcUrl", &v36))
  {
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v10 = v36.__r_.__value_.__l.__size_;
    v11 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v10)
    {
LABEL_39:
      memset(&v35, 0, sizeof(v35));
      sub_1001E4804(&v38);
      if (sub_1000BCB64((uint64_t)v38.__r_.__value_.__l.__data_, "GpsAssistanceFileDstUrl", &v35))
      {
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          v17 = v35.__r_.__value_.__l.__size_;
        v18 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
        if (v38.__r_.__value_.__l.__size_)
        {
          v19 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (v17)
        {
LABEL_67:
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v29 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v30 = &v36;
            if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
            v31 = &v35;
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v31 = (std::string *)v35.__r_.__value_.__r.__words[0];
            LODWORD(v38.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
            WORD2(v38.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#gpsd,#ee,AssistanceFileSourceUrl,%s,AssistanceFileDestUrl,%s", (uint8_t *)&v38, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&v38, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v32 = &v36;
            if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = (std::string *)v36.__r_.__value_.__r.__words[0];
            v33 = &v35;
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v33 = (std::string *)v35.__r_.__value_.__r.__words[0];
            LODWORD(v39.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
            WORD2(v39.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
            v34 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v38, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,#ee,AssistanceFileSourceUrl,%s,AssistanceFileDestUrl,%s", (const char *)&v39, 22);
            sub_100512490("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getAssistanceFileInfo() const", "%s\n", (const char *)v34);
            if (v34 != &v38)
              free(v34);
          }
          operator new();
        }
      }
      else
      {
        v21 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
        if (v38.__r_.__value_.__l.__size_)
        {
          v22 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      sub_1000BE558((uint64_t)&v38);
      sub_1000BE2B0(a1, &v39);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v39;
      else
        v24 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v25 = v39.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v38, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[0];
      v40[0] = v26->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
      v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v35.__r_.__value_.__r.__words[0] = v27;
      v35.__r_.__value_.__l.__size_ = v40[0];
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v40 + 7);
      *((_BYTE *)&v35.__r_.__value_.__s + 23) = v28;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      goto LABEL_67;
    }
  }
  else
  {
    v14 = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  sub_1000BE440(a1, (uint64_t)&v38);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v36 = v38;
  goto LABEL_39;
}

void sub_1000BCA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000BCB64(uint64_t a1, const char *a2, std::string *a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1000BD5F0(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1000BCBD4(uint64_t a1, const __CFDictionary *a2)
{
  int v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  char v7;
  NSObject *v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  void **v12;
  const void *v13;
  size_t v14;
  void *v15;
  void **v16;
  size_t v17;
  NSObject *v18;
  const char *v19;
  void **v20;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v27[2];
  void *v28[2];
  __int128 v29;
  void *v30[2];
  void *__p[2];
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[16];
  _DWORD v36[4];
  void *buf;
  __int16 v38;
  const char *v39;
  __int16 v40;
  _BYTE v41[24];
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;

  sub_1001C1D6C((int)v35, a2);
  v34 = 0;
  v25 = 0;
  v26 = -1;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  LOBYTE(v33) = 0;
  HIDWORD(v33) = -1;
  if (&BKSApplicationStateKey)
  {
    if ((sub_1001C1194((uint64_t)v35, BKSApplicationStateKey, &v25) & 1) != 0)
    {
      switch(v25)
      {
        case 0:
          v3 = 0;
          v34 = 0;
          goto LABEL_33;
        case 1:
          v7 = 0;
          v3 = 1;
          v34 = 1;
          goto LABEL_34;
        case 2:
          v3 = 2;
          goto LABEL_32;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_19;
        case 4:
          v3 = 3;
          goto LABEL_32;
        case 8:
          v3 = 4;
          goto LABEL_32;
        default:
          if (v25 == 16)
          {
            v3 = 5;
            goto LABEL_32;
          }
          if (v25 == 32)
          {
            v3 = 6;
LABEL_32:
            v34 = v3;
            goto LABEL_33;
          }
LABEL_19:
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          v6 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 67240192;
            HIDWORD(buf) = v25;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "unknown application state %{public}d", (uint8_t *)&buf, 8u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_97;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
          v36[0] = 67240192;
          v36[1] = v25;
          v5 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "unknown application state %{public}d", v36, 8);
          sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v5);
          break;
      }
      goto LABEL_14;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "cannot find BKSApplicationStateKey", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      LOWORD(v36[0]) = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "cannot find BKSApplicationStateKey", v36, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v5);
LABEL_14:
      if (v5 != (char *)&buf)
        free(v5);
    }
  }
  else
  {
    v3 = 0;
LABEL_33:
    v7 = 1;
LABEL_34:
    if (&BKSApplicationStateProcessIDKey
      && (sub_1001C1194((uint64_t)v35, BKSApplicationStateProcessIDKey, &v26) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "failed to retrieve pid", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
        LOWORD(v36[0]) = 0;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "failed to retrieve pid", v36, 2);
        sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v22);
        if (v22 != (char *)&buf)
          free(v22);
      }
      v26 = -1;
    }
    if (&BKSApplicationStateDisplayIDKey
      && !sub_1000BD5F0((uint64_t)v35, BKSApplicationStateDisplayIDKey, (std::string *)v27))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "failed to retrieve bundle ID", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
        LOWORD(v36[0]) = 0;
        LODWORD(v24) = 2;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "failed to retrieve bundle ID", v36, v24);
        sub_100512490("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationStateChange(NSDictionary *)", "%s\n", v23);
        if (v23 != (char *)&buf)
          free(v23);
      }
    }
    if (&BKSApplicationStateExitReasonKey)
      v10 = v7;
    else
      v10 = 1;
    if ((v10 & 1) == 0)
    {
      sub_1001C1194((uint64_t)v35, BKSApplicationStateExitReasonKey, (_DWORD *)&v33 + 1);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v11 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(v28[0]) >= 0)
          v12 = v27;
        else
          v12 = (void **)v27[0];
        buf = (void *)68289794;
        v38 = 2082;
        v39 = "";
        v40 = 1026;
        *(_DWORD *)v41 = v26;
        *(_WORD *)&v41[4] = 2082;
        *(_QWORD *)&v41[6] = v12;
        *(_WORD *)&v41[14] = 1026;
        *(_DWORD *)&v41[16] = HIDWORD(v33);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic AppMonitor received Termination\", \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s, \"exitReason\":%{public}d}", (uint8_t *)&buf, 0x28u);
      }
    }
    sub_1000BD828((_QWORD *)(a1 + 232), (unsigned __int8 *)v27);
    if ((v3 - 1) >= 3)
    {
      if (v3 == 4)
      {
        *(_DWORD *)(a1 + 120) = v26;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)v27);
        std::string::operator=((std::string *)(a1 + 152), (const std::string *)&v28[1]);
        std::string::operator=((std::string *)(a1 + 176), (const std::string *)v30);
        std::string::operator=((std::string *)(a1 + 200), (const std::string *)&__p[1]);
        *(_QWORD *)(a1 + 224) = v33;
        LODWORD(buf) = 9;
        if (sub_1001B7864(a1, (int *)&buf, 1))
          objc_msgSend(*(id *)(a1 + 112), "setNextFireDelay:", 5.0);
        sub_101149B10(&buf, (__int128 *)v27, (uint64_t)&v26);
        sub_1000BDFBC(a1 + 232, (unsigned __int8 *)&buf, (__int128 *)&buf);
        if (v48 < 0)
          operator delete(v47);
        if (v46 < 0)
          operator delete(v45);
        if (v44 < 0)
          operator delete(v43);
        if (v42 < 0)
          operator delete(*(void **)&v41[12]);
        if ((v41[3] & 0x80000000) != 0)
          operator delete(buf);
      }
    }
    else
    {
      if (*(char *)(a1 + 151) < 0)
      {
        v13 = *(const void **)(a1 + 128);
        v14 = *(_QWORD *)(a1 + 136);
      }
      else
      {
        v13 = (const void *)(a1 + 128);
        v14 = *(unsigned __int8 *)(a1 + 151);
      }
      if (SHIBYTE(v28[0]) >= 0)
        v15 = (void *)HIBYTE(v28[0]);
      else
        v15 = v27[1];
      if (SHIBYTE(v28[0]) >= 0)
        v16 = v27;
      else
        v16 = (void **)v27[0];
      if ((unint64_t)v15 >= v14)
        v17 = v14;
      else
        v17 = (size_t)v15;
      if (!memcmp(v13, v16, v17) && v15 == (void *)v14)
      {
        sub_10114697C(a1 + 120);
        objc_msgSend(*(id *)(a1 + 112), "setNextFireDelay:", 1.79769313e308);
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v19 = sub_1000BD874(&v34);
      if (SHIBYTE(v28[0]) >= 0)
        v20 = v27;
      else
        v20 = (void **)v27[0];
      buf = (void *)68289794;
      v38 = 2082;
      v39 = "";
      v40 = 2082;
      *(_QWORD *)v41 = v19;
      *(_WORD *)&v41[8] = 1026;
      *(_DWORD *)&v41[10] = v26;
      *(_WORD *)&v41[14] = 2082;
      *(_QWORD *)&v41[16] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Post Application State Change Notification\", \"notification\":%{public, location:escape_only}s, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x2Cu);
    }
    (*(void (**)(uint64_t, int *, int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v34, &v26, 0, 0xFFFFFFFFLL, 0);
  }
LABEL_97:
  if (SHIBYTE(v32) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[1]);
  if (SHIBYTE(v28[0]) < 0)
    operator delete(v27[0]);
  return sub_10011A5A8(v35);
}

void sub_1000BD5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10079C284((uint64_t)&a12);
  sub_10011A5A8(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_1000BD5F0(uint64_t a1, uint64_t a2, std::string *a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_1001C0048((const __CFString *)cf, a3);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, std::string &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

unsigned __int8 *sub_1000BD828(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = sub_1001987C8(a1, a2);
  if (result)
  {
    sub_1000592D8(a1, result, (uint64_t)v4);
    sub_101149E14((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

const char *sub_1000BD874(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 0xB)
    return "?";
  else
    return (&off_1021A2DD8)[v1];
}

void sub_1000BD89C(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A2C20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_101149C70(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1000BDF04();
    os_activity_scope_leave(&state);
  }
}

void sub_1000BDEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1000BDF04()
{
  operator new();
}

void sub_1000BDF98()
{
  operator delete();
}

unsigned __int8 *sub_1000BDFBC(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1000BE23C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101149E14((uint64_t)v25, 0);
  return i;
}

void sub_1000BE224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101149E14((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1000BE23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  char *result;

  v7 = a1 + 16;
  v8 = operator new(0x98uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = sub_101149E58((char *)v8 + 16, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1000BE298(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_101149E14(v1, 0);
  _Unwind_Resume(a1);
}

std::string *sub_1000BE2B0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string *result;
  const std::string::value_type *v6;
  std::string::size_type v7;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(_BYTE *)(a1 + 1720))
  {
    if (sub_10075FA4C())
      v4 = "GPS_GLO_QZS_GAL_SBA_BDS.xof";
    else
      v4 = "GPS_GLO_QZS_GAL_SBA.xof";
  }
  else if (*(_BYTE *)(a1 + 1721))
  {
    v4 = "gnss3.xof";
  }
  else
  {
    v4 = "lto2.dat";
  }
  std::string::assign(a2, v4);
  result = (std::string *)sub_1000BE374(a1);
  if ((_DWORD)result)
  {
    if (byte_10230FB17 >= 0)
      v6 = (const std::string::value_type *)&qword_10230FB00;
    else
      v6 = (const std::string::value_type *)qword_10230FB00;
    if (byte_10230FB17 >= 0)
      v7 = byte_10230FB17;
    else
      v7 = qword_10230FB08;
    return std::string::append(a2, v6, v7);
  }
  return result;
}

void sub_1000BE358(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000BE374(uint64_t a1)
{
  _BOOL4 v1;
  int v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  BOOL v10;

  if (*(_BYTE *)(a1 + 1720))
    v1 = 1;
  else
    v1 = *(_BYTE *)(a1 + 1721) != 0;
  sub_1001E4804(&v8);
  v10 = 0;
  v2 = sub_1001E4874(v8, "GpsAssistanceFileLZMA", &v10);
  v3 = v10;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v2)
    return v3;
  else
    return v1;
}

void sub_1000BE42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000BE440(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string v5;

  if (*(_BYTE *)(a1 + 1720) || *(_BYTE *)(a1 + 1721))
  {
    sub_1000BE2B0(a1, &v5);
    v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/xof/");
  }
  else if (sub_1000BE610())
  {
    sub_1000BE2B0(a1, &v5);
    v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/lto/7day/v7/latest/");
  }
  else
  {
    sub_1000BE2B0(a1, &v5);
    v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/lto/7day/v5/latest/");
  }
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1000BE530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1000BE558@<X0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)sub_1001FD94C();
  return sub_1000B7884(v2, a1);
}

char *sub_1000BE57C(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_1000BE5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000BE610()
{
  _BOOL8 result;

  result = sub_1000FDBD0();
  if (result)
    return !sub_1000FDBFC();
  return result;
}

id sub_1000BE630(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1000C0088(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1000BE67C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[48], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 12))(a4, a1, a2, a3);
}

uint64_t sub_1000BE6CC(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 | 4) == 7)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  return result;
}

double sub_1000BE6F0(uint64_t a1, __int128 *a2)
{
  double result;
  _BYTE v4[64];

  if (sub_1000BE7C4(a1 + 128, a2, (uint64_t)v4))
    *(_QWORD *)&result = sub_1000BE730((_QWORD *)(a1 + 24), (uint64_t)v4).n128_u64[0];
  return result;
}

__n128 sub_1000BE730(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D0BF4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_1000BE7C4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  BOOL v17;
  float v18;
  float v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  float v67;
  float v68;
  __int16 v69;
  uint64_t *v70;
  uint64_t v71;
  float v72;
  uint64_t *v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  float v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  float v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  float v140;
  double v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float *v156;
  NSObject *v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  float v162;
  float v163;
  double v164;
  BOOL v165;
  int v166;
  uint64_t v167;
  double v168;
  int v169;
  BOOL v170;
  double v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  double v175;
  NSObject *v176;
  int v177;
  uint64_t v178;
  float *v179;
  double v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  int v185;
  NSObject *v186;
  int v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  int v192;
  uint64_t v193;
  float *v194;
  double v195;
  double v196;
  uint64_t v197;
  double v198;
  double v199;
  int v200;
  char *v201;
  int v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  int v206;
  int v207;
  char *v208;
  double v209;
  double v210;
  double v211;
  uint64_t *v212;
  double v213;
  char *v214;
  double v215;
  __int128 v216;
  uint64_t v217;
  float v218;
  float v219;
  int v220;
  _BYTE v221[44];
  __int16 v222;
  double v223;
  __int16 v224;
  double v225;
  __int16 v226;
  double v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  double v233;
  uint8_t buf[4];
  _BYTE v235[44];
  _BYTE v236[10];
  __int16 v237;
  double v238;
  __int16 v239;
  double v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  double v246;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102191AB8);
  v6 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_DWORD *)a2 + 5);
    v10 = *((_DWORD *)a2 + 10);
    v11 = *((unsigned __int8 *)a2 + 60);
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)v235 = 0;
    *(_WORD *)&v235[4] = 2082;
    *(_QWORD *)&v235[6] = "";
    *(_WORD *)&v235[14] = 2050;
    *(_QWORD *)&v235[16] = v7;
    *(_WORD *)&v235[24] = 1025;
    *(_DWORD *)&v235[26] = v8;
    *(_WORD *)&v235[30] = 1025;
    *(_DWORD *)&v235[32] = v9;
    *(_WORD *)&v235[36] = 1026;
    *(_DWORD *)&v235[38] = v10;
    *(_WORD *)&v235[42] = 1026;
    *(_DWORD *)v236 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Input, Elevation,\", \"startTime\":\"%{public}.2f\", \"elevationAscended\":%{private}d, \"elevationDescended\":%{private}d, \"source\":%{public}d, \"isWorkoutElevationFusion\":%{public}hhd}", buf, 0x34u);
  }
  if (*((_DWORD *)a2 + 10) == 1000)
    return 0;
  v12 = *((double *)a2 + 1);
  v13 = *(double *)(a1 + 8);
  v14 = vabdd_f64(v12, v13);
  v15 = *((unsigned __int8 *)a2 + 60);
  v16 = *(unsigned __int8 *)(a1 + 60);
  if (v14 > 30.0 || (v13 >= 0.0 ? (v17 = v15 == v16) : (v17 = 0), !v17))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191AB8);
    v30 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v31 = *(double *)(a1 + 8);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)v235 = 0;
      *(_WORD *)&v235[4] = 2082;
      *(_QWORD *)&v235[6] = "";
      *(_WORD *)&v235[14] = 1026;
      *(_DWORD *)&v235[16] = v14 > 30.0;
      *(_WORD *)&v235[20] = 1026;
      *(_DWORD *)&v235[22] = v31 < 0.0;
      *(_WORD *)&v235[26] = 1026;
      *(_DWORD *)&v235[28] = v15 == v16;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Input, Elevation, Reset\", \"isTimeout\":%{public}hhd, \"isUninitialized\":%{public}hhd, \"isSameFusionMode\":%{public}hhd}", buf, 0x24u);
    }
    v32 = a2[2];
    v33 = a2[3];
    v34 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v34;
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)(a1 + 48) = v33;
    *(float *)&v32 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    *(_DWORD *)(a1 + 72) = v32;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 8);
    v35 = *(void ***)(a1 + 168);
    v36 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 200) = 0;
    v37 = v36 - (_QWORD)v35;
    if (v37 >= 0x11)
    {
      do
      {
        operator delete(*v35);
        v38 = *(_QWORD *)(a1 + 176);
        v35 = (void **)(*(_QWORD *)(a1 + 168) + 8);
        *(_QWORD *)(a1 + 168) = v35;
        v37 = v38 - (_QWORD)v35;
      }
      while (v37 > 0x10);
    }
    if (v37 >> 3 == 1)
    {
      v39 = 512;
    }
    else
    {
      if (v37 >> 3 != 2)
        goto LABEL_41;
      v39 = 1024;
    }
    *(_QWORD *)(a1 + 192) = v39;
LABEL_41:
    v50 = *(void ***)(a1 + 216);
    v51 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 248) = 0;
    v52 = v51 - (_QWORD)v50;
    if (v52 >= 0x11)
    {
      do
      {
        operator delete(*v50);
        v53 = *(_QWORD *)(a1 + 224);
        v50 = (void **)(*(_QWORD *)(a1 + 216) + 8);
        *(_QWORD *)(a1 + 216) = v50;
        v52 = v53 - (_QWORD)v50;
      }
      while (v52 > 0x10);
    }
    if (v52 >> 3 == 1)
    {
      v54 = 512;
    }
    else
    {
      if (v52 >> 3 != 2)
      {
LABEL_48:
        *(_DWORD *)buf = 0;
        sub_1000BFB54((_QWORD *)(a1 + 160), (float *)buf);
        *(_DWORD *)buf = 0;
        sub_1000BFB54((_QWORD *)(a1 + 208), (float *)buf);
        return 0;
      }
      v54 = 1024;
    }
    *(_QWORD *)(a1 + 240) = v54;
    goto LABEL_48;
  }
  v215 = *(double *)&a3;
  v18 = -(*(float *)(a1 + 72) - (float)((float)*((unsigned int *)a2 + 4) - (float)*((unsigned int *)a2 + 5)) * 0.01);
  v19 = v12 - *(double *)(a1 + 64);
  v218 = v19;
  v219 = v18;
  sub_1000BFB54((_QWORD *)(a1 + 160), &v218);
  sub_1000BFB54((_QWORD *)(a1 + 208), &v219);
  v21 = *(_QWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 200);
  v23 = *(_QWORD *)(a1 + 168);
  v24 = *(float *)(*(_QWORD *)(v23 + (((v22 + v21 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v22 + v21 - 1) & 0x3FF))
      - *(float *)(*(_QWORD *)(v23 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF));
  if (v24 > 120.0)
  {
    *(_QWORD *)&v20 = 134218240;
    v216 = v20;
    v217 = 1;
    while (v22 >= 2)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102191AB8);
      v25 = v24;
      v26 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_QWORD *)(a1 + 200);
        *(_DWORD *)buf = v216;
        *(_QWORD *)v235 = v27;
        *(_WORD *)&v235[8] = 2048;
        *(double *)&v235[10] = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_102191AB8);
        v28 = *(_QWORD *)(a1 + 200);
        v220 = v216;
        *(_QWORD *)v221 = v28;
        *(_WORD *)&v221[8] = 2048;
        *(double *)&v221[10] = v25;
        LODWORD(v209) = 22;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, beyond time window, buffer size, %lu, deltaTime, %f", &v220, v209);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v29);
        if (v29 != (char *)buf)
          free(v29);
      }
      *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), (int64x2_t)xmmword_101B9DFC0);
      sub_1004128C0(a1 + 160, 1);
      *(int64x2_t *)(a1 + 240) = vaddq_s64(*(int64x2_t *)(a1 + 240), (int64x2_t)xmmword_101B9DFC0);
      sub_1004128C0(a1 + 208, 1);
      v22 = *(_QWORD *)(a1 + 200);
      v21 = *(_QWORD *)(a1 + 192);
      v23 = *(_QWORD *)(a1 + 168);
      v24 = *(float *)(*(_QWORD *)(v23 + (((v22 + v21 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v22 + v21 - 1) & 0x3FF))
          - *(float *)(*(_QWORD *)(v23 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF));
      if (v24 <= 120.0)
        goto LABEL_35;
    }
    return 0;
  }
LABEL_35:
  if (v22 < 2)
    return 0;
  v40 = *(_QWORD *)(a1 + 248);
  if (v40 < 2)
    return 0;
  v41 = v22 + v21 - 1;
  v42 = *(_QWORD *)(v23 + ((v41 >> 7) & 0x1FFFFFFFFFFFFF8));
  v43 = *(float **)(a1 + 88);
  v44 = v41 & 0x3FF;
  v45 = *(_QWORD *)(a1 + 240);
  v46 = v40 + v45 - 1;
  v47 = *(_QWORD *)(a1 + 216);
  v48 = *(_QWORD *)(a1 + 176);
  v214 = (char *)(v23 + 8 * (v21 >> 10));
  if (v48 == v23)
    v49 = 0;
  else
    v49 = *(_QWORD *)(v23 + 8 * (v21 >> 10)) + 4 * (v21 & 0x3FF);
  v56 = *(float *)(v42 + 4 * v44);
  v57 = *v43;
  v58 = v43[1];
  *(_QWORD *)&v216 = *(_QWORD *)(a1 + 88);
  v59 = *(_QWORD *)(v47 + ((v46 >> 7) & 0x1FFFFFFFFFFFFF8));
  v60 = v46 & 0x3FF;
  v61 = *(_QWORD *)(a1 + 144);
  v62 = v61 + *(_QWORD *)(a1 + 152);
  v63 = *(_QWORD *)(a1 + 120);
  v64 = *(_QWORD *)(a1 + 128);
  v65 = (uint64_t *)(v63 + 8 * (v62 >> 10));
  if (v64 == v63)
    v66 = 0;
  else
    v66 = *v65 + 4 * (v62 & 0x3FF);
  v67 = *(float *)(v59 + 4 * v60);
  v68 = v58 + (float)(v57 * v56);
  v69 = v45 + v40;
  v70 = (uint64_t *)(v47 + 8 * ((v45 + v40) >> 10));
  if (*(_QWORD *)(a1 + 224) == v47)
    v71 = 0;
  else
    v71 = *v70 + 4 * (v69 & 0x3FF);
  v72 = v68 - v67;
  v73 = (uint64_t *)(v23 + 8 * ((v21 + v22) >> 10));
  *(_QWORD *)&v211 = v21 + v22;
  if (v48 == v23)
    v74 = 0;
  else
    v74 = *v73 + 4 * (((_WORD)v21 + (_WORD)v22) & 0x3FF);
  v212 = (uint64_t *)(v23 + 8 * ((v21 + v22) >> 10));
  v213 = *(double *)(a1 + 176);
  v75 = v72 * v72;
  if (v74 == v49)
  {
    v80 = 0.0;
    v79 = 0.0;
    v78 = 0.0;
    v77 = 0.0;
    v76 = 0.0;
  }
  else
  {
    v217 = v61 >> 10;
    v76 = 0.0;
    v77 = 0.0;
    v78 = 0.0;
    v79 = 0.0;
    v80 = 0.0;
    do
    {
      if (v64 == v63)
        v81 = 0;
      else
        v81 = *(_QWORD *)(v63 + 8 * v217) + 4 * (*(_QWORD *)(a1 + 144) & 0x3FFLL);
      if (v66 == v81)
        break;
      v82 = *v65;
      v83 = v66;
      if (v66 == *v65)
        v83 = *(v65 - 1) + 4096;
      v84 = *v70;
      v85 = v71;
      if (v71 == *v70)
        v85 = *(v70 - 1) + 4096;
      v86 = *v73;
      v87 = v74;
      if (v74 == *v73)
        v87 = *(v73 - 1) + 4096;
      v88 = v66;
      if (v66 == v82)
        v88 = *(v65 - 1) + 4096;
      v89 = v74;
      if (v74 == v86)
        v89 = *(v73 - 1) + 4096;
      v90 = v66;
      if (v66 == v82)
        v90 = *(v65 - 1) + 4096;
      v91 = v71;
      if (v71 == v84)
        v91 = *(v70 - 1) + 4096;
      v92 = v66;
      if (v66 == v82)
        v92 = *(v65 - 1) + 4096;
      v93 = v74;
      if (v74 == v86)
        v93 = *(v73 - 1) + 4096;
      if (v66 == v82)
      {
        v94 = *--v65;
        v66 = v94 + 4096;
      }
      v95 = *(float *)(v83 - 4);
      if (v71 == v84)
      {
        v96 = *--v70;
        v71 = v96 + 4096;
      }
      if (v74 == v86)
      {
        v97 = *--v73;
        v74 = v97 + 4096;
      }
      v80 = v80 + v95;
      v79 = v79 + (float)((float)(v95 * *(float *)(v85 - 4)) * *(float *)(v87 - 4));
      v78 = v78 + (float)(*(float *)(v88 - 4) * *(float *)(v89 - 4));
      v77 = v77 + (float)(*(float *)(v90 - 4) * *(float *)(v91 - 4));
      v76 = v76 + (float)((float)(*(float *)(v92 - 4) * *(float *)(v93 - 4)) * *(float *)(v93 - 4));
      v66 -= 4;
      v71 -= 4;
      v74 -= 4;
    }
    while (v74 != v49);
  }
  v98 = (float)((float)(v80 * v79) - (float)(v78 * v77));
  v99 = (float)(v80 * v76) - v78 * v78;
  *(float *)&v98 = v98 / v99;
  v100 = (float)((float)(v76 * v77) - (float)(v78 * v79)) / v99;
  *(_DWORD *)v216 = LODWORD(v98);
  *(float *)(v216 + 4) = v100;
  if (v75 > 2.0)
  {
    v101 = *v212;
    if (*(_QWORD *)&v213 == v23)
    {
      v103 = 0;
      v104 = 0;
      v102 = v214;
    }
    else
    {
      v102 = (char *)(v23 + 8 * (v21 >> 10));
      v103 = *(_QWORD *)v214 + 4 * (v21 & 0x3FF);
      v104 = v101 + 4 * (LOWORD(v211) & 0x3FF);
    }
    v105 = v104 - v101;
    v106 = (v104 - v101) >> 2;
    if (v105 < 9)
    {
      v110 = 1025 - v106;
      v108 = (char *)&v212[-(v110 >> 10)];
      v109 = *(_QWORD *)v108 + 4 * (~(_WORD)v110 & 0x3FF);
    }
    else
    {
      v107 = v106 - 2;
      v108 = (char *)&v212[v107 >> 10];
      v109 = *(_QWORD *)v108 + 4 * (v107 & 0x3FF);
    }
    sub_100EF3AEC((_QWORD *)(a1 + 160), v102, v103, v108, v109);
    v111 = *(_QWORD *)(a1 + 240);
    v112 = *(_QWORD *)(a1 + 216);
    v113 = (char *)(v112 + 8 * (v111 >> 10));
    if (*(_QWORD *)(a1 + 224) == v112)
    {
      v114 = 0;
      v118 = 0;
      v116 = (uint64_t *)(v112 + 8 * ((*(_QWORD *)(a1 + 248) + v111) >> 10));
      v117 = *v116;
    }
    else
    {
      v114 = *(_QWORD *)v113 + 4 * (*(_QWORD *)(a1 + 240) & 0x3FFLL);
      v115 = *(_QWORD *)(a1 + 248) + v111;
      v116 = (uint64_t *)(v112 + 8 * (v115 >> 10));
      v117 = *v116;
      v118 = *v116 + 4 * (v115 & 0x3FF);
    }
    v119 = v118 - v117;
    v120 = v119 >> 2;
    if (v119 < 9)
    {
      v125 = 1025 - v120;
      v122 = (char *)&v116[-(v125 >> 10)];
      v123 = *(_QWORD *)v122;
      v124 = ~(_DWORD)v125 & 0x3FFLL;
    }
    else
    {
      v121 = v120 - 2;
      v122 = (char *)&v116[v121 >> 10];
      v123 = *(_QWORD *)v122;
      v124 = v121 & 0x3FF;
    }
    sub_100EF3AEC((_QWORD *)(a1 + 208), v113, v114, v122, v123 + 4 * v124);
    v126 = *(_QWORD *)(a1 + 192);
    v127 = v126 >> 10;
    v128 = *(_QWORD *)(a1 + 168);
    v129 = *(_QWORD *)(a1 + 176);
    if (v129 == v128)
      v130 = 0;
    else
      v130 = *(_QWORD *)(v128 + 8 * v127) + 4 * (*(_QWORD *)(a1 + 192) & 0x3FFLL);
    v131 = *(_QWORD *)(a1 + 240);
    v132 = v131 + *(_QWORD *)(a1 + 248);
    v133 = *(_QWORD *)(a1 + 216);
    v134 = (_QWORD *)(v133 + 8 * (v132 >> 10));
    if (*(_QWORD *)(a1 + 224) == v133)
      v135 = 0;
    else
      v135 = *v134 + 4 * (v132 & 0x3FF);
    v137 = *(_QWORD *)(a1 + 200) + v126;
    v138 = (uint64_t *)(v128 + 8 * (v137 >> 10));
    if (v129 == v128)
      v139 = 0;
    else
      v139 = *v138 + 4 * (v137 & 0x3FF);
    v140 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    v136 = *(double *)(a1 + 8);
    v141 = v136;
    if (v139 != v130)
    {
      v142 = *(double *)(a1 + 64);
      v143 = *v138;
      do
      {
        v144 = v139;
        if (v139 == v143)
          v144 = *(v138 - 1) + 4096;
        v145 = v142 + *(float *)(v144 - 4) - v141;
        *(float *)(v144 - 4) = v145;
        if (v135 == *v134)
        {
          v146 = *--v134;
          *(float *)(v146 + 4092) = (float)(*(float *)(v146 + 4092) + *(float *)(a1 + 72)) - v140;
          v135 = v146 + 4096;
        }
        else
        {
          *(float *)(v135 - 4) = (float)(*(float *)(v135 - 4) + *(float *)(a1 + 72)) - v140;
        }
        if (v139 == v143)
        {
          v147 = *--v138;
          v143 = v147;
          v139 = v147 + 4096;
        }
        v135 -= 4;
        v139 -= 4;
      }
      while (v139 != v130);
    }
    *(double *)(a1 + 64) = v141;
    *(float *)(a1 + 72) = v140;
    v148 = *(float *)(*(_QWORD *)(v133 + (((v131 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v131 + 1) & 0x3FF));
    v149 = *(_QWORD *)(v133 + ((v131 >> 7) & 0x1FFFFFFFFFFFFF8));
    v150 = v131 & 0x3FF;
    v151 = *(_QWORD *)(v128 + (((v126 + 1) >> 7) & 0x1FFFFFFFFFFFFF8));
    v152 = (v126 + 1) & 0x3FF;
    v153 = *(_QWORD *)(v128 + 8 * v127);
    v154 = v126 & 0x3FF;
    v155 = (float)(v148 - *(float *)(v149 + 4 * v150))
         / (float)(*(float *)(v151 + 4 * v152) - *(float *)(v153 + 4 * v154));
    v156 = *(float **)(a1 + 88);
    *v156 = v155;
    v156[1] = *(float *)(v149 + 4 * v150) - (float)(v155 * *(float *)(v153 + 4 * v154));
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191AB8);
    v157 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v158 = *((_QWORD *)a2 + 1);
      v159 = *((_DWORD *)a2 + 4);
      v160 = *((_DWORD *)a2 + 5);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)v235 = v158;
      *(_WORD *)&v235[8] = 1024;
      *(_DWORD *)&v235[10] = v159;
      *(_WORD *)&v235[14] = 1024;
      *(_DWORD *)&v235[16] = v160;
      *(_WORD *)&v235[20] = 2048;
      *(double *)&v235[22] = v219;
      *(_WORD *)&v235[30] = 2048;
      *(double *)&v235[32] = v75;
      _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEBUG, "Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102191AB8);
      v205 = *((_QWORD *)a2 + 1);
      v206 = *((_DWORD *)a2 + 4);
      v207 = *((_DWORD *)a2 + 5);
      v220 = 134219008;
      *(_QWORD *)v221 = v205;
      *(_WORD *)&v221[8] = 1024;
      *(_DWORD *)&v221[10] = v206;
      *(_WORD *)&v221[14] = 1024;
      *(_DWORD *)&v221[16] = v207;
      *(_WORD *)&v221[20] = 2048;
      *(double *)&v221[22] = v219;
      *(_WORD *)&v221[30] = 2048;
      *(double *)&v221[32] = v75;
      v208 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f", COERCE_DOUBLE(&v220), 44, LODWORD(v210), v211, *(double *)&v212);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v208);
      if (v208 != (char *)buf)
        free(v208);
    }
  }
  v161 = *(_QWORD *)(a1 + 192);
  v162 = **(float **)(a1 + 88);
  v163 = v162
       * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 168)
                                      + (((*(_QWORD *)(a1 + 200) + v161 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((*(_QWORD *)(a1 + 200) + v161 - 1) & 0x3FF))
               - *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + ((v161 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v161 & 0x3FF)));
  v164 = *((double *)a2 + 1);
  if (v164 - *(double *)(a1 + 80) > 15.0)
  {
    *(_BYTE *)(a1 + 76) = 0;
    *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  }
  if (v163 <= 2.0)
  {
    if (v163 >= -2.0)
    {
      v165 = *(_BYTE *)(a1 + 76) != 0;
      if (*(_BYTE *)(a1 + 76))
        v166 = 3;
      else
        v166 = 2;
    }
    else
    {
      *(double *)(a1 + 80) = v164;
      v165 = 1;
      *(_BYTE *)(a1 + 76) = 1;
      v166 = 3;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 76) = 0;
    v165 = 1;
    v166 = 1;
  }
  sub_100197040();
  v167 = sub_1001B7910();
  v168 = v162;
  v169 = *((_DWORD *)a2 + 10);
  if ((v167 & 0x1000000000) == 0)
  {
    v170 = v169 == 1 && v165;
    v171 = v215;
    if (v169 != 3 && !v170)
      goto LABEL_148;
    goto LABEL_147;
  }
  v171 = v215;
  if (v169 == 3)
LABEL_147:
    v166 = 0;
LABEL_148:
  v172 = a2[3];
  v173 = *a2;
  v174 = a2[1];
  *(_OWORD *)(*(_QWORD *)&v171 + 32) = a2[2];
  *(_OWORD *)(*(_QWORD *)&v171 + 48) = v172;
  **(_OWORD **)&v171 = v173;
  *(_OWORD *)(*(_QWORD *)&v171 + 16) = v174;
  *(_DWORD *)(*(_QWORD *)&v171 + 24) = v166;
  *(double *)(*(_QWORD *)&v171 + 32) = v168;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102191AB8);
  v175 = v163;
  v176 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v177 = *(_DWORD *)(*(_QWORD *)&v171 + 24);
    v178 = *((_QWORD *)a2 + 1);
    v179 = *(float **)(a1 + 88);
    v180 = *v179;
    v181 = v179[1];
    v182 = *(_QWORD *)(a1 + 168);
    v183 = *(float *)(*(_QWORD *)(v182
                                + (((unint64_t)(*(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((*(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192) - 1) & 0x3FF));
    v184 = *(float *)(*(_QWORD *)(v182 + ((*(_QWORD *)(a1 + 192) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (*(_QWORD *)(a1 + 192) & 0x3FFLL));
    LODWORD(v179) = *((_DWORD *)a2 + 4);
    v185 = *((_DWORD *)a2 + 5);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)v235 = v177;
    *(_WORD *)&v235[4] = 2048;
    *(_QWORD *)&v235[6] = v178;
    *(_WORD *)&v235[14] = 2048;
    *(double *)&v235[16] = v175;
    *(_WORD *)&v235[24] = 2048;
    *(double *)&v235[26] = v168;
    *(_WORD *)&v235[34] = 2048;
    *(double *)&v235[36] = v180;
    *(_WORD *)v236 = 2048;
    *(double *)&v236[2] = v181;
    v237 = 2048;
    v238 = v183;
    v239 = 2048;
    v240 = v184;
    v241 = 1024;
    v242 = (int)v179;
    v243 = 1024;
    v244 = v185;
    v245 = 2048;
    v246 = v219;
    _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEBUG, "Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, fParam_m, %f, fParam_b, %f,fTimeBufferFront, %f,fTimeBufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191AB8);
    v192 = *(_DWORD *)(*(_QWORD *)&v215 + 24);
    v193 = *((_QWORD *)a2 + 1);
    v194 = *(float **)(a1 + 88);
    v195 = *v194;
    v196 = v194[1];
    v197 = *(_QWORD *)(a1 + 168);
    v198 = *(float *)(*(_QWORD *)(v197
                                + (((unint64_t)(*(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((*(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192) - 1) & 0x3FF));
    v199 = *(float *)(*(_QWORD *)(v197 + ((*(_QWORD *)(a1 + 192) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (*(_QWORD *)(a1 + 192) & 0x3FFLL));
    LODWORD(v194) = *((_DWORD *)a2 + 4);
    v200 = *((_DWORD *)a2 + 5);
    v220 = 67111680;
    *(_DWORD *)v221 = v192;
    *(_WORD *)&v221[4] = 2048;
    *(_QWORD *)&v221[6] = v193;
    *(_WORD *)&v221[14] = 2048;
    *(double *)&v221[16] = v175;
    *(_WORD *)&v221[24] = 2048;
    *(double *)&v221[26] = v168;
    *(_WORD *)&v221[34] = 2048;
    *(double *)&v221[36] = v195;
    v222 = 2048;
    v223 = v196;
    v224 = 2048;
    v225 = v198;
    v226 = 2048;
    v227 = v199;
    v228 = 1024;
    v229 = (int)v194;
    v230 = 1024;
    v231 = v200;
    v232 = 2048;
    v233 = v219;
    LODWORD(v209) = 100;
    v201 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, fParam_m, %f, fParam_b, %f,fTimeBufferFront, %f,fTimeBufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f", &v220, v209, v210, v211, *(double *)&v212, v213, *(double *)&v214, v215, (_DWORD)v216,
                     DWORD2(v216),
                     *(double *)&v217);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v201);
    if (v201 != (char *)buf)
      free(v201);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102191AB8);
  v186 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v187 = *(_DWORD *)(*(_QWORD *)&v215 + 24);
    v188 = *(_QWORD *)(*(_QWORD *)&v215 + 32);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v235 = v187;
    *(_WORD *)&v235[4] = 2048;
    *(_QWORD *)&v235[6] = v188;
    _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEBUG, "Input, Elevation, Hardware gradeTypeFilter, gradeType, %d, vspeed, %.4f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102191AB8);
    v202 = *(_DWORD *)(*(_QWORD *)&v215 + 24);
    v203 = *(_QWORD *)(*(_QWORD *)&v215 + 32);
    v220 = 67109376;
    *(_DWORD *)v221 = v202;
    *(_WORD *)&v221[4] = 2048;
    *(_QWORD *)&v221[6] = v203;
    LODWORD(v209) = 18;
    v204 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Input, Elevation, Hardware gradeTypeFilter, gradeType, %d, vspeed, %.4f", &v220, v209);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)", "%s\n", v204);
    if (v204 != (char *)buf)
      free(v204);
  }
  v189 = **(_OWORD **)&v215;
  v190 = *(_OWORD *)(*(_QWORD *)&v215 + 16);
  v191 = *(_OWORD *)(*(_QWORD *)&v215 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(*(_QWORD *)&v215 + 32);
  *(_OWORD *)(a1 + 48) = v191;
  *(_OWORD *)a1 = v189;
  *(_OWORD *)(a1 + 16) = v190;
  return 1;
}

float sub_1000BFB54(_QWORD *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1004125AC(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(float *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_1000BFBD8(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1000C0088(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1000BFFAC(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102140238);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102140238);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1000BFFAC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1000C0088(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1000C0088(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1004FC484(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1000C0100(a1);
  else
    return 0;
}

id sub_1000C0100(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB4D9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB4D9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOdometerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1000C04AC(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  void *v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *i;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  _DWORD v20[2];
  __int16 v21;
  unsigned int v22;
  uint8_t buf[8];
  std::__shared_weak_count *v24;

  if (a2 == "ADDED")
  {
    v5 = objc_autoreleasePoolPush();
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v6 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsagePage")), "intValue");
      v7 = objc_msgSend((id)(id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsage")), "intValue");
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v8 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v6;
        LOWORD(v24) = 1026;
        *(_DWORD *)((char *)&v24 + 2) = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%{public}d, %{public}d} just became available.", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v20[0] = 67240448;
        v20[1] = v6;
        v21 = 1026;
        v22 = v7;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%{public}d, %{public}d} just became available.", v20, 14);
        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRegistration(void *, IOHIDServiceClientRef)", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
    }
    v9 = *(uint64_t **)(a1 + 8);
    for (i = *(uint64_t **)(a1 + 16); v9 != i; v9 += 2)
    {
      v11 = (std::__shared_weak_count *)v9[1];
      if (v11)
      {
        v12 = *v9;
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
        v15 = std::__shared_weak_count::lock(v11);
        v24 = v15;
        if (v15)
        {
          v16 = v15;
          *(_QWORD *)buf = v12;
          if (v12)
          {
            if ((sub_1000C0808(v12, a3) & 1) != 0)
            {
              sub_10008AD74(v12, a3, 1);
              if (*(_QWORD *)(v12 + 80))
                IOHIDServiceClientRegisterRemovalCallback(a3, sub_100A09320, a1, "REMOVED");
            }
          }
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    objc_autoreleasePoolPop(v5);
  }
}

void sub_1000C07E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C0808(uint64_t a1, IOHIDServiceClientRef service)
{
  uint64_t result;

  result = IOHIDServiceClientConformsTo(service, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16));
  if ((_DWORD)result)
    return sub_10023D32C(service, *(void **)(a1 + 152));
  return result;
}

uint64_t *sub_1000C084C(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_1000C08CC(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1000C1834((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_1000C08CC(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1001C88B8(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1001C88B8((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_1000C17A4((uint64_t)a1, a3, a5);
  }
  if (sub_1001C88B8((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1001C88B8(a5, (uint64_t)(v15 + 4)))
        return sub_1000C17A4((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_1000C0A50(int *a1@<X0>, double **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  double *v10;
  double *v11;
  double v12;
  unint64_t v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;
  NSObject *v17;
  NSObject *v18;
  _BOOL4 v19;
  double *v20;
  double *v21;
  uint64_t v22;
  float32x2_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  __int128 v29;
  _BYTE *v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  _BYTE *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char **v42;
  BOOL v43;
  NSObject *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  const char *v47;
  char *v48;
  _BOOL4 v49;
  const char *v50;
  char *v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  char **v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char **v60;
  char *v61[2];
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char **v71;
  char *v72[2];
  int v73;
  unint64_t v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  __int16 v79;
  _BOOL4 v80;
  __int16 v81;
  _BOOL4 v82;
  _BYTE v83[24];
  __int128 v84;
  uint64_t v85;
  _BYTE buf[24];
  __int128 __p;
  uint64_t v88;

  v72[0] = 0;
  v72[1] = 0;
  v71 = v72;
  v10 = *a2;
  v11 = a2[1];
  while (v10 != v11)
  {
    sub_1000C18E4(v10, (uint64_t)buf);
    sub_1000C1654((uint64_t **)&v71, (uint64_t)buf, (uint64_t)buf, (__int128 *)v10);
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    v10 += 18;
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v61[0] = 0;
  v61[1] = 0;
  v12 = *(double *)(a3 + 20);
  v60 = v61;
  if (v12 <= 0.0 || a5 - *(double *)(a3 + 76) >= (double)((unint64_t)3600.0 >> 1))
  {
    if (*a1 <= 25)
    {
      v20 = *a2;
      v21 = a2[1];
      while (v20 != v21)
      {
        sub_1000C18E4(v20, (uint64_t)buf);
        sub_10136B45C(&v65, (__int128 *)buf);
        if (SHIBYTE(v88) < 0)
          operator delete((void *)__p);
        v20 += 18;
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v17 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "invalid location provided and complete miss, will not return any tiles to search", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021B18E0);
        *(_WORD *)v83 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "invalid location provided and complete miss, will not return any tiles to search", v83, 2);
        v53 = (char *)v52;
        sub_100512490("Generic", 1, 0, 2, "std::tuple<std::vector<TileId>, std::vector<TileId>, std::vector<TileId>> CLWifiTileQueryLogic::getTilesToSearch(const std::vector<CLWifiTileHeaderEntry> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B18C0);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *a1 > 25;
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v68) >> 4);
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - v65) >> 4);
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 4);
      WORD4(__p) = 1026;
      *(_DWORD *)((char *)&__p + 10) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, havecurrent, 0, completemiss, %{public}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021B18C0);
      v46 = *a1 > 25;
      *(_DWORD *)v83 = 134349824;
      *(_QWORD *)&v83[4] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v68) >> 4);
      *(_WORD *)&v83[12] = 2050;
      *(_QWORD *)&v83[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - v65) >> 4);
      *(_WORD *)&v83[22] = 2050;
      *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 4);
      WORD4(v84) = 1026;
      *(_DWORD *)((char *)&v84 + 10) = v46;
      LODWORD(v54) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, havecurrent, 0, completemiss, %{public}d", v83, v54);
      v48 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<std::vector<TileId>, std::vector<TileId>, std::vector<TileId>> CLWifiTileQueryLogic::getTilesToSearch(const std::vector<CLWifiTileHeaderEntry> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
    sub_10136B8E0(a4, &v68, &v65, &v62);
  }
  else
  {
    *(_DWORD *)buf = 0;
    sub_1000C1928((uint64_t)v83, buf);
    sub_1001CB024((uint64_t)v83, -1, *(double *)(a3 + 4), *(double *)(a3 + 12), 0.05, 0.05);
    if (v72 != sub_1001C8840((uint64_t)&v71, (uint64_t)v83))
    {
      v13 = v69;
      if (v69 >= v70)
      {
        v22 = sub_100496580(&v68, (__int128 *)v83);
      }
      else
      {
        v14 = *(_OWORD *)v83;
        *(_QWORD *)(v69 + 16) = *(_QWORD *)&v83[16];
        *(_OWORD *)v13 = v14;
        v15 = (_BYTE *)(v13 + 24);
        if (SHIBYTE(v85) < 0)
        {
          sub_100115CE4(v15, (void *)v84, *((unint64_t *)&v84 + 1));
        }
        else
        {
          v16 = v84;
          *(_QWORD *)(v13 + 40) = v85;
          *(_OWORD *)v15 = v16;
        }
        v22 = v13 + 48;
      }
      v69 = v22;
      sub_1000C1728((uint64_t **)&v60, (uint64_t)v83, (uint64_t)v83);
    }
    v56 = *(_OWORD *)v83;
    v57 = *(_QWORD *)&v83[16];
    if (SHIBYTE(v85) < 0)
    {
      sub_100115CE4(&v58, (void *)v84, *((unint64_t *)&v84 + 1));
    }
    else
    {
      v58 = v84;
      v59 = v85;
    }
    v55 = (char **)sub_1001C8840((uint64_t)&v71, (uint64_t)v83);
    v24 = 8;
    v25 = &byte_101C4379D;
    do
    {
      v26 = *v25;
      v27 = *(v25 - 1);
      *(_OWORD *)buf = v56;
      *(_QWORD *)&buf[16] = v57;
      if (SHIBYTE(v59) < 0)
      {
        sub_100115CE4(&__p, (void *)v58, *((unint64_t *)&v58 + 1));
      }
      else
      {
        __p = v58;
        v88 = v59;
      }
      v23.i32[0] = 1028443341;
      sub_1001C85C8((uint64_t)buf, v26, v27, 0.05, v23);
      if (v72 == sub_1001C8840((uint64_t)&v71, (uint64_t)buf))
      {
        v32 = v63;
        if (v63 >= v64)
        {
          v37 = sub_100496580(&v62, (__int128 *)buf);
        }
        else
        {
          v33 = *(_OWORD *)buf;
          *(_QWORD *)(v63 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v32 = v33;
          v34 = (_BYTE *)(v32 + 24);
          if (SHIBYTE(v88) < 0)
          {
            sub_100115CE4(v34, (void *)__p, *((unint64_t *)&__p + 1));
          }
          else
          {
            v35 = __p;
            *(_QWORD *)(v32 + 40) = v88;
            *(_OWORD *)v34 = v35;
          }
          v37 = v32 + 48;
        }
        v63 = v37;
      }
      else if (v61 != sub_1001C8840((uint64_t)&v60, (uint64_t)&v56))
      {
        v28 = v69;
        if (v69 >= v70)
        {
          v36 = sub_100496580(&v68, (__int128 *)buf);
        }
        else
        {
          v29 = *(_OWORD *)buf;
          *(_QWORD *)(v69 + 16) = *(_QWORD *)&buf[16];
          *(_OWORD *)v28 = v29;
          v30 = (_BYTE *)(v28 + 24);
          if (SHIBYTE(v88) < 0)
          {
            sub_100115CE4(v30, (void *)__p, *((unint64_t *)&__p + 1));
          }
          else
          {
            v31 = __p;
            *(_QWORD *)(v28 + 40) = v88;
            *(_OWORD *)v30 = v31;
          }
          v36 = v28 + 48;
        }
        v69 = v36;
        sub_1000C1728((uint64_t **)&v60, (uint64_t)buf, (uint64_t)buf);
      }
      if (SHIBYTE(v88) < 0)
        operator delete((void *)__p);
      v25 += 2;
      --v24;
    }
    while (v24);
    if (*a1 <= 25)
    {
      v38 = (uint64_t *)v71;
      if (v71 != v72)
      {
        do
        {
          if (v61 == sub_1001C8840((uint64_t)&v60, (uint64_t)(v38 + 4)))
          {
            sub_1000C1728((uint64_t **)&v60, (uint64_t)(v38 + 4), (uint64_t)(v38 + 4));
            v39 = v66;
            if (v66 >= v67)
            {
              v40 = sub_100496580(&v65, (__int128 *)v38 + 2);
            }
            else
            {
              sub_100495F28((uint64_t)&v65, (__int128 *)v38 + 2);
              v40 = v39 + 48;
            }
            v66 = v40;
          }
          v41 = (char *)v38[1];
          if (v41)
          {
            do
            {
              v42 = (char **)v41;
              v41 = *(char **)v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              v42 = (char **)v38[2];
              v43 = *v42 == (char *)v38;
              v38 = (uint64_t *)v42;
            }
            while (!v43);
          }
          v38 = (uint64_t *)v42;
        }
        while (v42 != v72);
      }
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021B18C0);
    v44 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *a1 > 25;
      *(_DWORD *)buf = 134350080;
      *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v68) >> 4);
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - v65) >> 4);
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 4);
      WORD4(__p) = 1026;
      *(_DWORD *)((char *)&__p + 10) = v72 != v55;
      HIWORD(__p) = 1026;
      LODWORD(v88) = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, havecurrent, %{public}d, completemiss, %{public}d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021B18C0);
      v49 = *a1 > 25;
      v73 = 134350080;
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v68) >> 4);
      v75 = 2050;
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - v65) >> 4);
      v77 = 2050;
      v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 4);
      v79 = 1026;
      v80 = v72 != v55;
      v81 = 1026;
      v82 = v49;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSearch, wifi, nrx, %{public}ld, %{public}ld, %{public}ld, havecurrent, %{public}d, completemiss, %{public}d", &v73, 44);
      v51 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<std::vector<TileId>, std::vector<TileId>, std::vector<TileId>> CLWifiTileQueryLogic::getTilesToSearch(const std::vector<CLWifiTileHeaderEntry> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    sub_10136B8E0(a4, &v68, &v65, &v62);
    if (SHIBYTE(v59) < 0)
      operator delete((void *)v58);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)v84);
  }
  sub_100067A00((uint64_t)&v60, v61[0]);
  *(_QWORD *)buf = &v62;
  sub_100495E10((void ***)buf);
  *(_QWORD *)buf = &v65;
  sub_100495E10((void ***)buf);
  *(_QWORD *)buf = &v68;
  sub_100495E10((void ***)buf);
  sub_100067A00((uint64_t)&v71, v72[0]);
}

void sub_1000C152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,char *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,char *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  sub_100067A00((uint64_t)&a23, a24);
  a53 = &a26;
  sub_100495E10((void ***)&a53);
  a53 = &a29;
  sub_100495E10((void ***)&a53);
  a53 = &a32;
  sub_100495E10((void ***)&a53);
  sub_100067A00((uint64_t)&a35, a36);
  _Unwind_Resume(a1);
}

_OWORD *sub_1000C1654(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void **v7;
  _OWORD *v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;

  v7 = (void **)sub_1000C17A4((uint64_t)a1, &v18, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = operator new(0xE0uLL);
    v8[2] = *(_OWORD *)a3;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v8 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[3];
    v8[7] = a4[2];
    v8[8] = v12;
    v8[5] = v10;
    v8[6] = v11;
    v13 = a4[4];
    v14 = a4[5];
    v15 = a4[8];
    v8[12] = a4[7];
    v8[13] = v15;
    v16 = a4[6];
    v8[10] = v14;
    v8[11] = v16;
    v8[9] = v13;
    sub_1000145B0(a1, v18, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *sub_1000C1728(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1000C17A4((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1000C1834((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_1000C17A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_1001C88B8(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1001C88B8(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_1000C1834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[2] = *(_OWORD *)a2;
  *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  result = (_QWORD *)v6 + 7;
  if (*(char *)(a2 + 47) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 24);
    result[2] = *(_QWORD *)(a2 + 40);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000C18C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1008B9C00(v3, v2);
  _Unwind_Resume(a1);
}

double sub_1000C18E4@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  int v5;

  v5 = 0;
  v3 = sub_1000C1928(a2, &v5);
  result = *a1;
  *(double *)(v3 + 4) = *a1;
  *(_QWORD *)(v3 + 16) = -1;
  return result;
}

uint64_t sub_1000C1928(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 4) = -1;
  *(_QWORD *)(a1 + 16) = -1;
  sub_1015A2E04((_QWORD *)(a1 + 24), "");
  return a1;
}

uint64_t sub_1000C1970(uint64_t a1)
{
  sub_10049652C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000C19A4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1004962FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000C1A6C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  if (!*(_QWORD *)(a1 + 296))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "WifiService, getPower, fDpcSource is NULL", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    LOWORD(v14) = 0;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, getPower, fDpcSource is NULL", &v14, 2);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiService::getPower(BOOL &)", "%s\n", v11);
    goto LABEL_23;
  }
  if (!*(_QWORD *)(a1 + 312) || !*(_QWORD *)(a1 + 304))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 304);
      v7 = *(_QWORD *)(a1 + 312);
      *(_DWORD *)buf = 134349312;
      v19 = v7;
      v20 = 2050;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "WifiService, getPower, device/manager is NULL, %{public}p, %{public}p", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v10 = *(_QWORD *)(a1 + 304);
    v9 = *(_QWORD *)(a1 + 312);
    v14 = 134349312;
    v15 = v9;
    v16 = 2050;
    v17 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiService, getPower, device/manager is NULL, %{public}p, %{public}p", &v14, 22);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLWifiService::getPower(BOOL &)", "%s\n", v11);
LABEL_23:
    if (v11 != (char *)buf)
      free(v11);
LABEL_18:
    v5 = 0;
    goto LABEL_19;
  }
  *a2 = *(_BYTE *)(a1 + 536);
  v5 = 1;
LABEL_19:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

void sub_1000C1DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C1E4C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  std::string *p_p;
  std::string *v8;
  std::string *v9;
  std::string __p;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  std::string *v15;
  __int16 v16;
  int v17;
  std::string buf[68];

  v2 = a1 + 824;
  v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v12 = 256;
  if (*(_QWORD *)(a1 + 304) && *(_QWORD *)(a1 + 312))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(_QWORD *)(a1 + 224) && *(_BYTE *)(a1 + 632) && (*(_DWORD *)(a1 + 584) - 1) <= 0xA4)
    {
      v13 = *(_QWORD *)(a1 + 544);
      sub_1000C2150(&v13, buf);
      v3 = *(_DWORD *)(a1 + 584);
      __p = buf[0];
      v4 = 1;
    }
    else
    {
      v4 = 0;
      v3 = -1;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240707;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v4;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WifiMgr, associated, %{public}d, mac, %{private}s, channel, %{public}d", (uint8_t *)buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v8 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v13) = 67240707;
      HIDWORD(v13) = v4;
      v14 = 2081;
      v15 = v8;
      v16 = 1026;
      v17 = v3;
      v9 = (std::string *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WifiMgr, associated, %{public}d, mac, %{private}s, channel, %{public}d", &v13, 24);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiService::isAssociated()", "%s\n", (const char *)v9);
      if (v9 != buf)
        free(v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v4;
}

void sub_1000C2110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10187E514((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1000C2150(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  void **v5;
  void **v6;
  int v7;
  void **v8;
  void *__p[2];
  unsigned __int8 v10;

  sub_1000C2348(a1, __p);
  v3 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    v4 = v10;
    if ((char)v10 < 0)
      break;
    if ((unint64_t)v3 >= v10)
      return;
LABEL_6:
    if (v3)
    {
      std::string::push_back(a2, 58);
      v4 = v10;
    }
    v5 = (void **)__p[0];
    if ((v4 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    v7 = v3[(_QWORD)v6];
    if (v7 != 48)
    {
      std::string::push_back(a2, v7);
      v4 = v10;
      v5 = (void **)__p[0];
    }
    if ((v4 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = v5;
    std::string::push_back(a2, v3[(_QWORD)v8 + 1]);
    v3 += 2;
  }
  if (v3 < __p[1])
    goto LABEL_6;
  operator delete(__p[0]);
}

void sub_1000C2228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000C2254(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  unsigned __int8 v4;
  void **v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  sub_1000C2348(a1, __p);
  v3 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  while (1)
  {
    v4 = v8;
    if ((char)v8 < 0)
      break;
    if ((unint64_t)v3 >= v8)
      return;
LABEL_6:
    if (v3)
    {
      std::string::push_back(a2, 58);
      v4 = v8;
    }
    if ((v4 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    std::string::push_back(a2, v3[(_QWORD)v5]);
    if ((v8 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    std::string::push_back(a2, v3[(_QWORD)v6 + 1]);
    v3 += 2;
  }
  if (v3 < __p[1])
    goto LABEL_6;
  operator delete(__p[0]);
}

void sub_1000C231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C2348@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100263E50((uint64_t)v9);
  v8 = 48;
  v4 = sub_100B06348(&v10, &v8);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 12;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(v4, *a1);
  std::stringbuf::str(a2, v11);
  *(_QWORD *)((char *)v9
  v10 = v6;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_1000C2440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2678(uint64_t a1, _DWORD *a2, char a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
    return sub_1000C2688(result, a2, a3);
  return result;
}

uint64_t sub_1000C2688(uint64_t a1, _DWORD *a2, char a3)
{
  uint64_t v6;

  v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  switch(*a2)
  {
    case 0:
      *(_BYTE *)(a1 + 371) = a3;
      break;
    case 1:
      *(_BYTE *)(a1 + 372) = a3;
      break;
    case 4:
      *(_BYTE *)(a1 + 374) = a3;
      break;
    case 5:
      *(_BYTE *)(a1 + 373) = a3;
      break;
    default:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

unint64_t sub_1000C271C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  id v8;
  unint64_t result;

  if (qword_102308B88 != -1)
    dispatch_once(&qword_102308B88, &stru_10218BA08);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102308B60);
  v7 = (id)qword_102308B68;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102308B60);
  if (!objc_msgSend(v7, "count"))
    sub_10192E5F0();
  v8 = objc_msgSend(v7, "objectForKeyedSubscript:", a2);
  if (v8)
  {
    result = (unint64_t)objc_msgSend(v8, "BOOLValue");
    if ((result & 1) != 0)
      return result;
    goto LABEL_6;
  }
  result = sub_1000C27F0(a2);
  if ((result & 1) == 0)
  {
LABEL_6:
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

unint64_t sub_1000C27F0(uint64_t a1)
{
  id v2;
  unint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  CFTypeID v6;

  if (!a1)
    return 0;
  if (qword_102308B80 != -1)
    dispatch_once(&qword_102308B80, &stru_10218B920);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102308B78);
  v2 = objc_msgSend((id)qword_102308B70, "objectForKey:", a1);
  if (v2)
  {
    v3 = (unint64_t)objc_msgSend(v2, "BOOLValue");
  }
  else
  {
    v4 = (const __CFBoolean *)MGCopyAnswer(a1, 0);
    v5 = v4;
    if (v4)
    {
      v6 = CFGetTypeID(v4);
      v3 = v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) != 0;
      CFRelease(v5);
      objc_msgSend((id)qword_102308B70, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v3), a1);
    }
    else
    {
      v3 = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102308B78);
  return v3;
}

void sub_1000C28FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102308B78);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2B34(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000C2BB4(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

id sub_1000C2BB4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1000C2C00(a1);
  else
    return 0;
}

id sub_1000C2C00(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5264 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BE5264 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationProvider_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

BOOL sub_1000C2FAC(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  signed int v10;
  uint64_t v11;
  signed int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  NSObject *v23;
  unsigned int v24;
  const char *v25;
  _BOOL8 result;
  NSObject *v27;
  unsigned int v28;
  const char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t **v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  const char *v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  const char *v44;
  double v45;
  double *v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t *v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[8];
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  const char *v59;
  __int16 v60;
  uint64_t *v61;
  __int16 v62;
  uint64_t v63;

  LODWORD(v45) = a2;
  v8 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v7 = v8;
  if (!v8)
    goto LABEL_21;
  v10 = *a3;
  v11 = v6;
  do
  {
    v12 = *(_DWORD *)(v7 + 32);
    v13 = v12 < v10;
    if (v12 >= v10)
      v14 = (uint64_t *)v7;
    else
      v14 = (uint64_t *)(v7 + 8);
    if (!v13)
      v11 = v7;
    v7 = *v14;
  }
  while (*v14);
  if (v11 == v6)
    goto LABEL_21;
  if (v10 < *(_DWORD *)(v11 + 32))
    goto LABEL_21;
  v17 = *(_QWORD *)(v11 + 48);
  v15 = v11 + 48;
  v16 = v17;
  if (!v17)
    goto LABEL_21;
  v18 = (uint64_t **)(v15 - 8);
  v19 = v15;
  do
  {
    v20 = *(_DWORD *)(v16 + 32);
    v21 = v20 < a2;
    if (v20 >= a2)
      v22 = (uint64_t *)v16;
    else
      v22 = (uint64_t *)(v16 + 8);
    if (!v21)
      v19 = v16;
    v16 = *v22;
  }
  while (*v22);
  if (v19 != v15 && *(_DWORD *)(v19 + 32) <= a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v27 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v28 = *a3;
      v29 = sub_1001B49F8(*a3);
      *(_QWORD *)buf = &v45;
      v30 = sub_100117BEC(v18, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
      v31 = *a4;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = a2;
      v56 = 1024;
      v57 = v28;
      v58 = 2080;
      v59 = v29;
      v60 = 2048;
      v61 = v30;
      v62 = 2048;
      v63 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214EF10);
      v37 = qword_1022A0028;
      v38 = LODWORD(v45);
      v39 = *a3;
      v40 = sub_1001B49F8(v39);
      v46 = &v45;
      v41 = sub_100117BEC(v18, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)&v46)[5];
      v42 = *a4;
      LODWORD(v46) = 67110146;
      HIDWORD(v46) = v38;
      v47 = 1024;
      v48 = v39;
      v49 = 2080;
      v50 = v40;
      v51 = 2048;
      v52 = v41;
      v53 = 2048;
      v54 = v42;
      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf", &v46, 44, v44, v45, *(double *)&v46);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v43);
      if (v43 != (char *)buf)
        free(v43);
    }
    *(_QWORD *)buf = &v45;
    v32 = sub_100117BEC(v18, (int *)&v45, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v33 = *(_OWORD *)a4;
    *(_OWORD *)((char *)v32 + 52) = *(_OWORD *)((char *)a4 + 12);
    *(_OWORD *)(v32 + 5) = v33;
    return 1;
  }
  else
  {
LABEL_21:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a3;
      v25 = sub_1001B49F8(*a3);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a2;
      v56 = 1024;
      v57 = v24;
      v58 = 2080;
      v59 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, no notification", buf, 0x18u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214EF10);
      v34 = qword_1022A0028;
      v35 = *a3;
      LODWORD(v46) = 67109634;
      HIDWORD(v46) = a2;
      v47 = 1024;
      v48 = v35;
      v49 = 2080;
      v50 = sub_1001B49F8(v35);
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, no notification", &v46, 24, v44);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v36);
      if (v36 != (char *)buf)
        free(v36);
      return 0;
    }
  }
  return result;
}

BOOL sub_1000C349C(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  NSObject *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  char *v22;
  const char *v23;
  double v24;
  _BYTE v25[10];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unsigned int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214EF10);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    v10 = sub_1001B49F8(*a3);
    v11 = *a4;
    v12 = *((_DWORD *)a4 + 5);
    *(_DWORD *)buf = 67109890;
    v31 = v9;
    v32 = 2080;
    v33 = v10;
    v34 = 2048;
    v35 = v11;
    v36 = 1024;
    v37 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v17 = qword_1022A0028;
    v18 = *a3;
    v19 = sub_1001B49F8(*a3);
    v20 = *a4;
    v21 = *((_DWORD *)a4 + 5);
    LODWORD(v24) = 67109890;
    HIDWORD(v24) = v18;
    *(_WORD *)v25 = 2080;
    *(_QWORD *)&v25[2] = v19;
    v26 = 2048;
    v27 = v20;
    v28 = 1024;
    v29 = v21;
    LODWORD(v23) = 34;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d", &v24, v23, v24, *(_DWORD *)v25);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  if (*a3 - 1 > 1)
  {
    v14 = a1;
    v15 = a2;
    v13 = (int *)a3;
  }
  else
  {
    *(_DWORD *)buf = 0;
    v13 = (int *)buf;
    v14 = a1;
    v15 = a2;
  }
  return sub_100129730(v14, v15, v13, (__int128 *)a4);
}

BOOL sub_1000C370C(uint64_t a1, int a2, unsigned int *a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  int v10;
  NSObject *v11;
  unsigned int v12;
  const char *v13;
  _BOOL8 v14;
  const char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  const char *v23;
  _DWORD v24[2];
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(const char **)(a4 + 8);
    v10 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)buf = 67109632;
    v30 = a2;
    v31 = 2048;
    v32 = v9;
    v33 = 1024;
    v34 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLIENT: %d, registerForNotification, distanceFilter, %.1lf, operatingMode, %d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v16 = *(const char **)(a4 + 8);
    v17 = *(_DWORD *)(a4 + 20);
    v25 = 2048;
    v26 = v16;
    v27 = 1024;
    v28 = v17;
    LODWORD(v23) = 24;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "CLIENT: %d, registerForNotification, distanceFilter, %.1lf, operatingMode, %d", v24, *(double *)&v23, 67109632);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a3;
    v13 = sub_1001B49F8(*a3);
    *(_DWORD *)buf = 67109378;
    v30 = v12;
    v31 = 2080;
    v32 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLIENT: register for notification, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v19 = qword_1022A01D8;
    v20 = *a3;
    v21 = sub_1001B49F8(*a3);
    v24[0] = 67109378;
    v24[1] = v20;
    v25 = 2080;
    v26 = v21;
    LODWORD(v23) = 18;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "CLIENT: register for notification, %d, %s", v24, v23);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  v14 = sub_100129730(a1, a2, (int *)a3, (__int128 *)a4);
  if (v14 && *a3 <= 2)
  {
    sub_1000C49B0(a1, 1);
    sub_1000C4CAC(a1);
  }
  return v14;
}

uint64_t sub_1000C3AC4(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  a1[5168] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3C80);
}

uint64_t sub_1000C3AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3C80);
}

BOOL sub_1000C3AF8(uint64_t a1, __int32 a2, int *a3, __int128 *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  _BOOL8 v11;
  NSObject *v12;
  __int32 v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  __int32 v17;
  const char *v18;
  uint64_t v20;
  __int32 v21;
  id v22;
  char *v23;
  int32x4_t v24;
  __int32 *v25;
  __int16 v26;
  id v27;
  uint8_t buf[8];
  __int16 v29;
  const char *v30;
  __int16 v31;
  __int32 v32;
  __int16 v33;
  id v34;
  __int16 v35;
  uint64_t v36;

  v24.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 1;
  v24.i32[0] = 1;
  v24.i32[1] = sub_10142DEC4((int *)buf);
  v8 = *(unsigned __int8 *)(a1 + 5168);
  v9 = sub_1005EE584();
  v10 = (int *)(a1 + 5124);
  *(_DWORD *)buf = 2;
  if (v8)
    sub_1005FBA78(v9, (unsigned int *)buf, &v24, v10, &v24.i32[2], a3);
  else
    sub_1005FC3F8(v9, (unsigned int *)buf, &v24, v10, &v24.i32[2], a3, (uint64_t)a4);
  *(_BYTE *)(a1 + 5168) = 0;
  v11 = sub_100129730(a1, v24.i32[2], a3, a4);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v13 = v24.i32[2];
    *(_QWORD *)buf = &v24.i64[1];
    v14 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v24.i32[2], (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
    v15 = *a3;
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    v32 = v13;
    v33 = 2114;
    v34 = v14;
    v35 = 2050;
    v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,registration\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x2Cu);
  }
  if (!*a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10214C5C0);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v17 = v24.i32[2];
      *(_QWORD *)buf = &v24.i64[1];
      v18 = (const char *)objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v24.i32[2], (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v17;
      v29 = 2082;
      v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#wigo,on,LocationController,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10214C5C0);
      v20 = qword_1022A0078;
      v21 = v24.i32[2];
      v25 = &v24.i32[2];
      v22 = objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v24.i32[2], (uint64_t)&unk_101B9EB60, &v25)[8], "description"), "UTF8String");
      LODWORD(v25) = 67240450;
      HIDWORD(v25) = v21;
      v26 = 2082;
      v27 = v22;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#wigo,on,LocationController,%{public}d,%{public}s", &v25, 18, v24.i64[0]);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10214C478);
  }
  sub_1000C3EEC((uint64_t **)a1, a3);
  return v11;
}

uint64_t **sub_1000C3EEC(uint64_t **result, int *a2)
{
  uint64_t **v4;
  int v5;

  if (*a2 == 15 || *a2 == 0)
  {
    v4 = result;
    v5 = *a2;
    result = (uint64_t **)sub_1001B7864((uint64_t)result, &v5, 1);
    if ((int)result >= 2)
      return sub_1000C6470(v4, a2);
  }
  return result;
}

uint64_t sub_1000C3F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v9;
  __int16 v10;
  int v11;
  int v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &v9);
}

uint64_t sub_1000C3F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3C80);
}

uint64_t sub_1000C3F94(_QWORD *a1, int a2, unsigned int *a3, uint64_t a4)
{
  _BOOL4 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  std::chrono::steady_clock::time_point v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unsigned int v40;

  HIDWORD(v24) = a2;
  v7 = sub_1000C349C((uint64_t)a1, a2, a3, (uint64_t *)a4);
  result = 1;
  if (v7 && !*a3)
  {
    v9 = a1[84];
    v10 = a1[87];
    v11 = (sub_1000C4240() & (*(_DWORD *)(a4 + 24) == 1)) == 0;
    v12 = 85;
    if (!v11)
      v12 = 82;
    sub_1000C6190((uint64_t **)&a1[v12], (int *)&v24 + 1, (_DWORD *)&v24 + 1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v14 = a1[84];
      v15 = a1[87];
      v16 = *a3;
      *(_DWORD *)buf = 134349824;
      v34 = v14;
      v35 = 2050;
      v36 = v15;
      v37 = 1026;
      v38 = HIDWORD(v24);
      v39 = 1026;
      v40 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "regionalClients,%{public}lu, indoorClients,%{public}lu, client, %{public}d, notification,%{public}d", buf, 0x22u);
    }
    v17 = -v10;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v20 = a1[84];
      v21 = a1[87];
      v22 = *a3;
      v25 = 134349824;
      v26 = v20;
      v27 = 2050;
      v28 = v21;
      v29 = 1026;
      v30 = HIDWORD(v24);
      v31 = 1026;
      v32 = v22;
      LODWORD(v24) = 34;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "regionalClients,%{public}lu, indoorClients,%{public}lu, client, %{public}d, notification,%{public}d", &v25, v24);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v19 = a1[18];
    if (v9 != v17 || a1[84] == -a1[87])
    {
      sub_1002441B8(v19, v18.__d_.__rep_);
      return 1;
    }
    else
    {
      return sub_100243CF4(v19, v18.__d_.__rep_, a3);
    }
  }
  return result;
}

uint64_t sub_1000C4240()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  return byte_102303E08;
}

uint64_t sub_1000C4280(uint64_t a1, int a2, int *a3, uint64_t *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  NSObject *v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;
  __int128 v31;
  int v32;
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t *v43;
  __int16 v44;
  uint64_t v45;

  v32 = a2;
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_21;
  v10 = a1 + 64;
  do
  {
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 < v6;
    if (v11 >= v6)
      v13 = (uint64_t *)v7;
    else
      v13 = (uint64_t *)(v7 + 8);
    if (!v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 64)
    goto LABEL_21;
  if (v6 < *(_DWORD *)(v10 + 32))
    goto LABEL_21;
  v16 = *(_QWORD *)(v10 + 48);
  v14 = v10 + 48;
  v15 = v16;
  if (!v16)
    goto LABEL_21;
  v17 = (uint64_t **)(v14 - 8);
  v18 = v14;
  do
  {
    v19 = *(_DWORD *)(v15 + 32);
    v20 = v19 < a2;
    if (v19 >= a2)
      v21 = (uint64_t *)v15;
    else
      v21 = (uint64_t *)(v15 + 8);
    if (!v20)
      v18 = v15;
    v15 = *v21;
  }
  while (*v21);
  if (v18 != v14 && *(_DWORD *)(v18 + 32) <= a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v32;
      v26 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v32, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
      v27 = *a3;
      *(_QWORD *)buf = &v32;
      v28 = sub_100117BEC(v17, &v32, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
      v29 = *a4;
      *(_DWORD *)buf = 68290306;
      *(_DWORD *)&buf[4] = 0;
      v34 = 2082;
      v35 = "";
      v36 = 1026;
      v37 = a2;
      v38 = 2114;
      v39 = v26;
      v40 = 2050;
      v41 = v27;
      v42 = 2050;
      v43 = v28;
      v44 = 2050;
      v45 = v29;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocationController,updateRegistrationInfoForClient\", \"id\":%{public}d, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"from desiredAccuracy\":\"%{public}.1f\", \"to desiredAccuracy\":\"%{public}.1f\"}", buf, 0x40u);
    }
    *(_QWORD *)buf = &v32;
    v30 = sub_100117BEC(v17, &v32, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v31 = *(_OWORD *)a4;
    *(_OWORD *)((char *)v30 + 52) = *(_OWORD *)((char *)a4 + 12);
    *(_OWORD *)(v30 + 5) = v31;
    v6 = *a3;
    v22 = 1;
  }
  else
  {
LABEL_21:
    v22 = 0;
  }
  if (v6 == 15 || v6 == 0)
    sub_1000C6470((uint64_t **)a1, a3);
  return v22;
}

BOOL sub_1000C44FC(uint64_t a1, int a2, unsigned int *a3, uint64_t *a4)
{
  _BOOL8 v6;
  unsigned int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v12;
  char *v13;
  _DWORD v14[2];
  __int16 v15;
  unsigned int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  unsigned int v20;

  v6 = sub_1000C2FAC(a1, a2, a3, a4);
  if (v6)
    sub_1000C473C(a1, a3);
  if (!*a3)
  {
    *(_DWORD *)buf = 0;
    v7 = sub_1001B7864(a1, (int *)buf, 1);
    v8 = *(_DWORD *)(a1 + 3340);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_DWORD *)(a1 + 3340);
      *(_DWORD *)buf = 67240448;
      v18 = v10;
      v19 = 1026;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "updateRegistrationInfoForClient,prevNumberOfActiveGNSSClients,%{public}d,numberOfActiveGpsClients,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v12 = *(_DWORD *)(a1 + 3340);
      v14[0] = 67240448;
      v14[1] = v12;
      v15 = 1026;
      v16 = v7;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "updateRegistrationInfoForClient,prevNumberOfActiveGNSSClients,%{public}d,numberOfActiveGpsClients,%{public}d", v14, 14);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    if (v8 != v7)
      sub_10004FFE4(a1, v7 > *(_DWORD *)(a1 + 3340), v7, (int *)a3);
  }
  return v6;
}

uint64_t sub_1000C473C(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;

  if (!*a2)
  {
    v2 = result + 120;
    v3 = sub_1001AFF54(result, 0);
    return sub_1000C477C(v2, v3);
  }
  return result;
}

uint64_t sub_1000C477C(uint64_t result, int a2)
{
  uint64_t v3;
  int *v4;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v3 = result;
  if (*(_DWORD *)(result + 600) != a2 || !*(_QWORD *)(result + 672) || !*(_QWORD *)(result + 640))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v4 = (int *)(v3 + 600);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *v4;
      *(_DWORD *)buf = 67240448;
      v13 = v6;
      v14 = 1026;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "OperatingModeFrom,%{public}d,OperatingModeTo,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7 = *v4;
      v9[0] = 67240448;
      v9[1] = v7;
      v10 = 1026;
      v11 = a2;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "OperatingModeFrom,%{public}d,OperatingModeTo,%{public}d", v9, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::updateOperatingMode(CLLocationProvider_Type::OperatingMode)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    *(_QWORD *)(v3 + 680) = *(_QWORD *)v4;
    *(_WORD *)(v3 + 688) = *(_WORD *)(v3 + 608);
    sub_100858280((_QWORD *)(v3 + 696), v3 + 616);
    sub_100858280((_QWORD *)(v3 + 728), v3 + 648);
    sub_10084A198((uint64_t (***)())v3, a2);
    return sub_10006028C(v3 + 2624, 15);
  }
  return result;
}

void sub_1000C49B0(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  const char *v7;
  const char *v8;
  const std::string::value_type *v9;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  std::string v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  std::string *v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  std::string *v31;
  __int16 v32;
  int v33;

  memset(&v14, 0, sizeof(v14));
  *(_DWORD *)buf = 0;
  v4 = sub_1001B7864(a1, (int *)buf, 1);
  *(_DWORD *)buf = 1;
  v5 = sub_1001B7864(a1, (int *)buf, 1);
  *(_DWORD *)buf = 2;
  v6 = sub_1001B7864(a1, (int *)buf, 1);
  v7 = "Fine";
  v8 = "None";
  if (v6 > 0)
    v8 = "Coarse";
  if (v5 <= 0)
    v7 = v8;
  if (v4 <= 0)
    v9 = v7;
  else
    v9 = "Best";
  std::string::assign(&v14, v9);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102151258);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 67241218;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 1026;
    v29 = v6;
    v30 = 2082;
    v31 = v11;
    v32 = 1026;
    v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102151258);
    v12 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v15[0] = 67241218;
    v15[1] = v4;
    v16 = 1026;
    v17 = v5;
    v18 = 1026;
    v19 = v6;
    v20 = 2082;
    v21 = v12;
    v22 = 1026;
    v23 = a2;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d", v15, 36);
    sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::logRequiredNotificationLevel(BOOL)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1000C4C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000C4CAC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  double *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double *v22;
  double *v23;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  uint64_t v40;
  double v45;
  NSObject *v46;
  CFAbsoluteTime v47;
  NSObject *v48;
  NSObject *v49;
  CFAbsoluteTime Current;
  NSObject *v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  double v64;
  double v65;
  uint64_t v66;
  int v67;
  double v68;
  int v69;
  unint64_t v70;
  _BYTE v71[24];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _BYTE buf[22];
  __int16 v87;
  uint64_t v88;

  *(_DWORD *)buf = 0;
  if (sub_1001B7864(a1, (int *)buf, 1)
    || (*(_DWORD *)buf = 2, sub_1001B7864(a1, (int *)buf, 1))
    || (*(_DWORD *)buf = 1, sub_1001B7864(a1, (int *)buf, 1)))
  {
    v2 = 0;
    v3 = 0;
    v66 = a1;
    v4 = (_QWORD *)(a1 + 64);
    v5 = -1.0;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = dword_101BBF5D8[v2];
        v8 = v4;
        do
        {
          v9 = *(_DWORD *)(v6 + 32);
          v10 = v9 < v7;
          if (v9 >= v7)
            v11 = (uint64_t *)v6;
          else
            v11 = (uint64_t *)(v6 + 8);
          if (!v10)
            v8 = (_QWORD *)v6;
          v6 = *v11;
        }
        while (*v11);
        if (v8 != v4 && v7 >= *((_DWORD *)v8 + 8))
        {
          v12 = (double *)v8[5];
          if (v12 != (double *)(v8 + 6))
          {
            do
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102151238);
              v17 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                v18 = off_102151178[v2];
                v19 = v8[7];
                v20 = *((_QWORD *)v12 + 6);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v18;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v19;
                v87 = 2048;
                v88 = v20;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf", buf, 0x20u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102151238);
                v13 = off_102151178[v2];
                v14 = v8[7];
                v15 = *((_QWORD *)v12 + 6);
                v69 = 136315650;
                v70 = (unint64_t)v13;
                *(_WORD *)v71 = 2048;
                *(_QWORD *)&v71[2] = v14;
                *(_WORD *)&v71[10] = 2048;
                *(_QWORD *)&v71[12] = v15;
                LODWORD(v64) = 32;
                v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf", (const char *)&v69, *(_QWORD *)&v64, v65);
                sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v16);
                if (v16 != buf)
                  free(v16);
              }
              v21 = v3 ^ 1 | (v12[6] < v5);
              if ((v3 ^ 1) & 1 | (v12[6] < v5))
                v5 = v12[6];
              v22 = (double *)*((_QWORD *)v12 + 1);
              if (v22)
              {
                do
                {
                  v23 = v22;
                  v22 = *(double **)v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  v23 = (double *)*((_QWORD *)v12 + 2);
                  _ZF = *(_QWORD *)v23 == (_QWORD)v12;
                  v12 = v23;
                }
                while (!_ZF);
              }
              v3 |= v21;
              v12 = v23;
            }
            while (v23 != (double *)(v8 + 6));
          }
        }
      }
      ++v2;
    }
    while (v2 != 3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v25 = v66;
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(v66 + 1024);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v54 = *(_QWORD *)(v66 + 1024);
      v69 = 134218240;
      v70 = *(_QWORD *)&v5;
      *(_WORD *)v71 = 2048;
      *(_QWORD *)&v71[2] = v54;
      LODWORD(v64) = 22;
      v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf", COERCE_DOUBLE(&v69), v64);
      sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v55);
      if (v55 != buf)
        free(v55);
    }
    if (v5 > 0.0 && v5 == *(double *)(v66 + 1024))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v28 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(_QWORD *)(v66 + 1024);
        objc_msgSend(*(id *)(v66 + 1016), "nextFireTime");
        v31 = v30;
        objc_msgSend(*(id *)(v66 + 1016), "nextFireDelay");
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v31;
        v87 = 2048;
        v88 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v33 = qword_1022A01D8;
        v34 = *(_QWORD *)(v66 + 1024);
        objc_msgSend(*(id *)(v66 + 1016), "nextFireTime");
        v36 = v35;
        objc_msgSend(*(id *)(v66 + 1016), "nextFireDelay");
        v69 = 134218496;
        v70 = v34;
        *(_WORD *)v71 = 2048;
        *(_QWORD *)&v71[2] = v36;
        *(_WORD *)&v71[10] = 2048;
        *(_QWORD *)&v71[12] = v37;
        LODWORD(v64) = 32;
        v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)", COERCE_DOUBLE(&v69), v64, v65);
        sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v38);
        if (v38 != buf)
          free(v38);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v39 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v40 = *(_QWORD *)(v66 + 1024);
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "minimum distance changed to %.3f from %.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v56 = *(_QWORD *)(v66 + 1024);
        v69 = 134218240;
        v70 = *(_QWORD *)&v5;
        *(_WORD *)v71 = 2048;
        *(_QWORD *)&v71[2] = v56;
        LODWORD(v64) = 22;
        v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "minimum distance changed to %.3f from %.3f", COERCE_DOUBLE(&v69), v64);
        sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v57);
        if (v57 != buf)
          free(v57);
      }
      *(double *)(v66 + 1024) = v5;
      *(double *)(v66 + 1032) = v5 / 250.0;
      v69 = 0xFFFF;
      *(_QWORD *)v71 = 0;
      v70 = 0;
      *(_OWORD *)&v71[8] = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      v72 = _Q0;
      v73 = _Q0;
      v74 = _Q0;
      v75 = 0;
      v77 = 0;
      v78 = 0;
      v76 = 0xBFF0000000000000;
      v79 = 0;
      v80 = 0xBFF0000000000000;
      v81 = 0x7FFFFFFF;
      v83 = 0;
      v84 = 0;
      v82 = 0;
      v85 = 0;
      if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v66 + 232))(v66, &v69))
      {
        v45 = sub_1000C5B00(v66, (uint64_t)&v69);
        if (v45 <= CFAbsoluteTimeGetCurrent() + 15.0)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102151238);
          v49 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            Current = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v45 - Current;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "scheduling location requests for %.3fs later", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102151238);
            v62 = qword_1022A01D8;
            v67 = 134217984;
            v68 = v45 - CFAbsoluteTimeGetCurrent();
            v63 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 2, "scheduling location requests for %.3fs later", COERCE_DOUBLE(&v67));
            sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v63);
            if (v63 != buf)
              free(v63);
            v25 = v66;
          }
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102151238);
          v46 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            v47 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v45 - v47;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "turning off location requests and re-scheduling for %.3fs later", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102151238);
            v60 = qword_1022A01D8;
            v67 = 134217984;
            v68 = v45 - CFAbsoluteTimeGetCurrent();
            v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "turning off location requests and re-scheduling for %.3fs later", COERCE_DOUBLE(&v67));
            sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v61);
            if (v61 != buf)
              free(v61);
            v25 = v66;
          }
          objc_msgSend(*(id *)(*(_QWORD *)(v25 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v25 + 168) + 8), 0);
          objc_msgSend(*(id *)(*(_QWORD *)(v25 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v25 + 168) + 8), 1);
          objc_msgSend(*(id *)(*(_QWORD *)(v25 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v25 + 168) + 8), 2);
          v67 = 0;
          *(_QWORD *)buf = &v67;
          *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 1040), &v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
          v67 = 1;
          *(_QWORD *)buf = &v67;
          *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 1040), &v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
          v67 = 2;
          *(_QWORD *)buf = &v67;
          *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 1040), &v67, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
        }
        objc_msgSend(*(id *)(v25 + 1016), "setNextFireTime:", v45);
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v48 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)buf = 68289026;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no location currently available, starting it immediately\"}", buf, 0x12u);
        }
        objc_msgSend(*(id *)(v66 + 1016), "setNextFireDelay:", 0.0);
      }
    }
    if (*(double *)(v25 + 1088) != -1.0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v51 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v52 = *(_QWORD *)(v25 + 1088);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = 0xBFF0000000000000;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v52;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "wake interval changed to %.3f from %.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v58 = *(_QWORD *)(v25 + 1088);
        v69 = 134218240;
        v70 = 0xBFF0000000000000;
        *(_WORD *)v71 = 2048;
        *(_QWORD *)&v71[2] = v58;
        LODWORD(v64) = 22;
        v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "wake interval changed to %.3f from %.3f", COERCE_DOUBLE(&v69), v64);
        sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::checkMinimumDistanceFilter()", "%s\n", v59);
        if (v59 != buf)
          free(v59);
      }
      *(_QWORD *)(v25 + 1088) = 0xBFF0000000000000;
      sub_1007521CC(v25);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1024) = _Q0;
  }
}

CFAbsoluteTime sub_1000C5B00(uint64_t a1, uint64_t a2)
{
  int v5;
  int v6;
  int v7;

  v5 = 0;
  if (!sub_1001B7864(a1, &v5, 1))
  {
    v6 = 2;
    if (!sub_1001B7864(a1, &v6, 1))
    {
      v7 = 1;
      if (!sub_1001B7864(a1, &v7, 1))
        return 1.79769313e308;
    }
  }
  if (*(double *)(a1 + 1024) >= 0.0 && *(double *)(a2 + 20) >= 0.0)
    return *(double *)(a2 + 76) + *(double *)(a1 + 1032);
  return CFAbsoluteTimeGetCurrent();
}

uint64_t sub_1000C5BB4(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v19;
  _OWORD v20[8];
  _OWORD v21[35];
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  void *v24;
  char v25;
  std::__shared_weak_count *v26;
  id v27;

  sub_100129CA0((uint64_t)v20);
  v19 = 0;
  v4 = (*(uint64_t (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, &v19, v20);
  if ((_DWORD)v4)
  {
    v5 = v20[7];
    a2[6] = v20[6];
    a2[7] = v5;
    a2[8] = v21[0];
    *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)((char *)v21 + 12);
    v6 = v20[3];
    a2[2] = v20[2];
    a2[3] = v6;
    v7 = v20[5];
    a2[4] = v20[4];
    a2[5] = v7;
    v8 = v20[1];
    *a2 = v20[0];
    a2[1] = v8;
  }

  v9 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v25 < 0)
    operator delete(v24);
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v4;
}

void sub_1000C5D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5D30(uint64_t a1, uint64_t a2, int *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  id v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  int v23;
  int v24;
  __int16 v25;
  id v26;
  uint8_t buf[8];
  __int16 v28;
  id v29;

  HIDWORD(v20) = a2;
  if (!*a3)
  {
    *(_QWORD *)buf = (char *)&v20 + 4;
    v5 = objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), (int *)&v20 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description");
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = HIDWORD(v20);
      v8 = objc_msgSend(v5, "UTF8String");
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&buf[4] = v7;
      v28 = 2082;
      v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,on,GnssProviderBare,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v16 = qword_1022A0078;
      v17 = HIDWORD(v20);
      v18 = objc_msgSend(v5, "UTF8String");
      v23 = 67240450;
      v24 = v17;
      v25 = 2082;
      v26 = v18;
      LODWORD(v20) = 18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#wigo,on,GnssProviderBare,%{public}d,%{public}s", &v23, v20);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    v21[0] = CFSTR("ServiceName");
    v21[1] = CFSTR("Register");
    v22[0] = v5;
    v22[1] = &__kCFBooleanTrue;
    PLLogRegisteredEvent(4, CFSTR("gpsactivation"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2), 0);
    a2 = HIDWORD(v20);
  }
  v9 = sub_1000C3F80(a1, a2, (uint64_t)a3);
  if ((_DWORD)v9)
  {
    *(_DWORD *)buf = *a3;
    if ((int)sub_1001B7864(a1, (int *)buf, 1) >= 2)
      sub_1000C473C(a1, a3);
    if (!*a3)
    {
      *(_DWORD *)buf = 0;
      v10 = sub_1001B7864(a1, (int *)buf, 1);
      sub_10004FFE4(a1, 1, v10, a3);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v12 = *a3;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = HIDWORD(v20);
      v28 = 1026;
      LODWORD(v29) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Registering for client,%{public}d,notification,%{public}d,failed", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v14 = *a3;
      v23 = 67240448;
      v24 = HIDWORD(v20);
      v25 = 1026;
      LODWORD(v26) = v14;
      LODWORD(v20) = 14;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Registering for client,%{public}d,notification,%{public}d,failed", &v23, v20);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  return v9;
}

uint64_t **sub_1000C6190(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL sub_1000C6248(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  NSObject *v8;
  int v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v21[688];
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  void *__p;
  char v25;
  std::__shared_weak_count *v26;
  id v27;
  uint64_t buf;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;

  sub_100129CA0((uint64_t)v21);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v8 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v9 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, v21);
    buf = 68289282;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"cached location\", \"found\":%{public}d}", (uint8_t *)&buf, 0x18u);
  }
  v10 = sub_100129730(a1, a2, a3, a4);

  v11 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v25 < 0)
    operator delete(__p);
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v10;
}

void sub_1000C6444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1000C6470(uint64_t **result, int *a2)
{
  uint64_t v3;
  __int128 v9;
  __int16 v10;
  int v11;
  int v12;
  _DWORD *v13;

  if (*a2 == 15 || *a2 == 0)
  {
    v3 = (uint64_t)result;
    if (*((_DWORD *)result + 82))
    {
      *(_QWORD *)&v9 = result + 41;
      result = sub_1001B2798(result + 30, (int *)result + 82, (uint64_t)&unk_101B9EB60, (_DWORD **)&v9);
      if (*((_BYTE *)result + 903))
      {
        __asm { FMOV            V0.2D, #-1.0 }
        v9 = _Q0;
        v10 = 0;
        v12 = 0;
        v11 = sub_1001AFF54(v3, *a2);
        v13 = (_DWORD *)(v3 + 328);
        sub_100041CE0((uint64_t **)(v3 + 264), (int *)(v3 + 328), (uint64_t)&unk_101B9EB60, &v13);
        LODWORD(v13) = 0;
        sub_1001B3ABC();
      }
    }
  }
  return result;
}

uint64_t sub_1000C6538(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMotion,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssAssistanceMotion,stop", v16, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::stop()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_100013704((_BYTE *)a1);
  sub_10022F300((_BYTE *)a1);
  v3 = *(void ***)(a1 + 576);
  v4 = *(void ***)(a1 + 584);
  if (v4 == v3)
  {
    v8 = (_QWORD *)(a1 + 608);
    v4 = *(void ***)(a1 + 576);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 600);
    v6 = &v3[v5 >> 4];
    v7 = (uint64_t)*v6 + 304 * (v5 & 0xF);
    v8 = (_QWORD *)(a1 + 608);
    v9 = *(uint64_t *)((char *)v3 + (((*(_QWORD *)(a1 + 608) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 304 * ((*(_DWORD *)(a1 + 608) + (int)v5) & 0xF);
    if (v7 != v9)
    {
      do
      {
        sub_100067A50(v7 + 248);
        v7 += 304;
        if (v7 - (_QWORD)*v6 == 4864)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != v9);
      v4 = *(void ***)(a1 + 584);
      v3 = *(void ***)(a1 + 576);
    }
  }
  *v8 = 0;
  v11 = (char *)v4 - (char *)v3;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v3 = (void **)(*(_QWORD *)(a1 + 576) + 8);
      *(_QWORD *)(a1 + 576) = v3;
      v11 = *(_QWORD *)(a1 + 584) - (_QWORD)v3;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v12 = 8;
    goto LABEL_19;
  }
  if (v11 >> 3 == 2)
  {
    v12 = 16;
LABEL_19:
    *(_QWORD *)(a1 + 600) = v12;
  }
  sub_100238A38((uint64_t *)(a1 + 472));
  sub_10041250C((_QWORD *)(a1 + 768));
  *(_DWORD *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1059) = 0;
  sub_10041250C((_QWORD *)(a1 + 840));
  sub_10041250C((_QWORD *)(a1 + 912));
  sub_10041250C((_QWORD *)(a1 + 984));
  *(_BYTE *)(a1 + 466) = 0;
  CLMotionActivity::init((CLMotionActivity *)(a1 + 320));
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  result = CLMotionActivity::init((CLMotionActivity *)(a1 + 616));
  *(_BYTE *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  return result;
}

uint64_t sub_1000C6828@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  char v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  pthread_mutex_t *v27;
  __int16 v28;
  _DWORD v29[2];
  __int16 v30;
  int v31;
  uint8_t buf[16];
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  char v36;

  v10 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  (*(void (**)(void))(v10 + 16))();
  v28 = 256;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_1000C78C4(a4, a2[2]);
  sub_1000C7A5C(*(uint64_t **)(a1 + 96), (uint64_t)v25);
  v13 = (_QWORD *)*a2;
  v11 = a2 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    while (1)
    {
      if (*((_DWORD *)v12 + 8))
      {
        sub_10194F308();
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 674, "updateAccessTimestampsIfNecessary");
        __break(1u);
      }
      v24 = *(_QWORD *)((char *)v12 + 36);
      v14 = sub_1000C78BC(*(uint64_t **)(a1 + 96));
      if (!v15)
        break;
      if ((uint64_t)vabdd_f64(a5, *(double *)&v14) < a3)
        goto LABEL_11;
      v16 = sub_1011581D8(*(uint64_t **)(a1 + 96), (int)&v24);
LABEL_12:
      *(_OWORD *)buf = *((_OWORD *)v12 + 2);
      v33 = v12[6];
      if (*((char *)v12 + 79) < 0)
      {
        sub_100115CE4(&__p, (void *)v12[7], v12[8]);
      }
      else
      {
        __p = *(_OWORD *)(v12 + 7);
        v35 = v12[9];
      }
      v36 = v16;
      sub_1000C708C(a4, (__int128 *)buf);
      if (SHIBYTE(v35) < 0)
        operator delete((void *)__p);
      v18 = (_QWORD *)v12[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v12[2];
          v20 = *v19 == (_QWORD)v12;
          v12 = v19;
        }
        while (!v20);
      }
      v12 = v19;
      if (v19 == v11)
        goto LABEL_28;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174913;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)&buf[8] = 1025;
      *(_DWORD *)&buf[10] = HIDWORD(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "attempted to update timestamp for tile that does not exist, x, %{private}d, y, %{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
      v29[0] = 67174913;
      v29[1] = v24;
      v30 = 1025;
      v31 = HIDWORD(v24);
      LODWORD(v23) = 14;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "attempted to update timestamp for tile that does not exist, x, %{private}d, y, %{private}d", v29, v23);
      sub_100512490("Generic", 1, 0, 0, "std::vector<std::pair<TileId, BOOL>> CLWifiAccessPointLocationService::updateAccessTimestampsIfNecessary(const std::set<TileId> &, cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::seconds) const", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
LABEL_11:
    v16 = 0;
    goto LABEL_12;
  }
LABEL_28:
  result = sub_1000C7B24(v25);
  if (HIBYTE(v28))
  {
    if ((_BYTE)v28)
      return pthread_mutex_unlock(v27);
    else
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  }
  return result;
}

void sub_1000C6BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t buf,__int16 a28,__int16 a29,uint64_t a30,__int16 __p_4)
{
  void *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;

  sub_1000C7B24(&a17);
  if (a2 == 3)
  {
    v33 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v34 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"sqlite error updating access timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v36 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v37;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sqlite error updating access timestamps", "{\"msg%{public}.0s\":\"sqlite error updating access timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else if (a2 == 2)
  {
    v38 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v39 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"no database connection while updating timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v41 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v42 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v42;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "no database connection while updating timestamps", "{\"msg%{public}.0s\":\"no database connection while updating timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1)
    {
      sub_1011B6E1C((void ***)&buf);
      sub_10187E514((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
    v43 = __cxa_begin_catch(a1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    v44 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"runtime error while updating access timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    v46 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      v47 = (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 16))(v43);
      buf = 68289283;
      a28 = 2082;
      *(_QWORD *)(&a28 + 1) = "";
      WORD1(a30) = 2081;
      *(uint64_t *)((char *)&a30 + 4) = v47;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "runtime error while updating access timestamps", "{\"msg%{public}.0s\":\"runtime error while updating access timestamps\", \"error\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1000C6B20);
}

uint64_t sub_1000C708C(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492)
      sub_100259694();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    v21[4] = v4;
    v15 = (char *)sub_10025B800(v4, v14);
    v16 = &v15[56 * v11];
    v21[0] = v15;
    v21[1] = v16;
    v21[3] = &v15[56 * v17];
    v18 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = *a2;
    *((_QWORD *)v16 + 2) = v18;
    v19 = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v16[48] = *((_BYTE *)a2 + 48);
    v21[2] = v16 + 56;
    sub_1002103B8(a1, v21);
    v10 = a1[1];
    sub_10021232C((uint64_t)v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(v7 + 48) = *((_BYTE *)a2 + 48);
    v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return v10 - 56;
}

void sub_1000C71F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021232C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7204(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  char *p_p;
  NSObject *v23;
  std::string *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 __p;
  int64_t v34;
  std::string v35;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2 && sub_1000CC4F4(v2))
  {
    *((_BYTE *)&v26.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v26, "SELECT ");
    v3 = std::string::append(&v26, "AccessTimestamp");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v27, " FROM ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a1;
    else
      v8 = *(const std::string::value_type **)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    v10 = std::string::append(&v28, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v29, " WHERE ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v30, "TileX");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v31, " = ? AND ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v32, "TileY");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v35, " = ?");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34 = v20->__r_.__value_.__r.__words[2];
    __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v34 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(*(_QWORD *)(a1 + 104), p_p);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v23 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    LOWORD(v35.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v35, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v35, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(__p) = 0;
    v25 = (std::string *)_os_log_send_and_compose_impl(2, 0, &v35, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", &__p, 2);
    sub_100512490("Generic", 1, 0, 2, "std::optional<cl::chrono::CFAbsoluteTimeClock::time_point> CLWifiTileHeaderDatabase::selectAccessTimestampByTileXY(const WifiTileXY &)", "%s\n", (const char *)v25);
    if (v25 != &v35)
      free(v25);
  }
  return 0;
}

void sub_1000C77B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C78BC(uint64_t *a1)
{
  return sub_1000C7204(*a1);
}

uint64_t sub_1000C78C4(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_100259694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10025B800(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_1002103B8(a1, v7);
    return sub_10021232C((uint64_t)v7);
  }
  return result;
}

void sub_1000C796C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021232C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::runtime_error *exception;
  std::string v7;

  v3 = *(_QWORD *)(a1 + 104);
  if (!v3 || !sub_1000CC4F4(v3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(&v7, "No connection to database when attempting to open transaction.");
    std::runtime_error::runtime_error(exception, &v7);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10212AA20;
  }
  return sub_1000C8074(*(_QWORD *)(a1 + 104), a2);
}

void sub_1000C7A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1000C7A5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C7980(*a1, a2);
}

uint64_t sub_1000C7A64(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    if (std::uncaught_exceptions() <= *(_DWORD *)(a1 + 32))
      sub_1000C7BDC((sqlite3 **)a1);
    else
      sub_100D747AC((sqlite3 **)a1);
  }
  if (*(_BYTE *)(a1 + 25))
  {
    if (*(_BYTE *)(a1 + 24))
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
    else
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
    *(_BYTE *)(a1 + 25) = 0;
  }
  return a1;
}

uint64_t sub_1000C7B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 32) = std::uncaught_exceptions();
  if (a2)
  {
    sub_1000C7E28((sqlite3 **)a1);
    return a1;
  }
  else
  {
    sub_101929600();
    result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteTransaction.mm", 24, "CLSqliteTransaction");
    __break(1u);
  }
  return result;
}

void sub_1000C7BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10187E514(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7BDC(sqlite3 **a1)
{
  uint64_t result;
  NSObject *v3;
  std::runtime_error *exception;
  std::runtime_error *v5;
  std::runtime_error v6;
  std::runtime_error v7;
  char *v8;
  __int16 v9[8];
  std::runtime_error buf;
  std::runtime_error v11;
  std::runtime_error_vtbl *v12;
  int v13;
  std::runtime_error v14;
  std::runtime_error_vtbl *v15;

  result = sqlite3_exec(*a1, "COMMIT", 0, 0, 0);
  if ((_DWORD)result)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
    v3 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__vftable) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#sqlitetransaction, commit failed", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102183210);
      v9[0] = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_1022A0288, 16, "#sqlitetransaction, commit failed", v9, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLSqliteTransaction::commit()", "%s\n", v8);
      if (v8 != (char *)&buf)
        free(v8);
    }
    sub_100D74AD8(a1, *a1, (uint64_t)&buf);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
    v5 = std::runtime_error::runtime_error(exception, &buf);
    v5->__vftable = (std::runtime_error_vtbl *)off_10214FD28;
    v6 = v11;
    v5[2].__vftable = v12;
    v5[1] = v6;
    v11 = (std::runtime_error)0;
    LODWORD(v5[2].__imp_.__imp_) = v13;
    v7 = v14;
    v5[4].__vftable = v15;
    v5[3] = v7;
    v12 = 0;
    v14 = (std::runtime_error)0;
    v15 = 0;
  }
  return result;
}

void sub_1000C7E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  sub_1006F6DDC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7E28(sqlite3 **a1)
{
  uint64_t result;
  NSObject *v3;
  std::runtime_error *exception;
  std::runtime_error *v5;
  std::runtime_error v6;
  std::runtime_error v7;
  char *v8;
  __int16 v9[8];
  std::runtime_error buf;
  std::runtime_error v11;
  std::runtime_error_vtbl *v12;
  int v13;
  std::runtime_error v14;
  std::runtime_error_vtbl *v15;

  result = sqlite3_exec(*a1, "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
  if ((_DWORD)result)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
    v3 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__vftable) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#sqlitetransaction, begin exclusive transaction failed", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102183210);
      v9[0] = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_1022A0288, 16, "#sqlitetransaction, begin exclusive transaction failed", v9, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLSqliteTransaction::beginTransaction()", "%s\n", v8);
      if (v8 != (char *)&buf)
        free(v8);
    }
    sub_100D74AD8(a1, *a1, (uint64_t)&buf);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x48uLL);
    v5 = std::runtime_error::runtime_error(exception, &buf);
    v5->__vftable = (std::runtime_error_vtbl *)off_10214FD28;
    v6 = v11;
    v5[2].__vftable = v12;
    v5[1] = v6;
    v11 = (std::runtime_error)0;
    LODWORD(v5[2].__imp_.__imp_) = v13;
    v7 = v14;
    v5[4].__vftable = v15;
    v5[3] = v7;
    v12 = 0;
    v14 = (std::runtime_error)0;
    v15 = 0;
  }
  return result;
}

void sub_1000C8058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  sub_1006F6DDC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::string v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1015A2E04(&v5, "No valid connection to CLSqliteDatabase database.");
    std::runtime_error::runtime_error(exception, &v5);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10212AA20;
  }
  return sub_1000C7BD8(a2, v2, *(_QWORD *)(a1 + 16));
}

void sub_1000C8108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_1000C8140(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  char *p_p;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[8];
  uint64_t v53;
  void *__p;
  char v55;

  v6 = *a3;
  v5 = a3[1];
  if (v5 != *a3)
  {
    do
    {
      v5 -= 248;
      sub_10091BC34((uint64_t)(a3 + 2), v5);
    }
    while (v5 != v6);
  }
  a3[1] = v6;
  sub_100131938(&v53, (uint64_t)"CLFenceDatabase::getFencesForBundleIncludingOnBehalf", 0);
  sub_100263E50((uint64_t)&v50);
  v7 = sub_100263F7C(&v51, (uint64_t)"SELECT ", 7);
  v8 = sub_100263F7C(v7, (uint64_t)"BundleId", 8);
  v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
  v10 = sub_100263F7C(v9, (uint64_t)"Name", 4);
  v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"Distance", 8);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"DesiredAccuracy", 15);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"SetupComplete", 13);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"Timestamp", 9);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"MonitorFlags", 12);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"OnBehalfBundleId", 16);
  v23 = sub_100263F7C(v22, (uint64_t)", ", 2);
  v24 = sub_100263F7C(v23, (uint64_t)"ReferenceFrame", 14);
  v25 = sub_100263F7C(v24, (uint64_t)", ", 2);
  v26 = sub_100263F7C(v25, (uint64_t)"FenceForeignKey", 15);
  v27 = sub_100263F7C(v26, (uint64_t)", ", 2);
  v28 = sub_100263F7C(v27, (uint64_t)"HandoffTag", 10);
  v29 = sub_100263F7C(v28, (uint64_t)", ", 2);
  v30 = sub_100263F7C(v29, (uint64_t)"FenceHandOffDeviceId", 20);
  v31 = sub_100263F7C(v30, (uint64_t)".", 1);
  v32 = sub_100263F7C(v31, (uint64_t)"DeviceId", 8);
  v33 = sub_100263F7C(v32, (uint64_t)" FROM ", 6);
  v34 = sub_100263F7C(v33, (uint64_t)"GeoFence", 8);
  v35 = sub_100263F7C(v34, (uint64_t)" INNER JOIN ", 12);
  v36 = sub_100263F7C(v35, (uint64_t)"FenceHandOffDeviceId", 20);
  v37 = sub_100263F7C(v36, (uint64_t)" ON ", 4);
  v38 = sub_100263F7C(v37, (uint64_t)"GeoFence", 8);
  v39 = sub_100263F7C(v38, (uint64_t)".", 1);
  v40 = sub_100263F7C(v39, (uint64_t)"DeviceIdIndex", 13);
  v41 = sub_100263F7C(v40, (uint64_t)" = ", 3);
  v42 = sub_100263F7C(v41, (uint64_t)"FenceHandOffDeviceId", 20);
  v43 = sub_100263F7C(v42, (uint64_t)".", 1);
  v44 = sub_100263F7C(v43, (uint64_t)"DeviceIdIndex", 13);
  v45 = sub_100263F7C(v44, (uint64_t)" WHERE ", 7);
  v46 = sub_100263F7C(v45, (uint64_t)"BundleId", 8);
  v47 = sub_100263F7C(v46, (uint64_t)"=? OR ", 6);
  v48 = sub_100263F7C(v47, (uint64_t)"OnBehalfBundleId", 16);
  sub_100263F7C(v48, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v52);
  if (v55 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_1000C91F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a56);
  sub_100131740((id *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_1000C931C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[8];
  int v37;
  uint64_t *v38;
  uint8_t buf[23];
  char v40;

  sub_100263E50((uint64_t)&v34);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v6 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    if (*((char *)a2 + 23) >= 0)
      v31 = a2;
    else
      v31 = (uint64_t *)*a2;
    v37 = 136380675;
    v38 = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Retrieving fences for bundle,%{private}s", &v37, 12);
    v33 = (char *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v32);
    if (v33 != (char *)buf)
      free(v33);
  }
  sub_100131938(&v37, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf", 0);
  v8 = sub_100263F7C(&v35, (uint64_t)"SELECT ", 7);
  v9 = sub_100263F7C(v8, (uint64_t)"BundleIdentifier", 16);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"Identifier", 10);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"ProximityUUID", 13);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"Major", 5);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"Minor", 5);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"DefinitionMask", 14);
  v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
  v21 = sub_100263F7C(v20, (uint64_t)"Options", 7);
  v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
  v23 = sub_100263F7C(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
  v24 = sub_100263F7C(v23, (uint64_t)" FROM ", 6);
  v25 = sub_100263F7C(v24, (uint64_t)"BeaconFences", 12);
  v26 = sub_100263F7C(v25, (uint64_t)" WHERE ", 7);
  v27 = sub_100263F7C(v26, (uint64_t)"BundleIdentifier", 16);
  v28 = sub_100263F7C(v27, (uint64_t)"=? OR ", 6);
  v29 = sub_100263F7C(v28, (uint64_t)"OnBehalfBundleIdentifier", 24);
  sub_100263F7C(v29, (uint64_t)"=?", 2);
  sub_1000CAD6C(a3);
  std::stringbuf::str(buf, v36);
  if (v40 >= 0)
    v30 = (char *)buf;
  else
    v30 = *(char **)buf;
  sub_1000CDA68(a1, v30);
}

void sub_1000C9D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,id a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_100131740(&a49);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1000C9E20(sqlite3_stmt *a1, int a2, char *__s)
{
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int *v24;
  __int16 v25;
  const char *v26;

  v6 = strlen(__s);
  v7 = sqlite3_bind_text(a1, a2, __s, v6, 0);
  v12 = v7;
  if (v7)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v8 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = __s;
      v19 = 1026;
      v20 = a2;
      v21 = 1040;
      v22 = 4;
      v23 = 2098;
      v24 = &v12;
      v25 = 2081;
      v26 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v9 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v10 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = __s;
      v19 = 1026;
      v20 = a2;
      v21 = 1040;
      v22 = 4;
      v23 = 2098;
      v24 = &v12;
      v25 = 2081;
      v26 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v7 == 0;
}

void sub_1000CAC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,os_activity_scope_state_s state,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_10011A5A8(&a17);
  if (a24 < 0)
    operator delete(__p);
  a39 = &a25;
  sub_10091BBB0((void ***)&a39);
  sub_100010174((uint64_t)&a63);
  sub_10011A5A8(&a32);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1000CAD6C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

BOOL sub_1000CADE4(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1000CAE4C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_1000CAE4C(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 896))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const CLNameValuePair &)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return Copy != 0;
}

BOOL sub_1000CB0B0(uint64_t a1)
{
  _BOOL4 v2;
  BOOL v3;
  _BOOL8 result;

  if (!sub_1000CC504(*(_QWORD *)(a1 + 56)))
  {
    sub_1000CE11C(a1 + 72, 0);
    result = sub_1000CC970((double *)(a1 + 72));
LABEL_5:
    sub_100930A84(result, a1);
  }
  v2 = sub_1000CC504(*(_QWORD *)(a1 + 64));
  v3 = v2;
  sub_1000CE11C(a1 + 72, v2);
  result = sub_1000CC970((double *)(a1 + 72));
  if (!v3)
    goto LABEL_5;
  return result;
}

void sub_1000CB348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000CB370(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  _UNKNOWN **v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  _WORD v21[8];
  uint64_t v22;
  _QWORD v23[8];
  uint8_t buf[84];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v21);
    v6 = sub_100263F7C(&v22, (uint64_t)"SELECT * FROM ", 14);
    v7 = *(char *)(a1 + 255);
    if (v7 >= 0)
      v8 = a1 + 232;
    else
      v8 = *(_QWORD *)(a1 + 232);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 255);
    else
      v9 = *(_QWORD *)(a1 + 240);
    sub_100263F7C(v6, v8, v9);
    if (*(_BYTE *)a2)
    {
      v10 = sub_1000CC924((int *)(a2 + 8));
      {
        v11 = sub_100263F7C(&v22, (uint64_t)" WHERE ", 7);
        v12 = "MAC";
        v13 = 3;
      }
      else
      {
        if (!*(_BYTE *)a2)
          goto LABEL_21;
        v15 = sub_1000CC924((int *)(a2 + 8));
          goto LABEL_21;
        v11 = sub_100263F7C(&v22, (uint64_t)" WHERE ", 7);
        v12 = "CKRecordName";
        v13 = 12;
      }
      v16 = sub_100263F7C(v11, (uint64_t)v12, v13);
      sub_100263F7C(v16, (uint64_t)" = ?", 4);
    }
LABEL_21:
    std::stringbuf::str(v19, v23);
    if (v20 >= 0)
      v17 = (char *)v19;
    else
      v17 = (char *)v19[0];
    sub_1000CDA68(a1 + 64, v17);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102182368);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiAssociatedApCentroidDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102182368);
    v21[0] = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiAssociatedApCentroidDatabase!", v21, 2);
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiAssociatedApCentroidDatabaseEntry> CLWifiAssociatedApCentroidDatabase::getEntries(OptionalQueryParam) const", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1000CBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,...)
{
  unint64_t v20;
  va_list va;

  va_start(va, a20);
  STACK[0x210] = v20;
  sub_100B04710((void ***)&STACK[0x210]);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a20 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000CBC6C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  NSObject *v42;
  char *v43;
  void *__p[2];
  char v45;
  uint8_t buf[16];
  uint64_t v47;
  _QWORD v48[8];

  *a2 = 0;
  a2[192] = 0;
  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v3 = sub_100263F7C(&v47, (uint64_t)"SELECT ", 7);
    v4 = sub_100263F7C(v3, (uint64_t)"MAC", 3);
    v5 = sub_100263F7C(v4, (uint64_t)" , ", 3);
    v6 = strlen("Latitude");
    v7 = sub_100263F7C(v5, (uint64_t)"Latitude", v6);
    v8 = sub_100263F7C(v7, (uint64_t)" , ", 3);
    v9 = strlen("Longitude");
    v10 = sub_100263F7C(v8, (uint64_t)"Longitude", v9);
    v11 = sub_100263F7C(v10, (uint64_t)" , ", 3);
    v12 = strlen("Altitude");
    v13 = sub_100263F7C(v11, (uint64_t)"Altitude", v12);
    v14 = sub_100263F7C(v13, (uint64_t)" , ", 3);
    v15 = strlen("HorizontalAccuracy");
    v16 = sub_100263F7C(v14, (uint64_t)"HorizontalAccuracy", v15);
    v17 = sub_100263F7C(v16, (uint64_t)" , ", 3);
    v18 = strlen("VerticalAccuracy");
    v19 = sub_100263F7C(v17, (uint64_t)"VerticalAccuracy", v18);
    v20 = sub_100263F7C(v19, (uint64_t)" , ", 3);
    v21 = strlen("Score");
    v22 = sub_100263F7C(v20, (uint64_t)"Score", v21);
    v23 = sub_100263F7C(v22, (uint64_t)" , ", 3);
    v24 = strlen("Reach");
    v25 = sub_100263F7C(v23, (uint64_t)"Reach", v24);
    v26 = sub_100263F7C(v25, (uint64_t)" , ", 3);
    v27 = sub_100263F7C(v26, (uint64_t)"Channel", 7);
    v28 = sub_100263F7C(v27, (uint64_t)" , ", 3);
    v29 = sub_100263F7C(v28, (uint64_t)"InfoMask", 8);
    v30 = sub_100263F7C(v29, (uint64_t)" , ", 3);
    v31 = strlen("Timestamp");
    sub_100263F7C(v30, (uint64_t)"Timestamp", v31);
    if (!*(_BYTE *)(a1 + 16))
    {
      v32 = sub_100263F7C(&v47, (uint64_t)" , ", 3);
      v33 = strlen("ZaxisHarvestTraces");
      sub_100263F7C(v32, (uint64_t)"ZaxisHarvestTraces", v33);
    }
    v34 = sub_100263F7C(&v47, (uint64_t)" FROM ", 6);
    v35 = *(char *)(a1 + 295);
    if (v35 >= 0)
      v36 = a1 + 272;
    else
      v36 = *(_QWORD *)(a1 + 272);
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 295);
    else
      v37 = *(_QWORD *)(a1 + 280);
    v38 = sub_100263F7C(v34, v36, v37);
    v39 = sub_100263F7C(v38, (uint64_t)" WHERE ", 7);
    v40 = sub_100263F7C(v39, (uint64_t)"MAC", 3);
    sub_100263F7C(v40, (uint64_t)" = ? ", 5);
    std::stringbuf::str(__p, v48);
    if (v45 >= 0)
      v41 = (char *)__p;
    else
      v41 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v41);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v42 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call findByMacAddress() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call findByMacAddress() without a backing database in CLWifiLocationDatabase!", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "std::optional<CLWifiLocationDatabaseEntry> CLWifiLocationDatabase::findByMacAddress(const CLMacAddress &)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
}

void sub_1000CC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a25 < 0)
    operator delete(__p);
  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 8))(a36);
  sub_1018B38B4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_1000CC4F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

BOOL sub_1000CC504(uint64_t a1)
{
  return sub_1000CC4F4(a1 + 64);
}

BOOL sub_1000CC50C(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  sqlite3_int64 v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;

  v6 = sqlite3_bind_int64(a1, a2, a3);
  v11 = v6;
  if (v6)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}lld, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v9 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}lld, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v6 == 0;
}

uint64_t sub_1000CC740(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)a1;
      goto LABEL_6;
    }
LABEL_24:
    sub_1015A2E04(v15, "empty");
    sub_1015A2E04(__p, " ");
    v5 = sub_100B05E8C((uint64_t *)v15, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
LABEL_29:
    if (v16 < 0)
      operator delete(v15[0]);
    return v5;
  }
  v2 = *(unsigned __int8 *)(a1 + 23);
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_24;
  v3 = a1;
LABEL_6:
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = v3 - 1;
  do
  {
    v9 = *(char *)(v8 + v2);
    if (v9 == 58)
    {
      ++v7;
      if (v4 == 2)
      {
        v4 = 0;
        goto LABEL_20;
      }
      if (v4 != 1)
      {
        sub_1015A2E04(v15, "multibyte");
        v11 = sub_100B05E8C((uint64_t *)v15, (uint64_t *)a1);
        goto LABEL_28;
      }
      v4 = 0;
    }
    else
    {
      v10 = v9 - 48;
      if ((v9 - 48) > 9)
      {
        if ((v9 - 65) > 5)
        {
          if ((v9 - 97) > 5)
            goto LABEL_26;
          v10 = v9 - 87;
        }
        else
        {
          v10 = v9 - 55;
        }
      }
      if (v10 == -1)
      {
LABEL_26:
        sub_1015A2E04(v15, "nonhex");
        v11 = sub_100B05E8C((uint64_t *)v15, (uint64_t *)a1);
        goto LABEL_28;
      }
      v5 += (uint64_t)v10 << v6;
      ++v4;
    }
    v6 += 4;
LABEL_20:
    --v2;
  }
  while (v2);
  if (v7 && v7 != 5)
  {
    sub_1015A2E04(v15, "colons");
    v11 = sub_100B05E8C((uint64_t *)v15, (uint64_t *)a1);
LABEL_28:
    v5 = v11;
    goto LABEL_29;
  }
  return v5;
}

void sub_1000CC8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_UNKNOWN **sub_1000CC924(int *a1)
{
  int v1;
  _UNKNOWN **result;

  v1 = *a1 ^ (*a1 >> 31);
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

BOOL sub_1000CC970(double *a1)
{
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_1000CE140(a1, &Current);
}

uint64_t sub_1000CC9A8(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  char v25;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 5);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 6);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 60) = sqlite3_column_int(v13, 7);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v14, 8);
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v15, 9);
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v16, 10);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 88) = sqlite3_column_int(v17, 11);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 92) = sqlite3_column_int(v18, 12);
  v19 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v19, 13);
  v20 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v20, 14);
  v21 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 105) = sqlite3_column_int(v21, 15);
  v22 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v22, 16);
  v23 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v23, 17);
  v24 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v25 = sqlite3_column_int(v24, 18);
  result = 0;
  *(_BYTE *)(a2 + 104) = v25;
  return result;
}

uint64_t sub_1000CCB78(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  NSObject *v28;
  char *v30;
  _WORD v31[8];
  uint64_t v32;
  _QWORD v33[8];
  void *__p[2];
  unsigned __int8 v35;

  v2 = a1 + 64;
  if (sub_1000CC4F4(a1 + 64))
  {
    sub_100263E50((uint64_t)v31);
    v3 = sub_100263F7C(&v32, (uint64_t)"SELECT ", 7);
    v4 = sub_100263F7C(v3, (uint64_t)"Timestamp", 9);
    v5 = sub_100263F7C(v4, (uint64_t)", ", 2);
    v6 = sub_100263F7C(v5, (uint64_t)"Latitude", 8);
    v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
    v8 = sub_100263F7C(v7, (uint64_t)"Longitude", 9);
    v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
    v10 = sub_100263F7C(v9, (uint64_t)"HorizontalAccuracy", 18);
    v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
    v12 = sub_100263F7C(v11, (uint64_t)"Altitude", 8);
    v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
    v14 = sub_100263F7C(v13, (uint64_t)"VerticalAccuracy", 16);
    v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
    v16 = sub_100263F7C(v15, (uint64_t)"Speed", 5);
    v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
    v18 = sub_100263F7C(v17, (uint64_t)"Course", 6);
    v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
    v20 = sub_100263F7C(v19, (uint64_t)"Confidence", 10);
    v21 = sub_100263F7C(v20, (uint64_t)" FROM ", 6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if ((v35 & 0x80u) == 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if ((v35 & 0x80u) == 0)
      v23 = v35;
    else
      v23 = (uint64_t)__p[1];
    v24 = sub_100263F7C(v21, (uint64_t)v22, v23);
    v25 = sub_100263F7C(v24, (uint64_t)" WHERE ", 7);
    v26 = sub_100263F7C(v25, (uint64_t)"ROWID", 5);
    sub_100263F7C(v26, (uint64_t)"=?", 2);
    if ((char)v35 < 0)
      operator delete(__p[0]);
    std::stringbuf::str(__p, v33);
    if ((v35 & 0x80u) == 0)
      v27 = (char *)__p;
    else
      v27 = (char *)__p[0];
    sub_1000CDA68(v2, v27);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214A718);
  v28 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getLocation() without a backing database in CLLocationDatabase!", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214A718);
    v31[0] = 0;
    v30 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getLocation() without a backing database in CLLocationDatabase!", v31, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationDatabase::getLocation(const sqlite3_int64 &, CLDaemonLocation &) const", "%s\n", v30);
    if (v30 != (char *)__p)
      free(v30);
  }
  return 0;
}

void sub_1000CD1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1000CD250(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  char v22;

  sub_100263E50((uint64_t)&v18);
  v2 = sub_100263F7C(&v19, (uint64_t)"SELECT ", 7);
  v3 = strlen("ROWID");
  v4 = sub_100263F7C(v2, (uint64_t)"ROWID", v3);
  v5 = sub_100263F7C(v4, (uint64_t)" FROM ", 6);
  v6 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v6 = *(const char **)v6;
  v7 = strlen(v6);
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"MCC", 3);
  v11 = sub_100263F7C(v10, (uint64_t)"=? AND ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"MNC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"TAC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)"=? AND ", 7);
  v16 = sub_100263F7C(v15, (uint64_t)"CI", 2);
  sub_100263F7C(v16, (uint64_t)"=?", 2);
  std::stringbuf::str(__p, v20);
  if (v22 >= 0)
    v17 = (char *)__p;
  else
    v17 = (char *)__p[0];
  sub_1000CDA68(a1 + 64, v17);
}

void sub_1000CD6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1000CD75C(sqlite3_stmt *a1, int a2, int a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;

  v6 = sqlite3_bind_int(a1, a2, a3);
  v11 = v6;
  if (v6)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1025;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}d, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v9 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1025;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}d, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
    }
  }
  return v6 == 0;
}

void sub_1000CD990(uint64_t a1)
{
  sub_1000CD9B4(a1);
  operator delete();
}

_QWORD *sub_1000CD9B4(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = off_10218DEF0;
  v2 = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    sub_100635B40(*(_QWORD *)(a1 + 8), (uint64_t)"sqlite3_finalize()", v2, 0);
    sub_10063434C(*(_QWORD *)(a1 + 8), v2);
  }
  return sub_1000CDA1C((_QWORD *)a1);
}

_QWORD *sub_1000CDA1C(_QWORD *a1)
{
  *a1 = off_10218DED0;
  sub_1000CDA54(a1[1]);
  return a1;
}

uint64_t sub_1000CDA54(uint64_t a1)
{
  return sub_1000CDA5C(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1000CDA5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_1000CDA68(uint64_t a1, char *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  sub_1000CDB4C(a1, a2);
  operator new();
}

void sub_1000CDB14()
{
  operator delete();
}

sqlite3_stmt *sub_1000CDB4C(uint64_t a1, char *a2)
{
  uint64_t *v2;
  NSObject *v5;
  _QWORD *v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  _QWORD *v17;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    sub_1019026C0();
LABEL_15:
    dispatch_once(&qword_1022A0280, &stru_102149330);
    goto LABEL_4;
  }
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  v2 = &qword_1022A0000;
  if (qword_1022A0280 != -1)
    goto LABEL_15;
LABEL_4:
  v5 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v6 = (_QWORD *)*v6;
    v10 = 68289539;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2081;
    v15 = a2;
    v16 = 2082;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Preparing statement for database\", \"query\":%{private, location:escape_only}s, \"path\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x26u);
  }
  v7 = sub_1000CDD24(*(sqlite3_stmt **)(a1 + 8), a2);
  if (v2[80] != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v8 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Prepared statement\", \"statement\":\"%{public}p\"}", (uint8_t *)&v10, 0x1Cu);
  }
  return v7;
}

sqlite3_stmt *sub_1000CDD24(sqlite3_stmt *result, char *__s)
{
  sqlite3 *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  char *v10;
  int v11;
  char *pzTail;
  sqlite3_stmt *ppStmt;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int *v22;
  __int16 v23;
  const char *v24;

  if (result)
  {
    v3 = result;
    pzTail = 0;
    ppStmt = 0;
    v4 = strlen(__s);
    v11 = sqlite3_prepare_v2(v3, __s, v4, &ppStmt, (const char **)&pzTail);
    if (v11)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v5 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        v6 = sqlite3_errmsg(v3);
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        v15 = 2082;
        v16 = "";
        v17 = 2081;
        v18 = __s;
        v19 = 1040;
        v20 = 4;
        v21 = 2098;
        v22 = &v11;
        v23 = 2081;
        v24 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not prepare statement\", \"query\":%{private, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v7 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        v8 = sqlite3_errmsg(v3);
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&buf[4] = 0;
        v15 = 2082;
        v16 = "";
        v17 = 2081;
        v18 = __s;
        v19 = 1040;
        v20 = 4;
        v21 = 2098;
        v22 = &v11;
        v23 = 2081;
        v24 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not prepare statement", "{\"msg%{public}.0s\":\"Could not prepare statement\", \"query\":%{private, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s}", buf, 0x36u);
      }
      v9 = sqlite3_db_filename(v3, 0);
      if (v9)
        v10 = (char *)v9;
      else
        v10 = "";
      sub_1015A2E04(buf, v10);
      sub_1006361F0(v3, buf, 0, v11);
      if (SBYTE3(v18) < 0)
        operator delete(*(void **)buf);
      return 0;
    }
    else
    {
      return ppStmt;
    }
  }
  return result;
}

void sub_1000CDF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000CDFB0(uint64_t a1)
{
  pthread_t v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 64), "assertInside");
  v2 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v2 == pthread_self();
}

_QWORD *sub_1000CDFEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10218DED0;
  a1[1] = a2;
  a1[2] = a3;
  sub_1000CE030(a2);
  *a1 = off_10218DEF0;
  return a1;
}

uint64_t sub_1000CE030(uint64_t a1)
{
  return sub_1000CE038(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1000CE038(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

char *sub_1000CE044@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 29), *((_QWORD *)result + 30));
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 31);
  return result;
}

_BYTE *sub_1000CE070(_BYTE *a1)
{
  std::logic_error v2;

  if (!*a1)
  {
    std::logic_error::logic_error(&v2, "Attempted to access the value of an uninitialized optional object.");
    v2.__vftable = (std::logic_error_vtbl *)&off_102182470;
    sub_100D480D8(&v2);
  }
  return a1 + 8;
}

void sub_1000CE0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000CE0DC(int *a1)
{
  _DWORD *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
      result = 0;
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

uint64_t sub_1000CE11C(uint64_t result, int a2)
{
  if (a2)
    ++*(_DWORD *)(result + 88);
  else
    ++*(_DWORD *)(result + 92);
  return result;
}

BOOL sub_1000CE140(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a2 - a1[2];
  v3 = (double)*((unint64_t *)a1 + 1);
  if (v2 >= v3)
  {
    (*(void (**)(double *))(*(_QWORD *)a1 + 24))(a1);
    ++*((_DWORD *)a1 + 8);
    (*(void (**)(double *))(*(_QWORD *)a1 + 16))(a1);
    a1[2] = *a2;
  }
  return v2 >= v3;
}

void sub_1000CE1B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  char *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  std::string::value_type __s[8];
  char v20;
  void *__p[2];
  unsigned __int8 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  uint8_t buf[16];
  int64_t v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 && sub_1000CC4F4(v3))
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v23, "SELECT ");
    sub_10005BE30((uint64_t)__p);
    if ((v22 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v5 = v22;
    else
      v5 = (std::string::size_type)__p[1];
    v6 = std::string::append(&v23, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v20 = 6;
    strcpy(__s, " FROM ");
    v8 = std::string::append(&v24, __s, 6uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = *(char *)(a1 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a1;
    else
      v11 = *(const std::string::value_type **)a1;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 23);
    else
      v12 = *(_QWORD *)(a1 + 8);
    v13 = std::string::append(&v25, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v27 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if ((char)v22 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (v27 >= 0)
      v15 = (char *)buf;
    else
      v15 = *(char **)buf;
    sub_1000CDA68(*(_QWORD *)(a1 + 104), v15);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  v16 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021530C0);
    LOWORD(v25.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "not connected to wifi #tile header table", &v25, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectAll()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

void sub_1000CE730(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE84C(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(double *)(result + 8) = a9;
  *(double *)(result + 16) = a10;
  *(double *)(result + 24) = a11;
  *(double *)(result + 32) = a12;
  *(double *)(result + 40) = a13;
  *(double *)(result + 48) = a14;
  *(double *)(result + 56) = a15;
  *(double *)(result + 64) = a16;
  *(_QWORD *)(result + 72) = a4;
  *(_DWORD *)(result + 80) = a5;
  *(_QWORD *)(result + 88) = a6;
  *(_DWORD *)(result + 96) = a7;
  *(_QWORD *)(result + 104) = a17;
  *(_QWORD *)(result + 112) = a18;
  *(_DWORD *)(result + 120) = a8;
  *(_QWORD *)(result + 132) = 0;
  *(_QWORD *)(result + 124) = 0;
  return result;
}

uint64_t sub_1000CE888(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  double Current;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  const char *v24;
  uint8_t *v25;
  _DWORD v26[20];
  uint64_t v27;
  _DWORD v28[24];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint8_t buf[8];
  _DWORD v34[24];
  __int128 v35;
  __int128 v36;
  _DWORD v37[12];
  __int128 v38;
  _QWORD v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  *(_DWORD *)buf = 5;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 6656) + 40))(*(_QWORD *)(a1 + 6656));
    sub_1000E4778(v6);
  }
  sub_1000CEF84(a1 + 6624, a2);
  v7 = *(_QWORD *)(a1 + 8712);
  if (v7)
    sub_100764680(v7);
  v8 = *(_QWORD *)(a1 + 10208);
  if (v8)
    sub_1010A8240(v8);
  if (*(double *)(a1 + 9888) > *(double *)(a2 + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8256) + 24))(*(_QWORD *)(a1 + 8256));
  if (!*(_QWORD *)(a1 + 8248))
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v9 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "IndoorOutdoor detector running without turn detector.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      LOWORD(v28[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor detector running without turn detector.", v28, 2);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::notifyClients(const CLMotionCoprocessorInterface::NotificationData *, BOOL)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 8256) + 16))(*(_QWORD *)(a1 + 8256), *(double *)(a2 + 8));
  *(_QWORD *)(a1 + 9888) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = 7;
  Current = CFAbsoluteTimeGetCurrent();
  if (sub_1000DCDCC(a1 + 3744, &v32, Current))
  {
    v11 = sub_1001FBB04(0);
    buf[0] = sub_100F633BC((_DWORD *)&v32 + 2);
    *(_DWORD *)&buf[4] = HIDWORD(v32);
    v12 = CFAbsoluteTimeGetCurrent();
    v34[0] = sub_10106CE40((_QWORD *)(a1 + 6656), v12, 23.0);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)(v11 + 96) + 40))(v11 + 96, buf);
  }
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  memset(v28, 0, sizeof(v28));
  sub_1000CF518(a2, (uint64_t)v28);
  if (*(_BYTE *)(a1 + 592))
    v28[0] = 18200;
  v13 = *(_DWORD *)(a1 + 376);
  sub_100197040();
  if (sub_100195F08() && v13)
    v28[0] = CLMotionActivity::remapActivityTypeForWheelchairUsers(v28[0]);
  sub_1000CED8C(a1 + 136, (uint64_t)v28);
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v45 = 0;
  v41 = 0u;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  v36 = 0u;
  v35 = 0u;
  memset(v34, 0, sizeof(v34));
  sub_1000CED1C(a1 + 136, (uint64_t)v26);
  *(_QWORD *)buf = v27;
  sub_1000CED1C(a1 + 136, (uint64_t)v34);
  v14 = sub_1000CED64(a1 + 136);
  v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v37[3] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v37[7] = v15;
  v16 = *(_DWORD *)(a2 + 144);
  v37[2] = v14;
  v37[11] = v16;
  v17 = sub_10007099C((_DWORD *)(a1 + 136));
  v18 = 0;
  if (v17)
  {
    if (*(_BYTE *)(a1 + 9624))
      v18 = *(_QWORD *)(a1 + 9696);
    else
      v18 = 0;
  }
  *(_QWORD *)&v38 = v18;
  if (sub_10007099C((_DWORD *)(a1 + 136)))
    v19 = *(_QWORD *)(a1 + 9600);
  else
    v19 = 0;
  *((_QWORD *)&v38 + 1) = v19;
  if (sub_10007099C((_DWORD *)(a1 + 136)))
    v20 = *(_QWORD *)(a1 + 9592);
  else
    v20 = 0;
  v39[0] = v20;
  LOBYTE(v39[1]) = sub_10007099C((_DWORD *)(a1 + 136));
  BYTE1(v39[1]) = a3;
  *(_QWORD *)((char *)&v39[2] + 2) = 0;
  *(_QWORD *)((char *)&v39[1] + 2) = 0;
  sub_1000CED6C(a1 + 136, (unsigned __int8 *)&v39[1] + 2);
  DWORD1(v35) = DWORD1(v29);
  v37[0] = v31;
  v21.n128_f64[0] = CFAbsoluteTimeGetCurrent();
  v22 = *(_QWORD *)(a1 + 8368);
  if (v22)
    sub_100CAD76C(v22, (uint64_t)buf);
  v26[0] = 0;
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 152))(a1, v26, buf, 1, 0xFFFFFFFFLL, 0, v21);
}

uint64_t sub_1000CED1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(result + 88);
  v3 = *(_OWORD *)(result + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(result + 104);
  *(_OWORD *)(a2 + 112) = v3;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(result + 136);
  v4 = *(_OWORD *)(result + 24);
  v5 = *(_OWORD *)(result + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 40);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 72);
  *(_OWORD *)(a2 + 80) = v2;
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v4;
  if (*(_DWORD *)result)
    *(_DWORD *)a2 = *(_DWORD *)result;
  return result;
}

uint64_t sub_1000CED64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_1000CED6C(uint64_t a1, uuid_t dst)
{
  if (*(_DWORD *)a1)
    uuid_copy(dst, (const unsigned __int8 *)(a1 + 168));
  else
    uuid_clear(dst);
}

__n128 sub_1000CED8C(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  unint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  uint64_t *v19;
  double v20;
  double v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;

  v4 = (uint64_t **)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 160);
  if (v5 > 2)
  {
    v19 = *v4;
    v20 = *(double *)(a2 + 80);
    v21 = v20 - *((double *)*v4 + 12);
    if (v21 > 0.0 && v21 < 9.0)
    {
      v29 = *(_QWORD *)(a1 + 152);
      if ((uint64_t **)v29 != v4)
      {
        v30 = 0;
        while (1)
        {
          if (*(_DWORD *)(v29 + 16) == *(_DWORD *)a2)
            ++v30;
          if (v30 >= 2)
            break;
          v29 = *(_QWORD *)(v29 + 8);
          if ((uint64_t **)v29 == v4)
            goto LABEL_16;
        }
        *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
        v31 = *(_OWORD *)(a2 + 16);
        v32 = *(_OWORD *)(a2 + 32);
        v33 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 56) = v33;
        *(_OWORD *)(a1 + 40) = v32;
        *(_OWORD *)(a1 + 24) = v31;
        v34 = *(_OWORD *)(a2 + 80);
        v35 = *(_OWORD *)(a2 + 96);
        v36 = *(_OWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 120) = v36;
        *(_OWORD *)(a1 + 104) = v35;
        *(_OWORD *)(a1 + 88) = v34;
        v20 = *(double *)(a2 + 80);
      }
LABEL_16:
      *(double *)(a1 + 88) = v20;
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
      v23 = *(_OWORD *)(a2 + 16);
      v24 = *(_OWORD *)(a2 + 32);
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 56) = v25;
      *(_OWORD *)(a1 + 40) = v24;
      *(_OWORD *)(a1 + 24) = v23;
      v26 = *(_OWORD *)(a2 + 80);
      v27 = *(_OWORD *)(a2 + 96);
      v28 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 120) = v28;
      *(_OWORD *)(a1 + 104) = v27;
      *(_OWORD *)(a1 + 88) = v26;
    }
    v37 = *v19;
    *(_QWORD *)(v37 + 8) = v19[1];
    *(_QWORD *)v19[1] = v37;
    *(_QWORD *)(a1 + 160) = v5 - 1;
    operator delete(v19);
    v38 = operator new(0x98uLL);
    v39 = *(_OWORD *)(a2 + 112);
    v38[7] = *(_OWORD *)(a2 + 96);
    v38[8] = v39;
    *((_QWORD *)v38 + 18) = *(_QWORD *)(a2 + 128);
    v40 = *(_OWORD *)(a2 + 48);
    v38[3] = *(_OWORD *)(a2 + 32);
    v38[4] = v40;
    v41 = *(_OWORD *)(a2 + 80);
    v38[5] = *(_OWORD *)(a2 + 64);
    v38[6] = v41;
    result = *(__n128 *)(a2 + 16);
    v38[1] = *(_OWORD *)a2;
    v38[2] = result;
    v42 = *(_QWORD **)(a1 + 152);
    v43 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)v38 = v4;
    *((_QWORD *)v38 + 1) = v42;
    *v42 = v38;
    *(_QWORD *)(a1 + 152) = v38;
    *(_QWORD *)(a1 + 160) = v43 + 1;
  }
  else
  {
    v6 = operator new(0x98uLL);
    v7 = *(_OWORD *)(a2 + 112);
    v6[7] = *(_OWORD *)(a2 + 96);
    v6[8] = v7;
    *((_QWORD *)v6 + 18) = *(_QWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 48);
    v6[3] = *(_OWORD *)(a2 + 32);
    v6[4] = v8;
    v9 = *(_OWORD *)(a2 + 80);
    v6[5] = *(_OWORD *)(a2 + 64);
    v6[6] = v9;
    v10 = *(_OWORD *)(a2 + 16);
    v6[1] = *(_OWORD *)a2;
    v6[2] = v10;
    v11 = *(_QWORD **)(a1 + 152);
    *(_QWORD *)v6 = v4;
    *((_QWORD *)v6 + 1) = v11;
    *v11 = v6;
    *(_QWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 160) = v5 + 1;
    v12 = *(_OWORD *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 120) = v14;
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    v15 = *(_OWORD *)(a2 + 16);
    v16 = *(_OWORD *)(a2 + 32);
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 56) = v17;
    *(_OWORD *)(a1 + 40) = v16;
    *(_OWORD *)(a1 + 24) = v15;
    result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  }
  return result;
}

uint64_t sub_1000CEF84(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  int v13;
  double v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _OWORD v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  _BOOL4 v53;
  uint8_t buf[4];
  _BYTE v55[10];
  uint64_t v56;
  __int16 v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;

  v4 = *(_DWORD *)(a1 + 712);
  if (v4 != 0x7FFFFFFF)
  {
    if (*(_BYTE *)(a1 + 1388))
    {
      v5 = *(_DWORD *)(a1 + 716) + 1;
      *(_DWORD *)(a1 + 716) = v5;
      if (v5 >= v4)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
          sub_10023195C(a1 + 8, 13, (uint64_t)buf);
      }
    }
  }
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  sub_1000CF518(a2, (uint64_t)v28);
  sub_100DD30E4(a1, (unsigned int *)v28);
  if (*((_QWORD *)&v31 + 1) != *(_QWORD *)(a1 + 688))
  {
    *(_QWORD *)(a1 + 688) = *((_QWORD *)&v31 + 1);
    v6 = sub_100DD3964(a1, a2);
    if (*(_QWORD *)(a1 + 688))
    {
      v7 = v6;
      v8 = v31;
      v9 = sub_100F72C2C((uint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", DWORD2(v30)));
      v59 = v8;
      v60 = v29;
      v61 = v9;
      v62 = v7;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v10 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)v55 = v9;
        *(_WORD *)&v55[8] = 2050;
        v56 = v8;
        v57 = 1026;
        v58 = v62;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLAS,new AP escalation detected for workout type,%{public}ld,startTime,%{public}f,is early detection,%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102187B78);
        v48 = 134349568;
        v49 = v9;
        v50 = 2050;
        v51 = v8;
        v52 = 1026;
        v53 = v62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,new AP escalation detected for workout type,%{public}ld,startTime,%{public}f,is early detection,%{public}d", &v48, 28);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
        sub_10023195C(a1 + 8, 1, (uint64_t)&v59);
    }
  }
  v11 = *(_QWORD *)(a1 + 488) + 1;
  *(_QWORD *)(a1 + 488) = v11;
  if (v11 >= 0x17)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102187B78);
    v12 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v55 = v13;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v28[0];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Current state of Workout Predictor: %{public}d,motiontype,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
      v22 = *(unsigned __int8 *)(a1 + 24);
      LODWORD(v59) = 67240448;
      HIDWORD(v59) = v22;
      LOWORD(v60) = 1024;
      *(_DWORD *)((char *)&v60 + 2) = v28[0];
      LODWORD(v27) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Current state of Workout Predictor: %{public}d,motiontype,%d", &v59, v27);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *(_QWORD *)(a1 + 488) = 0;
  }
  sub_1000D0CA0((double *)(a1 + 32), a2);
  v14 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 480) > v14)
  {
    v15 = *(uint64_t **)(a1 + 424);
    if (v15)
      sub_100794548(v15);
    v16 = *(uint64_t **)(a1 + 472);
    if (v16)
      sub_100794548(v16);
    nullsub_34(a1 + 1368);
    v14 = *(double *)(a2 + 8);
  }
  *(double *)(a1 + 480) = v14;
  sub_1000CF694((_QWORD **)(a1 + 1368));
  v17 = *(_QWORD *)(a1 + 424);
  if (v17)
    sub_10135C9EC(v17);
  v18 = *(_QWORD *)(a1 + 432);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  sub_1000CF6D8(*(_QWORD *)(a1 + 1432), (double *)(a1 + 32));
  v19 = *(uint64_t **)(a1 + 472);
  if (v19)
    sub_1007947DC(v19);
  if (sub_1000D0C00(*(_QWORD *)(a1 + 1432), a1 + 1392))
  {
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = *(_QWORD *)(a1 + 1392);
    *(_DWORD *)buf = 7;
    v20 = *(_QWORD *)(a1 + 1472);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, buf, &v33);
  }
  return sub_100DD2338(a1);
}

double sub_1000CF518@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;

  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_100928A0C(a1 + 24, a2);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 148);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 80) = v4;
  result = *(double *)(a1 + 16);
  *(double *)(a2 + 112) = result;
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 144);
  return result;
}

uint64_t sub_1000CF584(int *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v15;
  int v16;

  v1 = *a1;
  if (*a1 <= 255)
  {
    if (v1 == 128)
      v5 = 6;
    else
      v5 = 0;
    if (v1 == 64)
      v6 = 8;
    else
      v6 = v5;
    if (v1 == 32)
      v7 = 41;
    else
      v7 = 0;
    if (v1 == 16)
      v8 = 4;
    else
      v8 = v7;
    if (v1 <= 63)
      v6 = v8;
    if (v1 == 12)
      v9 = 7;
    else
      v9 = 0;
    if (v1 == 4)
      v10 = 3;
    else
      v10 = v9;
    if (v1 == 2)
      v11 = 2;
    else
      v11 = 0;
    if (v1 == 1)
      v11 = 1;
    if (v1 <= 3)
      v10 = v11;
    v14 = __OFSUB__(v1, 15);
    v12 = v1 == 15;
    v13 = v1 - 15 < 0;
    goto LABEL_54;
  }
  if (v1 < 12288)
  {
    if (v1 == 0x2000)
      v15 = 52;
    else
      v15 = 0;
    if (v1 == 4096)
      v6 = 5;
    else
      v6 = v15;
    if (v1 == 512)
      v16 = 11;
    else
      v16 = 0;
    if (v1 == 256)
      v10 = 10;
    else
      v10 = v16;
    v14 = __OFSUB__(v1, 4095);
    v12 = v1 == 4095;
    v13 = v1 - 4095 < 0;
LABEL_54:
    if (v13 ^ v14 | v12)
      return v10;
    else
      return v6;
  }
  if (v1 < 196608)
  {
    if (v1 == 12288 || v1 == 0x4000)
      return 56;
    else
      return 0;
  }
  else
  {
    if (v1 == 0x200000)
      v2 = 62;
    else
      v2 = 0;
    if (v1 == 0x100000)
      v3 = 61;
    else
      v3 = v2;
    if (v1 == 196608)
      return 41;
    else
      return v3;
  }
}

void sub_1000CF694(_QWORD **a1)
{
  uint64_t v2;
  unint64_t v3;
  __n128 v4;

  v2 = (uint64_t)a1[1];
  if (v2)
  {
    v4.n128_u64[0] = sub_100B133FC(v2, (double *)*a1);
    v4.n128_u64[1] = v3;
    sub_10106CB44(*a1, &v4);
  }
}

void sub_1000CF6D8(uint64_t a1, double *a2)
{
  uint64_t v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  unsigned __int8 v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _DWORD v20[4];
  _QWORD v21[19];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD v27[6];
  char v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[25];
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _BYTE v59[11];
  int v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  unint64_t v111;
  __int16 v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t buf[4];
  int v122;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = sub_1001FD8B8(*(_QWORD *)(a1 + 88)) > 0.0;
    sub_100B04EB8(v4, a2, v5);
  }
  if (*(_DWORD *)(a1 + 216) == 3)
    ++*(_DWORD *)(a1 + 56);
  if (sub_1000D00A8(a1, a2))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Background escalation manager consuming more power than workout alerts", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      LOWORD(v21[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background escalation manager consuming more power than workout alerts", v21, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v8 = (_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 88);
    ++*(_DWORD *)(a1 + 60);
    if (sub_1001FD8B8(v7) <= 0.0)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88));
      v8 = (_QWORD *)(a1 + 72);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Background escalation manager not consuming more power than workout alerts", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      LOWORD(v21[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background escalation manager not consuming more power than workout alerts", v21, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
    v8 = (_QWORD *)(a1 + 88);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
  v10 = atomic_load((unsigned __int8 *)&qword_102308FC8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_102308FC8))
  {
    *(_DWORD *)buf = 8;
    sub_100546300(qword_102308FB0, buf, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102308FB0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102308FC8);
  }
  v22 = 0;
  *(_OWORD *)v21 = xmmword_101BB1ED0;
  memset(&v21[2], 0, 135);
  v23 = xmmword_101BB1ED0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27[0] = 0;
  *(_QWORD *)((char *)v27 + 5) = 0;
  *(_QWORD *)((char *)&v27[1] + 6) = 0;
  v28 = 0;
  memset(&v27[3], 0, 24);
  v29 = xmmword_101BB1ED0;
  v30 = 0;
  v31 = 0;
  v32 = 0xFFEFFFFFFFFFFFFFLL;
  v43 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v42, 0, sizeof(v42));
  v44 = 0;
  v45 = 0;
  v46 = 0xFFEFFFFFFFFFFFFFLL;
  v47 = 0;
  v48 = 0;
  v54 = 0;
  v55 = 0;
  v60 = 0;
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v57 = 0u;
  v56 = 0u;
  v58 = 0;
  memset(v59, 0, sizeof(v59));
  v61 = -1.79769313e308;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v81 = 0;
  v82 = 0xFFEFFFFFFFFFFFFFLL;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0xFFEFFFFFFFFFFFFFLL;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0xFFEFFFFFFFFFFFFFLL;
  v94 = 0;
  v93 = 0;
  v95 = 0x80000000800000;
  v97 = 0;
  v96 = 0;
  v98 = xmmword_101BB1EE0;
  v99 = 0x80000000800000;
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0;
  v111 = 0xFFEFFFFFFFFFFFFFLL;
  v112 = 0;
  v113 = 0;
  v114 = 0xFFEFFFFFFFFFFFFFLL;
  v115 = 7;
  v116 = 0xFFEFFFFFFFFFFFFFLL;
  v117 = 0;
  v119 = 0;
  v118 = 0;
  v120 = 0;
  sub_1000D03AC(a2, qword_102308FB0, (uint64_t)v21);
  if (v61 != -1.79769313e308)
  {
    if (*(_BYTE *)(a1 + 244))
    {
      *(_DWORD *)(a1 + 232) = v66;
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v11 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v122 = v66;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Background escalation manager updating floors ascended baseline: %{public}u ", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v20[0] = 67240192;
        v20[1] = v66;
        LODWORD(v19) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Background escalation manager updating floors ascended baseline: %{public}u ", v20, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::update(const CLWorkoutPredictorInputs &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v12 = v66;
      *(_DWORD *)(a1 + 232) = v66;
      *(_DWORD *)(a1 + 236) = v12;
      *(_BYTE *)(a1 + 244) = 1;
    }
    if (*(_DWORD *)(a1 + 216) != 3)
      sub_1001FCBC8(a1, 0, *((double *)&v62 + 1));
  }
}

void sub_1000CFE4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102308FC8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CFE6C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1 && *(int *)(a1 + 104) >= 1)
    sub_100E3E6F0(a1 + 96);
  return sub_1000CFEAC(a1);
}

uint64_t sub_1000CFEAC(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  double v4;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  if (*(_DWORD *)(result + 8) != 1)
  {
    v1 = result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102164E90);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      v3 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "NonInterruptingTimer, %s, stopTimer", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102164E90);
      v5 = (_QWORD *)(v1 + 24);
      if (*(char *)(v1 + 47) < 0)
        v5 = (_QWORD *)*v5;
      v8 = 136315138;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "NonInterruptingTimer, %s, stopTimer", (const char *)&v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNonInterruptingTimer::stopTimer()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v4 = sub_1001FD8B8(v1);
    result = sub_1009FCC98(v1, v4);
    *(_DWORD *)(v1 + 8) = 1;
  }
  return result;
}

void sub_1000D0098(uint64_t a1, unsigned __int8 *a2)
{
  sub_1000D1908(*a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1000D00A8(uint64_t a1, double *a2)
{
  _DWORD *v4;
  _BOOL4 v5;
  void *__p;
  void *v8;
  _DWORD *v9;
  _QWORD v10[19];
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD v16[6];
  char v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[25];
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  _BYTE v48[11];
  int v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  double v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  unint64_t v100;
  __int16 v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  if (*(_DWORD *)(a1 + 216) != 3)
    return 0;
  v11 = 0;
  *(_OWORD *)v10 = xmmword_101BB1ED0;
  memset(&v10[2], 0, 135);
  v12 = xmmword_101BB1ED0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = 0;
  *(_QWORD *)((char *)v16 + 5) = 0;
  *(_QWORD *)((char *)&v16[1] + 6) = 0;
  v17 = 0;
  memset(&v16[3], 0, 24);
  v18 = xmmword_101BB1ED0;
  v19 = 0;
  v20 = 0;
  v21 = 0xFFEFFFFFFFFFFFFFLL;
  v32 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v33 = 0;
  v34 = 0;
  v35 = 0xFFEFFFFFFFFFFFFFLL;
  v36 = 0;
  v37 = 0;
  v43 = 0;
  v44 = 0;
  v49 = 0;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v46 = 0u;
  v45 = 0u;
  v47 = 0;
  memset(v48, 0, sizeof(v48));
  v50 = 0xFFEFFFFFFFFFFFFFLL;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v70 = 0;
  v71 = 0xFFEFFFFFFFFFFFFFLL;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = -1.79769313e308;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0xFFEFFFFFFFFFFFFFLL;
  v83 = 0;
  v82 = 0;
  v84 = 0x80000000800000;
  v86 = 0;
  v85 = 0;
  v87 = xmmword_101BB1EE0;
  v88 = 0x80000000800000;
  v89 = 0u;
  v90 = 0u;
  v91 = 0;
  v92 = 0xFFEFFFFFFFFFFFFFLL;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0;
  v100 = 0xFFEFFFFFFFFFFFFFLL;
  v101 = 0;
  v102 = 0;
  v103 = 0xFFEFFFFFFFFFFFFFLL;
  v104 = 7;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 0;
  v108 = 0;
  v107 = 0;
  v109 = 0;
  v4 = operator new(4uLL);
  __p = v4;
  *v4 = 6;
  v8 = v4 + 1;
  v9 = v4 + 1;
  sub_1000D03AC(a2, &__p, (uint64_t)v10);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v76 == -1.79769313e308)
  {
    v5 = 0;
  }
  else
  {
    v5 = 1;
    if (v77 && v77 != 25)
      v5 = v80 != 0;
  }
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 48)) < 420.0 || v5;
}

void sub_1000D0388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D03AC(double *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v35;
  _BYTE v36[30];

  v35 = 0.0;
  v6 = sub_1000D0A60(a1, (uint64_t)a2, &v35);
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  memset(&v36[6], 0, 24);
  *(_OWORD *)(a3 + 992) = 0u;
  *(_OWORD *)(a3 + 1008) = 0u;
  *(_OWORD *)(a3 + 1024) = 0u;
  *(_OWORD *)(a3 + 664) = 0u;
  *(_OWORD *)(a3 + 680) = 0u;
  *(_OWORD *)(a3 + 696) = 0u;
  *(_OWORD *)(a3 + 712) = 0u;
  *(_OWORD *)(a3 + 728) = 0u;
  *(_OWORD *)(a3 + 744) = 0u;
  *(_OWORD *)(a3 + 760) = 0u;
  *(_OWORD *)(a3 + 776) = 0u;
  *(_OWORD *)(a3 + 792) = 0u;
  *(_OWORD *)(a3 + 808) = 0u;
  *(_OWORD *)(a3 + 824) = 0u;
  *(_OWORD *)(a3 + 840) = 0u;
  *(_OWORD *)(a3 + 856) = 0u;
  *(_OWORD *)(a3 + 872) = 0u;
  *(_OWORD *)(a3 + 888) = 0u;
  *(_OWORD *)(a3 + 904) = 0u;
  *(_OWORD *)(a3 + 920) = 0u;
  *(_OWORD *)(a3 + 936) = 0u;
  *(_OWORD *)(a3 + 952) = 0u;
  *(_QWORD *)(a3 + 968) = 0;
  *(_OWORD *)(a3 + 1184) = 0u;
  *(_OWORD *)(a3 + 1168) = 0u;
  *(_OWORD *)a3 = xmmword_101BB1ED0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 148) = 0;
  *(_BYTE *)(a3 + 150) = 0;
  *(_WORD *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 160) = xmmword_101BB1ED0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_DWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_QWORD *)(a3 + 205) = 0;
  *(_QWORD *)(a3 + 214) = 0;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_BYTE *)(a3 + 248) = 0;
  *(_OWORD *)(a3 + 256) = xmmword_101BB1ED0;
  *(_QWORD *)(a3 + 272) = 0;
  *(_DWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 376) = 0;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 441) = 0u;
  *(_DWORD *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_QWORD *)(a3 + 488) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 496) = 0;
  *(_DWORD *)(a3 + 504) = 0;
  *(_QWORD *)(a3 + 584) = 0;
  *(_WORD *)(a3 + 592) = 0;
  *(_DWORD *)(a3 + 576) = 0;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_OWORD *)(a3 + 560) = 0u;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 608) = *(_OWORD *)&v36[14];
  *(_OWORD *)(a3 + 594) = *(_OWORD *)v36;
  *(_BYTE *)(a3 + 632) = 0;
  *(_QWORD *)(a3 + 624) = 0;
  *(_DWORD *)(a3 + 648) = 0;
  *(_DWORD *)(a3 + 643) = 0;
  *(_QWORD *)(a3 + 636) = 0;
  *(_QWORD *)(a3 + 656) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 976) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 984) = 0;
  *(_QWORD *)(a3 + 1040) = 0;
  *(_QWORD *)(a3 + 1048) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 1056) = 0;
  *(_DWORD *)(a3 + 1064) = 0;
  *(_QWORD *)(a3 + 1072) = 0;
  *(_BYTE *)(a3 + 1080) = 0;
  *(_QWORD *)(a3 + 1088) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a3 + 1096) = 0u;
  *(_QWORD *)(a3 + 1112) = 0x80000000800000;
  *(_OWORD *)(a3 + 1120) = 0u;
  *(_OWORD *)(a3 + 1136) = xmmword_101BB1EE0;
  *(_QWORD *)(a3 + 1152) = 0x80000000800000;
  *(_QWORD *)(a3 + 1160) = 0;
  *(_QWORD *)(a3 + 1200) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a3 + 1304) = 0;
  *(_OWORD *)(a3 + 1272) = 0u;
  *(_OWORD *)(a3 + 1288) = 0u;
  *(_OWORD *)(a3 + 1240) = 0u;
  *(_OWORD *)(a3 + 1256) = 0u;
  *(_OWORD *)(a3 + 1208) = 0u;
  *(_OWORD *)(a3 + 1224) = 0u;
  *(_QWORD *)(a3 + 1312) = 0xFFEFFFFFFFFFFFFFLL;
  *(_WORD *)(a3 + 1320) = 0;
  *(_DWORD *)(a3 + 1324) = 0;
  *(_QWORD *)(a3 + 1328) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 1336) = 7;
  *(_QWORD *)(a3 + 1344) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a3 + 1352) = 0;
  *(_QWORD *)(a3 + 1372) = 0;
  *(_OWORD *)(a3 + 1356) = 0u;
  v7 = (_DWORD *)*a2;
  v8 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v8)
  {
    v9 = v35;
    do
    {
      switch(*v7)
      {
        case 0:
          v6 &= sub_1000E3910((uint64_t)(a1 + 1), (_OWORD *)a3, v9);
          sub_1000E4778((uint64_t)(a1 + 1));
          break;
        case 1:
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
          v6 &= sub_1010697B0(v10, (_OWORD *)(a3 + 160), v9);
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
          sub_10106988C(v11);
          break;
        case 2:
          v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1);
          v6 &= sub_1000E1198(v12, (_OWORD *)(a3 + 288), v9);
          v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1);
          sub_1000E4778(v13);
          break;
        case 3:
          v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1);
          v6 &= sub_101069904(v14, (_OWORD *)(a3 + 224), v9);
          v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1);
          sub_1000E4778(v15);
          break;
        case 4:
          v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*(_QWORD *)a1);
          v6 &= sub_1010699E0(v16, (_OWORD *)(a3 + 480), v9);
          v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*(_QWORD *)a1);
          sub_1000E4778(v17);
          break;
        case 5:
          v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 144))(*(_QWORD *)a1);
          v6 &= sub_101069B10(v18, a3 + 976, v9);
          v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 144))(*(_QWORD *)a1);
          sub_1000E4778(v19);
          break;
        case 6:
          v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 152))(*(_QWORD *)a1);
          v6 &= sub_101069C24(v20, a3 + 1048, v9);
          v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 152))(*(_QWORD *)a1);
          sub_1000E4778(v21);
          break;
        case 7:
          v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 160))(*(_QWORD *)a1);
          v6 &= sub_1000E12C8(v22, a3 + 1088, v9);
          v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 160))(*(_QWORD *)a1);
          sub_1000E4778(v23);
          break;
        case 8:
          v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1);
          v6 &= sub_1000D0960(v24, (void *)(a3 + 656), v9);
          v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1);
          sub_1000E4778(v25);
          break;
        case 9:
          v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 168))(*(_QWORD *)a1);
          v6 &= sub_101069D28(v26, a3 + 1160, v9);
          v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 168))(*(_QWORD *)a1);
          sub_1000E4778(v27);
          break;
        case 0xA:
          v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 176))(*(_QWORD *)a1);
          v6 &= sub_1000DCDCC(v28, (_OWORD *)(a3 + 1312), v9);
          v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 176))(*(_QWORD *)a1);
          sub_1000E4778(v29);
          break;
        case 0xB:
          v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 192))(*(_QWORD *)a1);
          v6 &= sub_1000DCDCC(v30, (_OWORD *)(a3 + 1328), v9);
          v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 192))(*(_QWORD *)a1);
          sub_1000E4778(v31);
          break;
        case 0xC:
          v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 200))(*(_QWORD *)a1);
          v6 &= sub_101069E58(v32, a3 + 1344, v9);
          v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 200))(*(_QWORD *)a1);
          sub_1000E4778(v33);
          break;
        default:
          break;
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return v6 & 1;
}

uint64_t sub_1000D0958(uint64_t a1)
{
  return a1 + 1352;
}

uint64_t sub_1000D0960(uint64_t a1, void *__dst, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 4));
  v8 = *v7;
  v9 = *v7 + 320 * (v6 & 0xF);
  v10 = v5 >> 4;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 4));
  v12 = v5 & 0xF;
  v13 = v11 + 320 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 5120;
      v15 = *(double *)(v14 - 320);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 5120;
      }
      v9 -= 320;
      if (v9 == v13)
      {
        v9 = v11 + 320 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 320 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 5120;
  memcpy(__dst, (const void *)(v9 - 320), 0x140uLL);
  return 1;
}

uint64_t sub_1000D0A60(double *a1, uint64_t a2, double *a3)
{
  double v4;
  char v5;
  double v6;
  _DWORD *v7;
  _DWORD *v8;
  double v10;
  uint64_t (*v11)(void);
  uint64_t (*v12)(void);

  v4 = a1[14];
  v5 = v4 != -1.0;
  if (v4 != -1.0 && v4 > -1.79769313e308)
    v6 = a1[14];
  else
    v6 = -1.79769313e308;
  v7 = *(_DWORD **)a2;
  v8 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v8)
  {
    do
    {
      switch(*v7)
      {
        case 1:
          v10 = *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1) + 360);
          goto LABEL_20;
        case 2:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 120);
          goto LABEL_19;
        case 3:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 112);
          goto LABEL_15;
        case 4:
          v10 = *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*(_QWORD *)a1) + 104);
          goto LABEL_20;
        case 5:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 144);
          goto LABEL_19;
        case 6:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 152);
          goto LABEL_19;
        case 7:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 160);
          goto LABEL_19;
        case 8:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 136);
          goto LABEL_19;
        case 9:
          v12 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 168);
LABEL_15:
          v10 = *(double *)(v12() + 136);
          goto LABEL_20;
        case 0xA:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 176);
          goto LABEL_19;
        case 0xB:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 192);
          goto LABEL_19;
        case 0xC:
          v11 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 200);
LABEL_19:
          v10 = *(double *)(v11() + 96);
LABEL_20:
          if (v10 != -1.0 && v10 > v6)
            v6 = v10;
          v5 &= v10 != -1.0;
          break;
        default:
          break;
      }
      ++v7;
    }
    while (v7 != v8);
  }
  *a3 = v6;
  return v5 & 1;
}

uint64_t sub_1000D0C00(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if ((sub_1001FD8B8(*(_QWORD *)(a1 + 72)) > 0.0 || sub_1001FD8B8(*(_QWORD *)(a1 + 88)) > 0.0) && *(_BYTE *)(a1 + 32))
  {
    if (*(_WORD *)a2 && *(_WORD *)(a2 + 2) && *(float *)(a2 + 4) > 0.0)
      return 0;
    v5 = *(_QWORD *)(a1 + 24);
    goto LABEL_13;
  }
  result = 0;
  if (*(_WORD *)a2 && *(_WORD *)(a2 + 2) && *(float *)(a2 + 4) > 0.0)
  {
    v5 = 0;
LABEL_13:
    *(_QWORD *)a2 = v5;
    return 1;
  }
  return result;
}

void sub_1000D0CA0(double *a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  double v20;

  v3 = a1[37];
  v4 = *(double *)(a2 + 8);
  v5 = (uint64_t)(a1 + 1);
  sub_1000D0E40((uint64_t)(a1 + 1), (__int128 *)a2);
  sub_1000DD3C4(v5, v4);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  sub_1000D2FC4(v6, v4);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1);
  sub_1000D3AF8(v7, v4);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1);
  sub_1000DDD6C(v8, v4);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 128))(*(_QWORD *)a1);
  sub_1000D370C(v9, v4);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1);
  sub_1000DD7B0(v10, v4);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 144))(*(_QWORD *)a1);
  sub_1000D2878(v11, v4);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 152))(*(_QWORD *)a1);
  sub_1000D24AC(v12, v4);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 160))(*(_QWORD *)a1);
  sub_1000DCFF8(v13, v4);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 168))(*(_QWORD *)a1);
  sub_1000D3E84(v14, v4);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 176))(*(_QWORD *)a1);
  sub_1000D2C44(v15, v4);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 184))(*(_QWORD *)a1);
  sub_1000D3350(v16, v4);
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 192))(*(_QWORD *)a1);
  sub_1000D1214(v17, v4);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 200))(*(_QWORD *)a1);
  sub_1000D20E0(v18, v4);
  v19 = v4 <= v3 || a1[37] == -1.0;
  v20 = v4 - v3;
  if (v19)
    v20 = 0.0;
  a1[40] = v20;
  a1[37] = v4;
}

void sub_1000D0E40(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  double v42;

  v3 = a2[7];
  v31 = a2[6];
  v32 = v3;
  v4 = a2[9];
  v33 = a2[8];
  v34 = v4;
  v5 = a2[3];
  v27 = a2[2];
  v28 = v5;
  v6 = a2[5];
  v29 = a2[4];
  v30 = v6;
  v7 = a2[1];
  v25 = *a2;
  v26 = v7;
  v8 = *(_QWORD *)(a1 + 280);
  if (v8)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(v8, &v25);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 48) - 1;
    v11 = *(void ***)(a1 + 24);
    v12 = *((double *)v11[v10 / 0x19] + 20 * (v10 % 0x19) + 1);
    if (v12 > *((double *)&v25 + 1))
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v14 = v13 - (_QWORD)v11;
      if (v14 >= 0x11)
      {
        do
        {
          operator delete(*v11);
          v15 = *(_QWORD *)(a1 + 32);
          v11 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v11;
          v14 = v15 - (_QWORD)v11;
        }
        while (v14 > 0x10);
      }
      if (v14 >> 3 == 1)
      {
        v16 = 12;
      }
      else
      {
        if (v14 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218C9D0);
          v17 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v40 = *((_QWORD *)&v25 + 1);
            v41 = 2048;
            v42 = v12;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10218C9D0);
            v35 = 134218240;
            v36 = *((_QWORD *)&v25 + 1);
            v37 = 2048;
            v38 = v12;
            LODWORD(v24) = 22;
            v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v35), v24);
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLMotionCoprocessorInterface::MotionState>::add(const T &) [T = CLMotionCoprocessorInterface::MotionState]", "%s\n", v23);
            if (v23 != (char *)buf)
              free(v23);
          }
          goto LABEL_17;
        }
        v16 = 25;
      }
      *(_QWORD *)(a1 + 48) = v16;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1000D1140((_QWORD *)(a1 + 16), (uint64_t)&v25);
  v18 = v32;
  *(_OWORD *)(a1 + 192) = v31;
  *(_OWORD *)(a1 + 208) = v18;
  v19 = v34;
  *(_OWORD *)(a1 + 224) = v33;
  *(_OWORD *)(a1 + 240) = v19;
  v20 = v28;
  *(_OWORD *)(a1 + 128) = v27;
  *(_OWORD *)(a1 + 144) = v20;
  v21 = v30;
  *(_OWORD *)(a1 + 160) = v29;
  *(_OWORD *)(a1 + 176) = v21;
  v22 = v26;
  *(_OWORD *)(a1 + 96) = v25;
  *(_OWORD *)(a1 + 112) = v22;
}

__n128 sub_1000D1140(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 25 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1002112FC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  result = *(__n128 *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 144) = v15;
  *(__n128 *)(v8 + 96) = result;
  *(_OWORD *)(v8 + 112) = v14;
  ++a1[5];
  return result;
}

void sub_1000D1214(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLCyclingStateDetector_Type::CyclingResult>::update(CFAbsoluteTime) [T = CLCyclingStateDetector_Type::CyclingResult]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 256;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      v15 = 0;
      v18 = 0;
      v14 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      v14 = (_QWORD *)(a1 + 56);
      v15 = (double *)(*v13 + 16 * v10);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 8));
      v18 = (double *)(*v17 + 16 * v16);
    }
    v25 = (char *)sub_100AAD17C(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (char *)(v27 + 8 * (v26 >> 8));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : *(_QWORD *)v28 + 16 * v26;
    sub_1000D8D4C((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v14)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

uint64_t sub_1000D1594(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_1000D15A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1000D15BC(uint64_t a1)
{
  return a1 + 1032;
}

uint64_t sub_1000D15C4(uint64_t a1)
{
  return a1 + 2448;
}

uint64_t sub_1000D15CC(uint64_t a1)
{
  return a1 + 680;
}

uint64_t sub_1000D15D4(uint64_t a1)
{
  return a1 + 472;
}

uint64_t sub_1000D15DC(uint64_t a1)
{
  return a1 + 2048;
}

uint64_t sub_1000D15E4(uint64_t a1)
{
  return a1 + 1816;
}

uint64_t sub_1000D15EC(uint64_t a1)
{
  return a1 + 3216;
}

uint64_t sub_1000D15F4(uint64_t a1)
{
  return a1 + 3040;
}

uint64_t sub_1000D15FC(uint64_t a1)
{
  return a1 + 2888;
}

uint64_t sub_1000D1604(uint64_t a1)
{
  return a1 + 2744;
}

uint64_t sub_1000D160C(uint64_t a1)
{
  return a1 + 2216;
}

void sub_1000D1614(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  int v77;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  sub_1000CF518(a1, (uint64_t)&v25);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 144);
    v5 = *(float *)(a1 + 112);
    v6 = *(float *)(a1 + 116);
    v7 = *(float *)(a1 + 132);
    v8 = *(float *)(a1 + 136);
    v9 = *(float *)(a1 + 128);
    v10 = *(float *)(a1 + 124);
    v11 = *(float *)(a1 + 120);
    v12 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)buf = 134220544;
    v57 = v3;
    v58 = 1024;
    v59 = v25;
    v60 = 1024;
    v61 = v4;
    v62 = 2048;
    v63 = v5;
    v64 = 2048;
    v65 = v6;
    v66 = 2048;
    v67 = v7;
    v68 = 2048;
    v69 = v8;
    v70 = 2048;
    v71 = v9;
    v72 = 2048;
    v73 = v10;
    v74 = 2048;
    v75 = v11;
    v76 = 1024;
    v77 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activity,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushVectorMag,%f,epochType,%d", buf, 0x64u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(unsigned __int8 *)(a1 + 144);
    v15 = *(float *)(a1 + 112);
    v16 = *(float *)(a1 + 116);
    v17 = *(float *)(a1 + 132);
    v18 = *(float *)(a1 + 136);
    v19 = *(float *)(a1 + 128);
    v20 = *(float *)(a1 + 124);
    v21 = *(float *)(a1 + 120);
    v22 = *(_DWORD *)(a1 + 140);
    v34 = 134220544;
    v35 = v13;
    v36 = 1024;
    v37 = v25;
    v38 = 1024;
    v39 = v14;
    v40 = 2048;
    v41 = v15;
    v42 = 2048;
    v43 = v16;
    v44 = 2048;
    v45 = v17;
    v46 = 2048;
    v47 = v18;
    v48 = 2048;
    v49 = v19;
    v50 = 2048;
    v51 = v20;
    v52 = 2048;
    v53 = v21;
    v54 = 1024;
    v55 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Activity,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushVectorMag,%f,epochType,%d", COERCE_DOUBLE(&v34), 100, (_DWORD)v25, *((double *)&v25 + 1), *(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), *(double *)&v28, *((double *)&v28 + 1),
      (_DWORD)v29);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logActivity(const CLWorkoutPredictorActivity &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
}

void sub_1000D1908(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionStateMediator::onStairsEscalationEnableDisable");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onStairsEscalationEnableDisable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onStairsEscalationEnableDisable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  v6 = sub_1001FBB04(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 168))(v6, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_1000D1AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000D1AE4(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  __int16 v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  LOBYTE(v6) = 80;
  HIBYTE(v6) = a2;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219AE68);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending stair escalation toggle update to the AOP,should enable,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219AE68);
    v7[0] = 67109120;
    v7[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Sending stair escalation toggle update to the AOP,should enable,%d", v7);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::enableStairsEscalation(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  sub_1000D1CAC(a1 + 192, &v6, 0);
}

void sub_1000D1CAC(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103836C;
    v7[4] = nullsub_1378;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002080D4;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1000D1D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D1DB0(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  uint64_t *v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  int v85;

  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  sub_1000CF518(a2, (uint64_t)&v29);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a2 + 144);
    v8 = *(float *)(a2 + 112);
    v9 = *(float *)(a2 + 116);
    v10 = *(float *)(a2 + 132);
    v11 = *(float *)(a2 + 136);
    v12 = *(float *)(a2 + 128);
    v13 = *(float *)(a2 + 124);
    v14 = *(float *)(a2 + 120);
    v15 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)buf = 136317954;
    v63 = v5;
    v64 = 2048;
    v65 = v6;
    v66 = 1024;
    v67 = v29;
    v68 = 1024;
    v69 = v7;
    v70 = 2048;
    v71 = v8;
    v72 = 2048;
    v73 = v9;
    v74 = 2048;
    v75 = v10;
    v76 = 2048;
    v77 = v11;
    v78 = 2048;
    v79 = v12;
    v80 = 2048;
    v81 = v13;
    v82 = 2048;
    v83 = v14;
    v84 = 1024;
    v85 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Activity,context,%s,startTime,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushVectorMag,%f,epochType,%d", buf, 0x6Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(unsigned __int8 *)(a2 + 144);
    v18 = *(float *)(a2 + 112);
    v19 = *(float *)(a2 + 116);
    v20 = *(float *)(a2 + 132);
    v21 = *(float *)(a2 + 136);
    v22 = *(float *)(a2 + 128);
    v23 = *(float *)(a2 + 124);
    v24 = *(float *)(a2 + 120);
    v25 = *(_DWORD *)(a2 + 140);
    v38 = 136317954;
    v39 = a1;
    v40 = 2048;
    v41 = v16;
    v42 = 1024;
    v43 = v29;
    v44 = 1024;
    v45 = v17;
    v46 = 2048;
    v47 = v18;
    v48 = 2048;
    v49 = v19;
    v50 = 2048;
    v51 = v20;
    v52 = 2048;
    v53 = v21;
    v54 = 2048;
    v55 = v22;
    v56 = 2048;
    v57 = v23;
    v58 = 2048;
    v59 = v24;
    v60 = 1024;
    v61 = v25;
    LODWORD(v28) = 110;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Activity,context,%s,startTime,%f,type,%u,standing,%d,angeX,%f,vectorMag,%f,strokeAmp,%f,strokePwr,%f,strokeFreq,%f,machineFreq,%f,pushVectorMag,%f,epochType,%d", (const char *)&v38, v28, (_DWORD)v29, DWORD2(v29), *(double *)&v30, *((double *)&v30 + 1), *(double *)&v31, *((double *)&v31 + 1), *(double *)&v32, *((double *)&v32 + 1),
      *(double *)&v33,
      DWORD2(v33));
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logActivity(const CLOutdoorActivity &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
}

void sub_1000D20E0(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 51;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLMotionCoprocessorInterface::Tier1CyclingFeatures>::update(CFAbsoluteTime) [T = CLMotionCoprocessorInterface::Tier1CyclingFeatures]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 102;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x66));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x66));
    }
    else
    {
      v14 = (__int128 *)(*(_QWORD *)(v11 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x66));
      v18 = (__int128 *)(*v17 + 40 * (v16 % 0x66));
    }
    v25 = sub_10107094C(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0x66));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 40 * (v26 % 0x66));
    sub_100FFA198((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000D24AC(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 51;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult>::update(CFAbsoluteTime) [T = CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 102;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x66));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x66));
    }
    else
    {
      v14 = (__int128 *)(*(_QWORD *)(v11 + 8 * (v10 / 0x66)) + 40 * (v10 % 0x66));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x66));
      v18 = (__int128 *)(*v17 + 40 * (v16 % 0x66));
    }
    v25 = sub_1010700B4(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0x66));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 40 * (v26 % 0x66));
    sub_1000D6340((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000D2878(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 28;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::update(CFAbsoluteTime) [T = CLWorkoutClassifier_Type::WorkoutClassifierResult]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 56;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x38));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x38));
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 8 * (v10 / 0x38)) + 72 * (v10 % 0x38);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x38));
      v18 = *v17 + 72 * (v16 % 0x38);
    }
    v25 = sub_100AAE1FC(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0x38));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 72 * (v26 % 0x38));
    sub_10106FAD8((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000D2C44(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutPredictorWatchPressure>::update(CFAbsoluteTime) [T = CLWorkoutPredictorWatchPressure]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 256;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      v15 = 0;
      v18 = 0;
      v14 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      v14 = (_QWORD *)(a1 + 56);
      v15 = (double *)(*v13 + 16 * v10);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 8));
      v18 = (double *)(*v17 + 16 * v16);
    }
    v25 = (char *)sub_100AAD17C(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (char *)(v27 + 8 * (v26 >> 8));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : *(_QWORD *)v28 + 16 * v26;
    sub_1000D8D4C((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v14)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000D2FC4(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 320);
  *(double *)(a1 + 320) = a2;
  if (*(_BYTE *)(a1 + 264) && *(double *)(a1 + 328) < a2)
  {
    *(_BYTE *)(a1 + 264) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 280);
    v6 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 312) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 288);
        v5 = (void **)(*(_QWORD *)(a1 + 280) + 8);
        *(_QWORD *)(a1 + 280) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 32;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 264))
          sub_10106988C(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 320);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 320);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLElevationChangeEntry>::update(CFAbsoluteTime) [T = CLElevationChangeEntry]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 64;
    }
    *(_QWORD *)(a1 + 304) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 360) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 304);
    v11 = *(_QWORD *)(a1 + 280);
    v12 = *(_QWORD *)(a1 + 288);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 6));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 312);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 312) + v10) >> 6));
    }
    else
    {
      v14 = (double *)(*v13 + ((v10 & 0x3F) << 6));
      v15 = (_QWORD *)(a1 + 312);
      v16 = *(_QWORD *)(a1 + 312) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 6));
      v18 = (__int128 *)(*v17 + ((v16 & 0x3F) << 6));
    }
    v25 = (char *)sub_10106F4B0(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 304) + *(_QWORD *)(a1 + 312);
    v27 = *(_QWORD *)(a1 + 280);
    v28 = (char *)(v27 + 8 * (v26 >> 6));
    v29 = *(_QWORD *)(a1 + 288) == v27 ? 0 : *(_QWORD *)v28 + ((v26 & 0x3F) << 6);
    sub_1000DA4E8((_QWORD *)(a1 + 272), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  }
}

void sub_1000D3350(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 85;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLExerciseMinuteData>::update(CFAbsoluteTime) [T = CLExerciseMinuteData]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 170;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 104) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0xAA));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0xAA));
    }
    else
    {
      v14 = (__int128 *)(*(_QWORD *)(v11 + 8 * (v10 / 0xAA)) + 24 * (v10 % 0xAA));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0xAA));
      v18 = (__int128 *)(*v17 + 24 * (v16 % 0xAA));
    }
    v25 = sub_101070570(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0xAA));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 24 * (v26 % 0xAA));
    sub_1000D92D4((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  }
}

void sub_1000D370C(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 11;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLStepCountEntry>::update(CFAbsoluteTime) [T = CLStepCountEntry]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 23;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 104) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x17));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x17));
    }
    else
    {
      v14 = (double *)(*(_QWORD *)(v11 + 8 * (v10 / 0x17)) + 176 * (v10 % 0x17));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x17));
      v18 = (__int128 *)(*v17 + 176 * (v16 % 0x17));
    }
    v25 = sub_10106F9FC(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0x17));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 176 * (v26 % 0x17));
    sub_100A0DC54((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  }
}

void sub_1000D3AF8(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 32;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLCatherineData>::update(CFAbsoluteTime) [T = CLCatherineData]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 64;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 136) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 6));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 6));
    }
    else
    {
      v14 = (double *)(*v13 + ((v10 & 0x3F) << 6));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 6));
      v18 = (__int128 *)(*v17 + ((v16 & 0x3F) << 6));
    }
    v25 = (char *)sub_10106F944(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (char *)(v27 + 8 * (v26 >> 6));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : *(_QWORD *)v28 + ((v26 & 0x3F) << 6);
    sub_1000DA4E8((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  }
}

void sub_1000D3E84(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  uint64_t v38;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 13;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219D0B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v36 = a2;
          v37 = 2048;
          v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219D0B0);
          v21 = *(_QWORD *)(a1 + 64);
          v31 = 134218240;
          v32 = a2;
          v33 = 2048;
          v34 = v21;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v31), v30);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLSwimEntry>::update(CFAbsoluteTime) [T = CLSwimEntry]", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        return;
      }
      v9 = 26;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 136) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x1A));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11
                     + ((((*(_QWORD *)(a1 + 56) + v10) * (unsigned __int128)0x4EC4EC4EC4EC4EC5uLL) >> 64) & 0x7FFFFFFFFFFFFFF8));
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 8 * (v10 / 0x1A)) + 152 * (v10 % 0x1A);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x1A));
      v18 = *v17 + 152 * (v16 % 0x1A);
    }
    v25 = sub_101070494(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v26 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = (_QWORD *)(v27 + 8 * (v26 / 0x1A));
    v29 = *(_QWORD *)(a1 + 32) == v27 ? 0 : (char *)(*v28 + 152 * (v26 % 0x1A));
    sub_1000DBA9C((_QWORD *)(a1 + 16), v25, v24, v28, v29);
    if (!*v15)
      *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  }
}

void sub_1000D4250(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x158uLL);
      v24[2] = 0;
      *v24 = off_10214EB30;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x140uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1000DBED4();
    os_activity_scope_leave(&state);
  }
}

void sub_1000D4894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1000D48E0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1000D4DDC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1000D4CB4(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214D4C8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214D4C8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1000D4CB4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1000D4DDC(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1000D4D90(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1000D4DDC(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_1000D4DDC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1006D7D20(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1000D4E54(a1);
  else
    return 0;
}

id sub_1000D4E54(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBDE1ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBDE1ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionStateMediator_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1000D5200(uint64_t a1, unsigned int a2, double a3)
{
  double v3;
  BOOL v7;
  double v8;
  NSObject *v9;
  _BYTE *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  std::string *v16;
  char *v17;
  void *__dst[2];
  uint64_t v19;
  std::string v20;
  _BYTE __p[24];
  std::string *v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  double v32;

  v3 = *(double *)(a1 + 80);
  if (v3 != 0.0)
  {
    if (*(_DWORD *)(a1 + 32))
      v7 = 1;
    else
      v7 = a2 == 2;
    if (v7)
      v8 = a3;
    else
      v8 = a3 + -7.0;
    sub_1015A2E04(&v20, "unknown");
    if (a2 < 3)
      std::string::assign(&v20, off_1021746C0[a2]);
    if (v8 - v3 >= *(double *)(a1 + 24))
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_1021746A0);
      v9 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
        }
        v10 = __p;
        if (__p[23] < 0)
          v10 = *(_BYTE **)__p;
        v11 = *(_QWORD *)(a1 + 72);
        v12 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446978;
        v26 = v10;
        v27 = 2050;
        v28 = v11;
        v29 = 2082;
        v30 = v12;
        v31 = 2050;
        v32 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxTimeSinceEndOfBout from %{public}s time (%{public}.2f)", buf, 0x2Au);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_1021746A0);
        v13 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          v19 = *(_QWORD *)(a1 + 56);
        }
        v14 = __dst;
        if (v19 < 0)
          v14 = (void **)__dst[0];
        v15 = *(_QWORD *)(a1 + 72);
        v16 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136446978;
        *(_QWORD *)&__p[4] = v14;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v15;
        *(_WORD *)&__p[22] = 2082;
        v22 = v16;
        v23 = 2050;
        v24 = a3;
        v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 1, "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxTimeSinceEndOfBout from %{public}s time (%{public}.2f)", __p, 42);
        if (SHIBYTE(v19) < 0)
          operator delete(__dst[0]);
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::BoutDetector::checkBoutEndWithPacketTime(CFAbsoluteTime, PacketType)", "%s\n", v17);
        if (v17 != (char *)buf)
          free(v17);
      }
      sub_100B6B5A4(a1, 1);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1000D5550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D5584(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  CLProfilingIdentify("CLNatalimetryNotifier::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  sub_1000D6804(a4, v7, a2, a3);
}

void sub_1000D55D4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLMotionStateObserver::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3410);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3410);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 29))(a4, a2, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1000D5794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

double sub_1000D57B4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double result;
  int v4;
  int v5;
  int v6;

  if (!*a2)
  {
    result = *(double *)a3;
    v4 = *(_DWORD *)(a3 + 8);
    v5 = *(_DWORD *)(a3 + 108);
    v6 = *(_DWORD *)(a3 + 72);
    *(_QWORD *)(a1 + 162) = *(_QWORD *)a3;
    *(_DWORD *)(a1 + 170) = v4;
    *(_DWORD *)(a1 + 174) = v5;
    *(_DWORD *)(a1 + 178) = v6;
  }
  return result;
}

void sub_1000D57E4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;

  sub_1000D0E40(a1 + 24, (__int128 *)a2);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10218C9B0);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)buf = 134218240;
    v15 = v5;
    v16 = 1024;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Received motion state, startTime, %f, activityType, %u", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10218C9B0);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 24);
    v10 = 134218240;
    v11 = v7;
    v12 = 1024;
    v13 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "Received motion state, startTime, %f, activityType, %u", COERCE_DOUBLE(&v10), 18);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorManager::feedActivity(const CLOutdoorActivity &)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  sub_1000D59CC(a1, *(double *)(a2 + 8));
}

void sub_1000D59CC(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double *v9;
  void *__p;
  double *v11;
  _BYTE v12[56];
  double v13;

  v13 = a2;
  v3 = a1 + 8944;
  sub_1000D796C((_QWORD *)(a1 + 8944), &v13);
  if (!*(_BYTE *)a1)
  {
    for (i = *(_QWORD *)(a1 + 8984); i; i = *(_QWORD *)(a1 + 8984))
    {
      v5 = *(_QWORD *)(a1 + 8976);
      v6 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8952) + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF));
      *(_QWORD *)(a1 + 8984) = i - 1;
      *(_QWORD *)(a1 + 8976) = v5 + 1;
      sub_10047F604(v3, 1);
      sub_1000DCE9C(a1 + 2504, v6);
      sub_1000EDFFC(a1 + 2544, (uint64_t)v12, v6);
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v12);
      sub_1000D5B2C(a1 + 6368, (uint64_t)v12, &__p);
      v8 = (double *)__p;
      if (*(_QWORD *)(a1 + 6352))
      {
        v9 = v11;
        if (__p != v11)
        {
          do
          {
            sub_100F9AF38(*(_QWORD *)(a1 + 6352), v8);
            v8 += 2;
          }
          while (v8 != v9);
          v8 = (double *)__p;
        }
      }
      if (v8)
      {
        v11 = v8;
        operator delete(v8);
      }
    }
  }
}

void sub_1000D5B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D5B2C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v22;
  uint64_t v23;
  uint64_t i;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[23];
  __int16 v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[25];
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[8];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *__p;
  void *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  int v106;
  int v107;
  void *v108;
  _QWORD *v109;
  uint64_t v110;
  double v111;
  __int128 v112;
  __int128 v113;
  _DWORD v114[2];
  __int16 v115;
  uint64_t v116;
  uint8_t buf[8];
  double v118[204];

  v6 = *(double *)a2;
  *(_QWORD *)(a1 + 2224) = *(_QWORD *)a2;
  if (*(double *)(a1 + 2232) == 0.0)
    *(double *)(a1 + 2232) = v6;
  v112 = 0u;
  v113 = 0u;
  v111 = v6;
  LODWORD(v112) = *(_DWORD *)(a2 + 52);
  *((_QWORD *)&v112 + 1) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)&v113 = *(_QWORD *)(a2 + 32);
  BYTE8(v113) = *(_BYTE *)(a2 + 48);
  sub_1000D628C((_QWORD *)(a1 + 2248), (uint64_t)&v111);
  *(_QWORD *)(a1 + 2376) = *(_QWORD *)(a1 + 2368);
  v7 = *(unsigned __int16 *)(a1 + 26);
  if (*(_DWORD *)(a1 + 28) == v7)
  {
    sub_1000D8318(a1, *(double *)(a1 + 24 + 24 * *(unsigned __int16 *)(a1 + 24) + 8));
    v7 = *(unsigned __int16 *)(a1 + 26);
  }
  v109 = 0;
  v108 = 0;
  v110 = 0;
  v34 = a3;
  if (v7)
  {
    v8 = *(unsigned __int16 *)(a1 + 24) + (unint64_t)v7 - 1;
    v9 = *(unsigned int *)(a1 + 28);
    if (v8 < v9)
      v9 = 0;
    v10 = *(double *)(a1 + 24 + 24 * (v8 - v9) + 8);
  }
  else
  {
    v10 = 0.0;
  }
  v11 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 2392) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 24));
  sub_1000D65C0(v11, (char **)&v108, v10, *(double *)a2);
  v12 = v108;
  v13 = v109;
  if (v108 != v109)
  {
    v14 = (unsigned __int16 *)(a1 + 24);
    v15 = v95;
    v16 = a1 + 32;
    __asm { FMOV            V0.2D, #-1.0 }
    v37 = _Q0;
    v35 = v109;
    do
    {
      *((_QWORD *)&v105 + 1) = v12[3];
      v106 = *((_DWORD *)v12 + 54);
      *(_QWORD *)&v105 = *v12;
      v38 = xmmword_101BAFEE0;
      v47 = 0;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      v48 = 0xBFF0000000000000;
      v49 = 0;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0;
      v50 = 0xBFF0000000000000;
      v71 = 0xBFF0000000000000;
      v72 = 0;
      v73 = 0xBFF0000000000000;
      v84 = 0;
      v85 = 0;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      memset(v83, 0, sizeof(v83));
      v86 = 0xBFF0000000000000;
      v87 = 0;
      v88 = 0;
      v89 = 0x80000000800000;
      v90 = 0;
      v91 = 0;
      v92 = xmmword_101BB1EE0;
      v93 = 0x80000000800000;
      v94 = 0xBFF0000000000000;
      v15[1] = 0;
      v15[2] = 0;
      *v15 = 0;
      v22 = v15;
      v95[3] = 0xBFF0000000000000;
      memset(&v95[4], 0, 24);
      v95[7] = 0xBFF0000000000000;
      v96 = 0u;
      v97 = 0u;
      v98 = 0;
      v99 = 0xBFF0000000000000;
      v100 = 0x600000006;
      __p = 0;
      v102 = 0;
      v103 = 0;
      v104 = v37;
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 2392) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 2392) + 24));
      sub_1000E3910(v23, &v38, *(double *)v12);
      v107 = DWORD2(v39);
      sub_10021C2E4((unsigned __int16 *)(a1 + 24), &v105);
      if (*(_DWORD *)(a1 + 28) == *(unsigned __int16 *)(a1 + 26))
      {
        for (i = 2160; i != 2224; i += 8)
        {
          if ((sub_1000D617C(*(uint64_t **)(a1 + i), (unsigned __int16 *)(a1 + 24)) & 1) != 0
            && *(double *)(v16 + 24 * *v14) >= v25)
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a1 + i) + 72);
            if (v26)
            {
              *(double *)buf = v25;
              (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v26 + 48))(v26, buf);
            }
          }
        }
        v27 = *(double *)(a1 + 2296);
        v28 = *(double *)(v16 + 24 * *(unsigned __int16 *)(a1 + 24));
        if (v27 > v28 && *(_QWORD *)(a1 + 2368) == *(_QWORD *)(a1 + 2376))
        {
          *(_QWORD *)buf = *(_QWORD *)(a1 + 2336);
          v118[0] = v27;
          sub_1000D8674((double *)a1, (double *)buf, v28);
        }
        v36 = *(unsigned __int8 *)(a1 + 16);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
        v29 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
        {
          v30 = *(_QWORD *)(v16 + 24 * *v14);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v36;
          LOWORD(v118[0]) = 2048;
          *(_QWORD *)((char *)v118 + 2) = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "DaylightEstimator,state,%d,startTime,%f", buf, 0x12u);
        }
        v13 = v35;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B0DE8);
          v31 = *(_QWORD *)(v16 + 24 * *v14);
          v114[0] = 67109376;
          v114[1] = v36;
          v115 = 2048;
          v116 = v31;
          LODWORD(v33) = 18;
          v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "DaylightEstimator,state,%d,startTime,%f", v114, v33);
          sub_100512490("Generic", 1, 0, 2, "std::vector<CLDaylightEstimator::Result> CLDaylightEstimator::update(const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v32);
          if (v32 != (char *)buf)
            free(v32);
          v13 = v35;
        }
      }
      if (__p)
      {
        v102 = __p;
        operator delete(__p);
      }
      if ((_QWORD)v97)
      {
        *((_QWORD *)&v97 + 1) = v97;
        operator delete((void *)v97);
      }
      *(_QWORD *)buf = v22;
      sub_100279AA4((void ***)buf);
      v15 = v22;
      v12 += 40;
    }
    while (v12 != v13);
  }
  *v34 = 0;
  v34[1] = 0;
  v34[2] = 0;
  sub_1002AE804(v34, *(const void **)(a1 + 2368), *(_QWORD *)(a1 + 2376), (uint64_t)(*(_QWORD *)(a1 + 2376) - *(_QWORD *)(a1 + 2368)) >> 4);
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
}

void sub_1000D6138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v30;

  sub_100AABE10((uint64_t)&a29);
  v30 = (void *)STACK[0x470];
  if (STACK[0x470])
  {
    STACK[0x478] = (unint64_t)v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D617C(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  if (*a1 >= (unint64_t)a2[1])
    v2 = a2[1];
  else
    v2 = *a1;
  if (!v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = -1.0;
  while (1)
  {
    v9 = sub_1000D811C(a2, v6);
    v10 = a1[5];
    if (!v10)
      sub_10025FD1C();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9) & 1) != 0)
    {
      if (v8 == -1.0)
        v8 = v11;
      if (++v5 >= *((_DWORD *)a1 + 2))
        break;
    }
    if (v2 == ++v6)
      return 0;
  }
  return v7;
}

BOOL sub_1000D6250(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v3;

  result = 0;
  v3 = *(_DWORD *)(a2 + 20);
  if (v3 != 256 && v3 != 512)
    return v3 != 4096;
  return result;
}

__n128 sub_1000D628C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101364950(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

unint64_t sub_1000D6340(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 102 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[40 * (v7 % 0x66)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 102 * ((char **)a2 - v9)
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x3333333333333333 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1004CE08C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1004CE08C(v24, v6);
      sub_101070170(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_1004CE138((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1004CE08C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[40 * (v14 % 0x66)];
      v24[0] = v12;
      sub_10107031C(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1004CE194(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 40 * (v19 % 0x66);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1004CE08C(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_1000D65C0(_QWORD *a1, char **a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double *v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  double *v29;
  uint64_t v30;

  v7 = a1[3];
  v8 = a1[4];
  v9 = (_QWORD *)(v7 + 8 * (a1[6] >> 4));
  if (v8 == v7)
    v10 = 0;
  else
    v10 = (double *)(*v9 + 320 * (a1[6] & 0xFLL));
  v30 = (uint64_t)(a2 + 2);
  v11 = a4 + 1.0e-13;
  while (1)
  {
    if (v8 == v7)
    {
      v13 = 0;
    }
    else
    {
      v12 = a1[7] + a1[6];
      v13 = *(_QWORD *)(v7 + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (v12 & 0xF);
    }
    if (v10 == (double *)v13)
      break;
    if (*v10 <= v11 && *v10 + 1.0e-13 > a3)
    {
      v16 = a2[1];
      v15 = a2[2];
      if (v16 >= v15)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - *a2) >> 6);
        v19 = v18 + 1;
        if (v18 + 1 > 0xCCCCCCCCCCCCCCLL)
          sub_100259694();
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - *a2) >> 6);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x66666666666666)
          v21 = 0xCCCCCCCCCCCCCCLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_101364C64(v30, v21);
          v24 = v23;
        }
        else
        {
          v22 = 0;
          v24 = 0;
        }
        v25 = &v22[320 * v18];
        memcpy(v25, v10, 0x140uLL);
        v26 = *a2;
        v27 = a2[1];
        v28 = v25;
        if (v27 != *a2)
        {
          do
          {
            v27 -= 320;
            v28 -= 320;
            memcpy(v28, v27, 0x140uLL);
          }
          while (v27 != v26);
          v27 = *a2;
        }
        v17 = v25 + 320;
        *a2 = v28;
        a2[1] = v25 + 320;
        a2[2] = &v22[320 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        memcpy(a2[1], v10, 0x140uLL);
        v17 = v16 + 320;
      }
      a2[1] = v17;
    }
    v10 += 40;
    if ((double *)((char *)v10 - *v9) == (double *)5120)
    {
      v29 = (double *)v9[1];
      ++v9;
      v10 = v29;
    }
    v7 = a1[3];
    v8 = a1[4];
  }
}

uint64_t sub_1000D67F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

void sub_1000D6804(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  dispatch_queue_t *v31;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  id v49;
  NSObject *v50;
  NSObject *v51;
  CLCyclingPowerHKWriter *v52;
  NSObject *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  id v72;
  const char *v73;
  char *v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  double v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  void **block;
  uint64_t v89;
  id (*v90)(uint64_t);
  void *v91;
  double v92;
  _BYTE v93[12];
  __int16 v94;
  _QWORD v95[2];
  __int128 v96;
  __int128 v97;
  _BYTE v98[32];
  _BYTE v99[10];
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  uint64_t v110;
  NSNumber *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  NSNumber *v118;
  uint64_t v119;
  NSNumber *v120;
  _BYTE buf[32];
  _BYTE v122[32];
  _BYTE v123[10];
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;

  if (*a3 != 2)
  {
    if (!*a3)
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v6 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a4 + 8);
        v8 = *(_DWORD *)(a4 + 12);
        v9 = *(_DWORD *)(a4 + 20);
        v10 = *(_DWORD *)(a4 + 24);
        v11 = *(_DWORD *)(a4 + 60);
        v12 = *(_QWORD *)(a4 + 64);
        v13 = *(_QWORD *)(a4 + 88);
        v14 = *(float *)(a4 + 152);
        v15 = *(_DWORD *)(a4 + 176);
        v16 = *(unsigned __int8 *)(a4 + 180);
        v17 = *(float *)(a4 + 160);
        v18 = *(float *)(a4 + 164);
        v19 = *(float *)(a4 + 168);
        v20 = *(float *)(a4 + 172);
        v21 = *(float *)(a4 + 156);
        *(_DWORD *)buf = 67112704;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v8;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v9;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = v10;
        *(_WORD *)&buf[26] = 1024;
        *(_DWORD *)&buf[28] = v11;
        *(_WORD *)v122 = 2048;
        *(_QWORD *)&v122[2] = v12;
        *(_WORD *)&v122[10] = 2048;
        *(_QWORD *)&v122[12] = v13;
        *(_WORD *)&v122[20] = 2048;
        *(double *)&v122[22] = v14;
        *(_WORD *)&v122[30] = 1024;
        *(_DWORD *)v123 = v15;
        *(_WORD *)&v123[4] = 1024;
        *(_DWORD *)&v123[6] = v16;
        v124 = 2048;
        v125 = v17;
        v126 = 2048;
        v127 = v18;
        v128 = 2048;
        v129 = v19;
        v130 = 2048;
        v131 = v20;
        v132 = 2048;
        v133 = v21;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}", buf, 0x7Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_1021A5F68);
        v54 = *(_DWORD *)(a4 + 8);
        v55 = *(_DWORD *)(a4 + 12);
        v56 = *(_DWORD *)(a4 + 20);
        v57 = *(_DWORD *)(a4 + 24);
        v58 = *(_DWORD *)(a4 + 60);
        v59 = *(_QWORD *)(a4 + 64);
        v60 = *(_QWORD *)(a4 + 88);
        v61 = *(float *)(a4 + 152);
        v62 = *(_DWORD *)(a4 + 176);
        v63 = *(unsigned __int8 *)(a4 + 180);
        v64 = *(float *)(a4 + 160);
        v65 = *(float *)(a4 + 164);
        v66 = *(float *)(a4 + 168);
        v67 = *(float *)(a4 + 172);
        v68 = *(float *)(a4 + 156);
        LODWORD(v96) = 67112704;
        DWORD1(v96) = v54;
        WORD4(v96) = 1024;
        *(_DWORD *)((char *)&v96 + 10) = v55;
        HIWORD(v96) = 1024;
        LODWORD(v97) = v56;
        WORD2(v97) = 1024;
        *(_DWORD *)((char *)&v97 + 6) = v57;
        WORD5(v97) = 1024;
        HIDWORD(v97) = v58;
        *(_WORD *)v98 = 2048;
        *(_QWORD *)&v98[2] = v59;
        *(_WORD *)&v98[10] = 2048;
        *(_QWORD *)&v98[12] = v60;
        *(_WORD *)&v98[20] = 2048;
        *(double *)&v98[22] = v61;
        *(_WORD *)&v98[30] = 1024;
        *(_DWORD *)v99 = v62;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v63;
        v100 = 2048;
        v101 = v64;
        v102 = 2048;
        v103 = v65;
        v104 = 2048;
        v105 = v66;
        v106 = 2048;
        v107 = v67;
        v108 = 2048;
        v109 = v68;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}", &v96, 124, (_DWORD)v84, DWORD2(v84), (_DWORD)v85, *((double *)&v85 + 1), *(double *)&v86, *((double *)&v86 + 1), v87,
          (_DWORD)block,
          *(double *)&v89,
          *(double *)&v90,
          *(double *)&v91,
          v92,
          *(double *)v93);
        v70 = (char *)v69;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v69);
        if (v70 != buf)
          free(v70);
      }
      if (*(_BYTE *)(a1 + 5088) && *(_BYTE *)(a1 + 424))
        sub_1004C5730(a1 + 1136);
      *(double *)(*(_QWORD *)(a1 + 2752) + 1416) = sub_1000D7AD4((double *)(a1 + 5096), *(double *)a4);
      (***(void (****)(_QWORD, uint64_t))(a1 + 2768))(*(_QWORD *)(a1 + 2768), a4);
      v22 = *(_OWORD *)(a4 + 148);
      v23 = *(_OWORD *)(a4 + 164);
      *(_DWORD *)(a1 + 2744) = *(_DWORD *)(a4 + 180);
      *(_OWORD *)(a1 + 2728) = v23;
      *(_OWORD *)(a1 + 2712) = v22;
      if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2920) > 90.0 && *(_BYTE *)(a1 + 2928))
      {
        v24 = sub_100653FDC(*(float **)(a1 + 2752), *(double *)(a1 + 2864));
        if (v24 > 0.0)
        {
          v119 = CMNatalimeterSetUserOnsetVo2max;
          v120 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v24);
          sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v120, &v119, 1), 1, 0);
        }
        *(_BYTE *)(a1 + 2928) = 0;
      }
      if (*(_BYTE *)(a4 + 208))
      {
        if (CLMotionActivity::isTypeCycling(*(unsigned int *)(a4 + 8)))
          sub_1011CD678((_QWORD *)a1);
      }
    }
    return;
  }
  v25 = *(_QWORD *)(a4 + 16);
  if (v25 == 1)
  {
    *(_BYTE *)(a1 + 5088) = 0;
    v32 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v32 + 56) + 24))(v32 + 56, 0, 0);
    v33 = 0;
    *(_QWORD *)(a1 + 2856) = 0;
    *(_OWORD *)(a1 + 2864) = xmmword_101C443F0;
    *(_BYTE *)(a1 + 2880) = 0;
    *(_QWORD *)(a1 + 2888) = 0xFFF0000000000000;
    *(_OWORD *)(a1 + 2896) = xmmword_101C44400;
    *(_DWORD *)(a1 + 2912) = 0;
    *(_BYTE *)(a1 + 2928) = 0;
LABEL_29:
    *(_BYTE *)(a1 + 1115) = v33;
    goto LABEL_30;
  }
  if (!v25)
  {
    *(_BYTE *)(a1 + 5088) = 1;
    v26 = sub_1009289E0(*(_QWORD *)(a4 + 112));
    if ((_DWORD)v26 == 14)
      v27 = *(unsigned int *)(a4 + 128);
    else
      v27 = 0;
    v28 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v28 + 56) + 24))(v28 + 56, v26, v27);
    *(_QWORD *)(a1 + 2856) = 0;
    *(_OWORD *)(a1 + 2864) = xmmword_101C443F0;
    *(_BYTE *)(a1 + 2880) = 0;
    *(_QWORD *)(a1 + 2888) = 0xFFF0000000000000;
    *(_OWORD *)(a1 + 2896) = xmmword_101C44400;
    *(_DWORD *)(a1 + 2912) = 0;
    *(_QWORD *)(a1 + 2920) = *(_QWORD *)(a4 + 24);
    *(_BYTE *)(a1 + 2928) = 0;
    v29 = *(_DWORD *)(a1 + 400);
    v30 = sub_10009ED0C();
    if (v29)
    {
      sub_10134BB70(v30, 1);
      v31 = (dispatch_queue_t *)sub_10009EC60();
      *(_DWORD *)buf = 1;
    }
    else
    {
      sub_10134BB70(v30, 2);
      v31 = (dispatch_queue_t *)sub_10009EC60();
      *(_DWORD *)buf = 2;
    }
    sub_100EA59C0(v31, (uint64_t)buf);
    v33 = 1;
    goto LABEL_29;
  }
LABEL_30:
  if (sub_100F72B18(a4) == 1)
  {
    v34 = sub_100E01518(a1 + 2929, *(_QWORD *)(a1 + 2752) + 1352, (double *)buf);
    *(float *)&v34 = v34;
    v117 = CMNatalimeterSetUserHrmax;
    v118 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34);
    sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v118, &v117, 1), 0, 0);
    sub_10100ED0C(a1 + 3168, (float64x2_t *)buf);
  }
  sub_10100ED78(a1 + 3168, a4, (uint64_t)&v112);
  if (*(_DWORD *)(a1 + 396) == 2 && *(double *)&v113 != -1.0 && BYTE11(v113))
  {
    v35 = sub_1001FD94C();
    sub_1001C1194(v35, (uint64_t)CFSTR("NumActiveCalibrations"), (_DWORD *)(a1 + 2840));
    ++*(_DWORD *)(a1 + 2840);
    v36 = sub_1001FD94C();
    sub_10011B5B8(v36, CFSTR("NumActiveCalibrations"), (const void *)(a1 + 2840));
    v37 = sub_100127B9C();
    sub_100081C10(v37, buf);
    sub_1001E4B84(*(uint64_t *)buf, "Vo2MaxCalLevel", (_DWORD *)(a1 + 396));
    v38 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    *(_BYTE *)(a1 + 392) = 1;
    v110 = CMNatalimeterSetUserRunVo2max;
    v111 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)&v113 / 3.5);
    sub_1011CB9E0(a1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v111, &v110, 1), 1, 0);
    if (BYTE10(v113))
    {
      sub_1011CDAFC(a1, (uint64_t)&v112);
      v41 = *(_QWORD *)(a4 + 24);
      v42 = *(NSObject **)(a1 + 5432);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1011D3768;
      *(_QWORD *)&buf[24] = &unk_102143528;
      *(_QWORD *)v122 = a1;
      *(_QWORD *)&v122[8] = v41;
      dispatch_async(v42, buf);
    }
    bzero(&v99[8], 0x548uLL);
    *(_OWORD *)v98 = v114;
    *(_OWORD *)&v98[16] = v115;
    *(_QWORD *)v99 = v116;
    v96 = v112;
    v97 = v113;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021A6810);
    v43 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134284033;
      *(_QWORD *)&buf[4] = v113;
      *(_WORD *)&buf[12] = 1025;
      *(_DWORD *)&buf[14] = BYTE9(v113);
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = BYTE10(v113);
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "VO2Max, estimate, %{private}.2f, betaBlockerUser, %{private}d, eligibleForHealthKit, %{private}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021A6810);
      *(_DWORD *)v93 = 134284033;
      *(_QWORD *)&v93[4] = v113;
      v94 = 1025;
      LODWORD(v95[0]) = BYTE9(v113);
      WORD2(v95[0]) = 1025;
      *(_DWORD *)((char *)v95 + 6) = BYTE10(v113);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "VO2Max, estimate, %{private}.2f, betaBlockerUser, %{private}d, eligibleForHealthKit, %{private}d", v93, 24);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v77);
      if (v78 != buf)
        free(v78);
    }
    *(_DWORD *)buf = 6;
    (*(void (**)(uint64_t, _BYTE *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v96, 1, 0xFFFFFFFFLL, 0);
  }
  else if (*(_QWORD *)(a4 + 16) == 1)
  {
    v44 = sub_100F72BB4(*(_QWORD *)(a4 + 112), *(_QWORD *)(a4 + 120));
    if (v44 <= 0x18 && ((1 << v44) & 0x1028000) != 0)
    {
      HIDWORD(v116) = *(_DWORD *)(a4 + 32);
      bzero(&v123[8], 0x548uLL);
      *(_OWORD *)v122 = v114;
      *(_OWORD *)&v122[16] = v115;
      *(_QWORD *)v123 = v116;
      *(_OWORD *)&buf[16] = v113;
      *(_OWORD *)buf = v112;
      LODWORD(v96) = 6;
      (*(void (**)(uint64_t, __int128 *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v96, buf, 1, 0xFFFFFFFFLL, 0);
      if (sub_1011CDD14())
      {
        v45 = *(NSObject **)(a1 + 5432);
        block = _NSConcreteStackBlock;
        v89 = 3221225472;
        v90 = sub_1011CDDBC;
        v91 = &unk_10212ECA0;
        v92 = *(double *)&a1;
        dispatch_async(v45, &block);
      }
    }
  }
  v46 = v115;
  if (*(double *)&v115 != 0.0)
  {
    bzero(&buf[8], 0x588uLL);
    *(_QWORD *)buf = v46;
    LODWORD(v96) = 8;
    (*(void (**)(uint64_t, __int128 *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v96, buf, 0, 0xFFFFFFFFLL, 0);
  }
  if (BYTE12(v114))
  {
    v47 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", (char *)&v113 + 12);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_1021A6830);
    v48 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      v49 = objc_msgSend(v47, "UUIDString");
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Sending sessionId %@ to CLVO2MaxCloudKitManager", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_1021A6830);
      v71 = qword_10229FEC8;
      v72 = objc_msgSend(v47, "UUIDString");
      LODWORD(v96) = 138412290;
      *(_QWORD *)((char *)&v96 + 4) = v72;
      LODWORD(v83) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 0, "Sending sessionId %@ to CLVO2MaxCloudKitManager", &v96, *(_QWORD *)&v83);
      v74 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLVO2MaxCloudKitManager")), "saveInputsAndOutputsForSessionId:", objc_msgSend(v47, "UUIDString"));

  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2776) + 24))(*(_QWORD *)(a1 + 2776), a4);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2768) + 8))(*(_QWORD *)(a1 + 2768), a4);
  sub_101308DA0(a1 + 5192, a4, (uint64_t)&v96);
  if (v98[8])
  {
    if ((_BYTE)v97)
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021A6850);
      v50 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v96;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = *((_QWORD *)&v96 + 1);
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Cycling Session Ended, ftp: %f confidence %f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021A6850);
        *(_DWORD *)v93 = 134218240;
        *(_QWORD *)&v93[4] = v96;
        v94 = 2048;
        v95[0] = *((_QWORD *)&v96 + 1);
        LODWORD(v83) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "Cycling Session Ended, ftp: %f confidence %f", COERCE_DOUBLE(v93), v83);
        v76 = (char *)v75;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v75);
        if (v76 != buf)
          free(v76);
      }
      if (BYTE1(v97))
      {
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021A6850);
        v51 = qword_10229FF98;
        if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v96;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = *((_QWORD *)&v96 + 1);
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "new FTP will be written into HK: %f confidence %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF90 != -1)
            dispatch_once(&qword_10229FF90, &stru_1021A6850);
          *(_DWORD *)v93 = 134218240;
          *(_QWORD *)&v93[4] = v96;
          v94 = 2048;
          v95[0] = *((_QWORD *)&v96 + 1);
          LODWORD(v83) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 0, "new FTP will be written into HK: %f confidence %f", COERCE_DOUBLE(v93), v83);
          v80 = (char *)v79;
          sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v79);
          if (v80 != buf)
            free(v80);
        }
        v52 = objc_alloc_init(CLCyclingPowerHKWriter);
        v84 = v96;
        v85 = v97;
        v86 = *(_OWORD *)v98;
        -[CLCyclingPowerHKWriter writeFTPToHK:](v52, "writeFTPToHK:", &v84);

      }
    }
    else
    {
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021A6850);
      v53 = qword_10229FF98;
      if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Cycling session ended but was not eligible for FTP calculation.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF90 != -1)
          dispatch_once(&qword_10229FF90, &stru_1021A6850);
        *(_WORD *)v93 = 0;
        LODWORD(v83) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "Cycling session ended but was not eligible for FTP calculation.", v93, *(_QWORD *)&v83);
        v82 = (char *)v81;
        sub_100512490("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v81);
        if (v82 != buf)
          free(v82);
      }
    }
  }
  sub_1006545C4(*(_QWORD *)(a1 + 2752), a4);
}

void sub_1000D78E4(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x6A0]);
  _Unwind_Resume(a1);
}

void sub_1000D7900(uint64_t a1, uint64_t a2)
{
  double v4;

  sub_1000D7EBC(*(_QWORD ***)(a1 + 40), *(double *)a2);
  if (*(_DWORD *)(a2 + 8))
  {
    v4 = sub_1000D796C((_QWORD *)(a1 + 72), (double *)a2);
    (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), a2, v4);
    sub_10009BF58(a1, *(double *)a2);
  }
}

double sub_1000D796C(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1005CBFF4(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(double *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

__n128 sub_1000D79F0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100211610(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x11)) + 232 * (v7 % 0x11);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  v14 = a2[7];
  v15 = a2[8];
  v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  result = (__n128)a2[11];
  v18 = a2[12];
  v19 = a2[13];
  *(_QWORD *)(v8 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(v8 + 192) = v18;
  *(_OWORD *)(v8 + 208) = v19;
  *(__n128 *)(v8 + 176) = result;
  ++a1[5];
  return result;
}

double sub_1000D7AD4(double *a1, double a2)
{
  double v4;
  BOOL v5;
  _BOOL4 v6;
  double v7;
  double v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v12 = 0u;
  v13 = 0u;
  v4 = a2 + -360.0;
  sub_1000D7C38((uint64_t)a1, (uint64_t)&v12, a2 + -360.0, a2);
  v10 = 0u;
  v11 = 0u;
  sub_1000D7C38((uint64_t)a1, (uint64_t)&v10, a2 + -720.0, v4);
  v5 = 0;
  if (*((double *)&v13 + 1) >= 0.45 && (unint64_t)v13 >= 0x32)
    v5 = vabdd_f64(*((double *)&v12 + 1), *(double *)&v12) > 324.0;
  v6 = 0;
  if (*((double *)&v11 + 1) >= 0.45 && (unint64_t)v11 >= 0x32)
    v6 = fabs(*((double *)&v10 + 1) - *(double *)&v10) > 324.0;
  if (v5)
  {
    v7 = *a1;
    if (*a1 < 3.0)
    {
      v7 = v7 + vabdd_f64(*((double *)&v12 + 1), a1[8]) / 720.0;
      *a1 = v7;
      v8 = 0.0;
      if (!v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v8 = 0.0;
    if (v6)
LABEL_13:
      v8 = 0.05;
  }
  else
  {
    *a1 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
  }
LABEL_14:
  result = fmin(v8 * v7, 0.3);
  a1[8] = *((double *)&v12 + 1);
  return result;
}

void sub_1000D7C38(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  double *v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  double *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  double *v35;
  double *__p;
  double *v37;
  char *v38;

  *(_OWORD *)a2 = xmmword_101C2EAF0;
  *(_OWORD *)(a2 + 16) = unk_101C2EB00;
  __p = 0;
  v37 = 0;
  v38 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v7
    || (v9 = *(_QWORD *)(a1 + 48),
        v10 = (_QWORD *)(v7 + 8 * (v9 >> 8)),
        v11 = (double *)(*v10 + 16 * v9),
        v12 = *(_QWORD *)(v7 + (((*(_QWORD *)(a1 + 56) + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*(_BYTE *)(a1 + 56) + v9),
        v11 == (double *)v12))
  {
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  v13 = 0;
  do
  {
    v14 = *v11;
    if (*v11 >= a3 && v14 <= a4)
    {
      v16 = *(double *)a2;
      if (*(double *)(a2 + 8) >= v14)
        v14 = *(double *)(a2 + 8);
      *(double *)(a2 + 8) = v14;
      v17 = *v11;
      if (*v11 >= v16)
        v17 = v16;
      *(double *)a2 = v17;
      v18 = v11[1];
      v19 = (*(float *)(a1 + 12) - v18) / (*(float *)(a1 + 12) - *(float *)(a1 + 8));
      v20 = (float)(1.0 - v19);
      if (v13 >= (double *)v38)
      {
        v22 = __p;
        v23 = v13 - __p;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          sub_100259694();
        v25 = v38 - (char *)__p;
        if ((v38 - (char *)__p) >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_10025E6A0((uint64_t)&v38, v26);
          v22 = __p;
          v13 = v37;
        }
        else
        {
          v27 = 0;
        }
        v28 = (double *)&v27[8 * v23];
        *v28 = v20;
        v21 = v28 + 1;
        while (v13 != v22)
        {
          v29 = *((_QWORD *)v13-- - 1);
          *((_QWORD *)v28-- - 1) = v29;
        }
        __p = v28;
        v38 = &v27[8 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v13 = v20;
        v21 = v13 + 1;
      }
      v37 = v21;
      v13 = v21;
    }
    v11 += 2;
    if ((double *)((char *)v11 - *v10) == (double *)4096)
    {
      v30 = (double *)v10[1];
      ++v10;
      v11 = v30;
    }
  }
  while (v11 != (double *)v12);
  v31 = __p;
  v32 = v13 - __p;
  *(_QWORD *)(a2 + 16) = v32;
  if (v13 == __p)
  {
    if (!__p)
      return;
  }
  else
  {
    v33 = (double)(unint64_t)(v32 - 1) * 0.5;
    v34 = (unint64_t)v33;
    v35 = &__p[(unint64_t)v33];
    if (v35 != v13)
    {
      sub_100407418(__p, v35, v13, v33);
      v31 = __p;
    }
    *(double *)(a2 + 24) = v31[v34];
  }
  operator delete(v31);
}

void sub_1000D7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1000D7EB4(uint64_t a1, __int128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_1000D79F0((_QWORD *)(a1 + 24), a2).n128_u64[0];
  return result;
}

uint64_t sub_1000D7EBC(_QWORD **a1, double a2)
{
  (*(void (**)(_QWORD *))(*a1[1] + 40))(a1[1]);
  (*(void (**)(_QWORD *, double))(*a1[2] + 40))(a1[2], a2);
  (*(void (**)(_QWORD *, double))(*a1[3] + 40))(a1[3], a2);
  (*(void (**)(_QWORD *, double))(*a1[4] + 40))(a1[4], a2);
  (*(void (**)(_QWORD *, double))(*a1[5] + 40))(a1[5], a2);
  (*(void (**)(_QWORD *, double))(*a1[6] + 40))(a1[6], a2);
  (*(void (**)(_QWORD *, double))(*a1[7] + 40))(a1[7], a2);
  (*(void (**)(_QWORD *, double))(*a1[8] + 40))(a1[8], a2);
  (*(void (**)(_QWORD *, double))(*a1[9] + 40))(a1[9], a2);
  (*(void (**)(_QWORD *, double))(*a1[10] + 40))(a1[10], a2);
  (*(void (**)(_QWORD *, double))(*a1[11] + 40))(a1[11], a2);
  return (*(uint64_t (**)(_QWORD *, double))(*a1[12] + 40))(a1[12], a2);
}

uint64_t sub_1000D7FCC(uint64_t result, double a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  int32x2_t *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;

  if (*(_WORD *)(result + 26))
  {
    v5 = result;
    v6 = 0;
    v7 = (unsigned __int16 *)(result + 24);
    v8 = (int32x2_t *)(result + 2452);
    do
    {
      result = sub_1000D811C(v7, v6);
      if (*(double *)result >= a2)
      {
        result = sub_1000D811C(v7, v6);
        if (*(double *)result <= a3)
        {
          if (*(_DWORD *)(sub_1000D811C(v7, v6) + 16))
            v9 = *(_DWORD *)(v5 + 2444) + 1;
          else
            v9 = *(_DWORD *)(v5 + 2444);
          *(_DWORD *)(v5 + 2444) = v9;
          ++*(_DWORD *)(v5 + 2440);
          v10 = *(_DWORD *)(sub_1000D811C(v7, v6) + 20);
          *v8 = vsub_s32(*v8, vceq_s32(vdup_n_s32(v10), (int32x2_t)0x100000080));
          v11 = 1;
          if (v10 != 256 && v10 != 512)
            v11 = v10 == 4096;
          *(_DWORD *)(v5 + 2448) += v11;
          result = sub_1000D811C(v7, v6);
          v12 = *(double *)result >= *(double *)(v5 + 2352) && *(double *)result <= *(double *)(v5 + 2360);
          *(_DWORD *)(v5 + 2460) += v12;
        }
      }
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 26));
  }
  return result;
}

uint64_t sub_1000D811C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021B17A8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B17A8);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLDaylightEstimator::StepsAndActivity>::operator[](const size_t) const [T = CLDaylightEstimator::StepsAndActivity]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

unint64_t sub_1000D8318(uint64_t a1, double a2)
{
  double v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  double v28;
  uint64_t v29;

  sub_1000D7FCC(a1, *(double *)(a1 + 2344), a2);
  v4 = *(double *)(a1 + 2344);
  if (v4 < a2)
    v4 = a2;
  *(double *)(a1 + 2344) = v4;
  v5 = *(_QWORD *)(a1 + 2256);
  v6 = *(_QWORD *)(a1 + 2280);
  v7 = (_QWORD *)(v5 + 8 * (v6 / 0x66));
  if (*(_QWORD *)(a1 + 2264) == v5)
  {
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 8 * (v6 / 0x66)) + 40 * (v6 % 0x66);
    v9 = (char *)(*(_QWORD *)(v5 + 8 * ((*(_QWORD *)(a1 + 2288) + v6) / 0x66))
                + 40 * ((*(_QWORD *)(a1 + 2288) + v6) % 0x66));
    if ((char *)v8 != v9)
    {
      while (*(double *)v8 > a2)
      {
        v8 += 40;
        if (v8 - *v7 == 4080)
        {
          v10 = v7[1];
          ++v7;
          v8 = v10;
        }
        if ((char *)v8 == v9)
          goto LABEL_24;
      }
      sub_1000D8574(a1, (uint64_t *)v8);
      v11 = *(_QWORD *)(a1 + 2328);
      if (!v11)
LABEL_28:
        sub_10025FD1C();
      v12 = *(_QWORD *)v8;
      v28 = (*(double (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 48))(v11, v8);
      v29 = v13;
      sub_1000D8674((double *)a1, &v28, *(double *)&v12);
    }
    if ((char *)v8 != v9)
    {
      v14 = v8;
      v15 = v7;
      while (1)
      {
        v14 += 40;
        if (v14 - *v15 == 4080)
        {
          v16 = v15[1];
          ++v15;
          v14 = v16;
        }
        if ((char *)v14 == v9)
          break;
        if (*(double *)v14 > a2)
        {
          v20 = *(_OWORD *)v14;
          v21 = *(_OWORD *)(v14 + 16);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)v8 = v20;
          *(_OWORD *)(v8 + 16) = v21;
          v8 += 40;
          if (v8 - *v7 == 4080)
          {
            v22 = v7[1];
            ++v7;
            v8 = v22;
          }
        }
        else
        {
          sub_1000D8574(a1, (uint64_t *)v14);
          v17 = *(_QWORD *)(a1 + 2328);
          if (!v17)
            goto LABEL_28;
          v18 = *(_QWORD *)v14;
          v28 = (*(double (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 48))(v17, v14);
          v29 = v19;
          sub_1000D8674((double *)a1, &v28, *(double *)&v18);
        }
      }
      v9 = (char *)v8;
    }
  }
LABEL_24:
  v23 = *(_QWORD *)(a1 + 2280) + *(_QWORD *)(a1 + 2288);
  v24 = *(_QWORD *)(a1 + 2256);
  v25 = (_QWORD *)(v24 + 8 * (v23 / 0x66));
  if (*(_QWORD *)(a1 + 2264) == v24)
    v26 = 0;
  else
    v26 = (char *)(*v25 + 40 * (v23 % 0x66));
  return sub_1000D6340((_QWORD *)(a1 + 2248), v7, v9, v25, v26);
}

double sub_1000D8560()
{
  return 1.79769313e308;
}

uint64_t sub_1000D8574(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  float v6;
  uint64_t i;

  v2 = a2[2];
  if (v2 == 3)
  {
    v4 = *(double *)a2;
    if (*(double *)(result + 2416) == 0.0)
      *(double *)(result + 2416) = v4;
    *(double *)(result + 2424) = v4;
    ++*(_DWORD *)(result + 2432);
  }
  else if (v2 == 2)
  {
    v3 = *(double *)a2;
    if (*(double *)(result + 2400) == 0.0)
      *(double *)(result + 2400) = v3;
    *(double *)(result + 2408) = v3;
    ++*(_DWORD *)(result + 2436);
  }
  v5 = *((double *)a2 + 3);
  if (*(double *)(result + 2472) < v5)
    *(double *)(result + 2472) = v5;
  if (*(double *)(result + 2480) > v5)
    *(double *)(result + 2480) = v5;
  *(double *)(result + 2488) = v5 + *(double *)(result + 2488);
  ++*(_QWORD *)(result + 2496);
  v6 = *((float *)a2 + 2);
  if (*(_DWORD *)(result + 2504) < (int)v6)
    *(_DWORD *)(result + 2504) = (int)v6;
  if (v6 >= 0.0)
  {
    for (i = 0; i != 17; ++i)
    {
      if (v6 <= dword_101C9ECC0[i])
        break;
    }
    if (i >= 0x10)
      LODWORD(i) = 16;
    ++*(_DWORD *)(result + 4 * i + 2508);
  }
  return result;
}

void sub_1000D8674(double *a1, double *a2, double a3)
{
  double v4;
  double v5;
  double v6;

  v4 = *a2;
  v5 = a2[1];
  if (v5 > *a2)
  {
    v6 = a1[279];
    if (v6 < a1[292])
      v6 = a1[292];
    if (v4 < v6)
      v4 = v6;
    if (v5 < a1[287])
      v5 = a1[287];
    a1[287] = v5;
    sub_1013636FC((uint64_t)a1, v4, a3);
  }
}

unint64_t sub_1000D86B4(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  double *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10217E880);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v34 = v7 - v4;
      v35 = 2048;
      v36 = v4;
      v37 = 2048;
      v38 = v7;
      v39 = 1024;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10217E880);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v25 = 134218752;
      v26 = v20 - v4;
      v27 = 2048;
      v28 = v4;
      v29 = 2048;
      v30 = v20;
      v31 = 1024;
      v32 = v21;
      LODWORD(v24) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v25), v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>::update(CFAbsoluteTime) [Data_T = CLMotionStateMediator_Type::MediatedMotionActivity]", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 / 0x11));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*(_QWORD *)v12 + 232 * (v9 % 0x11));
  v14 = (char *)(v10 + 8 * (v9 / 0x11));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0x11))
        + 232 * ((*(_QWORD *)(a1 + 64) + v9) % 0x11);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 29;
    v13 += 232;
    if ((char *)(*(_QWORD *)v14 + 3944) == v13)
    {
      v17 = (char *)*((_QWORD *)v14 + 1);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*(_QWORD *)v12 + 232 * (v9 % 0x11));
  return sub_100690B54((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

_QWORD *sub_1000D8A1C(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCalorimetryFunctionalStrengthDMFeatures>::update(CFAbsoluteTime) [Data_T = CLCalorimetryFunctionalStrengthDMFeatures]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 8));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + 16 * v9;
  v14 = v10 + 8 * (v9 >> 8);
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 64) + v9);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 2;
    v13 += 16;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + 16 * v9;
  return sub_1000D8D4C((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
}

_QWORD *sub_1000D8D4C(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  char **v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  char **v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char **v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v35;
  char **v36;
  char *v37;
  __n128 v38;
  char *v39;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 16 * v7;
  v36 = (char **)v9;
  v37 = (char *)v10;
  if (v10 == a3)
    v11 = 0;
  else
    v11 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(_QWORD *)v9) >> 4);
  v12 = (char **)sub_1004CE854((uint64_t)&v36, v11);
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = (unint64_t)v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v20 = v12;
      v21 = v13;
      v22 = v36;
      v23 = v37;
      v24 = sub_1004CE854((uint64_t)&v35, v6);
      sub_1004CE8B0(v22, v23, v20, v21, v24, v25, &v38);
      v26 = v37;
      if (v37 != v39)
      {
        v27 = v36;
        do
        {
          v26 += 16;
          v37 = v26;
          if (v26 - *v27 == 4096)
          {
            v28 = v27[1];
            ++v27;
            v26 = v28;
            v36 = v27;
            v37 = v28;
          }
        }
        while (v26 != v39);
      }
      v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((sub_1004A57E8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v14 = (char **)sub_1004CE854((uint64_t)&v35, v6);
      v16 = a1[4] + a1[5];
      v17 = a1[1];
      v18 = (char **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17)
        v19 = 0;
      else
        v19 = &(*v18)[16 * v16];
      v38 = v35;
      sub_1004CEA34(v14, v15, v18, v19, (uint64_t)&v38);
      a1[5] -= v6;
      while ((sub_1004A5844(a1, 1) & 1) != 0)
        ;
    }
  }
  v30 = a1[4];
  v31 = a1[1];
  v32 = (_QWORD *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31)
    v33 = 0;
  else
    v33 = *v32 + 16 * v30;
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_1004CE854((uint64_t)&v38, v11);
}

unint64_t sub_1000D8F74(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCalorimetryKickboxingDMFeatures>::update(CFAbsoluteTime) [Data_T = CLCalorimetryKickboxingDMFeatures]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0xAA));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 24 * (v9 % 0xAA));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0xAA));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0xAA)) + 24 * ((*(_QWORD *)(a1 + 64) + v9) % 0xAA);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 3;
    v13 += 24;
    if ((char *)(*v14 + 4080) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 24 * (v9 % 0xAA));
  return sub_1000D92D4((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

unint64_t sub_1000D92D4(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 170 * (a4 - a2)
       - 0x5555555555555555 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0xAA));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[24 * (v7 % 0xAA)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 170 * ((char **)a2 - v9)
        - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x5555555555555555 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0xAA);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1004CDD14(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1004CDD14(v24, v6);
      sub_101070628(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10047FDC4((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1004CDD14(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0xAA));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[24 * (v14 % 0xAA)];
      v24[0] = v12;
      sub_1010707D4(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1004CDEEC(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0xAA));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 24 * (v19 % 0xAA);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1004CDD14(v24, v11);
  return v24[0].n128_u64[0];
}

_QWORD *sub_1000D953C(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCalorimetryRowingDMFeatures>::update(CFAbsoluteTime) [Data_T = CLCalorimetryRowingDMFeatures]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 7));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + 32 * (*(_QWORD *)(a1 + 56) & 0x7FLL);
  v14 = v10 + 8 * (v9 >> 7);
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(_QWORD *)(a1 + 64) + v9) & 0x7F);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 4;
    v13 += 32;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + 32 * (*(_QWORD *)(a1 + 56) & 0x7FLL);
  return sub_1000D9878((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
}

_QWORD *sub_1000D9878(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 5);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 7));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 32 * (a1[4] & 0x7FLL);
  v33 = (char **)(v7 + 8 * (a1[4] >> 7));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(_QWORD *)v8) >> 5);
  v11 = (char **)sub_100AAE988((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = sub_100AAE988((uint64_t)&v32, v6);
      sub_100AAF73C(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 32;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_1003432C8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)sub_100AAE988((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[32 * (v15 & 0x7F)];
      v35 = v32;
      sub_100AAF8C0(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100AAE9EC(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 7);
  v35.n128_u64[1] = v30;
  return sub_100AAE988((uint64_t)&v35, v10);
}

_QWORD *sub_1000D9AAC(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  double v21;
  BOOL v22;
  double v23;
  int v24;
  char *v25;
  double v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 121) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 122);
      *(_DWORD *)buf = 134218752;
      v36 = v7 - v4;
      v37 = 2048;
      v38 = v4;
      v39 = 2048;
      v40 = v7;
      v41 = 1024;
      v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, all-day elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v23 = *(double *)(a1 + 104);
      v24 = *(unsigned __int8 *)(a1 + 122);
      v27 = 134218752;
      v28 = v23 - v4;
      v29 = 2048;
      v30 = v4;
      v31 = 2048;
      v32 = v23;
      v33 = 1024;
      v34 = v24;
      LODWORD(v26) = 38;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, all-day elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v27), v26);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCoarseElevationChangeEntry>::update(CFAbsoluteTime)", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 122)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 121))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 8));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + 16 * v9;
  v14 = v10 + 8 * (v9 >> 8);
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(_BYTE *)(a1 + 64) + v9);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 2;
    v13 += 16;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + 16 * v9;
  result = sub_1000D8D4C((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
  v20 = *(_QWORD *)(a1 + 64);
  if (v20)
    v21 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                + (((unint64_t)(v20 + *(_QWORD *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v20 + *(_BYTE *)(a1 + 56) - 1))
        + 180.0
        + 20.0;
  else
    v21 = -1.79769313e308;
  v22 = v21 > a2 && !*(_BYTE *)(a1 + 123);
  *(_BYTE *)(a1 + 120) = v22;
  return result;
}

unint64_t sub_1000D9E4C(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCalorimetryDanceDMFeatures>::update(CFAbsoluteTime) [Data_T = CLCalorimetryDanceDMFeatures]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0xAA));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 24 * (v9 % 0xAA));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0xAA));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0xAA)) + 24 * ((*(_QWORD *)(a1 + 64) + v9) % 0xAA);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 3;
    v13 += 24;
    if ((char *)(*v14 + 4080) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 24 * (v9 % 0xAA));
  return sub_1000D92D4((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

_QWORD *sub_1000DA1AC(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v34 = v7 - v4;
      v35 = 2048;
      v36 = v4;
      v37 = 2048;
      v38 = v7;
      v39 = 1024;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v25 = 134218752;
      v26 = v20 - v4;
      v27 = 2048;
      v28 = v4;
      v29 = 2048;
      v30 = v20;
      v31 = 1024;
      v32 = v21;
      LODWORD(v24) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, elevation, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v25), v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLElevationChangeEntry>::update(CFAbsoluteTime)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 6));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  v14 = v10 + 8 * (v9 >> 6);
LABEL_15:
  v15 = v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 3) & 0x1FFFFFFFFFFFFFF8))
        + (((*(_QWORD *)(a1 + 64) + v9) & 0x3F) << 6);
    if (v15 == v16 || *(double *)(a1 + 104) + -1200.0 <= *(double *)(v15 + 8))
      break;
    v13 += 64;
    v15 += 64;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  return sub_1000DA4E8((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
}

_QWORD *sub_1000DA4E8(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 6) + 8 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 6);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 6));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + ((a1[4] & 0x3FLL) << 6);
  v33 = (char **)(v7 + 8 * (a1[4] >> 6));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 6) + 8 * (a2 - v8) - ((v9 - *(_QWORD *)v8) >> 6);
  v11 = (char **)sub_10106F568((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = sub_10106F568((uint64_t)&v32, v6);
      sub_10106F638(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 64;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_100555498((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v13 = (char **)sub_10106F568((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 6));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[64 * (v15 & 0x3F)];
      v35 = v32;
      sub_10106F7BC(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_10106F5CC(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 6)) + ((a1[4] & 0x3FLL) << 6);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 6);
  v35.n128_u64[1] = v30;
  return sub_10106F568((uint64_t)&v35, v10);
}

unint64_t sub_1000DA71C(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<_CLFitnessMachineData>::update(CFAbsoluteTime) [Data_T = _CLFitnessMachineData]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0x18));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 168 * (v9 % 0x18));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0x18));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0x18)) + 168 * ((*(_QWORD *)(a1 + 64) + v9) % 0x18);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 21;
    v13 += 168;
    if ((char *)(*v14 + 4032) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 168 * (v9 % 0x18));
  return sub_1000DAA7C((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

unint64_t sub_1000DAA7C(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 24 * (a4 - a2)
       - 0x30C30C30C30C30C3 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x30C30C30C30C30C3 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x18));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[168 * (v7 % 0x18)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 24 * ((char **)a2 - v9)
        - 0x30C30C30C30C30C3 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x30C30C30C30C30C3 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x18);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1006D17A8(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1006D17A8(v24, v6);
      sub_1011DBE94(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_1006D25B8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1006D17A8(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x18));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[168 * (v14 % 0x18)];
      v24[0] = v12;
      sub_1006D22B8(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1006D2434(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x18));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 168 * (v19 % 0x18);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1006D17A8(v24, v11);
  return v24[0].n128_u64[0];
}

unint64_t sub_1000DAD0C(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLStepCountEntry>::update(CFAbsoluteTime) [Data_T = CLStepCountEntry]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0x17));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 176 * (v9 % 0x17));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0x17));
LABEL_15:
  v15 = v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0x17)) + 176 * ((*(_QWORD *)(a1 + 64) + v9) % 0x17);
    if (v15 == (char *)v16 || vabdd_f64(*(double *)(a1 + 104), *((double *)v15 + 1)) <= 1200.0)
      break;
    v13 += 176;
    v15 += 176;
    if ((char *)(*v14 + 4048) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 176 * (v9 % 0x17));
  return sub_100A0DC54((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

unint64_t sub_1000DB084(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102173FF8);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_102173FF8);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLOdometerEntry>::update(CFAbsoluteTime) [Data_T = CLOdometerEntry]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0x15));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 192 * (v9 % 0x15));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0x15));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0x15)) + 192 * ((*(_QWORD *)(a1 + 64) + v9) % 0x15);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 24;
    v13 += 192;
    if ((char *)(*v14 + 4032) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 192 * (v9 % 0x15));
  return sub_100AAD730((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

_QWORD *sub_1000DB3F8(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLCatherineData>::update(CFAbsoluteTime) [Data_T = CLCatherineData]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 6));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  v14 = v10 + 8 * (v9 >> 6);
LABEL_15:
  v15 = v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 3) & 0x1FFFFFFFFFFFFFF8))
        + (((*(_QWORD *)(a1 + 64) + v9) & 0x3F) << 6);
    if (v15 == v16 || vabdd_f64(*(double *)(a1 + 104), *(double *)(v15 + 40)) <= 1200.0)
      break;
    v13 += 64;
    v15 += 64;
    if (*(_QWORD *)v14 + 4096 == v13)
    {
      v17 = *(_QWORD *)(v14 + 8);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = *(_QWORD *)v12 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  return sub_1000DA4E8((_QWORD *)(a1 + 24), v12, v18, (char *)v14, v13);
}

unint64_t sub_1000DB734(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  char *v22;
  double v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A5F68);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v33 = v7 - v4;
      v34 = 2048;
      v35 = v4;
      v36 = 2048;
      v37 = v7;
      v38 = 1024;
      v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A5F68);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v24 = 134218752;
      v25 = v20 - v4;
      v26 = 2048;
      v27 = v4;
      v28 = 2048;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      LODWORD(v23) = 38;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v24), v23);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLSwimEntry>::update(CFAbsoluteTime) [Data_T = CLSwimEntry]", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (_QWORD *)(v10 + 8 * (v9 / 0x1A));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*v12 + 152 * (v9 % 0x1A));
  v14 = (_QWORD *)(v10 + 8 * (v9 / 0x1A));
LABEL_15:
  v15 = v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + 8 * ((*(_QWORD *)(a1 + 64) + v9) / 0x1A)) + 152 * ((*(_QWORD *)(a1 + 64) + v9) % 0x1A);
    if (v15 == (char *)v16 || vabdd_f64(*(double *)(a1 + 104), *((double *)v15 + 5)) <= 1200.0)
      break;
    v13 += 152;
    v15 += 152;
    if ((char *)(*v14 + 3952) == v13)
    {
      v17 = (char *)v14[1];
      ++v14;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*v12 + 152 * (v9 % 0x1A));
  return sub_1000DBA9C((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

unint64_t sub_1000DBA9C(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 26 * (a4 - a2)
       - 0x79435E50D79435E5 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x79435E50D79435E5 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x1A));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[152 * (v7 % 0x1A)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 26 * ((char **)a2 - v9)
        - 0x79435E50D79435E5 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x79435E50D79435E5 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x1A);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10047F9E8(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10047F9E8(v24, v6);
      sub_10047FA9C(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10047F918((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10047F9E8(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x1A));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[152 * (v14 % 0x1A)];
      v24[0] = v12;
      sub_10047FC48(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10047F974(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x1A));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 152 * (v19 % 0x1A);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10047F9E8(v24, v11);
  return v24[0].n128_u64[0];
}

double sub_1000DBD44(uint64_t a1, uint64_t a2)
{
  double result;

  sub_1000D5200(a1 + 48, 1u, *(double *)(a2 + 80));
  sub_1000D5200(a1 + 216, 1u, *(double *)(a2 + 80) + -300.0);
  return result;
}

id sub_1000DBD8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBD9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBDFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBE0C(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5;
  _BYTE __dst[320];

  v5 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", v5, __dst);
}

id sub_1000DBE88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBE98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBEA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBEB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateMediatorNotification:data:", a2, a3);
}

id sub_1000DBEC8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "onOutdoorUpdate:", a1);
}

void sub_1000DBED4()
{
  operator new();
}

void sub_1000DBFF8(unsigned __int16 *a1, unsigned int a2, unsigned int a3, int a4, int a5, double a6)
{
  unint64_t v8;
  double v10;
  long double v11;
  double v12;
  NSObject *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  unsigned __int16 **v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  int v30;
  NSObject *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  char *v60;
  int v61;
  char *v62;
  double v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  unint64_t v68;
  __int128 v69;
  const char *v70;
  double v71;
  double v72;
  double v73;
  int v74;
  _BYTE v75[10];
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  double v90;
  __int16 v91;
  int v92;
  __int16 v93;
  unsigned __int16 *v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  _BYTE buf[14];
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  double v120;
  __int16 v121;
  int v122;
  __int16 v123;
  unsigned __int16 *v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;

  LODWORD(v66) = a4;
  v8 = (unint64_t)(a6 * 1000000.0);
  HIDWORD(v72) = 0;
  v73 = *(double *)&v8;
  *(float *)&v72 = (float)(uint64_t)(a2 - (unint64_t)a3) / 100.0;
  v67 = 0.0;
  v69 = 0u;
  v70 = 0;
  v68 = v8;
  if (*((unsigned __int8 *)a1 + 664) != a5)
  {
    if (*((_BYTE *)a1 + 648))
    {
      v10 = -0.00355555548;
      if (a5)
        v10 = -0.0127999997;
      v11 = exp(v10);
      *((_DWORD *)a1 + 142) = 0;
      *((long double *)a1 + 72) = 1.0 - v11;
      *((_QWORD *)a1 + 73) = 0;
    }
    else
    {
      v12 = -0.00355555548;
      if (a5)
        v12 = -0.0127999997;
      *((long double *)a1 + 72) = 1.0 - exp(v12);
      *((_DWORD *)a1 + 142) = 3;
    }
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_10215A550);
    v13 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((unsigned __int8 *)a1 + 648);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a5;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "significant elevation break frequency change, inVisit, %d, resetCheck, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_10215A550);
      v61 = *((unsigned __int8 *)a1 + 648);
      v74 = 67109376;
      *(_DWORD *)v75 = a5;
      *(_WORD *)&v75[4] = 1024;
      *(_DWORD *)&v75[6] = v61;
      v62 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "significant elevation break frequency change, inVisit, %d, resetCheck, %d", &v74, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLSignificantElevationEstimator::updateWithVisit(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource, BOOL)", "%s\n", v62);
      if (v62 != buf)
        free(v62);
    }
    *((_BYTE *)a1 + 664) = a5;
  }
  sub_1000E1410(a1 + 24, (uint64_t)&v72, (uint64_t)&v67);
  v16 = a1[1];
  v17 = *((unsigned int *)a1 + 1);
  v18 = a1 + 4;
  v19 = *a1;
  if (v19 + v16 >= v17)
    v20 = *((unsigned int *)a1 + 1);
  else
    v20 = 0;
  *(double *)&v18[4 * (v19 + v16 - v20)] = *(double *)&v8;
  if (v17 <= v16)
  {
    v21 = v19 + 1;
    if (v21 < v17)
      LOWORD(v17) = 0;
    *a1 = v21 - v17;
  }
  else
  {
    LOWORD(v16) = v16 + 1;
    a1[1] = v16;
  }
  if (*((_BYTE *)a1 + 648))
    v22 = *((double *)a1 + 78) + *(float *)&v72;
  else
    v22 = *((double *)a1 + 79);
  *((double *)a1 + 79) = v22;
  HIDWORD(v66) = 0;
  if ((_WORD)v16)
  {
    v23 = (unsigned __int16 **)(a1 + 336);
    *(_QWORD *)&v15 = 134221826;
    v64 = v15;
    while (1)
    {
      if (!sub_1000DC820((uint64_t)(a1 + 24), *(_QWORD *)&v18[4 * *a1], (float *)&v66 + 1))
        return;
      v24 = (double)*(unint64_t *)&v18[4 * *a1] * 0.000001;
      *(double *)buf = *((float *)&v66 + 1);
      sub_1000DC950((uint64_t)(a1 + 284), (double *)buf);
      v25 = *((double *)a1 + 73);
      *((double *)a1 + 79) = v25 + *((double *)a1 + 78);
      *((_BYTE *)a1 + 648) = 0;
      v26 = *((_DWORD *)a1 + 154);
      if (v26 == -1)
      {
        v27 = *((float *)&v66 + 1);
        if (v25 + -0.25 > *((float *)&v66 + 1))
          goto LABEL_36;
        if (v25 < v27)
        {
          v28 = *((double *)a1 + 74);
          if (v28 != 0.0)
            goto LABEL_46;
          goto LABEL_47;
        }
      }
      else
      {
        if (v26 == 1)
        {
          v27 = *((float *)&v66 + 1);
          if (v25 + 0.25 >= *((float *)&v66 + 1))
          {
            if (v25 > v27)
            {
              v28 = *((double *)a1 + 74);
              if (v28 != 0.0)
                goto LABEL_46;
              goto LABEL_47;
            }
            goto LABEL_42;
          }
LABEL_36:
          sub_1008B57A4((uint64_t)a1, v24, v27);
          goto LABEL_42;
        }
        v29 = *((float *)&v66 + 1);
        if (vabdd_f64(*((float *)&v66 + 1), v25) > 2.0)
        {
          sub_1008B5C00((uint64_t)a1, v24, v29 - v25);
          *((double *)a1 + 78) = *((double *)a1 + 78) - (v29 - *((double *)a1 + 73));
          *((double *)a1 + 73) = v29;
          *((_DWORD *)a1 + 142) = 3;
        }
      }
LABEL_42:
      v28 = *((double *)a1 + 74);
      v30 = *((_DWORD *)a1 + 150);
      if (v28 != 0.0)
        *((_DWORD *)a1 + 150) = ++v30;
      if (v30 < 12)
        goto LABEL_48;
      if (v28 != 0.0)
LABEL_46:
        sub_1008B5C00((uint64_t)a1, *((double *)a1 + 76), v28);
LABEL_47:
      *((_QWORD *)a1 + 74) = 0;
      *((_DWORD *)a1 + 150) = 0;
      *((_DWORD *)a1 + 154) = 0;
LABEL_48:
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10215A530);
      v31 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
      {
        v32 = a1 + 336;
        if (*((char *)a1 + 695) < 0)
          v32 = *v23;
        v33 = *((_QWORD *)a1 + 73);
        v34 = *((_QWORD *)a1 + 66);
        v35 = *((_QWORD *)a1 + 67);
        v36 = (float)*((unsigned int *)a1 + 136);
        v37 = (float)*((unsigned int *)a1 + 137);
        v38 = *((_QWORD *)a1 + 74);
        v39 = *((_QWORD *)a1 + 76);
        v40 = (float)*((int *)a1 + 154);
        v41 = *((_QWORD *)a1 + 78);
        v42 = *((_QWORD *)a1 + 79);
        v43 = *((_QWORD *)a1 + 82);
        *(_DWORD *)buf = v64;
        *(double *)&buf[4] = *((float *)&v66 + 1);
        *(_WORD *)&buf[12] = 2048;
        v106 = v33;
        v107 = 2048;
        v108 = v34;
        v109 = 2048;
        v110 = v35;
        v111 = 2048;
        v112 = v36;
        v113 = 2048;
        v114 = v37;
        v115 = 2048;
        v116 = v38;
        v117 = 2048;
        v118 = v39;
        v119 = 2048;
        v120 = v40;
        v121 = 1024;
        v122 = LODWORD(v66);
        v123 = 2080;
        v124 = v32;
        v125 = 2048;
        v126 = v24;
        v127 = 2048;
        v128 = a6;
        v129 = 2048;
        v130 = v41;
        v131 = 2048;
        v132 = v42;
        v133 = 2048;
        v134 = v43;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Altitude,%f,ReferenceAltitude,%f,ElevationStartTime,%f,ElevationEndTime,%f,AscendedElevation,%f,DescendedElevation,%f,BufferedAscendedElevation,%f,BufferedTimeStamp,%f,AscendingState,%f,ElevationDeviceSource,%d,ElevationLabel,%s,EpochTime,%f,UpdateTime,%f,cumulativeAltitudeFilterResetChange,%f,weatherChangeEstimate,%f,weatherBias,%f", buf, 0x9Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10215A530);
        v48 = *((_QWORD *)a1 + 73);
        v49 = *((_QWORD *)a1 + 66);
        v50 = *((_QWORD *)a1 + 67);
        v51 = *((_QWORD *)a1 + 74);
        v52 = *((_QWORD *)a1 + 76);
        v53 = *((_DWORD *)a1 + 154);
        v54 = a1 + 336;
        if (*((char *)a1 + 695) < 0)
          v54 = *v23;
        v55 = *((_QWORD *)a1 + 78);
        v56 = (float)*((unsigned int *)a1 + 136);
        v57 = *((_QWORD *)a1 + 79);
        v58 = *((_QWORD *)a1 + 82);
        v59 = (float)*((unsigned int *)a1 + 137);
        v74 = v64;
        *(double *)v75 = *((float *)&v66 + 1);
        *(_WORD *)&v75[8] = 2048;
        v76 = v48;
        v77 = 2048;
        v78 = v49;
        v79 = 2048;
        v80 = v50;
        v81 = 2048;
        v82 = v56;
        v83 = 2048;
        v84 = v59;
        v85 = 2048;
        v86 = v51;
        v87 = 2048;
        v88 = v52;
        v89 = 2048;
        v90 = (float)v53;
        v91 = 1024;
        v92 = LODWORD(v66);
        v93 = 2080;
        v94 = v54;
        v95 = 2048;
        v96 = v24;
        v97 = 2048;
        v98 = a6;
        v99 = 2048;
        v100 = v55;
        v101 = 2048;
        v102 = v57;
        v103 = 2048;
        v104 = v58;
        LODWORD(v63) = 158;
        v60 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Altitude,%f,ReferenceAltitude,%f,ElevationStartTime,%f,ElevationEndTime,%f,AscendedElevation,%f,DescendedElevation,%f,BufferedAscendedElevation,%f,BufferedTimeStamp,%f,AscendingState,%f,ElevationDeviceSource,%d,ElevationLabel,%s,EpochTime,%f,UpdateTime,%f,cumulativeAltitudeFilterResetChange,%f,weatherChangeEstimate,%f,weatherBias,%f", COERCE_DOUBLE(&v74), v63, *(double *)&v64, *((double *)&v64 + 1), v65, v66, v67, *(double *)&v68,
                        *(double *)&v69,
                        DWORD2(v69),
                        v70,
                        v71,
                        v72,
                        v73);
        sub_100512490("Generic", 1, 0, 2, "void CLSignificantElevationEstimator::updateWithVisit(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource, BOOL)", "%s\n", v60);
        if (v60 != buf)
          free(v60);
      }
      v44 = a1[1];
      if (v44)
      {
        v45 = *a1 + 1;
        v46 = *((unsigned int *)a1 + 1);
        if (v45 < v46)
          LOWORD(v46) = 0;
        *a1 = v45 - v46;
        v47 = v44 - 1;
        a1[1] = v47;
        if (v47)
          continue;
      }
      return;
    }
  }
}

uint64_t sub_1000DC820(uint64_t a1, unint64_t a2, float *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  float v18;

  if (!*(_WORD *)(a1 + 74))
    return 0;
  v5 = a1 + 80;
  v6 = *(unsigned __int16 *)(a1 + 72);
  v7 = *(unsigned __int16 *)(a1 + 74) + v6 - 1;
  v8 = *(unsigned int *)(a1 + 76);
  if (v7 < v8)
    v8 = 0;
  v9 = v5 + 16 * (v7 - v8);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 + 500000 < a2)
    return 0;
  if (v10 <= a2)
  {
    v18 = *(float *)v9;
  }
  else
  {
    if (*(_QWORD *)(v5 + 16 * v6 + 8) < a2)
    {
      v13 = 0;
      while (v13 < (unint64_t)*(unsigned __int16 *)(a1 + 74) - 1)
      {
        v14 = sub_1000E31C8((unsigned __int16 *)(a1 + 72), v13 + 1);
        v15 = *(float *)v14;
        v16 = *(_QWORD *)(v14 + 8);
        v17 = sub_1000E31C8((unsigned __int16 *)(a1 + 72), v13++);
        if (v16 > a2)
        {
          v18 = *(float *)v17
              + (float)((float)((float)(v15 - *(float *)v17) * (float)(a2 - *(_QWORD *)(v17 + 8)))
                      / (float)(v16 - *(_QWORD *)(v17 + 8)));
          goto LABEL_14;
        }
      }
      return 1;
    }
    v18 = *(float *)(v5 + 16 * v6);
  }
LABEL_14:
  *a3 = v18;
  return 1;
}

uint64_t sub_1000DC950(uint64_t result, double *a2)
{
  int v2;
  int v3;
  double v4;

  v2 = *(_DWORD *)result;
  v3 = *(_DWORD *)result + 1;
  *(_DWORD *)result = v3;
  if (v2 > 2)
    v4 = *(double *)(result + 16) - *(double *)(result + 8) * (*(double *)(result + 16) - *a2);
  else
    v4 = (*a2 + *(double *)(result + 16) * (double)v2) * (float)(1.0 / (float)v3);
  *(double *)(result + 16) = v4;
  return result;
}

uint64_t sub_1000DC9A4(uint64_t a1, uint64_t a2, char *__dst, double a4)
{
  __int128 v12;
  void *v13;
  void *v14;
  _DWORD *v15;
  _DWORD *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE __src[776];
  unint64_t v32;
  _QWORD v33[3];
  __int128 v34;
  __int128 v35;
  _BYTE v36[24];
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  void **v45;

  *(_WORD *)&__src[152] = 0;
  *(_OWORD *)__src = xmmword_101BAFEE0;
  memset(&__src[16], 0, 135);
  *(_QWORD *)&__src[160] = 0xBFF0000000000000;
  *(_DWORD *)&__src[168] = 0;
  memset(&__src[184], 0, 312);
  *(_QWORD *)&__src[176] = 0xBFF0000000000000;
  *(_QWORD *)&__src[496] = 0xBFF0000000000000;
  *(_QWORD *)&__src[504] = 0;
  *(_QWORD *)&__src[512] = 0xBFF0000000000000;
  *(_DWORD *)&__src[688] = 0;
  *(_QWORD *)&__src[696] = 0;
  memset(&__src[520], 0, 84);
  memset(&__src[608], 0, 73);
  *(_QWORD *)&__src[704] = 0xBFF0000000000000;
  *(_QWORD *)&__src[720] = 0;
  *(_QWORD *)&__src[712] = 0;
  *(_QWORD *)&__src[728] = 0x80000000800000;
  *(_QWORD *)&__src[744] = 0;
  *(_QWORD *)&__src[736] = 0;
  *(_OWORD *)&__src[752] = xmmword_101BB1EE0;
  *(_QWORD *)&__src[768] = 0x80000000800000;
  v32 = 0xBFF0000000000000;
  v34 = 0xBFF0000000000000;
  v35 = 0uLL;
  *(_QWORD *)v36 = 0xBFF0000000000000;
  *(_OWORD *)&v36[8] = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 0xBFF0000000000000;
  v40 = 0x600000006;
  v42 = 0;
  v41 = 0;
  v43 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v44 = _Q0;
  memcpy(__dst, __src, 0x308uLL);
  *((_QWORD *)__dst + 97) = 0xBFF0000000000000;
  sub_1000ADC24((uint64_t *)__dst + 98);
  *((_QWORD *)__dst + 99) = 0;
  *((_QWORD *)__dst + 98) = 0;
  *((_QWORD *)__dst + 100) = 0;
  memset(v33, 0, sizeof(v33));
  v12 = v35;
  *(_OWORD *)(__dst + 808) = v34;
  *(_OWORD *)(__dst + 824) = v12;
  *(_OWORD *)(__dst + 840) = *(_OWORD *)v36;
  *((_QWORD *)__dst + 107) = *(_QWORD *)&v36[16];
  v13 = (void *)*((_QWORD *)__dst + 108);
  if (v13)
  {
    *((_QWORD *)__dst + 109) = v13;
    operator delete(v13);
  }
  *((_QWORD *)__dst + 108) = 0;
  *((_QWORD *)__dst + 109) = 0;
  *((_QWORD *)__dst + 110) = 0;
  v38 = 0;
  v37 = 0uLL;
  *((_QWORD *)__dst + 111) = 0xBFF0000000000000;
  *((_QWORD *)__dst + 112) = v40;
  v14 = (void *)*((_QWORD *)__dst + 113);
  if (v14)
  {
    *((_QWORD *)__dst + 114) = v14;
    operator delete(v14);
  }
  *((_QWORD *)__dst + 113) = 0;
  *((_QWORD *)__dst + 114) = 0;
  *((_QWORD *)__dst + 115) = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  *((_OWORD *)__dst + 58) = v44;
  v45 = (void **)v33;
  sub_100279AA4(&v45);
  v15 = *(_DWORD **)a2;
  v16 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 == v16)
  {
    v17 = 1;
  }
  else
  {
    v17 = 1;
    do
    {
      switch(*v15)
      {
        case 0:
          v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E3910(v18, __dst, a4);
          goto LABEL_18;
        case 1:
          v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000DCDCC(v20, (_OWORD *)__dst + 10, a4);
          goto LABEL_18;
        case 2:
          v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000D0960(v21, __dst + 176, a4);
          goto LABEL_18;
        case 3:
          v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000DCDCC(v22, (_OWORD *)__dst + 31, a4);
          goto LABEL_18;
        case 4:
          v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E1198(v23, (_OWORD *)__dst + 32, a4);
          goto LABEL_18;
        case 5:
          v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E12C8(v24, (uint64_t)(__dst + 704), a4);
          goto LABEL_18;
        case 6:
          v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E3D90(v25, (_QWORD *)__dst + 97, a4);
          goto LABEL_18;
        case 7:
          v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E3A38(v26, __dst + 808, a4);
          goto LABEL_18;
        case 8:
          v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E3B0C(v27, (uint64_t)(__dst + 840), a4);
          goto LABEL_18;
        case 9:
          v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24));
          v19 = sub_1000E3C44(v28, (uint64_t)(__dst + 888), a4);
LABEL_18:
          v17 &= v19;
          break;
        default:
          break;
      }
      ++v15;
    }
    while (v15 != v16);
  }
  return v17 & 1;
}

uint64_t sub_1000DCDCC(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 8));
  v8 = *v7;
  v9 = *v7 + 16 * v6;
  v10 = v5 >> 8;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 8)) + 16 * v5;
  if (v9 != v11)
  {
    while (1)
    {
      v12 = v9;
      if (v9 == v8)
        v12 = *(v7 - 1) + 4096;
      v13 = *(double *)(v12 - 16);
      if (v13 <= a3 && v13 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v14 = *--v7;
        v8 = v14;
        v9 = v14 + 4096;
      }
      v9 -= 16;
      if (v9 == v11)
      {
        v9 = v11;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 16 * *(_QWORD *)(a1 + 48))
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4096;
  *a2 = *(_OWORD *)(v9 - 16);
  return 1;
}

void sub_1000DCE9C(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
  sub_1000DD3C4(v4, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
  sub_1000DE158(v5, a2);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24));
  sub_1000DD7B0(v6, a2);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  sub_1000DE864(v7, a2);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
  sub_1000DDD6C(v8, a2);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24));
  sub_1000DCFF8(v9, a2);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 144))(*(_QWORD *)(a1 + 24));
  sub_1000DF640(v10, a2);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
  sub_1000DEBE4(v11, a2);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24));
  sub_1000DE4D8(v12, a2);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24));
  sub_1000DF0F8(v13, a2);
  *(double *)(a1 + 32) = a2;
}

uint64_t sub_1000DCFB8(uint64_t a1)
{
  return a1 + 1448;
}

uint64_t sub_1000DCFC0(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1000DCFC8(uint64_t a1)
{
  return a1 + 296;
}

uint64_t sub_1000DCFD0(uint64_t a1)
{
  return a1 + 1680;
}

uint64_t sub_1000DCFD8(uint64_t a1)
{
  return a1 + 1872;
}

uint64_t sub_1000DCFE0(uint64_t a1)
{
  return a1 + 920;
}

uint64_t sub_1000DCFE8(uint64_t a1)
{
  return a1 + 2064;
}

uint64_t sub_1000DCFF0(uint64_t a1)
{
  return a1 + 2272;
}

void sub_1000DCFF8(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 28;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutPredictorTurnDetector::Turn>::update(CFAbsoluteTime) [T = CLWorkoutPredictorTurnDetector::Turn]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 56;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x38));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x38));
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 8 * (v10 / 0x38)) + 72 * (v10 % 0x38);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x38));
      v18 = *v17 + 72 * (v16 % 0x38);
    }
    v24 = sub_100AAE1FC(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (_QWORD *)(v26 + 8 * (v25 / 0x38));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : *v27 + 72 * (v25 % 0x38);
    sub_100AADF54((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000DD3C4(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 12;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLMotionCoprocessorInterface::MotionState>::update(CFAbsoluteTime) [T = CLMotionCoprocessorInterface::MotionState]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 25;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 104) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x19));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x19));
    }
    else
    {
      v14 = *(_QWORD *)(v11 + 8 * (v10 / 0x19)) + 160 * (v10 % 0x19);
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x19));
      v18 = *v17 + 160 * (v16 % 0x19);
    }
    v24 = sub_100AACBCC(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (_QWORD *)(v26 + 8 * (v25 / 0x19));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : (char *)(*v27 + 160 * (v25 % 0x19));
    sub_100AAC934((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15)
      *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  }
}

void sub_1000DD7B0(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 8;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [T = CLExtendedStepCountEntry]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 16;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 4));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 4));
    }
    else
    {
      v14 = (double *)(*v13 + 320 * (*(_QWORD *)(a1 + 48) & 0xFLL));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 4));
      v18 = (double *)(*v17 + 320 * (v16 & 0xF));
    }
    v24 = (char *)sub_100AAD22C(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (char *)(v26 + 8 * (v25 >> 4));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : (char *)(*(_QWORD *)v27 + 320 * (v25 & 0xF));
    sub_1000DDB44((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

unint64_t sub_1000DDB44(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v22[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a5[-*(_QWORD *)a4] >> 6)
       + 2 * (a4 - a2)
       + 0x3333333333333333 * ((uint64_t)&a3[-*(_QWORD *)a2] >> 6);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 >> 4));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[320 * (a1[4] & 0xFLL)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a3[-*(_QWORD *)a2] >> 6)
        + 2 * (a2 - (char *)v9)
        + 0x3333333333333333 * ((v10 - *v9) >> 6);
  v22[0].n128_u64[0] = v8 + 8 * (v7 >> 4);
  v22[0].n128_u64[1] = (unint64_t)v10;
  sub_100AAD33C((uint64_t **)v22, v11);
  if (v6 >= 1)
  {
    v12 = v22[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100AAD33C((uint64_t **)v22, v6);
      sub_100AAD3B0(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v22[0].n128_u64[0], (char *)v22[0].n128_u64[1], v22);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100A0FA18((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100AAD33C((uint64_t **)v22, v6);
      v13 = v22[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 >> 4));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[320 * (v14 & 0xF)];
      v22[0] = v12;
      sub_100AAD580(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v22);
      a1[5] -= v6;
      while ((sub_100A0FAF0(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[1];
  if (a1[2] == v19)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 8 * (a1[4] >> 4)) + 320 * (a1[4] & 0xFLL);
  v22[0].n128_u64[0] = v19 + 8 * (a1[4] >> 4);
  v22[0].n128_u64[1] = v20;
  sub_100AAD33C((uint64_t **)v22, v11);
  return v22[0].n128_u64[0];
}

void sub_1000DDD6C(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 10;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOdometerEntry>::update(CFAbsoluteTime) [T = CLOdometerEntry]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 21;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 / 0x15));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) / 0x15));
    }
    else
    {
      v14 = (double *)(*(_QWORD *)(v11 + 8 * (v10 / 0x15)) + 192 * (v10 % 0x15));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 / 0x15));
      v18 = (double *)(*v17 + 192 * (v16 % 0x15));
    }
    v24 = sub_100AAD9C8(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (_QWORD *)(v26 + 8 * (v25 / 0x15));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : (char *)(*v27 + 192 * (v25 % 0x15));
    sub_100AAD730((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000DE158(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::update(CFAbsoluteTime) [T = CLAmbientLightSensor_Type::CLALSLuxResult]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 256;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      v15 = 0;
      v18 = 0;
      v14 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      v14 = (_QWORD *)(a1 + 56);
      v15 = (double *)(*v13 + 16 * v10);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 8));
      v18 = (double *)(*v17 + 16 * v16);
    }
    v24 = (char *)sub_100AAD17C(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (char *)(v26 + 8 * (v25 >> 8));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : *(_QWORD *)v27 + 16 * v25;
    sub_1000D8D4C((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v14)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000DE4D8(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 64;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::update(CFAbsoluteTime) [T = CLOutdoorGnssAvailabilityPredictor]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 128;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 7));
    if (v12 == v11)
    {
      v14 = 0;
      v18 = 0;
      v15 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 7));
    }
    else
    {
      v14 = (_OWORD *)(*v13 + 32 * (v10 & 0x7F));
      v15 = (_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 7));
      v18 = (_OWORD *)(*v17 + 32 * (v16 & 0x7F));
    }
    v24 = (char *)sub_100AAF68C(v13, v14, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (char *)(v26 + 8 * (v25 >> 7));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : *(_QWORD *)v27 + 32 * (v25 & 0x7F);
    sub_1000D9878((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v15)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000DE864(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  double *v15;
  unint64_t v16;
  _QWORD *v17;
  double *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  uint64_t v37;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 56) = 0;
    v7 = v6 - (_QWORD)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v8 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v7 = v8 - (_QWORD)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      v9 = 128;
    }
    else
    {
      if (v7 >> 3 != 2)
      {
LABEL_15:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v19 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v20 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          v35 = a2;
          v36 = 2048;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v21 = *(_QWORD *)(a1 + 64);
          v30 = 134218240;
          v31 = a2;
          v32 = 2048;
          v33 = v21;
          LODWORD(v29) = 22;
          v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v30), v29);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorLocationCoordinate>::update(CFAbsoluteTime) [T = CLOutdoorLocationCoordinate]", "%s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        return;
      }
      v9 = 256;
    }
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_15;
  }
  if (*(double *)(a1 + 96) != -1.0)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = (_QWORD *)(v11 + 8 * (v10 >> 8));
    if (v12 == v11)
    {
      v15 = 0;
      v18 = 0;
      v14 = (_QWORD *)(a1 + 56);
      v17 = (_QWORD *)(v11 + 8 * ((*(_QWORD *)(a1 + 56) + v10) >> 8));
    }
    else
    {
      v14 = (_QWORD *)(a1 + 56);
      v15 = (double *)(*v13 + 16 * v10);
      v16 = *(_QWORD *)(a1 + 56) + v10;
      v17 = (_QWORD *)(v11 + 8 * (v16 >> 8));
      v18 = (double *)(*v17 + 16 * v16);
    }
    v24 = (char *)sub_100AAD17C(v13, v15, (uint64_t)v17, v18, *(uint64_t *)&a2, a1);
    v25 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = (char *)(v26 + 8 * (v25 >> 8));
    v28 = *(_QWORD *)(a1 + 32) == v26 ? 0 : *(_QWORD *)v27 + 16 * v25;
    sub_1000D8D4C((_QWORD *)(a1 + 16), v24, v23, v27, v28);
    if (!*v14)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
}

void sub_1000DEBE4(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[32];
  __int128 v42;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      v7 = (_QWORD *)(a1 + 56);
      v6 = *(void ***)(a1 + 24);
    }
    else
    {
      v7 = (_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = &v5[v8 / 0x55];
      v10 = (unint64_t)*v9;
      v11 = (unint64_t)*v9 + 48 * (v8 % 0x55);
      v12 = (unint64_t)v5[(*(_QWORD *)(a1 + 56) + v8) / 0x55] + 48 * ((*(_QWORD *)(a1 + 56) + v8) % 0x55);
      if (v11 != v12)
      {
        do
        {
          v13 = *(void **)(v11 + 24);
          if (v13)
          {
            *(_QWORD *)(v11 + 32) = v13;
            operator delete(v13);
            v10 = (unint64_t)*v9;
          }
          v11 += 48;
          if (v11 - v10 == 4080)
          {
            v14 = (unint64_t)v9[1];
            ++v9;
            v10 = v14;
            v11 = v14;
          }
        }
        while (v11 != v12);
        v5 = *(void ***)(a1 + 24);
        v6 = *(void ***)(a1 + 32);
      }
    }
    *v7 = 0;
    v23 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v24 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v23 = v24 - (_QWORD)v5;
      }
      while (v23 > 0x10);
    }
    if (v23 >> 3 == 1)
    {
      v25 = 42;
    }
    else
    {
      if (v23 >> 3 != 2)
      {
LABEL_24:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v26 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v27 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v28 = *(_QWORD *)(a1 + 64);
          v37 = 134218240;
          v38 = a2;
          v39 = 2048;
          v40 = v28;
          LODWORD(v36) = 22;
          v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v37), v36);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::update(CFAbsoluteTime) [T = CLOutdoorGnssLeechLocation]", "%s\n", v29);
          if (v29 != (char *)buf)
            free(v29);
        }
        return;
      }
      v25 = 85;
    }
    *(_QWORD *)(a1 + 48) = v25;
    goto LABEL_24;
  }
  v42 = 0u;
  memset(buf, 0, sizeof(buf));
  if (sub_1000DF080(a1, (uint64_t)buf))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (_QWORD *)(v16 + 8 * (v15 / 0x55));
    if (*(_QWORD *)(a1 + 32) == v16)
    {
      v18 = 0;
      v22 = 0;
      v19 = (_QWORD *)(a1 + 56);
      v21 = (_QWORD *)(v16 + 8 * ((*(_QWORD *)(a1 + 56) + v15) / 0x55));
    }
    else
    {
      v18 = (__int128 *)(*(_QWORD *)(v16 + 8 * (v15 / 0x55)) + 48 * (v15 % 0x55));
      v19 = (_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(a1 + 56) + v15;
      v21 = (_QWORD *)(v16 + 8 * (v20 / 0x55));
      v22 = (__int128 *)(*v21 + 48 * (v20 % 0x55));
    }
    v31 = sub_100AAEE9C(v17, v18, (uint64_t)v21, v22, *(uint64_t *)&a2, a1);
    v32 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 24);
    v34 = (_QWORD *)(v33 + 8 * (v32 / 0x55));
    v35 = *(_QWORD *)(a1 + 32) == v33 ? 0 : *v34 + 48 * (v32 % 0x55);
    sub_10020B1F4((_QWORD *)(a1 + 16), v31, v30, v34, v35);
    if (!*v19)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
  if (*(_QWORD *)&buf[24])
  {
    *(_QWORD *)&v42 = *(_QWORD *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
}

void sub_1000DF054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000DF080(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  double v3;
  __int128 v4;

  v2 = (__int128 *)(a1 + 96);
  v3 = *(double *)(a1 + 96);
  if (v3 != -1.0)
  {
    v4 = *v2;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
    *(_OWORD *)a2 = v4;
    if (v2 != (__int128 *)a2)
      sub_100AAEFA8((char *)(a2 + 24), *(char **)(a1 + 120), *(_QWORD *)(a1 + 128), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 2));
  }
  return v3 != -1.0;
}

void sub_1000DF0F8(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  double v41;
  int v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  _BYTE buf[24];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      v7 = (_QWORD *)(a1 + 56);
      v6 = *(void ***)(a1 + 24);
    }
    else
    {
      v7 = (_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = &v5[v8 / 0x49];
      v10 = (unint64_t)*v9;
      v11 = (unint64_t)*v9 + 56 * (v8 % 0x49);
      v12 = (unint64_t)v5[(*(_QWORD *)(a1 + 56) + v8) / 0x49] + 56 * ((*(_QWORD *)(a1 + 56) + v8) % 0x49);
      if (v11 != v12)
      {
        do
        {
          v13 = *(void **)(v11 + 16);
          if (v13)
          {
            *(_QWORD *)(v11 + 24) = v13;
            operator delete(v13);
            v10 = (unint64_t)*v9;
          }
          v11 += 56;
          if (v11 - v10 == 4088)
          {
            v14 = (unint64_t)v9[1];
            ++v9;
            v10 = v14;
            v11 = v14;
          }
        }
        while (v11 != v12);
        v5 = *(void ***)(a1 + 24);
        v6 = *(void ***)(a1 + 32);
      }
    }
    *v7 = 0;
    v28 = (char *)v6 - (char *)v5;
    if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v29 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v28 = v29 - (_QWORD)v5;
      }
      while (v28 > 0x10);
    }
    if (v28 >> 3 == 1)
    {
      v30 = 36;
    }
    else
    {
      if (v28 >> 3 != 2)
      {
LABEL_24:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v31 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v32 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v33 = *(_QWORD *)(a1 + 64);
          v42 = 134218240;
          v43 = a2;
          v44 = 2048;
          v45 = v33;
          LODWORD(v41) = 22;
          v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(&v42), v41);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorMapsRouteHint>::update(CFAbsoluteTime) [T = CLOutdoorMapsRouteHint]", "%s\n", v34);
          if (v34 != buf)
            free(v34);
        }
        return;
      }
      v30 = 73;
    }
    *(_QWORD *)(a1 + 48) = v30;
    goto LABEL_24;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0x600000006;
  v47 = 0;
  v48 = 0;
  *(_QWORD *)&buf[16] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v49 = _Q0;
  if (sub_1000DF5C0(a1, (uint64_t)buf))
  {
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 24);
    v22 = (_QWORD *)(v21 + 8 * (v20 / 0x49));
    if (*(_QWORD *)(a1 + 32) == v21)
    {
      v23 = 0;
      v27 = 0;
      v24 = (_QWORD *)(a1 + 56);
      v26 = (_QWORD *)(v21
                     + (((unint64_t)(((*(_QWORD *)(a1 + 56) + v20) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
    }
    else
    {
      v23 = *(_QWORD *)(v21 + 8 * (v20 / 0x49)) + 56 * (v20 % 0x49);
      v24 = (_QWORD *)(a1 + 56);
      v25 = *(_QWORD *)(a1 + 56) + v20;
      v26 = (_QWORD *)(v21 + 8 * (v25 / 0x49));
      v27 = *v26 + 56 * (v25 % 0x49);
    }
    v36 = sub_100AAFDB0(v22, v23, (uint64_t)v26, v27, *(uint64_t *)&a2, a1);
    v37 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v38 = *(_QWORD *)(a1 + 24);
    v39 = (_QWORD *)(v38 + 8 * (v37 / 0x49));
    v40 = *(_QWORD *)(a1 + 32) == v38 ? 0 : *v39 + 56 * (v37 % 0x49);
    sub_100AAFA48((_QWORD *)(a1 + 16), v36, v35, v39, v40);
    if (!*v24)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
  if (*(_QWORD *)&buf[16])
  {
    v47 = *(_QWORD *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
}

void sub_1000DF594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000DF5C0(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 104);
    if (a1 + 96 != a2)
      sub_1008AFA64((char *)(a2 + 16), *(char **)(a1 + 112), *(_QWORD *)(a1 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3));
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 136);
  }
  return v2 != -1.0;
}

void sub_1000DF640(uint64_t a1, double a2)
{
  double v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  _BYTE v35[12];
  __int16 v36;
  uint64_t v37;
  uint8_t buf[1640];

  v4 = *(double *)(a1 + 64);
  *(double *)(a1 + 64) = a2;
  if (*(_BYTE *)(a1 + 8) && *(double *)(a1 + 72) < a2)
  {
    *(_BYTE *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 24))(a1, v4);
    return;
  }
  if (v4 > a2)
  {
    v5 = *(void ***)(a1 + 24);
    v6 = *(void ***)(a1 + 32);
    if (v6 == v5)
    {
      v7 = (_QWORD *)(a1 + 56);
      v6 = *(void ***)(a1 + 24);
    }
    else
    {
      v7 = (_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = &v5[v8 >> 7];
      v10 = (uint64_t)*v9 + 32 * (v8 & 0x7F);
      v11 = *(uint64_t *)((char *)v5 + (((*(_QWORD *)(a1 + 56) + v8) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * ((*(_QWORD *)(a1 + 56) + v8) & 0x7F);
      if (v10 != v11)
      {
        do
        {
          *(_QWORD *)buf = v10 + 8;
          sub_100279AA4((void ***)buf);
          v10 += 32;
          if (v10 - (_QWORD)*v9 == 4096)
          {
            v12 = (uint64_t)v9[1];
            ++v9;
            v10 = v12;
          }
        }
        while (v10 != v11);
        v5 = *(void ***)(a1 + 24);
        v6 = *(void ***)(a1 + 32);
      }
    }
    *v7 = 0;
    v21 = (char *)v6 - (char *)v5;
    if (v21 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v22 = *(_QWORD *)(a1 + 32);
        v5 = (void **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v5;
        v21 = v22 - (_QWORD)v5;
      }
      while (v21 > 0x10);
    }
    if (v21 >> 3 == 1)
    {
      v23 = 64;
    }
    else
    {
      if (v21 >> 3 != 2)
      {
LABEL_22:
        *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
        if (*(_BYTE *)(a1 + 8))
          sub_1000E4778(a1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021679B0);
        v24 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v25 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "time rollback on update, currentTime, %f, lastUpdateTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021679B0);
          v26 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)v35 = 134218240;
          *(double *)&v35[4] = a2;
          v36 = 2048;
          v37 = v26;
          LODWORD(v34) = 22;
          v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on update, currentTime, %f, lastUpdateTime, %f", COERCE_DOUBLE(v35), v34);
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorWifiScan>::update(CFAbsoluteTime) [T = CLOutdoorWifiScan]", "%s\n", v27);
          if (v27 != (char *)buf)
            free(v27);
        }
        return;
      }
      v23 = 128;
    }
    *(_QWORD *)(a1 + 48) = v23;
    goto LABEL_22;
  }
  memset(buf, 0, 32);
  if (sub_1000DFA98(a1, (uint64_t)buf))
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 24);
    v15 = (_QWORD *)(v14 + 8 * (v13 >> 7));
    if (*(_QWORD *)(a1 + 32) == v14)
    {
      v16 = 0;
      v20 = 0;
      v17 = (_QWORD *)(a1 + 56);
      v19 = (_QWORD *)(v14 + 8 * ((*(_QWORD *)(a1 + 56) + v13) >> 7));
    }
    else
    {
      v16 = *v15 + 32 * (*(_QWORD *)(a1 + 48) & 0x7FLL);
      v17 = (_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 56) + v13;
      v19 = (_QWORD *)(v14 + 8 * (v18 >> 7));
      v20 = *v19 + 32 * (v18 & 0x7F);
    }
    v29 = (char *)sub_100AAE874(v15, v16, (uint64_t)v19, v20, *(uint64_t *)&a2, a1);
    v30 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 24);
    v32 = (char *)(v31 + 8 * (v30 >> 7));
    v33 = *(_QWORD *)(a1 + 32) == v31 ? 0 : *(_QWORD *)v32 + 32 * (v30 & 0x7F);
    sub_100AAE5C4((_QWORD *)(a1 + 16), v29, v28, v32, v33);
    if (!*v17)
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  }
  *(_QWORD *)v35 = &buf[8];
  sub_100279AA4((void ***)v35);
}

void sub_1000DFA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a11 = (void **)&a16;
  sub_100279AA4(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1000DFA98(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)(a1 + 96);
  if (v2 != -1.0)
  {
    *(double *)a2 = v2;
    if (a1 + 96 != a2)
      sub_10055A264((uint64_t *)(a2 + 8), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3));
  }
  return v2 != -1.0;
}

void sub_1000DFB04(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  NSObject *v36;
  uint64_t v37;
  int v38;
  double v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  int v70;
  double v71;
  __int128 v72;
  __int128 v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int16 v85;
  _BYTE v86[30];
  _BYTE v87[10];
  uint64_t v88;
  __int16 v89;
  double v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  _BYTE buf[44];
  _BYTE v104[10];
  uint64_t v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  int v117;
  __int16 v118;
  double v119;

  if (*(double *)(a1 + 1904) == -1.79769313e308 && *(_DWORD *)(a1 + 1872) >= 9u)
    *(double *)(a1 + 1904) = a3;
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 304);
  v75 = 0;
  v76 = 0.0;
  v77 = 0.0;
  v78 = 2.84809454e-306;
  v79 = 0;
  v80 = 0.0;
  v81 = xmmword_101BB1EE0;
  v82 = 0x80000000800000;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
  v9 = sub_1000E12C8(v8, (uint64_t)&v75, v6 + -15.0);
  if (v9)
  {
    v10 = *(unsigned __int16 *)(a1 + 786);
    v11 = *(unsigned int *)(a1 + 788);
    v12 = *(unsigned __int16 *)(a1 + 784);
    if (v12 + v10 >= v11)
      v13 = *(unsigned int *)(a1 + 788);
    else
      v13 = 0;
    *(double *)(a1 + 784 + 8 * (v12 + v10 - v13) + 8) = *((float *)&v81 + 2);
    if (v11 <= v10)
    {
      if (v12 + 1 < v11)
        LOWORD(v11) = 0;
      *(_WORD *)(a1 + 784) = v12 + 1 - v11;
    }
    else
    {
      *(_WORD *)(a1 + 786) = v10 + 1;
    }
    v18 = *((float *)&v76 + 1);
    if (*(double *)(a1 + 1912) == -1.79769313e308)
      *(double *)(a1 + 1912) = a3;
  }
  else
  {
    v14 = *(unsigned __int16 *)(a1 + 786);
    v15 = *(unsigned int *)(a1 + 788);
    v16 = *(unsigned __int16 *)(a1 + 784);
    if (v16 + v14 >= v15)
      v17 = *(unsigned int *)(a1 + 788);
    else
      v17 = 0;
    *(_QWORD *)(a1 + 784 + 8 * (v16 + v14 - v17) + 8) = 0;
    if (v15 <= v14)
    {
      if (v16 + 1 < v15)
        LOWORD(v15) = 0;
      *(_WORD *)(a1 + 784) = v16 + 1 - v15;
    }
    else
    {
      *(_WORD *)(a1 + 786) = v14 + 1;
    }
    v18 = 0.0;
  }
  v19 = sub_1000E0A24((uint64_t *)a1, v6);
  v21 = v20;
  sub_1000E18B8(a1, *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 1876), v7, v18, v19, v20, *(double *)(a1 + 1880), *(double *)(a1 + 1888), v6, a3);
  *(_DWORD *)(a1 + 1876) = *(_DWORD *)(a1 + 80);
  *(double *)(a1 + 1880) = v18;
  *(double *)(a1 + 1888) = v21;
  v22 = (double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40)) + 96);
  if (*v22 != -1.0)
    memcpy((void *)(a1 + 48), v22, 0x140uLL);
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10219C118);
  v23 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
  {
    v24 = a1;
    if (*(char *)(a1 + 23) < 0)
      v24 = *(_QWORD *)a1;
    v25 = *(_DWORD *)(a1 + 1872);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_DWORD *)(a1 + 80);
    v28 = *(_QWORD *)(a1 + 88);
    v29 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v25;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v26;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v27;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v28;
    *(_WORD *)v104 = 2048;
    *(_QWORD *)&v104[2] = v29;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][step],startTime,%f,stepCount,%u,stepDistance,%f,rawStepDistance,%f,", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v52 = a1;
    if (*(char *)(a1 + 23) < 0)
      v52 = *(_QWORD *)a1;
    v53 = *(_DWORD *)(a1 + 1872);
    v54 = *(_QWORD *)(a1 + 48);
    v55 = *(_DWORD *)(a1 + 80);
    v56 = *(_QWORD *)(a1 + 88);
    v57 = *(_QWORD *)(a1 + 96);
    v83 = 136316418;
    v84 = v52;
    v85 = 1024;
    *(_DWORD *)v86 = v53;
    *(_WORD *)&v86[4] = 2048;
    *(_QWORD *)&v86[6] = v54;
    *(_WORD *)&v86[14] = 1024;
    *(_DWORD *)&v86[16] = v55;
    *(_WORD *)&v86[20] = 2048;
    *(_QWORD *)&v86[22] = v56;
    *(_WORD *)v87 = 2048;
    *(_QWORD *)&v87[2] = v57;
    v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor,context,%s,[%d][step],startTime,%f,stepCount,%u,stepDistance,%f,rawStepDistance,%f,", (const char *)&v83, 54, *(double *)&v72, DWORD2(v72), *(double *)&v73, *((double *)&v73 + 1));
    sub_100512490("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v58);
    if (v58 != buf)
      free(v58);
  }
  if (v9)
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v30 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
    {
      v31 = a1;
      if (*(char *)(a1 + 23) < 0)
        v31 = *(_QWORD *)a1;
      v32 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v32;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v75;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = *((float *)&v76 + 1);
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s[%d][turn-recv],startTime,%f,gyroHeadingRad,%f", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
      v33 = a1;
      if (*(char *)(a1 + 23) < 0)
        v33 = *(_QWORD *)a1;
      v34 = *(_DWORD *)(a1 + 1872);
      v83 = 136315906;
      v84 = v33;
      v85 = 1024;
      *(_DWORD *)v86 = v34;
      *(_WORD *)&v86[4] = 2048;
      *(_QWORD *)&v86[6] = v75;
      *(_WORD *)&v86[14] = 2048;
      *(double *)&v86[16] = *((float *)&v76 + 1);
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor,context,%s[%d][turn-recv],startTime,%f,gyroHeadingRad,%f", (const char *)&v83, 38, *(double *)&v72, *((double *)&v72 + 1));
      sub_100512490("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v35);
LABEL_86:
      if (v35 != buf)
        free(v35);
    }
  }
  else
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v36 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
    {
      v37 = a1;
      if (*(char *)(a1 + 23) < 0)
        v37 = *(_QWORD *)a1;
      v38 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v37;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v38;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v6 + -15.0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][turn-none],requestedSampleTime,%f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
      v69 = a1;
      if (*(char *)(a1 + 23) < 0)
        v69 = *(_QWORD *)a1;
      v70 = *(_DWORD *)(a1 + 1872);
      v83 = 136315650;
      v84 = v69;
      v85 = 1024;
      *(_DWORD *)v86 = v70;
      *(_WORD *)&v86[4] = 2048;
      *(double *)&v86[6] = v6 + -15.0;
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor,context,%s,[%d][turn-none],requestedSampleTime,%f", (const char *)&v83, 28, *(double *)&v72);
      sub_100512490("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v35);
      goto LABEL_86;
    }
  }
  *(double *)buf = v19;
  *(double *)&buf[8] = v7;
  sub_1000E2A10((unsigned __int16 *)(a1 + 1040), buf);
  v39 = sub_1000E05E4(a1);
  v72 = 0u;
  v73 = 0u;
  sub_1000E0698(a1, (uint64_t)&v72);
  v40 = v72;
  *(double *)a2 = v39;
  *(_QWORD *)(a2 + 8) = v40;
  v41 = *(_DWORD *)(a1 + 1872);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 1952);
  *(_DWORD *)(a2 + 20) = v41;
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10219C118);
  v42 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
  {
    v43 = a1;
    if (*(char *)(a1 + 23) < 0)
      v43 = *(_QWORD *)a1;
    v44 = *(_QWORD *)&v19;
    v45 = *(_QWORD *)(a1 + 1944);
    if (v19 >= 9999.0)
      v44 = 0x40C3878000000000;
    v46 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    v47 = *(unsigned int *)(a1 + 372);
    if (v46 < v47)
      v47 = 0;
    v48 = a1 + 368 + 16 * (v46 - v47);
    v50 = *(_QWORD *)(v48 + 8);
    v49 = *(_QWORD *)(v48 + 16);
    v51 = *(_DWORD *)(a1 + 1952);
    *(_DWORD *)buf = 136318210;
    *(_QWORD *)&buf[4] = v43;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v44;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v45;
    *(_WORD *)&buf[42] = 2048;
    *(_QWORD *)v104 = v50;
    *(_WORD *)&v104[8] = 2048;
    v105 = v49;
    v106 = 2048;
    v107 = v6;
    v108 = 1024;
    v109 = v51;
    v110 = 2048;
    v111 = v40;
    v112 = 2048;
    v113 = *((_QWORD *)&v72 + 1);
    v114 = 2048;
    v115 = *((_QWORD *)&v73 + 1);
    v116 = 1024;
    v117 = v73;
    v118 = 2048;
    v119 = v39;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "IndoorOutdoor,GPSResult,context,%s,stepDeltaDistance,%f,gpsDeltaDistance,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,stepTimestamp,%f,fGpsState,%d,gpsDiscordanceProbability,%f,gpsDiscordanceRawProbability,%f,gpsDiscordance,%f,numValidDiscordanceSamples,%d,llrBufferSumProbability,%f", buf, 0x7Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v59 = a1;
    if (*(char *)(a1 + 23) < 0)
      v59 = *(_QWORD *)a1;
    v60 = *(_QWORD *)&v19;
    v61 = *(_QWORD *)(a1 + 1944);
    if (v19 >= 9999.0)
      v60 = 0x40C3878000000000;
    v62 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    v63 = *(unsigned int *)(a1 + 372);
    if (v62 < v63)
      v63 = 0;
    v64 = a1 + 368 + 16 * (v62 - v63);
    v66 = *(_QWORD *)(v64 + 8);
    v65 = *(_QWORD *)(v64 + 16);
    v67 = *(_DWORD *)(a1 + 1952);
    v83 = 136318210;
    v84 = v59;
    v85 = 2048;
    *(double *)v86 = v7;
    *(_WORD *)&v86[8] = 2048;
    *(_QWORD *)&v86[10] = v60;
    *(_WORD *)&v86[18] = 2048;
    *(_QWORD *)&v86[20] = v61;
    *(_WORD *)&v86[28] = 2048;
    *(_QWORD *)v87 = v66;
    *(_WORD *)&v87[8] = 2048;
    v88 = v65;
    v89 = 2048;
    v90 = v6;
    v91 = 1024;
    v92 = v67;
    v93 = 2048;
    v94 = v72;
    v95 = 2048;
    v96 = *((_QWORD *)&v72 + 1);
    v97 = 2048;
    v98 = *((_QWORD *)&v73 + 1);
    v99 = 1024;
    v100 = v73;
    v101 = 2048;
    v102 = v39;
    LODWORD(v71) = 124;
    v68 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor,GPSResult,context,%s,stepDeltaDistance,%f,gpsDeltaDistance,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,stepTimestamp,%f,fGpsState,%d,gpsDiscordanceProbability,%f,gpsDiscordanceRawProbability,%f,gpsDiscordance,%f,numValidDiscordanceSamples,%d,llrBufferSumProbability,%f", (const char *)&v83, v71, *(double *)&v72, *((double *)&v72 + 1), *(double *)&v73, *((double *)&v73 + 1), v74, v75, v76,
                    v77,
                    v78,
                    v79,
                    v80);
    sub_100512490("Generic", 1, 0, 2, "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)", "%s\n", v68);
    if (v68 != buf)
      free(v68);
  }
}

double sub_1000E05E4(uint64_t a1)
{
  double result;
  __int128 v2;
  uint64_t v3;
  double v4[2];

  switch(*(_DWORD *)(a1 + 1952))
  {
    case 0:
      result = -1.0;
      break;
    case 1:
    case 5:
      result = 0.49;
      break;
    case 2:
    case 3:
    case 4:
      v2 = xmmword_101C3BC80;
      v3 = *(_QWORD *)(a1 + 1856);
      sub_1000E381C((uint64_t)&v3, v4, (uint64_t *)&v2, 2, 1);
      result = v4[1];
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

void sub_1000E0698(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;

  *(_OWORD *)a2 = xmmword_101C3BCA8;
  *(_OWORD *)(a2 + 16) = unk_101C3BCB8;
  if (*(unsigned __int16 *)(a1 + 1042) >= 5u)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (unsigned __int16 *)(a1 + 1040);
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      v10 = (double *)sub_1000E082C(v7, v5);
      v11 = *v10;
      v12 = v10[1];
      if (v12 <= 0.0 || v11 == 1.79769313e308)
      {
        v14 = v6;
      }
      else
      {
        v14 = (v6 + 1);
        if ((int)v6 >= 2)
        {
          v9 = v9 + v12;
          v8 = v8 + v11;
          *(_DWORD *)(a2 + 16) = ++v4;
        }
      }
      ++v5;
      v6 = v14;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 1042));
    if (v9 > 0.0)
    {
      v15 = fmin(vabdd_f64(v9, v8) / v9, 1.0);
      *(double *)(a2 + 24) = v15;
      v19 = xmmword_101C3BC90;
      v20 = v15;
      sub_1000E381C((uint64_t)&v20, &v21, (uint64_t *)&v19, 2, 1);
      v16 = v22;
      *(double *)(a2 + 8) = v22;
      if (v4 > 5)
      {
        if (v4 > 0x11)
        {
LABEL_18:
          *(double *)a2 = v16;
          return;
        }
        v17 = fmax(v16, 0.110000001);
        v18 = 0.889999976;
      }
      else
      {
        v17 = fmax(v16, 0.310000012);
        v18 = 0.689999988;
      }
      v16 = fmin(v17, v18);
      goto LABEL_18;
    }
  }
}

uint64_t sub_1000E082C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C158);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C158);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLIndoorOutdoorGPSModel::GpsStepDistancePair>::operator[](const size_t) const [T = CLIndoorOutdoorGPSModel::GpsStepDistancePair]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

double sub_1000E0A24(uint64_t *a1, double a2)
{
  uint64_t v4;
  int v5;
  double v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  double v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  double v23;
  NSObject *v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  int v28;
  char *v29;
  uint64_t *v31;
  int v32;
  char *v33;
  __int128 v34;
  double v35;
  double v36;
  double v37;
  const char *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  uint64_t v81;
  uint8_t buf[4];
  uint64_t *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  uint64_t v111;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 40))(a1[5]);
  v5 = sub_1000E1198(v4, &v47, a2);
  v6 = *((double *)&v47 + 1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 40))(a1[5]);
  v8 = sub_1000E1198(v7, &v34, a2 + 1.0 + 0.5);
  if (v5)
    v9 = v6 == -1.0;
  else
    v9 = 1;
  if (v9)
    return 1.79769313e308;
  v10 = *((double *)&v34 + 1) == -1.0 ? 0 : v8;
  if (v10 != 1)
    return 1.79769313e308;
  v11 = v49;
  if (vabdd_f64(v49, v39) > 0.001)
    v11 = sub_1011A2E44(a2, v50, v41, v49, v39);
  v12 = v46;
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10219C118);
  v13 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
  {
    v14 = a1;
    if (*((char *)a1 + 23) < 0)
      v14 = (uint64_t *)*a1;
    v15 = *((_DWORD *)a1 + 468);
    *(_DWORD *)buf = 136318722;
    v83 = v14;
    v84 = 1024;
    v85 = v15;
    v86 = 2080;
    v87 = "GOOD";
    v88 = 2048;
    v89 = v50;
    v90 = 2048;
    v91 = v49;
    v92 = 2048;
    v93 = v51;
    v94 = 2048;
    v95 = v48;
    v96 = 2080;
    v97 = "GOOD";
    v98 = 2048;
    v99 = v41;
    v100 = 2048;
    v101 = v39;
    v102 = 2048;
    v103 = v46;
    v104 = 2048;
    v105 = v35;
    v106 = 2048;
    v107 = a2;
    v108 = 2048;
    v109 = v11;
    v110 = 2048;
    v111 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][gps-current],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", buf, 0x94u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v31 = a1;
    if (*((char *)a1 + 23) < 0)
      v31 = (uint64_t *)*a1;
    v32 = *((_DWORD *)a1 + 468);
    v52 = 136318722;
    v53 = v31;
    v54 = 1024;
    v55 = v32;
    v56 = 2080;
    v57 = "GOOD";
    v58 = 2048;
    v59 = v50;
    v60 = 2048;
    v61 = v49;
    v62 = 2048;
    v63 = v51;
    v64 = 2048;
    v65 = v48;
    v66 = 2080;
    v67 = "GOOD";
    v68 = 2048;
    v69 = v41;
    v70 = 2048;
    v71 = v39;
    v72 = 2048;
    v73 = v46;
    v74 = 2048;
    v75 = v35;
    v76 = 2048;
    v77 = a2;
    v78 = 2048;
    v79 = v11;
    v80 = 2048;
    v81 = v12;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor,context,%s,[%d][gps-current],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", (const char *)&v52, 148, (const char *)v34, *((double *)&v34 + 1), v35, v36, v37, v38, v39,
                    v40,
                    v41,
                    v42,
                    v43,
                    v44,
                    v45);
    sub_100512490("Generic", 1, 0, 2, "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const", "%s\n", v33);
    if (v33 != (char *)buf)
      free(v33);
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 40))(a1[5]);
  v17 = sub_1000E1198(v16, &v47, a2 + -2.56);
  v18 = *((double *)&v47 + 1);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 40))(a1[5]);
  v20 = sub_1000E1198(v19, &v34, a2 + -2.56 + 1.0 + 0.5);
  v21 = 1.79769313e308;
  if (v17 && v18 != -1.0)
  {
    if (*((double *)&v34 + 1) == -1.0)
      v22 = 0;
    else
      v22 = v20;
    if (v22 == 1)
    {
      v23 = v49;
      if (vabdd_f64(v49, v39) > 0.001)
        v23 = sub_1011A2E44(a2 + -2.56, v50, v41, v49, v39);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
      v24 = qword_10229FF48;
      if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
      {
        v25 = a1;
        if (*((char *)a1 + 23) < 0)
          v25 = (uint64_t *)*a1;
        v26 = *((_DWORD *)a1 + 468);
        *(_DWORD *)buf = 136318722;
        v83 = v25;
        v84 = 1024;
        v85 = v26;
        v86 = 2080;
        v87 = "GOOD";
        v88 = 2048;
        v89 = v50;
        v90 = 2048;
        v91 = v49;
        v92 = 2048;
        v93 = v51;
        v94 = 2048;
        v95 = v48;
        v96 = 2080;
        v97 = "GOOD";
        v98 = 2048;
        v99 = v41;
        v100 = 2048;
        v101 = v39;
        v102 = 2048;
        v103 = v46;
        v104 = 2048;
        v105 = v35;
        v106 = 2048;
        v107 = a2;
        v108 = 2048;
        v109 = v23;
        v110 = 2048;
        v111 = v12;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "IndoorOutdoor,context,%s,[%d][gps-previous],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", buf, 0x94u);
      }
      v21 = v11 - v23;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF40 != -1)
          dispatch_once(&qword_10229FF40, &stru_10219C118);
        v27 = a1;
        if (*((char *)a1 + 23) < 0)
          v27 = (uint64_t *)*a1;
        v28 = *((_DWORD *)a1 + 468);
        v52 = 136318722;
        v53 = v27;
        v54 = 1024;
        v55 = v28;
        v56 = 2080;
        v57 = "GOOD";
        v58 = 2048;
        v59 = v50;
        v60 = 2048;
        v61 = v49;
        v62 = 2048;
        v63 = v51;
        v64 = 2048;
        v65 = v48;
        v66 = 2080;
        v67 = "GOOD";
        v68 = 2048;
        v69 = v41;
        v70 = 2048;
        v71 = v39;
        v72 = 2048;
        v73 = v46;
        v74 = 2048;
        v75 = v35;
        v76 = 2048;
        v77 = a2;
        v78 = 2048;
        v79 = v23;
        v80 = 2048;
        v81 = v12;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "IndoorOutdoor,context,%s,[%d][gps-previous],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[B-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f", (const char *)&v52, 148, (const char *)v34, *((double *)&v34 + 1), v35, v36, v37, v38, v39,
                        v40,
                        v41,
                        v42,
                        v43,
                        v44,
                        v45);
        sub_100512490("Generic", 1, 0, 2, "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const", "%s\n", v29);
        if (v29 != (char *)buf)
          free(v29);
      }
      return v21;
    }
    return 1.79769313e308;
  }
  return v21;
}

uint64_t sub_1000E1190(uint64_t a1)
{
  return a1 + 1096;
}

uint64_t sub_1000E1198(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 / 0x15));
  v8 = *v7;
  v9 = *v7 + 192 * (v6 % 0x15);
  v10 = v5 / 0x15;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x15));
  v12 = v5 % 0x15;
  v13 = v11 + 192 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4032;
      v15 = *(double *)(v14 - 192);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4032;
      }
      v9 -= 192;
      if (v9 == v13)
      {
        v9 = v11 + 192 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 192 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4032;
  v17 = *(_OWORD *)(v9 - 192);
  v18 = *(_OWORD *)(v9 - 176);
  v19 = *(_OWORD *)(v9 - 144);
  a2[2] = *(_OWORD *)(v9 - 160);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  v20 = *(_OWORD *)(v9 - 128);
  v21 = *(_OWORD *)(v9 - 112);
  v22 = *(_OWORD *)(v9 - 80);
  a2[6] = *(_OWORD *)(v9 - 96);
  a2[7] = v22;
  a2[4] = v20;
  a2[5] = v21;
  v23 = *(_OWORD *)(v9 - 64);
  v24 = *(_OWORD *)(v9 - 48);
  v25 = *(_OWORD *)(v9 - 16);
  a2[10] = *(_OWORD *)(v9 - 32);
  a2[11] = v25;
  a2[8] = v23;
  a2[9] = v24;
  return 1;
}

uint64_t sub_1000E12C8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 / 0x38));
  v8 = *v7;
  v9 = *v7 + 72 * (v6 % 0x38);
  v10 = v5 / 0x38;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x38));
  v12 = v5 % 0x38;
  v13 = v11 + 72 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4032;
      v15 = *(double *)(v14 - 72);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4032;
      }
      v9 -= 72;
      if (v9 == v13)
      {
        v9 = v11 + 72 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 72 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4032;
  *(_QWORD *)a2 = *(_QWORD *)(v9 - 72);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 - 64);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v9 - 48);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v9 - 44);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v9 - 40);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v9 - 20);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(v9 - 16);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(v9 - 12);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v9 - 8);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(v9 - 4);
  return 1;
}

unsigned __int16 *sub_1000E1410(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *result;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint8_t buf[1640];

  if (!*((_BYTE *)a1 + 448))
  {
    v16 = *a1 + (unint64_t)a1[1] - 1;
    v17 = *((unsigned int *)a1 + 1);
    if (v16 < v17)
      v17 = 0;
    if (*(_QWORD *)(a2 + 8) > *(_QWORD *)&a1[8 * (v16 - v17) + 8])
      goto LABEL_14;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "fElevationBuffer timestamp did not move forward, timestamp, %llu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
      v28 = *(_QWORD *)(a2 + 8);
      v32 = 134217984;
      v33 = v28;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "fElevationBuffer timestamp did not move forward, timestamp, %llu", &v32);
      sub_100512490("Generic", 1, 0, 2, "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    sub_10106766C((uint64_t)a1);
    if (!*((_BYTE *)a1 + 448))
    {
LABEL_14:
      v20 = a1[80] + (unint64_t)a1[81] - 1;
      v21 = *((unsigned int *)a1 + 41);
      if (v20 < v21)
        v21 = 0;
      if (*(_QWORD *)(a3 + 8) <= *(_QWORD *)&a1[20 * (v20 - v21) + 88])
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
        v22 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(_QWORD *)(a3 + 8);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "fStepHistory timestamp did not move forward, timestamp, %llu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
          v30 = *(_QWORD *)(a3 + 8);
          v32 = 134217984;
          v33 = v30;
          v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "fStepHistory timestamp did not move forward, timestamp, %llu", &v32);
          sub_100512490("Generic", 1, 0, 2, "void CMFilteredElevationStepHistory::update(const CMElevationSample &, const CMStepCountSample &)", "%s\n", v31);
          if (v31 != (char *)buf)
            free(v31);
        }
        sub_10106766C((uint64_t)a1);
      }
    }
  }
  sub_1000E33E8(a1 + 80, (__int128 *)a3);
  result = sub_1000E2A10(a1, (_OWORD *)a2);
  *((_BYTE *)a1 + 448) = 0;
  if (*((_DWORD *)a1 + 1) == a1[1])
  {
    v7 = sub_1000E31C8(a1, 0);
    v8 = *(float *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = sub_1000E31C8(a1, 1uLL);
    v11 = *(float *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = sub_1000E31C8(a1, 2uLL);
    if (*((_BYTE *)a1 + 449))
    {
      v14 = (float)(v8 + v11) * 0.5;
      v15 = (unint64_t)(v12 + v9) >> 1;
    }
    else
    {
      v24 = a1[36] + (unint64_t)a1[37] - 1;
      v25 = *((unsigned int *)a1 + 19);
      if (v24 < v25)
        v25 = 0;
      v26 = (uint64_t)&a1[8 * (v24 - v25) + 36];
      v14 = *(float *)(v26 + 8);
      v15 = *(_QWORD *)(v26 + 16);
    }
    v27 = (unint64_t)(*(_QWORD *)(v13 + 8) + v12) >> 1;
    *(float *)buf = v14 + (float)((float)((float)(sub_1000E2D70(a1) - v14) * (float)(v12 - v15)) / (float)(v27 - v15));
    *(_QWORD *)&buf[8] = v12;
    result = sub_1000E2A10(a1 + 36, buf);
    *((_BYTE *)a1 + 449) = 0;
  }
  return result;
}

void sub_1000E18B8(uint64_t a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unsigned __int16 *v14;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double v24;
  __double2 v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  __double2 v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  __double2 v37;
  NSObject *v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char *v84;
  __double2 v85;
  double v86;
  double v87;
  double v88;
  __int128 v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  double v124;
  __int16 v125;
  int v126;
  _BYTE buf[22];
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  double v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  double v157;
  __int16 v158;
  int v159;

  v14 = (unsigned __int16 *)(a1 + 368);
  if (*(_WORD *)(a1 + 370))
  {
    v20 = a1 + 376;
    v21 = *(unsigned __int16 *)(a1 + 370) + (unint64_t)*(unsigned __int16 *)(a1 + 368) - 1;
    v22 = *(unsigned int *)(a1 + 372);
    if (v21 < v22)
      v22 = 0;
    v23 = (double *)(v20 + 16 * (v21 - v22));
    v24 = *v23;
    v25 = __sincos_stret(a4);
    v26 = v23[1] + v25.__sinval * a3;
    *(double *)&v90 = v24 + v25.__cosval * a3;
    *((double *)&v90 + 1) = v26;
    sub_1000E2A10(v14, &v90);
    if ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a6 == 1.79769313e308
      || (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a5 == 1.79769313e308)
    {
      v33 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      v34 = *(unsigned int *)(a1 + 508);
      if (v33 < v34)
        v34 = 0;
      v35 = a1 + 504 + 16 * (v33 - v34);
      v32 = *(double *)(v35 + 16);
      *(_QWORD *)&v90 = *(_QWORD *)(v35 + 8);
    }
    else
    {
      v27 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      v28 = *(unsigned int *)(a1 + 508);
      if (v27 < v28)
        v28 = 0;
      v29 = a1 + 504 + 16 * (v27 - v28);
      v30 = *(double *)(v29 + 8);
      v31 = __sincos_stret(a6);
      *(double *)&v90 = v30 + v31.__cosval * a5;
      v32 = *(double *)(v29 + 16) + v31.__sinval * a5;
    }
    *((double *)&v90 + 1) = v32;
    sub_1000E2A10((unsigned __int16 *)(a1 + 504), &v90);
    if (a2 && *(double *)(a1 + 1896) == 0.0)
      *(double *)(a1 + 1896) = a9;
    v36 = *(double *)(a1 + 1912);
    if (v36 == -1.79769313e308 || a10 - v36 <= 23.04)
      *(_QWORD *)(a1 + 1928) = 0x7FF8000000000000;
    else
      sub_1000E1F98(a1, v14, 1, (unsigned __int16 *)(a1 + 640), (double *)(a1 + 1928));
    sub_1000E1F98(a1, (unsigned __int16 *)(a1 + 504), 0, (unsigned __int16 *)(a1 + 712), (double *)(a1 + 1936));
    sub_1000E2450(a1, a5, a6, a7, a8);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v39 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
    {
      v40 = a1;
      if (*(char *)(a1 + 23) < 0)
        v40 = *(_QWORD *)a1;
      v41 = a5;
      if (a5 >= 9999.0)
        v41 = 9999.0;
      v42 = *(unsigned int *)(a1 + 788);
      v43 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v43 < v42)
        v42 = 0;
      v44 = *(_QWORD *)(a1 + 784 + 8 * (v43 - v42) + 8);
      v45 = *(_QWORD *)(a1 + 1928);
      v46 = *(_QWORD *)(a1 + 1936);
      v47 = *(_QWORD *)(a1 + 1944);
      v48 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      v49 = *(unsigned int *)(a1 + 372);
      if (v48 < v49)
        v49 = 0;
      v50 = (uint64_t *)(v20 + 16 * (v48 - v49));
      v52 = *v50;
      v51 = v50[1];
      v53 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      v54 = *(unsigned int *)(a1 + 508);
      if (v53 < v54)
        v54 = 0;
      v55 = a1 + 504 + 16 * (v53 - v54);
      v56 = *(_QWORD *)(v55 + 8);
      v57 = *(_QWORD *)(v55 + 16);
      v58 = *(_QWORD *)(a1 + 1848);
      v59 = *(_QWORD *)(a1 + 1856);
      v60 = *(_QWORD *)(a1 + 1864);
      v61 = *(_DWORD *)(a1 + 1952);
      *(_DWORD *)buf = 136319490;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      v128 = 2048;
      v129 = a4;
      v130 = 2048;
      v131 = v41;
      v132 = 2048;
      v133 = a6;
      v134 = 2048;
      v135 = v44;
      v136 = 2048;
      v137 = v45;
      v138 = 2048;
      v139 = v46;
      v140 = 2048;
      v141 = v47;
      v142 = 2048;
      v143 = v52;
      v144 = 2048;
      v145 = v51;
      v146 = 2048;
      v147 = v56;
      v148 = 2048;
      v149 = v57;
      v150 = 2048;
      v151 = v58;
      v152 = 2048;
      v153 = v59;
      v154 = 2048;
      v155 = v60;
      v156 = 2048;
      v157 = a9;
      v158 = 1024;
      v159 = v61;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "in-out-metrics,context,%s,stepDeltaDistance,%f,gyroHeadingRadians,%f,gpsDeltaDistance,%f,gpsHeadingRadians,%f,bodySum,%f,fTurnEnv,%f,fGPSTurnEnv,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,fGPSDistanceX,%f,fGPSDistanceY,%f,fGpsWanderLLRBufferSum,%f,fGpsLLRBufferSum,%f,fGpsFixBufferSum,%f,stepTimestamp,%f,fGpsState,%d", buf, 0xB2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
      v62 = a1;
      if (*(char *)(a1 + 23) < 0)
        v62 = *(_QWORD *)a1;
      v63 = a5;
      if (a5 >= 9999.0)
        v63 = 9999.0;
      v64 = *(unsigned int *)(a1 + 788);
      v65 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v65 < v64)
        v64 = 0;
      v66 = *(_QWORD *)(a1 + 784 + 8 * (v65 - v64) + 8);
      v67 = *(_QWORD *)(a1 + 1928);
      v68 = *(_QWORD *)(a1 + 1936);
      v69 = *(_QWORD *)(a1 + 1944);
      v70 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      v71 = *(unsigned int *)(a1 + 372);
      if (v70 < v71)
        v71 = 0;
      v72 = (uint64_t *)(v20 + 16 * (v70 - v71));
      v74 = *v72;
      v73 = v72[1];
      v75 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      v76 = *(unsigned int *)(a1 + 508);
      if (v75 < v76)
        v76 = 0;
      v77 = a1 + 504 + 16 * (v75 - v76);
      v79 = *(_QWORD *)(v77 + 8);
      v78 = *(_QWORD *)(v77 + 16);
      v80 = *(_QWORD *)(a1 + 1848);
      v81 = *(_QWORD *)(a1 + 1856);
      v82 = *(_QWORD *)(a1 + 1864);
      v83 = *(_DWORD *)(a1 + 1952);
      v91 = 136319490;
      v92 = v62;
      v93 = 2048;
      v94 = a3;
      v95 = 2048;
      v96 = a4;
      v97 = 2048;
      v98 = v63;
      v99 = 2048;
      v100 = a6;
      v101 = 2048;
      v102 = v66;
      v103 = 2048;
      v104 = v67;
      v105 = 2048;
      v106 = v68;
      v107 = 2048;
      v108 = v69;
      v109 = 2048;
      v110 = v74;
      v111 = 2048;
      v112 = v73;
      v113 = 2048;
      v114 = v79;
      v115 = 2048;
      v116 = v78;
      v117 = 2048;
      v118 = v80;
      v119 = 2048;
      v120 = v81;
      v121 = 2048;
      v122 = v82;
      v123 = 2048;
      v124 = a9;
      v125 = 1024;
      v126 = v83;
      LODWORD(v87) = 178;
      v84 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "in-out-metrics,context,%s,stepDeltaDistance,%f,gyroHeadingRadians,%f,gpsDeltaDistance,%f,gpsHeadingRadians,%f,bodySum,%f,fTurnEnv,%f,fGPSTurnEnv,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,fGPSDistanceX,%f,fGPSDistanceY,%f,fGpsWanderLLRBufferSum,%f,fGpsLLRBufferSum,%f,fGpsFixBufferSum,%f,stepTimestamp,%f,fGpsState,%d", (const char *)&v91, v87, v88, a4, *(double *)&v90, *((double *)&v90 + 1));
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorOutdoorGPSModel::processSamples(const double, const double, const double, const double, const double, const double, const CFAbsoluteTime, const CFAbsoluteTime, const uint32_t)", "%s\n", v84);
      if (v84 != buf)
        free(v84);
    }
  }
  else
  {
    v37 = __sincos_stret(a4);
    *(double *)buf = v37.__cosval * a3;
    *(double *)&buf[8] = v37.__sinval * a3;
    sub_1000E2A10(v14, buf);
    if (a6 == 1.79769313e308 || a5 == 1.79769313e308)
    {
      *(_QWORD *)buf = 0;
      v86 = 0.0;
    }
    else
    {
      v85 = __sincos_stret(a6);
      *(double *)buf = v85.__cosval * a5;
      v86 = v85.__sinval * a5;
    }
    *(double *)&buf[8] = v86;
    sub_1000E2A10((unsigned __int16 *)(a1 + 504), buf);
  }
  ++*(_DWORD *)(a1 + 1872);
}

void sub_1000E1F98(uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, double *a5)
{
  unsigned int v5;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  double v31;
  long double v32;

  v5 = a2[1];
  if (v5 >= 7)
  {
    v11 = v5 - 1;
    if (sub_1000E2184(a1, a2, v5 - 1, 6) > 7.62947002)
    {
      v12 = a2 + 4;
      v13 = a2[1];
      v14 = *a2 + v13 - 1;
      v15 = *((unsigned int *)a2 + 1);
      if (v14 < v15)
        v15 = 0;
      v16 = *(double *)&v12[8 * (v14 - v15)];
      v17 = *(double *)sub_1000E2258(a2, v13 - 6);
      v18 = a2[1];
      v19 = *a2 + v18 - 1;
      v20 = *((unsigned int *)a2 + 1);
      if (v19 < v20)
        v20 = 0;
      v21 = *(double *)&v12[8 * (v19 - v20) + 4];
      v22 = sub_1000E2258(a2, v18 - 6);
      v23 = *(double *)(v22 + 8);
      v24 = sub_1000E2184(v22, a2, v11, 5);
      if (fabs(v24) > 0.0001)
      {
        v25 = sqrt((v16 - v17) * (v16 - v17) + (v21 - v23) * (v21 - v23)) / v24;
        v26 = a4[1];
        v27 = *((unsigned int *)a4 + 1);
        v28 = *a4;
        if (v28 + v26 >= v27)
          v29 = *((unsigned int *)a4 + 1);
        else
          v29 = 0;
        *(double *)&a4[4 * (v28 + v26 - v29) + 4] = v25;
        if (v27 <= v26)
        {
          if (v28 + 1 < v27)
            LOWORD(v27) = 0;
          *a4 = v28 + 1 - v27;
          if (!a3)
            goto LABEL_13;
        }
        else
        {
          a4[1] = v26 + 1;
          if (!a3)
          {
LABEL_13:
            v30 = 0;
            goto LABEL_18;
          }
        }
        v30 = sub_10104F180((unsigned __int16 *)(a1 + 784), (unsigned int (*)(double, double))sub_10104F37C, 0) >= 0.349065848;
LABEL_18:
        if (*(_DWORD *)(a1 + 1872) >= 9u && !v30)
        {
          v31 = sub_10104F180(a4, (unsigned int (*)(double, double))sub_10104F388, 0);
          v32 = acos(v31);
          *a5 = (v32 + v32) * 57.2957802;
        }
      }
    }
  }
}

double sub_1000E2184(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;

  if (a2[1] <= a3)
    sub_10193BDAC();
  if (!a4)
    return 0.0;
  v5 = a3;
  v6 = -a4;
  v7 = 0.0;
  do
  {
    v8 = *(double *)sub_1000E2258(a2, v5 + v6 + 1);
    v9 = *(double *)(sub_1000E2258(a2, v5 + v6 + 1) + 8);
    v10 = *(double *)sub_1000E2258(a2, v5 + v6);
    v11 = sub_1000E2258(a2, v5 + v6);
    v7 = v7 + sqrt((v8 - v10) * (v8 - v10) + (v9 - *(double *)(v11 + 8)) * (v9 - *(double *)(v11 + 8)));
  }
  while (!__CFADD__(v6++, 1));
  return v7;
}

uint64_t sub_1000E2258(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C158);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C158);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMVector<double, 2>>::operator[](const size_t) const [T = CMVector<double, 2>]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

void sub_1000E2450(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _WORD *v29;
  long double v30;
  double v31;
  long double v32;
  long double v33;
  long double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  _DWORD v52[2];
  __int16 v53;
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;

  if (a2 == 1.79769313e308)
  {
    v7 = a1 + 2952;
    v8 = a1 + 1952;
    do
    {
      v9 = *(unsigned __int16 *)(v8 + 8) + (unint64_t)*(unsigned __int16 *)(v8 + 10);
      if (v9 - 1 >= *(unsigned int *)(v8 + 12))
        v10 = *(unsigned int *)(v8 + 12);
      else
        v10 = 0;
      sub_1000E2A10((unsigned __int16 *)(v8 + 8), (_OWORD *)(v8 - 16 * v10 + 16 * v9));
      v11 = v8 + 256;
      v8 += 248;
    }
    while (v11 != v7);
  }
  else
  {
    for (i = 1960; i != 2952; i += 248)
      sub_1000E3458(a1, (double *)(a1 + i), a3, a4, a5, a2);
  }
  if (*(_DWORD *)(a1 + 1872) < 9u)
    return;
  v16 = 0;
  v17 = a1 + 1960;
  v18 = -1;
  do
  {
    if (sub_1000E2A70(a1, v17))
    {
      if (v18 != -1)
        sub_10193BF2C();
      v18 = v16;
    }
    ++v16;
    v17 += 248;
  }
  while (v16 != 4);
  if (v18 == -1)
  {
    *(_QWORD *)(a1 + 1944) = 0x7FF8000000000000;
    return;
  }
  v19 = *(double *)(a1 + 248 * v18 + 2184);
  if (v19 > 1.0)
    v19 = 1.0;
  *(double *)(a1 + 1944) = v19;
  v20 = *(_DWORD *)(a1 + 1952) - 5;
  v21 = *(double *)(a1 + 1936) - *(double *)(a1 + 1928);
  v22 = COERCE__INT64(fabs(v21)) > 0x7FEFFFFFFFFFFFFFLL;
  if (v20 >= 0xFFFFFFFD && !v22)
  {
    sub_10104F004(a1, v21);
    v24 = *(unsigned __int16 *)(a1 + 858);
    v25 = *(unsigned int *)(a1 + 860);
    v26 = *(unsigned __int16 *)(a1 + 856);
    if (v26 + v24 >= v25)
      v27 = *(unsigned int *)(a1 + 860);
    else
      v27 = 0;
    *(_QWORD *)(a1 + 856 + 8 * (v26 + v24 - v27) + 8) = v23;
    if (v25 <= v24)
    {
      if (v26 + 1 < v25)
        LOWORD(v25) = 0;
      *(_WORD *)(a1 + 856) = v26 + 1 - v25;
    }
    else
    {
      *(_WORD *)(a1 + 858) = v24 + 1;
    }
  }
  v28 = *(double *)(a1 + 1944);
  v29 = (_WORD *)(a1 + 928);
  if (v20 < 0xFFFFFFFD || (*(_QWORD *)(a1 + 1944) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v36 = *(unsigned __int16 *)(a1 + 930);
    v37 = *(unsigned int *)(a1 + 932);
    v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37)
      v40 = *(unsigned int *)(a1 + 932);
    else
      v40 = 0;
    *(_QWORD *)&v29[4 * (v38 + v36 - v40) + 4] = 0;
  }
  else
  {
    v30 = exp(v28 * -10.0) * 10.0;
    v31 = *(double *)(a1 + 24);
    v32 = (1.0 - v28) * -10.0;
    v33 = v30 / v31;
    v34 = exp(v32);
    v35 = log10(v33 / (v34 * 10.0 / v31));
    if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      v35 = 0.0;
    v36 = *(unsigned __int16 *)(a1 + 930);
    v37 = *(unsigned int *)(a1 + 932);
    v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37)
      v39 = *(unsigned int *)(a1 + 932);
    else
      v39 = 0;
    *(double *)(a1 + 928 + 8 * (v38 + v36 - v39) + 8) = v35;
  }
  if (v37 <= v36)
  {
    if (v38 + 1 < v37)
      LOWORD(v37) = 0;
    *v29 = v38 + 1 - v37;
  }
  else
  {
    *(_WORD *)(a1 + 930) = v36 + 1;
  }
  v52[0] = a2 != 1.79769313e308 && *(double *)(a1 + 1904) != -1.79769313e308;
  sub_1000E3564((unsigned __int16 *)(a1 + 1000), v52);
  *(double *)(a1 + 1848) = sub_1000E2B14((unsigned __int16 *)(a1 + 856));
  *(double *)(a1 + 1856) = sub_1000E2B14((unsigned __int16 *)(a1 + 928));
  v41 = sub_1000E35BC((unsigned __int16 *)(a1 + 1000));
  *(double *)(a1 + 1864) = v41;
  v42 = *(_DWORD *)(a1 + 1952);
  if (!v42 && v41 < 6.0)
    goto LABEL_53;
  if (!v42 && v41 >= 6.0 || v42 == 1 && v41 >= 6.0)
    goto LABEL_60;
  if (v42 == 1)
  {
    if (*(_DWORD *)(a1 + 1920) <= 0x19u)
    {
      v43 = 1;
      goto LABEL_55;
    }
    v43 = 5;
LABEL_54:
    *(_DWORD *)(a1 + 1952) = v43;
LABEL_55:
    ++*(_DWORD *)(a1 + 1920);
    goto LABEL_63;
  }
  if (v42 == 2 && v41 < 6.0)
    goto LABEL_53;
  if (v42 == 2)
  {
    v51 = *(double *)(a1 + 1856);
    if (v51 <= -20.0)
    {
      v43 = 3;
    }
    else
    {
      if (v51 < 22.0 || *(double *)(a1 + 1848) < -5.0)
      {
        v43 = 2;
        goto LABEL_62;
      }
      v43 = 4;
    }
    goto LABEL_61;
  }
  if (v42 == 3 && v41 >= 6.0)
  {
    if (*(double *)(a1 + 1856) < 0.0 || *(double *)(a1 + 1848) < -5.0)
    {
      v43 = 3;
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (v42 == 4 && v41 < 6.0)
  {
LABEL_53:
    v43 = 1;
    goto LABEL_54;
  }
  if (v42 == 4)
  {
    if (*(double *)(a1 + 1856) > 0.0)
      goto LABEL_97;
LABEL_60:
    v43 = 2;
LABEL_61:
    *(_DWORD *)(a1 + 1952) = v43;
    goto LABEL_62;
  }
  if (v42 == 5 && v41 >= 6.0)
    goto LABEL_60;
LABEL_97:
  v43 = *(_DWORD *)(a1 + 1952);
  if (v42 == 5)
    goto LABEL_55;
LABEL_62:
  *(_DWORD *)(a1 + 1920) = 0;
LABEL_63:
  if (v42 != v43)
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10219C118);
    v44 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      v45 = a1;
      if (*(char *)(a1 + 23) < 0)
        v45 = *(_QWORD *)a1;
      v46 = *(_DWORD *)(a1 + 1952);
      v47 = *(_DWORD *)(a1 + 1920);
      v48 = *(_QWORD *)(a1 + 1864);
      v49 = *(_QWORD *)(a1 + 1848);
      v50 = *(_QWORD *)(a1 + 1856);
      v52[0] = 68290818;
      v52[1] = 0;
      v53 = 2082;
      v54 = "";
      v55 = 2082;
      v56 = v45;
      v57 = 1026;
      v58 = v42;
      v59 = 1026;
      v60 = v46;
      v61 = 1026;
      v62 = v47;
      v63 = 2050;
      v64 = v48;
      v65 = 2050;
      v66 = v49;
      v67 = 2050;
      v68 = v50;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"IndoorOutdoorGpsChange\", \"Context\":%{public, location:escape_only}s, \"Old GPS State\":%{public}d, \"New GPS State\":%{public}d, \"Epochs No Fix\":%{public}d, \"GPS fix buffer sum\":\"%{public}.9f\", \"GPS wander LLR sum\":\"%{public}.9f\", \"GPS LLR sum\":\"%{public}.9f\"}", (uint8_t *)v52, 0x4Cu);
    }
  }
}

unsigned __int16 *sub_1000E2A10(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_OWORD *)&result[8 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

BOOL sub_1000E2A70(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  v2 = (*(_DWORD *)(a1 + 1872) + 1) & 7;
  v3 = *(_DWORD *)(a2 + 232);
  if (v2 == v3)
  {
    v5 = *(unsigned __int16 *)(a2 + 2);
    v6 = sub_1000E2184(a1, (unsigned __int16 *)(a1 + 368), *(unsigned __int16 *)(a1 + 370) - 1, 7);
    v8 = sub_1000E2184(v7, (unsigned __int16 *)a2, v5 - 1, 7);
    if (v6 <= 12.207152)
      v9 = NAN;
    else
      v9 = vabdd_f64(v8, v6) / v6;
    *(double *)(a2 + 224) = v9;
    *(double *)(a2 + 240) = v6;
  }
  return v2 == v3;
}

double sub_1000E2B14(unsigned __int16 *a1)
{
  unint64_t v2;
  double v3;

  if (!a1[1])
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  do
    v3 = v3 + *(double *)sub_1000E2B78(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

uint64_t sub_1000E2B78(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161088);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161088);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<double>::operator[](const size_t) const [T = double]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

float sub_1000E2D70(unsigned __int16 *a1)
{
  unint64_t v2;
  float v3;
  float v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (a1[1] > 2u)
    goto LABEL_2;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    v7 = a1[1];
    *(_DWORD *)buf = 134217984;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: fElevationBuffer.size() > 2, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFilteredElevationStepHistory.cpp, line 183,fElevationBufferSize,%zu.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
    v8 = a1[1];
    v10 = 134217984;
    v11 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: fElevationBuffer.size() > 2, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFilteredElevationStepHistory.cpp, line 183,fElevationBufferSize,%zu.", (size_t)&v10);
    sub_100512490("Generic", 1, 0, 0, "float CMFilteredElevationStepHistory::elevationBufferMedian() const", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  if (a1[1])
  {
LABEL_2:
    v2 = 0;
    v3 = 0.0;
    do
      v3 = v3 + *(float *)sub_1000E31C8(a1, v2++);
    while (v2 < a1[1]);
  }
  else
  {
    v3 = 0.0;
  }
  v4 = COERCE_FLOAT(sub_1000E2FBC(a1, (unsigned int (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000E33D4, 0));
  return (float)((float)(v3 - v4)
               - COERCE_FLOAT(sub_1000E2FBC(a1, (unsigned int (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000E33C0, 0)))
       / (float)((unint64_t)a1[1] - 2);
}

uint64_t sub_1000E2FBC(unsigned __int16 *a1, unsigned int (*a2)(_QWORD, uint64_t, uint64_t, uint64_t), unint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  char *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  v6 = a1[1];
  if (!a1[1])
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
      v16[0] = 0;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", v16, 2);
      sub_100512490("Generic", 1, 0, 0, "T CMQueue<CMElevationSample>::getComparison(int (*)(const T, const T), size_t) const [T = CMElevationSample]", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v7 = (uint64_t *)sub_1000E31C8(a1, a3);
  v8 = *v7;
  v9 = v7[1];
  if (v6 > a3)
  {
    do
    {
      v10 = (_QWORD *)sub_1000E31C8(a1, a3);
      v11 = *v10;
      v12 = v10[1];
      if (a2(*v10, v12, v8, v9))
      {
        v8 = v11;
        v9 = v12;
      }
      ++a3;
    }
    while (v6 != a3);
  }
  return v8;
}

uint64_t sub_1000E31C8(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C6D0);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMElevationSample>::operator[](const size_t) const [T = CMElevationSample]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

BOOL sub_1000E33C0(int a1, uint64_t a2, int a3)
{
  return *(float *)&a1 < *(float *)&a3;
}

BOOL sub_1000E33D4(int a1, uint64_t a2, int a3)
{
  return *(float *)&a3 < *(float *)&a1;
}

unsigned __int16 *sub_1000E33E8(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[20 * (v3 - v2)];
  v6 = *a2;
  v5 = a2[1];
  *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  v7 = result[1];
  v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    v9 = *result + 1;
    if (v9 < v8)
      LOWORD(v8) = 0;
    *result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

unsigned __int16 *sub_1000E3458(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  __double2 v16;
  double v17;
  __int128 v19;

  if (a4 == 1.79769313e308)
    a4 = a2[27];
  else
    a2[27] = a4;
  v8 = a4;
  if (a3 != 1.79769313e308)
  {
    a2[27] = a3;
    v8 = a3;
  }
  if ((*(_DWORD *)(a1 + 1872) & 7) == *((_DWORD *)a2 + 58))
  {
    a2[26] = a5 - a4;
    v9 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    v10 = *(unsigned int *)(a1 + 372);
    if (v9 < v10)
      v10 = 0;
    v11 = a1 + 368 + 16 * (v9 - v10);
    v12 = *(double *)(v11 + 8);
    v13 = a5 - a4 + v8;
  }
  else
  {
    v14 = *(unsigned __int16 *)a2 + (unint64_t)*((unsigned __int16 *)a2 + 1) - 1;
    v15 = *((unsigned int *)a2 + 1);
    if (v14 < v15)
      v15 = 0;
    v11 = (uint64_t)&a2[2 * (v14 - v15)];
    v12 = *(double *)(v11 + 8);
    v13 = v8 + a2[26];
  }
  v16 = __sincos_stret(v13);
  v17 = *(double *)(v11 + 16) + v16.__sinval * a6;
  *(double *)&v19 = v12 + v16.__cosval * a6;
  *((double *)&v19 + 1) = v17;
  return sub_1000E2A10((unsigned __int16 *)a2, &v19);
}

unsigned __int16 *sub_1000E3564(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int16 v6;
  __int16 v7;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 < v3)
    v3 = 0;
  *(_DWORD *)&result[2 * (v4 + v2 - v3) + 4] = *a2;
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v2)
  {
    v6 = v4 + 1;
    if (v4 + 1 >= v5)
      v7 = *((_DWORD *)result + 1);
    else
      v7 = 0;
    *result = v6 - v7;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

double sub_1000E35BC(unsigned __int16 *a1)
{
  unint64_t v2;
  double v3;

  if (!a1[1])
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  do
    v3 = v3 + (double)*(int *)sub_1000E3624(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

uint64_t sub_1000E3624(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  unint64_t v16;
  __int16 v17;
  int v18;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146658);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v16 = a2;
      v17 = 1024;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146658);
      v9 = *((_DWORD *)a1 + 1);
      v11 = 134218240;
      v12 = a2;
      v13 = 1024;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v11, 18);
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<int>::operator[](const size_t) const [T = int]", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

void sub_1000E381C(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  long double v20;

  v5 = a4;
  v6 = a2;
  v7 = a4 - 1;
  if (a4 != 1)
  {
    v8 = a3;
    v9 = a2;
    v10 = a4 - 1;
    do
    {
      v11 = *v8++;
      *(_QWORD *)v9++ = v11;
      --v10;
    }
    while (v10);
  }
  if (a5)
  {
    v12 = 0;
    do
    {
      if (a4 == 1)
      {
        v13 = v12 + 1;
      }
      else
      {
        v13 = v12 + 1;
        v14 = (double *)((char *)a3 + 8 * v7 * (v12 + 1));
        v15 = a2;
        v16 = a4 - 1;
        do
        {
          v17 = *v14++;
          *v15 = *v15 + *(double *)(a1 + 8 * v12) * v17;
          ++v15;
          --v16;
        }
        while (v16);
      }
      v12 = v13;
    }
    while (v13 != a5);
  }
  a2[v7] = 1.0;
  if (a4 == 1)
  {
    v19 = 1.0;
    do
    {
LABEL_18:
      *v6 = *v6 / v19;
      ++v6;
      --v5;
    }
    while (v5);
    return;
  }
  v18 = 0;
  v19 = 1.0;
  do
  {
    v20 = exp(v6[v18]);
    v6[v18] = v20;
    v19 = v19 + v20;
    ++v18;
  }
  while (v7 != v18);
  if (v5)
    goto LABEL_18;
}

uint64_t sub_1000E3910(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 / 0x19));
  v8 = *v7;
  v9 = *v7 + 160 * (v6 % 0x19);
  v10 = v5 / 0x19;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x19));
  v12 = v5 % 0x19;
  v13 = v11 + 160 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4000;
      v15 = *(double *)(v14 - 152);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4000;
      }
      v9 -= 160;
      if (v9 == v13)
      {
        v9 = v11 + 160 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 160 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4000;
  v17 = *(_OWORD *)(v9 - 144);
  *a2 = *(_OWORD *)(v9 - 160);
  a2[1] = v17;
  v18 = *(_OWORD *)(v9 - 128);
  v19 = *(_OWORD *)(v9 - 112);
  v20 = *(_OWORD *)(v9 - 80);
  a2[4] = *(_OWORD *)(v9 - 96);
  a2[5] = v20;
  a2[2] = v18;
  a2[3] = v19;
  v21 = *(_OWORD *)(v9 - 64);
  v22 = *(_OWORD *)(v9 - 48);
  v23 = *(_OWORD *)(v9 - 16);
  a2[8] = *(_OWORD *)(v9 - 32);
  a2[9] = v23;
  a2[6] = v21;
  a2[7] = v22;
  return 1;
}

uint64_t sub_1000E3A38(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 7));
  v8 = *v7;
  v9 = *v7 + 32 * (v6 & 0x7F);
  v10 = v5 >> 7;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 7));
  v12 = v5 & 0x7F;
  v13 = v11 + 32 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4096;
      v15 = *(double *)(v14 - 32);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4096;
      }
      v9 -= 32;
      if (v9 == v13)
      {
        v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 32 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4096;
  v17 = *(_OWORD *)(v9 - 16);
  *a2 = *(_OWORD *)(v9 - 32);
  a2[1] = v17;
  return 1;
}

uint64_t sub_1000E3B0C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int128 v17;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x55));
  v8 = *v7;
  v9 = *v7 + 48 * (v6 % 0x55);
  v10 = v5 / 0x55;
  v11 = *(_QWORD *)(v4 + 8 * (v5 / 0x55));
  v12 = v5 % 0x55;
  v13 = v11 + 48 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4080;
      v15 = *(double *)(v14 - 48);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4080;
      }
      v9 -= 48;
      if (v9 == v13)
      {
        v9 = v11 + 48 * v12;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 48 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4080;
  v17 = *(_OWORD *)(v9 - 48);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v9 - 32);
  *(_OWORD *)a2 = v17;
  if (v9 - 48 != a2)
    sub_100AAEFA8((char *)(a2 + 24), *(char **)(v9 - 24), *(_QWORD *)(v9 - 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v9 - 16) - *(_QWORD *)(v9 - 24)) >> 2));
  return 1;
}

uint64_t sub_1000E3C44(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = v6 + v3;
  v8 = (uint64_t *)(v4 + 8 * ((v6 + v3) / 0x49));
  v9 = *v8;
  v10 = *v8 + 56 * (v7 % 0x49);
  v11 = v6 / 0x49;
  v12 = *(_QWORD *)(v4 + 8 * (v6 / 0x49));
  v13 = v6 % 0x49;
  v14 = v12 + 56 * v13;
  if (v10 != v14)
  {
    while (1)
    {
      v15 = v10;
      if (v10 == v9)
        v15 = *(v8 - 1) + 4088;
      v16 = *(double *)(v15 - 56);
      if (v16 <= a3 && v16 > a3 - *(double *)(a1 + 80))
        break;
      if (v10 == v9)
      {
        v17 = *--v8;
        v9 = v17;
        v10 = v17 + 4088;
      }
      v10 -= 56;
      if (v10 == v14)
      {
        v10 = v14;
        break;
      }
    }
  }
  if (v10 == *(_QWORD *)(v4 + 8 * v11) + 56 * v13)
    return 0;
  if (v10 == *v8)
    v10 = *(v8 - 1) + 4088;
  *(_QWORD *)a2 = *(_QWORD *)(v10 - 56);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v10 - 48);
  if (v10 - 56 != a2)
    sub_1008AFA64((char *)(a2 + 16), *(char **)(v10 - 40), *(_QWORD *)(v10 - 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v10 - 32) - *(_QWORD *)(v10 - 40)) >> 3));
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v10 - 16);
  return 1;
}

uint64_t sub_1000E3D90(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) == v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = v5 + v3;
  v7 = (uint64_t *)(v4 + 8 * (v6 >> 7));
  v8 = *v7;
  v9 = *v7 + 32 * (v6 & 0x7F);
  v10 = v5 >> 7;
  v11 = *(_QWORD *)(v4 + 8 * (v5 >> 7));
  v12 = v5 & 0x7F;
  v13 = v11 + 32 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      v14 = v9;
      if (v9 == v8)
        v14 = *(v7 - 1) + 4096;
      v15 = *(double *)(v14 - 32);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80))
        break;
      if (v9 == v8)
      {
        v16 = *--v7;
        v8 = v16;
        v9 = v16 + 4096;
      }
      v9 -= 32;
      if (v9 == v13)
      {
        v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(_QWORD *)(v4 + 8 * v10) + 32 * v12)
    return 0;
  if (v9 == *v7)
    v9 = *(v7 - 1) + 4096;
  *a2 = *(_QWORD *)(v9 - 32);
  if ((_QWORD *)(v9 - 32) != a2)
    sub_10055A264(a2 + 1, *(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v9 - 16) - *(_QWORD *)(v9 - 24)) >> 3));
  return 1;
}

void sub_1000E3EA4(double *a1, double a2)
{
  double Current;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double *v20;
  double v21;
  float v22;
  float v23;
  double v24;
  float v25;
  double v26;
  double v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  NSObject *v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  double v55;
  double v56;
  uint64_t v57;
  char *v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  int v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  _QWORD __dst[40];
  _BYTE buf[24];
  _BYTE v86[28];
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;

  sub_1000DCE9C((uint64_t)(a1 + 1), a2);
  if ((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 88))(a1))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = a1[10];
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_102183EF8);
    v5 = vabdd_f64(Current, v4);
    v6 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)a1 + 12);
      v8 = *((_QWORD *)a1 + 7);
      v9 = sub_1000E4754((uint64_t)(a1 + 64));
      v10 = *((_QWORD *)a1 + 9);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v5;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v86 = v8;
      *(_WORD *)&v86[4] = 2048;
      *(double *)&v86[6] = v9;
      *(_WORD *)&v86[14] = 2048;
      *(_QWORD *)&v86[16] = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,TimeExceeded,maxAllowed,%f,timePassed,%f,locType,%d,distance,%f,outdoorProbability,%f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_102183EF8);
      v42 = qword_10229FF48;
      v43 = *((_QWORD *)a1 + 12);
      v44 = *((_QWORD *)a1 + 7);
      v45 = sub_1000E4754((uint64_t)(a1 + 64));
      v46 = *((_QWORD *)a1 + 9);
      LODWORD(__dst[0]) = 134219008;
      *(_QWORD *)((char *)__dst + 4) = v43;
      WORD2(__dst[1]) = 2048;
      *(double *)((char *)&__dst[1] + 6) = v5;
      HIWORD(__dst[2]) = 1024;
      LODWORD(__dst[3]) = v44;
      WORD2(__dst[3]) = 2048;
      *(double *)((char *)&__dst[3] + 6) = v45;
      HIWORD(__dst[4]) = 2048;
      __dst[5] = v46;
      LODWORD(v59) = 48;
      v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "IndoorOutdoor,TimeExceeded,maxAllowed,%f,timePassed,%f,locType,%d,distance,%f,outdoorProbability,%f", COERCE_DOUBLE(__dst), v59, v60, v62, v63);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v47);
      if (v47 != buf)
        free(v47);
    }
    *((_BYTE *)a1 + 112) = 1;
    (*(void (**)(double *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 72))(a1, 1, (_QWORD *)a1 + 7);
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD *)a1 + 4));
    sub_1000E4778(v11);
    if (*((_BYTE *)a1 + 113))
    {
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 56))(*((_QWORD *)a1 + 4));
      sub_1000E4778(v12);
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 40))(*((_QWORD *)a1 + 4));
      sub_1000E4778(v13);
    }
    v14 = (double *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 32))(*((_QWORD *)a1 + 4)) + 96);
    if (*v14 != -1.0)
    {
      memcpy(__dst, v14, sizeof(__dst));
      if (a1[11] == -1.79769313e308)
      {
        a1[11] = *(double *)__dst;
        sub_10104F0D8((uint64_t)(a1 + 77), __dst);
        memcpy(a1 + 15, __dst, 0x140uLL);
      }
      else
      {
        v15 = a1[15];
        v16 = a1[47];
        v17 = CFAbsoluteTimeGetCurrent();
        v18 = (uint64_t)(a1 + 64);
        sub_1000F09B4((_QWORD *)a1 + 64, v15, v16, v17);
        memcpy(a1 + 15, __dst, 0x140uLL);
        sub_1000DFB04((uint64_t)(a1 + 77), (uint64_t)&v62, v17);
        if (vabdd_f64(CFAbsoluteTimeGetCurrent(), a1[10]) <= fmin(a1[12], 110.0))
        {
          v21 = v63;
        }
        else
        {
          v19 = sub_1000E4754((uint64_t)(a1 + 64));
          v20 = &v63;
          if (v19 > 100.0)
            v20 = &v62;
          v21 = *v20;
        }
        v22 = sub_1000F0AD0((uint64_t)(a1 + 64), v17);
        v23 = sub_1000F0414((uint64_t)(a1 + 55), v17);
        v24 = sub_1000E4754((uint64_t)(a1 + 64));
        v25 = sub_1000E47F0(v21, v22, v23, v24);
        v26 = a1[7];
        v27 = a1[8];
        v28 = a1[9];
        sub_1000E4A04((uint64_t)a1, (uint64_t)buf, v25);
        *(_OWORD *)(a1 + 7) = *(_OWORD *)buf;
        a1[9] = *(double *)&buf[16];
        if (*((_QWORD *)a1 + 8) != *(_QWORD *)&v27 || *((_QWORD *)a1 + 7) != *(_QWORD *)&v26)
        {
          if (qword_10229FF40 != -1)
            dispatch_once(&qword_10229FF40, &stru_102183EF8);
          v29 = qword_10229FF48;
          if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
          {
            v31 = a1[8];
            v30 = *((_QWORD *)a1 + 9);
            v32 = *((_QWORD *)a1 + 7);
            *(_DWORD *)buf = 134351104;
            *(double *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v27;
            *(_WORD *)&buf[22] = 2050;
            *(double *)v86 = v26;
            *(_WORD *)&v86[8] = 2050;
            *(_QWORD *)&v86[10] = v30;
            *(_WORD *)&v86[18] = 2050;
            *(double *)&v86[20] = v21;
            v87 = 2050;
            v88 = v22;
            v89 = 2050;
            v90 = v23;
            v91 = 2050;
            v92 = v31;
            v93 = 2050;
            v94 = v32;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor,update,old probability,%{public}f,confidence,%{public}ld,state,%{public}ld,new probability,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdor,%{public}f,confidence,%{public}ld,state,%{public}ld", buf, 0x5Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF40 != -1)
              dispatch_once(&qword_10229FF40, &stru_102183EF8);
            v56 = a1[8];
            v55 = a1[9];
            v57 = *((_QWORD *)a1 + 7);
            v64 = 134351104;
            v65 = v28;
            v66 = 2050;
            v67 = v27;
            v68 = 2050;
            v69 = v26;
            v70 = 2050;
            v71 = v55;
            v72 = 2050;
            v73 = v21;
            v74 = 2050;
            v75 = v22;
            v76 = 2050;
            v77 = v23;
            v78 = 2050;
            v79 = v56;
            v80 = 2050;
            v81 = v57;
            v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor,update,old probability,%{public}f,confidence,%{public}ld,state,%{public}ld,new probability,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdor,%{public}f,confidence,%{public}ld,state,%{public}ld", &v64, 92);
            sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v58);
            if (v58 != buf)
              free(v58);
          }
          if (!*((_BYTE *)a1 + 113))
            (*(void (**)(double *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 72))(a1, 0, (_QWORD *)a1 + 7);
        }
        v33 = CFAbsoluteTimeGetCurrent();
        v34 = a1[10];
        if (qword_10229FF40 != -1)
        {
          v61 = v33;
          dispatch_once(&qword_10229FF40, &stru_102183EF8);
          v33 = v61;
        }
        v35 = vabdd_f64(v33, v34);
        v36 = qword_10229FF48;
        if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
        {
          v37 = v62;
          v38 = v63;
          v39 = sub_1000E4754(v18);
          v41 = *((_QWORD *)a1 + 7);
          v40 = *((_QWORD *)a1 + 8);
          *(_DWORD *)buf = 134351360;
          *(double *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v38;
          *(_WORD *)&buf[22] = 2050;
          *(double *)v86 = v35;
          *(_WORD *)&v86[8] = 2050;
          *(double *)&v86[10] = v39;
          *(_WORD *)&v86[18] = 2050;
          *(double *)&v86[20] = v21;
          v87 = 2050;
          v88 = v22;
          v89 = 2050;
          v90 = v23;
          v91 = 2050;
          v92 = v25;
          v93 = 2050;
          v94 = v40;
          v95 = 2050;
          v96 = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "IndoorOutdoor,probabilities,llr,%{public}f,discordant,%{public}f,timeSinceStart,%{public}f,totalDistance,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdoor,%{public}f,probability,%{public}f,confidence,%{public}ld,location,%{public}ld", buf, 0x66u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF40 != -1)
            dispatch_once(&qword_10229FF40, &stru_102183EF8);
          v48 = qword_10229FF48;
          v49 = v62;
          v50 = v63;
          v51 = sub_1000E4754(v18);
          v53 = *((_QWORD *)a1 + 7);
          v52 = *((_QWORD *)a1 + 8);
          v64 = 134351360;
          v65 = v49;
          v66 = 2050;
          v67 = v50;
          v68 = 2050;
          v69 = v35;
          v70 = 2050;
          v71 = v51;
          v72 = 2050;
          v73 = v21;
          v74 = 2050;
          v75 = v22;
          v76 = 2050;
          v77 = v23;
          v78 = 2050;
          v79 = v25;
          v80 = 2050;
          v81 = v52;
          v82 = 2050;
          v83 = v53;
          LODWORD(v59) = 102;
          v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 1, "IndoorOutdoor,probabilities,llr,%{public}f,discordant,%{public}f,timeSinceStart,%{public}f,totalDistance,%{public}f,gpsOutdoor,%{public}f,wifiIndoor,%{public}f,alsOutdoor,%{public}f,probability,%{public}f,confidence,%{public}ld,location,%{public}ld", &v64, *(_QWORD *)&v59);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorWatch::update(CFAbsoluteTime)", "%s\n", v54);
          if (v54 != buf)
            free(v54);
        }
      }
    }
  }
}

double sub_1000E4754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 80);
  if (v1 == v2)
    return 0.0;
  else
    return *(double *)(v2 - 8) - *(double *)(v1 + 8);
}

uint64_t sub_1000E4778(uint64_t result)
{
  uint64_t v1;
  double v2;

  if (*(double *)(result + 64) != -1.0)
  {
    v1 = result;
    if (!*(_BYTE *)(result + 8))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v1 + 8) = 1;
      }
      else if (!*(_BYTE *)(v1 + 8))
      {
        v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

double sub_1000E47F0(double a1, float a2, float a3, double a4)
{
  double v4;
  double v5;
  float v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  float v13;
  double v14;
  double v15;
  float v16;
  double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  double v27;
  double v28;
  double v29;

  v4 = a1;
  if (a4 > 100.0)
    a4 = 100.0;
  v5 = a4 * 0.819 / 100.0 + (100.0 - a4) * 0.7 / 100.0;
  v6 = 1.0 - a2;
  if (a2 == -1.0)
  {
    v6 = a2;
    v7 = 0.5;
  }
  else
  {
    v7 = v6;
  }
  if (v6 >= 0.3)
    v5 = a4 * 0.977 / 100.0 + (100.0 - a4) * 0.0 / 100.0;
  if (a2 == -1.0)
    v8 = 0.1;
  else
    v8 = v5;
  v9 = a3;
  v10 = a3 == -1.0;
  if (a3 == -1.0)
    v11 = 0.1;
  else
    v11 = dbl_101C24BE0[a3 >= 0.5];
  if (v10)
    v12 = 0.5;
  else
    v12 = v9;
  v13 = a1;
  if (a1 == -1.0)
    v14 = 0.1;
  else
    v14 = dbl_101C24BF0[v13 >= 0.5] * a4 / 100.0 + (100.0 - a4) * 0.1 / 100.0;
  if (a1 == -1.0)
    v15 = 0.5;
  else
    v15 = v13;
  v16 = v14 + v11 + v8;
  v17 = v16;
  v18 = v11 / v16;
  v29 = pow(v12, v18);
  v19 = v8 / v17;
  v28 = pow(v7, v19);
  v20 = v14 / v17;
  v27 = pow(v15, v20);
  v21 = pow(1.0 - v12, v18);
  v22 = pow(1.0 - v7, v19);
  v23 = pow(1.0 - v15, v20);
  if (v4 == -1.0 || v4 >= 0.100000001 && v4 <= 0.899999976)
  {
    v24 = v27 * (v29 * v28);
    v25 = v23 * (v21 * v22);
    return (float)(v24 / (float)(v24 + v25));
  }
  return v4;
}

uint64_t sub_1000E4A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t result;
  uint64_t v6;
  BOOL v8;
  NSObject *v9;
  char *v10;
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((a3 <= 0.525 || a3 > 0.7) && (a3 <= 0.3 || a3 > 0.45))
  {
    if ((a3 <= 0.7 || a3 > 0.9) && (a3 <= 0.1 || a3 > 0.3))
    {
      if (a3 <= 0.9 || a3 > 1.0)
      {
        v8 = a3 > 0.1 || a3 <= 0.0;
        v6 = 3;
        if (v8 && fabsf(a3) > 0.001)
        {
          if (qword_10229FF40 != -1)
            dispatch_once(&qword_10229FF40, &stru_102183EF8);
          v9 = qword_10229FF48;
          if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349056;
            v14 = a3;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "IndoorOutdoor, low confidence estimate,probability,%{public}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FF40 != -1)
              dispatch_once(&qword_10229FF40, &stru_102183EF8);
            v11 = 134349056;
            v12 = a3;
            v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor, low confidence estimate,probability,%{public}f", &v11, 12);
            sub_100512490("Generic", 1, 0, 2, "CLIndoorOutdoorProtocol::IndoorOutdoorResult CLIndoorOutdoorDetectorWatch::getResultFromProbability(float) const", "%s\n", v10);
            if (v10 != (char *)buf)
              free(v10);
          }
          v6 = 0;
          result = 0;
        }
      }
      else
      {
        v6 = 3;
      }
    }
    else
    {
      v6 = 2;
    }
  }
  else
  {
    v6 = 1;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  return result;
}

uint64_t sub_1000E4CAC(float a1)
{
  if (a1 <= 0.5)
    return 1;
  else
    return 2;
}

BOOL sub_1000E4CC0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 113) && sub_100D878BC(a1);
}

uint64_t sub_1000E4CD4(uint64_t a1, double *a2)
{
  double v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  double *v11;
  _BOOL8 v12;
  double *v13;
  double v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  NSObject *v19;
  _BOOL4 v20;
  NSObject *v21;
  _BOOL4 v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  char v26;
  uint8_t buf[1640];

  v26 = 0;
  if (!*(_BYTE *)(a1 + 249))
    return 0;
  v4 = *a2 - *(double *)(a1 + 184);
  if (v4 < 0.0)
    v4 = 0.0;
  *(double *)(a1 + 192) = v4;
  if (*(double *)(a1 + 208) == 0.0 || *(double *)(a1 + 200) == 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "KF:fKalman.dN == 0.0 || fKalman.dE == 0.0", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      LOWORD(v25) = 0;
      v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:fKalman.dN == 0.0 || fKalman.dE == 0.0", &v25, 2, v25);
LABEL_14:
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predictAhead(const CFAbsoluteTime &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
      return 0;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 248)
      && *(double *)(a1 + 284) > 0.0
      && *a2 - *(double *)(a1 + 340) > 600.0
      && !*(_BYTE *)(a1 + 824))
    {
      v26 = 1;
    }
    v10 = sub_1000E5264(a1, (double *)(a1 + 192), &v26, (uint64_t *)(a1 + 64), (double **)(a1 + 88), a1 + 16, (long double *)(a1 + 224), (long double *)(a1 + 232));
    if ((v10 & 1) != 0)
    {
      v11 = *(double **)(a1 + 112);
      *v11 = *v11 + *(double *)(a1 + 224) * v11[2] / *(double *)(a1 + 208);
      v12 = sub_1000EDBE8(v10, v11);
      if (v12)
      {
        v13 = *(double **)(a1 + 112);
        v14 = v13[1];
        ++v13;
        *v13 = v14 + *(double *)(a1 + 224) * v13[2] / *(double *)(a1 + 200);
        if ((sub_1000ED990(v12, v13) & 1) != 0)
        {
          v15 = *(_QWORD *)(a1 + 112);
          v16 = *(double *)(v15 + 24);
          *(double *)(v15 + 16) = *(double *)(a1 + 232) * *(double *)(v15 + 16);
          *(double *)(v15 + 24) = *(double *)(a1 + 232) * v16;
          *(double *)(a1 + 184) = *a2;
          if (*(double *)(a1 + 456) > 0.0)
          {
            v17 = *(float *)(a1 + 588);
            if (v17 > 0.0)
            {
              v18 = v17 + *(float *)(a1 + 60) * *(double *)(a1 + 192);
              *(float *)(a1 + 588) = v18;
            }
          }
          return 1;
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          v23 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
          }
          v24 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v24)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            LOWORD(v25) = 0;
            v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLongitude failed", &v25, 2, v25);
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v21 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
        }
        v22 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v22)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v25) = 0;
          v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLatitude failed", &v25, 2, v25);
          goto LABEL_14;
        }
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v19 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
      }
      v20 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v20)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v25) = 0;
        v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:calcTPTQ failed", &v25, 2, v25);
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t sub_1000E5264(uint64_t a1, double *a2, _BYTE *a3, uint64_t *a4, double **a5, uint64_t a6, long double *a7, long double *a8)
{
  double v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  long double v42;
  long double v43;
  long double v44;
  long double v45;
  long double v46;
  uint64_t v47;
  NSObject *v48;
  __int128 v49;
  NSObject *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int16 v55;
  void *__p[3];
  uint8_t buf[1632];

  v16 = *(double *)(a6 + 24);
  sub_1000ECE2C(__p, 0x10uLL);
  if (*a2 < 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v55 = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:dT < 0", &v55, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v18);
LABEL_60:
    if (v18 != (char *)buf)
      free(v18);
LABEL_33:
    v22 = 0;
    goto LABEL_34;
  }
  if ((char *)a5[1] - (char *)*a5 != 128)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v55 = 0;
      v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:P is not dimensioned", &v55, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v51);
      if (v51 != (char *)buf)
        free(v51);
    }
    sub_1000F3860((uint64_t)a5, 0x10uLL);
    goto LABEL_33;
  }
  if (a4[1] - *a4 != 128)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,Q is not dimensioned", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v55 = 0;
      v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,Q is not dimensioned", &v55, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v52);
      if (v52 != (char *)buf)
        free(v52);
    }
    sub_1000F3860((uint64_t)a4, 0x10uLL);
  }
  if (v16 == 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "KF:beta is zero", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v55 = 0;
    LODWORD(v54) = 2;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:beta is zero", &v55, v54);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v18);
    goto LABEL_60;
  }
  *a7 = (1.0 - exp(-(v16 * *a2))) / v16;
  *a8 = exp(-(v16 * *a2));
  if ((sub_1000F2CEC(a1, a3, a4, a6, a2) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v50 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "KF:setQ failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v55 = 0;
    LODWORD(v54) = 2;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:setQ failed", &v55, v54);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v18);
    goto LABEL_60;
  }
  v24 = 0;
  v25 = *a7;
  v26 = *a8;
  v27 = v25 * v25;
  v28 = v26 * v26;
  v29 = *a7 * *a8;
  v30 = *a5;
  v31 = (*a5)[2];
  v32 = (*a5)[3];
  v33 = (*a5)[5];
  v34 = (*a5)[6];
  v35 = (*a5)[7];
  v36 = (*a5)[10];
  v37 = (*a5)[11];
  v38 = (*a5)[15];
  v39 = v25 + v25;
  v40 = **a5 + (v25 + v25) * v31 + v25 * v25 * v36;
  v41 = (double *)__p[0];
  v42 = (*a5)[1] + *a7 * v34 + *a7 * v32 + v25 * v25 * v37;
  *(double *)__p[0] = v40;
  v41[1] = v42;
  v43 = v29 * v36 + v26 * v31;
  v44 = v29 * v37 + v26 * v32;
  v41[2] = v43;
  v41[3] = v44;
  v41[4] = v42;
  v41[5] = v33 + v39 * v35 + v27 * v38;
  v45 = v29 * v37 + v26 * v34;
  v46 = v29 * v38 + v26 * v35;
  v41[6] = v45;
  v41[7] = v46;
  v41[8] = v43;
  v41[9] = v45;
  v41[10] = v28 * v36;
  v41[11] = v28 * v37;
  v41[12] = v44;
  v41[13] = v46;
  v41[14] = v28 * v37;
  v41[15] = v28 * v38;
  v47 = *(_QWORD *)(a1 + 64);
  do
  {
    v30[v24] = *(double *)(v47 + v24 * 8) + v41[v24];
    ++v24;
  }
  while (v24 != 16);
  if (vabdd_f64(v30[4], v30[1]) <= 0.00000001
    && vabdd_f64(v30[8], v30[2]) <= 0.00000001
    && vabdd_f64(v30[9], v30[6]) <= 0.00000001
    && vabdd_f64(v30[12], v30[3]) <= 0.00000001
    && vabdd_f64(v30[13], v30[7]) <= 0.00000001
    && vabdd_f64(v30[14], v30[11]) <= 0.00000001)
  {
    v22 = 1;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v48 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not symmetric", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v55 = 0;
      LODWORD(v54) = 2;
      v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:P is not symmetric", &v55, v54);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)", "%s\n", v53);
      if (v53 != (char *)buf)
        free(v53);
    }
    sub_100C25CCC(a1);
    v22 = 0;
    v49 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v49;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
    *(_BYTE *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 624) = 0;
  }
LABEL_34:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v22;
}

void sub_1000E5C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E5C70(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, char a5)
{
  double v10;
  NSObject *v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  unsigned int v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  char *v39;
  NSObject *v40;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  double v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  NSObject *v50;
  double v51;
  NSObject *v52;
  double v53;
  NSObject *v54;
  char *v55;
  double v56;
  NSObject *v57;
  int v58;
  unsigned int v59;
  double v61;
  double v62;
  NSObject *v63;
  NSObject *v64;
  __int128 v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int v74;
  int v75;
  double v76;
  NSObject *v77;
  double *v78;
  uint64_t v79;
  double v80;
  NSObject *v81;
  __int128 v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  __int128 v86;
  NSObject *v87;
  NSObject *v88;
  double v89;
  double v90;
  unsigned int v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  NSObject *v97;
  double v98;
  uint64_t v99;
  double v100;
  double v101;
  double *v102;
  double **v103;
  double *v104;
  double v105;
  double v106;
  uint64_t v107;
  NSObject *v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  NSObject *v122;
  int v123;
  NSObject *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  NSObject *v132;
  NSObject *v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double *v139;
  double *v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  NSObject *v145;
  _OWORD *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  NSObject *v159;
  int v160;
  NSObject *v161;
  NSObject *v162;
  NSObject *v163;
  NSObject *v164;
  double v165;
  NSObject *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  char *v171;
  NSObject *v172;
  NSObject *v173;
  NSObject *v174;
  char *v175;
  NSObject *v176;
  char *v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  __double2 v181;
  uint64_t v182;
  double v183;
  double *v184;
  double *v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  double *v192;
  double *v193;
  double v194;
  double v195;
  NSObject *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  char *v201;
  char *v202;
  NSObject *v203;
  NSObject *v204;
  NSObject *v205;
  char *v206;
  double v207;
  NSObject *v208;
  int v209;
  int v210;
  int v211;
  int v212;
  char *v213;
  NSObject *v214;
  NSObject *v215;
  NSObject *v216;
  __int128 v217;
  NSObject *v218;
  char *v219;
  int v220;
  char *v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  char *v229;
  NSObject *v230;
  int v231;
  int v232;
  double v233;
  double v234;
  double v235;
  double v236;
  uint64_t v237;
  double v238;
  int v239;
  NSObject *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  float v245;
  float v246;
  uint64_t v247;
  int v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  double v255;
  NSObject *v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  NSObject *v266;
  char *v267;
  float v268;
  double v269;
  char *v270;
  NSObject *v271;
  char *v272;
  double v273;
  double v274;
  NSObject *v275;
  char *v276;
  NSObject *v277;
  NSObject *v278;
  NSObject *v279;
  NSObject *v280;
  NSObject *v281;
  char *v282;
  int v283;
  char *v284;
  uint64_t v285;
  char v286;
  NSObject *v287;
  char *v288;
  NSObject *v289;
  NSObject *v290;
  char *v291;
  int v292;
  int v293;
  int v294;
  int v295;
  char *v296;
  uint64_t v297;
  double v298;
  double v299;
  double v300;
  double v301;
  uint64_t v302;
  double v303;
  double **v304;
  double **v305;
  double *v306;
  uint64_t v307;
  __int16 v308[6];
  int v309;
  _QWORD v310[77];
  double v311;
  double v312;
  double v313;
  int v314;
  int v315;
  __int16 v316;
  double v317;
  __int16 v318;
  int v319;
  __int16 v320;
  double v321;
  _BYTE v322[18];
  __int16 v323;
  _BYTE v324[18];
  __int16 v325;
  uint64_t v326;
  __int16 v327;
  uint64_t v328;
  __int16 v329;
  int v330;
  uint8_t buf[4];
  _BYTE v332[14];
  __int16 v333;
  _BYTE v334[18];
  __int16 v335;
  uint64_t v336;
  __int16 v337;
  uint64_t v338;
  __int16 v339;
  int v340;

  v313 = 0.0;
  v312 = 0.0;
  v10 = *(double *)(a1 + 256);
  *a4 = 0;
  if (!sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (*(double *)(a2 + 20) <= 0.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v37 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,hunc<=0", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      LOWORD(v310[0]) = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:invalid update,hunc<=0", v310, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v12);
      goto LABEL_318;
    }
    v13 = *(double *)(a2 + 4);
    v14 = *(double *)(a2 + 12);
    v15 = *(double *)(a2 + 60);
    v16 = *(double *)(a2 + 76);
    v311 = v16;
    v17 = *(double *)(a2 + 44);
    v18 = *(double *)(a2 + 52);
    v19 = *(_DWORD *)(a2 + 84);
    sub_1000F3540((uint64_t)v310);
    v307 = a3;
    sub_1000F32B4((uint64_t)v310, a1 + 8);
    v20 = (_OWORD *)(a1 + 420);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 420) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 436) = v21;
    v22 = *(_OWORD *)(a2 + 32);
    v23 = *(_OWORD *)(a2 + 48);
    v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 500) = v24;
    *(_OWORD *)(a1 + 452) = v22;
    *(_OWORD *)(a1 + 468) = v23;
    v25 = *(_OWORD *)(a2 + 96);
    v26 = *(_OWORD *)(a2 + 112);
    v27 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 532) = v26;
    *(_OWORD *)(a1 + 548) = v27;
    *(_OWORD *)(a1 + 516) = v25;
    v28 = *(double *)(a1 + 456);
    if (v28 > 0.0 && *(double *)(a1 + 448) < -450.0)
    {
      *(_QWORD *)(a1 + 448) = 0xC07C200000000000;
      if (v28 < 300.0)
        *(_QWORD *)(a1 + 456) = 0x4072C00000000000;
    }
    v29 = a1 + 88;
    if (*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88) != 128)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v38 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      *(_WORD *)v322 = 0;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:P is not dimensioned", v322, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
      goto LABEL_368;
    }
    v305 = (double **)(a1 + 112);
    if (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) != 32)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v40 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      *(_WORD *)v322 = 0;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:x is not dimensioned", v322, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
      goto LABEL_368;
    }
    v303 = v14;
    v30 = (double *)(a1 + 284);
    v31 = *(double *)(a1 + 440);
    if (!*(_BYTE *)(a1 + 824) || *v30 <= 0.0 || *(double *)(a1 + 496) - *(double *)(a1 + 340) <= 60.0)
      goto LABEL_74;
    sub_10011E258((double *)(a1 + 832), a1 + 264, a1 + 420);
    v33 = *(double *)(a1 + 440);
    v34 = *(_DWORD *)(a2 + 96);
    if (((v34 < 9) & (0x1C1u >> v34) & (v33 < 1500.0)) != 0)
      v33 = 1500.0;
    v35 = 6.0;
    if (v34 == 7)
      v35 = 2.5;
    if (v32 >= v35 * v33)
    {
      v36 = 1;
      *a4 = 1;
      sub_1000EC42C(a1, (uint64_t)"lts rejected by distance check", -1.0);
LABEL_46:
      sub_1000F345C(v310);
      return v36;
    }
    *(double *)v322 = *(double *)(a1 + 340) + 60.0;
    v314 = 2;
    v309 = 2;
    if (*(double *)v322 <= *(double *)(a1 + 184))
    {
      if ((sub_100C25404(a1, (double *)(a1 + 184), &v314, &v309) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v50 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_193;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 == -1)
          goto LABEL_56;
        goto LABEL_683;
      }
    }
    else if ((sub_100C25404(a1, (double *)v322, &v314, &v309) & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v42 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_193;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
        goto LABEL_56;
LABEL_683:
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_56:
      v308[0] = 0;
      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:updateMotion failed unexpectedly", v308, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
      goto LABEL_395;
    }
    v44 = *(_QWORD *)(a1 + 88);
    v45 = *(double *)(a1 + 440);
    if (*(double *)v44 + *(double *)(v44 + 40) <= v45 * v45 * 0.5625)
    {
LABEL_74:
      v306 = (double *)(a1 + 284);
      v302 = a1 + 8;
      if (v10 >= 3.9)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v52 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "KF:too many consecutive update rejections,KF reset", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          *(_WORD *)v322 = 0;
          v175 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:too many consecutive update rejections,KF reset", v322, 2);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v175);
          if (v175 != (char *)buf)
            free(v175);
        }
        sub_100C25CCC(a1);
        v30 = (double *)(a1 + 284);
      }
      if (*(_BYTE *)(a1 + 249))
      {
        if (*(_DWORD *)(a1 + 516) == 6)
        {
          if (*(_BYTE *)(a1 + 576) && (a5 & 1) == 0)
          {
            sub_10011E258((double *)(a1 + 832), a1 + 264, a1 + 420);
            if (v53 >= 50.0 || *(double *)(a2 + 76) - v30[7] >= 30.0)
            {
              if (v53 < *(double *)(a2 + 20) * 3.0 + *v30 * 3.0)
                sub_100C26AB0(a1, v16);
            }
            else
            {
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10217AF90);
              v54 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "KF:update with same cell location ignored", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                *(_WORD *)v322 = 0;
                LODWORD(v297) = 2;
                v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:update with same cell location ignored", v322, v297);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v55);
                if (v55 != (char *)buf)
                  free(v55);
              }
            }
          }
        }
        else if (*(_BYTE *)(a1 + 576))
        {
          *(_BYTE *)(a1 + 576) = 0;
        }
      }
      v56 = 42.25;
      if (*(_DWORD *)(a1 + 516) == 4)
      {
        if (v19 <= 66)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          v57 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
          }
          v56 = 26.2;
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            *(_WORD *)v322 = 0;
            LODWORD(v297) = 2;
            v177 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:increment num rejections by half", v322, v297);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v177);
            if (v177 != (char *)buf)
              free(v177);
          }
          v58 = 1;
LABEL_111:
          v59 = *(_DWORD *)(a2 + 96);
          if (v59 <= 8 && ((1 << v59) & 0x1C1) != 0)
          {
            if (*(_BYTE *)(a1 + 824))
              v56 = 225.0;
            if (v31 < 1500.0 && *(_DWORD *)(a1 + 516) != 6)
              v31 = 1500.0;
          }
          if (!*(_BYTE *)(a1 + 249))
          {
            *(_QWORD *)(a1 + 192) = 0;
            goto LABEL_142;
          }
          v61 = v16 - *(double *)(a1 + 184);
          if (v61 < 0.0)
            v61 = 0.0;
          *(double *)(a1 + 192) = v61;
          v62 = v16 - *(double *)(a1 + 340);
          if (v62 < 0.0)
            v62 = 0.0;
          if (*(_BYTE *)(a1 + 248) && v62 > 172800.0)
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            v63 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)v332 = 0x4105180000000000;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "KF:re-init,dT>%{public}.0lf", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_141;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 == -1)
              goto LABEL_428;
          }
          else
          {
            if (v62 <= 172800.0)
              goto LABEL_142;
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            v64 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)v332 = 0x4105180000000000;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "KF:re-init,dT>%{public}.0lf", buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
            {
LABEL_141:
              sub_100C25CCC(a1);
              v65 = *(_OWORD *)(a1 + 800);
              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
              *(_OWORD *)(a1 + 40) = v65;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
              *(_BYTE *)(a1 + 248) = 0;
              *(_QWORD *)(a1 + 624) = 0;
LABEL_142:
              if (sub_1000EBF88(*(_DWORD *)(a2 + 96)))
              {
                sub_100C25CCC(a1);
              }
              else
              {
                if (!*(_BYTE *)(a1 + 249))
                  goto LABEL_179;
                v301 = v10;
                v66 = v13;
                v67 = v56;
                v68 = v15;
                v69 = v18;
                v70 = v17;
                v71 = v31;
                v72 = *(double *)(a1 + 496);
                v73 = *(double *)(a1 + 340);
                v74 = sub_1000EBF88(*(_DWORD *)(a1 + 360));
                if (vabdd_f64(v72, v73) < 4.0)
                  v75 = v74;
                else
                  v75 = 0;
                v31 = v71;
                v17 = v70;
                v18 = v69;
                v15 = v68;
                v56 = v67;
                v13 = v66;
                v10 = v301;
                if (v75 == 1 && *(_DWORD *)(a1 + 516) != 9)
                {
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_10217AF90);
                  v88 = qword_1022A0028;
                  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(_QWORD *)v332 = 0x4010000000000000;
                    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "KF:non-GPS within %{public}.1f of GPS,ignoring.", buf, 0xCu);
                  }
                  if (!sub_1001BFF7C(115, 2))
                    goto LABEL_45;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_10217AF90);
                  *(_DWORD *)v322 = 134349056;
                  *(_QWORD *)&v322[4] = 0x4010000000000000;
                  LODWORD(v297) = 12;
                  v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:non-GPS within %{public}.1f of GPS,ignoring.", v322, v297);
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
                  goto LABEL_368;
                }
              }
              if (*(_BYTE *)(a1 + 249))
              {
                if (*(_DWORD *)(a1 + 516) != 4)
                  goto LABEL_163;
                if (*(int *)(a1 + 504) >= 73)
                {
                  v76 = 0.0;
                  if (*(double *)(a1 + 456) > 0.0)
                    v76 = *(double *)(a1 + 448);
                  if (sub_10011E634((double *)(a1 + 832), **(double **)(a1 + 112) * 57.2957795, *(double *)(*(_QWORD *)(a1 + 112) + 8) * 57.2957795, *(double *)(a1 + 424), *(double *)(a1 + 432), v76) > *(double *)(a1 + 440) * 5.0)
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v77 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "KF:diverged compared to med/high conf WiFi,resetting", buf, 2u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      *(_WORD *)v322 = 0;
                      LODWORD(v297) = 2;
                      v206 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:diverged compared to med/high conf WiFi,resetting", v322, v297);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v206);
                      if (v206 != (char *)buf)
                        free(v206);
                    }
                    sub_100C25CCC(a1);
                  }
                }
                if (*(_BYTE *)(a1 + 249))
                {
LABEL_163:
                  v78 = (double *)(a1 + 832);
                  if ((sub_1000F3890((double *)(a1 + 832), (double *)(a1 + 208), (double *)(a1 + 200), **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584)) & 1) == 0)
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v85 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 0))
                      goto LABEL_193;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    *(_WORD *)v322 = 0;
                    LODWORD(v297) = 2;
                    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:calc_dNdE failed", v322, v297);
                    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                    goto LABEL_395;
                  }
                  if ((sub_1000E4CD4(a1, &v311) & 1) == 0)
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v87 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 0))
                      goto LABEL_45;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    *(_WORD *)v322 = 0;
                    LODWORD(v297) = 2;
                    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:Prediction failed", v322, v297);
                    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
                    goto LABEL_368;
                  }
                  v79 = sub_1000EC42C(a1, (uint64_t)"prediction", -1.0);
                  v80 = **(double **)v29 + *(double *)(*(_QWORD *)v29 + 40);
                  if (v80 > 8.1e11)
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v81 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(_QWORD *)v332 = 0x412B774000000000;
                      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "KF:re-init,uncertainty growth>%{public}.0lf", buf, 0xCu);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      *(_DWORD *)v322 = 134349056;
                      *(_QWORD *)&v322[4] = 0x412B774000000000;
                      LODWORD(v297) = 12;
                      v213 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:re-init,uncertainty growth>%{public}.0lf", v322, v297);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v213);
                      if (v213 != (char *)buf)
                        free(v213);
                    }
                    sub_100C25CCC(a1);
                    v82 = *(_OWORD *)(a1 + 800);
                    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                    *(_OWORD *)(a1 + 40) = v82;
                    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
                    *(_BYTE *)(a1 + 248) = 0;
                    *(_QWORD *)(a1 + 624) = 0;
                    if ((sub_100C2753C(a1, v307) & 1) == 0)
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v83 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_45;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 == -1)
                        goto LABEL_450;
LABEL_727:
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_450:
                      *(_WORD *)v322 = 0;
                      LODWORD(v297) = 2;
                      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:seedTheFilter failed", v322, v297);
                      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
LABEL_368:
                      if (v39 != (char *)buf)
                        free(v39);
                      goto LABEL_45;
                    }
                    goto LABEL_180;
                  }
                  v300 = v56;
                  v89 = v13 * 0.0174532925;
                  v299 = **(double **)v29 + *(double *)(*(_QWORD *)v29 + 40);
                  v90 = v303 * 0.0174532925;
                  v91 = *(_DWORD *)(a2 + 96);
                  v298 = *(double *)(a1 + 440) * *(double *)(a1 + 440);
                  if (v91 <= 8
                    && ((1 << v91) & 0x1C1) != 0
                    && v80 * 9.0 < *(double *)(a1 + 440) * *(double *)(a1 + 440))
                  {
                    v92 = sub_10011E634((double *)(a1 + 832), v89 * 57.2957795, v90 * 57.2957795, **v305 * 57.2957795, (*v305)[1] * 57.2957795, 0.0);
                    if (v92 > 0.0 && v92 < *(double *)(a1 + 440) + *(double *)(a1 + 440))
                    {
                      v89 = **v305;
                      v90 = (*v305)[1];
                    }
                  }
                  if (*(_DWORD *)(a1 + 516) == 4
                    && *(_DWORD *)(a1 + 360) == 9
                    && *(int *)(a1 + 580) >= 11
                    && *(int *)(a1 + 504) >= 66
                    && *(double *)(a1 + 440) < 100.0)
                  {
                    v93 = *(_QWORD *)(a1 + 88);
                    v94 = *v306;
                    if (*(double *)v93 + *(double *)(v93 + 40) < v94 * v94)
                    {
                      v95 = fmax(v94, 1.0);
                      v96 = v95 * v95 * 0.5;
                      *(double *)v93 = v96;
                      *(_OWORD *)(v93 + 8) = 0u;
                      *(_OWORD *)(v93 + 24) = 0u;
                      *(double *)(v93 + 40) = v96;
                      *(_OWORD *)(v93 + 48) = 0u;
                      *(_OWORD *)(v93 + 64) = 0u;
                      *(_QWORD *)(v93 + 96) = 0;
                      *(_QWORD *)(v93 + 104) = 0;
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v97 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                      {
                        v98 = *v306;
                        *(_DWORD *)buf = 134349056;
                        *(double *)v332 = v98;
                        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f", buf, 0xCu);
                      }
                      v79 = sub_1001BFF7C(115, 2);
                      v78 = (double *)(a1 + 832);
                      if ((_DWORD)v79)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v269 = *v306;
                        *(_DWORD *)v322 = 134349056;
                        *(double *)&v322[4] = v269;
                        LODWORD(v297) = 12;
                        v270 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f", v322, v297);
                        v79 = sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v270);
                        if (v270 != (char *)buf)
                          free(v270);
                        v78 = (double *)(a1 + 832);
                      }
                    }
                  }
                  v304 = (double **)(a1 + 160);
                  v99 = sub_1000ECEA0(v79, (uint64_t *)(a1 + 88), &dword_101C1EC98, (_QWORD *)(a1 + 160), &v312);
                  if ((v99 & 1) != 0)
                  {
                    v100 = v31 * v31 * 0.5;
                    v101 = v100 + v312;
                    v103 = (double **)(a1 + 136);
                    v102 = *(double **)(a1 + 136);
                    v104 = *(double **)(a1 + 160);
                    *v102 = *v104 / (v100 + v312);
                    v102[1] = v104[1] / v101;
                    v102[2] = v104[2] / v101;
                    v102[3] = v104[3] / v101;
                    v105 = (v89 - **(double **)(a1 + 112)) * *(double *)(a1 + 208);
                    v313 = v105;
                    if (v101 <= 0.0)
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v134 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_45;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 == -1)
                        goto LABEL_272;
                      goto LABEL_685;
                    }
                    v106 = v105 * v105 / v101;
                    if (v106 > v300)
                    {
                      if (!*(_BYTE *)(a1 + 592))
                      {
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v163 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEBUG, "KF:Input is not consistent with prior input. Filter reseeding.", buf, 2u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          *(_WORD *)v322 = 0;
                          LODWORD(v297) = 2;
                          v219 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Input is not consistent with prior input. Filter reseeding.", v322, v297);
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v219);
                          if (v219 != (char *)buf)
                            free(v219);
                        }
                        sub_100C25CCC(a1);
                        if ((sub_100C2753C(a1, v307) & 1) == 0)
                        {
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v164 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_45;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 == -1)
                            goto LABEL_450;
                          goto LABEL_727;
                        }
                        goto LABEL_180;
                      }
                      sub_1000F32B4(v302, (uint64_t)v310);
                      v107 = a1 + 600;
                      if (*(_QWORD *)(a1 + 616)
                        && *(double *)(*(_QWORD *)v107 + 20) == *(double *)(a2 + 4)
                        && *(double *)(*(_QWORD *)v107 + 28) == *(double *)(a2 + 12))
                      {
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v108 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          *(_WORD *)v322 = 0;
                          LODWORD(v297) = 2;
                          v267 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:increment num rejections by half", v322, v297);
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v267);
                          if (v267 != (char *)buf)
                            free(v267);
                        }
                        v58 = 1;
                      }
                      v109 = operator new(0xB0uLL);
                      v110 = *(_OWORD *)(a2 + 112);
                      v109[7] = *(_OWORD *)(a2 + 96);
                      v109[8] = v110;
                      v109[9] = *(_OWORD *)(a2 + 128);
                      *(_OWORD *)((char *)v109 + 156) = *(_OWORD *)(a2 + 140);
                      v111 = *(_OWORD *)(a2 + 48);
                      v109[3] = *(_OWORD *)(a2 + 32);
                      v109[4] = v111;
                      v112 = *(_OWORD *)(a2 + 80);
                      v109[5] = *(_OWORD *)(a2 + 64);
                      v109[6] = v112;
                      v113 = *(_OWORD *)(a2 + 16);
                      v109[1] = *(_OWORD *)a2;
                      v109[2] = v113;
                      v114 = *(_QWORD *)(a1 + 600);
                      *(_QWORD *)v109 = v114;
                      *((_QWORD *)v109 + 1) = v107;
                      *(_QWORD *)(v114 + 8) = v109;
                      *(_QWORD *)(a1 + 600) = v109;
                      ++*(_QWORD *)(a1 + 616);
                      if (sub_100C27B90(a1))
                      {
                        v115 = *(_OWORD *)(a2 + 16);
                        *v20 = *(_OWORD *)a2;
                        *(_OWORD *)(a1 + 436) = v115;
                        v116 = *(_OWORD *)(a2 + 32);
                        v117 = *(_OWORD *)(a2 + 48);
                        v118 = *(_OWORD *)(a2 + 80);
                        *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
                        *(_OWORD *)(a1 + 500) = v118;
                        *(_OWORD *)(a1 + 452) = v116;
                        *(_OWORD *)(a1 + 468) = v117;
                        v119 = *(_OWORD *)(a2 + 96);
                        v120 = *(_OWORD *)(a2 + 112);
                        v121 = *(_OWORD *)(a2 + 128);
                        *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
                        *(_OWORD *)(a1 + 532) = v120;
                        *(_OWORD *)(a1 + 548) = v121;
                        *(_OWORD *)(a1 + 516) = v119;
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v122 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                        {
                          v123 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)buf = 134349568;
                          *(double *)v332 = v311;
                          *(_WORD *)&v332[8] = 1026;
                          *(_DWORD *)&v332[10] = v123;
                          v333 = 2050;
                          *(double *)v334 = v106;
                          _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf", buf, 0x1Cu);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v220 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)v322 = 134349568;
                          *(double *)&v322[4] = v311;
                          *(_WORD *)&v322[12] = 1026;
                          *(_DWORD *)&v322[14] = v220;
                          v323 = 2050;
                          *(double *)v324 = v106;
                          LODWORD(v297) = 28;
                          v221 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf", v322, v297);
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v221);
                          if (v221 != (char *)buf)
                            free(v221);
                        }
                        sub_100C25CCC(a1);
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v124 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                        {
                          v125 = *(_DWORD *)(a2 + 96);
                          v126 = *(_QWORD *)(a2 + 4);
                          v127 = *(_QWORD *)(a2 + 12);
                          v128 = *(_QWORD *)(a2 + 28);
                          v129 = *(_QWORD *)(a2 + 20);
                          v130 = *(_QWORD *)(a2 + 36);
                          v131 = *(_DWORD *)(a2 + 84);
                          *(_DWORD *)buf = 67241729;
                          *(_DWORD *)v332 = v125;
                          *(_WORD *)&v332[4] = 2049;
                          *(_QWORD *)&v332[6] = v126;
                          v333 = 2049;
                          *(_QWORD *)v334 = v127;
                          *(_WORD *)&v334[8] = 2049;
                          *(_QWORD *)&v334[10] = v128;
                          v335 = 2050;
                          v336 = v129;
                          v337 = 2050;
                          v338 = v130;
                          v339 = 1026;
                          v340 = v131;
                          _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vunc,%{public}.1lf,conf,%{public}d", buf, 0x40u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v222 = *(_DWORD *)(a2 + 96);
                          v223 = *(_QWORD *)(a2 + 4);
                          v224 = *(_QWORD *)(a2 + 12);
                          v225 = *(_QWORD *)(a2 + 28);
                          v226 = *(_QWORD *)(a2 + 20);
                          v227 = *(_QWORD *)(a2 + 36);
                          v228 = *(_DWORD *)(a2 + 84);
                          *(_DWORD *)v322 = 67241729;
                          *(_DWORD *)&v322[4] = v222;
                          *(_WORD *)&v322[8] = 2049;
                          *(_QWORD *)&v322[10] = v223;
                          v323 = 2049;
                          *(_QWORD *)v324 = v224;
                          *(_WORD *)&v324[8] = 2049;
                          *(_QWORD *)&v324[10] = v225;
                          v325 = 2050;
                          v326 = v226;
                          v327 = 2050;
                          v328 = v227;
                          v329 = 1026;
                          v330 = v228;
                          LODWORD(v297) = 64;
                          v229 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vunc,%{public}.1lf,conf,%{public}d", v322, v297);
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v229);
                          if (v229 != (char *)buf)
                            free(v229);
                        }
                        if ((sub_100C2753C(a1, v307) & 1) == 0)
                        {
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v132 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_45;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 == -1)
                            goto LABEL_450;
                          goto LABEL_727;
                        }
LABEL_180:
                        v36 = 1;
                        goto LABEL_46;
                      }
                      *a4 = 1;
                      v165 = 1.0;
                      if (v58)
                        v165 = 0.5;
                      *(double *)(a1 + 256) = v10 + v165;
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v166 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                      {
                        if (*(_BYTE *)(a1 + 824))
                          v167 = 115;
                        else
                          v167 = 110;
                        v168 = *(_DWORD *)(a2 + 96);
                        *(_DWORD *)buf = 67240960;
                        *(_DWORD *)v332 = v167;
                        *(_WORD *)&v332[4] = 2050;
                        *(double *)&v332[6] = v311;
                        v333 = 1026;
                        *(_DWORD *)v334 = v168;
                        *(_WORD *)&v334[4] = 2050;
                        *(double *)&v334[6] = v106;
                        _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lat,v2,%{public}.1lf", buf, 0x22u);
                      }
                      if (!sub_1001BFF7C(115, 2))
                        goto LABEL_180;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      if (*(_BYTE *)(a1 + 824))
                        v169 = 115;
                      else
                        v169 = 110;
                      v170 = *(_DWORD *)(a2 + 96);
                      *(_DWORD *)v322 = 67240960;
                      *(_DWORD *)&v322[4] = v169;
                      *(_WORD *)&v322[8] = 2050;
                      *(double *)&v322[10] = v311;
                      v323 = 1026;
                      *(_DWORD *)v324 = v170;
                      *(_WORD *)&v324[4] = 2050;
                      *(double *)&v324[6] = v106;
                      LODWORD(v297) = 34;
                      v171 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lat,v2,%{public}.1lf", v322, v297);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v171);
LABEL_349:
                      if (v171 != (char *)buf)
                        free(v171);
                      goto LABEL_180;
                    }
                    v135 = sub_1000ED2D4(v99, &v313, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v305);
                    if ((v135 & 1) == 0)
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v162 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_FAULT, "KF:lat innovation update failed", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_193;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      *(_WORD *)v322 = 0;
                      LODWORD(v297) = 2;
                      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:lat innovation update failed", v322, v297);
                      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                      goto LABEL_395;
                    }
                    if (!sub_1000EC93C(v135, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101C1EC98))
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v172 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_193;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 == -1)
                        goto LABEL_357;
                      goto LABEL_700;
                    }
                    sub_1000EC42C(a1, (uint64_t)"lat update", v106);
                    sub_1000EDE04(a1);
                    if ((v136 & 1) == 0)
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v173 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_193;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 == -1)
                        goto LABEL_364;
                      goto LABEL_718;
                    }
                    v137 = sub_1000ECEA0(v136, (uint64_t *)(a1 + 88), &dword_101C1EC9C, v304, &v312);
                    if ((v137 & 1) != 0)
                    {
                      v138 = v100 + v312;
                      v139 = *v304;
                      v140 = *v103;
                      *v140 = **v304 / (v100 + v312);
                      v140[1] = v139[1] / v138;
                      v140[2] = v139[2] / v138;
                      v140[3] = v139[3] / v138;
                      v141 = v90 - (*v305)[1];
                      if (v141 < -3.14159265)
                        v141 = v141 + 6.28318531;
                      if (v141 > 3.14159265)
                        v141 = v141 + -6.28318531;
                      v142 = *(double *)(a1 + 200) * v141;
                      v313 = v142;
                      if (v138 > 0.0)
                      {
                        v143 = v142 * v142 / v138;
                        if (v143 > v300)
                        {
                          if (!*(_BYTE *)(a1 + 592))
                          {
                            if (qword_1022A0020 != -1)
                              dispatch_once(&qword_1022A0020, &stru_10217AF90);
                            v204 = qword_1022A0028;
                            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "KF:Input is not consistent with prior input,filter reseeding", buf, 2u);
                            }
                            if (sub_1001BFF7C(115, 2))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              *(_WORD *)v322 = 0;
                              LODWORD(v297) = 2;
                              v282 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Input is not consistent with prior input,filter reseeding", v322, v297);
                              sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v282);
                              if (v282 != (char *)buf)
                                free(v282);
                            }
                            sub_100C25CCC(a1);
                            if ((sub_100C2753C(a1, v307) & 1) == 0)
                            {
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              v205 = qword_1022A0028;
                              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                              }
                              if (!sub_1001BFF7C(115, 0))
                                goto LABEL_45;
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 == -1)
                                goto LABEL_450;
                              goto LABEL_727;
                            }
                            goto LABEL_180;
                          }
                          sub_1000F32B4(v302, (uint64_t)v310);
                          v144 = a1 + 600;
                          if (*(_QWORD *)(a1 + 616)
                            && *(double *)(*(_QWORD *)v144 + 20) == *(double *)(a2 + 4)
                            && *(double *)(*(_QWORD *)v144 + 28) == *(double *)(a2 + 12))
                          {
                            if (qword_1022A0020 != -1)
                              dispatch_once(&qword_1022A0020, &stru_10217AF90);
                            v145 = qword_1022A0028;
                            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEBUG, "KF:increment num rejections by half", buf, 2u);
                            }
                            if (sub_1001BFF7C(115, 2))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              *(_WORD *)v322 = 0;
                              LODWORD(v297) = 2;
                              v288 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:increment num rejections by half", v322, v297);
                              sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v288);
                              if (v288 != (char *)buf)
                                free(v288);
                            }
                            v58 = 1;
                          }
                          v146 = operator new(0xB0uLL);
                          v147 = *(_OWORD *)(a2 + 112);
                          v146[7] = *(_OWORD *)(a2 + 96);
                          v146[8] = v147;
                          v146[9] = *(_OWORD *)(a2 + 128);
                          *(_OWORD *)((char *)v146 + 156) = *(_OWORD *)(a2 + 140);
                          v148 = *(_OWORD *)(a2 + 48);
                          v146[3] = *(_OWORD *)(a2 + 32);
                          v146[4] = v148;
                          v149 = *(_OWORD *)(a2 + 80);
                          v146[5] = *(_OWORD *)(a2 + 64);
                          v146[6] = v149;
                          v150 = *(_OWORD *)(a2 + 16);
                          v146[1] = *(_OWORD *)a2;
                          v146[2] = v150;
                          v151 = *(_QWORD *)(a1 + 600);
                          *(_QWORD *)v146 = v151;
                          *((_QWORD *)v146 + 1) = v144;
                          *(_QWORD *)(v151 + 8) = v146;
                          *(_QWORD *)(a1 + 600) = v146;
                          ++*(_QWORD *)(a1 + 616);
                          if (sub_100C27B90(a1))
                          {
                            v152 = *(_OWORD *)(a2 + 16);
                            *v20 = *(_OWORD *)a2;
                            *(_OWORD *)(a1 + 436) = v152;
                            v153 = *(_OWORD *)(a2 + 32);
                            v154 = *(_OWORD *)(a2 + 48);
                            v155 = *(_OWORD *)(a2 + 80);
                            *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
                            *(_OWORD *)(a1 + 500) = v155;
                            *(_OWORD *)(a1 + 452) = v153;
                            *(_OWORD *)(a1 + 468) = v154;
                            v156 = *(_OWORD *)(a2 + 96);
                            v157 = *(_OWORD *)(a2 + 112);
                            v158 = *(_OWORD *)(a2 + 128);
                            *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
                            *(_OWORD *)(a1 + 532) = v157;
                            *(_OWORD *)(a1 + 548) = v158;
                            *(_OWORD *)(a1 + 516) = v156;
                            if (qword_1022A0020 != -1)
                              dispatch_once(&qword_1022A0020, &stru_10217AF90);
                            v159 = qword_1022A0028;
                            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                            {
                              v160 = *(_DWORD *)(a2 + 96);
                              *(_DWORD *)buf = 134349568;
                              *(double *)v332 = v311;
                              *(_WORD *)&v332[8] = 1026;
                              *(_DWORD *)&v332[10] = v160;
                              v333 = 2050;
                              *(double *)v334 = v143;
                              _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEBUG, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lon,v2,%{public}.1lf", buf, 0x1Cu);
                            }
                            if (sub_1001BFF7C(115, 2))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              v283 = *(_DWORD *)(a2 + 96);
                              *(_DWORD *)v322 = 134349568;
                              *(double *)&v322[4] = v311;
                              *(_WORD *)&v322[12] = 1026;
                              *(_DWORD *)&v322[14] = v283;
                              v323 = 2050;
                              *(double *)v324 = v143;
                              LODWORD(v297) = 28;
                              v284 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lon,v2,%{public}.1lf", v322, v297);
                              sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v284);
                              if (v284 != (char *)buf)
                                free(v284);
                            }
                            sub_100C25CCC(a1);
                            if ((sub_100C2753C(a1, v307) & 1) == 0)
                            {
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              v161 = qword_1022A0028;
                              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                              }
                              if (!sub_1001BFF7C(115, 0))
                                goto LABEL_45;
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 == -1)
                                goto LABEL_450;
                              goto LABEL_727;
                            }
                            goto LABEL_180;
                          }
                          *a4 = 1;
                          v207 = 1.0;
                          if (v58)
                            v207 = 0.5;
                          *(double *)(a1 + 256) = v10 + v207;
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v208 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                          {
                            if (*(_BYTE *)(a1 + 824))
                              v209 = 115;
                            else
                              v209 = 110;
                            v210 = *(_DWORD *)(a2 + 96);
                            *(_DWORD *)buf = 67240960;
                            *(_DWORD *)v332 = v209;
                            *(_WORD *)&v332[4] = 2050;
                            *(double *)&v332[6] = v311;
                            v333 = 1026;
                            *(_DWORD *)v334 = v210;
                            *(_WORD *)&v334[4] = 2050;
                            *(double *)&v334[6] = v143;
                            _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lon,v2,%{public}.1lf", buf, 0x22u);
                          }
                          if (!sub_1001BFF7C(115, 2))
                            goto LABEL_180;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          if (*(_BYTE *)(a1 + 824))
                            v211 = 115;
                          else
                            v211 = 110;
                          v212 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)v322 = 67240960;
                          *(_DWORD *)&v322[4] = v211;
                          *(_WORD *)&v322[8] = 2050;
                          *(double *)&v322[10] = v311;
                          v323 = 1026;
                          *(_DWORD *)v324 = v212;
                          *(_WORD *)&v324[4] = 2050;
                          *(double *)&v324[6] = v143;
                          LODWORD(v297) = 34;
                          v171 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,lon,v2,%{public}.1lf", v322, v297);
                          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v171);
                          goto LABEL_349;
                        }
                        v178 = sub_1000ED2D4(v137, &v313, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v305);
                        if ((v178 & 1) == 0)
                        {
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v203 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_FAULT, "KF:lon innovation update failed", buf, 2u);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_193;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          *(_WORD *)v322 = 0;
                          LODWORD(v297) = 2;
                          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:lon innovation update failed", v322, v297);
                          sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                          goto LABEL_395;
                        }
                        if (sub_1000EC93C(v178, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101C1EC9C))
                        {
                          sub_1000EC42C(a1, (uint64_t)"lon update", v143);
                          sub_1000EDE04(a1);
                          if ((v179 & 1) != 0)
                          {
                            if (v17 < 0.0 || v18 <= 0.0)
                            {
LABEL_522:
                              if (!*(_BYTE *)(a1 + 249))
                                goto LABEL_546;
                              v233 = **(double **)(a1 + 88) + *(double *)(*(_QWORD *)(a1 + 88) + 40);
                              v234 = *(double *)(a1 + 440) * *(double *)(a1 + 440);
                              if (v299 >= v298)
                              {
                                if (v233 >= v234)
                                  goto LABEL_530;
                                sub_1000EC42C(a1, (uint64_t)"Applying uncertainty floor to stop averaging", -1.0);
                                v238 = fmax(*(double *)(a1 + 440), 1.0);
                                v236 = v238 * v238 * 0.5;
                                v237 = *(_QWORD *)(a1 + 88);
                              }
                              else
                              {
                                if (v299 >= v234 || v233 >= v299)
                                {
LABEL_530:
                                  if ((sub_1000EBF88(*(_DWORD *)(a1 + 360)) & 1) != 0)
                                  {
                                    v239 = *(_DWORD *)(a1 + 516);
                                    if (*v306 < 50.0
                                      && v239 != 9
                                      && *(double *)(a1 + 496) - *(double *)(a1 + 340) < 4.0)
                                    {
                                      if (qword_1022A0020 != -1)
                                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                      v240 = qword_1022A0028;
                                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                      {
                                        *(_WORD *)buf = 0;
                                        _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEBUG, "KF:Not applying the uncertainty floor", buf, 2u);
                                      }
                                      if (sub_1001BFF7C(115, 2))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_1022A0020 != -1)
                                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                        *(_WORD *)v322 = 0;
                                        LODWORD(v297) = 2;
                                        v241 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Not applying the uncertainty floor", v322, v297);
                                        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v241);
                                        if (v241 != (char *)buf)
                                          free(v241);
                                      }
                                      goto LABEL_546;
                                    }
                                  }
                                  else
                                  {
                                    v239 = *(_DWORD *)(a1 + 516);
                                  }
                                  if (v233 < dbl_101C1EB80[v239 == 9])
                                  {
                                    v242 = qword_101C1EB90[v239 == 9];
                                    v243 = *(_QWORD *)v29;
                                    *(_QWORD *)v243 = v242;
                                    *(_OWORD *)(v243 + 8) = 0u;
                                    *(_OWORD *)(v243 + 24) = 0u;
                                    *(_QWORD *)(v243 + 40) = v242;
                                    *(_OWORD *)(v243 + 48) = 0u;
                                    *(_OWORD *)(v243 + 64) = 0u;
                                    *(_QWORD *)(v243 + 96) = 0;
                                    *(_QWORD *)(v243 + 104) = 0;
                                  }
LABEL_546:
                                  v244 = *(double *)(a1 + 456);
                                  if (v244 <= 0.0)
                                    goto LABEL_566;
                                  if (*(float *)(a1 + 588) < 0.0)
                                  {
                                    v245 = *(double *)(a1 + 448);
                                    *(float *)(a1 + 584) = v245;
                                    v246 = v244 * v244;
                                    goto LABEL_549;
                                  }
                                  v247 = *(_QWORD *)(a1 + 584);
                                  v248 = sub_1000EBF88(*(_DWORD *)(a1 + 360));
                                  v249 = v244;
                                  if (v248 && *(double *)(a1 + 192) < 4.0)
                                    v249 = 3000.0;
                                  v250 = *(float *)(a1 + 588);
                                  if (v250 > 9000000.0)
                                  {
                                    *(_DWORD *)(a1 + 588) = 1258902592;
                                    v250 = *(float *)"@T\tK";
                                  }
                                  v251 = v250 + (float)(v249 * v249);
                                  if (v251 > 0.0)
                                  {
                                    v252 = *(float *)(a1 + 584);
                                    v253 = *(double *)(a1 + 448) - v252;
                                    v254 = (float)(v253 * v253) / v251;
                                    if (v254 <= 81.0)
                                    {
                                      v268 = v250 / v251;
                                      *(float *)(a1 + 584) = v252 + (float)(v268 * v253);
                                      v246 = v250 - (float)(v268 * v250);
LABEL_549:
                                      *(float *)(a1 + 588) = v246;
                                      if (v246 < 1.0)
                                        *(_DWORD *)(a1 + 588) = 1065353216;
                                      goto LABEL_566;
                                    }
                                    *(_QWORD *)(a1 + 584) = v247;
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v255 = v254;
                                    v256 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                    {
                                      if (*(_BYTE *)(a1 + 824))
                                        v257 = 115;
                                      else
                                        v257 = 110;
                                      v258 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)buf = 67240960;
                                      *(_DWORD *)v332 = v257;
                                      *(_WORD *)&v332[4] = 2050;
                                      *(double *)&v332[6] = v311;
                                      v333 = 1026;
                                      *(_DWORD *)v334 = v258;
                                      *(_WORD *)&v334[4] = 2048;
                                      *(double *)&v334[6] = v255;
                                      _os_log_impl((void *)&_mh_execute_header, v256, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf", buf, 0x22u);
                                    }
                                    if (sub_1001BFF7C(115, 2))
                                    {
                                      bzero(buf, 0x65CuLL);
                                      if (qword_1022A0020 != -1)
                                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                      if (*(_BYTE *)(a1 + 824))
                                        v294 = 115;
                                      else
                                        v294 = 110;
                                      v295 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)v322 = 67240960;
                                      *(_DWORD *)&v322[4] = v294;
                                      *(_WORD *)&v322[8] = 2050;
                                      *(double *)&v322[10] = v311;
                                      v323 = 1026;
                                      *(_DWORD *)v324 = v295;
                                      *(_WORD *)&v324[4] = 2048;
                                      *(double *)&v324[6] = v255;
                                      LODWORD(v297) = 34;
                                      v296 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf", v322, v297);
                                      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v296);
                                      if (v296 != (char *)buf)
                                        free(v296);
                                    }
                                  }
LABEL_566:
                                  if (*(_DWORD *)(a1 + 516) == 9)
                                    v259 = *(_DWORD *)(a1 + 580) + 1;
                                  else
                                    v259 = 0;
                                  *(_DWORD *)(a1 + 580) = v259;
                                  if ((sub_1000EBA50(a1, v307, 0) & 1) == 0)
                                  {
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v266 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_FAULT, "KF:getResult failed", buf, 2u);
                                    }
                                    if (!sub_1001BFF7C(115, 0))
                                      goto LABEL_193;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    *(_WORD *)v322 = 0;
                                    LODWORD(v297) = 2;
                                    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:getResult failed", v322, v297);
                                    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                                    goto LABEL_395;
                                  }
                                  v260 = *(_DWORD *)(a1 + 516);
                                  *(_BYTE *)(a1 + 576) = v260 == 6;
                                  *(_BYTE *)(a1 + 577) = 0;
                                  *(_QWORD *)(a1 + 256) = 0;
                                  if (*(_BYTE *)(a1 + 592)
                                    || (v261 = *(_DWORD *)(a1 + 360), v261 <= 8) && ((1 << v261) & 0x181) != 0
                                    || v260 <= 8 && ((1 << v260) & 0x181) != 0)
                                  {
LABEL_573:
                                    sub_1000F34E0((_QWORD *)(a1 + 600));
                                    v262 = *(_OWORD *)(a1 + 532);
                                    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 516);
                                    *(_OWORD *)(a1 + 376) = v262;
                                    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 548);
                                    *(_OWORD *)(a1 + 404) = *(_OWORD *)(a1 + 560);
                                    v263 = *(_OWORD *)(a1 + 468);
                                    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 452);
                                    *(_OWORD *)(a1 + 312) = v263;
                                    v264 = *(_OWORD *)(a1 + 500);
                                    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 484);
                                    *(_OWORD *)(a1 + 344) = v264;
                                    v265 = *(_OWORD *)(a1 + 436);
                                    v36 = 1;
                                    *(_OWORD *)(a1 + 264) = *v20;
                                    *(_OWORD *)(a1 + 280) = v265;
                                    goto LABEL_46;
                                  }
                                  if (v260 == v261)
                                  {
                                    sub_10011E258(v78, a1 + 420, a1 + 264);
                                    v274 = *(double *)(a1 + 440);
                                    if (v274 > *v306)
                                      v274 = *v306;
                                    if (v273 <= v274)
                                      goto LABEL_573;
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v275 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_DEBUG, "KF:Filter corrobarated by position,rejects now allowed", buf, 2u);
                                    }
                                    if (!sub_1001BFF7C(115, 2))
                                      goto LABEL_643;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    *(_WORD *)v322 = 0;
                                    LODWORD(v297) = 2;
                                    v276 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Filter corrobarated by position,rejects now allowed", v322, v297);
                                    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v276);
                                  }
                                  else
                                  {
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v280 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v280, OS_LOG_TYPE_DEBUG, "KF:Filter corrobarated by type,rejects now allowed", buf, 2u);
                                    }
                                    if (!sub_1001BFF7C(115, 2))
                                      goto LABEL_643;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    *(_WORD *)v322 = 0;
                                    LODWORD(v297) = 2;
                                    v276 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Filter corrobarated by type,rejects now allowed", v322, v297);
                                    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v276);
                                  }
                                  if (v276 != (char *)buf)
                                    free(v276);
LABEL_643:
                                  *(_BYTE *)(a1 + 592) = 1;
                                  goto LABEL_573;
                                }
                                sub_1000EC42C(a1, (uint64_t)"Applying uncertainty floor to stop averaging", -1.0);
                                v235 = fmax(sqrt(v299), 1.0);
                                v236 = v235 * v235 * 0.5;
                                v237 = *(_QWORD *)v29;
                              }
                              *(double *)v237 = v236;
                              *(_OWORD *)(v237 + 24) = 0u;
                              *(_OWORD *)(v237 + 8) = 0u;
                              *(double *)(v237 + 40) = v236;
                              *(_OWORD *)(v237 + 48) = 0u;
                              *(_OWORD *)(v237 + 64) = 0u;
                              *(_QWORD *)(v237 + 96) = 0;
                              *(_QWORD *)(v237 + 104) = 0;
                              v233 = **(double **)v29 + *(double *)(*(_QWORD *)v29 + 40);
                              goto LABEL_530;
                            }
                            sub_1000F3540((uint64_t)v322);
                            sub_1000F32B4((uint64_t)v322, v302);
                            v181 = __sincos_stret(v15 * 0.0174532925);
                            if (v18 < 0.5)
                              v18 = 0.5;
                            v182 = sub_1000ECEA0(v180, (uint64_t *)(a1 + 88), &dword_101C1EC90, v304, &v312);
                            if ((v182 & 1) != 0)
                            {
                              v183 = v312 + v18 * v18;
                              v184 = *v304;
                              v185 = *v103;
                              *v185 = **v304 / v183;
                              v185[1] = v184[1] / v183;
                              v185[2] = v184[2] / v183;
                              v185[3] = v184[3] / v183;
                              v186 = v181.__cosval * v17 - (*v305)[2];
                              v313 = v186;
                              if (v183 <= 0.0)
                              {
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v218 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_500;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 == -1)
                                  goto LABEL_698;
                                goto LABEL_731;
                              }
                              v187 = v186 * v186 / v183;
                              if (v187 > v300)
                              {
                                sub_1000F32B4(v302, (uint64_t)v322);
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v230 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                {
                                  if (*(_BYTE *)(a1 + 824))
                                    v231 = 115;
                                  else
                                    v231 = 110;
                                  v232 = *(_DWORD *)(a2 + 96);
                                  *(_DWORD *)buf = 67240960;
                                  *(_DWORD *)v332 = v231;
                                  *(_WORD *)&v332[4] = 2050;
                                  *(double *)&v332[6] = v311;
                                  v333 = 1026;
                                  *(_DWORD *)v334 = v232;
                                  *(_WORD *)&v334[4] = 2050;
                                  *(double *)&v334[6] = v187;
                                  _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf", buf, 0x22u);
                                }
                                if (!sub_1001BFF7C(115, 2))
                                  goto LABEL_521;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                if (*(_BYTE *)(a1 + 824))
                                  v292 = 115;
                                else
                                  v292 = 110;
                                v293 = *(_DWORD *)(a2 + 96);
                                v314 = 67240960;
                                v315 = v292;
                                v316 = 2050;
                                v317 = v311;
                                v318 = 1026;
                                v319 = v293;
                                v320 = 2050;
                                v321 = v187;
                                LODWORD(v297) = 34;
                                v201 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf", &v314, v297);
                                sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v201);
LABEL_707:
                                if (v201 != (char *)buf)
                                  free(v201);
                                goto LABEL_521;
                              }
                              v188 = sub_1000ED2D4(v182, &v313, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v305);
                              if ((v188 & 1) == 0)
                              {
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v271 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v271, OS_LOG_TYPE_FAULT, "KF:vn innovation update failed", buf, 2u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_494;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                LOWORD(v314) = 0;
                                LODWORD(v297) = 2;
                                v272 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:vn innovation update failed", &v314, v297);
                                sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v272);
                                goto LABEL_695;
                              }
                              if (!sub_1000EC93C(v188, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101C1EC90))
                              {
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v277 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_494;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 == -1)
                                  goto LABEL_620;
                                goto LABEL_732;
                              }
                              sub_1000EC42C(a1, (uint64_t)"vn update", -1.0);
                              sub_1000EDE04(a1);
                              if ((v189 & 1) == 0)
                              {
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v278 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_494;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 == -1)
                                  goto LABEL_627;
LABEL_733:
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_627:
                                LOWORD(v314) = 0;
                                LODWORD(v297) = 2;
                                v272 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:sanityTestP failed", &v314, v297);
                                sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v272);
                                goto LABEL_695;
                              }
                              v190 = sub_1000ECEA0(v189, (uint64_t *)(a1 + 88), &dword_101C1EC94, v304, &v312);
                              if ((v190 & 1) != 0)
                              {
                                v191 = v312 + v18 * v18;
                                v192 = *v304;
                                v193 = *v103;
                                *v193 = **v304 / v191;
                                v193[1] = v192[1] / v191;
                                v193[2] = v192[2] / v191;
                                v193[3] = v192[3] / v191;
                                v194 = v181.__sinval * v17 - (*v305)[3];
                                v313 = v194;
                                if (v191 > 0.0)
                                {
                                  v195 = v194 * v194 / v191;
                                  if (v195 > v300)
                                  {
                                    sub_1000F32B4(v302, (uint64_t)v322);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v196 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                                    {
                                      if (*(_BYTE *)(a1 + 824))
                                        v197 = 115;
                                      else
                                        v197 = 110;
                                      v198 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)buf = 67240960;
                                      *(_DWORD *)v332 = v197;
                                      *(_WORD *)&v332[4] = 2050;
                                      *(double *)&v332[6] = v311;
                                      v333 = 1026;
                                      *(_DWORD *)v334 = v198;
                                      *(_WORD *)&v334[4] = 2050;
                                      *(double *)&v334[6] = v195;
                                      _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEBUG, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf", buf, 0x22u);
                                    }
                                    if (!sub_1001BFF7C(115, 2))
                                      goto LABEL_521;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    if (*(_BYTE *)(a1 + 824))
                                      v199 = 115;
                                    else
                                      v199 = 110;
                                    v200 = *(_DWORD *)(a2 + 96);
                                    v314 = 67240960;
                                    v315 = v199;
                                    v316 = 2050;
                                    v317 = v311;
                                    v318 = 1026;
                                    v319 = v200;
                                    v320 = 2050;
                                    v321 = v195;
                                    LODWORD(v297) = 34;
                                    v201 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf", &v314, v297);
                                    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v201);
                                    goto LABEL_707;
                                  }
                                  v285 = sub_1000ED2D4(v190, &v313, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), v305);
                                  if ((v285 & 1) == 0)
                                  {
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v289 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v289, OS_LOG_TYPE_FAULT, "KF:ve innovation update failed", buf, 2u);
                                    }
                                    if (!sub_1001BFF7C(115, 0))
                                      goto LABEL_494;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    LOWORD(v314) = 0;
                                    LODWORD(v297) = 2;
                                    v272 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:ve innovation update failed", &v314, v297);
                                    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v272);
                                    goto LABEL_695;
                                  }
                                  if (sub_1000EC93C(v285, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101C1EC94))
                                  {
                                    sub_1000EC42C(a1, (uint64_t)"ve update", -1.0);
                                    sub_1000EDE04(a1);
                                    if ((v286 & 1) != 0)
                                    {
LABEL_521:
                                      sub_1000F345C(v322);
                                      goto LABEL_522;
                                    }
                                    if (qword_1022A0020 != -1)
                                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                    v287 = qword_1022A0028;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v287, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                                    }
                                    if (!sub_1001BFF7C(115, 0))
                                      goto LABEL_494;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0020 == -1)
                                      goto LABEL_627;
                                    goto LABEL_733;
                                  }
                                  if (qword_1022A0020 != -1)
                                    dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                  v290 = qword_1022A0028;
                                  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_WORD *)buf = 0;
                                    _os_log_impl((void *)&_mh_execute_header, v290, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                                  }
                                  if (!sub_1001BFF7C(115, 0))
                                    goto LABEL_494;
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A0020 == -1)
                                  {
LABEL_620:
                                    LOWORD(v314) = 0;
                                    LODWORD(v297) = 2;
                                    v272 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:updateP failed", &v314, v297);
                                    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v272);
                                    goto LABEL_695;
                                  }
LABEL_732:
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                  goto LABEL_620;
                                }
                                if (qword_1022A0020 != -1)
                                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                v281 = qword_1022A0028;
                                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_500;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0020 == -1)
                                {
LABEL_698:
                                  LOWORD(v314) = 0;
                                  LODWORD(v297) = 2;
                                  v291 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:sigma2_v <= 0", &v314, v297);
                                  sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v291);
                                  if (v291 != (char *)buf)
                                    free(v291);
                                  goto LABEL_500;
                                }
LABEL_731:
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                                goto LABEL_698;
                              }
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              v279 = qword_1022A0028;
                              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v279, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                              }
                              if (!sub_1001BFF7C(115, 0))
                                goto LABEL_494;
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 == -1)
                              {
LABEL_694:
                                LOWORD(v314) = 0;
                                LODWORD(v297) = 2;
                                v272 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:computePht_and_hPht failed", &v314, v297);
                                sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v272);
LABEL_695:
                                if (v272 != (char *)buf)
                                  free(v272);
LABEL_494:
                                sub_100C25CCC(a1);
                                v217 = *(_OWORD *)(a1 + 800);
                                *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                                *(_OWORD *)(a1 + 40) = v217;
                                *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
                                *(_BYTE *)(a1 + 248) = 0;
                                *(_QWORD *)(a1 + 624) = 0;
LABEL_500:
                                sub_1000F345C(v322);
LABEL_45:
                                v36 = 0;
                                goto LABEL_46;
                              }
                            }
                            else
                            {
                              if (qword_1022A0020 != -1)
                                dispatch_once(&qword_1022A0020, &stru_10217AF90);
                              v216 = qword_1022A0028;
                              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                              }
                              if (!sub_1001BFF7C(115, 0))
                                goto LABEL_494;
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A0020 == -1)
                                goto LABEL_694;
                            }
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                            goto LABEL_694;
                          }
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10217AF90);
                          v215 = qword_1022A0028;
                          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_FAULT, "KF:sanityTestP failed", buf, 2u);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_193;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 == -1)
                            goto LABEL_364;
LABEL_718:
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_364:
                          *(_WORD *)v322 = 0;
                          LODWORD(v297) = 2;
                          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:sanityTestP failed", v322, v297);
                          sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
LABEL_395:
                          if (v43 != (char *)buf)
                            free(v43);
LABEL_193:
                          sub_100C25CCC(a1);
                          v36 = 0;
                          v86 = *(_OWORD *)(a1 + 800);
                          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                          *(_OWORD *)(a1 + 40) = v86;
                          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
                          *(_BYTE *)(a1 + 248) = 0;
                          *(_QWORD *)(a1 + 624) = 0;
                          goto LABEL_46;
                        }
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        v214 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
                        }
                        if (!sub_1001BFF7C(115, 0))
                          goto LABEL_193;
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A0020 == -1)
                        {
LABEL_357:
                          *(_WORD *)v322 = 0;
                          LODWORD(v297) = 2;
                          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:updateP failed", v322, v297);
                          sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                          goto LABEL_395;
                        }
LABEL_700:
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                        goto LABEL_357;
                      }
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      v176 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_45;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 == -1)
                      {
LABEL_272:
                        *(_WORD *)v322 = 0;
                        LODWORD(v297) = 2;
                        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:sigma2_v <= 0", v322, v297);
                        sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v39);
                        goto LABEL_368;
                      }
LABEL_685:
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                      goto LABEL_272;
                    }
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v174 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 0))
                      goto LABEL_193;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0020 == -1)
                    {
LABEL_265:
                      *(_WORD *)v322 = 0;
                      LODWORD(v297) = 2;
                      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:computePht_and_hPht failed", v322, v297);
                      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v43);
                      goto LABEL_395;
                    }
                  }
                  else
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217AF90);
                    v133 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_FAULT, "KF:computePht_and_hPht failed", buf, 2u);
                    }
                    if (!sub_1001BFF7C(115, 0))
                      goto LABEL_193;
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0020 == -1)
                      goto LABEL_265;
                  }
                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                  goto LABEL_265;
                }
              }
LABEL_179:
              if ((sub_100C2753C(a1, v307) & 1) == 0)
              {
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10217AF90);
                v84 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_FAULT, "KF:seedTheFilter failed", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_45;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 == -1)
                  goto LABEL_450;
                goto LABEL_727;
              }
              goto LABEL_180;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 == -1)
            {
LABEL_428:
              *(_DWORD *)v322 = 134349056;
              *(_QWORD *)&v322[4] = 0x4105180000000000;
              LODWORD(v297) = 12;
              v202 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:re-init,dT>%{public}.0lf", v322, v297);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v202);
              if (v202 != (char *)buf)
                free(v202);
              goto LABEL_141;
            }
          }
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
          goto LABEL_428;
        }
        if (v19 >= 0x4D)
        {
          v58 = 0;
          v56 = dbl_101C1EB70[*(_BYTE *)(a1 + 824) == 0];
          goto LABEL_111;
        }
      }
      v58 = 0;
      goto LABEL_111;
    }
    v46 = *(_DWORD *)(a1 + 360);
    if (v46 <= 8 && ((1 << v46) & 0x1C1) != 0)
    {
      v47 = *v30;
      v48 = v45 * 0.75;
      if (*v30 >= 500.0 && v47 < v48)
      {
        v49 = fmax(v47, 1.0);
LABEL_73:
        v51 = v49 * v49 * 0.5;
        *(double *)v44 = v51;
        *(_OWORD *)(v44 + 8) = 0u;
        *(_OWORD *)(v44 + 24) = 0u;
        *(double *)(v44 + 40) = v51;
        *(_OWORD *)(v44 + 48) = 0u;
        *(_OWORD *)(v44 + 64) = 0u;
        *(_QWORD *)(v44 + 96) = 0;
        *(_QWORD *)(v44 + 104) = 0;
        goto LABEL_74;
      }
    }
    else
    {
      v48 = v45 * 0.75;
    }
    v49 = fmax(v48, 1.0);
    goto LABEL_73;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,null island", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  LOWORD(v310[0]) = 0;
  v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:invalid update,null island", v310, 2);
  sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)", "%s\n", v12);
LABEL_318:
  if (v12 != (char *)buf)
    free(v12);
  return 0;
}

void sub_1000EB8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1000F345C(&STACK[0x330]);
  sub_1000F345C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EBA50(uint64_t a1, uint64_t a2, char a3)
{
  _DWORD *v3;
  double *v8;
  float64x2_t *v10;
  double v13;
  double v14;
  double v15;
  double v17;
  double v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t result;
  const char *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint8_t *v25;
  long double v26;
  long double v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  int v38;
  uint64_t v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  float v46;
  float v47;
  __int128 v48;
  float64x2_t v49;
  __int16 v50;
  unint64_t v51;
  uint8_t buf[8];

  v51 = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v3 = (_DWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V3.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q3;
  *(_OWORD *)(a2 + 52) = _Q3;
  *(_OWORD *)(a2 + 68) = _Q3;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  v8 = *(double **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96) - (_QWORD)v8 == 128)
  {
    v10 = *(float64x2_t **)(a1 + 112);
    if (*(_QWORD *)(a1 + 120) - (_QWORD)v10 == 32)
    {
      v13 = *v8;
      v14 = v8[5];
      v15 = sqrt(v8[10] + v8[15]);
      if (v15 >= 0.001 || v15 < 0.0)
        v17 = v15;
      else
        v17 = 0.001;
      v48 = _Q3;
      v49 = *v10;
      if (v17 <= 30.0)
      {
        v27 = v10[1].f64[0];
        v26 = v10[1].f64[1];
        v18 = sqrt(v26 * v26 + v27 * v27);
        if (fabs(v27) + fabs(v26) >= 0.1)
        {
          v28 = atan2(v26, v27) * 57.2957795;
          if (v28 < 0.0)
            v28 = v28 + 360.0;
          v51 = *(_QWORD *)&v28;
          *(double *)(a1 + 240) = v28;
        }
        else
        {
          v51 = *(_QWORD *)(a1 + 240);
        }
      }
      else
      {
        v51 = 0xBFF0000000000000;
        *(_QWORD *)(a1 + 240) = 0xBFF0000000000000;
        v18 = -1.0;
      }
      v29 = sub_1000EBF88(*(_DWORD *)(a1 + 516));
      if ((_DWORD)v29)
      {
        v30 = *(_OWORD *)(a1 + 436);
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 420);
        *(_OWORD *)(a2 + 16) = v30;
        v31 = *(_OWORD *)(a1 + 452);
        v32 = *(_OWORD *)(a1 + 468);
        v33 = *(_OWORD *)(a1 + 500);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 484);
        *(_OWORD *)(a2 + 80) = v33;
        *(_OWORD *)(a2 + 32) = v31;
        *(_OWORD *)(a2 + 48) = v32;
        v34 = *(_OWORD *)(a1 + 516);
        v35 = *(_OWORD *)(a1 + 532);
        v36 = *(_OWORD *)(a1 + 548);
        *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 560);
        *(_OWORD *)(a2 + 112) = v35;
        *(_OWORD *)(a2 + 128) = v36;
        *(_OWORD *)(a2 + 96) = v34;
      }
      else
      {
        v37 = sqrt(v13 + v14);
        v38 = *(_DWORD *)(a1 + 516);
        *(_DWORD *)(a2 + 96) = v38;
        *(_QWORD *)(a2 + 76) = *(_QWORD *)(a1 + 184);
        *(_DWORD *)a2 = *(_DWORD *)(a1 + 420);
        *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 504);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 508);
        *(float64x2_t *)(a2 + 4) = vmulq_f64(v49, (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F5uLL));
        *(_DWORD *)(a2 + 132) = 1;
        *(double *)(a2 + 20) = v37;
        v39 = *(_QWORD *)(a1 + 112);
        v40 = *(double *)(v39 + 16);
        v41 = *(double *)(v39 + 24);
        v42 = *(double **)(a1 + 88);
        v43 = v42[15];
        v44 = v42[10];
        v45 = v42[11];
        *(_QWORD *)buf = 0xBFF0000000000000;
        sub_1000EC348(v40, v41, v44, v43, v45, v29, (double *)&v51, (double *)buf);
        *(_QWORD *)(a2 + 60) = v51;
        *(_QWORD *)(a2 + 68) = *(_QWORD *)buf;
        *(double *)(a2 + 44) = v18;
        *(double *)(a2 + 52) = v17;
        if ((a3 & 1) == 0)
        {
          if (v38 != 4 && v38 != 9)
          {
            *(_OWORD *)(a2 + 44) = v48;
            *(_OWORD *)(a2 + 60) = v48;
          }
          if (*(_DWORD *)(a1 + 516) == 9 && v37 < 200.0)
            *(_QWORD *)(a2 + 20) = 0x4069000000000000;
        }
        v46 = *(float *)(a1 + 588);
        if (v46 > 0.0)
        {
          *(double *)(a2 + 28) = *(float *)(a1 + 584);
          v47 = sqrtf(v46);
          *(double *)(a2 + 36) = v47;
          if (v47 < 1.0)
            *(_QWORD *)(a2 + 36) = 0x3FF0000000000000;
        }
      }
      *v3 = *(_DWORD *)(a1 + 548);
      return 1;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
    }
    v24 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v24)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v50 = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:x is not dimensioned", &v50, 2);
LABEL_27:
      v25 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::getResult(CLDaemonLocation &, BOOL)", "%s\n", v22);
      if (v25 != buf)
        free(v25);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v19 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    v20 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v20)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v50 = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:P is not dimensioned", &v50, 2);
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_1000EBF88(int a1)
{
  char v1;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  v1 = a1 - 1;
  if ((a1 - 1) >= 0xB || ((0x7EFu >> v1) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "unsupported location type,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v9[0] = 67240192;
      v9[1] = a1;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "unsupported location type,%{public}d", v9, 8);
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLKalmanFilter::isLocationTypeNotFiltered(CLLocationType)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
    }
    v6 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed - unsupported location type", "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
    }
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed - unsupported location type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLKalmanFilter.cpp", 3133, "isLocationTypeNotFiltered");
  }
  return (0x617u >> v1) & 1;
}

void sub_1000EC348(double a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7, double *a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (*a7 < 0.0
    || (v8 = fabs(a1), v9 = fabs(a2), v8 < 0.000001) && v9 < 0.000001
    || (v8 >= 0.000001
      ? (v9 >= 0.000001
       ? (v11 = 1.0 / (a2 * a2 / (a1 * a1) + 1.0),
          v10 = v11 / a1 * (-a2 / (a1 * a1) * v11 + -a2 / (a1 * a1) * v11) * a5
              + -a2 / (a1 * a1) * v11 * (-a2 / (a1 * a1) * v11) * a3
              + v11 / a1 * (v11 / a1) * a4)
       : (v10 = 1.0 / a1 * (1.0 / a1) * a4))
      : (v10 = -1.0 / a2 * (-1.0 / a2) * a3),
        v10 <= 0.0 || (v12 = sqrt(v10) * 57.2957795, *a8 = v12, v12 > 60.0)))
  {
    *a7 = -1.0;
    *a8 = -1.0;
  }
}

uint64_t sub_1000EC42C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _DWORD v43[2];
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  double v71;
  __int16 v72;
  uint64_t v73;
  uint8_t buf[4];
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  double v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  double v103;
  __int16 v104;
  uint64_t v105;

  v25 = 0xFFFF;
  v26 = 0;
  v27 = 0;
  v28 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v29 = _Q0;
  v30 = _Q0;
  v31 = _Q0;
  v32 = 0;
  v35 = 0;
  v33 = 0xBFF0000000000000;
  v34 = 0;
  v36 = 0;
  v37 = 0xBFF0000000000000;
  v38 = 0x7FFFFFFF;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v42 = 0;
  v11 = sub_1000EBA50(a1, (uint64_t)&v25, 1);
  if ((_DWORD)v11)
  {
    if ((byte_102307378 & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v43[0]) = 0;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2", v43, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
      byte_102307378 = 1;
    }
    if (*((double *)&v29 + 1) >= 0.0)
      v13 = *((double *)&v29 + 1) * 3.6;
    else
      v13 = *((double *)&v29 + 1);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a1 + 824))
        v15 = 115;
      else
        v15 = 110;
      v16 = *(_DWORD *)(a1 + 516);
      v17 = *(_DWORD *)(a1 + 628);
      *(_DWORD *)buf = 67244035;
      v75 = v15;
      v76 = 2050;
      v77 = *((_QWORD *)&v31 + 1);
      v78 = 1026;
      v79 = v16;
      v80 = 1026;
      v81 = v34;
      v82 = 1026;
      v83 = v17;
      v84 = 2049;
      v85 = v26;
      v86 = 2049;
      v87 = v27;
      v88 = 2049;
      v89 = *((_QWORD *)&v28 + 1);
      v90 = 2050;
      v91 = v13;
      v92 = 2050;
      v93 = *((_QWORD *)&v30 + 1);
      v94 = 2050;
      v95 = v28;
      v96 = 2050;
      v97 = v29;
      v98 = 2050;
      v99 = v30;
      v100 = 2050;
      v101 = v31;
      v102 = 2050;
      v103 = a3;
      v104 = 2082;
      v105 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", buf, 0x92u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      if (*(_BYTE *)(a1 + 824))
        v19 = 115;
      else
        v19 = 110;
      v20 = *(_DWORD *)(a1 + 516);
      v21 = *(_DWORD *)(a1 + 628);
      v43[0] = 67244035;
      v43[1] = v19;
      v44 = 2050;
      v45 = *((_QWORD *)&v31 + 1);
      v46 = 1026;
      v47 = v20;
      v48 = 1026;
      v49 = v34;
      v50 = 1026;
      v51 = v21;
      v52 = 2049;
      v53 = v26;
      v54 = 2049;
      v55 = v27;
      v56 = 2049;
      v57 = *((_QWORD *)&v28 + 1);
      v58 = 2050;
      v59 = v13;
      v60 = 2050;
      v61 = *((_QWORD *)&v30 + 1);
      v62 = 2050;
      v63 = v28;
      v64 = 2050;
      v65 = v29;
      v66 = 2050;
      v67 = v30;
      v68 = 2050;
      v69 = v31;
      v70 = 2050;
      v71 = a3;
      v72 = 2082;
      v73 = a2;
      LODWORD(v24) = 146;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", v43, v24);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
  return v11;
}

BOOL sub_1000EC93C(uint64_t a1, uint64_t *a2, double **a3, unsigned int *a4)
{
  uint64_t v6;
  NSObject *v7;
  _BOOL8 result;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  char *v15;
  double *v16;
  double v17;
  uint64_t i;
  char *v19;
  char *v20;
  _WORD v21[8];
  uint8_t buf[8];
  char *v23;

  if (a2[1] - *a2 != 128)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not dimensioned", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v21[0] = 0;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:P is not dimensioned", v21, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    sub_1000F3860((uint64_t)a2, 0x10uLL);
    return 0;
  }
  if ((char *)a3[1] - (char *)*a3 != 32)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:k is not dimensioned", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v21[0] = 0;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:k is not dimensioned", v21, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    sub_1000F3860((uint64_t)a3, 4uLL);
    return 0;
  }
  v6 = *a4;
  if (v6 < 4)
  {
    sub_1000ECE2C(buf, 0x10uLL);
    v12 = 0;
    v13 = *a3;
    v14 = *a2;
    v15 = *(char **)buf;
    do
    {
      v16 = (double *)&v15[v12];
      *v16 = *v13 * *(double *)(v14 + 32 * v6);
      v16[1] = *v13 * *(double *)(v14 + 8 * ((4 * (_DWORD)v6) | 1u));
      v16[2] = *v13 * *(double *)(v14 + 8 * ((4 * (_DWORD)v6) | 2u));
      v17 = *v13++;
      v16[3] = v17 * *(double *)(v14 + 8 * ((4 * (_DWORD)v6) | 3u));
      v12 += 32;
    }
    while (v12 != 128);
    for (i = 0; i != 128; i += 8)
      *(double *)(v14 + i) = *(double *)(v14 + i) - *(double *)&v15[i];
    v23 = v15;
    operator delete(v15);
    return 1;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v21[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:h_index exceeds bounds", v21, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000ECE2C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1000ECE84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000ECEA0(uint64_t a1, uint64_t *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t result;
  const char *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint8_t buf[1640];

  if (a2[1] - *a2 == 128)
  {
    if (a4[1] - *a4 != 32)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,KF:Pht is not dimensioned", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v22[0]) = 0;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:Pht is not dimensioned", v22, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      sub_1000F3860((uint64_t)a4, 4uLL);
    }
    v10 = *a3;
    if (v10 < 4)
    {
      v18 = *a2;
      v19 = (_QWORD *)*a4;
      *v19 = *(_QWORD *)(*a2 + 8 * v10);
      v19[1] = *(_QWORD *)(v18 + 8 * v10 + 32);
      v19[2] = *(_QWORD *)(v18 + 8 * (v10 + 8));
      v19[3] = *(_QWORD *)(v18 + 8 * (v10 + 12));
      *a5 = v19[v10];
      return 1;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      LOWORD(v22[0]) = 0;
      LODWORD(v21) = 2;
      v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:h_index exceeds bounds", v22, v21, v22[0]);
LABEL_26:
      v17 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)", "%s\n", v14);
      if (v17 != buf)
        free(v17);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }
    v16 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      LOWORD(v22[0]) = 0;
      v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:P is not dimensioned", v22, 2, v22[0]);
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t sub_1000ED2D4(uint64_t a1, double *a2, _QWORD *a3, double *a4, double *a5, double **a6)
{
  NSObject *v6;
  _BOOL4 v7;
  uint64_t result;
  const char *v9;
  NSObject *v11;
  _BOOL4 v12;
  double *v15;
  _BOOL8 v17;
  double *v18;
  uint64_t v19;
  double *v20;
  double v21;
  NSObject *v22;
  _BOOL4 v23;
  NSObject *v24;
  _BOOL4 v25;
  NSObject *v26;
  _BOOL4 v27;
  NSObject *v28;
  _BOOL4 v29;
  uint8_t *v30;
  _QWORD v31[2];
  uint8_t buf[1640];

  if (*a4 == 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
      {
LABEL_8:
        LOWORD(v31[0]) = 0;
        v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:dN == 0", v31, 2, v31[0]);
LABEL_55:
        v30 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::applyInnovation(const double &, const std::vector<double> &, const double &, const double &, std::vector<double> &)", "%s\n", v9);
        if (v30 != buf)
          free(v30);
        return 0;
      }
LABEL_58:
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
      goto LABEL_8;
    }
  }
  else if (*a5 == 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
        goto LABEL_8;
      goto LABEL_58;
    }
  }
  else
  {
    v15 = *a6;
    if ((char *)a6[1] - (char *)*a6 == 32)
    {
      if (a3[1] - *a3 == 32)
      {
        *v15 = *v15 + *(double *)*a3 * *a2 / *a4;
        v17 = sub_1000EDBE8(a1, v15);
        if (v17)
        {
          v18 = *a6 + 1;
          *v18 = *(double *)(*a3 + 8) * *a2 / *a5 + *v18;
          if ((sub_1000ED990(v17, v18) & 1) != 0)
          {
            v19 = *a3;
            v20 = *a6;
            v21 = (*a6)[3];
            v20[2] = *(double *)(*a3 + 16) * *a2 + (*a6)[2];
            v20[3] = v21 + *(double *)(v19 + 24) * *a2;
            return 1;
          }
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          v28 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
          }
          v29 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v29)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            LOWORD(v31[0]) = 0;
            v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLongitude failed", v31, 2, v31[0]);
            goto LABEL_55;
          }
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          v26 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
          }
          v27 = sub_1001BFF7C(115, 0);
          result = 0;
          if (v27)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            LOWORD(v31[0]) = 0;
            v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLatitude failed", v31, 2, v31[0]);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v24 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "KF:k is not dimensioned, innovation not applied", buf, 2u);
        }
        v25 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v25)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v31[0]) = 0;
          v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:k is not dimensioned, innovation not applied", v31, 2, v31[0]);
          goto LABEL_55;
        }
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned, innovation not applied", buf, 2u);
      }
      v23 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v23)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v31[0]) = 0;
        v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:x is not dimensioned, innovation not applied", v31, 2, v31[0]);
        goto LABEL_55;
      }
    }
  }
  return result;
}

uint64_t sub_1000ED990(uint64_t a1, double *a2)
{
  double v3;
  unsigned int v4;
  unsigned int v6;
  _BOOL4 v7;
  NSObject *v10;
  double v11;
  _BOOL4 v12;
  uint64_t result;
  double v14;
  char *v15;
  int v16;
  double v17;
  uint8_t buf[4];
  double v19;

  v3 = *a2;
  if (*a2 >= -3.14159265 && v3 <= 3.14159265)
    return 1;
  if (v3 < -3.14159265)
  {
    v4 = 0;
    do
      v3 = v3 + 6.28318531;
    while (v3 < -3.14159265 && v4++ < 0x13);
    *a2 = v3;
  }
  if (v3 <= 3.14159265)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v3 = v3 + -6.28318531;
      v7 = v3 > 3.14159265;
    }
    while (v3 > 3.14159265 && v6++ < 0x13);
    *a2 = v3;
  }
  if (v3 >= -3.14159265 && !v7)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    v11 = *a2;
    *(_DWORD *)buf = 134283521;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "KF:lonRads,%{private}.7f,out of bounds", buf, 0xCu);
  }
  v12 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v14 = *a2;
    v16 = 134283521;
    v17 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:lonRads,%{private}.7f,out of bounds", &v16, 12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::boundLongitude(double &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
    return 0;
  }
  return result;
}

BOOL sub_1000EDBE8(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  _BOOL8 v5;
  NSObject *v6;
  double v7;
  double v9;
  char *v10;
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  v3 = *a2;
  v4 = 3.14159265 - *a2;
  if (*a2 > 1.57079633 || (v4 = *a2, *a2 < -1.57079633))
  {
    v3 = -3.14159265 - v4;
    if (v4 >= -1.57079633)
      v3 = v4;
    *a2 = v3;
  }
  v5 = v3 >= -1.57079633 && v3 <= 1.57079633;
  if (!v5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v7 = *a2;
      *(_DWORD *)buf = 134283521;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "KF:latRads,%{private}.7f,out of bounds", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v9 = *a2;
      v11 = 134283521;
      v12 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:latRads,%{private}.7f,out of bounds", &v11, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::boundLatitude(double &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return v5;
}

double sub_1000EDE04(uint64_t a1)
{
  double *v2;
  double result;
  NSObject *v4;
  __int128 v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(double **)(a1 + 88);
  if (*v2 <= 0.0 || v2[5] <= 0.0 || v2[10] <= 0.0 || (result = v2[15], result <= 0.0))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "KF:diagonal element of P < 0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:diagonal element of P < 0", v7, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::sanityTestP()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    sub_100C25CCC(a1);
    v5 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
    *(_BYTE *)(a1 + 248) = 0;
    result = 0.0;
    *(_QWORD *)(a1 + 624) = 0;
  }
  return result;
}

void sub_1000EDFFC(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _OWORD *v6;
  NSObject *v12;
  __n128 v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  float v21;
  float v22;
  NSObject *v23;
  NSObject *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  NSObject *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t i;
  __int128 v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  NSObject *v43;
  char *v44;
  NSObject *v45;
  _BOOL4 v46;
  float v47;
  double v48;
  double v50;
  double v51;
  float v52;
  float v53;
  double v54;
  double v55;
  NSObject *v56;
  NSObject *v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  double v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  _DWORD *v85;
  uint64_t v86;
  __int128 __dst;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[23];
  __int16 v96;
  unint64_t v97;
  int v98;
  double v99[40];
  double v100;
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[25];
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD v124[3];
  double v125;
  _QWORD v126[3];
  double v127;
  __int128 v128;
  void *v129[2];
  uint64_t v130;
  double v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  __int128 v136;
  void *v137;
  void *v138;
  _OWORD *v139;
  uint64_t v140[3];
  _BYTE v141[10];
  uint64_t v142;
  __int128 v143;
  __int16 v144;
  uint64_t v145;
  _BYTE buf[24];
  _BYTE __p[34];
  __int16 v148;
  uint64_t v149;

  v6 = operator new(0x20uLL);
  v139 = v6 + 2;
  *v6 = xmmword_101C39B30;
  v6[1] = unk_101C39B40;
  v137 = v6;
  v138 = v6 + 2;
  v96 = 0;
  __dst = xmmword_101BAFEE0;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  memset(v95, 0, sizeof(v95));
  v97 = 0xBFF0000000000000;
  v98 = 0;
  memset(&v99[1], 0, 312);
  v99[0] = -1.0;
  v100 = -1.0;
  v101 = 0;
  v102 = 0xBFF0000000000000;
  v113 = 0;
  v114 = 0;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  memset(v112, 0, sizeof(v112));
  v115 = 0xBFF0000000000000;
  v117 = 0;
  v116 = 0;
  v118 = 0x80000000800000;
  v120 = 0;
  v119 = 0;
  v121 = xmmword_101BB1EE0;
  v122 = 0x80000000800000;
  v123 = 0xBFF0000000000000;
  memset(v124, 0, sizeof(v124));
  v125 = -1.0;
  memset(v126, 0, sizeof(v126));
  v127 = -1.0;
  v128 = 0u;
  *(_OWORD *)v129 = 0u;
  v130 = 0;
  v131 = -1.0;
  v132 = 0x600000006;
  v134 = 0;
  v133 = 0;
  v135 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v136 = _Q0;
  sub_1000DC9A4(*(_QWORD *)a1, (uint64_t)&v137, (char *)&__dst, a3);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102198A80);
  v12 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219520;
    *(double *)&buf[4] = a3;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v99[0] != -1.0;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = LODWORD(v99[4]);
    *(_WORD *)__p = 2048;
    *(double *)&__p[2] = v99[0];
    *(_WORD *)&__p[10] = 1024;
    *(_DWORD *)&__p[12] = *((double *)&__dst + 1) != -1.0;
    *(_WORD *)&__p[16] = 1024;
    *(_DWORD *)&__p[18] = DWORD2(v88);
    *(_WORD *)&__p[22] = 2048;
    *(_QWORD *)&__p[24] = *((_QWORD *)&__dst + 1);
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Steps/activity sync, updateTime, %f, hasSteps, %d, stepCount, %d, stepStartTime, %f, hasActivity, %d, activityType, %d, activityStartTime, %f", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    LODWORD(v140[0]) = 134219520;
    *(double *)((char *)v140 + 4) = a3;
    WORD2(v140[1]) = 1024;
    *(_DWORD *)((char *)&v140[1] + 6) = v99[0] != -1.0;
    WORD1(v140[2]) = 1024;
    HIDWORD(v140[2]) = LODWORD(v99[4]);
    *(_WORD *)v141 = 2048;
    *(double *)&v141[2] = v99[0];
    LOWORD(v142) = 1024;
    *(_DWORD *)((char *)&v142 + 2) = *((double *)&__dst + 1) != -1.0;
    HIWORD(v142) = 1024;
    LODWORD(v143) = DWORD2(v88);
    WORD2(v143) = 2048;
    *(_QWORD *)((char *)&v143 + 6) = *((_QWORD *)&__dst + 1);
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "Steps/activity sync, updateTime, %f, hasSteps, %d, stepCount, %d, stepStartTime, %f, hasActivity, %d, activityType, %d, activityStartTime, %f", COERCE_DOUBLE(v140), 56, (_DWORD)v82, *((double *)&v82 + 1), v83, (_DWORD)v84, *(double *)&v85);
    sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  v13.n128_f64[0] = v100;
  if (v100 != -1.0)
  {
    sub_100121034(a1 + 3064, *(float *)&v101, *((float *)&v101 + 1));
    sub_1002318F8((float *)(a1 + 3136), *(float *)&v101, *((float *)&v101 + 1));
  }
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)a1 + 24) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 24), v13);
  sub_1000F1C08(v14, &v84, *(double *)(a1 + 3192), a3);
  v15 = v84;
  v16 = v85;
  if (v84 == v85)
  {
    v19 = 0;
    v17 = 0;
  }
  else
  {
    v17 = *(v85 - 2);
    do
    {
      *(_OWORD *)buf = *v15;
      sub_1000EFEC4(a1 + 3064, (uint64_t)buf, a3);
      v18 = sub_1000F01C0((_QWORD *)(a1 + 3136), (double *)buf, a3);
      ++v15;
    }
    while (v15 != v16);
    v19 = v18;
  }
  sub_1000F09B4((_QWORD *)(a1 + 2960), *(double *)(a1 + 3200), *(double *)(a1 + 3456), a3);
  v20 = &qword_1022A0000;
  if (v99[0] != -1.0)
    memcpy((void *)(a1 + 3200), v99, 0x140uLL);
  v21 = sub_1000F0414(a1 + 3064, a3);
  v22 = sub_1000F0AD0(a1 + 2960, a3);
  sub_1000DFB04(a1 + 8, (uint64_t)&v82, a3);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102198A80);
  v23 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v22;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)__p = v82;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CoreMotion model estimates, alsOutdoorProb, %f, wifiIndoorProb, %f, gpsOutdoorProb, %f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    LODWORD(v140[0]) = 134218496;
    *(double *)((char *)v140 + 4) = v21;
    WORD2(v140[1]) = 2048;
    *(double *)((char *)&v140[1] + 6) = v22;
    HIWORD(v140[2]) = 2048;
    *(_QWORD *)v141 = v82;
    LODWORD(v80) = 32;
    v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "CoreMotion model estimates, alsOutdoorProb, %f, wifiIndoorProb, %f, gpsOutdoorProb, %f", COERCE_DOUBLE(v140), v80, *(double *)&v82);
    sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v40);
    if (v40 != buf)
      free(v40);
  }
  if (!*(_BYTE *)(a1 + 3760))
  {
    sub_1014204EC(a1 + 3520, a3);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v24 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLOutdoorLabeler,CLOutdoorEstimator,Init,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorLabeler,CLOutdoorEstimator,Init,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v41);
      if (v41 != buf)
        free(v41);
    }
  }
  v25 = *(double *)&v82 >= 0.0;
  if (*(double *)&v82 > 1.0)
    v25 = 0;
  HIDWORD(v81) = v25;
  v26 = v22 <= 1.0 && v22 >= 0.0;
  v27 = v21 <= 1.0 && v21 >= 0.0;
  if (!sub_1000F23C8(a1 + 3520, a3))
    goto LABEL_134;
  if (*((double *)&__dst + 1) == -1.0)
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v28 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoMotionActivity,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v76 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoMotionActivity,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v76);
      if (v76 != buf)
        free(v76);
    }
  }
  else
  {
    sub_1002250D4(a1 + 3520, SDWORD2(v88), a3);
  }
  if (v127 != -1.0)
  {
    v29 = v26;
    v30 = v27;
    memset(v140, 0, sizeof(v140));
    v31 = (_QWORD *)(*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)a1 + 24) + 80))(*(_QWORD *)(*(_QWORD *)a1 + 24), v127);
    sub_100FF71C4(v31, v140, *(double *)(a1 + 3192), a3);
    v32 = v140[0];
    for (i = v140[1]; v32 != i; v32 += 48)
    {
      v34 = *(_OWORD *)v32;
      *(_QWORD *)&buf[16] = *(_QWORD *)(v32 + 16);
      *(_OWORD *)buf = v34;
      memset(__p, 0, 24);
      sub_100D03CC8(__p, *(const void **)(v32 + 24), *(_QWORD *)(v32 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v32 + 32) - *(_QWORD *)(v32 + 24)) >> 2));
      sub_10127ADB4(a1 + 3520, (uint64_t)buf, a3);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
    }
    *(_QWORD *)buf = v140;
    sub_100FF7328((void ***)buf);
    v20 = &qword_1022A0000;
LABEL_48:
    v27 = v30;
    v26 = v29;
    goto LABEL_54;
  }
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102198A80);
  v35 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoGnssLeechLocation,currentTime,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    v29 = v26;
    v30 = v27;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    LODWORD(v140[0]) = 134217984;
    *(double *)((char *)v140 + 4) = a3;
    v77 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoGnssLeechLocation,currentTime,%f", COERCE_DOUBLE(v140));
    sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v77);
    if (v77 != buf)
      free(v77);
    goto LABEL_48;
  }
LABEL_54:
  if (v125 == -1.0)
  {
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v36 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoGnssAvailability,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v20[50] != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoGnssAvailability,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v78);
      if (v78 != buf)
        free(v78);
    }
  }
  else
  {
    sub_10022488C(a1 + 3520, (uint64_t)v126, a3);
  }
  if (v131 == -1.0)
  {
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v37 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_OutdoorNoMapMatchingRouteHint,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v20[50] != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v79 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_OutdoorNoMapMatchingRouteHint,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v79);
      if (v79 != buf)
        free(v79);
    }
  }
  else
  {
    sub_10127B304(a1 + 3520, &v132, a3);
  }
  if (HIDWORD(v81))
  {
    *(_OWORD *)&buf[8] = v82;
    *(_QWORD *)buf = 0;
    *(_QWORD *)__p = v83;
    sub_100224B54(a1 + 3520, (__int128 *)buf, a3);
  }
  else
  {
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v38 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMGpsModelOutput,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v20[50] != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoCMGpsModelOutput,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v42);
      if (v42 != buf)
        free(v42);
      if (v26)
        goto LABEL_76;
      goto LABEL_94;
    }
  }
  if (v26)
  {
LABEL_76:
    *(_QWORD *)buf = 0;
    *(double *)&buf[8] = v22;
    sub_10127B6C0(a1 + 3520, (__int128 *)buf, a3);
    goto LABEL_99;
  }
LABEL_94:
  if (v20[50] != -1)
    dispatch_once(&qword_1022A0190, &stru_102198A80);
  v43 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMWiFiModelOutput,currentTime,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    LODWORD(v140[0]) = 134217984;
    *(double *)((char *)v140 + 4) = a3;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoCMWiFiModelOutput,currentTime,%f", COERCE_DOUBLE(v140));
    sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v44);
    if (v44 != buf)
      free(v44);
    if (v27)
      goto LABEL_100;
LABEL_106:
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v45 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoCMALSModelOutput,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v20[50] != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v75 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoCMALSModelOutput,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v75);
      if (v75 != buf)
        free(v75);
    }
    goto LABEL_111;
  }
LABEL_99:
  if (!v27)
    goto LABEL_106;
LABEL_100:
  *(_QWORD *)buf = 0;
  *(double *)&buf[8] = v21;
  sub_100224E14(a1 + 3520, (__int128 *)buf, a3);
LABEL_111:
  v46 = sub_1000EF908(a1 + 3136);
  v47 = *(float *)(a1 + 3144);
  v48 = sub_1000F3DD8(a1 + 3136);
  sub_100197040();
  if (sub_100195F08())
  {
    if ((unint64_t)(v19 - 1) >= 3)
      goto LABEL_129;
  }
  else if (v19 != 3)
  {
LABEL_129:
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v56 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_NoAlsEvidence,currentTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v20[50] != -1)
        dispatch_once(&qword_1022A0190, &stru_102198A80);
      LODWORD(v140[0]) = 134217984;
      *(double *)((char *)v140 + 4) = a3;
      v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_NoAlsEvidence,currentTime,%f", COERCE_DOUBLE(v140));
      sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v74);
      if (v74 != buf)
        free(v74);
    }
    goto LABEL_134;
  }
  if (v47 <= 0.0 || !v46)
    goto LABEL_129;
  v50 = 750.0;
  if (v48 <= 750.0)
    goto LABEL_129;
  *(_DWORD *)&buf[8] = 0;
  v51 = 15000.0;
  if (v48 <= 15000.0)
    v51 = v48;
  if (v48 >= 750.0)
    v50 = v51;
  v52 = *(float *)(a1 + 3144);
  v53 = 90.0;
  if (v52 < 90.0)
    v53 = *(float *)(a1 + 3144);
  v54 = v53;
  _NF = v52 < 0.0;
  v55 = 0.0;
  if (!_NF)
    v55 = v54;
  *(double *)&buf[16] = v50;
  *(double *)__p = v55;
  __p[8] = v46;
  *(_QWORD *)&__p[16] = v19;
  *(double *)buf = a3;
  sub_10127B980(a1 + 3520, (uint64_t)buf, a3);
LABEL_134:
  *(double *)a2 = a3;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = v19;
  *(_BYTE *)(a2 + 48) = sub_1000EF908(a1 + 3136);
  *(_DWORD *)(a2 + 52) = v17;
  sub_1000F1BE8(a1 + 3520, a2);
  if (v20[50] != -1)
    dispatch_once(&qword_1022A0190, &stru_102198A80);
  v57 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    v58 = *(double *)a2;
    v59 = *(_QWORD *)(a2 + 8);
    v60 = *(_QWORD *)(a2 + 16);
    v61 = *(_QWORD *)(a2 + 24);
    v62 = *(unsigned __int8 *)(a2 + 48);
    v63 = *(_QWORD *)(a2 + 32);
    v64 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)buf = 134219521;
    *(double *)&buf[4] = v58;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v59;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)__p = v60;
    *(_WORD *)&__p[8] = 2049;
    *(_QWORD *)&__p[10] = v61;
    *(_WORD *)&__p[18] = 2049;
    *(_QWORD *)&__p[20] = v63;
    *(_WORD *)&__p[28] = 1025;
    *(_DWORD *)&__p[30] = v62;
    v148 = 2049;
    v149 = v64;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "CLOutdoorEstimator_HMM Estimate,startTime,%f,mctTimestampSec,%{private}f,type, %{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v20[50] != -1)
      dispatch_once(&qword_1022A0190, &stru_102198A80);
    v66 = *(double *)a2;
    v67 = *(_QWORD *)(a2 + 8);
    v68 = *(_QWORD *)(a2 + 16);
    v69 = *(_QWORD *)(a2 + 24);
    v70 = *(unsigned __int8 *)(a2 + 48);
    v71 = *(_QWORD *)(a2 + 32);
    v72 = *(_QWORD *)(a2 + 40);
    LODWORD(v140[0]) = 134219521;
    *(double *)((char *)v140 + 4) = v66;
    WORD2(v140[1]) = 2049;
    *(uint64_t *)((char *)&v140[1] + 6) = v67;
    HIWORD(v140[2]) = 2049;
    *(_QWORD *)v141 = v68;
    *(_WORD *)&v141[8] = 2049;
    v142 = v69;
    LOWORD(v143) = 2049;
    *(_QWORD *)((char *)&v143 + 2) = v71;
    WORD5(v143) = 1025;
    HIDWORD(v143) = v70;
    v144 = 2049;
    v145 = v72;
    LODWORD(v81) = 68;
    v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "CLOutdoorEstimator_HMM Estimate,startTime,%f,mctTimestampSec,%{private}f,type, %{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld", v140, v81);
    sub_100512490("Generic", 1, 0, 2, "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)", "%s\n", v73);
    if (v73 != buf)
      free(v73);
  }
  v65 = *(int *)(a1 + 3788);
  if ((_DWORD)v65 != 3)
    *(_QWORD *)(a2 + 16) = v65;
  *(double *)(a1 + 3192) = a3;
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v129[0])
  {
    v129[1] = v129[0];
    operator delete(v129[0]);
  }
  *(_QWORD *)buf = v124;
  sub_100279AA4((void ***)buf);
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
}

void sub_1000EF834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  va_list va;

  va_start(va, a9);
  if (__p)
    operator delete(__p);
  sub_100AABE10((uint64_t)va);
  v10 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1000EF908(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return *(_BYTE *)(a1 + 49) != 0;
  else
    return *(float *)(a1 + 8) > 0.0;
}

uint64_t sub_1000EF930(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  double v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  _BOOL4 v62;
  uint8_t buf[4];
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  _BOOL4 v80;

  v1 = 0;
  v2 = *(float *)(a1 + 8);
  v3 = (float *)&unk_101C3DFC4;
  while (*(float *)&dword_101C3DF88[v1] >= v2 || *(float *)&dword_101C3DF88[v1 + 1] < v2)
  {
    v1 += 5;
    if (v1 == 20)
      goto LABEL_7;
  }
  v3 = (float *)&dword_101C3DF88[v1];
LABEL_7:
  v5 = v3[2];
  v4 = v3[3];
  v6 = v3[4];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(v7 - 16);
  v9 = *(float *)(v7 - 8);
  LOBYTE(v7) = atomic_load((unsigned __int8 *)&qword_10230C360);
  if ((v7 & 1) == 0)
  {
    v27 = a1;
    v41 = v6;
    v42 = v4;
    v38 = v5;
    v28 = __cxa_guard_acquire(&qword_10230C360);
    v5 = v38;
    v6 = v41;
    v4 = v42;
    v29 = v28;
    a1 = v27;
    if (v29)
    {
      *(_DWORD *)buf = -1082130432;
      sub_1018C2254((unsigned __int8 *)&byte_10230C350, "DaylightLowConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10230C360);
      a1 = v27;
      v6 = v41;
      v4 = v42;
      v5 = v38;
    }
  }
  v10 = atomic_load((unsigned __int8 *)&qword_10230C378);
  if ((v10 & 1) == 0)
  {
    v30 = a1;
    v41 = v6;
    v43 = v4;
    v39 = v5;
    v31 = __cxa_guard_acquire(&qword_10230C378);
    v5 = v39;
    v6 = v41;
    v4 = v43;
    v32 = v31;
    a1 = v30;
    if (v32)
    {
      *(_DWORD *)buf = -1082130432;
      sub_1018C2254((unsigned __int8 *)&byte_10230C368, "DaylightMedConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10230C378);
      a1 = v30;
      v6 = v41;
      v4 = v43;
      v5 = v39;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_10230C390);
  if ((v11 & 1) == 0)
  {
    v33 = a1;
    v41 = v6;
    v44 = v4;
    v40 = v5;
    v34 = __cxa_guard_acquire(&qword_10230C390);
    v5 = v40;
    v6 = v41;
    v4 = v44;
    v35 = v34;
    a1 = v33;
    if (v35)
    {
      *(_DWORD *)buf = -1082130432;
      sub_1018C2254((unsigned __int8 *)&byte_10230C380, "DaylightHighConfLuxThresholdOverride", buf, 0);
      __cxa_guard_release(&qword_10230C390);
      a1 = v33;
      v6 = v41;
      v4 = v44;
      v5 = v40;
    }
  }
  if (byte_10230C350)
    v5 = *(float *)&dword_10230C354;
  if (byte_10230C368)
    v4 = *(float *)&dword_10230C36C;
  if (byte_10230C380)
    v6 = *(float *)&dword_10230C384;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  if (v12 == v13)
  {
    v16 = 0;
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(float *)(v12 + 8);
      if (v17 > v5)
      {
        ++v16;
        v18 = v17 <= v6 ? v14 : v14 + 1;
        if (v17 > v4)
        {
          ++v15;
          v14 = v18;
        }
      }
      v12 += 16;
    }
    while (v12 != v13);
    if (v14 > 1)
    {
      v19 = 3;
      goto LABEL_31;
    }
    if (v15 > 9)
    {
      v19 = 2;
      goto LABEL_31;
    }
  }
  v19 = v16 > 29;
LABEL_31:
  if (*(_BYTE *)(a1 + 48))
    v20 = *(_BYTE *)(a1 + 49) != 0;
  else
    v20 = *(float *)(a1 + 8) > 0.0;
  if (v20)
    v21 = v19;
  else
    v21 = 0;
  if (v2 == -9999.0)
    v22 = v19;
  else
    v22 = v21;
  if (v9 <= v4)
    v23 = 0;
  else
    v23 = v22;
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10219E3F0);
  v24 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134220032;
    v64 = v9;
    v65 = 2048;
    v66 = v2;
    v67 = 1024;
    v68 = v16;
    v69 = 1024;
    v70 = v15;
    v71 = 1024;
    v72 = v14;
    v73 = 2048;
    v74 = v22;
    v75 = 2048;
    v76 = v23;
    v77 = 2048;
    v78 = v8;
    v79 = 1024;
    v80 = v20;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "ALSDaylightDetectorEstimate,lux,%f,sunElevation,%f,lowCnt,%d,medCnt,%d,highCnt,%d,conf,%ld,confFilt,%ld,startTime,%f, isAstronomicalDaytime, %d", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10219E3F0);
    v45 = 134220032;
    v46 = v9;
    v47 = 2048;
    v48 = v2;
    v49 = 1024;
    v50 = v16;
    v51 = 1024;
    v52 = v15;
    v53 = 1024;
    v54 = v14;
    v55 = 2048;
    v56 = v22;
    v57 = 2048;
    v58 = v23;
    v59 = 2048;
    v60 = v8;
    v61 = 1024;
    v62 = v20;
    LODWORD(v36) = 76;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "ALSDaylightDetectorEstimate,lux,%f,sunElevation,%f,lowCnt,%d,medCnt,%d,highCnt,%d,conf,%ld,confFilt,%ld,startTime,%f, isAstronomicalDaytime, %d", COERCE_DOUBLE(&v45), v36, v37, LODWORD(v41));
    sub_100512490("Generic", 1, 0, 2, "CMIndoorOutdoorConfidence CLALSDaylightDetector::estimateIsDaylight() const", "%s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
  return v23;
}

void sub_1000EFE84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230C390);
  _Unwind_Resume(a1);
}

void sub_1000EFEC4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;

  v5 = a1;
  sub_1000F02D8(a1 + 48, *(double *)a2);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_OWORD **)(v5 + 32);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD *)(v5 + 24);
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_100259694();
    v12 = v6 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_10028E224(v5 + 40, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v8 = v15 + 16;
    v18 = *(char **)(v5 + 24);
    v17 = *(char **)(v5 + 32);
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = *(char **)(v5 + 24);
    }
    *(_QWORD *)(v5 + 24) = v15;
    *(_QWORD *)(v5 + 32) = v8;
    *(_QWORD *)(v5 + 40) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    v8 = v7 + 1;
  }
  *(_QWORD *)(v5 + 32) = v8;
  sub_1000F0800(v5, a3);
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_1021523D8);
  v19 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
  {
    v20 = v5;
    if (*(char *)(v5 + 23) < 0)
      v20 = *(_QWORD *)v5;
    v21 = *(float *)(a2 + 8);
    v22 = *(double *)a2;
    *(_DWORD *)buf = 136315650;
    v33 = v20;
    v34 = 2050;
    v35 = v21;
    v36 = 2050;
    v37 = v22;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "IndoorOutdoor,ALSScan,context,%s,lux,%{public}.0f,t,%{public}f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_1021523D8);
    if (*(char *)(v5 + 23) < 0)
      v5 = *(_QWORD *)v5;
    v23 = *(float *)(a2 + 8);
    v24 = *(double *)a2;
    v26 = 136315650;
    v27 = v5;
    v28 = 2050;
    v29 = v23;
    v30 = 2050;
    v31 = v24;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor,ALSScan,context,%s,lux,%{public}.0f,t,%{public}f", &v26, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLALSIndoorOutdoorDetector::feedALSScanResult(const CLAmbientLightSensor_Type::CLALSLuxResult &, CFAbsoluteTime)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
}

uint64_t sub_1000F01C0(_QWORD *a1, double *a2, double a3)
{
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  sub_1000F02D8((uint64_t)a1, *a2);
  v6 = a1[5];
  v7 = (_OWORD *)a1[4];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[3];
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_100259694();
    v12 = v6 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_10028E224((uint64_t)(a1 + 5), v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v8 = v15 + 16;
    v18 = (char *)a1[3];
    v17 = (char *)a1[4];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)a1[3];
    }
    a1[3] = v15;
    a1[4] = v8;
    a1[5] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = *(_OWORD *)a2;
    v8 = v7 + 1;
  }
  a1[4] = v8;
  sub_1000F0354((uint64_t)a1, a3);
  return sub_1000EF930((uint64_t)a1);
}

void sub_1000F02D8(uint64_t a1, double a2)
{
  float v4;

  if (*(float *)a1 != -9999.0)
  {
    v4 = *(float *)(a1 + 4);
    if (v4 != -9999.0 && (vabdd_f64(a2, *(double *)(a1 + 16)) > 300.0 || *(float *)(a1 + 8) == -9999.0))
    {
      *(float *)(a1 + 8) = sub_1000F1DBC(a2, *(float *)a1, v4);
      *(double *)(a1 + 16) = a2;
    }
  }
}

uint64_t sub_1000F0354(uint64_t result, double a2)
{
  double *v2;
  double *v3;
  double *v4;

  v3 = *(double **)(result + 24);
  v2 = *(double **)(result + 32);
  if (v3 != v2)
  {
    while (a2 - *v3 <= 150.0)
    {
      v3 += 2;
      if (v3 == v2)
        return result;
    }
    if (v3 != v2)
    {
      v4 = v3 + 2;
      if (v3 + 2 != v2)
      {
        do
        {
          if (a2 - *v4 <= 150.0)
          {
            *(_OWORD *)v3 = *(_OWORD *)v4;
            v3 += 2;
          }
          v4 += 2;
        }
        while (v4 != v2);
        v2 = *(double **)(result + 32);
      }
    }
    if (v3 != v2)
      *(_QWORD *)(result + 32) = v3;
  }
  return result;
}

float sub_1000F0414(uint64_t a1, double a2)
{
  unint64_t v3;
  float v4;
  int v5;
  int v6;
  unint64_t v7;
  float v8;
  float v9;
  float v12;
  float v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  _BOOL4 v17;
  uint64_t v19;
  double v20;
  _BOOL4 v21;
  char *v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;
  __int16 v37;
  double v38;
  __int16 v39;
  _BOOL4 v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  _BOOL4 v56;
  float v57;
  float v58;

  v3 = sub_1000F0754(a1, a2);
  v4 = *(float *)&v3;
  v6 = v5;
  v7 = HIDWORD(v3);
  v24 = 0xBA4F9E383FC07C8DLL;
  v23 = HIDWORD(v3);
  sub_1000F08C0((uint64_t)&v23, &v57, (int *)&v24, 2, 1);
  v8 = v58;
  v9 = *(float *)(a1 + 56);
  if (v6 <= 6 || v9 <= 15.0 || v9 == -9999.0)
    v12 = -1.0;
  else
    v12 = v58;
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_1021523D8);
  v13 = v4;
  v14 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
  {
    v15 = a1;
    if (*(char *)(a1 + 23) < 0)
      v15 = *(_QWORD *)a1;
    v16 = *(float *)(a1 + 56);
    v17 = *(float *)(a1 + 48) != -9999.0 && *(float *)(a1 + 52) != -9999.0;
    *(_DWORD *)buf = 136316930;
    v42 = v15;
    v43 = 2050;
    v44 = v12;
    v45 = 2050;
    v46 = v8;
    v47 = 2050;
    v48 = *(float *)&v7;
    v49 = 2050;
    v50 = v13;
    v51 = 1026;
    v52 = v6;
    v53 = 2050;
    v54 = v16;
    v55 = 1026;
    v56 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "IndoorOutdoor,ALSResult,context,%s,outputProb,%{public}.2f,rawProb,%{public}.2f,meanLux,%{public}.2f,stdLux,%{public}.2f,n,%{public}d,elevation,%{public}.2f,hasLatLon,%{public}d", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_1021523D8);
    v19 = a1;
    if (*(char *)(a1 + 23) < 0)
      v19 = *(_QWORD *)a1;
    v20 = *(float *)(a1 + 56);
    v21 = *(float *)(a1 + 48) != -9999.0 && *(float *)(a1 + 52) != -9999.0;
    v25 = 136316930;
    v26 = v19;
    v27 = 2050;
    v28 = v12;
    v29 = 2050;
    v30 = v8;
    v31 = 2050;
    v32 = *(float *)&v7;
    v33 = 2050;
    v34 = v13;
    v35 = 1026;
    v36 = v6;
    v37 = 2050;
    v38 = v20;
    v39 = 1026;
    v40 = v21;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor,ALSResult,context,%s,outputProb,%{public}.2f,rawProb,%{public}.2f,meanLux,%{public}.2f,stdLux,%{public}.2f,n,%{public}d,elevation,%{public}.2f,hasLatLon,%{public}d", &v25, 74);
    sub_100512490("Generic", 1, 0, 2, "float CLALSIndoorOutdoorDetector::computeOutdoorProbability(CFAbsoluteTime)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  return v12;
}

unint64_t sub_1000F0754(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  unint64_t v10;
  float v11;

  sub_1000F0800(a1, a2);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == v4)
  {
    v10 = 0;
    v11 = 0.0;
  }
  else
  {
    v5 = 0.0;
    v6 = -1;
    v7 = 0.0;
    do
    {
      v8 = *(float *)(v3 + 8);
      v9 = v8 - v7;
      v7 = v7 + (float)((float)(v8 - v7) / (float)(v6 + 2));
      v5 = v5 + (float)(v9 * (float)(v8 - v7));
      v3 += 16;
      ++v6;
    }
    while (v3 != v4);
    v10 = (unint64_t)LODWORD(v7) << 32;
    if (v6)
      v11 = v5 / (float)v6;
    else
      v11 = 0.0;
  }
  return v10 | COERCE_UNSIGNED_INT(sqrtf(v11));
}

uint64_t sub_1000F0800(uint64_t result, double a2)
{
  double *v2;
  double *v3;
  double *v4;

  v3 = *(double **)(result + 24);
  v2 = *(double **)(result + 32);
  if (v3 != v2)
  {
    while (vabdd_f64(a2, *v3) <= 150.0)
    {
      v3 += 2;
      if (v3 == v2)
        return result;
    }
    if (v3 != v2)
    {
      v4 = v3 + 2;
      if (v3 + 2 != v2)
      {
        do
        {
          if (vabdd_f64(a2, *v4) <= 150.0)
          {
            *(_OWORD *)v3 = *(_OWORD *)v4;
            v3 += 2;
          }
          v4 += 2;
        }
        while (v4 != v2);
        v2 = *(double **)(result + 32);
      }
    }
    if (v3 != v2)
      *(_QWORD *)(result + 32) = v3;
  }
  return result;
}

void sub_1000F08C0(uint64_t a1, float *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  float *v6;
  uint64_t v7;
  int *v8;
  float *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;

  v5 = a4;
  v6 = a2;
  v7 = a4 - 1;
  if (a4 != 1)
  {
    v8 = a3;
    v9 = a2;
    v10 = a4 - 1;
    do
    {
      v11 = *v8++;
      *(_DWORD *)v9++ = v11;
      --v10;
    }
    while (v10);
  }
  if (a5)
  {
    v12 = 0;
    do
    {
      if (a4 == 1)
      {
        v13 = v12 + 1;
      }
      else
      {
        v13 = v12 + 1;
        v14 = (float *)((char *)a3 + 4 * v7 * (v12 + 1));
        v15 = a2;
        v16 = a4 - 1;
        do
        {
          v17 = *v14++;
          *v15 = *v15 + (float)(*(float *)(a1 + 4 * v12) * v17);
          ++v15;
          --v16;
        }
        while (v16);
      }
      v12 = v13;
    }
    while (v13 != a5);
  }
  a2[v7] = 1.0;
  if (a4 == 1)
  {
    v19 = 1.0;
    do
    {
LABEL_18:
      *v6 = *v6 / v19;
      ++v6;
      --v5;
    }
    while (v5);
    return;
  }
  v18 = 0;
  v19 = 1.0;
  do
  {
    v20 = expf(v6[v18]);
    v6[v18] = v20;
    v19 = v19 + v20;
    ++v18;
  }
  while (v7 != v18);
  if (v5)
    goto LABEL_18;
}

void sub_1000F09B4(_QWORD *a1, double a2, double a3, double a4)
{
  double *v7;
  double *v8;
  double v9;
  double v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  char *v19;

  sub_1000F0E14(a1, a4);
  v7 = (double *)a1[9];
  v8 = (double *)a1[10];
  if (v7 == v8)
    v9 = 0.0;
  else
    v9 = *(v8 - 1);
  v10 = v9 + a3;
  v11 = a1[11];
  if ((unint64_t)v8 >= v11)
  {
    v13 = ((char *)v8 - (char *)v7) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_100259694();
    v15 = v11 - (_QWORD)v7;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_10028E224((uint64_t)(a1 + 11), v16);
      v7 = (double *)a1[9];
      v8 = (double *)a1[10];
    }
    else
    {
      v17 = 0;
    }
    v18 = (double *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = a2;
    v18[1] = v10;
    v12 = v18 + 2;
    if (v8 != v7)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
        v18 -= 2;
        v8 -= 2;
      }
      while (v8 != v7);
      v7 = (double *)a1[9];
    }
    a1[9] = v18;
    a1[10] = v12;
    a1[11] = v19;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v8 = a2;
    v8[1] = v10;
    v12 = v8 + 2;
  }
  a1[10] = v12;
}

float sub_1000F0AD0(uint64_t a1, double a2)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  float v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  sub_1000F0E14((_QWORD *)a1, a2);
  v3 = *(double **)(a1 + 48);
  v4 = *(double **)(a1 + 56);
  v5 = 0.0;
  v6 = 0.0;
  if (v3 != v4)
    v6 = vabdd_f64(*(v4 - 1), *v3);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v7 != v8)
    v5 = *(double *)(v8 - 8) - *(double *)(v7 + 8);
  v10 = v6 <= 120.0
     || v5 < 100.0
     || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) < 2;
  sub_1000F1694((uint64_t *)a1);
  v11 = sub_1000F1238(a1);
  v12 = sub_1000F1194(a1);
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_1021AF538);
  v13 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
  {
    v14 = a1;
    if (*(char *)(a1 + 23) < 0)
      v14 = *(_QWORD *)a1;
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4);
    *(_DWORD *)buf = 136316674;
    v35 = v14;
    v36 = 2050;
    v37 = v6;
    v38 = 2050;
    v39 = v5;
    v40 = 2050;
    v41 = v15;
    v42 = 1026;
    v43 = v10;
    v44 = 2050;
    v45 = v11;
    v46 = 2050;
    v47 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "IndoorOutdoor,WifiModel,context,%s,scanRange,%{public}f,distanceTraveled,%{public}f,numAps,%{public}zu,invalidResult,%{public}d,stationaryProbability,%{public}f,wifiRssiModelIndoorProbability,%{public}f", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_1021AF538);
    v17 = a1;
    if (*(char *)(a1 + 23) < 0)
      v17 = *(_QWORD *)a1;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4);
    v20 = 136316674;
    v21 = v17;
    v22 = 2050;
    v23 = v6;
    v24 = 2050;
    v25 = v5;
    v26 = 2050;
    v27 = v18;
    v28 = 1026;
    v29 = v10;
    v30 = 2050;
    v31 = v11;
    v32 = 2050;
    v33 = v12;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor,WifiModel,context,%s,scanRange,%{public}f,distanceTraveled,%{public}f,numAps,%{public}zu,invalidResult,%{public}d,stationaryProbability,%{public}f,wifiRssiModelIndoorProbability,%{public}f", &v20, 68);
    sub_100512490("Generic", 1, 0, 2, "float CLIndoorOutdoorWifiModel::computeProbability(CFAbsoluteTime)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  if (v10)
  {
    v11 = -1.0;
    if (v5 < 100.0)
      return v12;
  }
  return v11;
}

uint64_t sub_1000F0E14(_QWORD *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t result;
  double *v24;
  double *v25;
  double *i;
  double *v27;
  double *v28;
  double *v29;

  v5 = a1[3];
  v6 = a1[4];
  v4 = (uint64_t)(a1 + 3);
  if (v5 == v6)
  {
LABEL_26:
    v13 = v5;
  }
  else
  {
LABEL_2:
    v8 = *(double **)v5;
    v7 = *(double **)(v5 + 8);
    while (v8 != v7)
    {
      if (vabdd_f64(a2, *v8) <= 150.0)
      {
        v5 += 80;
        if (v5 != v6)
          goto LABEL_2;
        v13 = v6;
        goto LABEL_27;
      }
      v9 = (char *)v7 - (char *)(v8 + 1);
      if (v7 != v8 + 1)
        memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
      v7 = (double *)((char *)v8 + v9);
      *(_QWORD *)(v5 + 8) = (char *)v8 + v9;
      v11 = *(_QWORD *)(v5 + 32);
      v10 = *(_QWORD *)(v5 + 40);
      v12 = v10 - (v11 + 4);
      if (v10 != v11 + 4)
      {
        memmove(*(void **)(v5 + 32), (const void *)(v11 + 4), v10 - (v11 + 4));
        v7 = *(double **)(v5 + 8);
      }
      *(_QWORD *)(v5 + 40) = v11 + v12;
      v8 = *(double **)v5;
    }
    if (v5 == v6)
      goto LABEL_26;
    v14 = v5 + 80;
    if (v5 + 80 == v6)
      goto LABEL_26;
    v13 = v5;
    do
    {
      v15 = v5;
      v5 = v14;
      v17 = *(double **)(v15 + 80);
      v16 = *(double **)(v15 + 88);
      if (v17 != v16)
      {
        while (vabdd_f64(a2, *v17) > 150.0)
        {
          v18 = (char *)v16 - (char *)(v17 + 1);
          if (v16 != v17 + 1)
            memmove(v17, v17 + 1, (char *)v16 - (char *)(v17 + 1));
          v16 = (double *)((char *)v17 + v18);
          *(_QWORD *)(v15 + 88) = (char *)v17 + v18;
          v20 = *(_QWORD *)(v15 + 112);
          v19 = *(_QWORD *)(v15 + 120);
          v21 = v19 - (v20 + 4);
          if (v19 != v20 + 4)
          {
            memmove(*(void **)(v15 + 112), (const void *)(v20 + 4), v19 - (v20 + 4));
            v16 = *(double **)(v15 + 88);
          }
          *(_QWORD *)(v15 + 120) = v20 + v21;
          v17 = *(double **)v5;
          if (*(double **)v5 == v16)
            goto LABEL_24;
        }
        sub_100006898(v13, (__n128 *)v5);
        *(_DWORD *)(v13 + 24) = *(_DWORD *)(v15 + 104);
        sub_100006898(v13 + 32, (__n128 *)(v15 + 112));
        v22 = *(_OWORD *)(v15 + 136);
        *(_DWORD *)(v13 + 72) = *(_DWORD *)(v15 + 152);
        *(_OWORD *)(v13 + 56) = v22;
        v13 += 80;
      }
LABEL_24:
      v14 = v5 + 80;
    }
    while (v5 + 80 != v6);
  }
LABEL_27:
  result = sub_1000F1108(v4, v13, a1[4]);
  v25 = (double *)a1[6];
  v24 = (double *)a1[7];
  if (v25 != v24)
  {
    while (vabdd_f64(a2, *v25) <= 150.0)
    {
      if (++v25 == v24)
        goto LABEL_39;
    }
    if (v25 != v24)
    {
      for (i = v25 + 1; i != v24; ++i)
      {
        if (vabdd_f64(a2, *i) <= 150.0)
          *v25++ = *i;
      }
    }
    if (v25 != v24)
      a1[7] = v25;
  }
LABEL_39:
  v28 = (double *)a1[9];
  v27 = (double *)a1[10];
  if (v28 != v27)
  {
    while (vabdd_f64(a2, *v28) <= 150.0)
    {
      v28 += 2;
      if (v28 == v27)
        return result;
    }
    if (v28 != v27)
    {
      v29 = v28 + 2;
      if (v28 + 2 != v27)
      {
        do
        {
          if (vabdd_f64(a2, *v29) <= 150.0)
          {
            *(_OWORD *)v28 = *(_OWORD *)v29;
            v28 += 2;
          }
          v29 += 2;
        }
        while (v29 != v27);
        v27 = (double *)a1[10];
      }
    }
    if (v28 != v27)
      a1[10] = v28;
  }
  return result;
}

uint64_t sub_1000F1108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != a3)
  {
    sub_10132AC08((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 80;
        sub_1005939D0(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

double sub_1000F1194(uint64_t a1)
{
  double v1;
  __int128 v3;
  double v4[2];
  double v5;

  v1 = *(double *)(a1 + 96);
  if (v1 == -999.0)
    return -1.0;
  v3 = xmmword_101C4B730;
  v5 = (v1 + 96.0) / 65.5;
  sub_1000E381C((uint64_t)&v5, v4, (uint64_t *)&v3, 2, 1);
  return v4[0];
}

float sub_1000F1238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  int *v5;
  int *v6;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  __int128 *v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  double *v47;
  __int128 v48;
  double *v49;
  int v50;
  double v51;
  double *v52;
  long double v53;
  long double v54;
  double v55;
  double *v56;
  long double v57;
  long double v58;
  long double v59;
  __int128 *v61;
  __int128 *v62;
  unint64_t v63;
  __int128 **v64;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 == v2)
  {
    v22 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *(int **)(v1 + 32);
      v5 = *(int **)(v1 + 40);
      v6 = v4 + 1;
      if (v4 != v5 && v6 != v5)
      {
        v8 = *v4;
        v9 = *v4;
        v10 = v4 + 1;
        v11 = *(int **)(v1 + 32);
        v12 = v4 + 1;
        do
        {
          v14 = *v12++;
          v13 = v14;
          v15 = v9 < v14;
          if (v9 <= v14)
            v9 = v13;
          if (v15)
            v11 = v10;
          v10 = v12;
        }
        while (v12 != v5);
        v16 = *v11;
        v17 = v4 + 1;
        do
        {
          v19 = *v17++;
          v18 = v19;
          if (v19 < v8)
          {
            v8 = v18;
            v4 = v6;
          }
          v6 = v17;
        }
        while (v17 != v5);
        v20 = *v4;
        if (*(double *)(v1 + 64) > 0.0 && v16 != v20)
        {
          if (v3 >= v63)
          {
            v3 = sub_10132AF88((uint64_t *)&v61, v1);
          }
          else
          {
            sub_10132B094((uint64_t)&v63, v3, v1);
            v3 += 80;
          }
          v62 = (__int128 *)v3;
        }
      }
      v1 += 80;
    }
    while (v1 != v2);
    v22 = v61;
  }
  v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3 - (_QWORD)v22) >> 4);
  v24 = -1.0;
  if (v23 >= 2)
  {
    v25 = 126 - 2 * __clz(v23);
    if ((__int128 *)v3 == v22)
      v26 = 0;
    else
      v26 = v25;
    sub_10132B120(v22, v3, v26, 1);
    v27 = (uint64_t)v61;
    v28 = 0xCCCCCCCCCCCCCCCDLL * (v62 - v61);
    if (v28 >= 0x1A)
    {
      v33 = 0;
      v29 = 0;
      do
      {
        v29 += (*((_QWORD *)&v61[v33] + 1) - *(_QWORD *)&v61[v33]) >> 3;
        v33 += 5;
      }
      while (v33 != 120);
    }
    else if (v61 == v62)
    {
      v29 = 0;
    }
    else
    {
      v29 = 0;
      v30 = v61;
      do
      {
        v32 = *(_QWORD *)v30;
        v31 = *((_QWORD *)v30 + 1);
        v30 += 5;
        v29 += (unint64_t)(v31 - v32) >> 3;
      }
      while (v30 != v62);
    }
    if ((int)v28 < 1)
    {
      v34 = 0;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = (double)v29;
      do
      {
        v39 = v27 + 80 * v37;
        v40 = (double)(int)((*(_QWORD *)(v39 + 8) - *(_QWORD *)v39) >> 3) / v38;
        v41 = *(double *)(v39 + 64);
        v42 = 1.0 - v41;
        if (v36 >= v35)
        {
          v43 = 0xAAAAAAAAAAAAAAABLL * (v36 - v34) + 1;
          if (v43 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * (v35 - v34) > v43)
            v43 = 0x5555555555555556 * (v35 - v34);
          if (0xAAAAAAAAAAAAAAABLL * (v35 - v34) >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v43;
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL)
              sub_10025955C();
            v45 = (char *)operator new(24 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = (double *)&v45[8 * (v36 - v34)];
          *v46 = v40;
          v46[1] = v41;
          v46[2] = v42;
          if (v36 == v34)
          {
            v49 = v36;
            v34 = (double *)&v45[8 * (v36 - v34)];
          }
          else
          {
            v47 = (double *)&v45[8 * (v36 - v34)];
            do
            {
              v48 = *(_OWORD *)(v36 - 3);
              *(v47 - 1) = *(v36 - 1);
              *(_OWORD *)(v47 - 3) = v48;
              v47 -= 3;
              v36 -= 3;
            }
            while (v36 != v34);
            v49 = v34;
            v34 = v47;
          }
          v35 = (double *)&v45[24 * v44];
          v36 = v46 + 3;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v36 = v40;
          v36[1] = v41;
          v36[2] = v42;
          v36 += 3;
        }
        ++v37;
        v27 = (uint64_t)v61;
        v50 = -858993459 * ((unint64_t)((char *)v62 - (char *)v61) >> 4);
        if (v50 >= 25)
          v50 = 25;
      }
      while (v37 < v50);
      if (v34 != v36)
      {
        v51 = 1.0;
        v52 = v34;
        do
        {
          v54 = *v52;
          v53 = v52[1];
          v52 += 3;
          v51 = v51 * pow(v53, v54);
        }
        while (v52 != v36);
        v55 = 1.0;
        v56 = v34;
        do
        {
          v57 = v56[2];
          v58 = *v56;
          v56 += 3;
          v55 = v55 * pow(v57, v58);
        }
        while (v56 != v36);
LABEL_73:
        v59 = exp(v51 * (1.0 / (v51 + v55)) * 11.1434693 + -4.35656828);
        v24 = v59 / (v59 + 1.0);
        if (v34)
          operator delete(v34);
        goto LABEL_75;
      }
    }
    v51 = 1.0;
    v55 = 1.0;
    goto LABEL_73;
  }
LABEL_75:
  v64 = &v61;
  sub_10059394C((void ***)&v64);
  return v24;
}

void sub_1000F1654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10059394C(&a12);
  _Unwind_Resume(a1);
}

void sub_1000F1694(uint64_t *a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v4;
  float v5;
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  long double v10;
  int *v11;
  int *v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  BOOL v18;

  a1[12] = 0xC08F380000000000;
  v1 = a1[3];
  for (i = a1[4]; v1 != i; v1 += 80)
  {
    v4 = (*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 3;
    if ((int)v4 >= 2)
    {
      v5 = sub_1000F1868(a1, (uint64_t *)(v1 + 32), 25.0);
      v7 = (double *)a1[6];
      v6 = a1[7];
      v8 = (*(double *)(*(_QWORD *)(v1 + 8) - 8) - **(double **)v1) / (*(double *)(v6 - 8) - *v7);
      v9 = v5;
      v10 = exp((v8 + -0.00137940772) / 0.998620592 * 5.78228066+ ((double)(int)v4 / (double)(unint64_t)((v6 - (uint64_t)v7) >> 3) + -0.0689655172)/ 0.931034483* 1.87654821+ (v5 + 99.25) / 71.25 * 1.10882815+ -5.98543736);
      *(double *)(v1 + 56) = v8;
      *(long double *)(v1 + 64) = v10 / (v10 + 1.0);
      v11 = *(int **)(v1 + 32);
      v12 = *(int **)(v1 + 40);
      if (v11 != v12)
      {
        v13 = v11 + 1;
        if (v11 + 1 != v12)
        {
          v14 = *v11;
          v15 = v11 + 1;
          do
          {
            v17 = *v15++;
            v16 = v17;
            v18 = v14 < v17;
            if (v14 <= v17)
              v14 = v16;
            if (v18)
              v11 = v13;
            v13 = v15;
          }
          while (v15 != v12);
        }
      }
      *(_DWORD *)(v1 + 72) = *v11;
      if ((int)v4 >= 7 && *((double *)a1 + 12) < v9)
        *((double *)a1 + 12) = v9;
    }
  }
}

float sub_1000F1868(uint64_t *a1, uint64_t *a2, float a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  float v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int v22;
  uint64_t *v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t *v27;
  __int16 v28;
  uint64_t v29;

  v5 = *a2;
  v6 = (int *)a2[1];
  v7 = (uint64_t)v6 - *a2;
  if ((unint64_t)v7 > 7)
  {
    v14 = (float)(a3 / 100.0) * (float)(unint64_t)((v7 >> 2) - 1);
    v15 = floorf(v14);
    v16 = ceilf(v14);
    if (v15 == v16)
    {
      v17 = (int *)(v5 + 4 * (uint64_t)v14);
      if (v17 != v6)
      {
        sub_10132AC8C(v5, v17, v6);
        v5 = *a2;
      }
      return (float)*(int *)(v5 + 4 * (unint64_t)v14);
    }
    else
    {
      v18 = (int *)(v5 + 4 * (uint64_t)v15);
      if (v18 != v6)
      {
        sub_10132AC8C(v5, v18, v6);
        v5 = *a2;
        v6 = (int *)a2[1];
      }
      v19 = *(_DWORD *)(v5 + 4 * (unint64_t)v15);
      v20 = (int *)(v5 + 4 * (uint64_t)v16);
      if (v20 != v6)
      {
        sub_10132AC8C(v5, v20, v6);
        v5 = *a2;
      }
      return (float)((float)(v16 - v14) * (float)v19)
           + (float)((float)(v14 - v15) * (float)*(int *)(v5 + 4 * (unint64_t)v16));
    }
  }
  else
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_1021AF538);
    v8 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_ERROR))
    {
      v9 = a1;
      if (*((char *)a1 + 23) < 0)
        v9 = (uint64_t *)*a1;
      v10 = (a2[1] - *a2) >> 2;
      *(_DWORD *)buf = 136315394;
      v27 = v9;
      v28 = 2050;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "IndoorOutdoor, context, %s, can't compute percentile on buffer of this size %{public}zu", buf, 0x16u);
    }
    v11 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_1021AF538);
      if (*((char *)a1 + 23) < 0)
        a1 = (uint64_t *)*a1;
      v12 = (a2[1] - *a2) >> 2;
      v22 = 136315394;
      v23 = a1;
      v24 = 2050;
      v25 = v12;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 16, "IndoorOutdoor, context, %s, can't compute percentile on buffer of this size %{public}zu", &v22, 22);
      sub_100512490("Generic", 1, 0, 0, "float CLIndoorOutdoorWifiModel::computePercentile(std::vector<int> &, float)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  return v11;
}

uint64_t sub_1000F1B44(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10132AA68((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_1000F1BB8(void **a1)
{
  sub_10132ABC4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

__n128 sub_1000F1BEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 216);
  result = *(__n128 *)(a1 + 200);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1000F1C08(_QWORD *a1, void **a2, double a3, double a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _OWORD *v28;

  v7 = a1[6];
  v8 = a1[3];
  v9 = a1[4];
  v10 = (_QWORD *)(v8 + 8 * (v7 >> 8));
  if (v9 == v8)
    v11 = 0;
  else
    v11 = (_OWORD *)(*v10 + 16 * v7);
  v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      v14 = 0;
    }
    else
    {
      v13 = a1[7] + a1[6];
      v14 = *(_QWORD *)(v8 + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v13;
    }
    if (v11 == (_OWORD *)v14)
      break;
    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      v17 = a2[1];
      v16 = (unint64_t)a2[2];
      if ((unint64_t)v17 >= v16)
      {
        v19 = ((char *)v17 - (_BYTE *)*a2) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          sub_100259694();
        v21 = v16 - (_QWORD)*a2;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)sub_10028E224((uint64_t)(a2 + 2), v22);
        else
          v23 = 0;
        v24 = &v23[16 * v19];
        *(_OWORD *)v24 = *v11;
        v26 = (char *)*a2;
        v25 = (char *)a2[1];
        v27 = v24;
        if (v25 != *a2)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }
          while (v25 != v26);
          v25 = (char *)*a2;
        }
        v18 = v24 + 16;
        *a2 = v27;
        a2[1] = v24 + 16;
        a2[2] = &v23[16 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v17 = *v11;
        v18 = v17 + 1;
      }
      a2[1] = v18;
    }
    if ((_OWORD *)((char *)++v11 - *v10) == (_OWORD *)4096)
    {
      v28 = (_OWORD *)v10[1];
      ++v10;
      v11 = v28;
    }
    v8 = a1[3];
    v9 = a1[4];
  }
}

float sub_1000F1DBC(double a1, float a2, float a3)
{
  NSCalendar *v5;
  NSDateComponents *v6;
  float v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __float2 v23;
  __float2 v24;
  float v25;

  v5 = +[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian);
  -[NSCalendar setTimeZone:](v5, "setTimeZone:", +[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  v6 = -[NSCalendar components:fromDate:](v5, "components:fromDate:", 252, +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a1));
  v7 = (float)-[NSDateComponents hour](v6, "hour");
  *(float *)&a1 = (float)-[NSDateComponents minute](v6, "minute");
  v8 = (float)((float)((float)((float)((float)-[NSDateComponents second](v6, "second") / 60.0) + *(float *)&a1) / 60.0)
             + v7)
     / 24.0;
  v9 = sub_1000F2304((int)-[NSDateComponents year](v6, "year"), (int)-[NSDateComponents month](v6, "month"), (int)-[NSDateComponents day](v6, "day"), v8);
  v10 = v9;
  v11 = v9 * (v9 * 0.0003032 + 36000.7698) + 280.46646;
  v12 = fmodf(v11, 360.0);
  if (v12 >= 0.0)
    v13 = v12;
  else
    v13 = v12 + 360.0;
  v14 = v10 * (v10 * -0.0001537 + 35999.0503) + 357.52911;
  v15 = ((21.448 - v10 * (v10 * (v10 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  v16 = v15;
  v17 = v10 * -1934.136 + 125.04;
  *(float *)&v16 = v16 + cosf(v17 / 57.296) * 0.00256;
  v18 = sub_1000F20B4(v9, *(float *)&v16, v13, v14);
  v19 = sub_1000F21DC(v9, *(float *)&v16, v13, v14);
  v20 = fmod(v19 + v8 * 1440.0 + (float)(a3 * 4.0), 1440.0);
  if (v20 < 0.0)
    v20 = v20 + 1440.0;
  v21 = v20 * 0.25 + dbl_101BC0BE0[v20 * 0.25 < 0.0];
  v22 = v21 / 57.296;
  v23 = __sincosf_stret(a2 / 57.296);
  v24 = __sincosf_stret(v18 / 57.296);
  v25 = cosf(v22);
  return asinf((float)((float)(v23.__cosval * v24.__cosval) * v25) + (float)(v23.__sinval * v24.__sinval)) * 57.296;
}

float sub_1000F20B4(float a1, float a2, float a3, float a4)
{
  float v7;
  double v8;
  double v9;
  double v10;
  float v11;
  double v12;
  float v13;
  float v14;
  float v15;

  v7 = a4 / 57.296;
  v8 = sinf(a4 / 57.296);
  v9 = a1;
  v10 = (v9 * -0.000101 + 0.019993) * sinf(v7 + v7) + v8 * (1.914602 - v9 * (v9 * 0.000014 + 0.004817));
  v11 = v10 + sinf(v7 * 3.0) * 0.000289;
  v12 = (float)(v11 + a3) + -0.00569;
  v13 = v9 * -1934.136 + 125.04;
  *(float *)&v12 = v12 + sinf(v13 / 57.296) * -0.00478;
  v14 = sinf(a2 / 57.296);
  v15 = sinf(*(float *)&v12 / 57.296);
  return asinf(v14 * v15) * 57.296;
}

float sub_1000F21DC(float a1, float a2, float a3, float a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  double v14;
  float v15;

  v8 = tanf((float)(a2 * 0.5) / 57.296);
  v9 = v8 * tanf((float)(a2 / 57.296) * 0.5);
  v10 = 0.016708634 - a1 * (a1 * 0.0000001267 + 0.000042037);
  v11 = a4 / 57.296;
  v12 = sinf(v11);
  v13 = __sincosf_stret((float)(a3 / 57.296) + (float)(a3 / 57.296));
  v14 = (float)((float)((float)((float)(v10 * -2.0) * v12) + (float)(v9 * v13.__sinval))
              + (float)((float)(v12 * (float)((float)(v10 * 4.0) * v9)) * v13.__cosval))
      + v9 * -0.5 * v9 * sinf((float)(a3 / 57.296) * 4.0);
  v15 = v14 + v10 * -1.25 * v10 * sinf(v11 + v11);
  return (float)(v15 * 57.296) * 4.0;
}

float sub_1000F2304(int a1, int a2, int a3, float a4)
{
  int v4;

  v4 = a2 + 12;
  if (a2 >= 3)
    v4 = a2;
  return (float)((float)((float)((float)((float)((float)(a3
                                                       - (int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                       + (int)(float)((float)(int)(float)((float)(a1 - (a2 < 3)) / 100.0)
                                                                    * 0.25)
                                                       + 2)
                                               + a4)
                                       + (float)(int)(((double)(a1 - (a2 < 3)) + 4716.0) * 365.25))
                               + (float)(int)(((double)v4 + 1.0) * 30.6001))
                       + -1524.5)
               + -2451500.0)
       / 36525.0;
}

BOOL sub_1000F23C8(uint64_t a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  double v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint8_t buf[4];
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,predict()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v44) = 0;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,predict()", &v44, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    if (vabdd_f64(a2, *(double *)(a1 + 248)) < 2.22044605e-16)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v5 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,predict(),Estimator time equal to current time", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v44) = 0;
      LODWORD(v41) = 2;
      v8 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,predict(),Estimator time equal to current time", &v44, v41);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n");
LABEL_47:
      if (v8 != buf)
        free(v8);
      return 0;
    }
    v43 = a2;
    v42 = *(_OWORD *)(a1 + 144);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v9 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 144);
      v11 = *(_QWORD *)(a1 + 152);
      v12 = *(_QWORD *)(a1 + 248);
      *(_DWORD *)buf = 134284033;
      v61 = v10;
      v62 = 2049;
      v63 = v11;
      v64 = 2048;
      v65 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_TransitionProbability,transitionProbabilityIndoorGivenIndoor,%{private}f,transitionProbabilityOutdoorGivenOutdoor,%{private}f,EstimatorTimeCfaSec,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v27 = *(_QWORD *)(a1 + 144);
      v28 = *(_QWORD *)(a1 + 152);
      v29 = *(_QWORD *)(a1 + 248);
      v44 = 134284033;
      v45 = v27;
      v46 = 2049;
      v47 = v28;
      v48 = 2048;
      v49 = v29;
      LODWORD(v41) = 32;
      v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_TransitionProbability,transitionProbabilityIndoorGivenIndoor,%{private}f,transitionProbabilityOutdoorGivenOutdoor,%{private}f,EstimatorTimeCfaSec,%f", &v44, v41, v42, *(_QWORD *)&v43);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v30);
      if (v30 != (char *)buf)
        free(v30);
    }
    v13 = sub_10024443C((_DWORD *)a1, (unsigned int (*)(uint64_t, uint64_t (***)()))sub_100206840, (uint64_t)&v42);
    v6 = v13 == 0;
    if (v13)
    {
      v14 = v13;
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v15 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v61) = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,predict(),Failed,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v44 = 67109120;
        LODWORD(v45) = v14;
        v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,predict(),Failed,%d", &v44);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
    }
    else
    {
      *(double *)(a1 + 248) = a2;
      *(int64x2_t *)(a1 + 144) = vdupq_n_s64(0x3FEE666666666666uLL);
      sub_100079B10(a1);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v16 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(a1 + 184);
        v18 = *(_QWORD *)(a1 + 192);
        v19 = *(_QWORD *)(a1 + 200);
        v20 = *(_QWORD *)(a1 + 208);
        v21 = *(unsigned __int8 *)(a1 + 232);
        v22 = *(_QWORD *)(a1 + 216);
        v23 = *(_QWORD *)(a1 + 224);
        v24 = *(_QWORD *)(a1 + 248);
        *(_DWORD *)buf = 134219777;
        v61 = v17;
        v62 = 2048;
        v63 = v18;
        v64 = 2049;
        v65 = v19;
        v66 = 2049;
        v67 = v20;
        v68 = 2049;
        v69 = v22;
        v70 = 1025;
        v71 = v21;
        v72 = 2049;
        v73 = v23;
        v74 = 2048;
        v75 = v24;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_predict,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", buf, 0x4Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v32 = *(_QWORD *)(a1 + 184);
        v33 = *(_QWORD *)(a1 + 192);
        v34 = *(_QWORD *)(a1 + 200);
        v35 = *(_QWORD *)(a1 + 208);
        v36 = *(unsigned __int8 *)(a1 + 232);
        v37 = *(_QWORD *)(a1 + 216);
        v38 = *(_QWORD *)(a1 + 224);
        v39 = *(_QWORD *)(a1 + 248);
        v44 = 134219777;
        v45 = v32;
        v46 = 2048;
        v47 = v33;
        v48 = 2049;
        v49 = v34;
        v50 = 2049;
        v51 = v35;
        v52 = 2049;
        v53 = v37;
        v54 = 1025;
        v55 = v36;
        v56 = 2049;
        v57 = v38;
        v58 = 2048;
        v59 = v39;
        LODWORD(v41) = 78;
        v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_predict,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", &v44, v41);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n", v40);
        if (v40 != (char *)buf)
          free(v40);
      }
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v7 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,predict(),HMM Not initialized", buf, 2u);
    }
    v6 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v44) = 0;
      LODWORD(v41) = 2;
      v8 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,predict(),HMM Not initialized", &v44, v41);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorEstimator::predict(const CFAbsoluteTime)", "%s\n");
      goto LABEL_47;
    }
  }
  return v6;
}

uint64_t sub_1000F2CEC(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, double *a5)
{
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  NSObject *v14;
  double v15;
  NSObject *v16;
  _BOOL4 v17;
  NSObject *v18;
  _BOOL4 v19;
  uint8_t *v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  long double v25;
  long double v26;
  double v27;
  long double v28;
  uint64_t v29;
  long double v30;
  double v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint8_t buf[1640];

  if (*a5 >= 0.0)
  {
    if (*(_BYTE *)(a4 + 40))
    {
      if (a3[1] - *a3 != 128)
      {
        sub_1000F3860((uint64_t)a3, 0x10uLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning,KF:Q was not dimensioned", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v34[0]) = 0;
          v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:Q was not dimensioned", v34, 2);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)", "%s\n", v32);
          if (v32 != (char *)buf)
            free(v32);
        }
      }
      v15 = *(double *)(a4 + 24);
      if (v15 == 0.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v16 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "KF:tuning invalid, beta == 0", buf, 2u);
        }
        v17 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v17)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v34[0]) = 0;
          LODWORD(v33) = 2;
          v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:tuning invalid, beta == 0", v34, v33, v34[0]);
          goto LABEL_34;
        }
      }
      else
      {
        v21 = *a5;
        v22 = exp(-(v15 * *a5));
        v23 = exp(v15 * -2.0 * v21);
        v24 = *(double *)(a4 + 32);
        v25 = 1.0 - v23;
        v26 = (1.0 - v23) / (v15 + v15);
        v27 = v24 / (v15 * v15) * (v26 + v21 - (1.0 - v22 + 1.0 - v22) / v15);
        v28 = v24 / v15 * ((1.0 - v22) / v15 - v26);
        v29 = *a3;
        *(double *)v29 = v27;
        *(_QWORD *)(v29 + 8) = 0;
        *(long double *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0;
        *(double *)(v29 + 40) = v27;
        *(_QWORD *)(v29 + 48) = 0;
        *(long double *)(v29 + 56) = v28;
        *(long double *)(v29 + 64) = v28;
        *(_QWORD *)(v29 + 72) = 0;
        v30 = v24 * v25 / (v15 + v15);
        *(long double *)(v29 + 80) = v30;
        *(_QWORD *)(v29 + 88) = 0;
        *(_QWORD *)(v29 + 96) = 0;
        *(long double *)(v29 + 104) = v28;
        *(_QWORD *)(v29 + 112) = 0;
        *(long double *)(v29 + 120) = v30;
        if (*a2)
        {
          v31 = v27 + *a5 * dbl_101C1EC20[((*(_DWORD *)(a1 + 628) - 4) & 0xFFFFFFFB) == 0];
          *(double *)v29 = v31;
          *(double *)(v29 + 40) = v31;
        }
        return 1;
      }
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:tuning invalid", buf, 2u);
      }
      v19 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v19)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v34[0]) = 0;
        v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:tuning invalid", v34, 2, v34[0]);
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      LOWORD(v34[0]) = 0;
      v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:dT < 0", v34, 2, v34[0]);
LABEL_34:
      v20 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)", "%s\n", v8);
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F32B4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 == a2)
  {
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
  }
  else
  {
    sub_10034F2B0((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_10034F2B0((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_10034F2B0((char *)(a1 + 104), *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_10034F2B0((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
    sub_10034F2B0((char *)(a1 + 152), *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
    sub_100C285F0((uint64_t *)(a1 + 592), *(_QWORD *)(a2 + 600), a2 + 592);
  }
  return a1;
}

double sub_1000F3388(uint64_t a1)
{
  __int128 v2;
  double result;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 936);
  v2 = *(_OWORD *)(a1 + 920);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
  *(_OWORD *)(a1 + 48) = v2;
  sub_10034F2B0((char *)(a1 + 72), *(char **)(a1 + 944), *(_QWORD *)(a1 + 952), (uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 3);
  sub_10034F2B0((char *)(a1 + 96), *(char **)(a1 + 968), *(_QWORD *)(a1 + 976), (uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  sub_10034F2B0((char *)(a1 + 120), *(char **)(a1 + 992), *(_QWORD *)(a1 + 1000), (uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  sub_10034F2B0((char *)(a1 + 144), *(char **)(a1 + 1016), *(_QWORD *)(a1 + 1024), (uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  sub_10034F2B0((char *)(a1 + 168), *(char **)(a1 + 1040), *(_QWORD *)(a1 + 1048), (uint64_t)(*(_QWORD *)(a1 + 1048) - *(_QWORD *)(a1 + 1040)) >> 3);
  memcpy((void *)(a1 + 192), (const void *)(a1 + 1064), 0x199uLL);
  sub_100C285F0((uint64_t *)(a1 + 608), *(_QWORD *)(a1 + 1488), a1 + 1480);
  result = *(double *)(a1 + 1504);
  *(double *)(a1 + 632) = result;
  return result;
}

_QWORD *sub_1000F345C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = off_10217AF00;
  sub_1000F34E0(a1 + 74);
  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_1000F34E0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_1000F3540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10217AF00;
  *(_QWORD *)(a1 + 8) = off_10217AEE0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = a1 + 128;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 256) = 0xFFFF;
  *(_QWORD *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 276) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 292) = _Q1;
  *(_OWORD *)(a1 + 308) = _Q1;
  *(_OWORD *)(a1 + 324) = _Q1;
  *(_DWORD *)(a1 + 340) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 372) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 380) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 412) = 0xFFFF;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_OWORD *)(a1 + 480) = _Q1;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 500) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 516) = 0;
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 536) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 564) = 0;
  *(_QWORD *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 540) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(_QWORD *)(a1 + 576) = 0xBF80000000000000;
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = a1 + 592;
  *(_QWORD *)(a1 + 600) = a1 + 592;
  *(_QWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 52) = 1115684864;
  *(_OWORD *)(a1 + 16) = xmmword_101C1EBA0;
  *(_OWORD *)(a1 + 32) = xmmword_101C1EBB0;
  *(_BYTE *)(a1 + 48) = 1;
  sub_1000F3860(a1 + 80, 0x10uLL);
  sub_1000F3860(v2, 0x10uLL);
  sub_1000F3860(v3, 4uLL);
  sub_1000F3860(v5, 4uLL);
  sub_1000F3860(v4, 4uLL);
  return a1;
}

void sub_1000F36F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  sub_1000F34E0(v7);
  v9 = *v6;
  if (*v6)
  {
    v1[20] = v9;
    operator delete(v9);
  }
  v10 = *v5;
  if (*v5)
  {
    v1[17] = v10;
    operator delete(v10);
  }
  v11 = *v4;
  if (*v4)
  {
    v1[14] = v11;
    operator delete(v11);
  }
  v12 = *v3;
  if (*v3)
  {
    v1[11] = v12;
    operator delete(v12);
  }
  v13 = *v2;
  if (*v2)
  {
    v1[8] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void sub_1000F3758(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_100259694();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_10025E6A0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1000F3860(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1000F3758((char **)a1, a2 - v2);
  }
}

uint64_t sub_1000F3890(double *a1, double *a2, double *a3, double a4, double a5)
{
  double v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t *v14;
  double v15;
  __double2 v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t result;
  char *v23;
  double v24;
  int v25;
  double v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;

  v10 = -450.0;
  if (a5 >= -450.0)
  {
    v10 = 1000000.0;
    if (a5 <= 1000000.0)
    {
      v10 = a5;
      goto LABEL_22;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v28 = 1000000.0;
      v29 = 2048;
      v30 = a5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
      v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max");
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v28 = -450.0;
      v29 = 2048;
      v30 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
      v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min");
LABEL_19:
      v14 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDistanceCalc::calc_dNdE(double, double, double &, double &)", "%s\n", v12);
      if (v14 != buf)
        free(v14);
    }
  }
LABEL_22:
  v15 = a1[3];
  if (v15 != 0.0 && vabdd_f64(a4, v15) <= 0.005)
  {
    v19 = *a1;
    goto LABEL_38;
  }
  if (a4 <= 90.0 && a4 >= -90.0)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    v16 = __sincos_stret(a4 * 0.0174532925);
    v17 = v16.__sinval * -0.00669437999 * v16.__sinval + 1.0;
    v18 = sqrt(v17);
    v19 = 6335439.33 / (v17 * v18);
    *a1 = v19;
    a1[1] = 6378137.0 / v18;
    a1[4] = v16.__cosval;
LABEL_38:
    *a2 = v10 + v19;
    v24 = (v10 + a1[1]) * a1[4];
    if (v24 < 10.0)
      v24 = 10.0;
    *a3 = v24;
    return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
  v20 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134217984;
    v28 = a4;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "latitude,%.7lf,is out of bounds", buf, 0xCu);
  }
  v21 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v21)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v25 = 134217984;
    v26 = a4;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "latitude,%.7lf,is out of bounds", COERCE_DOUBLE(&v25));
    sub_100512490("Generic", 1, 0, 0, "BOOL CLDistanceCalc::calc_dNdE(double, double, double &, double &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
    return 0;
  }
  return result;
}

double sub_1000F3DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  double v4;
  double *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double *__p;
  double *v20;
  char *v21;
  char v22;

  __p = 0;
  v20 = 0;
  v21 = 0;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 == v2)
    return -1.0;
  v3 = 0;
  do
  {
    v4 = *(float *)(v1 + 8);
    if (v3 >= (double *)v21)
    {
      v5 = __p;
      v6 = v3 - __p;
      v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 61)
        sub_100259694();
      v8 = v21 - (char *)__p;
      if ((v21 - (char *)__p) >> 2 > v7)
        v7 = v8 >> 2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v7;
      if (v9)
      {
        v10 = (char *)sub_10025E6A0((uint64_t)&v21, v9);
        v5 = __p;
        v3 = v20;
      }
      else
      {
        v10 = 0;
      }
      v11 = (double *)&v10[8 * v6];
      *v11 = v4;
      v12 = v11 + 1;
      while (v3 != v5)
      {
        v13 = *((_QWORD *)v3-- - 1);
        *((_QWORD *)v11-- - 1) = v13;
      }
      __p = v11;
      v21 = &v10[8 * v9];
      if (v5)
        operator delete(v5);
      v3 = v12;
    }
    else
    {
      *v3++ = v4;
    }
    v20 = v3;
    v1 += 16;
  }
  while (v1 != v2);
  if (__p == v3)
  {
    v17 = -1.0;
    goto LABEL_31;
  }
  sub_1002075EC(__p, v3, (uint64_t)&v22, 126 - 2 * __clz(v3 - __p), 1);
  v3 = __p;
  v14 = v20 - __p;
  if (v14 >= 5)
    v14 = 5;
  if (v14)
  {
    v15 = 0;
    v16 = 0.0;
    do
      v16 = v16 + __p[v15++];
    while (v14 != v15);
    v17 = v16 / (double)v14;
    goto LABEL_31;
  }
  v17 = 0.0 / (double)0;
  if (__p)
LABEL_31:
    operator delete(v3);
  return v17;
}

void sub_1000F3F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F3FC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t result;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  char *v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  uint64_t v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  char *v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  uint64_t v116;
  char *v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  unsigned __int8 *v124;
  unsigned int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  char *v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unsigned __int8 *v137;
  _DWORD *v138;
  char *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  uint64_t v147;
  char *v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  char *v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  int v163;
  unsigned __int8 *v164;
  void *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  char *v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  char *v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t v203;
  char *v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  char *v213;
  int v214;
  int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  char *v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  unsigned int v231;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned int v235;

  v5 = (unint64_t *)(a1 + 16);
  v6 = (unsigned int *)(a1 + 200);
  v7 = (unsigned int *)(a1 + 216);
  while (2)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v235 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && (*v11 & 0x80000000) == 0)
        {
          v12 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_91;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235);
        if ((_DWORD)result)
        {
          v12 = v235;
LABEL_91:
          if (v12 - 9 < 0x13 || v12 <= 5)
          {
            if (v12 - 9 >= 0x13 && v12 >= 6)
              sub_101935E0C();
            *(_DWORD *)(a1 + 224) |= 1u;
            *(_DWORD *)(a1 + 8) = v12;
          }
          v40 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
          if ((unint64_t)v40 < v15 && *v40 == 16)
          {
            v16 = v40 + 1;
            *((_QWORD *)this + 1) = v16;
            goto LABEL_103;
          }
          continue;
        }
        break;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
LABEL_103:
        v235 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235);
          if (!(_DWORD)result)
            return result;
          v41 = v235;
        }
        else
        {
          v41 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        if (sub_100103BB0(v41))
        {
          *(_DWORD *)(a1 + 224) |= 2u;
          *(_DWORD *)(a1 + 12) = v41;
        }
        v42 = (_BYTE *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        if ((unint64_t)v42 >= v17 || *v42 != 24)
          continue;
        v18 = v42 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_113:
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v43 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v18;
          v43 = v18 + 1;
          *((_QWORD *)this + 1) = v43;
        }
        v24 = *(_DWORD *)(a1 + 224) | 4;
        *(_DWORD *)(a1 + 224) = v24;
        if ((unint64_t)v43 >= v17 || *v43 != 34)
          continue;
        *((_QWORD *)this + 1) = v43 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 224) = v24 | 8;
        v44 = *(_QWORD *)(a1 + 24);
        if (!v44)
          operator new();
        v235 = 0;
        v45 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v45;
          *((_QWORD *)this + 1) = v45 + 1;
        }
        v46 = *((_DWORD *)this + 14);
        v47 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v46 + 1;
        if (v46 >= v47)
          return 0;
        v48 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1000F5D5C(v44, this, v49) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v48);
        v50 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v50, 1);
        v51 = v50 - 1;
        if (v51 < 0 == v35)
          *((_DWORD *)this + 14) = v51;
        v52 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 != 42)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 224) |= 0x10u;
        v53 = *(_QWORD *)(a1 + 32);
        if (!v53)
          operator new();
        v235 = 0;
        v54 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v54 >= *((_QWORD *)this + 2) || *v54 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v54;
          *((_QWORD *)this + 1) = v54 + 1;
        }
        v55 = *((_DWORD *)this + 14);
        v56 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v55 + 1;
        if (v55 >= v56)
          return 0;
        v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1000F6FF0(v53, this, v58) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
        v59 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v59, 1);
        v60 = v59 - 1;
        if (v60 < 0 == v35)
          *((_DWORD *)this + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 != 50)
          continue;
        *((_QWORD *)this + 1) = v61 + 1;
LABEL_149:
        *(_DWORD *)(a1 + 224) |= 0x20u;
        v62 = *(_QWORD *)(a1 + 40);
        if (!v62)
          operator new();
        v235 = 0;
        v63 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v63 >= *((_QWORD *)this + 2) || *v63 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v63;
          *((_QWORD *)this + 1) = v63 + 1;
        }
        v64 = *((_DWORD *)this + 14);
        v65 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v64 + 1;
        if (v64 >= v65)
          return 0;
        v66 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_10002F370(v62, this, v67) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v66);
        v68 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v68, 1);
        v69 = v68 - 1;
        if (v69 < 0 == v35)
          *((_DWORD *)this + 14) = v69;
        v70 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v70 >= *((_QWORD *)this + 2) || *v70 != 74)
          continue;
        *((_QWORD *)this + 1) = v70 + 1;
LABEL_163:
        *(_DWORD *)(a1 + 224) |= 0x40u;
        v71 = *(_QWORD *)(a1 + 48);
        if (!v71)
          operator new();
        v235 = 0;
        v72 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v72 >= *((_QWORD *)this + 2) || *v72 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v72;
          *((_QWORD *)this + 1) = v72 + 1;
        }
        v73 = *((_DWORD *)this + 14);
        v74 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v73 + 1;
        if (v73 >= v74)
          return 0;
        v75 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F3EEFC(v71, this, v76) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v75);
        v77 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v77, 1);
        v78 = v77 - 1;
        if (v78 < 0 == v35)
          *((_DWORD *)this + 14) = v78;
        v79 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v79 >= *((_QWORD *)this + 2) || *v79 != 82)
          continue;
        *((_QWORD *)this + 1) = v79 + 1;
LABEL_177:
        *(_DWORD *)(a1 + 224) |= 0x80u;
        v80 = *(_QWORD *)(a1 + 56);
        if (!v80)
          operator new();
        v235 = 0;
        v81 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v81 >= *((_QWORD *)this + 2) || *v81 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v81;
          *((_QWORD *)this + 1) = v81 + 1;
        }
        v82 = *((_DWORD *)this + 14);
        v83 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v82 + 1;
        if (v82 >= v83)
          return 0;
        v84 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_10076892C(v80, this, v85) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v84);
        v86 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v86, 1);
        v87 = v86 - 1;
        if (v87 < 0 == v35)
          *((_DWORD *)this + 14) = v87;
        v88 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v88 <= 1 || *v88 != 130 || v88[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v88 + 2;
LABEL_192:
        *(_DWORD *)(a1 + 224) |= 0x100u;
        v89 = *(_QWORD *)(a1 + 64);
        if (!v89)
          operator new();
        v235 = 0;
        v90 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v90 >= *((_QWORD *)this + 2) || *v90 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v90;
          *((_QWORD *)this + 1) = v90 + 1;
        }
        v91 = *((_DWORD *)this + 14);
        v92 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v91 + 1;
        if (v91 >= v92)
          return 0;
        v93 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F45A08(v89, this, v94) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v93);
        v95 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v95, 1);
        v96 = v95 - 1;
        if (v96 < 0 == v35)
          *((_DWORD *)this + 14) = v96;
        v97 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v97 <= 1 || *v97 != 138 || v97[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v97 + 2;
LABEL_207:
        *(_DWORD *)(a1 + 224) |= 0x200u;
        v98 = *(_QWORD *)(a1 + 72);
        if (!v98)
          operator new();
        v235 = 0;
        v99 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v99 >= *((_QWORD *)this + 2) || *v99 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v99;
          *((_QWORD *)this + 1) = v99 + 1;
        }
        v100 = *((_DWORD *)this + 14);
        v101 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v100 + 1;
        if (v100 >= v101)
          return 0;
        v102 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F45F90(v98, this, v103) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v102);
        v104 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v104, 1);
        v105 = v104 - 1;
        if (v105 < 0 == v35)
          *((_DWORD *)this + 14) = v105;
        v106 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v106 <= 1 || *v106 != 146 || v106[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v106 + 2;
LABEL_222:
        *(_DWORD *)(a1 + 224) |= 0x400u;
        v107 = *(_QWORD *)(a1 + 80);
        if (!v107)
          operator new();
        v235 = 0;
        v108 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v108 >= *((_QWORD *)this + 2) || *v108 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v108;
          *((_QWORD *)this + 1) = v108 + 1;
        }
        v109 = *((_DWORD *)this + 14);
        v110 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v109 + 1;
        if (v109 >= v110)
          return 0;
        v111 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_10001B4A8(v107, this, v112) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v111);
        v113 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v113, 1);
        v114 = v113 - 1;
        if (v114 < 0 == v35)
          *((_DWORD *)this + 14) = v114;
        v115 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v115 <= 1 || *v115 != 154 || v115[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v115 + 2;
LABEL_237:
        *(_DWORD *)(a1 + 224) |= 0x800u;
        v116 = *(_QWORD *)(a1 + 88);
        if (!v116)
          operator new();
        v235 = 0;
        v117 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v117 >= *((_QWORD *)this + 2) || *v117 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v117;
          *((_QWORD *)this + 1) = v117 + 1;
        }
        v118 = *((_DWORD *)this + 14);
        v119 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v118 + 1;
        if (v118 >= v119)
          return 0;
        v120 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_10076A470(v116, this, v121) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v120);
        v122 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v122, 1);
        v123 = v122 - 1;
        if (v123 < 0 == v35)
          *((_DWORD *)this + 14) = v123;
        v124 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        if ((int)v19 - (int)v124 <= 1 || *v124 != 160 || v124[1] != 1)
          continue;
        v20 = (char *)(v124 + 2);
        *((_QWORD *)this + 1) = v20;
LABEL_252:
        v235 = 0;
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235);
          if (!(_DWORD)result)
            return result;
          v125 = v235;
        }
        else
        {
          v125 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        if (sub_10010285C(v125))
        {
          if (!sub_10010285C(v125))
            sub_101935D94();
          *(_DWORD *)(a1 + 224) |= 0x2000u;
          *(_DWORD *)(a1 + 100) = v125;
        }
        v126 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v126 < 2 || *v126 != 170 || v126[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v126 + 2;
LABEL_264:
        *(_DWORD *)(a1 + 224) |= 0x4000u;
        v127 = *(_QWORD *)(a1 + 104);
        if (!v127)
          operator new();
        v235 = 0;
        v128 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v128 >= *((_QWORD *)this + 2) || *v128 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v128;
          *((_QWORD *)this + 1) = v128 + 1;
        }
        v129 = *((_DWORD *)this + 14);
        v130 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v129 + 1;
        if (v129 >= v130)
          return 0;
        v131 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F491E0(v127, this, v132) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v131);
        v133 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v133, 1);
        v134 = v133 - 1;
        if (v134 < 0 == v35)
          *((_DWORD *)this + 14) = v134;
        v135 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v25 = *((_QWORD *)this + 2);
        if ((int)v25 - (int)v135 <= 1 || *v135 != 176 || v135[1] != 1)
          continue;
        v26 = (char *)(v135 + 2);
        *((_QWORD *)this + 1) = v26;
LABEL_279:
        v235 = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235);
          if (!(_DWORD)result)
            return result;
          v136 = v235;
        }
        else
        {
          v136 = *v26;
          *((_QWORD *)this + 1) = v26 + 1;
        }
        if (sub_10010285C(v136))
        {
          if (!sub_10010285C(v136))
            sub_101935DBC();
          *(_DWORD *)(a1 + 224) |= 0x1000u;
          *(_DWORD *)(a1 + 96) = v136;
        }
        v137 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v137 < 2 || *v137 != 186 || v137[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v137 + 2;
LABEL_291:
        *(_DWORD *)(a1 + 224) |= 0x8000u;
        v138 = *(_DWORD **)(a1 + 112);
        if (!v138)
          operator new();
        v235 = 0;
        v139 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v139 >= *((_QWORD *)this + 2) || *v139 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v139;
          *((_QWORD *)this + 1) = v139 + 1;
        }
        v140 = *((_DWORD *)this + 14);
        v141 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v140 + 1;
        if (v140 >= v141)
          return 0;
        v142 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F49464(v138, this, v143) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v142);
        v144 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v144, 1);
        v145 = v144 - 1;
        if (v145 < 0 == v35)
          *((_DWORD *)this + 14) = v145;
        v146 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v146 <= 1 || *v146 != 202 || v146[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v146 + 2;
LABEL_306:
        *(_DWORD *)(a1 + 224) |= 0x10000u;
        v147 = *(_QWORD *)(a1 + 120);
        if (!v147)
          operator new();
        v235 = 0;
        v148 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v148 >= *((_QWORD *)this + 2) || *v148 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v148;
          *((_QWORD *)this + 1) = v148 + 1;
        }
        v149 = *((_DWORD *)this + 14);
        v150 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v149 + 1;
        if (v149 >= v150)
          return 0;
        v151 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_100F498F8(v147, this, v152) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v151);
        v153 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v153, 1);
        v154 = v153 - 1;
        if (v154 < 0 == v35)
          *((_DWORD *)this + 14) = v154;
        v155 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v155 <= 1 || *v155 != 242 || v155[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v155 + 2;
LABEL_321:
        *(_DWORD *)(a1 + 224) |= 0x20000u;
        v156 = *(_QWORD *)(a1 + 128);
        if (!v156)
          operator new();
        v235 = 0;
        v157 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v157 >= *((_QWORD *)this + 2) || *v157 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v157;
          *((_QWORD *)this + 1) = v157 + 1;
        }
        v158 = *((_DWORD *)this + 14);
        v159 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v158 + 1;
        if (v158 >= v159)
          return 0;
        v160 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008CAD8C(v156, this, v161) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v160);
        v162 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v162, 1);
        v163 = v162 - 1;
        if (v163 < 0 == v35)
          *((_DWORD *)this + 14) = v163;
        v164 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v164 <= 1 || *v164 != 250 || v164[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v164 + 2;
LABEL_336:
        *(_DWORD *)(a1 + 224) |= 0x40000u;
        v165 = *(void **)(a1 + 136);
        if (v165 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v165);
        if (!(_DWORD)result)
          return result;
        v166 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v166 < 2 || *v166 != 194 || v166[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v166 + 2;
LABEL_343:
        *(_DWORD *)(a1 + 224) |= 0x80000u;
        v167 = *(_QWORD *)(a1 + 144);
        if (!v167)
          operator new();
        v235 = 0;
        v168 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v168 >= *((_QWORD *)this + 2) || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v168;
          *((_QWORD *)this + 1) = v168 + 1;
        }
        v169 = *((_DWORD *)this + 14);
        v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170)
          return 0;
        v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008E59D0(v167, this, v172) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        v173 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v173, 1);
        v174 = v173 - 1;
        if (v174 < 0 == v35)
          *((_DWORD *)this + 14) = v174;
        v175 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v175 <= 1 || *v175 != 202 || v175[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v175 + 2;
LABEL_358:
        *(_DWORD *)(a1 + 224) |= 0x100000u;
        v176 = *(_QWORD *)(a1 + 152);
        if (!v176)
          operator new();
        v235 = 0;
        v177 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v177 >= *((_QWORD *)this + 2) || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v177;
          *((_QWORD *)this + 1) = v177 + 1;
        }
        v178 = *((_DWORD *)this + 14);
        v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179)
          return 0;
        v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008EAA98(v176, this, v181) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        v182 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v182, 1);
        v183 = v182 - 1;
        if (v183 < 0 == v35)
          *((_DWORD *)this + 14) = v183;
        v184 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v184 <= 1 || *v184 != 210 || v184[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v184 + 2;
LABEL_373:
        *(_DWORD *)(a1 + 224) |= 0x200000u;
        v185 = *(_QWORD *)(a1 + 160);
        if (!v185)
          operator new();
        v235 = 0;
        v186 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v186 >= *((_QWORD *)this + 2) || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v186;
          *((_QWORD *)this + 1) = v186 + 1;
        }
        v187 = *((_DWORD *)this + 14);
        v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188)
          return 0;
        v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008F0218(v185, this, v190) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        v191 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v191, 1);
        v192 = v191 - 1;
        if (v192 < 0 == v35)
          *((_DWORD *)this + 14) = v192;
        v193 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v193 <= 1 || *v193 != 218 || v193[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v193 + 2;
LABEL_388:
        *(_DWORD *)(a1 + 224) |= 0x400000u;
        v194 = *(_QWORD *)(a1 + 168);
        if (!v194)
          operator new();
        v235 = 0;
        v195 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v195 >= *((_QWORD *)this + 2) || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v195;
          *((_QWORD *)this + 1) = v195 + 1;
        }
        v196 = *((_DWORD *)this + 14);
        v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197)
          return 0;
        v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008FBB58(v194, this, v199) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        v200 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v200, 1);
        v201 = v200 - 1;
        if (v201 < 0 == v35)
          *((_DWORD *)this + 14) = v201;
        v202 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v202 <= 1 || *v202 != 226 || v202[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v202 + 2;
LABEL_403:
        *(_DWORD *)(a1 + 224) |= 0x800000u;
        v203 = *(_QWORD *)(a1 + 176);
        if (!v203)
          operator new();
        v235 = 0;
        v204 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v204 >= *((_QWORD *)this + 2) || *v204 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v204;
          *((_QWORD *)this + 1) = v204 + 1;
        }
        v205 = *((_DWORD *)this + 14);
        v206 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v205 + 1;
        if (v205 >= v206)
          return 0;
        v207 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008FF194(v203, this, v208) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v207);
        v209 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v209, 1);
        v210 = v209 - 1;
        if (v210 < 0 == v35)
          *((_DWORD *)this + 14) = v210;
        v211 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v211 <= 1 || *v211 != 146 || v211[1] != 3)
          continue;
        *((_QWORD *)this + 1) = v211 + 2;
LABEL_418:
        *(_DWORD *)(a1 + 224) |= 0x1000000u;
        v212 = *(_QWORD *)(a1 + 184);
        if (!v212)
          operator new();
        v235 = 0;
        v213 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v213 >= *((_QWORD *)this + 2) || *v213 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v213;
          *((_QWORD *)this + 1) = v213 + 1;
        }
        v214 = *((_DWORD *)this + 14);
        v215 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v214 + 1;
        if (v214 >= v215)
          return 0;
        v216 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008D3D64(v212, this, v217) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v216);
        v218 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v218, 1);
        v219 = v218 - 1;
        if (v219 < 0 == v35)
          *((_DWORD *)this + 14) = v219;
        v220 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v220 <= 1 || *v220 != 154 || v220[1] != 3)
          continue;
        *((_QWORD *)this + 1) = v220 + 2;
LABEL_433:
        *(_DWORD *)(a1 + 224) |= 0x2000000u;
        v221 = *(_QWORD *)(a1 + 192);
        if (!v221)
          operator new();
        v235 = 0;
        v222 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v222 >= *((_QWORD *)this + 2) || *v222 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v222;
          *((_QWORD *)this + 1) = v222 + 1;
        }
        v223 = *((_DWORD *)this + 14);
        v224 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v223 + 1;
        if (v223 >= v224)
          return 0;
        v225 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008D2080(v221, this, v226) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v225);
        v227 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v227, 1);
        v228 = v227 - 1;
        if (v228 < 0 == v35)
          *((_DWORD *)this + 14) = v228;
        v229 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        if ((int)v27 - (int)v229 <= 1 || *v229 != 160 || v229[1] != 3)
          continue;
        v28 = v229 + 2;
        *((_QWORD *)this + 1) = v28;
LABEL_448:
        if ((unint64_t)v28 >= v27 || (char)*v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v230 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v28;
          v230 = v28 + 1;
          *((_QWORD *)this + 1) = v230;
        }
        *(_DWORD *)(a1 + 224) |= 0x4000000u;
        if ((int)v27 - (int)v230 < 2 || *v230 != 168 || v230[1] != 3)
          continue;
        v29 = (char *)(v230 + 2);
        *((_QWORD *)this + 1) = v29;
LABEL_457:
        v235 = 0;
        if ((unint64_t)v29 >= v27 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235);
          if (!(_DWORD)result)
            return result;
          v231 = v235;
        }
        else
        {
          v231 = *v29;
          *((_QWORD *)this + 1) = v29 + 1;
        }
        if (v231 <= 4 && v231 != 3)
        {
          *(_DWORD *)(a1 + 224) |= 0x8000000u;
          *(_DWORD *)(a1 + 204) = v231;
        }
        v233 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((int)v13 - (int)v233 < 2 || *v233 != 176 || v233[1] != 3)
          continue;
        v14 = v233 + 2;
        *((_QWORD *)this + 1) = v14;
LABEL_471:
        if ((unint64_t)v14 >= v13 || (char)*v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v234 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v7 = *v14;
          v234 = v14 + 1;
          *((_QWORD *)this + 1) = v234;
        }
        v21 = *(_DWORD *)(a1 + 224) | 0x10000000;
        *(_DWORD *)(a1 + 224) = v21;
        if ((int)v13 - (int)v234 < 2 || *v234 != 186 || v234[1] != 3)
          continue;
        *((_QWORD *)this + 1) = v234 + 2;
LABEL_45:
        *(_DWORD *)(a1 + 224) = v21 | 0x20000000;
        v22 = *(_QWORD *)(a1 + 208);
        if (!v22)
          operator new();
        v235 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v235))return 0;
        }
        else
        {
          v235 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v30 = *((_DWORD *)this + 14);
        v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31)
          return 0;
        v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v235);
        if (!sub_1008CEF24(v22, this, v33) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        v34 = *((_DWORD *)this + 14);
        v35 = __OFSUB__(v34, 1);
        v36 = v34 - 1;
        if (v36 < 0 == v35)
          *((_DWORD *)this + 14) = v36;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_113;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_75;
        v24 = *(_DWORD *)(a1 + 224);
        goto LABEL_121;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_135;
        goto LABEL_75;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_149;
        goto LABEL_75;
      case 9u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_163;
        goto LABEL_75;
      case 0xAu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_177;
        goto LABEL_75;
      case 0x10u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_192;
        goto LABEL_75;
      case 0x11u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_207;
        goto LABEL_75;
      case 0x12u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_222;
        goto LABEL_75;
      case 0x13u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_237;
        goto LABEL_75;
      case 0x14u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v20 = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_252;
      case 0x15u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_264;
        goto LABEL_75;
      case 0x16u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v26 = (char *)*((_QWORD *)this + 1);
        v25 = *((_QWORD *)this + 2);
        goto LABEL_279;
      case 0x17u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_291;
        goto LABEL_75;
      case 0x19u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_306;
        goto LABEL_75;
      case 0x1Eu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_321;
        goto LABEL_75;
      case 0x1Fu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_336;
        goto LABEL_75;
      case 0x28u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_343;
        goto LABEL_75;
      case 0x29u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_358;
        goto LABEL_75;
      case 0x2Au:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_373;
        goto LABEL_75;
      case 0x2Bu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_388;
        goto LABEL_75;
      case 0x2Cu:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_403;
        goto LABEL_75;
      case 0x32u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_418;
        goto LABEL_75;
      case 0x33u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_433;
        goto LABEL_75;
      case 0x34u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v28 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        goto LABEL_448;
      case 0x35u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v29 = (char *)*((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        goto LABEL_457;
      case 0x36u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_75;
        v14 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        goto LABEL_471;
      case 0x37u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_75;
        v21 = *(_DWORD *)(a1 + 224);
        goto LABEL_45;
      default:
        v10 = TagFallback & 7;
LABEL_75:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

void sub_1000F5C08()
{
  operator delete();
}

double sub_1000F5D3C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102151C60;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

uint64_t sub_1000F5D5C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t result;
  unsigned int v42;
  unsigned int v43;

  v5 = (unint64_t *)(a1 + 32);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        *(_DWORD *)(a1 + 48) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v43 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_1000F6B00(v9, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 18)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
        goto LABEL_35;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
LABEL_35:
        *(_DWORD *)(a1 + 48) |= 2u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v43 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_1000F6578(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 26)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 48) |= 4u;
        v31 = *(_QWORD *)(a1 + 24);
        if (!v31)
          operator new();
        v43 = 0;
        v32 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)this + 14);
        v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_1000F6294(v31, this, v36) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        v37 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v19)
          *((_DWORD *)this + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v39 < v11 && *v39 == 32)
        {
          v12 = v39 + 1;
          *((_QWORD *)this + 1) = v12;
LABEL_63:
          if ((unint64_t)v12 >= v11 || *v12 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v40 = (_BYTE *)*((_QWORD *)this + 1);
            v11 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v12;
            v40 = v12 + 1;
            *((_QWORD *)this + 1) = v40;
          }
          *(_DWORD *)(a1 + 48) |= 8u;
          if ((unint64_t)v40 < v11 && *v40 == 40)
          {
            v13 = v40 + 1;
            *((_QWORD *)this + 1) = v13;
LABEL_71:
            v43 = 0;
            if ((unint64_t)v13 >= v11 || *v13 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
              if (!(_DWORD)result)
                return result;
              v42 = v43;
            }
            else
            {
              v42 = *v13;
              *((_QWORD *)this + 1) = v13 + 1;
            }
            if (v42 <= 4)
            {
              *(_DWORD *)(a1 + 48) |= 0x10u;
              *(_DWORD *)(a1 + 40) = v42;
            }
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_49;
        goto LABEL_22;
      case 4u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_63;
      case 5u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_71;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000F6294(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t result;
  unint64_t v14;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_39;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v14;
        *(_DWORD *)(a1 + 60) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_39;
LABEL_14:
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 60) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v14;
        *(_DWORD *)(a1 + 60) |= 4u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 33)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_24:
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 32) = v14;
        *(_DWORD *)(a1 + 60) |= 8u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 41)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
LABEL_29:
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 40) = v14;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 49)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_34:
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 48) = v14;
        *(_DWORD *)(a1 + 60) |= 0x20u;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_39;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_24;
        goto LABEL_39;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_29;
        goto LABEL_39;
      case 6u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_34;
        goto LABEL_39;
      default:
        v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

uint64_t sub_1000F6578(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t result;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30[2];

  v5 = (unsigned int *)(a1 + 72);
  v6 = (unint64_t *)(a1 + 80);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_59;
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 17)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_59;
LABEL_15:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 25)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
LABEL_20:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 33)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_25:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 8u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 41)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 0x10u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 49)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_35:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 0x20u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 57)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_40:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)v30;
        *(_DWORD *)(a1 + 96) |= 0x40u;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 != 65)
          continue;
        *((_QWORD *)this + 1) = v16 + 1;
LABEL_45:
        *(_QWORD *)v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) != 0)
        {
          *(_QWORD *)(a1 + 64) = *(_QWORD *)v30;
          *(_DWORD *)(a1 + 96) |= 0x80u;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v17 && *v18 == 72)
          {
            v19 = v18 + 1;
            *((_QWORD *)this + 1) = v19;
LABEL_51:
            if ((unint64_t)v19 >= v17 || *v19 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!(_DWORD)result)
                return result;
              v20 = (_BYTE *)*((_QWORD *)this + 1);
              v17 = *((_QWORD *)this + 2);
            }
            else
            {
              *v5 = *v19;
              v20 = v19 + 1;
              *((_QWORD *)this + 1) = v20;
            }
            *(_DWORD *)(a1 + 96) |= 0x100u;
            if ((unint64_t)v20 < v17 && *v20 == 80)
            {
              v21 = v20 + 1;
              *((_QWORD *)this + 1) = v21;
LABEL_68:
              v30[0] = 0;
              if ((unint64_t)v21 >= v17 || *v21 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30);
                if (!(_DWORD)result)
                  return result;
                v26 = v30[0];
              }
              else
              {
                v26 = *v21;
                *((_QWORD *)this + 1) = v21 + 1;
              }
              if (sub_100106054(v26))
              {
                *(_DWORD *)(a1 + 96) |= 0x200u;
                *(_DWORD *)(a1 + 76) = v26;
              }
              v27 = (_BYTE *)*((_QWORD *)this + 1);
              v22 = *((_QWORD *)this + 2);
              if ((unint64_t)v27 < v22 && *v27 == 88)
              {
                v23 = v27 + 1;
                *((_QWORD *)this + 1) = v23;
LABEL_78:
                if ((unint64_t)v23 >= v22 || *v23 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
                  if (!(_DWORD)result)
                    return result;
                  v28 = (_BYTE *)*((_QWORD *)this + 1);
                  v22 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v6 = *v23;
                  v28 = v23 + 1;
                  *((_QWORD *)this + 1) = v28;
                }
                *(_DWORD *)(a1 + 96) |= 0x400u;
                if ((unint64_t)v28 < v22 && *v28 == 96)
                {
                  v24 = v28 + 1;
                  *((_QWORD *)this + 1) = v24;
LABEL_86:
                  v30[0] = 0;
                  if ((unint64_t)v24 >= v22 || *v24 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30);
                    if (!(_DWORD)result)
                      return result;
                    v29 = v30[0];
                  }
                  else
                  {
                    v29 = *v24;
                    *((_QWORD *)this + 1) = v24 + 1;
                  }
                  if (v29 <= 5)
                  {
                    *(_DWORD *)(a1 + 96) |= 0x800u;
                    *(_DWORD *)(a1 + 88) = v29;
                  }
                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    result = 1;
                    *((_BYTE *)this + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_20;
        goto LABEL_59;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_25;
        goto LABEL_59;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_30;
        goto LABEL_59;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_35;
        goto LABEL_59;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_40;
        goto LABEL_59;
      case 8u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_45;
        goto LABEL_59;
      case 9u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v19 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_51;
      case 0xAu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v21 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_68;
      case 0xBu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v23 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_78;
      case 0xCu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_59;
        v24 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_86;
      default:
        v9 = TagFallback & 7;
LABEL_59:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000F6B00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t result;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  unsigned int v33[2];

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 24);
  v7 = (unint64_t *)(a1 + 48);
  v8 = (unint64_t *)(a1 + 56);
  while (2)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 21)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_37;
        }
        continue;
      case 2u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_28;
LABEL_37:
        v33[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v33) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 16) = v33[0];
        *(_DWORD *)(a1 + 72) |= 2u;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v15 || *v23 != 24)
          continue;
        v16 = v23 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_41:
        v33[0] = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
          if (!(_DWORD)result)
            return result;
          v24 = v33[0];
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v16;
          v25 = v16 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 20) = v24 != 0;
        *(_DWORD *)(a1 + 72) |= 4u;
        if ((unint64_t)v25 >= v15 || *v25 != 32)
          continue;
        v17 = v25 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_49:
        v33[0] = 0;
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
          if (!(_DWORD)result)
            return result;
          v26 = v33[0];
          v27 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          v26 = *v17;
          v27 = v17 + 1;
          *((_QWORD *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 64) = v26;
        *(_DWORD *)(a1 + 72) |= 8u;
        if ((unint64_t)v27 >= v15 || *v27 != 40)
          continue;
        v18 = v27 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_57:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)this + 1);
          v15 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v18;
          v28 = v18 + 1;
          *((_QWORD *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 72) |= 0x10u;
        if ((unint64_t)v28 >= v15 || *v28 != 49)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_65:
        *(_QWORD *)v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v33) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)v33;
        *(_DWORD *)(a1 + 72) |= 0x20u;
        v29 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 != 57)
          continue;
        *((_QWORD *)this + 1) = v29 + 1;
LABEL_69:
        *(_QWORD *)v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v33) & 1) != 0)
        {
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v33;
          *(_DWORD *)(a1 + 72) |= 0x40u;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v30 < v19 && *v30 == 64)
          {
            v20 = v30 + 1;
            *((_QWORD *)this + 1) = v20;
LABEL_73:
            if ((unint64_t)v20 >= v19 || *v20 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
              if (!(_DWORD)result)
                return result;
              v31 = (_BYTE *)*((_QWORD *)this + 1);
              v19 = *((_QWORD *)this + 2);
            }
            else
            {
              *v7 = *v20;
              v31 = v20 + 1;
              *((_QWORD *)this + 1) = v31;
            }
            *(_DWORD *)(a1 + 72) |= 0x80u;
            if ((unint64_t)v31 < v19 && *v31 == 72)
            {
              v21 = v31 + 1;
              *((_QWORD *)this + 1) = v21;
LABEL_81:
              if ((unint64_t)v21 >= v19 || *v21 < 0)
              {
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v8);
                if (!(_DWORD)result)
                  return result;
                v32 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v19 = *((_QWORD *)this + 2);
              }
              else
              {
                *v8 = *v21;
                v32 = (unsigned __int8 *)(v21 + 1);
                *((_QWORD *)this + 1) = v32;
              }
              *(_DWORD *)(a1 + 72) |= 0x100u;
              if (v32 == (unsigned __int8 *)v19
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_41;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v17 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_49;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v18 = (char *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        goto LABEL_57;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 == 1)
          goto LABEL_65;
        goto LABEL_28;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 == 1)
          goto LABEL_69;
        goto LABEL_28;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v20 = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_73;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v21 = (char *)*((_QWORD *)this + 1);
        v19 = *((_QWORD *)this + 2);
        goto LABEL_81;
      default:
        v11 = TagFallback & 7;
LABEL_28:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

double sub_1000F6FB4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102186468;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_1000F6FF0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _DWORD *v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  _BYTE *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  _BYTE *v86;
  uint64_t result;
  unsigned int v88[2];

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_30;
        *(_DWORD *)(a1 + 132) |= 1u;
        v11 = *(_QWORD *)(a1 + 8);
        if (!v11)
          operator new();
        v88[0] = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
        }
        else
        {
          v88[0] = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
        if (!sub_1000FA548(v11, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 18)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
        goto LABEL_42;
      case 2u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_30;
LABEL_42:
        *(_DWORD *)(a1 + 132) |= 2u;
        v22 = *(_QWORD *)(a1 + 16);
        if (!v22)
          operator new();
        v88[0] = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
        }
        else
        {
          v88[0] = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
        if (!sub_1000FA70C(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 26)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v30 + 1;
LABEL_56:
          v31 = *(_DWORD *)(a1 + 36);
          v32 = *(int *)(a1 + 32);
          if ((int)v32 >= v31)
          {
            if (v31 == *(_DWORD *)(a1 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v31 + 1);
              v31 = *(_DWORD *)(a1 + 36);
            }
            *(_DWORD *)(a1 + 36) = v31 + 1;
            operator new();
          }
          v33 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v32 + 1;
          v34 = *(_QWORD *)(v33 + 8 * v32);
          v88[0] = 0;
          v35 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v35 >= *((_QWORD *)this + 2) || *v35 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
          }
          else
          {
            v88[0] = *v35;
            *((_QWORD *)this + 1) = v35 + 1;
          }
          v36 = *((_DWORD *)this + 14);
          v37 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v36 + 1;
          if (v36 >= v37)
            return 0;
          v38 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
          if (!sub_1000F7A10(v34, this, v39) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v38);
          v40 = *((_DWORD *)this + 14);
          v19 = __OFSUB__(v40, 1);
          v41 = v40 - 1;
          if (v41 < 0 == v19)
            *((_DWORD *)this + 14) = v41;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v30 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v42 = *v30;
        }
        while (v42 == 26);
        if (v42 != 34)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v30 + 1;
LABEL_74:
          v43 = *(_DWORD *)(a1 + 60);
          v44 = *(int *)(a1 + 56);
          if ((int)v44 >= v43)
          {
            if (v43 == *(_DWORD *)(a1 + 64))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v43 + 1);
              v43 = *(_DWORD *)(a1 + 60);
            }
            *(_DWORD *)(a1 + 60) = v43 + 1;
            operator new();
          }
          v45 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 56) = v44 + 1;
          v46 = *(_QWORD *)(v45 + 8 * v44);
          v88[0] = 0;
          v47 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v47 >= *((_QWORD *)this + 2) || *v47 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
          }
          else
          {
            v88[0] = *v47;
            *((_QWORD *)this + 1) = v47 + 1;
          }
          v48 = *((_DWORD *)this + 14);
          v49 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v48 + 1;
          if (v48 >= v49)
            return 0;
          v50 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
          if (!sub_1000F9834(v46, this, v51) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v50);
          v52 = *((_DWORD *)this + 14);
          v19 = __OFSUB__(v52, 1);
          v53 = v52 - 1;
          if (v53 < 0 == v19)
            *((_DWORD *)this + 14) = v53;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v30 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v54 = *v30;
        }
        while (v54 == 34);
        if (v54 != 42)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_92:
        *(_DWORD *)(a1 + 132) |= 0x10u;
        v55 = *(_QWORD *)(a1 + 72);
        if (!v55)
          operator new();
        v88[0] = 0;
        v56 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v56 >= *((_QWORD *)this + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
        }
        else
        {
          v88[0] = *v56;
          *((_QWORD *)this + 1) = v56 + 1;
        }
        v57 = *((_DWORD *)this + 14);
        v58 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v57 + 1;
        if (v57 >= v58)
          return 0;
        v59 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
        if (!sub_1000F9F08(v55, this, v60) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v59);
        v61 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v61, 1);
        v62 = v61 - 1;
        if (v62 < 0 == v19)
          *((_DWORD *)this + 14) = v62;
        v63 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v63 >= *((_QWORD *)this + 2) || *v63 != 49)
          continue;
        *((_QWORD *)this + 1) = v63 + 1;
LABEL_106:
        *(_QWORD *)v88 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v88) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)v88;
        *(_DWORD *)(a1 + 132) |= 0x20u;
        v64 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v64 >= *((_QWORD *)this + 2) || *v64 != 57)
          continue;
        *((_QWORD *)this + 1) = v64 + 1;
LABEL_110:
        *(_QWORD *)v88 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v88) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)v88;
        v13 = *(_DWORD *)(a1 + 132) | 0x40;
        *(_DWORD *)(a1 + 132) = v13;
        v65 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v65 >= *((_QWORD *)this + 2) || *v65 != 66)
          continue;
        *((_QWORD *)this + 1) = v65 + 1;
LABEL_114:
        *(_DWORD *)(a1 + 132) = v13 | 0x80;
        v66 = *(_DWORD **)(a1 + 96);
        if (!v66)
          operator new();
        v88[0] = 0;
        v67 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v67 >= *((_QWORD *)this + 2) || *v67 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
        }
        else
        {
          v88[0] = *v67;
          *((_QWORD *)this + 1) = v67 + 1;
        }
        v68 = *((_DWORD *)this + 14);
        v69 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v68 + 1;
        if (v68 >= v69)
          return 0;
        v70 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
        if (!sub_1000F9B04(v66, this, v71) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v70);
        v72 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v72, 1);
        v73 = v72 - 1;
        if (v73 < 0 == v19)
          *((_DWORD *)this + 14) = v73;
        v74 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v74 < *((_QWORD *)this + 2) && *v74 == 74)
        {
          do
          {
            *((_QWORD *)this + 1) = v74 + 1;
LABEL_128:
            v75 = *(_DWORD *)(a1 + 116);
            v76 = *(int *)(a1 + 112);
            if ((int)v76 >= v75)
            {
              if (v75 == *(_DWORD *)(a1 + 120))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v75 + 1);
                v75 = *(_DWORD *)(a1 + 116);
              }
              *(_DWORD *)(a1 + 116) = v75 + 1;
              operator new();
            }
            v77 = *(_QWORD *)(a1 + 104);
            *(_DWORD *)(a1 + 112) = v76 + 1;
            v78 = *(_QWORD *)(v77 + 8 * v76);
            v88[0] = 0;
            v79 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v79 >= *((_QWORD *)this + 2) || *v79 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v88))return 0;
            }
            else
            {
              v88[0] = *v79;
              *((_QWORD *)this + 1) = v79 + 1;
            }
            v80 = *((_DWORD *)this + 14);
            v81 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v80 + 1;
            if (v80 >= v81)
              return 0;
            v82 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v88[0]);
            if (!sub_100DB9244(v78, this, v83) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v82);
            v84 = *((_DWORD *)this + 14);
            v19 = __OFSUB__(v84, 1);
            v85 = v84 - 1;
            if (v85 < 0 == v19)
              *((_DWORD *)this + 14) = v85;
            v74 = (_BYTE *)*((_QWORD *)this + 1);
            v86 = (_BYTE *)*((_QWORD *)this + 2);
          }
          while (v74 < v86 && *v74 == 74);
          if (v74 == v86 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_56;
        goto LABEL_30;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_74;
        goto LABEL_30;
      case 5u:
        v10 = TagFallback & 7;
        if (v10 == 2)
          goto LABEL_92;
        goto LABEL_30;
      case 6u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_106;
        goto LABEL_30;
      case 7u:
        v10 = TagFallback & 7;
        if (v10 == 1)
          goto LABEL_110;
        goto LABEL_30;
      case 8u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_30;
        v13 = *(_DWORD *)(a1 + 132);
        goto LABEL_114;
      case 9u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_30;
        goto LABEL_128;
      default:
        v10 = TagFallback & 7;
LABEL_30:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000F7A10(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  unsigned int v37;
  uint64_t result;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  int v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned int v73;
  _BYTE *v74;
  unsigned int v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unsigned __int8 *v99;
  unsigned int v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned __int8 *v107;
  unsigned int v108[2];

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 104);
LABEL_2:
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_62;
        *(_DWORD *)(a1 + 172) |= 1u;
        v10 = *(_QWORD *)(a1 + 8);
        if (!v10)
          operator new();
        v108[0] = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108))return 0;
        }
        else
        {
          v108[0] = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v39 = *((_DWORD *)this + 14);
        v40 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v39 + 1;
        if (v39 >= v40)
          return 0;
        v41 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v108[0]);
        if (!sub_1000F909C(v10, this, v42) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v41);
        v43 = *((_DWORD *)this + 14);
        v44 = __OFSUB__(v43, 1);
        v45 = v43 - 1;
        if (v45 < 0 == v44)
          *((_DWORD *)this + 14) = v45;
        v46 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 != 17)
          continue;
        *((_QWORD *)this + 1) = v46 + 1;
        goto LABEL_86;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_62;
LABEL_86:
        *(_QWORD *)v108 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v108) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v108;
        *(_DWORD *)(a1 + 172) |= 2u;
        v47 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v47 >= v12 || *v47 != 24)
          continue;
        v13 = v47 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_90:
        v108[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v48 = v108[0];
        }
        else
        {
          v48 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v48 <= 6)
        {
          *(_DWORD *)(a1 + 172) |= 4u;
          *(_DWORD *)(a1 + 56) = v48;
        }
        v49 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v49 >= *((_QWORD *)this + 2) || *v49 != 34)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v49 + 1;
LABEL_100:
          v50 = *(_DWORD *)(a1 + 36);
          v51 = *(int *)(a1 + 32);
          if ((int)v51 >= v50)
          {
            if (v50 == *(_DWORD *)(a1 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v50 + 1);
              v50 = *(_DWORD *)(a1 + 36);
            }
            *(_DWORD *)(a1 + 36) = v50 + 1;
            operator new();
          }
          v52 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v51 + 1;
          v53 = *(_QWORD *)(v52 + 8 * v51);
          v108[0] = 0;
          v54 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v54 >= *((_QWORD *)this + 2) || *v54 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108))return 0;
          }
          else
          {
            v108[0] = *v54;
            *((_QWORD *)this + 1) = v54 + 1;
          }
          v55 = *((_DWORD *)this + 14);
          v56 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v55 + 1;
          if (v55 >= v56)
            return 0;
          v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v108[0]);
          if (!sub_1000F88DC(v53, this, v58) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
          v59 = *((_DWORD *)this + 14);
          v44 = __OFSUB__(v59, 1);
          v60 = v59 - 1;
          if (v60 < 0 == v44)
            *((_DWORD *)this + 14) = v60;
          v49 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v49 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v61 = *v49;
        }
        while (v61 == 34);
        if (v61 != 41)
          continue;
        *((_QWORD *)this + 1) = v49 + 1;
LABEL_118:
        *(_QWORD *)v108 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v108) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)v108;
        *(_DWORD *)(a1 + 172) |= 0x10u;
        v62 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v62 >= *((_QWORD *)this + 2) || *v62 != 49)
          continue;
        *((_QWORD *)this + 1) = v62 + 1;
LABEL_122:
        *(_QWORD *)v108 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v108) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)v108;
        *(_DWORD *)(a1 + 172) |= 0x20u;
        v63 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v63 >= *((_QWORD *)this + 2) || *v63 != 57)
          continue;
        *((_QWORD *)this + 1) = v63 + 1;
LABEL_126:
        *(_QWORD *)v108 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v108) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v108;
        *(_DWORD *)(a1 + 172) |= 0x40u;
        v64 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v64 >= *((_QWORD *)this + 2) || *v64 != 69)
          continue;
        *((_QWORD *)this + 1) = v64 + 1;
LABEL_130:
        v108[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v108) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 60) = v108[0];
        *(_DWORD *)(a1 + 172) |= 0x80u;
        v65 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v65 >= *((_QWORD *)this + 2) || *v65 != 77)
          continue;
        *((_QWORD *)this + 1) = v65 + 1;
LABEL_134:
        v108[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v108) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 80) = v108[0];
        *(_DWORD *)(a1 + 172) |= 0x100u;
        v66 = (_BYTE *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v66 >= v14 || *v66 != 80)
          continue;
        v15 = v66 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_138:
        v108[0] = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v67 = v108[0];
        }
        else
        {
          v67 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        if (v67 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x200u;
          *(_DWORD *)(a1 + 84) = v67;
        }
        v68 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v68 >= v16 || *v68 != 88)
          continue;
        v17 = v68 + 1;
        *((_QWORD *)this + 1) = v17;
LABEL_148:
        v108[0] = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v69 = v108[0];
        }
        else
        {
          v69 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        if (v69 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x400u;
          *(_DWORD *)(a1 + 88) = v69;
        }
        v70 = (_BYTE *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        if ((unint64_t)v70 >= v18 || *v70 != 96)
          continue;
        v19 = v70 + 1;
        *((_QWORD *)this + 1) = v19;
LABEL_158:
        v108[0] = 0;
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v71 = v108[0];
        }
        else
        {
          v71 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        if (v71 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x800u;
          *(_DWORD *)(a1 + 92) = v71;
        }
        v72 = (_BYTE *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        if ((unint64_t)v72 >= v20 || *v72 != 104)
          continue;
        v21 = v72 + 1;
        *((_QWORD *)this + 1) = v21;
LABEL_168:
        v108[0] = 0;
        if ((unint64_t)v21 >= v20 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v73 = v108[0];
        }
        else
        {
          v73 = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        if (v73 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x1000u;
          *(_DWORD *)(a1 + 96) = v73;
        }
        v74 = (_BYTE *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        if ((unint64_t)v74 >= v22 || *v74 != 112)
          continue;
        v23 = v74 + 1;
        *((_QWORD *)this + 1) = v23;
LABEL_178:
        v108[0] = 0;
        if ((unint64_t)v23 >= v22 || *v23 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v75 = v108[0];
        }
        else
        {
          v75 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        if (v75 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x2000u;
          *(_DWORD *)(a1 + 100) = v75;
        }
        v76 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 != 122)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v76 + 1;
LABEL_188:
          v77 = *(_DWORD *)(a1 + 116);
          v78 = *(int *)(a1 + 112);
          if ((int)v78 >= v77)
          {
            if (v77 == *(_DWORD *)(a1 + 120))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v77 + 1);
              v77 = *(_DWORD *)(a1 + 116);
            }
            *(_DWORD *)(a1 + 116) = v77 + 1;
            operator new();
          }
          v79 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(a1 + 112) = v78 + 1;
          v80 = *(_QWORD *)(v79 + 8 * v78);
          v108[0] = 0;
          v81 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v81 >= *((_QWORD *)this + 2) || *v81 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108))return 0;
          }
          else
          {
            v108[0] = *v81;
            *((_QWORD *)this + 1) = v81 + 1;
          }
          v82 = *((_DWORD *)this + 14);
          v83 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v82 + 1;
          if (v82 >= v83)
            return 0;
          v84 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v108[0]);
          if (!sub_1000F8D40(v80, this, v85) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v84);
          v86 = *((_DWORD *)this + 14);
          v44 = __OFSUB__(v86, 1);
          v87 = v86 - 1;
          if (v87 < 0 == v44)
            *((_DWORD *)this + 14) = v87;
          v76 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v88 = *((_QWORD *)this + 2);
        }
        while ((unint64_t)v76 < v88 && *v76 == 122);
        if ((int)v88 - (int)v76 < 2 || *v76 != 130 || v76[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v76 + 2;
LABEL_208:
        *(_DWORD *)(a1 + 172) |= 0x8000u;
        v89 = *(_QWORD *)(a1 + 128);
        if (!v89)
          operator new();
        v108[0] = 0;
        v90 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v90 >= *((_QWORD *)this + 2) || *v90 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108))return 0;
        }
        else
        {
          v108[0] = *v90;
          *((_QWORD *)this + 1) = v90 + 1;
        }
        v91 = *((_DWORD *)this + 14);
        v92 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v91 + 1;
        if (v91 >= v92)
          return 0;
        v93 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v108[0]);
        if (!sub_100DB3D78(v89, this, v94) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v93);
        v95 = *((_DWORD *)this + 14);
        v44 = __OFSUB__(v95, 1);
        v96 = v95 - 1;
        if (v96 < 0 == v44)
          *((_DWORD *)this + 14) = v96;
        v97 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        if ((int)v24 - (int)v97 <= 1 || *v97 != 144 || v97[1] != 1)
          continue;
        v25 = (char *)(v97 + 2);
        *((_QWORD *)this + 1) = v25;
LABEL_223:
        v108[0] = 0;
        if ((unint64_t)v25 >= v24 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v98 = v108[0];
        }
        else
        {
          v98 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        if (v98 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x10000u;
          *(_DWORD *)(a1 + 136) = v98;
        }
        v99 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        if ((int)v26 - (int)v99 < 2 || *v99 != 152 || v99[1] != 1)
          continue;
        v27 = (char *)(v99 + 2);
        *((_QWORD *)this + 1) = v27;
LABEL_234:
        v108[0] = 0;
        if ((unint64_t)v27 >= v26 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v100 = v108[0];
        }
        else
        {
          v100 = *v27;
          *((_QWORD *)this + 1) = v27 + 1;
        }
        if (v100 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x20000u;
          *(_DWORD *)(a1 + 140) = v100;
        }
        v101 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        if ((int)v28 - (int)v101 < 2 || *v101 != 160 || v101[1] != 1)
          continue;
        v29 = (char *)(v101 + 2);
        *((_QWORD *)this + 1) = v29;
LABEL_245:
        v108[0] = 0;
        if ((unint64_t)v29 >= v28 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v102 = v108[0];
        }
        else
        {
          v102 = *v29;
          *((_QWORD *)this + 1) = v29 + 1;
        }
        if (v102 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x40000u;
          *(_DWORD *)(a1 + 144) = v102;
        }
        v103 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        if ((int)v30 - (int)v103 < 2 || *v103 != 168 || v103[1] != 1)
          continue;
        v31 = (char *)(v103 + 2);
        *((_QWORD *)this + 1) = v31;
LABEL_256:
        v108[0] = 0;
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v104 = v108[0];
        }
        else
        {
          v104 = *v31;
          *((_QWORD *)this + 1) = v31 + 1;
        }
        if (v104 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x80000u;
          *(_DWORD *)(a1 + 148) = v104;
        }
        v105 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        if ((int)v32 - (int)v105 < 2 || *v105 != 176 || v105[1] != 1)
          continue;
        v33 = (char *)(v105 + 2);
        *((_QWORD *)this + 1) = v33;
LABEL_267:
        v108[0] = 0;
        if ((unint64_t)v33 >= v32 || *v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
          if (!(_DWORD)result)
            return result;
          v106 = v108[0];
        }
        else
        {
          v106 = *v33;
          *((_QWORD *)this + 1) = v33 + 1;
        }
        if (v106 <= 4)
        {
          *(_DWORD *)(a1 + 172) |= 0x100000u;
          *(_DWORD *)(a1 + 160) = v106;
        }
        v107 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v107 < 2 || *v107 != 185 || v107[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v107 + 2;
LABEL_56:
        *(_QWORD *)v108 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v108) & 1) != 0)
        {
          *(_QWORD *)(a1 + 152) = *(_QWORD *)v108;
          *(_DWORD *)(a1 + 172) |= 0x200000u;
          v35 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v34 = *((_QWORD *)this + 2);
          if ((int)v34 - (int)v35 >= 2 && *v35 == 192 && v35[1] == 1)
          {
            v36 = (char *)(v35 + 2);
            *((_QWORD *)this + 1) = v36;
LABEL_66:
            v108[0] = 0;
            if ((unint64_t)v36 >= v34 || *v36 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v108);
              if (!(_DWORD)result)
                return result;
              v37 = v108[0];
            }
            else
            {
              v37 = *v36;
              *((_QWORD *)this + 1) = v36 + 1;
            }
            if (v37 <= 3)
            {
              *(_DWORD *)(a1 + 172) |= 0x400000u;
              *(_DWORD *)(a1 + 164) = v37;
            }
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_90;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_100;
        goto LABEL_62;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_118;
        goto LABEL_62;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_122;
        goto LABEL_62;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_126;
        goto LABEL_62;
      case 8u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_130;
        goto LABEL_62;
      case 9u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_134;
        goto LABEL_62;
      case 0xAu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_138;
      case 0xBu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_148;
      case 0xCu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v19 = (char *)*((_QWORD *)this + 1);
        v18 = *((_QWORD *)this + 2);
        goto LABEL_158;
      case 0xDu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v21 = (char *)*((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 2);
        goto LABEL_168;
      case 0xEu:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v23 = (char *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        goto LABEL_178;
      case 0xFu:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_188;
        goto LABEL_62;
      case 0x10u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_208;
        goto LABEL_62;
      case 0x12u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v25 = (char *)*((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        goto LABEL_223;
      case 0x13u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v27 = (char *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        goto LABEL_234;
      case 0x14u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v29 = (char *)*((_QWORD *)this + 1);
        v28 = *((_QWORD *)this + 2);
        goto LABEL_245;
      case 0x15u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v31 = (char *)*((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        goto LABEL_256;
      case 0x16u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v33 = (char *)*((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        goto LABEL_267;
      case 0x17u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_56;
        goto LABEL_62;
      case 0x18u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_62;
        v36 = (char *)*((_QWORD *)this + 1);
        v34 = *((_QWORD *)this + 2);
        goto LABEL_66;
      default:
        v9 = TagFallback & 7;
LABEL_62:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000F88DC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unint64_t v20;
  unsigned int v21;

  while (1)
  {
    do
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 == 1)
          break;
        if (TagFallback >> 3 == 2)
        {
          v7 = TagFallback & 7;
          if (v7 == 2)
          {
            v8 = *(_DWORD *)(a1 + 28);
            goto LABEL_15;
          }
        }
        else
        {
          v7 = TagFallback & 7;
        }
LABEL_21:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
      v7 = TagFallback & 7;
      if (v7 != 1)
        goto LABEL_21;
      v20 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 8) = v20;
      v8 = *(_DWORD *)(a1 + 28) | 1;
      *(_DWORD *)(a1 + 28) = v8;
      v9 = (_BYTE *)*((_QWORD *)this + 1);
    }
    while ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 18);
    *((_QWORD *)this + 1) = v9 + 1;
LABEL_15:
    *(_DWORD *)(a1 + 28) = v8 | 2;
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      operator new();
    v21 = 0;
    v11 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21))
        return 0;
    }
    else
    {
      v21 = *v11;
      *((_QWORD *)this + 1) = v11 + 1;
    }
    v12 = *((_DWORD *)this + 14);
    v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13)
      return 0;
    v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v21);
    if (!sub_1000F8B08(v10, this, v15) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    v16 = *((_DWORD *)this + 14);
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v18 < 0 == v17)
      *((_DWORD *)this + 14) = v18;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1000F8B08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

void sub_1000F8CCC()
{
  operator new();
}

void sub_1000F8D08()
{
  operator delete();
}

_QWORD *sub_1000F8D2C(_QWORD *result)
{
  *result = &off_102185B80;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_1000F8D40(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v18[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v18);
          if (!(_DWORD)result)
            return result;
          v9 = v18[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 0xC)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 24) = v9;
        }
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 < *((_QWORD *)this + 2) && *v13 == 17)
        {
          *((_QWORD *)this + 1) = v13 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_19;
LABEL_30:
        *(_QWORD *)v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v18) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v18;
        *(_DWORD *)(a1 + 44) |= 2u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 25)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_34:
        *(_QWORD *)v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v18) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v18;
        *(_DWORD *)(a1 + 44) |= 4u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 33)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_38:
        *(_QWORD *)v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v18) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)v18;
          *(_DWORD *)(a1 + 44) |= 8u;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v16 < v10 && *v16 == 40)
          {
            v11 = v16 + 1;
            *((_QWORD *)this + 1) = v11;
LABEL_42:
            v18[0] = 0;
            if ((unint64_t)v11 >= v10 || *v11 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v18);
              if (!(_DWORD)result)
                return result;
              v17 = v18[0];
            }
            else
            {
              v17 = *v11;
              *((_QWORD *)this + 1) = v11 + 1;
            }
            if (v17 <= 2)
            {
              *(_DWORD *)(a1 + 44) |= 0x10u;
              *(_DWORD *)(a1 + 28) = v17;
            }
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_34;
        goto LABEL_19;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_38;
        goto LABEL_19;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_42;
      default:
        v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_1000F901C()
{
  operator new();
}

void sub_1000F9058()
{
  operator delete();
}

double sub_1000F907C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185B08;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1000F909C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;

  v5 = (unsigned int *)(a1 + 16);
  while (1)
  {
    do
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 == 1)
          break;
        if (TagFallback >> 3 == 2)
        {
          v8 = TagFallback & 7;
          if (v8 == 2)
          {
            v9 = *(_DWORD *)(a1 + 24);
            goto LABEL_24;
          }
        }
        else
        {
          v8 = TagFallback & 7;
        }
LABEL_16:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
      }
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v11 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v11 >= v10 || *v11 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v11;
        v12 = v11 + 1;
        *((_QWORD *)this + 1) = v12;
      }
      v9 = *(_DWORD *)(a1 + 24) | 1;
      *(_DWORD *)(a1 + 24) = v9;
    }
    while ((unint64_t)v12 >= v10 || *v12 != 18);
    *((_QWORD *)this + 1) = v12 + 1;
LABEL_24:
    *(_DWORD *)(a1 + 24) = v9 | 2;
    v14 = *(_QWORD *)(a1 + 8);
    if (!v14)
      operator new();
    v23 = 0;
    v15 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))
        return 0;
    }
    else
    {
      v23 = *v15;
      *((_QWORD *)this + 1) = v15 + 1;
    }
    v16 = *((_DWORD *)this + 14);
    v17 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v16 + 1;
    if (v16 >= v17)
      return 0;
    v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1000F92E8(v14, this, v19) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
    v20 = *((_DWORD *)this + 14);
    v21 = __OFSUB__(v20, 1);
    v22 = v20 - 1;
    if (v22 < 0 == v21)
      *((_DWORD *)this + 14) = v22;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_1000F92E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char *v10;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  int v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned __int8 *v38;
  unsigned int *v39;
  unsigned int v40;

  v39 = (unsigned int *)(a1 + 16);
  v5 = (unsigned int *)(a1 + 20);
  v6 = (unsigned int *)(a1 + 24);
  v7 = (unsigned int *)(a1 + 28);
  v8 = (unsigned int *)(a1 + 32);
  v9 = (unsigned int *)(a1 + 36);
  while (2)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)this + 1);
        v13 = *((_QWORD *)this + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v39);
          if (!(_DWORD)result)
            return result;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v13 = *((_QWORD *)this + 2);
        }
        else
        {
          *v39 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        v16 = *(_DWORD *)(a1 + 44) | 1;
        *(_DWORD *)(a1 + 44) = v16;
        if ((unint64_t)v15 < v13 && *v15 == 18)
        {
          *((_QWORD *)this + 1) = v15 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_24;
        v16 = *(_DWORD *)(a1 + 44);
LABEL_33:
        *(_DWORD *)(a1 + 44) = v16 | 2;
        v24 = *(_QWORD *)(a1 + 8);
        if (!v24)
          operator new();
        v40 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40))return 0;
        }
        else
        {
          v40 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 < v27)
        {
          v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v40);
          if (sub_100DA657C(v24, this, v29))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
              v30 = *((_DWORD *)this + 14);
              v31 = __OFSUB__(v30, 1);
              v32 = v30 - 1;
              if (v32 < 0 == v31)
                *((_DWORD *)this + 14) = v32;
              v33 = (_BYTE *)*((_QWORD *)this + 1);
              v17 = *((_QWORD *)this + 2);
              if ((unint64_t)v33 < v17 && *v33 == 24)
              {
                v18 = v33 + 1;
                *((_QWORD *)this + 1) = v18;
LABEL_47:
                if ((unint64_t)v18 >= v17 || *v18 < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                  if (!(_DWORD)result)
                    return result;
                  v34 = (_BYTE *)*((_QWORD *)this + 1);
                  v17 = *((_QWORD *)this + 2);
                }
                else
                {
                  *v5 = *v18;
                  v34 = v18 + 1;
                  *((_QWORD *)this + 1) = v34;
                }
                *(_DWORD *)(a1 + 44) |= 4u;
                if ((unint64_t)v34 < v17 && *v34 == 32)
                {
                  v19 = v34 + 1;
                  *((_QWORD *)this + 1) = v19;
LABEL_55:
                  if ((unint64_t)v19 >= v17 || *v19 < 0)
                  {
                    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
                    if (!(_DWORD)result)
                      return result;
                    v35 = (_BYTE *)*((_QWORD *)this + 1);
                    v17 = *((_QWORD *)this + 2);
                  }
                  else
                  {
                    *v6 = *v19;
                    v35 = v19 + 1;
                    *((_QWORD *)this + 1) = v35;
                  }
                  *(_DWORD *)(a1 + 44) |= 8u;
                  if ((unint64_t)v35 < v17 && *v35 == 40)
                  {
                    v20 = v35 + 1;
                    *((_QWORD *)this + 1) = v20;
LABEL_63:
                    if ((unint64_t)v20 >= v17 || *v20 < 0)
                    {
                      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                      if (!(_DWORD)result)
                        return result;
                      v36 = (_BYTE *)*((_QWORD *)this + 1);
                      v17 = *((_QWORD *)this + 2);
                    }
                    else
                    {
                      *v7 = *v20;
                      v36 = v20 + 1;
                      *((_QWORD *)this + 1) = v36;
                    }
                    *(_DWORD *)(a1 + 44) |= 0x10u;
                    if ((unint64_t)v36 < v17 && *v36 == 48)
                    {
                      v21 = v36 + 1;
                      *((_QWORD *)this + 1) = v21;
LABEL_71:
                      if ((unint64_t)v21 >= v17 || *v21 < 0)
                      {
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
                        if (!(_DWORD)result)
                          return result;
                        v37 = (_BYTE *)*((_QWORD *)this + 1);
                        v17 = *((_QWORD *)this + 2);
                      }
                      else
                      {
                        *v8 = *v21;
                        v37 = v21 + 1;
                        *((_QWORD *)this + 1) = v37;
                      }
                      *(_DWORD *)(a1 + 44) |= 0x20u;
                      if ((unint64_t)v37 < v17 && *v37 == 56)
                      {
                        v22 = v37 + 1;
                        *((_QWORD *)this + 1) = v22;
LABEL_79:
                        if ((unint64_t)v22 >= v17 || *v22 < 0)
                        {
                          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
                          if (!(_DWORD)result)
                            return result;
                          v38 = (unsigned __int8 *)*((_QWORD *)this + 1);
                          v17 = *((_QWORD *)this + 2);
                        }
                        else
                        {
                          *v9 = *v22;
                          v38 = (unsigned __int8 *)(v22 + 1);
                          *((_QWORD *)this + 1) = v38;
                        }
                        *(_DWORD *)(a1 + 44) |= 0x40u;
                        if (v38 == (unsigned __int8 *)v17
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          result = 1;
                          *((_BYTE *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_47;
      case 4u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v19 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_55;
      case 5u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v20 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_63;
      case 6u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v21 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_71;
      case 7u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v22 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_79;
      default:
        v12 = TagFallback & 7;
LABEL_24:
        if (v12 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_1000F97A0()
{
  operator new();
}

void sub_1000F97DC()
{
  operator delete();
}

double sub_1000F9800(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102185C70;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  return result;
}

uint64_t sub_1000F9834(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v14[0] = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v14);
          if (!(_DWORD)result)
            return result;
          v9 = v14[0];
        }
        else
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
        }
        if (v9 <= 0xC)
        {
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_27;
        }
        continue;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_17;
LABEL_27:
        *(_QWORD *)v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v14) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v14;
        *(_DWORD *)(a1 + 32) |= 2u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 29)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_31:
        v14[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v14) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v14[0];
        *(_DWORD *)(a1 + 32) |= 4u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 37)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_35:
        v14[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v14) & 1) != 0)
        {
          *(_DWORD *)(a1 + 24) = v14[0];
          *(_DWORD *)(a1 + 32) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_31;
        goto LABEL_17;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_17;
        goto LABEL_35;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_1000F9A8C()
{
  operator new();
}

void sub_1000F9AC8()
{
  operator delete();
}

uint64_t sub_1000F9AEC(uint64_t result)
{
  *(_QWORD *)result = off_102185CE8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1000F9B04(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;

  v5 = (unint64_t *)(a1 + 2);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        a1[13] |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_28;
LABEL_36:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[4] = v20;
        a1[13] |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 29)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_40:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[5] = v20;
        a1[13] |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 37)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_44:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[6] = v20;
        a1[13] |= 8u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 != 45)
          continue;
        *((_QWORD *)this + 1) = v15 + 1;
LABEL_48:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[7] = v20;
        a1[13] |= 0x10u;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 != 53)
          continue;
        *((_QWORD *)this + 1) = v16 + 1;
LABEL_52:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[8] = v20;
        a1[13] |= 0x20u;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 61)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
LABEL_56:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[9] = v20;
        a1[13] |= 0x40u;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 69)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_60:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[10] = v20;
        a1[13] |= 0x80u;
        v19 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 != 77)
          continue;
        *((_QWORD *)this + 1) = v19 + 1;
LABEL_64:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) != 0)
        {
          a1[11] = v20;
          a1[13] |= 0x100u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_40;
        goto LABEL_28;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_44;
        goto LABEL_28;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_48;
        goto LABEL_28;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_52;
        goto LABEL_28;
      case 7u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_56;
        goto LABEL_28;
      case 8u:
        v8 = TagFallback & 7;
        if (v8 == 5)
          goto LABEL_60;
        goto LABEL_28;
      case 9u:
        v8 = TagFallback & 7;
        if (v8 != 5)
          goto LABEL_28;
        goto LABEL_64;
      default:
        v8 = TagFallback & 7;
LABEL_28:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000F9F08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t result;
  unsigned int v54;

  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 < *((_QWORD *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_6;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_21;
        *(_DWORD *)(a1 + 52) |= 1u;
        v8 = *(_QWORD *)(a1 + 8);
        if (!v8)
          operator new();
        v54 = 0;
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v9;
          *((_QWORD *)this + 1) = v9 + 1;
        }
        v10 = *((_DWORD *)this + 14);
        v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11)
          return 0;
        v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1000FC944(v8, this, v13) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        v17 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 != 18)
          continue;
        *((_QWORD *)this + 1) = v17 + 1;
        goto LABEL_33;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_21;
LABEL_33:
        *(_DWORD *)(a1 + 52) |= 2u;
        v18 = *(_QWORD *)(a1 + 16);
        if (!v18)
          operator new();
        v54 = 0;
        v19 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        v20 = *((_DWORD *)this + 14);
        v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1000FB444(v18, this, v23) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        v24 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v15)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 26)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
LABEL_47:
        *(_DWORD *)(a1 + 52) |= 4u;
        v27 = *(_QWORD *)(a1 + 24);
        if (!v27)
          operator new();
        v54 = 0;
        v28 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v28;
          *((_QWORD *)this + 1) = v28 + 1;
        }
        v29 = *((_DWORD *)this + 14);
        v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30)
          return 0;
        v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1000FBE90(v27, this, v32) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        v33 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v33, 1);
        v34 = v33 - 1;
        if (v34 < 0 == v15)
          *((_DWORD *)this + 14) = v34;
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v35 >= *((_QWORD *)this + 2) || *v35 != 34)
          continue;
        *((_QWORD *)this + 1) = v35 + 1;
LABEL_61:
        *(_DWORD *)(a1 + 52) |= 8u;
        v36 = *(_QWORD *)(a1 + 32);
        if (!v36)
          operator new();
        v54 = 0;
        v37 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)this + 14);
        v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1000FBA1C(v36, this, v41) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        v42 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v43 < 0 == v15)
          *((_DWORD *)this + 14) = v43;
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 != 42)
          continue;
        *((_QWORD *)this + 1) = v44 + 1;
LABEL_75:
        *(_DWORD *)(a1 + 52) |= 0x10u;
        v45 = *(_QWORD *)(a1 + 40);
        if (!v45)
          operator new();
        v54 = 0;
        v46 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v54))return 0;
        }
        else
        {
          v54 = *v46;
          *((_QWORD *)this + 1) = v46 + 1;
        }
        v47 = *((_DWORD *)this + 14);
        v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48)
          return 0;
        v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v54);
        if (!sub_1000FC6FC(v45, this, v50) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        v51 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v51, 1);
        v52 = v51 - 1;
        if (v52 < 0 == v15)
          *((_DWORD *)this + 14) = v52;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_47;
        goto LABEL_21;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_61;
        goto LABEL_21;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_21;
        goto LABEL_75;
      default:
        v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FA548(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 < *((_QWORD *)this + 2) && *v9 == 17)
        {
          *((_QWORD *)this + 1) = v9 + 1;
LABEL_17:
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          v10 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 25)
          {
            *((_QWORD *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_27;
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        v8 = TagFallback & 7;
        goto LABEL_27;
      }
      v8 = TagFallback & 7;
      if (v8 == 1)
        break;
LABEL_27:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_21:
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1000FA70C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t result;
  unsigned int v32;
  unsigned int v33;

  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        *(_DWORD *)(a1 + 44) |= 1u;
        v9 = *(_QWORD *)(a1 + 8);
        if (!v9)
          operator new();
        v32 = 0;
        v10 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        }
        else
        {
          v32 = *v10;
          *((_QWORD *)this + 1) = v10 + 1;
        }
        v11 = *((_DWORD *)this + 14);
        v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12)
          return 0;
        v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
        if (!sub_1000FAA70(v9, this, v14) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        v15 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)this + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 < *((_QWORD *)this + 2) && *v18 == 18)
          goto LABEL_29;
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 2)
        goto LABEL_18;
      while (1)
      {
        v19 = *(_DWORD *)(a1 + 28);
        v20 = *(int *)(a1 + 24);
        if ((int)v20 >= v19)
        {
          if (v19 == *(_DWORD *)(a1 + 32))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v19 + 1);
            v19 = *(_DWORD *)(a1 + 28);
          }
          *(_DWORD *)(a1 + 28) = v19 + 1;
          operator new();
        }
        v21 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v20 + 1;
        v22 = *(_QWORD *)(v21 + 8 * v20);
        v33 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33))return 0;
        }
        else
        {
          v33 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v33);
        if (!sub_100DB0A5C(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v16 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v16)
          *((_DWORD *)this + 14) = v29;
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        v30 = (_BYTE *)*((_QWORD *)this + 2);
        if (v18 >= v30 || *v18 != 18)
          break;
LABEL_29:
        *((_QWORD *)this + 1) = v18 + 1;
      }
      if (v18 == v30 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1000FAA70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        v12 = *(_DWORD *)(a1 + 44) | 1;
        *(_DWORD *)(a1 + 44) = v12;
        if ((unint64_t)v11 < v9 && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        v12 = *(_DWORD *)(a1 + 44);
LABEL_26:
        *(_DWORD *)(a1 + 44) = v12 | 2;
        v14 = *(_QWORD *)(a1 + 16);
        if (!v14)
          operator new();
        v41 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41))return 0;
        }
        else
        {
          v41 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41);
        if (!sub_1000FB190(v14, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 26)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_40:
        *(_DWORD *)(a1 + 44) |= 4u;
        v24 = *(_QWORD *)(a1 + 24);
        if (!v24)
          operator new();
        v42 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0;
        }
        else
        {
          v42 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
        if (!sub_1000FAF04(v24, this, v29) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        v30 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v30, 1);
        v31 = v30 - 1;
        if (v31 < 0 == v21)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 34)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 44) |= 8u;
        v33 = *(_QWORD *)(a1 + 32);
        if (!v33)
          operator new();
        v43 = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v34;
          *((_QWORD *)this + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_100DB2454(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v21)
          *((_DWORD *)this + 14) = v40;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_40;
        goto LABEL_18;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        goto LABEL_54;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FAF04(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t result;
  unint64_t v13;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_34;
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 52) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_34;
LABEL_14:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v13;
        *(_DWORD *)(a1 + 52) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v13;
        *(_DWORD *)(a1 + 52) |= 4u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 33)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_24:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 32) = v13;
        *(_DWORD *)(a1 + 52) |= 8u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 41)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
LABEL_29:
        v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 40) = v13;
        *(_DWORD *)(a1 + 52) |= 0x10u;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_34;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_24;
        goto LABEL_34;
      case 5u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_29;
        goto LABEL_34;
      default:
        v7 = TagFallback & 7;
LABEL_34:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

uint64_t sub_1000FB190(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t result;
  unsigned int v17;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_29;
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 8) = v17;
        *(_DWORD *)(a1 + 32) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 21)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 5)
          goto LABEL_29;
LABEL_14:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 12) = v17;
        *(_DWORD *)(a1 + 32) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 29)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) |= 4u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 37)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_24:
        v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) != 0)
        {
          *(_DWORD *)(a1 + 20) = v17;
          *(_DWORD *)(a1 + 32) |= 8u;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v12 < v11 && *v12 == 40)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
LABEL_33:
            v17 = 0;
            if ((unint64_t)v13 >= v11 || *v13 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
              if (!(_DWORD)result)
                return result;
              v14 = v17;
              v15 = (unsigned __int8 *)*((_QWORD *)this + 1);
              v11 = *((_QWORD *)this + 2);
            }
            else
            {
              v14 = *v13;
              v15 = (unsigned __int8 *)(v13 + 1);
              *((_QWORD *)this + 1) = v15;
            }
            *(_BYTE *)(a1 + 24) = v14 != 0;
            *(_DWORD *)(a1 + 32) |= 0x10u;
            if (v15 == (unsigned __int8 *)v11
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_19;
        goto LABEL_29;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 5)
          goto LABEL_24;
        goto LABEL_29;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_33;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FB444(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t result;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;

  v5 = (unsigned int *)(a1 + 8);
  v6 = (unsigned int *)(a1 + 12);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v13 = v12 + 1;
          *((_QWORD *)this + 1) = v13;
          goto LABEL_28;
        }
        continue;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_28:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v16 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v13;
          v16 = v13 + 1;
          *((_QWORD *)this + 1) = v16;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        if ((unint64_t)v16 >= v10 || *v16 != 24)
          continue;
        v14 = v16 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_36:
        v37 = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!(_DWORD)result)
            return result;
          v17 = v37;
        }
        else
        {
          v17 = *v14;
          *((_QWORD *)this + 1) = v14 + 1;
        }
        if (v17 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 4u;
          *(_DWORD *)(a1 + 32) = v17;
        }
        v18 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 != 34)
          continue;
        *((_QWORD *)this + 1) = v18 + 1;
LABEL_46:
        *(_DWORD *)(a1 + 40) |= 8u;
        v19 = *(_QWORD *)(a1 + 16);
        if (!v19)
          operator new();
        v38 = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38))return 0;
        }
        else
        {
          v38 = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)this + 14);
        v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22)
          return 0;
        v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v38);
        if (!sub_1000FB894(v19, this, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        v25 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v27 < 0 == v26)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 != 42)
          continue;
        *((_QWORD *)this + 1) = v28 + 1;
LABEL_60:
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v29 = *(_QWORD *)(a1 + 24);
        if (!v29)
          operator new();
        v39 = 0;
        v30 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0;
        }
        else
        {
          v39 = *v30;
          *((_QWORD *)this + 1) = v30 + 1;
        }
        v31 = *((_DWORD *)this + 14);
        v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 < v32)
        {
          v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
          if (sub_1000FB894(v29, this, v34))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
              v35 = *((_DWORD *)this + 14);
              v26 = __OFSUB__(v35, 1);
              v36 = v35 - 1;
              if (v36 < 0 == v26)
                *((_DWORD *)this + 14) = v36;
              if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_20;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_36;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 2)
          goto LABEL_46;
        goto LABEL_20;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_20;
        goto LABEL_60;
      default:
        v9 = TagFallback & 7;
LABEL_20:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FB894(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  unint64_t v13;

  v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_16;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if (v8 != 1)
        goto LABEL_16;
LABEL_24:
      v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 28) |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1000FBA1C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v5 = (unsigned int *)(a1 + 32);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        v12 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v12;
        if ((unint64_t)v11 < v9 && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        v12 = *(_DWORD *)(a1 + 40);
LABEL_26:
        *(_DWORD *)(a1 + 40) = v12 | 2;
        v14 = *(_QWORD *)(a1 + 8);
        if (!v14)
          operator new();
        v41 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v41))return 0;
        }
        else
        {
          v41 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41);
        if (!sub_1000FCEF4(v14, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 26)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_40:
        *(_DWORD *)(a1 + 40) |= 4u;
        v24 = *(_QWORD *)(a1 + 16);
        if (!v24)
          operator new();
        v42 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0;
        }
        else
        {
          v42 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
        if (!sub_1000FC514(v24, this, v29) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        v30 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v30, 1);
        v31 = v30 - 1;
        if (v31 < 0 == v21)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 34)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 40) |= 8u;
        v33 = *(_QWORD *)(a1 + 24);
        if (!v33)
          operator new();
        v43 = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0;
        }
        else
        {
          v43 = *v34;
          *((_QWORD *)this + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_1000FC514(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v21)
          *((_DWORD *)this + 14) = v40;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_40;
        goto LABEL_18;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_18;
        goto LABEL_54;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FBE90(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;

  v5 = (unsigned int *)(a1 + 48);
  while (1)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 < *((_QWORD *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        v12 = *(_DWORD *)(a1 + 56) | 1;
        *(_DWORD *)(a1 + 56) = v12;
        if ((unint64_t)v11 < v9 && *v11 == 18)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        v12 = *(_DWORD *)(a1 + 56);
LABEL_30:
        *(_DWORD *)(a1 + 56) = v12 | 2;
        v14 = *(_QWORD *)(a1 + 8);
        if (!v14)
          operator new();
        v59 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)this + 14);
        v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17)
          return 0;
        v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1000FCEF4(v14, this, v19) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        v20 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)this + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 != 26)
          continue;
        *((_QWORD *)this + 1) = v23 + 1;
LABEL_44:
        *(_DWORD *)(a1 + 56) |= 4u;
        v24 = *(_QWORD *)(a1 + 16);
        if (!v24)
          operator new();
        v59 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)this + 14);
        v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27)
          return 0;
        v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1000FC514(v24, this, v29) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        v30 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v30, 1);
        v31 = v30 - 1;
        if (v31 < 0 == v21)
          *((_DWORD *)this + 14) = v31;
        v32 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 != 34)
          continue;
        *((_QWORD *)this + 1) = v32 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 56) |= 8u;
        v33 = *(_QWORD *)(a1 + 24);
        if (!v33)
          operator new();
        v59 = 0;
        v34 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v34 >= *((_QWORD *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v34;
          *((_QWORD *)this + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)this + 14);
        v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36)
          return 0;
        v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1000FC514(v33, this, v38) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        v39 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v39, 1);
        v40 = v39 - 1;
        if (v40 < 0 == v21)
          *((_DWORD *)this + 14) = v40;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 42)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
LABEL_72:
        *(_DWORD *)(a1 + 56) |= 0x10u;
        v42 = *(_QWORD *)(a1 + 32);
        if (!v42)
          operator new();
        v59 = 0;
        v43 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v43;
          *((_QWORD *)this + 1) = v43 + 1;
        }
        v44 = *((_DWORD *)this + 14);
        v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45)
          return 0;
        v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1000FC514(v42, this, v47) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        v48 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v48, 1);
        v49 = v48 - 1;
        if (v49 < 0 == v21)
          *((_DWORD *)this + 14) = v49;
        v50 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 != 50)
          continue;
        *((_QWORD *)this + 1) = v50 + 1;
LABEL_86:
        *(_DWORD *)(a1 + 56) |= 0x20u;
        v51 = *(_QWORD *)(a1 + 40);
        if (!v51)
          operator new();
        v59 = 0;
        v52 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v59))return 0;
        }
        else
        {
          v59 = *v52;
          *((_QWORD *)this + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v59);
        if (!sub_1000FC514(v51, this, v56) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v57 = *((_DWORD *)this + 14);
        v21 = __OFSUB__(v57, 1);
        v58 = v57 - 1;
        if (v58 < 0 == v21)
          *((_DWORD *)this + 14) = v58;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_44;
        goto LABEL_22;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_58;
        goto LABEL_22;
      case 5u:
        v8 = TagFallback & 7;
        if (v8 == 2)
          goto LABEL_72;
        goto LABEL_22;
      case 6u:
        v8 = TagFallback & 7;
        if (v8 != 2)
          goto LABEL_22;
        goto LABEL_86;
      default:
        v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FC514(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE *v14;
  unint64_t v15;

  v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v11 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v10 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v11;
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 36) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 17)
          {
            *((_QWORD *)this + 1) = v12 + 1;
            goto LABEL_27;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_19;
LABEL_27:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 36) |= 2u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 25)
        {
          *((_QWORD *)this + 1) = v14 + 1;
          goto LABEL_31;
        }
      }
      if (v8 != 3)
        break;
      v9 = TagFallback & 7;
      if (v9 != 1)
        goto LABEL_19;
LABEL_31:
      v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
        return 0;
      *(_QWORD *)(a1 + 24) = v15;
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_19:
    if (v9 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_1000FC6FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  uint64_t result;
  unsigned int v23;

  v5 = (unsigned int *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v8 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          v10 = (char *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
          goto LABEL_30;
        }
      }
      else
      {
        v8 = TagFallback & 7;
      }
LABEL_18:
      if (v8 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
    v8 = TagFallback & 7;
    if (v8 != 2)
      goto LABEL_18;
    *(_DWORD *)(a1 + 24) |= 1u;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      operator new();
    v23 = 0;
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))
        return 0;
    }
    else
    {
      v23 = *v12;
      *((_QWORD *)this + 1) = v12 + 1;
    }
    v13 = *((_DWORD *)this + 14);
    v14 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v13 + 1;
    if (v13 >= v14)
      return 0;
    v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1000FC514(v11, this, v16) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
    v17 = *((_DWORD *)this + 14);
    v18 = __OFSUB__(v17, 1);
    v19 = v17 - 1;
    if (v19 < 0 == v18)
      *((_DWORD *)this + 14) = v19;
    v20 = (_BYTE *)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
    if ((unint64_t)v20 < v9 && *v20 == 16)
    {
      v10 = v20 + 1;
      *((_QWORD *)this + 1) = v10;
LABEL_30:
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v10;
        v21 = (unsigned __int8 *)(v10 + 1);
        *((_QWORD *)this + 1) = v21;
      }
      *(_DWORD *)(a1 + 24) |= 2u;
      if (v21 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1000FC944(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;

  v5 = (unsigned int *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v11 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v10 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v11;
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          v13 = *(_DWORD *)(a1 + 32) | 1;
          *(_DWORD *)(a1 + 32) = v13;
          if ((unint64_t)v12 < v10 && *v12 == 18)
          {
            *((_QWORD *)this + 1) = v12 + 1;
            goto LABEL_27;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_19;
        v13 = *(_DWORD *)(a1 + 32);
LABEL_27:
        *(_DWORD *)(a1 + 32) = v13 | 2;
        v15 = *(_QWORD *)(a1 + 8);
        if (!v15)
          operator new();
        v33 = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33))return 0;
        }
        else
        {
          v33 = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)this + 14);
        v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v33);
        if (!sub_1000FCEF4(v15, this, v20) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        v21 = *((_DWORD *)this + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)this + 14) = v23;
        v24 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v24 < *((_QWORD *)this + 2) && *v24 == 26)
        {
          *((_QWORD *)this + 1) = v24 + 1;
          goto LABEL_41;
        }
      }
      if (v8 != 3)
        break;
      v9 = TagFallback & 7;
      if (v9 != 2)
        goto LABEL_19;
LABEL_41:
      *(_DWORD *)(a1 + 32) |= 4u;
      v25 = *(_QWORD *)(a1 + 16);
      if (!v25)
        operator new();
      v34 = 0;
      v26 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0;
      }
      else
      {
        v34 = *v26;
        *((_QWORD *)this + 1) = v26 + 1;
      }
      v27 = *((_DWORD *)this + 14);
      v28 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v27 + 1;
      if (v27 >= v28)
        return 0;
      v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
      if (!sub_1000FCCA8(v25, this, v30) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
      v31 = *((_DWORD *)this + 14);
      v22 = __OFSUB__(v31, 1);
      v32 = v31 - 1;
      if (v32 < 0 == v22)
        *((_DWORD *)this + 14) = v32;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    v9 = TagFallback & 7;
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

uint64_t sub_1000FCCA8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;

  v5 = (unint64_t *)(a1 + 8);
  while (2)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v10 = (char *)*((_QWORD *)this + 1);
        v9 = *((_QWORD *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result)
            return result;
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          v9 = *((_QWORD *)this + 2);
        }
        else
        {
          *v5 = *v10;
          v11 = v10 + 1;
          *((_QWORD *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_18;
LABEL_26:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 44) |= 2u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 25)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v15;
        *(_DWORD *)(a1 + 44) |= 4u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 33)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_34:
        v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v15) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = v15;
          *(_DWORD *)(a1 + 44) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v8 = TagFallback & 7;
        if (v8 == 1)
          goto LABEL_30;
        goto LABEL_18;
      case 4u:
        v8 = TagFallback & 7;
        if (v8 != 1)
          goto LABEL_18;
        goto LABEL_34;
      default:
        v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000FCEF4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t result;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  unsigned int v27;

  v5 = (unsigned int *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v6 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v9 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_19;
          v11 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
            if (!(_DWORD)result)
              return result;
            v12 = (_BYTE *)*((_QWORD *)this + 1);
            v10 = *((_QWORD *)this + 2);
          }
          else
          {
            *v5 = *v11;
            v12 = v11 + 1;
            *((_QWORD *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_27;
          }
        }
        if (v8 != 2)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_27:
        v26 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!(_DWORD)result)
            return result;
          v15 = v26;
        }
        else
        {
          v15 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 < *((_QWORD *)this + 2) && *v16 == 26)
        {
          *((_QWORD *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }
      if (v8 != 3)
      {
        v9 = TagFallback & 7;
        goto LABEL_19;
      }
      v9 = TagFallback & 7;
      if (v9 == 2)
        break;
LABEL_19:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
        return 0;
    }
LABEL_37:
    *(_DWORD *)(a1 + 28) |= 4u;
    v17 = *(_QWORD *)(a1 + 16);
    if (!v17)
      operator new();
    v27 = 0;
    v18 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))
        return 0;
    }
    else
    {
      v27 = *v18;
      *((_QWORD *)this + 1) = v18 + 1;
    }
    v19 = *((_DWORD *)this + 14);
    v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20)
      return 0;
    v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
    if (!sub_100DB58B4(v17, this, v22) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    v23 = *((_DWORD *)this + 14);
    v24 = __OFSUB__(v23, 1);
    v25 = v23 - 1;
    if (v25 < 0 == v24)
      *((_DWORD *)this + 14) = v25;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

wireless_diagnostics::google::protobuf::MessageLite *sub_1000FD1C0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::MessageLite *v6;
  wireless_diagnostics::google::protobuf::MessageLite *result;
  NSObject *v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  int v16;
  char *v17;
  void *__p[2];
  char v19;
  wireless_diagnostics::google::protobuf::MessageLite *v20;
  uint8_t buf[4];
  _BYTE *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v2 = *(_QWORD *)(a1 + 40);
  std::mutex::lock((std::mutex *)(v2 + 272));
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = *(unsigned __int8 *)(v2 + 264);
  std::mutex::unlock((std::mutex *)(v2 + 272));
  if (v3 == v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(wireless_diagnostics::google::protobuf::MessageLite **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = 0;
    v20 = v6;
    sub_100103BEC((std::mutex *)v2, &v20, *(_QWORD *)(a1 + 48));
    result = v20;
    if (v20)
      return (wireless_diagnostics::google::protobuf::MessageLite *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8))();
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_10173E9F0(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 20), (uint64_t)v27);
      v9 = v31 >= 0 ? v27 : *(_BYTE **)v27;
      v10 = *(unsigned __int8 *)(a1 + 56);
      v11 = *(unsigned __int8 *)(v2 + 264);
      *(_DWORD *)buf = 136446722;
      v22 = v9;
      v23 = 1026;
      v24 = v10;
      v25 = 1026;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Transaction ID mismatch,Dropping type,%{public}s,currentTransactionId,%{public}d,fActiveTransactionId,%{public}d", buf, 0x18u);
      if (SHIBYTE(v31) < 0)
        operator delete(*(void **)v27);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      v13 = qword_1022A0078;
      sub_10173E9F0(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 20), (uint64_t)__p);
      if (v19 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      v15 = *(unsigned __int8 *)(a1 + 56);
      v16 = *(unsigned __int8 *)(v2 + 264);
      *(_DWORD *)v27 = 136446722;
      *(_QWORD *)&v27[4] = v14;
      v28 = 1026;
      v29 = v15;
      v30 = 1026;
      v31 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "#gpsdClient,Transaction ID mismatch,Dropping type,%{public}s,currentTransactionId,%{public}d,fActiveTransactionId,%{public}d", v27, 24);
      if (v19 < 0)
        operator delete(__p[0]);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGpsdClient::sendRequest(const proto::gpsd::Request &)_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    result = *(wireless_diagnostics::google::protobuf::MessageLite **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = 0;
    if (result)
      return (wireless_diagnostics::google::protobuf::MessageLite *)(*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1000FD4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_1000FD500(_QWORD *a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  unsigned __int8 v25;
  __n128 v26;
  _BOOL8 v27;
  NSObject *v28;
  uint64_t v29;
  const char *v30;
  _WORD v31[8];
  CLMotionActivity v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[8];
  uint64_t v38;
  _OWORD v39[8];
  uint64_t v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  _BOOL4 v48;

  if (*(_DWORD *)(a2 + 12) == 1)
    v4 = 1;
  else
    v4 = 2;
  *(_DWORD *)(*a1 + 352) = v4;
  v5 = (_QWORD *)a1[138];
  if (v5)
  {
    v6 = *(_OWORD *)(a2 + 112);
    v39[6] = *(_OWORD *)(a2 + 96);
    v39[7] = v6;
    v40 = *(_QWORD *)(a2 + 128);
    v7 = *(_OWORD *)(a2 + 48);
    v39[2] = *(_OWORD *)(a2 + 32);
    v39[3] = v7;
    v8 = *(_OWORD *)(a2 + 80);
    v39[4] = *(_OWORD *)(a2 + 64);
    v39[5] = v8;
    v9 = *(_OWORD *)(a2 + 16);
    v39[0] = *(_OWORD *)a2;
    v39[1] = v9;
    sub_1000FDD08(v5, (unsigned int *)v39);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v42 = 0;
    v43 = 2082;
    v44 = "";
    v45 = 2082;
    v46 = "injectassistancemotion";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = *a1;
  v12 = *(_OWORD *)(a2 + 48);
  v37[2] = *(_OWORD *)(a2 + 32);
  v37[3] = v12;
  v38 = *(_QWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 112);
  v37[6] = *(_OWORD *)(a2 + 96);
  v37[7] = v13;
  v14 = *(_OWORD *)(a2 + 80);
  v37[4] = *(_OWORD *)(a2 + 64);
  v37[5] = v14;
  v15 = *(_OWORD *)(a2 + 16);
  v37[0] = *(_OWORD *)a2;
  v37[1] = v15;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 96))(v11, v37);
  v16 = (_BYTE *)a1[144];
  if (v16)
  {
    v17 = *(_OWORD *)(a2 + 112);
    v34 = *(_OWORD *)(a2 + 96);
    v35 = v17;
    v36 = *(_QWORD *)(a2 + 128);
    v18 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v32.isStanding = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v32.isVehicleConnected = v18;
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v32.vehicleType = *(_OWORD *)(a2 + 64);
    v33 = v19;
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v32.type = *(_OWORD *)a2;
    *(_OWORD *)&v32.mountedConfidence = v20;
    *v16 = CLMotionActivity::isMounted(&v32);
    if (*(_BYTE *)(a2 + 139))
    {
      if (!*((_BYTE *)a1 + 1268))
      {
        sub_100238468(a1 + 104, (uint64_t)sub_10084F598, (uint64_t)objc_msgSend((id)a1[99], "silo"), (uint64_t)a1, 100.0, 10.0);
        sub_10084F770(a1 + 106, (uint64_t)sub_10084FD40, (uint64_t)objc_msgSend((id)a1[99], "silo"), (uint64_t)a1, 100.0, 10.0);
        *(_QWORD *)(a1[144] + 56) = 0x3F847AE147AE147BLL;
        *((_BYTE *)a1 + 1268) = 1;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v21 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GPSSENSOR,startIns", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v31[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSSENSOR,startIns", v31, 2);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleAssistanceMotion(GNSS::Context)", "%s\n", v22);
LABEL_46:
          if (v23 != buf)
            free(v23);
        }
      }
    }
    else if (*((_BYTE *)a1 + 1268))
    {
      sub_100238A38(a1 + 104);
      sub_10084FF18(a1 + 106);
      *((_BYTE *)a1 + 1268) = 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "GPSSENSOR,stopIns", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v31[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSSENSOR,stopIns", v31, 2);
        v23 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleAssistanceMotion(GNSS::Context)", "%s\n", v30);
        goto LABEL_46;
      }
    }
  }
  v25 = atomic_load((unsigned __int8 *)&qword_102304EE8);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_102304EE8))
  {
    byte_102304EE0 = sub_100195F08();
    __cxa_guard_release(&qword_102304EE8);
  }
  if (byte_102304EE0 || sub_1000FDBD0())
  {
    v27 = !*(_BYTE *)(a2 + 138) && (!sub_1000FDBD0() || !*((_BYTE *)a1 + 608)) && byte_102304EE0 != 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v42 = 0;
      v43 = 2082;
      v44 = "";
      v45 = 2082;
      v46 = "sendAllowGnssDwellDutyCycling";
      v47 = 1026;
      v48 = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"allow\":%{public}hhd}", buf, 0x22u);
    }
    (*(void (**)(_QWORD, _BOOL8))(*(_QWORD *)*a1 + 264))(*a1, v27);
  }
  v29 = a1[154];
  if (v29)
    sub_100109334(v29, (unsigned int *)a2, v26);
}

void sub_1000FDAEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102304EE8);
  _Unwind_Resume(a1);
}

BOOL sub_1000FDB0C()
{
  _BOOL8 result;

  result = sub_1000FDBD0();
  if (result)
    return !sub_1000FDBFC() && !sub_1000FDC94();
  return result;
}

BOOL sub_1000FDB3C()
{
  _BOOL8 result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 107) >= 0x1B && (dword_102303CA8 - 178) >= 6)
    return dword_102303CA8 == 258;
  return result;
}

BOOL sub_1000FDBD0()
{
  return sub_1000FDBFC() || sub_1000FDC94() || sub_1000FDB3C();
}

BOOL sub_1000FDBFC()
{
  _BOOL8 result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 82) > 0x14 || ((1 << (dword_102303CA8 - 82)) & 0x1FFFD5) == 0)
    return (dword_102303CA8 - 150) < 4;
  return result;
}

BOOL sub_1000FDC94()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return (dword_102303CA8 - 103) < 4;
}

_QWORD *sub_1000FDD08(_QWORD *result, unsigned int *a2)
{
  _QWORD *v2;
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  unsigned int v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  unsigned int v17;

  if (*((_BYTE *)result + 114))
  {
    v2 = result;
    if (*((_BYTE *)result + 112))
    {
      if (result[1])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CF318);
        v4 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v5 = *a2;
          v6 = a2[1];
          *(_DWORD *)buf = 67240448;
          v15 = v5;
          v16 = 1026;
          v17 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,feeding motion,type,%{public}d,confidence,%{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CF318);
          v7 = *a2;
          v8 = a2[1];
          v11[0] = 67240448;
          v11[1] = v7;
          v12 = 1026;
          v13 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,feeding motion,type,%{public}d,confidence,%{public}d", v11, 14);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedMotion(CLMotionActivity)", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        return objc_msgSend((id)v2[1], "updateMotion:conf:", *a2, a2[1]);
      }
    }
  }
  return result;
}

uint64_t sub_1000FDEF8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setting duty cycle enable to %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8[0] = 67109120;
    v8[1] = a2;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setting duty cycle enable to %d", v8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  sub_1000FF07C((uint64_t)buf);
  if ((sub_100103BB0(26) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v11 = 26;
  v13 |= 0x800004u;
  v5 = v12;
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 16) |= 1u;
  *(_BYTE *)(v5 + 8) = a2;
  sub_1000FF114(a1 + 2576, (uint64_t)buf);
  sub_1000FF8D8(a1 + 2176, 2);
  return sub_1000FF078(buf);
}

void sub_1000FE154()
{
  operator delete();
}

uint64_t sub_1000FE194(uint64_t result)
{
  *(_QWORD *)result = off_102193FD8;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000FE1AC(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  unint64_t v4;
  double v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  signed int v13;
  int v14;
  int v15;
  char v16;
  int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  int v37;
  int v38;
  char *v39;
  const char *v40;
  int v41;
  const char *v42;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  int v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  _QWORD v56[2];
  int v57;
  uint64_t v58;
  int v59;
  uint8_t buf[4];
  _BYTE v61[14];
  int v62;
  uint64_t v63;
  int v64;

  if (*(_BYTE *)(result + 1706))
    return result;
  v3 = (_DWORD *)result;
  v4 = sub_1001047C0();
  v52 = 0;
  v5 = *(double *)(a2 + 40);
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v5 <= 0.0
    || (sub_10010929C((uint64_t)v3, &v52, 1, v5), (v6 & 1) == 0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v61 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#gpsd,injectAssistanceMotion,invalid timestamp,%{public}.1f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v45 = *(_QWORD *)(a2 + 40);
      v55 = 134349056;
      v56[0] = v45;
      v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,injectAssistanceMotion,invalid timestamp,%{public}.1f", &v55, 12);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v46);
      if (v46 != (char *)buf)
        free(v46);
    }
    v52 = v4;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v61 = v10;
    *(_WORD *)&v61[4] = 2048;
    *(_QWORD *)&v61[6] = v4 - v52;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gpsd,feeding motionState,%d,ageNs,%llu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v38 = *(_DWORD *)a2;
    v55 = 67109376;
    LODWORD(v56[0]) = v38;
    WORD2(v56[0]) = 2048;
    *(_QWORD *)((char *)v56 + 6) = v4 - v52;
    LODWORD(v51) = 18;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,feeding motionState,%d,ageNs,%llu", &v55, v51);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  sub_1000FF07C((uint64_t)&v55);
  if ((sub_100103BB0(18) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v57 = 18;
  v59 |= 0x404u;
  v11 = v58;
  if (!v58)
    operator new();
  v12 = v52;
  *(_DWORD *)(v58 + 32) |= 1u;
  *(_QWORD *)(v11 + 8) = v12;
  v13 = *(_DWORD *)a2;
  if (*(int *)a2 <= 11804)
  {
    if (v13 <= 2009)
    {
      switch(v13)
      {
        case 0:
          goto LABEL_76;
        case 1:
          goto LABEL_138;
        case 2:
          v14 = *(_DWORD *)(a2 + 4);
          goto LABEL_121;
        case 3:
        case 7:
        case 9:
          goto LABEL_44;
        case 4:
          if (*(_DWORD *)(a2 + 4) == 2)
            v35 = 3;
          else
            v35 = 2;
          goto LABEL_137;
        case 5:
          goto LABEL_68;
        case 6:
          v18 = *(_DWORD *)(a2 + 4) == 2;
          v19 = 5;
          goto LABEL_134;
        case 8:
          if ((*(_DWORD *)(a2 + 4) - 1) < 2)
            v35 = 1;
          else
            v35 = 2;
          goto LABEL_137;
        case 10:
          if (*(int *)(a2 + 4) >= 1)
            v3[585] = 4;
          v13 = 1;
          goto LABEL_138;
        case 11:
          v14 = *(_DWORD *)(a2 + 4);
          if (v14 >= 1)
            v3[585] = 4;
LABEL_121:
          if (v14 == 2)
            v13 = 1;
          else
            v13 = 2;
          goto LABEL_138;
        default:
          v16 = v13 - 41;
          if ((v13 - 41) > 0x3B)
            goto LABEL_139;
          if (((1 << v16) & 0x800000003C00000) != 0)
            goto LABEL_76;
          if (((1 << v16) & 0x300001) != 0)
          {
LABEL_44:
            v3[585] = 2;
            if (sub_100106094(3u))
            {
              v17 = 3;
LABEL_78:
              *(_DWORD *)(v11 + 32) |= 4u;
              *(_DWORD *)(v11 + 20) = v17;
              goto LABEL_79;
            }
            goto LABEL_158;
          }
          if (((1 << v16) & 0x8800) == 0)
            goto LABEL_139;
LABEL_68:
          v18 = *(_DWORD *)(a2 + 4) == 2;
          v19 = 4;
          break;
      }
      goto LABEL_134;
    }
    if (((v13 - 2010) > 0x3D || ((1 << (v13 + 38)) & 0x2488004000005401) == 0)
      && ((v13 - 2101) > 0x31 || ((1 << (v13 - 53)) & 0x2000000000011) == 0)
      && (v13 - 3015) >= 2)
    {
      goto LABEL_139;
    }
    goto LABEL_76;
  }
  if (v13 <= 15651)
  {
    if (v13 > 15329)
    {
      if ((v13 - 15560) <= 0x3C && ((1 << (v13 + 56)) & 0x1004000100000001) != 0
        || (v13 - 15330) <= 0x1E && ((1 << (v13 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_76;
      }
      v15 = 15460;
    }
    else if (v13 <= 15099)
    {
      if (v13 > 15029)
      {
        if (v13 == 15030)
          goto LABEL_76;
        v15 = 15055;
      }
      else
      {
        if (v13 == 11805)
          goto LABEL_76;
        v15 = 12150;
      }
    }
    else
    {
      if ((v13 - 15100) <= 0x32 && ((1 << (v13 + 4)) & 0x4000000000401) != 0
        || v13 == 15230)
      {
        goto LABEL_76;
      }
      v15 = 15250;
    }
    goto LABEL_75;
  }
  if (v13 <= 18199)
  {
    if (v13 <= 15732)
    {
      if ((v13 - 15652) > 0x3B || ((1 << (v13 - 36)) & 0x800000000840101) == 0)
        goto LABEL_139;
      goto LABEL_76;
    }
    if (v13 > 18049)
    {
      if (v13 == 18050)
        goto LABEL_76;
      v15 = 18100;
    }
    else
    {
      if (v13 == 15733)
        goto LABEL_76;
      v15 = 17150;
    }
    goto LABEL_75;
  }
  if (v13 <= 19149)
  {
    if (v13 <= 19029)
    {
      if (v13 != 18200)
      {
        if (v13 == 18240)
        {
          v18 = *(_DWORD *)(a2 + 4) == 2;
          v19 = 6;
LABEL_134:
          if (v18)
            v35 = v19;
          else
            v35 = 2;
          goto LABEL_137;
        }
LABEL_139:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(_DWORD *)a2;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v61 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#gpsd,Unhandled activity type case,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v49 = *(_DWORD *)a2;
          v53 = 67240192;
          v54 = v49;
          LODWORD(v51) = 8;
          v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Unhandled activity type case,%{public}d", &v53, v51);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v50);
          if (v50 != (char *)buf)
            free(v50);
        }
        v13 = 0;
        v3[585] = 0;
        goto LABEL_138;
      }
LABEL_76:
      v3[585] = 0;
      if (sub_100106094(0))
      {
        v17 = 0;
        goto LABEL_78;
      }
LABEL_158:
      v40 = "::proto::gnss::MovingState_IsValid(value)";
      v41 = 10147;
      v42 = "set_moving_state";
LABEL_159:
      __assert_rtn(v42, "GpsdProtocol.pb.h", v41, v40);
    }
    if (v13 == 19030)
      goto LABEL_76;
    v15 = 19090;
LABEL_75:
    if (v13 != v15)
      goto LABEL_139;
    goto LABEL_76;
  }
  if (v13 > 515620)
  {
    if (v13 == 515621 || v13 == 515652)
      goto LABEL_76;
    v15 = 519150;
    goto LABEL_75;
  }
  if (v13 == 19150)
    goto LABEL_76;
  if (v13 != 90603)
    goto LABEL_139;
  v35 = 7;
LABEL_137:
  v3[585] = v35;
  v13 = 3;
LABEL_138:
  sub_100109108(v11, v13);
LABEL_79:
  v20 = sub_10010927C(v3[585]);
  if (!sub_10010285C(v20))
  {
    v40 = "::proto::gnss::MotionActivityContext_IsValid(value)";
    v41 = 10124;
    v42 = "set_context";
    goto LABEL_159;
  }
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v20;
  v21 = *(_DWORD *)(a2 + 4);
  if (v21 == 2)
  {
    if (sub_100106054(0x4Bu))
    {
      v22 = 75;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (v21 == 1)
  {
    if (sub_100106054(0x32u))
    {
      v22 = 50;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (v21)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v61 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#gpsd,Unhandled activity confidence case,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v47 = *(_DWORD *)(a2 + 4);
      v53 = 67240192;
      v54 = v47;
      LODWORD(v51) = 8;
      v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Unhandled activity confidence case,%{public}d", &v53, v51);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    if (sub_100106054(1u))
    {
      v22 = 1;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (!sub_100106054(0x19u))
  {
LABEL_151:
    v40 = "::proto::gnss::Reliability_IsValid(value)";
    v41 = 10170;
    v42 = "set_motion_reliability";
    goto LABEL_159;
  }
  v22 = 25;
LABEL_96:
  *(_DWORD *)(v11 + 32) |= 8u;
  *(_DWORD *)(v11 + 24) = v22;
  v25 = *(_DWORD *)(v11 + 16) - 1;
  if (v25 > 8)
    v26 = 0;
  else
    v26 = dword_101CE0474[v25];
  v3[86] = v26;
  v27 = *(_DWORD *)(v11 + 20) - 1;
  if (v27 > 2)
    v28 = 0;
  else
    v28 = dword_101CE0498[v27];
  v3[87] = v28;
  v29 = (uint64_t)(v3 + 644);
  sub_1000FF114((uint64_t)(v3 + 644), (uint64_t)&v55);
  v30 = (uint64_t)(v3 + 544);
  sub_1000FF8D8(v30, 2);
  sub_1000FF078(&v55);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v31 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v32 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v61 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#gpsd,feeding mountState,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v43 = *(_DWORD *)(a2 + 12);
    v55 = 67109120;
    LODWORD(v56[0]) = v43;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,feeding mountState,%d", &v55);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  sub_1000FF07C((uint64_t)buf);
  if ((sub_100103BB0(19) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v62 = 19;
  v64 |= 0x804u;
  v33 = v63;
  if (!v63)
    operator new();
  *(_DWORD *)(v63 + 24) |= 1u;
  *(_QWORD *)(v33 + 8) = v12;
  if (*(_DWORD *)(a2 + 12) == 1)
    v34 = 2;
  else
    v34 = 3;
  if (!sub_100106170(v34))
    __assert_rtn("set_mount_state", "GpsdProtocol.pb.h", 10219, "::proto::gnss::DeviceMountState_IsValid(value)");
  *(_DWORD *)(v33 + 24) |= 2u;
  *(_DWORD *)(v33 + 16) = v34;
  sub_1000FF114(v29, (uint64_t)buf);
  sub_1000FF8D8(v30, 2);
  return sub_1000FF078(buf);
}

void sub_1000FF000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000FF078(va);
  _Unwind_Resume(a1);
}

double sub_1000FF07C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021933A8;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 380) = 0;
  return result;
}

void sub_1000FF114(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    sub_100102868(a1, a2);
  }
}

uint64_t sub_1000FF154(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v1 = result;
  v2 = (unsigned int *)(result + 396);
  v3 = *(_DWORD *)(result + 396);
  if ((_BYTE)v3)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v3 & 8) != 0)
    {
      result = *(_QWORD *)(result + 24);
      if (result)
      {
        result = sub_100109ACC(result);
        v3 = *v2;
      }
    }
    if ((v3 & 0x10) != 0)
    {
      v4 = *(_QWORD *)(v1 + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 36))
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20) != 0)
    {
      v5 = *(_QWORD *)(v1 + 40);
      if (v5)
      {
        if (*(int *)(v5 + 16) >= 1)
        {
          v6 = 0;
          do
          {
            v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
            ++v6;
          }
          while (v6 < *(int *)(v5 + 16));
        }
        *(_DWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40) != 0)
    {
      v8 = *(_QWORD *)(v1 + 48);
      if (v8)
      {
        if (*(int *)(v8 + 16) >= 1)
        {
          v9 = 0;
          do
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
            ++v9;
          }
          while (v9 < *(int *)(v8 + 16));
        }
        *(_DWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80) != 0)
    {
      v11 = *(_QWORD *)(v1 + 56);
      if (v11)
      {
        if (*(int *)(v11 + 16) >= 1)
        {
          v12 = 0;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v12);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
            ++v12;
          }
          while (v12 < *(int *)(v11 + 16));
        }
        *(_DWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 36) = 0;
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v14 = *(_QWORD *)(v1 + 64);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 36))
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
        }
        *(_DWORD *)(v14 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x200) != 0)
    {
      v15 = *(_QWORD *)(v1 + 72);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 76);
        if ((_BYTE)v16)
        {
          *(_OWORD *)(v15 + 49) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 8) = 0u;
        }
        if ((v16 & 0xFF00) != 0)
        {
          *(_BYTE *)(v15 + 69) = 0;
          *(_DWORD *)(v15 + 65) = 0;
        }
        *(_DWORD *)(v15 + 76) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x400) != 0)
    {
      v17 = *(_QWORD *)(v1 + 80);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 32))
        {
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0x400000000;
          *(_DWORD *)(v17 + 24) = 0;
        }
        *(_DWORD *)(v17 + 32) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x800) != 0)
    {
      v18 = *(_QWORD *)(v1 + 88);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 24))
        {
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 16) = 4;
        }
        *(_DWORD *)(v18 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      v19 = *(_QWORD *)(v1 + 96);
      if (v19)
      {
        if (*(_BYTE *)(v19 + 16))
          *(_DWORD *)(v19 + 8) = 15;
        *(_DWORD *)(v19 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      v20 = *(_QWORD *)(v1 + 104);
      if (v20)
      {
        if (*(_BYTE *)(v20 + 44))
        {
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 8) = 0u;
        }
        *(_DWORD *)(v20 + 44) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      v21 = *(_QWORD *)(v1 + 112);
      if (v21)
      {
        if (*(_BYTE *)(v21 + 36))
        {
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *(_DWORD *)(v21 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      result = *(_QWORD *)(v1 + 120);
      if (result)
      {
        result = sub_100109D90(result);
        v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      v22 = *(_QWORD *)(v1 + 128);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 20) & 1) != 0)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if ((_UNKNOWN *)v23 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v23 + 23) < 0)
            {
              **(_BYTE **)v23 = 0;
              *(_QWORD *)(v23 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v23 = 0;
              *(_BYTE *)(v23 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v22 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      v24 = *(_QWORD *)(v1 + 136);
      if (v24)
      {
        if (*(int *)(v24 + 16) >= 1)
        {
          v25 = 0;
          do
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v25);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
            ++v25;
          }
          while (v25 < *(int *)(v24 + 16));
        }
        *(_DWORD *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 36) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      v27 = *(_QWORD *)(v1 + 144);
      if (v27)
      {
        if (*(_BYTE *)(v27 + 20))
          *(_QWORD *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      v28 = *(_QWORD *)(v1 + 152);
      if (v28)
      {
        if (*(_BYTE *)(v28 + 20))
        {
          *(_BYTE *)(v28 + 8) = 1;
          *(_DWORD *)(v28 + 9) = 0;
          *(_BYTE *)(v28 + 13) = 0;
        }
        *(_DWORD *)(v28 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      v29 = *(_QWORD *)(v1 + 160);
      if (v29)
      {
        if (*(_BYTE *)(v29 + 20))
          *(_QWORD *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      v30 = *(_QWORD *)(v1 + 168);
      if (v30)
      {
        if (*(_BYTE *)(v30 + 20))
        {
          *(_BYTE *)(v30 + 8) = 0;
          *(_DWORD *)(v30 + 12) = 0;
        }
        *(_DWORD *)(v30 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      v31 = *(_QWORD *)(v1 + 176);
      if (v31)
      {
        if (*(_BYTE *)(v31 + 20))
          *(_QWORD *)(v31 + 8) = 0;
        *(_DWORD *)(v31 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      v32 = *(_QWORD *)(v1 + 184);
      if (v32)
      {
        if (*(_BYTE *)(v32 + 16))
          *(_BYTE *)(v32 + 8) = 0;
        *(_DWORD *)(v32 + 16) = 0;
        v3 = *v2;
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      v33 = *(_QWORD *)(v1 + 192);
      if (v33)
      {
        if ((*(_BYTE *)(v33 + 20) & 1) != 0)
        {
          v34 = *(_QWORD *)(v33 + 8);
          if ((_UNKNOWN *)v34 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v34 + 23) < 0)
            {
              **(_BYTE **)v34 = 0;
              *(_QWORD *)(v34 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v34 = 0;
              *(_BYTE *)(v34 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v33 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      v35 = *(_QWORD *)(v1 + 200);
      if (v35)
      {
        if ((*(_BYTE *)(v35 + 20) & 1) != 0)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if ((_UNKNOWN *)v36 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v36 + 23) < 0)
            {
              **(_BYTE **)v36 = 0;
              *(_QWORD *)(v36 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v36 = 0;
              *(_BYTE *)(v36 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v35 + 20) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      result = *(_QWORD *)(v1 + 208);
      if (result)
      {
        result = sub_100F3799C(result);
        v3 = *v2;
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      v37 = *(_QWORD *)(v1 + 216);
      if (v37)
      {
        if (*(_BYTE *)(v37 + 24))
        {
          *(_DWORD *)(v37 + 15) = 0;
          *(_QWORD *)(v37 + 8) = 0;
        }
        *(_DWORD *)(v37 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x10000000) != 0)
    {
      v38 = *(_QWORD *)(v1 + 224);
      if (v38)
      {
        if (*(_BYTE *)(v38 + 16))
          *(_DWORD *)(v38 + 8) = 0;
        *(_DWORD *)(v38 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x20000000) != 0)
    {
      v39 = *(_QWORD *)(v1 + 232);
      if (v39)
      {
        if (*(_BYTE *)(v39 + 24))
        {
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 16) = 0;
        }
        *(_DWORD *)(v39 + 24) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x40000000) != 0)
    {
      v40 = *(_QWORD *)(v1 + 240);
      if (v40)
      {
        if (*(_BYTE *)(v40 + 16))
          *(_WORD *)(v40 + 8) = 0;
        *(_DWORD *)(v40 + 16) = 0;
        v3 = *v2;
      }
    }
    if ((v3 & 0x80000000) != 0)
    {
      result = *(_QWORD *)(v1 + 248);
      if (result)
        result = sub_1008F96D0(result);
    }
  }
  v41 = *(_DWORD *)(v1 + 400);
  if ((_BYTE)v41)
  {
    if ((v41 & 1) != 0)
    {
      v42 = *(_QWORD *)(v1 + 256);
      if ((_UNKNOWN *)v42 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v42 + 23) < 0)
        {
          **(_BYTE **)v42 = 0;
          *(_QWORD *)(v42 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v42 = 0;
          *(_BYTE *)(v42 + 23) = 0;
        }
      }
    }
    v41 = *(_DWORD *)(v1 + 400);
    if ((v41 & 2) != 0)
    {
      result = *(_QWORD *)(v1 + 264);
      if (result)
      {
        result = sub_1008D67FC(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    *(_DWORD *)(v1 + 304) = 0;
    if ((v41 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 272);
      if (result)
      {
        result = sub_1008F40F0(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    if ((v41 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 280);
      if (result)
      {
        result = sub_1008F4E48(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    if ((v41 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 288);
      if (result)
      {
        result = sub_1008F80C0(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    if ((v41 & 0x40) != 0)
    {
      result = *(_QWORD *)(v1 + 296);
      if (result)
      {
        result = sub_1008FAFB8(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    if ((v41 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 312);
      if (result)
      {
        result = sub_1008FBF6C(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
  }
  if ((v41 & 0xFF00) != 0)
  {
    if ((v41 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 320);
      if (result)
      {
        result = sub_1008F8D6C(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    if ((v41 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 344);
      if (result)
      {
        result = sub_1008CE484(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
    *(_DWORD *)(v1 + 308) = 0;
    *(_BYTE *)(v1 + 368) = 0;
    *(_DWORD *)(v1 + 372) = 0;
    if ((v41 & 0x8000) != 0)
    {
      result = *(_QWORD *)(v1 + 376);
      if (result)
      {
        result = sub_1008D2DAC(result);
        v41 = *(_DWORD *)(v1 + 400);
      }
    }
  }
  if ((v41 & 0x10000) != 0)
  {
    result = *(_QWORD *)(v1 + 384);
    if (result)
      result = sub_1008CFC44(result);
  }
  *(_DWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_QWORD *)v2 = 0;
  return result;
}

uint64_t sub_1000FF7EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v2;
  sub_100106CDC(v3, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void sub_1000FF844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FF864(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  *(_DWORD *)(a1 + 2984) = a2;
  v7 = a1 + 2176;
  if ((a3 - 1) >= 4)
    v8 = 10;
  else
    v8 = (a3 + 2);
  result = sub_1000FF8D8(v7, v8);
  if (a2 == 1)
  {
    *(_QWORD *)(a1 + 1248) = a4;
  }
  else if (*(_QWORD *)(a1 + 1256) < a4)
  {
    *(_QWORD *)(a1 + 1256) = a4;
    *(_DWORD *)(a1 + 1264) = a2;
  }
  *(_DWORD *)(a1 + 2984) = 0;
  return result;
}

uint64_t sub_1000FF8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t *v6;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  void **v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  void **v89;
  char *v90;
  const char *v91;
  const char *v92;
  int v93;
  void *v94[2];
  char v95;
  unsigned int v96;
  _BYTE __p[12];
  __int16 v98;
  _BYTE *v99;
  __int16 v100;
  void **v101;
  _BYTE buf[12];
  __int16 v103;
  _BYTE *v104;
  __int16 v105;
  _BYTE *v106;
  _BYTE v107[12];
  __int16 v108;
  _BYTE *v109;
  char v110;

  ++*(_DWORD *)(a1 + 88);
  v96 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10180ACB4();
    goto LABEL_159;
  }
  v2 = a1;
  v6 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10180AE20(qword_1022A0070 == -1);
    goto LABEL_159;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = (unint64_t)&qword_1022A0000;
  v8 = qword_1022A0078;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, *(os_log_type_t *)(v2 + 120)))
  {
    v9 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v9 = (_QWORD *)*v9;
    v10 = *(int *)(v2 + 4);
    if (v10 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_1021D0C20)[v10];
    sub_1015A2E04(__p, v11);
    v12 = SHIBYTE(v100);
    v13 = *(_BYTE **)__p;
    v5 = (void **)v107;
    sub_101807F18(a2, v107);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v110 >= 0)
      v15 = v107;
    else
      v15 = *(_BYTE **)v107;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v9;
    v103 = 2080;
    v104 = v14;
    v105 = 2080;
    v106 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v110 < 0)
      operator delete(*(void **)v107);
    if (SHIBYTE(v100) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v59 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v59 = (_QWORD *)*v59;
    v60 = *(int *)(v2 + 4);
    if (v60 > 2)
      v61 = "StateUnknown";
    else
      v61 = (&off_1021D0C20)[v60];
    v62 = qword_1022A0078;
    v3 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(v107, v61);
    v63 = v110;
    v64 = *(_BYTE **)v107;
    v5 = v94;
    sub_101807F18(a2, v94);
    v65 = v107;
    if (v63 < 0)
      v65 = v64;
    if (v95 >= 0)
      v66 = v94;
    else
      v66 = (void **)v94[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v59;
    v98 = 2080;
    v99 = v65;
    v100 = 2080;
    v101 = v66;
    v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, v3, "%scurrent_state,%s,event,%s", __p, 32, v92);
    if (v95 < 0)
      operator delete(v94[0]);
    if (v110 < 0)
      operator delete(*(void **)v107);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v67);
    if (v67 != buf)
      free(v67);
  }
  v16 = *(_QWORD *)(v2 + 16);
  if (!v16)
    goto LABEL_31;
  v17 = (uint64_t **)(v2 + 8);
  v18 = *(_DWORD *)(v2 + 4);
  v19 = v2 + 16;
  do
  {
    v20 = *(_DWORD *)(v16 + 32);
    v21 = v20 < v18;
    if (v20 >= v18)
      v22 = (uint64_t *)v16;
    else
      v22 = (uint64_t *)(v16 + 8);
    if (!v21)
      v19 = v16;
    v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_10180AF94();
    goto LABEL_159;
  }
  v24 = *(uint64_t (**)(_QWORD *, uint64_t))(v19 + 40);
  v23 = *(_QWORD *)(v19 + 48);
  v25 = (_QWORD *)(*(_QWORD *)(v2 + 32) + (v23 >> 1));
  if ((v23 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *, uint64_t))(*v25 + v24);
  v26 = v24(v25, a2);
  v3 = v26;
  v93 = v26;
  if (a2 <= 1 && (_DWORD)v26 != v96)
  {
    sub_10180B3D8();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        v75 = "StateUnknown";
LABEL_161:
        v78 = *(_QWORD *)(v4 + 120);
        v79 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v107, v75);
        v80 = v110;
        v81 = *(_BYTE **)v107;
        sub_1015A2E04(v94, "Exit");
        v82 = v107;
        if (v80 < 0)
          v82 = v81;
        if (v95 >= 0)
          v83 = v94;
        else
          v83 = (void **)v94[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v5;
        v98 = 2080;
        v99 = v82;
        v100 = 2080;
        v101 = v83;
        LODWORD(v91) = 32;
        v84 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, v79, "%soldState,%s,event,%s", __p, v91, v92);
        if (v95 < 0)
          operator delete(v94[0]);
        if (v110 < 0)
          operator delete(*(void **)v107);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v84);
        v17 = (uint64_t **)v92;
        if (v84 != buf)
          free(v84);
LABEL_78:
        v40 = *(_QWORD *)(v2 + 32);
        *(_QWORD *)buf = &v96;
        v41 = sub_1000610B4(v17, (int *)&v96, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v42 = v41[5];
        v43 = (uint64_t)v41[6];
        v44 = (_QWORD *)(v40 + (v43 >> 1));
        if ((v43 & 1) != 0)
          v42 = *(uint64_t **)(*v44 + v42);
        v45 = ((uint64_t (*)(_QWORD *, uint64_t))v42)(v44, 1);
        if (v45 == v96)
          break;
        sub_10180B26C();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v46 = *(NSObject **)(v4 + 120);
      v47 = *(_BYTE *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v5 = (void **)*v5;
        if (v3 > 2)
          v48 = "StateUnknown";
        else
          v48 = (&off_1021D0C20)[(int)v3];
        sub_1015A2E04(__p, v48);
        v49 = SHIBYTE(v100);
        v50 = *(_BYTE **)__p;
        sub_1015A2E04(v107, "Enter");
        v51 = __p;
        if (v49 < 0)
          v51 = v50;
        if (v110 >= 0)
          v52 = v107;
        else
          v52 = *(_BYTE **)v107;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v5;
        v103 = 2080;
        v104 = v51;
        v105 = 2080;
        v106 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v110 < 0)
          operator delete(*(void **)v107);
        if (SHIBYTE(v100) < 0)
          operator delete(*(void **)__p);
        v17 = (uint64_t **)v92;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v76 = (_QWORD *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v76 = (_QWORD *)*v76;
        if (v3 > 2)
          v77 = "StateUnknown";
        else
          v77 = (&off_1021D0C20)[(int)v3];
        v85 = *(_QWORD *)(v4 + 120);
        v86 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v107, v77);
        v4 = v110;
        v87 = *(_BYTE **)v107;
        sub_1015A2E04(v94, "Enter");
        v88 = v107;
        if ((v4 & 0x80000000) != 0)
          v88 = v87;
        if (v95 >= 0)
          v89 = v94;
        else
          v89 = (void **)v94[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v76;
        v98 = 2080;
        v99 = v88;
        v100 = 2080;
        v101 = v89;
        LODWORD(v91) = 32;
        v90 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, v86, "%snewState,%s,event,%s", __p, v91, v92);
        if (v95 < 0)
          operator delete(v94[0]);
        if (v110 < 0)
          operator delete(*(void **)v107);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v90);
        if (v90 != buf)
          free(v90);
      }
      v53 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)buf = &v93;
      v54 = sub_1000610B4(v17, &v93, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v55 = v54[5];
      v56 = (uint64_t)v54[6];
      v57 = (_QWORD *)(v53 + (v56 >> 1));
      if ((v56 & 1) != 0)
        v55 = *(uint64_t **)(*v57 + v55);
      v3 = ((uint64_t (*)(_QWORD *, _QWORD))v55)(v57, 0);
      if ((_DWORD)v3 == v93)
        break;
      sub_10180B100();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v28 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v28 = (_QWORD *)*v28;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v69 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v69 = (_QWORD *)*v69;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v69;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v70);
      if (v70 != buf)
        free(v70);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v29 = qword_1022A0078;
  v30 = *(_BYTE *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v30))
  {
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v31 = "StateUnknown";
    else
      v31 = (&off_1021D0C20)[(int)v3];
    sub_1015A2E04(buf, v31);
    if (v105 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v5;
    v98 = 2080;
    v99 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v105) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v68 = "StateUnknown";
    else
      v68 = (&off_1021D0C20)[(int)v3];
    v71 = qword_1022A0078;
    v72 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(__p, v68);
    if (v100 >= 0)
      v73 = __p;
    else
      v73 = *(_BYTE **)__p;
    *(_DWORD *)v107 = 136315394;
    *(_QWORD *)&v107[4] = v5;
    v108 = 2080;
    v109 = v73;
    LODWORD(v91) = 22;
    v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, v72, "%snewState,%s", v107, v91);
    if (SHIBYTE(v100) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v74);
    if (v74 != buf)
      free(v74);
  }
  if ((_DWORD)v3 != v96)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(v2 + 120);
    v92 = (const char *)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v96 > 2)
        v35 = "StateUnknown";
      else
        v35 = (&off_1021D0C20)[v96];
      sub_1015A2E04(__p, v35);
      v36 = SHIBYTE(v100);
      v37 = *(_BYTE **)__p;
      sub_1015A2E04(v107, "Exit");
      v38 = __p;
      if (v36 < 0)
        v38 = v37;
      if (v110 >= 0)
        v39 = v107;
      else
        v39 = *(_BYTE **)v107;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v5;
      v103 = 2080;
      v104 = v38;
      v105 = 2080;
      v106 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v110 < 0)
        operator delete(*(void **)v107);
      if (SHIBYTE(v100) < 0)
        operator delete(*(void **)__p);
      v4 = (unint64_t)&qword_1022A0000;
      v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v96 <= 2)
      {
        v75 = (&off_1021D0C20)[v96];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_1001006A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100100700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  NSObject *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  NSObject *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  NSObject *v44;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  NSObject *v59;
  _BYTE *v60;
  uint64_t v61;
  std::string *v62;
  char *v63;
  char *v64;
  NSObject *v65;
  NSObject *v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  NSObject *v70;
  const char *v71;
  NSObject *v72;
  NSObject *v74;
  int v75;
  _BYTE *v76;
  _BYTE *v77;
  std::string *v78;
  NSObject *v79;
  _BYTE *v80;
  uint64_t v81;
  std::string *p_p;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  std::string::size_type v87;
  std::string *v88;
  std::string *v89;
  char *v90;
  char *v91;
  const char *v92;
  char *v93;
  const char *v94;
  char *v95;
  uint64_t v96;
  int v97;
  std::string::size_type v98;
  std::string *v99;
  std::string *v100;
  char *v101;
  char *v102;
  const char *v103;
  char *v104;
  const char *v105;
  char *v106;
  const char *v107;
  const char *v108;
  char *v109;
  uint64_t v110;
  int v111;
  std::string::size_type v112;
  std::string *v113;
  std::string *p_buf;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[22];
  unsigned __int8 v120;
  _QWORD v121[2];
  std::string buf;
  std::string __p;
  _BYTE v124[32];
  __int128 v125;
  _BYTE v126[48];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[32];
  __int128 v131;
  _BYTE v132[32];
  __int128 v133;
  _QWORD v134[5];
  int v135;
  __int128 v136;

  v2 = a2;
  switch((int)a2)
  {
    case 0:
      sub_101808128(a1 + 2176, 9);
      sub_1017FA9F4(a1);
      return 1;
    case 1:
      return v2;
    case 2:
      if (*(_BYTE *)(a1 + 1680)
        || (v38 = *(_DWORD *)(a1 + 2596), sub_100CD597C(a1 + 1684))
        || *(_BYTE *)(a1 + 1665)
        || (v38 - 8) >= 0xF && v38 != 27)
      {
        sub_100102100(a1, a1 + 2576);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v79 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)v124);
          v80 = v124[23] >= 0 ? v124 : *(_BYTE **)v124;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#gpsd,Ready,Request,Dropping,%s", (uint8_t *)&__p, 0xCu);
          if ((v124[23] & 0x80000000) != 0)
            operator delete(*(void **)v124);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v124, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v81 = qword_1022A0078;
          sub_10173E9F0(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, v81, 0, "#gpsd,Ready,Request,Dropping,%s", (const char *)&buf);
          v84 = v83;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v84);
          if (v84 != v124)
            free(v84);
        }
      }
      v39 = sub_100103BB0(0);
      if ((v39 & 1) == 0)
        sub_10180AC90(v39, v40, v41);
      *(_DWORD *)(a1 + 2972) |= 4u;
      *(_DWORD *)(a1 + 2596) = 0;
      return 1;
    case 3:
      v42 = *(_DWORD *)(a1 + 2984);
      if (v42 > 50)
      {
        if (v42 == 51)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v72 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v124 = 0;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#gpsd,START_EMERGENCY_PREEMPTIVE_SESSION completed", v124, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v124, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,START_EMERGENCY_PREEMPTIVE_SESSION completed", &__p, 2);
            v68 = (char *)v107;
            sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v107);
            goto LABEL_231;
          }
        }
        else if (v42 == 52)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v66 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v124 = 0;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#gpsd,STOP_EMERGENCY_PREEMPTIVE_SESSION completed", v124, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v124, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,STOP_EMERGENCY_PREEMPTIVE_SESSION completed", &__p, 2);
            v68 = (char *)v67;
            sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v67);
            goto LABEL_231;
          }
        }
      }
      else
      {
        if (v42 != 1)
        {
          if (v42 == 2)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v43 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v124 = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "#gpsd,stop accepted", v124, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v124, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021D0798);
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,stop accepted", &__p, 2);
              v104 = (char *)v103;
              sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v103);
              if (v104 != v124)
                free(v104);
            }
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021D07D8);
            v44 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v124 = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 0, GnssDaemonDevice/gpsd", v124, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v124, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021D07D8);
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              LODWORD(v117) = 2;
              _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps, state, 0, GnssDaemonDevice/gpsd", &__p, v117);
              v109 = (char *)v108;
              sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v108);
              if (v109 != v124)
                free(v109);
            }
            v126[0] = 0;
            v125 = 0u;
            memset(v124, 0, sizeof(v124));
            memset(&v126[8], 0, 32);
            *(_DWORD *)&v126[40] = 1;
            v127 = 0u;
            v128 = 0u;
            v129 = 0u;
            v130[0] = 0;
            __asm { FMOV            V1.2D, #-1.0 }
            *(_OWORD *)&v130[8] = _Q1;
            v130[24] = 0;
            v131 = _Q1;
            v132[0] = 0;
            *(_OWORD *)&v132[8] = _Q1;
            v132[24] = 0;
            v133 = 0u;
            memset(v134, 0, 32);
            *(_QWORD *)&v136 = 0x100000005;
            v49 = *(_OWORD *)&v132[16];
            v50 = _Q1;
            *(_OWORD *)(a1 + 2040) = *(_OWORD *)v132;
            *(_OWORD *)(a1 + 2056) = v49;
            *(_OWORD *)(a1 + 2072) = 0u;
            v51 = *(_OWORD *)v130;
            v52 = *(_OWORD *)&v130[16];
            v53 = v128;
            *(_OWORD *)(a1 + 1976) = v129;
            *(_OWORD *)(a1 + 1992) = v51;
            *(_OWORD *)(a1 + 2008) = v52;
            *(_OWORD *)(a1 + 2024) = v50;
            v54 = *(_OWORD *)&v126[32];
            v55 = v127;
            v56 = *(_OWORD *)v126;
            *(_OWORD *)(a1 + 1912) = *(_OWORD *)&v126[16];
            *(_OWORD *)(a1 + 1928) = v54;
            *(_OWORD *)(a1 + 1944) = v55;
            *(_OWORD *)(a1 + 1960) = v53;
            v57 = *(_OWORD *)&v124[16];
            v58 = v125;
            *(_OWORD *)(a1 + 1848) = *(_OWORD *)v124;
            *(_OWORD *)(a1 + 1864) = v57;
            v134[4] = 0;
            v135 = 1065353216;
            *((_QWORD *)&v136 + 1) = 0;
            *(_QWORD *)(a1 + 2088) = v134[0];
            *(_OWORD *)(a1 + 1880) = v58;
            *(_OWORD *)(a1 + 1896) = v56;
            sub_10020B514(a1 + 2096, &v134[1]);
            *(_OWORD *)(a1 + 2136) = v136;
            sub_100067A50((uint64_t)&v134[1]);
          }
          goto LABEL_146;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v69 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v124 = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "#gpsd,start completed", v124, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v124, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,start completed", &__p, 2);
          v106 = (char *)v105;
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v105);
          if (v106 != v124)
            free(v106);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021D07D8);
        v70 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v124 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 1, GnssDaemonDevice/gpsd", v124, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v124, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021D07D8);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v117) = 2;
          _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps, state, 1, GnssDaemonDevice/gpsd", &__p, v117);
          v68 = (char *)v71;
          sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v71);
LABEL_231:
          if (v68 != v124)
            free(v68);
        }
      }
LABEL_146:
      sub_10010201C(a1, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return 1;
    case 4:
      v19 = *(_DWORD *)(a1 + 2984);
      v20 = v19 > 0x33;
      v21 = (1 << v19) & 0x8000400000006;
      if (v20 || v21 == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v74 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          sub_1015A2E04(v124, "GpsdResponseFailureStatusCode");
          v75 = v124[23];
          v76 = *(_BYTE **)v124;
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          v77 = v124;
          if (v75 < 0)
            v77 = v76;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &__p;
          else
            v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v78;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Drop,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v124[23] & 0x80000000) != 0)
            operator delete(*(void **)v124);
        }
        v34 = sub_1001BFF7C(115, 0);
        if ((_DWORD)v34)
        {
          bzero(v124, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v110 = qword_1022A0078;
          sub_1015A2E04(&__p, "GpsdResponseFailureStatusCode");
          v111 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v112 = __p.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          v113 = &__p;
          if (v111 < 0)
            v113 = (std::string *)v112;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = v113;
          *(_WORD *)&v119[12] = 2082;
          *(_QWORD *)&v119[14] = p_buf;
          _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, v110, 16, "#gpsd,Ready,FailedRequest,Drop,%{public}s,%{public}s", v119, 22);
          v116 = v115;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v34 = sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v116);
          if (v116 != v124)
            free(v116);
        }
        v2 = 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v23 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          sub_1015A2E04(v124, "GpsdResponseFailureStatusCode");
          v24 = v124[23];
          v25 = *(_BYTE **)v124;
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          v26 = v124;
          if (v24 < 0)
            v26 = v25;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v124[23] & 0x80000000) != 0)
            operator delete(*(void **)v124);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(v124, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v96 = qword_1022A0078;
          sub_1015A2E04(&__p, "GpsdResponseFailureStatusCode");
          v97 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v98 = __p.__r_.__value_.__r.__words[0];
          sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          v99 = &__p;
          if (v97 < 0)
            v99 = (std::string *)v98;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = &buf;
          else
            v100 = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v119 = 136446466;
          *(_QWORD *)&v119[4] = v99;
          *(_WORD *)&v119[12] = 2082;
          *(_QWORD *)&v119[14] = v100;
          _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, v96, 16, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", v119, 22);
          v102 = v101;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v102);
          if (v102 != v124)
            free(v102);
        }
        sub_101807F44((_DWORD *)a1, 0, *(_DWORD *)(a1 + 2984));
        sub_1015A2E04(&buf, "GpsdResponseFailureStatusCode");
        v28 = std::string::append(&buf, " for request ");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)v119);
        if ((v120 & 0x80u) == 0)
          v30 = v119;
        else
          v30 = *(const std::string::value_type **)v119;
        if ((v120 & 0x80u) == 0)
          v31 = v120;
        else
          v31 = *(_QWORD *)&v119[8];
        v32 = std::string::append(&__p, v30, v31);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *(_QWORD *)&v124[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)v124 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v34 = (uint64_t)std::string::append((std::string *)v124, " in Ready state");
        v35 = *(_QWORD *)v34;
        v121[0] = *(_QWORD *)(v34 + 8);
        *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(v34 + 15);
        v36 = *(_BYTE *)(v34 + 23);
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        *(_QWORD *)v34 = 0;
        if (*(char *)(a1 + 2335) < 0)
          operator delete(*(void **)(a1 + 2312));
        *(_QWORD *)(a1 + 2312) = v35;
        *(_QWORD *)(a1 + 2320) = v121[0];
        *(_QWORD *)(a1 + 2327) = *(_QWORD *)((char *)v121 + 7);
        *(_BYTE *)(a1 + 2335) = v36;
        if ((v124[23] & 0x80000000) != 0)
          operator delete(*(void **)v124);
        if ((char)v120 < 0)
          operator delete(*(void **)v119);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v2 = 2;
      }
      sub_1018070B4(v34, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return v2;
    case 5:
    case 6:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        sub_101807F18(v2, v124);
        v5 = v124[23];
        v6 = *(_BYTE **)v124;
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
        v7 = v124;
        if (v5 < 0)
          v7 = v6;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &__p;
        else
          v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v124[23] & 0x80000000) != 0)
          operator delete(*(void **)v124);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v124, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v85 = qword_1022A0078;
        sub_101807F18(v2, &__p);
        v86 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v87 = __p.__r_.__value_.__r.__words[0];
        sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
        v88 = &__p;
        if (v86 < 0)
          v88 = (std::string *)v87;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &buf;
        else
          v89 = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v119 = 136446466;
        *(_QWORD *)&v119[4] = v88;
        *(_WORD *)&v119[12] = 2082;
        *(_QWORD *)&v119[14] = v89;
        _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, v85, 16, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", v119, 22);
        v91 = v90;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v91);
        if (v91 != v124)
          free(v91);
      }
      sub_101807F44((_DWORD *)a1, 1, *(_DWORD *)(a1 + 2984));
      sub_101807F18(v2, &buf);
      v9 = std::string::append(&buf, " for request ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      sub_10173E9F0(*(_DWORD *)(a1 + 2984), (uint64_t)v119);
      if ((v120 & 0x80u) == 0)
        v11 = v119;
      else
        v11 = *(const std::string::value_type **)v119;
      if ((v120 & 0x80u) == 0)
        v12 = v120;
      else
        v12 = *(_QWORD *)&v119[8];
      v13 = std::string::append(&__p, v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      *(_QWORD *)&v124[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
      *(_OWORD *)v124 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append((std::string *)v124, " in Ready state");
      v16 = v15->__r_.__value_.__r.__words[0];
      v121[0] = v15->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v121 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 2335) < 0)
        operator delete(*(void **)(a1 + 2312));
      *(_QWORD *)(a1 + 2312) = v16;
      *(_QWORD *)(a1 + 2320) = v121[0];
      *(_QWORD *)(a1 + 2327) = *(_QWORD *)((char *)v121 + 7);
      *(_BYTE *)(a1 + 2335) = v17;
      if ((v124[23] & 0x80000000) != 0)
        operator delete(*(void **)v124);
      if ((char)v120 < 0)
        operator delete(*(void **)v119);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      return 2;
    case 7:
      v37 = *(_QWORD *)(a1 + 2992);
      *(_QWORD *)(a1 + 2992) = 0;
      v118 = v37;
      sub_100106220(a1, &v118);
      if (v118)
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
      return 1;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v65 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#gpsd,Ready,#Warning,Detected GpsdShutdown", v124, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v124, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Ready,#Warning,Detected GpsdShutdown", &__p, 2);
        v95 = (char *)v94;
        sub_100512490("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v94);
        if (v95 != v124)
          free(v95);
      }
      return 0;
    case 9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gpsd,Ready,Unexpected event GpsdAliveTimerExpired", v124, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v124, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,Ready,Unexpected event GpsdAliveTimerExpired", &__p, 2);
        v93 = (char *)v92;
        sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v92);
        if (v93 != v124)
          free(v93);
      }
      return 2;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v59 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        sub_101807F18(v2, v124);
        v60 = v124[23] >= 0 ? v124 : *(_BYTE **)v124;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#gpsd,Ready,Unexpected event,%{public}s", (uint8_t *)&__p, 0xCu);
        if ((v124[23] & 0x80000000) != 0)
          operator delete(*(void **)v124);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v124, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v61 = qword_1022A0078;
        sub_101807F18(v2, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &__p;
        else
          v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
        _os_log_send_and_compose_impl(2, 0, v124, 1628, &_mh_execute_header, v61, 16, "#gpsd,Ready,Unexpected event,%{public}s", &buf, 12);
        v64 = v63;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v64);
        if (v64 != v124)
          free(v64);
      }
      return 1;
  }
}

void sub_100101F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10010201C(uint64_t result, int a2)
{
  switch(a2)
  {
    case 9:
      *(_BYTE *)(result + 648) = 1;
      ++*(_QWORD *)(result + 592);
      break;
    case 10:
      ++*(_QWORD *)(result + 624);
      break;
    case 11:
      ++*(_QWORD *)(result + 616);
      break;
    case 13:
      *(_BYTE *)(result + 652) = 1;
      break;
    case 16:
      ++*(_QWORD *)(result + 536);
      break;
    case 17:
      ++*(_QWORD *)(result + 520);
      break;
    case 18:
      ++*(_QWORD *)(result + 584);
      ++*(_QWORD *)(result + 640);
      break;
    case 19:
      ++*(_QWORD *)(result + 632);
      break;
    case 20:
      ++*(_QWORD *)(result + 608);
      break;
    case 21:
      ++*(_QWORD *)(result + 576);
      break;
    case 22:
      ++*(_QWORD *)(result + 568);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100102100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  void (***v5)(_QWORD, uint64_t);
  unint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = *(void (****)(_QWORD, uint64_t))(a1 + 1736);
  if (!v5)
  {
    sub_10180B544();
    __break(1u);
LABEL_15:
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
    goto LABEL_6;
  }
  v2 = a2;
  v6 = *(unsigned int *)(a2 + 20);
  if (v6 >= 0x4D)
    sub_100263950("bitset test argument out of range");
  if (((*(_QWORD *)(a1 + ((v6 >> 3) & 0x1FFFFFF8) + 2160) >> v6) & 1) != 0)
  {
    (**v5)(v5, a2);
    return;
  }
  v3 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    goto LABEL_15;
LABEL_6:
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_10173E9F0(*(_DWORD *)(v2 + 20), (uint64_t)__p);
    v8 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,Request type is disabled,%{public}s", buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    sub_10173E9F0(*(_DWORD *)(v2 + 20), (uint64_t)buf);
    if (v14 >= 0)
      v10 = buf;
    else
      v10 = *(_BYTE **)buf;
    v15 = 136446210;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "#gpsd,Request type is disabled,%{public}s", &v15, 12);
    v12 = v11;
    if (v14 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::sendRequestViaGpsdClient(const proto::gpsd::Request &)", "%s\n", v12);
    if (v12 != (char *)__p)
      free(v12);
  }
}

void sub_100102390()
{
  _QWORD v0[6];

  sub_1001047C0();
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x3812000000;
  v0[3] = sub_1002074C8;
  v0[4] = sub_100207F34;
  v0[5] = 0;
  operator new();
}

void sub_1001024B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  _Block_object_dispose(&a18, 8);
  v25 = a24;
  a24 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_100102508(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1021933A8;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 380) = 0;
  sub_100102868(a1, a2);
  return a1;
}

void sub_1001025D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = v3;
  if (*v4)
    operator delete[]();
  sub_101935B7C(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10010260C(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  char *v6;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;

  v5 = (unint64_t *)(a1 + 2);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_19;
        v20 = 0;
        v12 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v13 = v20;
        }
        else
        {
          v13 = *v12;
          *((_QWORD *)this + 1) = v12 + 1;
        }
        if (sub_100103BB0(v13))
        {
          a1[7] |= 1u;
          a1[4] = v13;
        }
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 < v10 && *v15 == 16)
        {
          v14 = v15 + 1;
          *((_QWORD *)this + 1) = v14;
          goto LABEL_29;
        }
      }
      if (v8 != 2)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_19;
      v14 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
LABEL_29:
      if ((unint64_t)v14 >= v10 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!(_DWORD)result)
          return result;
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        *v5 = *v14;
        v16 = v14 + 1;
        *((_QWORD *)this + 1) = v16;
      }
      a1[7] |= 2u;
      if ((unint64_t)v16 < v10 && *v16 == 24)
      {
        v11 = v16 + 1;
        *((_QWORD *)this + 1) = v11;
LABEL_37:
        v19 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v19);
          if (!(_DWORD)result)
            return result;
          v17 = v19;
        }
        else
        {
          v17 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        if (sub_10010285C(v17))
        {
          if (!sub_10010285C(v17))
            sub_101935D1C();
          a1[7] |= 4u;
          a1[5] = v17;
        }
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v8 == 3)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_37;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
      return 0;
  }
}

BOOL sub_10010285C(unsigned int a1)
{
  return a1 < 0xA;
}

void sub_100102868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  const std::string *v70;
  std::string *v71;
  _DWORD *v72;
  _DWORD *v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  int v89;
  char v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  char v96;
  _BYTE v97[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v97, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 2358);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v97, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v96, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v97);
  }
  v5 = *(_DWORD *)(a2 + 336);
  if (v5)
  {
    sub_1002A19E0(a1 + 328, *(_DWORD *)(a1 + 336) + v5);
    memcpy((void *)(*(_QWORD *)(a1 + 328) + 4 * *(int *)(a1 + 336)), *(const void **)(a2 + 328), 4 * *(int *)(a2 + 336));
    *(_DWORD *)(a1 + 336) += *(_DWORD *)(a2 + 336);
  }
  v6 = *(_DWORD *)(a2 + 360);
  if (v6)
  {
    sub_1002A19E0(a1 + 352, *(_DWORD *)(a1 + 360) + v6);
    memcpy((void *)(*(_QWORD *)(a1 + 352) + 4 * *(int *)(a1 + 360)), *(const void **)(a2 + 352), 4 * *(int *)(a2 + 360));
    *(_DWORD *)(a1 + 360) += *(_DWORD *)(a2 + 360);
  }
  v7 = *(_DWORD *)(a2 + 396);
  if (!(_BYTE)v7)
    goto LABEL_46;
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 396) |= 1u;
    *(_QWORD *)(a1 + 8) = v8;
    v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 2) == 0)
    {
LABEL_10:
      if ((v7 & 4) == 0)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_10;
  }
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 396) |= 2u;
  *(_DWORD *)(a1 + 16) = v9;
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 20);
  if ((sub_100103BB0(v10) & 1) == 0)
    sub_101935B8C();
  *(_DWORD *)(a1 + 396) |= 4u;
  *(_DWORD *)(a1 + 20) = v10;
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_21:
  *(_DWORD *)(a1 + 396) |= 8u;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    operator new();
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    v12 = *(_QWORD *)(qword_1023118F8 + 24);
  sub_10010995C(v11, v12);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
LABEL_31:
    *(_DWORD *)(a1 + 396) |= 0x20u;
    v15 = *(_DWORD **)(a1 + 40);
    if (!v15)
      operator new();
    v16 = *(_QWORD *)(a2 + 40);
    if (!v16)
      v16 = *(_QWORD *)(qword_1023118F8 + 40);
    sub_100F3B780(v15, v16);
    v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x40) == 0)
    {
LABEL_15:
      if ((v7 & 0x80) == 0)
        goto LABEL_46;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_26:
  *(_DWORD *)(a1 + 396) |= 0x10u;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 32);
  if (!v14)
    v14 = *(_QWORD *)(qword_1023118F8 + 32);
  sub_100109B54(v13, v14);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x20) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v7 & 0x40) == 0)
    goto LABEL_15;
LABEL_36:
  *(_DWORD *)(a1 + 396) |= 0x40u;
  v17 = *(_DWORD **)(a1 + 48);
  if (!v17)
    operator new();
  v18 = *(_QWORD *)(a2 + 48);
  if (!v18)
    v18 = *(_QWORD *)(qword_1023118F8 + 48);
  sub_100F3B8BC(v17, v18);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 396) |= 0x80u;
    v19 = *(_DWORD **)(a1 + 56);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 56);
    if (!v20)
      v20 = *(_QWORD *)(qword_1023118F8 + 56);
    sub_100F3B9F8(v19, v20);
    v7 = *(_DWORD *)(a2 + 396);
  }
LABEL_46:
  if ((v7 & 0xFF00) == 0)
    goto LABEL_96;
  if ((v7 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 396) |= 0x100u;
    v21 = *(_QWORD *)(a1 + 64);
    if (!v21)
      operator new();
    v22 = *(_QWORD *)(a2 + 64);
    if (!v22)
      v22 = *(_QWORD *)(qword_1023118F8 + 64);
    sub_100F3BB34(v21, v22);
    v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x200) == 0)
    {
LABEL_49:
      if ((v7 & 0x400) == 0)
        goto LABEL_50;
      goto LABEL_66;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_49;
  }
  *(_DWORD *)(a1 + 396) |= 0x200u;
  v23 = *(_QWORD *)(a1 + 72);
  if (!v23)
    operator new();
  v24 = *(_QWORD *)(a2 + 72);
  if (!v24)
    v24 = *(_QWORD *)(qword_1023118F8 + 72);
  sub_100F3BC1C(v23, v24);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x400) == 0)
  {
LABEL_50:
    if ((v7 & 0x800) == 0)
      goto LABEL_51;
    goto LABEL_71;
  }
LABEL_66:
  *(_DWORD *)(a1 + 396) |= 0x400u;
  v25 = *(_QWORD *)(a1 + 80);
  if (!v25)
    operator new();
  v26 = *(_QWORD *)(a2 + 80);
  if (!v26)
    v26 = *(_QWORD *)(qword_1023118F8 + 80);
  sub_100105F24(v25, v26);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x800) == 0)
  {
LABEL_51:
    if ((v7 & 0x1000) == 0)
      goto LABEL_52;
    goto LABEL_76;
  }
LABEL_71:
  *(_DWORD *)(a1 + 396) |= 0x800u;
  v27 = *(_QWORD *)(a1 + 88);
  if (!v27)
    operator new();
  v28 = *(_QWORD *)(a2 + 88);
  if (!v28)
    v28 = *(_QWORD *)(qword_1023118F8 + 88);
  sub_1001060A0(v27, v28);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x1000) == 0)
  {
LABEL_52:
    if ((v7 & 0x2000) == 0)
      goto LABEL_53;
    goto LABEL_81;
  }
LABEL_76:
  *(_DWORD *)(a1 + 396) |= 0x1000u;
  v29 = *(_QWORD *)(a1 + 96);
  if (!v29)
    operator new();
  v30 = *(_QWORD *)(a2 + 96);
  if (!v30)
    v30 = *(_QWORD *)(qword_1023118F8 + 96);
  sub_100109148(v29, v30);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x2000) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_86;
  }
LABEL_81:
  *(_DWORD *)(a1 + 396) |= 0x2000u;
  v31 = *(_QWORD *)(a1 + 104);
  if (!v31)
    operator new();
  v32 = *(_QWORD *)(a2 + 104);
  if (!v32)
    v32 = *(_QWORD *)(qword_1023118F8 + 104);
  sub_100F3BE50(v31, v32);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x4000) == 0)
  {
LABEL_54:
    if ((v7 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_91;
  }
LABEL_86:
  *(_DWORD *)(a1 + 396) |= 0x4000u;
  v33 = *(_QWORD *)(a1 + 112);
  if (!v33)
    operator new();
  v34 = *(_QWORD *)(a2 + 112);
  if (!v34)
    v34 = *(_QWORD *)(qword_1023118F8 + 112);
  sub_100F3BF58(v33, v34);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x8000) != 0)
  {
LABEL_91:
    *(_DWORD *)(a1 + 396) |= 0x8000u;
    v35 = *(_QWORD *)(a1 + 120);
    if (!v35)
      operator new();
    v36 = *(_QWORD *)(a2 + 120);
    if (!v36)
      v36 = *(_QWORD *)(qword_1023118F8 + 120);
    sub_100109C80(v35, v36);
    v7 = *(_DWORD *)(a2 + 396);
  }
LABEL_96:
  if ((v7 & 0xFF0000) == 0)
    goto LABEL_146;
  if ((v7 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 396) |= 0x10000u;
    v37 = *(_QWORD *)(a1 + 128);
    if (!v37)
      operator new();
    v38 = *(_QWORD *)(a2 + 128);
    if (!v38)
      v38 = *(_QWORD *)(qword_1023118F8 + 128);
    sub_100010D44(v37, v38);
    v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x20000) == 0)
    {
LABEL_99:
      if ((v7 & 0x40000) == 0)
        goto LABEL_100;
      goto LABEL_116;
    }
  }
  else if ((v7 & 0x20000) == 0)
  {
    goto LABEL_99;
  }
  *(_DWORD *)(a1 + 396) |= 0x20000u;
  v39 = *(_DWORD **)(a1 + 136);
  if (!v39)
    operator new();
  v40 = *(_QWORD *)(a2 + 136);
  if (!v40)
    v40 = *(_QWORD *)(qword_1023118F8 + 136);
  sub_100F3C040(v39, v40);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x40000) == 0)
  {
LABEL_100:
    if ((v7 & 0x80000) == 0)
      goto LABEL_101;
    goto LABEL_121;
  }
LABEL_116:
  *(_DWORD *)(a1 + 396) |= 0x40000u;
  v41 = *(_QWORD *)(a1 + 144);
  if (!v41)
    operator new();
  v42 = *(_QWORD *)(a2 + 144);
  if (!v42)
    v42 = *(_QWORD *)(qword_1023118F8 + 144);
  sub_100F3C17C(v41, v42);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x80000) == 0)
  {
LABEL_101:
    if ((v7 & 0x100000) == 0)
      goto LABEL_102;
    goto LABEL_126;
  }
LABEL_121:
  *(_DWORD *)(a1 + 396) |= 0x80000u;
  v43 = *(_QWORD *)(a1 + 152);
  if (!v43)
    operator new();
  v44 = *(_BYTE **)(a2 + 152);
  if (!v44)
    v44 = *(_BYTE **)(qword_1023118F8 + 152);
  sub_100F3C21C(v43, v44);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x100000) == 0)
  {
LABEL_102:
    if ((v7 & 0x200000) == 0)
      goto LABEL_103;
    goto LABEL_131;
  }
LABEL_126:
  *(_DWORD *)(a1 + 396) |= 0x100000u;
  v45 = *(_QWORD *)(a1 + 160);
  if (!v45)
    operator new();
  v46 = *(_QWORD *)(a2 + 160);
  if (!v46)
    v46 = *(_QWORD *)(qword_1023118F8 + 160);
  sub_100F3C364(v45, v46);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x200000) == 0)
  {
LABEL_103:
    if ((v7 & 0x400000) == 0)
      goto LABEL_104;
    goto LABEL_136;
  }
LABEL_131:
  *(_DWORD *)(a1 + 396) |= 0x200000u;
  v47 = *(_QWORD *)(a1 + 168);
  if (!v47)
    operator new();
  v48 = *(_QWORD *)(a2 + 168);
  if (!v48)
    v48 = *(_QWORD *)(qword_1023118F8 + 168);
  sub_100F3C404(v47, v48);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x400000) == 0)
  {
LABEL_104:
    if ((v7 & 0x800000) == 0)
      goto LABEL_146;
    goto LABEL_141;
  }
LABEL_136:
  *(_DWORD *)(a1 + 396) |= 0x400000u;
  v49 = *(_DWORD **)(a1 + 176);
  if (!v49)
    operator new();
  v50 = *(_QWORD *)(a2 + 176);
  if (!v50)
    v50 = *(_QWORD *)(qword_1023118F8 + 176);
  sub_1001097F8(v49, v50);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x800000) != 0)
  {
LABEL_141:
    *(_DWORD *)(a1 + 396) |= 0x800000u;
    v51 = *(_QWORD *)(a1 + 184);
    if (!v51)
      operator new();
    v52 = *(_QWORD *)(a2 + 184);
    if (!v52)
      v52 = *(_QWORD *)(qword_1023118F8 + 184);
    sub_100106180(v51, v52);
    v7 = *(_DWORD *)(a2 + 396);
  }
LABEL_146:
  if (!HIBYTE(v7))
    goto LABEL_196;
  if ((v7 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 396) |= 0x1000000u;
    v53 = *(_QWORD *)(a1 + 192);
    if (!v53)
      operator new();
    v54 = *(_QWORD *)(a2 + 192);
    if (!v54)
      v54 = *(_QWORD *)(qword_1023118F8 + 192);
    sub_100F3C4C4(v53, v54);
    v7 = *(_DWORD *)(a2 + 396);
    if ((v7 & 0x2000000) == 0)
    {
LABEL_149:
      if ((v7 & 0x4000000) == 0)
        goto LABEL_150;
      goto LABEL_166;
    }
  }
  else if ((v7 & 0x2000000) == 0)
  {
    goto LABEL_149;
  }
  *(_DWORD *)(a1 + 396) |= 0x2000000u;
  v55 = *(_QWORD *)(a1 + 200);
  if (!v55)
    operator new();
  v56 = *(_QWORD *)(a2 + 200);
  if (!v56)
    v56 = *(_QWORD *)(qword_1023118F8 + 200);
  sub_100F3C5A0(v55, v56);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x4000000) == 0)
  {
LABEL_150:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_151;
    goto LABEL_171;
  }
LABEL_166:
  *(_DWORD *)(a1 + 396) |= 0x4000000u;
  v57 = *(_QWORD *)(a1 + 208);
  if (!v57)
    operator new();
  v58 = *(_QWORD *)(a2 + 208);
  if (!v58)
    v58 = *(_QWORD *)(qword_1023118F8 + 208);
  sub_100F3C67C(v57, v58);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x8000000) == 0)
  {
LABEL_151:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_152;
    goto LABEL_176;
  }
LABEL_171:
  *(_DWORD *)(a1 + 396) |= 0x8000000u;
  v59 = *(_QWORD *)(a1 + 216);
  if (!v59)
    operator new();
  v60 = *(_QWORD *)(a2 + 216);
  if (!v60)
    v60 = *(_QWORD *)(qword_1023118F8 + 216);
  sub_10021C460(v59, v60);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_152:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_153;
    goto LABEL_181;
  }
LABEL_176:
  *(_DWORD *)(a1 + 396) |= 0x10000000u;
  v61 = *(_QWORD *)(a1 + 224);
  if (!v61)
    operator new();
  v62 = *(_QWORD *)(a2 + 224);
  if (!v62)
    v62 = *(_QWORD *)(qword_1023118F8 + 224);
  sub_100F3C924(v61, v62);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_153:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_154;
    goto LABEL_186;
  }
LABEL_181:
  *(_DWORD *)(a1 + 396) |= 0x20000000u;
  v63 = *(_QWORD *)(a1 + 232);
  if (!v63)
    operator new();
  v64 = *(_QWORD *)(a2 + 232);
  if (!v64)
    v64 = *(_QWORD *)(qword_1023118F8 + 232);
  sub_100F3C9D0(v63, v64);
  v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x40000000) == 0)
  {
LABEL_154:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_196;
    goto LABEL_191;
  }
LABEL_186:
  *(_DWORD *)(a1 + 396) |= 0x40000000u;
  v65 = *(_QWORD *)(a1 + 240);
  if (!v65)
    operator new();
  v66 = *(_BYTE **)(a2 + 240);
  if (!v66)
    v66 = *(_BYTE **)(qword_1023118F8 + 240);
  sub_100107188(v65, v66);
  if ((*(_DWORD *)(a2 + 396) & 0x80000000) != 0)
  {
LABEL_191:
    *(_DWORD *)(a1 + 396) |= 0x80000000;
    v67 = *(_QWORD *)(a1 + 248);
    if (!v67)
      operator new();
    v68 = *(_QWORD *)(a2 + 248);
    if (!v68)
      v68 = *(_QWORD *)(qword_1023118F8 + 248);
    sub_1008F936C(v67, v68);
  }
LABEL_196:
  v69 = *(_DWORD *)(a2 + 400);
  if ((_BYTE)v69)
  {
    if ((v69 & 1) != 0)
    {
      v70 = *(const std::string **)(a2 + 256);
      *(_DWORD *)(a1 + 400) |= 1u;
      v71 = *(std::string **)(a1 + 256);
      if (v71 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v71, v70);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 2) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 2u;
      v72 = *(_DWORD **)(a1 + 264);
      if (!v72)
        operator new();
      v73 = *(_DWORD **)(a2 + 264);
      if (!v73)
        v73 = *(_DWORD **)(qword_1023118F8 + 264);
      sub_1008D6484(v72, v73);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 4) != 0)
    {
      v74 = *(_DWORD *)(a2 + 304);
      *(_DWORD *)(a1 + 400) |= 4u;
      *(_DWORD *)(a1 + 304) = v74;
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 8) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 8u;
      v75 = *(_DWORD **)(a1 + 272);
      if (!v75)
        operator new();
      v76 = *(_QWORD *)(a2 + 272);
      if (!v76)
        v76 = *(_QWORD *)(qword_1023118F8 + 272);
      sub_1008F3D98(v75, v76);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 0x10u;
      v77 = *(_DWORD **)(a1 + 280);
      if (!v77)
        operator new();
      v78 = *(_DWORD **)(a2 + 280);
      if (!v78)
        v78 = *(_DWORD **)(qword_1023118F8 + 280);
      sub_1008F4B28(v77, v78);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 0x20u;
      v79 = *(_DWORD **)(a1 + 288);
      if (!v79)
        operator new();
      v80 = *(_QWORD *)(a2 + 288);
      if (!v80)
        v80 = *(_QWORD *)(qword_1023118F8 + 288);
      sub_1008F7DE0(v79, v80);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 0x40u;
      v81 = *(_QWORD *)(a1 + 296);
      if (!v81)
        operator new();
      v82 = *(_QWORD *)(a2 + 296);
      if (!v82)
        v82 = *(_QWORD *)(qword_1023118F8 + 296);
      sub_1008FAC08(v81, v82);
      v69 = *(_DWORD *)(a2 + 400);
    }
    if ((v69 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 400) |= 0x80u;
      v83 = *(_QWORD *)(a1 + 312);
      if (!v83)
        operator new();
      v84 = *(_QWORD *)(a2 + 312);
      if (!v84)
        v84 = *(_QWORD *)(qword_1023118F8 + 312);
      sub_1008FBD4C(v83, v84);
      v69 = *(_DWORD *)(a2 + 400);
    }
  }
  if ((v69 & 0xFF00) == 0)
    goto LABEL_256;
  if ((v69 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 400) |= 0x100u;
    v85 = *(_QWORD *)(a1 + 320);
    if (!v85)
      operator new();
    v86 = *(_QWORD *)(a2 + 320);
    if (!v86)
      v86 = *(_QWORD *)(qword_1023118F8 + 320);
    sub_1008F8AEC(v85, v86);
    v69 = *(_DWORD *)(a2 + 400);
  }
  if ((v69 & 0x400) != 0)
  {
    *(_DWORD *)(a1 + 400) |= 0x400u;
    v87 = *(_DWORD **)(a1 + 344);
    if (!v87)
      operator new();
    v88 = *(_QWORD *)(a2 + 344);
    if (!v88)
      v88 = *(_QWORD *)(qword_1023118F8 + 344);
    sub_1008CE044(v87, v88);
    v69 = *(_DWORD *)(a2 + 400);
  }
  if ((v69 & 0x800) != 0)
  {
    v89 = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a1 + 400) |= 0x800u;
    *(_DWORD *)(a1 + 308) = v89;
    v69 = *(_DWORD *)(a2 + 400);
    if ((v69 & 0x2000) == 0)
    {
LABEL_254:
      if ((v69 & 0x4000) == 0)
        goto LABEL_255;
      goto LABEL_260;
    }
  }
  else if ((v69 & 0x2000) == 0)
  {
    goto LABEL_254;
  }
  v90 = *(_BYTE *)(a2 + 368);
  *(_DWORD *)(a1 + 400) |= 0x2000u;
  *(_BYTE *)(a1 + 368) = v90;
  v69 = *(_DWORD *)(a2 + 400);
  if ((v69 & 0x4000) != 0)
  {
LABEL_260:
    v91 = *(_DWORD *)(a2 + 372);
    *(_DWORD *)(a1 + 400) |= 0x4000u;
    *(_DWORD *)(a1 + 372) = v91;
    v69 = *(_DWORD *)(a2 + 400);
    if ((v69 & 0x8000) != 0)
      goto LABEL_261;
LABEL_256:
    if ((v69 & 0x10000) == 0)
      return;
    goto LABEL_266;
  }
LABEL_255:
  if ((v69 & 0x8000) == 0)
    goto LABEL_256;
LABEL_261:
  *(_DWORD *)(a1 + 400) |= 0x8000u;
  v92 = *(_QWORD *)(a1 + 376);
  if (!v92)
    operator new();
  v93 = *(_QWORD *)(a2 + 376);
  if (!v93)
    v93 = *(_QWORD *)(qword_1023118F8 + 376);
  sub_1008D2928(v92, v93);
  if ((*(_DWORD *)(a2 + 400) & 0x10000) != 0)
  {
LABEL_266:
    *(_DWORD *)(a1 + 400) |= 0x10000u;
    v94 = *(_DWORD **)(a1 + 384);
    if (!v94)
      operator new();
    v95 = *(_QWORD *)(a2 + 384);
    if (!v95)
      v95 = *(_QWORD *)(qword_1023118F8 + 384);
    sub_1008CF9D4(v94, v95);
  }
}

void sub_100103AA8()
{
  operator delete();
}

uint64_t sub_100103BB0(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_100103BEC(std::mutex *a1, wireless_diagnostics::google::protobuf::MessageLite **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t sig;
  unint64_t v8;
  wireless_diagnostics::google::protobuf::MessageLite *v9;
  int v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::steady_clock::time_point v12;
  std::chrono::system_clock::time_point v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15;
  unint64_t v16;
  int v17;
  NSObject *v18;
  char *v19;
  unint64_t v20;
  NSObject *v21;
  _BYTE *v22;
  int v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  _BYTE *v27;
  NSObject *v28;
  int v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  NSObject *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  wireless_diagnostics::google::protobuf::MessageLite *v51;
  std::unique_lock<std::mutex> __lk;
  int v53;
  _BYTE *v54;
  __int16 v55;
  _BYTE *v56;
  _BYTE v57[12];
  __int16 v58;
  _BYTE *v59;
  char v60;
  _BYTE buf[12];
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  _BYTE v66[12];
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  if (!*a2)
  {
    sub_1016E0370();
    __break(1u);
LABEL_85:
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
LABEL_28:
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#gpsdClient, gpsd restarted while waiting for response,do not post response event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v4[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      *(_WORD *)v66 = 0;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient, gpsd restarted while waiting for response,do not post response event", v66, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v19);
      if (v19 != buf)
        goto LABEL_125;
    }
    goto LABEL_81;
  }
  v3 = (uint64_t)a1;
  if (*((_DWORD *)*a2 + 5) == 34)
    sig = 4 * a1[4].__m_.__sig;
  else
    sig = a1[4].__m_.__sig;
  __lk.__m_ = a1 + 2;
  __lk.__owns_ = 1;
  std::mutex::lock(a1 + 2);
  *(_DWORD *)(v3 + 244) = *((_DWORD *)*a2 + 5);
  v8 = sub_1001047C0();
  *(_DWORD *)(v3 + 240) = 0;
  v9 = *a2;
  *a2 = 0;
  v51 = v9;
  sub_100104D18(v3, &v51, a3);
  v51 = 0;
  if (v9)
    (*(void (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)v9 + 8))(v9);
  std::mutex::lock((std::mutex *)(v3 + 272));
  v10 = *(unsigned __int8 *)(v3 + 264);
  std::mutex::unlock((std::mutex *)(v3 + 272));
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * sig;
  do
  {
    if (*(_DWORD *)(v3 + 240))
      goto LABEL_25;
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v11.__d_.__rep_)
      break;
    v12.__d_.__rep_ = v11.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v13.__d_.__rep_)
      {
        if (v13.__d_.__rep_ < 1)
        {
          if ((unint64_t)v13.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v14 = 0x8000000000000000;
            goto LABEL_21;
          }
        }
        else if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_19;
        }
        v14 = 1000 * v13.__d_.__rep_;
      }
      else
      {
        v14 = 0;
      }
LABEL_19:
      if (v14 > (v12.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_22:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v3 + 192), &__lk, v15);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_21:
      v15.__d_.__rep_ = v14 + v12.__d_.__rep_;
      goto LABEL_22;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v11.__d_.__rep_);
  if (*(_DWORD *)(v3 + 240))
  {
LABEL_25:
    v16 = sub_1001047C0();
    v17 = *(_DWORD *)(v3 + 240);
    if (v17 == 2)
    {
      v20 = v16;
      if (*(_DWORD *)(v3 + 248) == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9498);
        v21 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)buf);
          v22 = v65 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#gpsdClient,Response,Success,%{public}s", v66, 0xCu);
          if (SHIBYTE(v65) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9498);
          v36 = qword_1022A0078;
          sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)v66);
          if (v70 >= 0)
            v37 = v66;
          else
            v37 = *(_BYTE **)v66;
          *(_DWORD *)v57 = 136446210;
          *(_QWORD *)&v57[4] = v37;
          v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "#gpsdClient,Response,Success,%{public}s", v57, 12);
          if (SHIBYTE(v70) < 0)
            operator delete(*(void **)v66);
          sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v38);
          if (v38 != buf)
            free(v38);
        }
        v23 = 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9498);
        v28 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)buf);
          v29 = SHIBYTE(v65);
          v30 = *(_BYTE **)buf;
          sub_10173DC54(*(_DWORD *)(v3 + 248), v66);
          v31 = buf;
          if (v29 < 0)
            v31 = v30;
          if (v70 >= 0)
            v32 = v66;
          else
            v32 = *(_BYTE **)v66;
          *(_DWORD *)v57 = 136446466;
          *(_QWORD *)&v57[4] = v31;
          v58 = 2082;
          v59 = v32;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Response,Failure,%{public}s,%{public}s", v57, 0x16u);
          if (SHIBYTE(v70) < 0)
            operator delete(*(void **)v66);
          if (SHIBYTE(v65) < 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9498);
          v39 = qword_1022A0078;
          sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)v66);
          v40 = SHIBYTE(v70);
          v41 = *(_BYTE **)v66;
          sub_10173DC54(*(_DWORD *)(v3 + 248), v57);
          v42 = v66;
          if (v40 < 0)
            v42 = v41;
          if (v60 >= 0)
            v43 = v57;
          else
            v43 = *(_BYTE **)v57;
          v53 = 136446466;
          v54 = v42;
          v55 = 2082;
          v56 = v43;
          v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 0, "#gpsdClient,Response,Failure,%{public}s,%{public}s", &v53, 22);
          if (v60 < 0)
            operator delete(*(void **)v57);
          if (SHIBYTE(v70) < 0)
            operator delete(*(void **)v66);
          sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v44);
          if (v44 != buf)
            free(v44);
        }
        v23 = 2;
      }
      sub_10010485C(v3 + 8, *(_DWORD *)(v3 + 244), v23, (uint64_t)(v20 - v8) / 1000000);
      goto LABEL_81;
    }
    if (v17 != 1)
      goto LABEL_81;
    v4 = &qword_1022A0000;
    if (qword_1022A0070 != -1)
      goto LABEL_85;
    goto LABEL_28;
  }
  v24 = sub_1001047C0();
  std::mutex::lock((std::mutex *)(v3 + 272));
  v25 = *(unsigned __int8 *)(v3 + 264);
  std::mutex::unlock((std::mutex *)(v3 + 272));
  if (v10 == v25)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)buf);
      v27 = v65 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v66 = 136446210;
      *(_QWORD *)&v66[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Response timeout,%{public}s", v66, 0xCu);
      if (SHIBYTE(v65) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9498);
      v45 = qword_1022A0078;
      sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)v66);
      if (v70 >= 0)
        v46 = v66;
      else
        v46 = *(_BYTE **)v66;
      *(_DWORD *)v57 = 136446210;
      *(_QWORD *)&v57[4] = v46;
      v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 0, "#gpsdClient,Response timeout,%{public}s", v57, 12);
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)v66);
      sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v47);
      if (v47 != buf)
        free(v47);
    }
    sub_10010485C(v3 + 8, *(_DWORD *)(v3 + 244), 4, (uint64_t)(v24 - v8) / 1000000);
    goto LABEL_81;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v33 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)v66);
    v34 = v70 >= 0 ? v66 : *(_BYTE **)v66;
    v35 = *(unsigned __int8 *)(v3 + 264);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v34;
    v62 = 1026;
    v63 = v10;
    v64 = 1026;
    v65 = v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#gpsdClient,Transaction ID changed while waiting for response,%{public}s,do not post timeout eventcurrentTransactionId,%{public}d,fActiveTransactionId,%{public}d", buf, 0x18u);
    if (SHIBYTE(v70) < 0)
      operator delete(*(void **)v66);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_81;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v48 = qword_1022A0078;
  sub_10173E9F0(*(_DWORD *)(v3 + 244), (uint64_t)v57);
  if (v60 >= 0)
    v49 = v57;
  else
    v49 = *(_BYTE **)v57;
  v50 = *(unsigned __int8 *)(v3 + 264);
  *(_DWORD *)v66 = 136446722;
  *(_QWORD *)&v66[4] = v49;
  v67 = 1026;
  v68 = v10;
  v69 = 1026;
  v70 = v50;
  v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 0, "#gpsdClient,Transaction ID changed while waiting for response,%{public}s,do not post timeout eventcurrentTransactionId,%{public}d,fActiveTransactionId,%{public}d", v66, 24);
  if (v60 < 0)
    operator delete(*(void **)v57);
  sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::gpsdRequestHandler(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v19);
  if (v19 == buf)
    goto LABEL_81;
LABEL_125:
  free(v19);
LABEL_81:
  *(_DWORD *)(v3 + 244) = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_10010470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14)
    std::mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1001047C0()
{
  unsigned __int8 v0;
  uint64_t v1;
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10230F9F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230F9F0))
  {
    sub_10173E52C();
    __cxa_guard_release(&qword_10230F9F0);
  }
  v1 = mach_continuous_time();
  v2 = 8;
  if (!byte_10230FA18)
    v2 = 0;
  return ((v1 >> v2) * qword_10230FA08 / qword_10230FA10) << v2;
}

void sub_100104844(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F9F0);
  _Unwind_Resume(a1);
}

uint64_t sub_10010485C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;

  v8 = a2;
  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_1001048A4(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;
  int v11;

  v4 = *a2;
  v5 = *a3;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(NSObject **)(v7 + 2152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100207F98;
  block[3] = &unk_102143548;
  v10 = v4;
  v11 = v5;
  block[4] = v7;
  block[5] = v6;
  dispatch_async(v8, block);
}

void sub_10010490C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100104930(a1);
  operator delete();
}

void sub_100104930(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021933A8;
  sub_100104998(a1);
  if (*((_QWORD *)a1 + 44))
    operator delete[]();
  if (*((_QWORD *)a1 + 41))
    operator delete[]();
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

_QWORD *sub_100104998(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = result;
  v2 = result[32];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_1023118F8 != result)
  {
    v4 = result[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[10];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[12];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[13];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[14];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[15];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[16];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[17];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[18];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[19];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[20];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v1[21];
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v1[22];
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v1[23];
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v1[24];
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v1[25];
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v1[26];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v1[27];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v1[28];
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v1[29];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v1[30];
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v1[31];
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v1[33];
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v1[34];
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v1[35];
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v1[36];
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v1[37];
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v1[39];
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v1[40];
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v1[43];
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = v1[47];
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    result = (_QWORD *)v1[48];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100104D18(uint64_t a1, wireless_diagnostics::google::protobuf::MessageLite **a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  size_t v5;
  wireless_diagnostics::google::protobuf::MessageLite **v6;
  int v7;
  uint64_t *v8;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  xpc_object_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  char *v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  _BYTE __p[12];
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  _BYTE *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  if (*a2)
  {
    v4 = a3;
    v6 = a2;
    v7 = (*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)*a2 + 72))(*a2);
    v5 = v7;
    v10 = malloc_type_malloc(v7, 0x425291C9uLL);
    v8 = &qword_1022A0000;
    if (v10)
    {
      v3 = v10;
      if (qword_1022A0070 == -1)
        goto LABEL_4;
      goto LABEL_15;
    }
    sub_1016E0650(qword_1022A0070 == -1);
  }
  else
  {
    sub_1016E04E0();
  }
  __break(1u);
LABEL_15:
  dispatch_once(&qword_1022A0070, &stru_1021C9498);
LABEL_4:
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_10173E9F0(*((_DWORD *)*v6 + 5), (uint64_t)__p);
    v12 = a1;
    v13 = SBYTE3(v33);
    v14 = *(_BYTE **)__p;
    v15 = qword_10230F998;
    v16 = sub_1001047C0();
    v17 = __p;
    if (v13 < 0)
      v17 = v14;
    *(_DWORD *)buf = 136446978;
    v37 = v17;
    v38 = 1026;
    v39 = v7;
    v40 = 2050;
    v41 = v15;
    v42 = 1026;
    v43 = (v16 - v4) / 0xF4240;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsdClient,Request,%{public}s,size,%{public}d,requestNumber,%{public}llu,queueDelayMs,%{public}d", buf, 0x22u);
    if (SBYTE3(v33) < 0)
      operator delete(*(void **)__p);
    a1 = v12;
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v19 = qword_1022A0078;
    sub_10173E9F0(*((_DWORD *)*v6 + 5), (uint64_t)v27);
    v26 = a1;
    v20 = v28;
    v21 = (void **)v27[0];
    v22 = qword_10230F998;
    v23 = sub_1001047C0();
    v24 = v27;
    if (v20 < 0)
      v24 = v21;
    *(_DWORD *)__p = 136446978;
    *(_QWORD *)&__p[4] = v24;
    v30 = 1026;
    v31 = v7;
    v32 = 2050;
    v33 = v22;
    v34 = 1026;
    v35 = (v23 - v4) / 0xF4240;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "#gpsdClient,Request,%{public}s,size,%{public}d,requestNumber,%{public}llu,queueDelayMs,%{public}d", __p, 34);
    if (v28 < 0)
      operator delete(v27[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::sendGpsdRequest(std::unique_ptr<proto::gpsd::Request>, const uint64_t)", "%s\n", v25);
    a1 = v26;
    if (v25 != (char *)buf)
      free(v25);
  }
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToArray(*v6, v3, v7);
  v18 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_data(v18, "gpsdRequest", v3, v5);
  xpc_dictionary_set_uint64(v18, "requestNumber", qword_10230F998);
  xpc_dictionary_set_uint64(v18, "timeNs", v4);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v18);
  ++qword_10230F998;
  xpc_release(v18);
  free(v3);
}

void sub_1001050C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001050FC(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  int v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  uint64_t v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  uint64_t v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  uint64_t v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  int v44;
  uint64_t v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  int v48;
  uint64_t v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  int v52;
  uint64_t v53;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v54;
  int v55;
  int v56;
  uint64_t v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  int v60;
  uint64_t v61;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v62;
  int v63;
  int v64;
  uint64_t v65;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int *v81;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82;
  int v83;
  int v84;
  uint64_t v85;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v92;
  int v93;
  int v94;
  uint64_t v95;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v96;
  int v97;
  int v98;
  uint64_t v99;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v100;
  int v101;
  int v102;
  uint64_t v103;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v104;
  int v105;
  int v106;
  uint64_t v107;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v108;
  int v109;
  int v110;
  uint64_t v111;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unsigned int *v129;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v130;
  int v131;
  int v132;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v133;
  int v134;
  uint64_t v135;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v136;
  int v137;
  int v138;
  unsigned int *v139;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v140;
  int v141;
  int v142;
  uint64_t v143;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v144;
  int v145;
  int v146;
  uint64_t v147;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v148;
  int v149;
  int v150;
  uint64_t v151;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v152;
  int v153;
  int v154;
  uint64_t v155;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v156;
  int v157;
  int v158;
  uint64_t v159;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v160;
  int v161;
  int v162;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v163;
  int v164;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v165;
  int v166;
  uint64_t v167;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v168;
  int v169;
  int v170;
  uint64_t v171;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v183;
  int v184;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 396);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_54;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_11;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 396);
  }
  else
  {
    v6 = 1;
  }
  v4 += v6 + 1;
LABEL_11:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = 10;
    }
    else if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 396);
    }
    else
    {
      v8 = 1;
    }
    v4 += v8 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0)
        goto LABEL_14;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_1023118F8 + 24);
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100108DD4(v9, a2);
  v11 = (int)v10;
  if (v10 >= 0x80)
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
  else
    v12 = 1;
  v4 += v11 + v12 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_30:
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_1023118F8 + 32);
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001070D8(v13, a2);
  v15 = (int)v14;
  if (v14 >= 0x80)
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  else
    v16 = 1;
  v4 += v15 + v16 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_36:
  v17 = *(_QWORD *)(a1 + 40);
  if (!v17)
    v17 = *(_QWORD *)(qword_1023118F8 + 40);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F4121C(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 += v19 + v20 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x40) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0)
      goto LABEL_54;
    goto LABEL_48;
  }
LABEL_42:
  v21 = *(_QWORD *)(a1 + 48);
  if (!v21)
    v21 = *(_QWORD *)(qword_1023118F8 + 48);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F415E4(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 += v23 + v24 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x80) != 0)
  {
LABEL_48:
    v25 = *(_QWORD *)(a1 + 56);
    if (!v25)
      v25 = *(_QWORD *)(qword_1023118F8 + 56);
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F419AC(v25, a2);
    v27 = (int)v26;
    if (v26 >= 0x80)
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
    else
      v28 = 1;
    v4 += v27 + v28 + 1;
    v3 = *(_DWORD *)(a1 + 396);
  }
LABEL_54:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_112;
  if ((v3 & 0x100) != 0)
  {
    v29 = *(_QWORD *)(a1 + 64);
    if (!v29)
      v29 = *(_QWORD *)(qword_1023118F8 + 64);
    v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F41D6C(v29, a2);
    v31 = (int)v30;
    if (v30 >= 0x80)
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    else
      v32 = 1;
    v4 += v31 + v32 + 1;
    v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x200) == 0)
    {
LABEL_57:
      if ((v3 & 0x400) == 0)
        goto LABEL_58;
      goto LABEL_76;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_57;
  }
  v33 = *(_QWORD *)(a1 + 72);
  if (!v33)
    v33 = *(_QWORD *)(qword_1023118F8 + 72);
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F426A8(v33, a2);
  v35 = (int)v34;
  if (v34 >= 0x80)
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
  else
    v36 = 1;
  v4 += v35 + v36 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x400) == 0)
  {
LABEL_58:
    if ((v3 & 0x800) == 0)
      goto LABEL_59;
    goto LABEL_82;
  }
LABEL_76:
  v37 = *(_QWORD *)(a1 + 80);
  if (!v37)
    v37 = *(_QWORD *)(qword_1023118F8 + 80);
  v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100106F1C(v37, a2);
  v39 = (int)v38;
  if (v38 >= 0x80)
    v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
  else
    v40 = 1;
  v4 += v39 + v40 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x800) == 0)
  {
LABEL_59:
    if ((v3 & 0x1000) == 0)
      goto LABEL_60;
    goto LABEL_88;
  }
LABEL_82:
  v41 = *(_QWORD *)(a1 + 88);
  if (!v41)
    v41 = *(_QWORD *)(qword_1023118F8 + 88);
  v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100107010(v41, a2);
  v43 = (int)v42;
  if (v42 >= 0x80)
    v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  else
    v44 = 1;
  v4 += v43 + v44 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x1000) == 0)
  {
LABEL_60:
    if ((v3 & 0x2000) == 0)
      goto LABEL_61;
    goto LABEL_94;
  }
LABEL_88:
  v45 = *(_QWORD *)(a1 + 96);
  if (!v45)
    v45 = *(_QWORD *)(qword_1023118F8 + 96);
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001096BC(v45, a2);
  v47 = (int)v46;
  if (v46 >= 0x80)
    v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
  else
    v48 = 1;
  v4 += v47 + v48 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x2000) == 0)
  {
LABEL_61:
    if ((v3 & 0x4000) == 0)
      goto LABEL_62;
    goto LABEL_100;
  }
LABEL_94:
  v49 = *(_QWORD *)(a1 + 104);
  if (!v49)
    v49 = *(_QWORD *)(qword_1023118F8 + 104);
  v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F43490(v49, a2);
  v51 = (int)v50;
  if (v50 >= 0x80)
    v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
  else
    v52 = 1;
  v4 += v51 + v52 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x4000) == 0)
  {
LABEL_62:
    if ((v3 & 0x8000) == 0)
      goto LABEL_112;
    goto LABEL_106;
  }
LABEL_100:
  v53 = *(_QWORD *)(a1 + 112);
  if (!v53)
    v53 = *(_QWORD *)(qword_1023118F8 + 112);
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F43844(v53, a2);
  v55 = (int)v54;
  if (v54 >= 0x80)
    v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
  else
    v56 = 1;
  v4 += v55 + v56 + 1;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x8000) != 0)
  {
LABEL_106:
    v57 = *(_QWORD *)(a1 + 120);
    if (!v57)
      v57 = *(_QWORD *)(qword_1023118F8 + 120);
    v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100108EAC(v57, a2);
    v59 = (int)v58;
    if (v58 >= 0x80)
      v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58, a2);
    else
      v60 = 1;
    v4 += v59 + v60 + 2;
    v3 = *(_DWORD *)(a1 + 396);
  }
LABEL_112:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_174;
  if ((v3 & 0x10000) != 0)
  {
    v61 = *(_QWORD *)(a1 + 128);
    if (!v61)
      v61 = *(_QWORD *)(qword_1023118F8 + 128);
    v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100109714(v61, a2);
    v63 = (int)v62;
    if (v62 >= 0x80)
      v64 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62, a2);
    else
      v64 = 1;
    v4 += v63 + v64 + 2;
    v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x20000) == 0)
    {
LABEL_115:
      if ((v3 & 0x40000) == 0)
        goto LABEL_116;
      goto LABEL_134;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_115;
  }
  v65 = *(_QWORD *)(a1 + 136);
  if (!v65)
    v65 = *(_QWORD *)(qword_1023118F8 + 136);
  v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F401B0(v65, a2);
  v67 = (int)v66;
  if (v66 >= 0x80)
    v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
  else
    v68 = 1;
  v4 += v67 + v68 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x40000) == 0)
  {
LABEL_116:
    if ((v3 & 0x80000) == 0)
      goto LABEL_117;
    goto LABEL_142;
  }
LABEL_134:
  v69 = *(_QWORD *)(a1 + 144);
  if (!v69)
    v69 = *(_QWORD *)(qword_1023118F8 + 144);
  if ((*(_BYTE *)(v69 + 20) & 1) == 0)
  {
    v70 = 0;
    *(_DWORD *)(v69 + 16) = 0;
LABEL_139:
    v72 = 1;
    goto LABEL_141;
  }
  v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v69 + 8), a2);
  v70 = v71 + 1;
  *(_DWORD *)(v69 + 16) = v71 + 1;
  if ((v71 + 1) < 0x80)
    goto LABEL_139;
  v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v71 + 1), a2);
LABEL_141:
  v4 += v70 + v72 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x80000) == 0)
  {
LABEL_117:
    if ((v3 & 0x100000) == 0)
      goto LABEL_118;
    goto LABEL_148;
  }
LABEL_142:
  v73 = *(_QWORD *)(a1 + 152);
  if (!v73)
    v73 = *(_QWORD *)(qword_1023118F8 + 152);
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F3F908(v73);
  v75 = (int)v74;
  if (v74 >= 0x80)
    v76 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74, a2);
  else
    v76 = 1;
  v4 += v75 + v76 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x100000) == 0)
  {
LABEL_118:
    if ((v3 & 0x200000) == 0)
      goto LABEL_119;
    goto LABEL_156;
  }
LABEL_148:
  v77 = *(_QWORD *)(a1 + 160);
  if (!v77)
    v77 = *(_QWORD *)(qword_1023118F8 + 160);
  if ((*(_BYTE *)(v77 + 20) & 1) == 0)
  {
    v78 = 0;
    *(_DWORD *)(v77 + 16) = 0;
LABEL_153:
    v80 = 1;
    goto LABEL_155;
  }
  v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v77 + 8), a2);
  v78 = v79 + 1;
  *(_DWORD *)(v77 + 16) = v79 + 1;
  if ((v79 + 1) < 0x80)
    goto LABEL_153;
  v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v79 + 1), a2);
LABEL_155:
  v4 += v78 + v80 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x200000) == 0)
  {
LABEL_119:
    if ((v3 & 0x400000) == 0)
      goto LABEL_120;
    goto LABEL_162;
  }
LABEL_156:
  v81 = *(unsigned int **)(a1 + 168);
  if (!v81)
    v81 = *(unsigned int **)(qword_1023118F8 + 168);
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F43EDC(v81, a2);
  v83 = (int)v82;
  if (v82 >= 0x80)
    v84 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82, a2);
  else
    v84 = 1;
  v4 += v83 + v84 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x400000) == 0)
  {
LABEL_120:
    if ((v3 & 0x800000) == 0)
      goto LABEL_174;
    goto LABEL_168;
  }
LABEL_162:
  v85 = *(_QWORD *)(a1 + 176);
  if (!v85)
    v85 = *(_QWORD *)(qword_1023118F8 + 176);
  v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100109630(v85, a2);
  v87 = (int)v86;
  if (v86 >= 0x80)
    v88 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v86, a2);
  else
    v88 = 1;
  v4 += v87 + v88 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x800000) != 0)
  {
LABEL_168:
    v89 = *(_QWORD *)(a1 + 184);
    if (!v89)
      v89 = *(_QWORD *)(qword_1023118F8 + 184);
    if (*(_DWORD *)(v89 + 16))
      v90 = 2 * (*(_DWORD *)(v89 + 16) & 1);
    else
      v90 = 0;
    *(_DWORD *)(v89 + 12) = v90;
    v4 += v90 + 3;
    v3 = *(_DWORD *)(a1 + 396);
  }
LABEL_174:
  if (!HIBYTE(v3))
    goto LABEL_234;
  if ((v3 & 0x1000000) != 0)
  {
    v91 = *(_QWORD *)(a1 + 192);
    if (!v91)
      v91 = *(_QWORD *)(qword_1023118F8 + 192);
    v92 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F448DC(v91, a2);
    v93 = (int)v92;
    if (v92 >= 0x80)
      v94 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v92, a2);
    else
      v94 = 1;
    v4 += v93 + v94 + 2;
    v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_177:
      if ((v3 & 0x4000000) == 0)
        goto LABEL_178;
      goto LABEL_196;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_177;
  }
  v95 = *(_QWORD *)(a1 + 200);
  if (!v95)
    v95 = *(_QWORD *)(qword_1023118F8 + 200);
  v96 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F44BA8(v95, a2);
  v97 = (int)v96;
  if (v96 >= 0x80)
    v98 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v96, a2);
  else
    v98 = 1;
  v4 += v97 + v98 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_178:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_179;
    goto LABEL_202;
  }
LABEL_196:
  v99 = *(_QWORD *)(a1 + 208);
  if (!v99)
    v99 = *(_QWORD *)(qword_1023118F8 + 208);
  v100 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F48CB4(v99, a2);
  v101 = (int)v100;
  if (v100 >= 0x80)
    v102 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v100, a2);
  else
    v102 = 1;
  v4 += v101 + v102 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_179:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_180;
    goto LABEL_208;
  }
LABEL_202:
  v103 = *(_QWORD *)(a1 + 216);
  if (!v103)
    v103 = *(_QWORD *)(qword_1023118F8 + 216);
  v104 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100109790(v103, a2);
  v105 = (int)v104;
  if (v104 >= 0x80)
    v106 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v104, a2);
  else
    v106 = 1;
  v4 += v105 + v106 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_180:
    if ((v3 & 0x20000000) == 0)
      goto LABEL_181;
    goto LABEL_214;
  }
LABEL_208:
  v107 = *(_QWORD *)(a1 + 224);
  if (!v107)
    v107 = *(_QWORD *)(qword_1023118F8 + 224);
  v108 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F490A8(v107, a2);
  v109 = (int)v108;
  if (v108 >= 0x80)
    v110 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v108, a2);
  else
    v110 = 1;
  v4 += v109 + v110 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x40000000) == 0)
      goto LABEL_182;
    goto LABEL_220;
  }
LABEL_214:
  v111 = *(_QWORD *)(a1 + 232);
  if (!v111)
    v111 = *(_QWORD *)(qword_1023118F8 + 232);
  v112 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F43B7C(v111, a2);
  v113 = (int)v112;
  if (v112 >= 0x80)
    v114 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v112, a2);
  else
    v114 = 1;
  v4 += v113 + v114 + 2;
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x80000000) == 0)
      goto LABEL_234;
    goto LABEL_228;
  }
LABEL_220:
  v115 = *(_QWORD *)(a1 + 240);
  if (!v115)
    v115 = *(_QWORD *)(qword_1023118F8 + 240);
  v116 = 2 * (*(_DWORD *)(v115 + 16) & 1);
  if ((*(_DWORD *)(v115 + 16) & 2) != 0)
    v116 += 2;
  if (*(_DWORD *)(v115 + 16))
    v117 = v116;
  else
    v117 = 0;
  *(_DWORD *)(v115 + 12) = v117;
  v4 += v117 + 3;
  if ((*(_DWORD *)(a1 + 396) & 0x80000000) != 0)
  {
LABEL_228:
    v118 = *(_QWORD *)(a1 + 248);
    if (!v118)
      v118 = *(_QWORD *)(qword_1023118F8 + 248);
    v119 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F9C14(v118, a2);
    v120 = (int)v119;
    if (v119 >= 0x80)
      v121 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v119, a2);
    else
      v121 = 1;
    v4 += v120 + v121 + 2;
  }
LABEL_234:
  v122 = *(_DWORD *)(a1 + 400);
  if (!(_BYTE)v122)
    goto LABEL_293;
  if ((v122 & 1) != 0)
  {
    v123 = *(_QWORD *)(a1 + 256);
    v124 = *(unsigned __int8 *)(v123 + 23);
    v125 = v124;
    v126 = *(_QWORD *)(v123 + 8);
    if ((v124 & 0x80u) == 0)
      v127 = *(unsigned __int8 *)(v123 + 23);
    else
      v127 = v126;
    if (v127 >= 0x80)
    {
      v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v127, a2);
      v124 = *(unsigned __int8 *)(v123 + 23);
      v126 = *(_QWORD *)(v123 + 8);
      v122 = *(_DWORD *)(a1 + 400);
      v125 = *(_BYTE *)(v123 + 23);
    }
    else
    {
      v128 = 1;
    }
    if (v125 < 0)
      v124 = v126;
    v4 += v128 + v124 + 2;
    if ((v122 & 2) == 0)
    {
LABEL_237:
      if ((v122 & 4) == 0)
        goto LABEL_238;
      goto LABEL_259;
    }
  }
  else if ((v122 & 2) == 0)
  {
    goto LABEL_237;
  }
  v129 = *(unsigned int **)(a1 + 264);
  if (!v129)
    v129 = *(unsigned int **)(qword_1023118F8 + 264);
  v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008D7348(v129, a2);
  v131 = (int)v130;
  if (v130 >= 0x80)
    v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v130, a2);
  else
    v132 = 1;
  v4 += v131 + v132 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 4) == 0)
  {
LABEL_238:
    if ((v122 & 8) == 0)
      goto LABEL_239;
    goto LABEL_263;
  }
LABEL_259:
  v133 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 304);
  if (v133 >= 0x80)
  {
    v134 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v133, a2);
    v122 = *(_DWORD *)(a1 + 400);
  }
  else
  {
    v134 = 1;
  }
  v4 += v134 + 2;
  if ((v122 & 8) == 0)
  {
LABEL_239:
    if ((v122 & 0x10) == 0)
      goto LABEL_240;
    goto LABEL_269;
  }
LABEL_263:
  v135 = *(_QWORD *)(a1 + 272);
  if (!v135)
    v135 = *(_QWORD *)(qword_1023118F8 + 272);
  v136 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F48B8(v135, a2);
  v137 = (int)v136;
  if (v136 >= 0x80)
    v138 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v136, a2);
  else
    v138 = 1;
  v4 += v137 + v138 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 0x10) == 0)
  {
LABEL_240:
    if ((v122 & 0x20) == 0)
      goto LABEL_241;
    goto LABEL_275;
  }
LABEL_269:
  v139 = *(unsigned int **)(a1 + 280);
  if (!v139)
    v139 = *(unsigned int **)(qword_1023118F8 + 280);
  v140 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F579C(v139, a2);
  v141 = (int)v140;
  if (v140 >= 0x80)
    v142 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v140, a2);
  else
    v142 = 1;
  v4 += v141 + v142 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 0x20) == 0)
  {
LABEL_241:
    if ((v122 & 0x40) == 0)
      goto LABEL_242;
    goto LABEL_281;
  }
LABEL_275:
  v143 = *(_QWORD *)(a1 + 288);
  if (!v143)
    v143 = *(_QWORD *)(qword_1023118F8 + 288);
  v144 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F8648(v143, a2);
  v145 = (int)v144;
  if (v144 >= 0x80)
    v146 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v144, a2);
  else
    v146 = 1;
  v4 += v145 + v146 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 0x40) == 0)
  {
LABEL_242:
    if ((v122 & 0x80) == 0)
      goto LABEL_293;
    goto LABEL_287;
  }
LABEL_281:
  v147 = *(_QWORD *)(a1 + 296);
  if (!v147)
    v147 = *(_QWORD *)(qword_1023118F8 + 296);
  v148 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008FB798(v147, a2);
  v149 = (int)v148;
  if (v148 >= 0x80)
    v150 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v148, a2);
  else
    v150 = 1;
  v4 += v149 + v150 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 0x80) != 0)
  {
LABEL_287:
    v151 = *(_QWORD *)(a1 + 312);
    if (!v151)
      v151 = *(_QWORD *)(qword_1023118F8 + 312);
    v152 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008FC318(v151, a2);
    v153 = (int)v152;
    if (v152 >= 0x80)
      v154 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v152, a2);
    else
      v154 = 1;
    v4 += v153 + v154 + 2;
    v122 = *(_DWORD *)(a1 + 400);
  }
LABEL_293:
  if ((v122 & 0xFF00) == 0)
    goto LABEL_328;
  if ((v122 & 0x100) == 0)
  {
    if ((v122 & 0x400) == 0)
      goto LABEL_296;
LABEL_304:
    v159 = *(_QWORD *)(a1 + 344);
    if (!v159)
      v159 = *(_QWORD *)(qword_1023118F8 + 344);
    v160 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008CEBDC(v159, a2);
    v161 = (int)v160;
    if (v160 >= 0x80)
      v162 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v160, a2);
    else
      v162 = 1;
    v4 += v161 + v162 + 2;
    v122 = *(_DWORD *)(a1 + 400);
    if ((v122 & 0x800) == 0)
      goto LABEL_314;
    goto LABEL_310;
  }
  v155 = *(_QWORD *)(a1 + 320);
  if (!v155)
    v155 = *(_QWORD *)(qword_1023118F8 + 320);
  v156 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008F9124(v155);
  v157 = (int)v156;
  if (v156 >= 0x80)
    v158 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v156, a2);
  else
    v158 = 1;
  v4 += v157 + v158 + 2;
  v122 = *(_DWORD *)(a1 + 400);
  if ((v122 & 0x400) != 0)
    goto LABEL_304;
LABEL_296:
  if ((v122 & 0x800) != 0)
  {
LABEL_310:
    v163 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 308);
    if (v163 >= 0x80)
    {
      v164 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v163, a2) + 2;
      v122 = *(_DWORD *)(a1 + 400);
    }
    else
    {
      v164 = 3;
    }
    v4 += v164;
  }
LABEL_314:
  if ((v122 & 0x2000) != 0)
    v4 += 3;
  if ((v122 & 0x4000) != 0)
  {
    v165 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 372);
    if (v165 >= 0x80)
    {
      v166 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v165, a2) + 2;
      v122 = *(_DWORD *)(a1 + 400);
    }
    else
    {
      v166 = 3;
    }
    v4 += v166;
  }
  if ((v122 & 0x8000) != 0)
  {
    v167 = *(_QWORD *)(a1 + 376);
    if (!v167)
      v167 = *(_QWORD *)(qword_1023118F8 + 376);
    v168 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008D35B0(v167, a2);
    v169 = (int)v168;
    if (v168 >= 0x80)
      v170 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v168, a2);
    else
      v170 = 1;
    v4 += v169 + v170 + 2;
    v122 = *(_DWORD *)(a1 + 400);
  }
LABEL_328:
  if ((v122 & 0x10000) != 0)
  {
    v171 = *(_QWORD *)(a1 + 384);
    if (!v171)
      v171 = *(_QWORD *)(qword_1023118F8 + 384);
    v172 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008CFFE0(v171, a2);
    v173 = (int)v172;
    if (v172 >= 0x80)
      v174 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v172, a2);
    else
      v174 = 1;
    v4 += v173 + v174 + 2;
  }
  v175 = *(_DWORD *)(a1 + 336);
  if (v175 < 1)
  {
    v177 = 0;
  }
  else
  {
    v176 = 0;
    v177 = 0;
    do
    {
      v178 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 328)
                                                                                              + 4 * v176);
      if (v178 >= 0x80)
      {
        v179 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v178, a2);
        v175 = *(_DWORD *)(a1 + 336);
      }
      else
      {
        v179 = 1;
      }
      v177 += v179;
      ++v176;
    }
    while (v176 < v175);
  }
  v180 = *(_DWORD *)(a1 + 360);
  if (v180 < 1)
  {
    v182 = 0;
  }
  else
  {
    v181 = 0;
    v182 = 0;
    do
    {
      v183 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(_QWORD *)(a1 + 352)
                                                                                              + 4 * v181);
      if (v183 >= 0x80)
      {
        v184 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v183, a2);
        v180 = *(_DWORD *)(a1 + 360);
      }
      else
      {
        v184 = 1;
      }
      v182 += v184;
      ++v181;
    }
    while (v181 < v180);
  }
  result = (v177 + v4 + v182 + 2 * (v180 + v175));
  *(_DWORD *)(a1 + 392) = result;
  return result;
}

void sub_100105F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 7832);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      if (!sub_10010285C(v7))
        sub_101935C2C();
      *(_DWORD *)(a1 + 32) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 4) != 0)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if (!sub_100106094(v8))
        sub_101935C04();
      *(_DWORD *)(a1 + 32) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 8) != 0)
    {
      v9 = *(_DWORD *)(a2 + 24);
      if (!sub_100106054(v9))
        sub_101935BDC();
      *(_DWORD *)(a1 + 32) |= 8u;
      *(_DWORD *)(a1 + 24) = v9;
    }
  }
}

void sub_10010603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100106054(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x32 || ((1 << a1) & 0x4000002000403) == 0)
    return a1 == 75;
  return result;
}

BOOL sub_100106094(unsigned int a1)
{
  return a1 < 5;
}

void sub_1001060A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 8045);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_QWORD *)(a1 + 8) = v6;
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 16);
      if (!sub_100106170(v7))
        sub_101935C54();
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
}

void sub_100106158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100106170(int a1)
{
  return (a1 - 1) < 4;
}

void sub_100106180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 9685);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_BYTE *)(a1 + 8) = v5;
  }
}

void sub_100106208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100106220(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  int v8;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  const char *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t *v28;
  const char *v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_DWORD *)(v2 + 224);
    if ((v3 & 1) != 0)
    {
      v8 = *(_DWORD *)(v2 + 8);
      switch(v8)
      {
        case 1:
          *a2 = 0;
          v47 = v2;
          sub_1001074A4(a1, &v47);
          goto LABEL_65;
        case 2:
          if ((v3 & 0x40) == 0)
            return;
          v11 = *(_QWORD *)(v2 + 48);
          if (!v11)
            v11 = *(_QWORD *)(qword_102311908 + 48);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v12 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v13 = *(unsigned __int8 *)(v11 + 24);
            v14 = *(unsigned __int8 *)(v11 + 25);
            v15 = *(unsigned __int8 *)(v11 + 26);
            v16 = (double)*(unint64_t *)(v11 + 8) * 0.000000001;
            v17 = (double)*(unint64_t *)(v11 + 16) * 0.000000001;
            *(_DWORD *)buf = 67110144;
            v59 = v13;
            v60 = 1024;
            v61 = v14;
            v62 = 1024;
            v63 = v15;
            v64 = 2048;
            v65 = v16;
            v66 = 2048;
            v67 = v17;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gpsd,status,device_init,%d,device_busy,%d,device_active,%d,gpsd_uptime,%f,device_uptime,%f", buf, 0x28u);
          }
          if (!sub_1001BFF7C(115, 2))
            return;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v18 = *(unsigned __int8 *)(v11 + 24);
          v19 = *(unsigned __int8 *)(v11 + 25);
          v20 = *(unsigned __int8 *)(v11 + 26);
          v21 = (double)*(unint64_t *)(v11 + 8) * 0.000000001;
          v22 = (double)*(unint64_t *)(v11 + 16) * 0.000000001;
          v48 = 67110144;
          v49 = v18;
          v50 = 1024;
          v51 = v19;
          v52 = 1024;
          v53 = v20;
          v54 = 2048;
          v55 = v21;
          v56 = 2048;
          v57 = v22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,status,device_init,%d,device_busy,%d,device_active,%d,gpsd_uptime,%f,device_uptime,%f", &v48, 40, v32, v33, v34);
          v6 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v23);
          goto LABEL_69;
        case 3:
          sub_10023A74C(a1, *a2);
          return;
        case 5:
          sub_1017F851C(a1, *a2);
          return;
        case 9:
          *a2 = 0;
          v46 = v2;
          sub_1017F593C(a1, &v46);
          goto LABEL_65;
        case 10:
          *a2 = 0;
          v45 = v2;
          sub_1017F5BA4(a1, &v45);
          goto LABEL_65;
        case 11:
          *a2 = 0;
          v44 = v2;
          sub_1017F5F38(a1, &v44);
          goto LABEL_65;
        case 12:
          *a2 = 0;
          v43 = v2;
          sub_1017F643C(a1, &v43);
          goto LABEL_65;
        case 13:
          *a2 = 0;
          v41 = v2;
          sub_1017F6CB8(a1, &v41);
          goto LABEL_65;
        case 14:
          *a2 = 0;
          v40 = v2;
          sub_1017F7188(a1, &v40);
          goto LABEL_65;
        case 15:
          *a2 = 0;
          v39 = v2;
          sub_1017F741C(a1, &v39);
          goto LABEL_65;
        case 16:
          *a2 = 0;
          v38 = v2;
          sub_1017F75E8(a1, &v38);
          goto LABEL_65;
        case 17:
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v26 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#gpsd,EMERG_FT_ASSISTANCE_NEEDED_REPORT", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            LOWORD(v48) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,EMERG_FT_ASSISTANCE_NEEDED_REPORT", &v48, 2);
            v31 = (uint8_t *)v30;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v30);
            if (v31 != buf)
              free(v31);
          }
          v27 = *a2;
          *a2 = 0;
          v37 = v27;
          sub_1017F8F9C(a1, (uint64_t)&v37);
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          return;
        case 18:
          sub_10001DF1C(a1, *a2);
          return;
        case 19:
          sub_1017F8064(a1, *a2);
          return;
        case 20:
          *a2 = 0;
          v35 = v2;
          sub_1017F9368(a1, &v35);
          goto LABEL_65;
        case 21:
          sub_1017F8C88(a1, *a2);
          return;
        case 22:
          *a2 = 0;
          v36 = v2;
          sub_10001B094(a1, &v36);
          goto LABEL_65;
        case 23:
          *a2 = 0;
          v34 = *(double *)&v2;
          sub_1017F9910((_DWORD *)a1, (uint64_t *)&v34);
          goto LABEL_65;
        case 24:
          *a2 = 0;
          v33 = *(double *)&v2;
          sub_1017F9DC4(a1, (uint64_t *)&v33);
          goto LABEL_65;
        case 25:
          v28 = *(uint64_t **)(a1 + 3328);
          if (v28)
            sub_101840648(*v28);
          return;
        case 26:
          *a2 = 0;
          v42 = v2;
          sub_1017F68C0(a1, &v42);
LABEL_65:
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
          return;
        default:
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v24 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            v59 = v8;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#gpsd,unhandled indication,%{public}d", buf, 8u);
          }
          if (!sub_1001BFF7C(115, 2))
            return;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v48 = 67240192;
          v49 = v8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,unhandled indication,%{public}d", &v48, 8);
          v6 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v25);
          break;
      }
      goto LABEL_69;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gpsd,processGpsdIndication,no type", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v48) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,processGpsdIndication,no type", &v48, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v5);
LABEL_69:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,processGpsdIndication,nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v48) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,processGpsdIndication,nullptr", &v48, 2);
      v6 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v29);
      goto LABEL_69;
    }
  }
}

void sub_100106C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100106CDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = *(_QWORD *)(a1 + 2992);
    *(_QWORD *)(a1 + 2992) = v2;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    sub_1000FF8D8(a1 + 2176, 7);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#gpsd,null indicationPtr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,null indicationPtr", v7, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::gpsdIndicationHandler(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_100106EBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193BA0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100106EEC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193FD8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100106F1C(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;

  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_28;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 2) == 0)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_13;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v6 = 2;
  }
  v4 = (v6 + v4);
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_28;
    goto LABEL_22;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v7 & 0x80000000) != 0)
  {
    v8 = 11;
  }
  else if (v7 >= 0x80)
  {
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v8 = 2;
  }
  v4 = (v8 + v4);
  if ((v3 & 8) != 0)
  {
LABEL_22:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    }
    else
    {
      v10 = 2;
    }
    v4 = (v10 + v4);
  }
LABEL_28:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

uint64_t sub_100107010(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;
  int v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      if ((*(_DWORD *)(a1 + 24) & 2) == 0)
        goto LABEL_13;
    }
    else
    {
      v3 = 0;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        goto LABEL_13;
    }
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
    {
      v5 = 11;
    }
    else if (v4 >= 0x80)
    {
      v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      v5 = 2;
    }
    v3 = (v5 + v3);
  }
  else
  {
    v3 = 0;
  }
LABEL_13:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_100107094(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0)
    v1 += 2;
  if (*(_DWORD *)(a1 + 16))
    v2 = v1;
  else
    v2 = 0;
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

uint64_t sub_1001070BC(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 16))
    v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  else
    v1 = 0;
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

uint64_t sub_1001070D8(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
LABEL_7:
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_8:
  if ((v3 & 4) != 0)
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
LABEL_10:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_100107158(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193C18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100107188(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  _BYTE v9[48];

  if (a2 == (_BYTE *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 9516);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = a2[16];
  if ((_BYTE)v5)
  {
    if ((a2[16] & 1) != 0)
    {
      v6 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_BYTE *)(a1 + 8) = v6;
      v5 = *((_DWORD *)a2 + 4);
    }
    if ((v5 & 2) != 0)
    {
      v7 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_BYTE *)(a1 + 9) = v7;
    }
  }
}

void sub_100107230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100107248(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193498;
  sub_10010728C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010728C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = result;
  v2 = result[17];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_102311908 != result)
  {
    v4 = result[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[10];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[13];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[14];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[15];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[16];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[18];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[19];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[20];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[21];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[22];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v1[23];
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v1[24];
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    result = (_QWORD *)v1[26];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1001074A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  NSObject *v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  _BOOL4 v27;
  _BOOL4 v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  double v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  int v38;
  NSObject *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  uint64_t v76;
  float64x2_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  double v80;
  double v81;
  double v82;
  uint64_t **v83;
  _QWORD *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  NSObject *v87;
  unsigned int *v88;
  unsigned int *i;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  NSObject *v95;
  _BOOL4 v96;
  double v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  const char *v110;
  char *v111;
  const char *v112;
  char *v113;
  const char *v114;
  char *v115;
  const char *v116;
  char *v117;
  const char *v118;
  char *v119;
  const char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  int v126;
  unsigned int v127;
  uint64_t *v128;
  _QWORD *v129[2];
  _QWORD block[6];
  int v131;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  double v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[32];
  _BYTE v140[18];
  __int16 v141;
  _BYTE v142[20];
  int32x2_t v143;
  __int128 v144;
  uint64_t v145;
  _BYTE v146[14];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  _BYTE buf[14];
  const char *v159;
  _BYTE v160[10];
  __int16 v161;
  double v162;
  __int16 v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  double v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  uint64_t v186;

  v2 = *a2;
  if (*a2)
  {
    v5 = *(_DWORD *)(v2 + 224);
    if ((v5 & 8) == 0)
      goto LABEL_6;
    v6 = *(_QWORD *)(v2 + 24);
    if (!v6)
      v6 = *(_QWORD *)(qword_102311908 + 24);
    v7 = *(_DWORD *)(v6 + 48);
    if ((v7 & 2) != 0)
      v8 = v7 & 1;
    else
LABEL_6:
      v8 = 0;
    if ((v5 & 0x10) == 0 && (v8 & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_DWORD *)(*a2 + 224);
        v14 = *(_QWORD *)(*a2 + 24);
        if (!v14)
          v14 = *(_QWORD *)(qword_102311908 + 24);
        v15 = *(_DWORD *)(v14 + 48);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)&buf[4] = (v13 >> 3) & 1;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = (v15 >> 1) & 1;
        LOWORD(v159) = 1026;
        *(_DWORD *)((char *)&v159 + 2) = v15 & 1;
        HIWORD(v159) = 1026;
        *(_DWORD *)v160 = (v13 >> 4) & 1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gpsd,handlePvtm,missing expected fields,hasFix,%{public}d,hasPos,%{public}d,hasTime,%{public}d,hasMeas,%{public}d", buf, 0x1Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v16 = *(_DWORD *)(*a2 + 224);
        v17 = *(_QWORD *)(*a2 + 24);
        if (!v17)
          v17 = *(_QWORD *)(qword_102311908 + 24);
        v18 = *(_DWORD *)(v17 + 48);
        LODWORD(v137) = 67240960;
        DWORD1(v137) = (v16 >> 3) & 1;
        WORD4(v137) = 1026;
        *(_DWORD *)((char *)&v137 + 10) = (v18 >> 1) & 1;
        HIWORD(v137) = 1026;
        LODWORD(v138) = v18 & 1;
        WORD2(v138) = 1026;
        *(_DWORD *)((char *)&v138 + 6) = (v16 >> 4) & 1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handlePvtm,missing expected fields,hasFix,%{public}d,hasPos,%{public}d,hasTime,%{public}d,hasMeas,%{public}d", &v137, 26);
        v11 = (char *)v19;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v19);
LABEL_30:
        if (v11 != buf)
          free(v11);
        return;
      }
      return;
    }
    v20 = sub_100108DB0();
    v21 = v8 ^ 1;
    if (!*(_QWORD *)(a1 + 1368))
      v21 = 1;
    if ((v21 & 1) != 0)
    {
LABEL_110:
      if ((v5 & 0x10) != 0 && *(_QWORD *)(a1 + 1400))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v70 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "#gpsd,handlePvtm,yielding measurements", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(v137) = 0;
          LODWORD(v122) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,handlePvtm,yielding measurements", &v137, v122);
          v111 = (char *)v110;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v110);
          if (v111 != buf)
            free(v111);
        }
        v137 = 0u;
        v138 = 0u;
        *(_QWORD *)v139 = 0;
        *(_QWORD *)&v139[8] = -1;
        *(int64x2_t *)&v139[16] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_OWORD *)v140 = *(_OWORD *)&v139[16];
        *(_WORD *)&v140[16] = 0;
        *(_OWORD *)&v142[4] = *(_OWORD *)&v139[16];
        *((_QWORD *)&v144 + 1) = 0x8000000000000000;
        v143 = vdup_n_s32(0x7FC00000u);
        __asm { FMOV            V1.2S, #-1.0 }
        v145 = _D1;
        *(_QWORD *)v146 = 0x7FF8000000000000;
        LODWORD(v144) = 2143289344;
        *(_DWORD *)&v146[8] = -1082130432;
        v154 = 0u;
        v155 = 0u;
        v147 = 0u;
        v148 = 0u;
        v149 = 0u;
        v150 = 0u;
        v151 = 0u;
        v152 = 0u;
        v153 = 0u;
        v76 = *(_QWORD *)(*a2 + 32);
        if (!v76)
          v76 = *(_QWORD *)(qword_102311908 + 32);
        sub_10010A1DC(v76, (uint64_t)&v137);
        v129[0] = 0;
        v129[1] = 0;
        v128 = (uint64_t *)v129;
        sub_10010C110((uint64_t *)&v137, a1 + 2096, &v128);
        if (*(_BYTE *)(a1 + 1896))
        {
          v77.f64[0] = *(float64_t *)(a1 + 1904);
          sub_10173DEFC((uint64_t)&v137, a1 + 2096, v77, *(float64_t *)(a1 + 1912), *(double *)(a1 + 1920), v20);
        }
        v78 = (unsigned __int8 *)*((_QWORD *)&v150 + 1);
        if ((_QWORD)v150 == *((_QWORD *)&v150 + 1))
        {
          v82 = 999.0;
          v81 = 999.0;
          v80 = 999.0;
        }
        else
        {
          v79 = (unsigned __int8 *)(v150 + 16);
          v80 = 999.0;
          v81 = 999.0;
          v82 = 999.0;
          do
          {
            if (*v79)
            {
              if ((*((_QWORD *)v79 - 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (*((_DWORD *)v79 - 2) & 0x7FFFFFFFu) <= 0x7F7FFFFF
                && (*((_DWORD *)v79 - 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v131 = (int)(float)(roundf(*((float *)v79 - 1) / 5.0) * 5.0);
                *(_QWORD *)buf = v79;
                v83 = sub_10177CBD4(a1 + 432, v79, (uint64_t)&unk_101B9EB60, (char **)buf);
                *(_QWORD *)buf = &v131;
                v84 = sub_10006A62C((uint64_t)(v83 + 3), &v131, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
                ++*((_DWORD *)v84 + 5);
                v85 = *v79;
                if (v85 <= 9)
                {
                  if (((1 << v85) & 0x142) != 0)
                  {
                    v82 = *((float *)v79 - 1);
                  }
                  else if (((1 << v85) & 0x288) != 0)
                  {
                    v80 = *((float *)v79 - 1);
                  }
                  else if (v85 == 4)
                  {
                    v81 = *((float *)v79 - 1);
                  }
                }
              }
            }
            v86 = v79 + 8;
            v79 += 24;
          }
          while (v86 != v78);
        }
        if (sub_1000FDB0C())
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v87 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v82;
            *(_WORD *)&buf[12] = 2050;
            v159 = *(const char **)&v81;
            *(_WORD *)v160 = 2050;
            *(double *)&v160[2] = v80;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#gpsd,handlePvtm,awd_agc_metric_dB,band,L1,%{public}.2f,band,G1,%{public}.2f,band,L5,%{public}.2f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v131 = 134349568;
            v132 = *(const char **)&v82;
            v133 = 2050;
            v134 = *(const char **)&v81;
            v135 = 2050;
            v136 = v80;
            LODWORD(v122) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,handlePvtm,awd_agc_metric_dB,band,L1,%{public}.2f,band,G1,%{public}.2f,band,L5,%{public}.2f", &v131, v122);
            v113 = (char *)v112;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v112);
            if (v113 != buf)
              free(v113);
          }
        }
        v88 = (unsigned int *)*((_QWORD *)&v148 + 1);
        for (i = (unsigned int *)v149; v88 != i; v88 += 36)
        {
          v90 = *v88;
          v131 = 0;
          v127 = 0;
          sub_100108D64(v88, &v131, &v127);
          if ((v90 & 0xFFFFFFFD) != 0)
          {
            *(_QWORD *)buf = *v88 | ((unint64_t)v127 << 32);
            if (v129 != (_QWORD **)sub_100108CD8((uint64_t)&v128, (int *)buf))
            {
              switch(*((_BYTE *)v88 + 16))
              {
                case 1:
                  ++*(_DWORD *)(a1 + 1176);
                  break;
                case 2:
                  ++*(_DWORD *)(a1 + 1168);
                  break;
                case 3:
                  ++*(_DWORD *)(a1 + 1180);
                  break;
                case 4:
                  ++*(_DWORD *)(a1 + 1172);
                  break;
                default:
                  break;
              }
              v91 = *((_QWORD *)v88 + 14);
              v92 = *((_QWORD *)v88 + 15);
              while (v91 != v92)
              {
                if (*(_BYTE *)v91 && (*(_QWORD *)(v91 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  v93 = *(_DWORD *)(v91 + 4);
                  if (v93 >= 2)
                  {
                    if (v93 == 2)
                      ++*(_DWORD *)(a1 + 1160);
                  }
                  else
                  {
                    ++*(_DWORD *)(a1 + 1164);
                  }
                }
                v91 += 32;
              }
            }
          }
        }
        v94 = *(_QWORD *)(a1 + 1400);
        if (!v94)
          sub_10025FD1C();
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v94 + 48))(v94, &v137);
        sub_100008848((uint64_t)&v128, v129[0]);
        sub_100109508((uint64_t)&v137);
      }
      return;
    }
    v22 = *(_QWORD *)(*a2 + 24);
    if (!v22)
      v22 = *(_QWORD *)(qword_102311908 + 24);
    v23 = *(_QWORD *)(v22 + 16);
    if (!v23)
      v23 = *(_QWORD *)(qword_102310C70 + 16);
    v24 = *(double *)(v23 + 40);
    v25 = sqrt(*(double *)(v23 + 48) * *(double *)(v23 + 48) + *(double *)(v23 + 56) * *(double *)(v23 + 56));
    if (v24 <= 0.0)
    {
      v28 = 0;
    }
    else
    {
      v27 = v25 > 0.0 && (*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v28 = v25 <= 400.0 && v27;
    }
    v29 = fabs(*(double *)(v23 + 8));
    v30 = fabs(*(double *)(v23 + 16));
    v124 = sub_10010C0D8(*(unsigned int *)(v23 + 76));
    if (*(_BYTE *)(a1 + 1720) || *(_BYTE *)(a1 + 1721))
      v126 = sub_1016B87A4(*(_DWORD *)(v23 + 88));
    else
      v126 = 5;
    v31 = v29 + v30;
    v32 = sub_10010E8A8(*(_DWORD *)(v22 + 40));
    v33 = v32;
    v123 = v32;
    if (!*(_BYTE *)(a1 + 1720) && !*(_BYTE *)(a1 + 1721))
    {
      v35 = 1;
      v34 = -1.0;
      goto LABEL_59;
    }
    v34 = -1.0;
    if (*(_BYTE *)(a1 + 1664) || *(_BYTE *)(a1 + 1665) || *(_BYTE *)(a1 + 1708))
    {
      v35 = 1;
LABEL_59:
      v36 = v28;
      v37 = v31 >= 0.0001 && v28;
      v38 = v37 & v35;
      if ((v37 & v35) == 1)
      {
        if (((sub_1001DF9C4() & 1) != 0 || sub_1001DC9E0() && *(_BYTE *)(a1 + 1290))
          && *(double *)(v23 + 48) <= *(float *)(a1 + 1292)
          && !*(_BYTE *)(a1 + 3456))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v95 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "#timingadvance,GNSS is active,query timing advance", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            LOWORD(v137) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,GNSS is active,query timing advance", &v137, 2);
            v121 = (char *)v120;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v120);
            if (v121 != buf)
              free(v121);
          }
          objc_msgSend(*(id *)(a1 + 3464), "setNextFireDelay:", *(float *)(a1 + 1296));
          sub_101821ADC(*(_QWORD *)(a1 + 3192));
          v125 = 1;
          *(_BYTE *)(a1 + 3456) = 1;
        }
        else
        {
          v125 = 1;
        }
      }
      else
      {
        v125 = 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v40 = *(unsigned __int8 *)(a1 + 1705);
        v41 = *(_QWORD **)(v22 + 8);
        if (!v41)
          v41 = *(_QWORD **)(qword_102310C70 + 8);
        v42 = v41[1];
        v44 = v41[6];
        v43 = v41[7];
        v45 = *(_QWORD *)(v23 + 8);
        v46 = *(_QWORD *)(v23 + 16);
        v47 = *(_QWORD *)(v23 + 24);
        v48 = *(_QWORD *)(v23 + 40);
        v49 = *(_QWORD *)(v22 + 32);
        *(_DWORD *)buf = 67244545;
        *(_DWORD *)&buf[4] = v38;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v36;
        LOWORD(v159) = 1026;
        *(_DWORD *)((char *)&v159 + 2) = v31 < 0.0001;
        HIWORD(v159) = 1026;
        *(_DWORD *)v160 = v35;
        *(_WORD *)&v160[4] = 1026;
        *(_DWORD *)&v160[6] = v40;
        v161 = 2050;
        v162 = v34;
        v163 = 2050;
        v164 = v42;
        v165 = 2050;
        v166 = v44;
        v167 = 2050;
        v168 = v43;
        v169 = 2049;
        v170 = v45;
        v171 = 2049;
        v172 = v46;
        v173 = 2049;
        v174 = v47;
        v175 = 2050;
        v176 = v25;
        v177 = 2050;
        v178 = v48;
        v179 = 1026;
        v180 = v124;
        v181 = 1026;
        v182 = v126;
        v183 = 1026;
        v184 = v123;
        v185 = 2050;
        v186 = v49;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#gpsd,pvtm,yield,%{public}d,isPrecise,%{public}d,isNullIsland,%{public}d,isRobust,%{public}d,isContinuous,%{public}d,timeSinceStrongSec,%{public}.1f,gpsTimeNs,%{public}llu,basebandTimeNs,%{public}llu,basebandTimeUncNs,%{public}llu,lat,%{private}.6f,lon,%{private}.6f,altWgs84,%{private}.1f,drms,%{public}.1f,vertUnc,%{public}.1f,rel,%{public}d,content,%{public}d,estTech,%{public}d,spoofFlags,0x%{public}llx", buf, 0x96u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v98 = *(unsigned __int8 *)(a1 + 1705);
        v99 = *(_QWORD **)(v22 + 8);
        if (!v99)
          v99 = *(_QWORD **)(qword_102310C70 + 8);
        v100 = v99[1];
        v102 = v99[6];
        v101 = v99[7];
        v103 = *(_QWORD *)(v23 + 8);
        v104 = *(_QWORD *)(v23 + 16);
        v105 = *(_QWORD *)(v23 + 24);
        v106 = *(_QWORD *)(v23 + 40);
        v107 = *(_QWORD *)(v22 + 32);
        LODWORD(v137) = 67244545;
        DWORD1(v137) = v38;
        WORD4(v137) = 1026;
        *(_DWORD *)((char *)&v137 + 10) = v36;
        HIWORD(v137) = 1026;
        LODWORD(v138) = v31 < 0.0001;
        WORD2(v138) = 1026;
        *(_DWORD *)((char *)&v138 + 6) = v35;
        WORD5(v138) = 1026;
        HIDWORD(v138) = v98;
        *(_WORD *)v139 = 2050;
        *(double *)&v139[2] = v34;
        *(_WORD *)&v139[10] = 2050;
        *(_QWORD *)&v139[12] = v100;
        *(_WORD *)&v139[20] = 2050;
        *(_QWORD *)&v139[22] = v102;
        *(_WORD *)&v139[30] = 2050;
        *(_QWORD *)v140 = v101;
        *(_WORD *)&v140[8] = 2049;
        *(_QWORD *)&v140[10] = v103;
        v141 = 2049;
        *(_QWORD *)v142 = v104;
        *(_WORD *)&v142[8] = 2049;
        *(_QWORD *)&v142[10] = v105;
        *(_WORD *)&v142[18] = 2050;
        v143 = *(int32x2_t *)&v25;
        LOWORD(v144) = 2050;
        *(_QWORD *)((char *)&v144 + 2) = v106;
        WORD5(v144) = 1026;
        HIDWORD(v144) = v124;
        LOWORD(v145) = 1026;
        *(_DWORD *)((char *)&v145 + 2) = v126;
        HIWORD(v145) = 1026;
        *(_DWORD *)v146 = v123;
        *(_WORD *)&v146[4] = 2050;
        *(_QWORD *)&v146[6] = v107;
        LODWORD(v122) = 150;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,pvtm,yield,%{public}d,isPrecise,%{public}d,isNullIsland,%{public}d,isRobust,%{public}d,isContinuous,%{public}d,timeSinceStrongSec,%{public}.1f,gpsTimeNs,%{public}llu,basebandTimeNs,%{public}llu,basebandTimeUncNs,%{public}llu,lat,%{private}.6f,lon,%{private}.6f,altWgs84,%{private}.1f,drms,%{public}.1f,vertUnc,%{public}.1f,rel,%{public}d,content,%{public}d,estTech,%{public}d,spoofFlags,0x%{public}llx", &v137, v122);
        v109 = (char *)v108;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v108);
        if (v109 != buf)
          free(v109);
      }
      *(_QWORD *)(a1 + 1728) |= *(_QWORD *)(v22 + 32);
      *(_QWORD *)&v137 = 0;
      *((_QWORD *)&v137 + 1) = &v137;
      *(_QWORD *)&v138 = 0x16812000000;
      *((_QWORD *)&v138 + 1) = sub_100207518;
      *(_QWORD *)v139 = sub_100207F64;
      *(_QWORD *)&v139[8] = 0;
      v139[16] = 0;
      v157 = 0;
      if (v38)
      {
        if (sub_10173DC34(v126))
          *(double *)(a1 + 1712) = v20;
        if (!*(_BYTE *)(a1 + 1705))
        {
          *(_BYTE *)(a1 + 1705) = 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v50 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#gpsd,handlePvtm,yielding first post-discontinuity fix", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            LOWORD(v131) = 0;
            LODWORD(v122) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,handlePvtm,yielding first post-discontinuity fix", &v131, v122);
            v119 = (char *)v118;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v118);
            if (v119 != buf)
              free(v119);
          }
        }
        sub_1017FC9D4(*((_QWORD *)&v137 + 1) + 48);
        v51 = *((_QWORD *)&v137 + 1);
        if (!*(_BYTE *)(*((_QWORD *)&v137 + 1) + 352))
          sub_10028DF3C();
        v52 = (__int128 *)(*((_QWORD *)&v137 + 1) + 48);
        sub_1017F0870(v22, *((_QWORD *)&v137 + 1) + 48, a1 + 2464);
        *(_QWORD *)(v51 + 344) = *(_QWORD *)(a1 + 1728);
        v53 = *(_QWORD *)(v22 + 8);
        if (!v53)
          v53 = *(_QWORD *)(qword_102310C70 + 8);
        sub_1017FBEE0(a1, v53);
        v54 = (__int128 *)(a1 + 1848);
        if (v51 + 48 != a1 + 1848)
        {
          *(_DWORD *)(v51 + 328) = *(_DWORD *)(a1 + 2128);
          sub_100858F3C((_QWORD *)(v51 + 296), *(uint64_t **)(a1 + 2112), 0);
        }
        *(_DWORD *)(v51 + 336) = v126;
        v55 = *v52;
        v56 = *(_OWORD *)(v51 + 64);
        v57 = *(_OWORD *)(v51 + 96);
        *(_OWORD *)(a1 + 1880) = *(_OWORD *)(v51 + 80);
        *(_OWORD *)(a1 + 1896) = v57;
        *v54 = v55;
        *(_OWORD *)(a1 + 1864) = v56;
        v58 = *(_OWORD *)(v51 + 112);
        v59 = *(_OWORD *)(v51 + 128);
        v60 = *(_OWORD *)(v51 + 160);
        *(_OWORD *)(a1 + 1944) = *(_OWORD *)(v51 + 144);
        *(_OWORD *)(a1 + 1960) = v60;
        *(_OWORD *)(a1 + 1912) = v58;
        *(_OWORD *)(a1 + 1928) = v59;
        v61 = *(_OWORD *)(v51 + 176);
        v62 = *(_OWORD *)(v51 + 192);
        v63 = *(_OWORD *)(v51 + 224);
        *(_OWORD *)(a1 + 2008) = *(_OWORD *)(v51 + 208);
        *(_OWORD *)(a1 + 2024) = v63;
        *(_OWORD *)(a1 + 1976) = v61;
        *(_OWORD *)(a1 + 1992) = v62;
        v64 = *(_OWORD *)(v51 + 240);
        v65 = *(_OWORD *)(v51 + 256);
        v66 = *(_OWORD *)(v51 + 272);
        *(_QWORD *)(a1 + 2088) = *(_QWORD *)(v51 + 288);
        *(_OWORD *)(a1 + 2056) = v65;
        *(_OWORD *)(a1 + 2072) = v66;
        *(_OWORD *)(a1 + 2040) = v64;
        if (v54 != v52)
        {
          *(_DWORD *)(a1 + 2128) = *(_DWORD *)(v51 + 328);
          sub_100858F3C((_QWORD *)(a1 + 2096), *(uint64_t **)(v51 + 312), 0);
        }
        *(_OWORD *)(a1 + 2136) = *(_OWORD *)(v51 + 336);
        *(_QWORD *)(a1 + 1728) = 0;
        if (sub_10011CE64(*(double *)(v51 + 104), *(double *)(v51 + 112)))
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021D07D8);
          v67 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = "gps, null";
            *(_WORD *)&buf[12] = 2081;
            v159 = "gpsd";
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021D07D8);
            v131 = 136380931;
            v132 = "gps, null";
            v133 = 2081;
            v134 = "gpsd";
            LODWORD(v122) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", &v131, v122);
            v115 = (char *)v114;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v114);
            if (v115 != buf)
              free(v115);
          }
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), &stru_1021D0700);
        }
        if (*(double *)(v51 + 104) == -1.0 && *(double *)(v51 + 112) == -1.0)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021D07D8);
          v68 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = "gps, sentinel";
            *(_WORD *)&buf[12] = 2081;
            v159 = "gpsd";
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021D07D8);
            v131 = 136380931;
            v132 = "gps, sentinel";
            v133 = 2081;
            v134 = "gpsd";
            LODWORD(v122) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", &v131, v122);
            v117 = (char *)v116;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v116);
            if (v117 != buf)
              free(v117);
          }
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), &stru_1021D0720);
        }
      }
      *(_BYTE *)(a1 + 1705) = v125;
      v69 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10020ADFC;
      block[3] = &unk_1021542F8;
      block[4] = &v137;
      block[5] = a1;
      dispatch_async(v69, block);
      sub_10010CFD0((int64x2_t *)a1, *(_QWORD *)(v23 + 80));
      sub_1017FCA8C(a1, v22);
      _Block_object_dispose(&v137, 8);
      if (v157)
        sub_100067A50((uint64_t)&v156);
      goto LABEL_110;
    }
    if (sub_10173DBC0(v32))
    {
      *(_BYTE *)(a1 + 1705) = 0;
      *(_QWORD *)(a1 + 1712) = 0xC08F400000000000;
    }
    else if (*(_BYTE *)(a1 + 1705))
    {
      v34 = v20 - *(double *)(a1 + 1712);
      if (sub_10173DC34(v126))
      {
        v96 = 1;
LABEL_185:
        v35 = sub_10173DBD0(v124) && v96;
        goto LABEL_59;
      }
      if (v33 == 3)
      {
        if (!v126 || v25 >= 40.0)
        {
          if (v25 >= 100.0)
            v96 = v34 < 12.5;
          else
            v96 = v34 < 40.5;
          goto LABEL_185;
        }
        v97 = 600.5;
      }
      else
      {
        if (v33 != 2)
          goto LABEL_184;
        if (sub_10173DC44(v126) && v25 < 40.0)
          v97 = 10.5;
        else
          v97 = 5.5;
      }
      v96 = v34 < v97;
      goto LABEL_185;
    }
    if (sub_10173DC10(v124))
    {
      v96 = sub_10173DC34(v126);
      goto LABEL_185;
    }
LABEL_184:
    v96 = 0;
    goto LABEL_185;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gpsd,handlePvtm,nullptr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v137) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,handlePvtm,nullptr", &v137, 2);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
    goto LABEL_30;
  }
}

void sub_100108C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  char a71;

  _Block_object_dispose(&a27, 8);
  if (a71)
    sub_100067A50((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t *sub_100108CD8(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((_DWORD *)v3 + 7);
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((_DWORD *)v7 + 7);
  if (v6 < v9 || v9 >= v6 && v5 < *((_DWORD *)v7 + 8))
    return v2;
  return v7;
}

unsigned int *sub_100108D64(unsigned int *result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  *a2 = 0;
  *a3 = 0;
  v3 = *result;
  if (v3 <= 0x20)
  {
    if (((1 << v3) & 0x10116) != 0)
    {
LABEL_3:
      *a2 = v3;
      *a3 = *((unsigned __int8 *)result + 4);
      return result;
    }
    if (v3 == 32)
    {
      LODWORD(v3) = 256;
      goto LABEL_3;
    }
  }
  return result;
}

double sub_100108DB0()
{
  return (double)sub_1001047C0() * 0.000000001;
}

uint64_t sub_100108DD4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102311938 + 8);
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100108F70(v5, a2);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    else
      v8 = 1;
    LODWORD(v4) = v7 + v8 + 1;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  LODWORD(v4) = 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v10 = 2;
    }
    LODWORD(v4) = v10 + v4;
  }
LABEL_18:
  if ((v3 & 4) != 0)
    v4 = (v4 + 2);
  else
    v4 = v4;
  if ((v3 & 8) != 0)
    v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
LABEL_23:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

uint64_t sub_100108EAC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v10 = v11 + 1;
    v3 = *(_DWORD *)(a1 + 24);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 2;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = (v10 + v6);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v12 & 0x80000000) != 0)
    {
      v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }
    else
    {
      v13 = 2;
    }
    v4 = (v13 + v4);
  }
LABEL_21:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

uint64_t sub_100108F70(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  v3 = *(_DWORD *)(a1 + 96);
  if ((_BYTE)v3)
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 9;
    if ((v3 & 0x10) != 0)
      v4 += 9;
    if ((v3 & 0x20) != 0)
      v4 += 9;
    if ((v3 & 0x40) != 0)
      v4 += 9;
    if ((v3 & 0x80) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
      if (v6 >= 0x80)
      {
        v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 96);
      }
      else
      {
        v7 = 2;
      }
      v5 = (v7 + v5);
      if ((v3 & 0x200) == 0)
      {
LABEL_21:
        if ((v3 & 0x400) == 0)
          goto LABEL_22;
        goto LABEL_34;
      }
    }
    else if ((v3 & 0x200) == 0)
    {
      goto LABEL_21;
    }
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      v3 = *(_DWORD *)(a1 + 96);
    }
    else
    {
      v9 = 2;
    }
    v5 = (v9 + v5);
    if ((v3 & 0x400) == 0)
    {
LABEL_22:
      if ((v3 & 0x800) == 0)
        goto LABEL_41;
LABEL_35:
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 88);
      if ((v10 & 0x80000000) != 0)
      {
        v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else
      {
        v11 = 2;
      }
      v5 = (v11 + v5);
      goto LABEL_41;
    }
LABEL_34:
    v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80), a2)+ 1;
    if ((*(_DWORD *)(a1 + 96) & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_35;
  }
LABEL_41:
  *(_DWORD *)(a1 + 92) = v5;
  return v5;
}

double sub_1001090C4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193BA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 0x400000000;
  *(_OWORD *)(a1 + 16) = xmmword_101C2FAC0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1001090E4(uint64_t result)
{
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0x400000000;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

BOOL sub_100109108(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = sub_100106094(a2);
  if (!result)
    sub_101935C04();
  *(_DWORD *)(a1 + 32) |= 4u;
  *(_DWORD *)(a1 + 20) = a2;
  return result;
}

void sub_100109148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 8219);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if ((sub_100109264(v5) & 1) == 0)
      sub_101935C7C();
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }
}

void sub_1001091E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1001091F8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193C18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(a1 + 16) = 4;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_100109218(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 4;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100109234(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193F60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100109264(unsigned int a1)
{
  return (a1 < 0x10) & (0x807Fu >> a1);
}

uint64_t sub_10010927C(unsigned int a1)
{
  if (a1 > 8)
    return 0;
  else
    return dword_101CDB838[a1];
}

double sub_10010929C(uint64_t a1, _QWORD *a2, char a3, double a4)
{
  double result;
  double v6;
  double v7;

  v7 = a4;
  if ((a3 & 1) != 0 || *(double *)&qword_1023008F0 == -1.0)
  {
    v6 = 0.0;
    if (sub_10010F7EC(a1 + 2464, &v7, &v6))
    {
      *(double *)&qword_1023008F0 = v6 - v7;
      result = v6 * 1000000000.0;
      *a2 = (unint64_t)(v6 * 1000000000.0);
    }
  }
  else
  {
    result = (*(double *)&qword_1023008F0 + a4) * 1000000000.0;
    *a2 = (unint64_t)result;
  }
  return result;
}

void sub_100109334(uint64_t a1, unsigned int *a2, __n128 a3)
{
  int v5;
  int isTypeInVehicle;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v5 = *(unsigned __int8 *)(a1 + 55);
  isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*a2, a3);
  *(_BYTE *)(a1 + 55) = isTypeInVehicle;
  if (v5 != isTypeInVehicle)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a2;
      *(_DWORD *)buf = 67174657;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "L5Context,Motion,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v9 = *a2;
      v12[0] = 67174657;
      v12[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,Motion,%{private}d", v12, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedMotion(const CLMotionActivity &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100240068(a1);
  }
}

uint64_t sub_100109508(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void **v11;

  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v3)
    operator delete();
  v4 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v4)
    operator delete();
  v5 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v6)
    operator delete();
  v7 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v7)
    operator delete();
  v8 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v8)
    operator delete();
  v9 = *(void **)(a1 + 200);
  if (v9)
  {
    *(_QWORD *)(a1 + 208) = v9;
    operator delete(v9);
  }
  v11 = (void **)(a1 + 176);
  sub_100E093F8(&v11);
  v11 = (void **)(a1 + 152);
  sub_100E094E0(&v11);
  return a1;
}

uint64_t sub_100109630(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;

  v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v5 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0)
          goto LABEL_14;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0)
        goto LABEL_14;
    }
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80)
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    else
      v7 = 2;
    v4 = (v7 + v4);
  }
  else
  {
    v4 = 0;
  }
LABEL_14:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

uint64_t sub_1001096BC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      result = 11;
    }
    else if (v4 >= 0x80)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      result = 2;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t sub_100109714(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = v5;
    v7 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v4 + 23);
    else
      v8 = v7;
    if (v8 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v7 = *(_QWORD *)(v4 + 8);
      v9 = v10 + 1;
      v6 = *(_BYTE *)(v4 + 23);
    }
    else
    {
      v9 = 2;
    }
    if (v6 < 0)
      v5 = v7;
    result = (v9 + v5);
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100109790(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0)
      v4 += 2;
    if ((v3 & 4) != 0)
      v5 = v4 + 2;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
      v5 = (v5 | 1)
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2);
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 20) = v5;
  return v5;
}

void sub_1001097F8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  _BYTE v9[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 9318);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v6;
      v5 = *(_DWORD *)(a2 + 20);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }
}

void sub_1001098A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001098B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193C90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1001098E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010990C(a1);
  operator delete();
}

void sub_10010990C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102193768;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311938 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10010995C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 5698);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      v6 = *(_QWORD *)(a1 + 8);
      if (!v6)
        operator new();
      v7 = *(_QWORD *)(a2 + 8);
      if (!v7)
        v7 = *(_QWORD *)(qword_102311938 + 8);
      sub_100109E68(v6, v7);
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (!sub_10002A324(v8))
        sub_101935BB4();
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 4) != 0)
    {
      v9 = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_BYTE *)(a1 + 20) = v9;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 8) != 0)
    {
      v10 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_QWORD *)(a1 + 24) = v10;
    }
  }
}

void sub_100109A94()
{
  operator delete();
}

uint64_t sub_100109ACC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 36))
  {
    if ((*(_BYTE *)(result + 36) & 1) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        result = sub_10010A090(result);
    }
    *(_DWORD *)(v1 + 16) = 0;
    *(_BYTE *)(v1 + 20) = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100109B10(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
    *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_100109B24(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021937E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100109B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 5939);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 8) = v7;
      v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_QWORD *)(a1 + 16) = v8;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return;
LABEL_7:
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(_QWORD *)(a1 + 24) = v6;
  }
}

void sub_100109C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100109C3C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193600;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100109C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  unsigned int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 5092);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v7, v6);
      v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 3)
        sub_101935CA4();
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
    }
  }
}

void sub_100109D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100109D90(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      v1 = *(_QWORD *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)v1 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100109DDC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

double sub_100109E3C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102151AF8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return result;
}

void sub_100109E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v19, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", 713);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v18, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  v5 = *(_DWORD *)(a2 + 96);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v11 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 96) |= 1u;
    *(_QWORD *)(a1 + 8) = v11;
    v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 96) |= 2u;
  *(_QWORD *)(a1 + 16) = v12;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  v13 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 96) |= 4u;
  *(_QWORD *)(a1 + 24) = v13;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  v14 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 96) |= 8u;
  *(_QWORD *)(a1 + 32) = v14;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_30:
    v16 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 96) |= 0x20u;
    *(_QWORD *)(a1 + 48) = v16;
    v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_29:
  v15 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 96) |= 0x10u;
  *(_QWORD *)(a1 + 40) = v15;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x20) != 0)
    goto LABEL_30;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_31:
  v17 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 96) |= 0x40u;
  *(_QWORD *)(a1 + 56) = v17;
  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 96) |= 0x80u;
    *(_QWORD *)(a1 + 64) = v6;
    v5 = *(_DWORD *)(a2 + 96);
  }
LABEL_13:
  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      v7 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 96) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v7;
      v5 = *(_DWORD *)(a2 + 96);
    }
    if ((v5 & 0x200) != 0)
    {
      v8 = *(_DWORD *)(a2 + 76);
      if (!sub_100106054(v8))
        sub_101907834();
      *(_DWORD *)(a1 + 96) |= 0x200u;
      *(_DWORD *)(a1 + 76) = v8;
      v5 = *(_DWORD *)(a2 + 96);
    }
    if ((v5 & 0x400) != 0)
    {
      v9 = *(_QWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 96) |= 0x400u;
      *(_QWORD *)(a1 + 80) = v9;
      v5 = *(_DWORD *)(a2 + 96);
    }
    if ((v5 & 0x800) != 0)
    {
      v10 = *(_DWORD *)(a2 + 88);
      if (v10 >= 6)
        sub_10190780C();
      *(_DWORD *)(a1 + 96) |= 0x800u;
      *(_DWORD *)(a1 + 88) = v10;
    }
  }
}

void sub_10010A078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10010A090(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 96);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_DWORD *)(result + 88) = 0;
  }
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_10010A0C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151C60;
  sub_10010A10C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010A10C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)qword_102310C70 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010A17C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151AF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010A1AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151BE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_10010A1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  float v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  float v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int64x2_t v55;
  int32x2_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  unint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  char **v125;
  uint64_t v126;
  int v127;
  char v128;
  uint64_t v129;
  int v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  char **v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t result;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _QWORD *v174;
  float v175;
  float v176;
  uint64_t *v177;
  uint64_t *v178;
  int64x2_t v179;
  uint64_t *v180;
  int64x2_t v182;
  _BYTE v183[40];
  __int128 v184;
  _BYTE v185[56];
  __int128 v186;
  unint64_t v187;
  __int128 v188;
  char v189;
  _QWORD *v190;
  int v191;
  __int16 v192;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    v3 = *(_QWORD *)(qword_102311710 + 8);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 132) & 2) == 0)
    goto LABEL_211;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    v4 = *(_QWORD *)(qword_102311710 + 16);
  if ((*(_BYTE *)(v4 + 44) & 1) == 0)
    goto LABEL_38;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311660 + 8);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 1) != 0)
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v5 + 8);
  if ((v6 & 2) == 0)
    goto LABEL_20;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_102311658 + 16);
  v8 = *(_DWORD *)(v7 + 32);
  if ((v8 & 4) != 0)
  {
    *(double *)(a2 + 64) = *(float *)(v7 + 16);
    if ((v8 & 2) == 0)
    {
LABEL_16:
      if ((v8 & 8) == 0)
        goto LABEL_17;
LABEL_396:
      *(double *)(a2 + 72) = *(float *)(v7 + 20);
      if ((v8 & 1) == 0)
      {
LABEL_18:
        if ((v8 & 0x10) == 0)
          goto LABEL_20;
        goto LABEL_19;
      }
      goto LABEL_397;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_16;
  }
  *(double *)(a2 + 56) = *(float *)(v7 + 12);
  if ((v8 & 8) != 0)
    goto LABEL_396;
LABEL_17:
  if ((v8 & 1) == 0)
    goto LABEL_18;
LABEL_397:
  *(double *)(a2 + 48) = *(float *)(v7 + 8);
  if ((v8 & 0x10) != 0)
  {
LABEL_19:
    *(_WORD *)(a2 + 80) = *(unsigned __int8 *)(v7 + 24) | 0x100;
    v6 = *(_DWORD *)(v5 + 44);
  }
LABEL_20:
  if ((v6 & 4) == 0)
    goto LABEL_29;
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_102311658 + 24);
  v10 = *(_DWORD *)(v9 + 52);
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(v9 + 8);
    if ((v10 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 4) == 0)
        goto LABEL_26;
      goto LABEL_401;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_25;
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(v9 + 16);
  if ((v10 & 4) == 0)
  {
LABEL_26:
    if ((v10 & 8) == 0)
      goto LABEL_27;
    goto LABEL_402;
  }
LABEL_401:
  v175 = *(double *)(v9 + 24);
  *(float *)(a2 + 104) = v175;
  if ((v10 & 8) == 0)
  {
LABEL_27:
    if ((v10 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_402:
  v176 = *(double *)(v9 + 32);
  *(float *)(a2 + 108) = v176;
  if ((v10 & 0x10) != 0)
  {
LABEL_28:
    v11 = *(double *)(v9 + 40);
    *(float *)(a2 + 112) = v11;
  }
LABEL_29:
  if ((v6 & 8) == 0)
    goto LABEL_38;
  v12 = *(_QWORD *)(v5 + 32);
  if (!v12)
    v12 = *(_QWORD *)(qword_102311658 + 32);
  v13 = *(_DWORD *)(v12 + 40);
  if ((v13 & 8) != 0)
  {
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(v12 + 24);
    if ((v13 & 1) == 0)
    {
LABEL_34:
      if ((v13 & 0x10) == 0)
        goto LABEL_35;
LABEL_406:
      *(_DWORD *)(a2 + 144) = *(_DWORD *)(v12 + 32);
      if ((v13 & 4) == 0)
      {
LABEL_36:
        if ((v13 & 2) == 0)
          goto LABEL_38;
        goto LABEL_37;
      }
      goto LABEL_407;
    }
  }
  else if ((v13 & 1) == 0)
  {
    goto LABEL_34;
  }
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x10) != 0)
    goto LABEL_406;
LABEL_35:
  if ((v13 & 4) == 0)
    goto LABEL_36;
LABEL_407:
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(v12 + 20);
  if ((v13 & 2) != 0)
LABEL_37:
    *(_DWORD *)(a2 + 128) = *(_DWORD *)(v12 + 16);
LABEL_38:
  v14 = *(int *)(v4 + 24);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(v4 + 16);
    v178 = (uint64_t *)(a2 + 152);
    v177 = &v15[v14];
    do
    {
      v16 = *v15;
      *(_DWORD *)v183 = 0;
      *(_WORD *)&v183[4] = 0;
      v183[6] = 127;
      *(_QWORD *)&v183[8] = 0;
      *(_DWORD *)&v183[15] = 0;
      *(_QWORD *)&v183[24] = -1;
      *(_QWORD *)&v183[32] = -1;
      *(_QWORD *)&v184 = -1;
      *((_QWORD *)&v184 + 1) = 0x7FF8000000000000;
      *(_DWORD *)v185 = -1082130432;
      *(_OWORD *)&v185[8] = xmmword_101BDB7D0;
      *(_OWORD *)&v185[24] = xmmword_101BDB7D0;
      *(_OWORD *)&v185[40] = xmmword_101BDB7D0;
      LOBYTE(v186) = 1;
      *((_QWORD *)&v186 + 1) = -1;
      v187 = -1;
      v188 = xmmword_101BDB7D0;
      v189 = 0;
      v190 = 0;
      v191 = -1082130432;
      v192 = 0;
      v17 = *(_DWORD *)(v16 + 112);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v16 + 8);
        if (!v18)
          v18 = *(_QWORD *)(qword_102311638 + 8);
        if (!sub_10010BEF8(v18, (uint64_t)v183))
        {
LABEL_390:
          v174 = v190;
          v190 = 0;
          if (v174)
            sub_100E09580((uint64_t)&v190, v174);
          return 0;
        }
        v17 = *(_DWORD *)(v16 + 112);
      }
      if ((v17 & 2) != 0)
      {
        v20 = *(_QWORD *)(v16 + 16);
        if (!v20)
          v20 = *(_QWORD *)(qword_102311638 + 16);
        v21 = *(_DWORD *)(v20 + 96);
        if ((v21 & 1) != 0)
        {
          v22 = *(_DWORD *)(v20 + 88);
          v183[8] = 0;
          v23 = v22 - 2;
          if (v23 <= 0xA && ((0x6FFu >> v23) & 1) != 0)
            v183[8] = byte_101CDB85C[v23];
        }
        if ((v21 & 2) != 0)
        {
          v37 = *(_QWORD *)(v20 + 8);
          if (!v37)
            v37 = *(_QWORD *)(qword_1023115F0 + 8);
          v38 = *(_DWORD *)(v37 + 16);
          if ((v38 & 2) != 0)
          {
            v183[10] = *(_BYTE *)(v37 + 9);
            if ((v38 & 4) != 0)
              goto LABEL_133;
LABEL_115:
            if ((v38 & 1) == 0)
              goto LABEL_116;
LABEL_134:
            v183[9] = *(_BYTE *)(v37 + 8);
            if ((v38 & 8) == 0)
              goto LABEL_46;
          }
          else
          {
            if ((v38 & 4) == 0)
              goto LABEL_115;
LABEL_133:
            v183[11] = *(_BYTE *)(v37 + 10);
            if ((v38 & 1) != 0)
              goto LABEL_134;
LABEL_116:
            if ((v38 & 8) == 0)
              goto LABEL_46;
          }
          v183[12] = *(_BYTE *)(v37 + 11);
          goto LABEL_46;
        }
        if ((v21 & 4) != 0)
        {
          v39 = *(_QWORD *)(v20 + 16);
          if (!v39)
            v39 = *(_QWORD *)(qword_1023115F0 + 16);
          v40 = *(_DWORD *)(v39 + 20);
          if ((v40 & 0x10) != 0)
          {
            v183[13] = *(_BYTE *)(v39 + 12);
            if ((v40 & 4) == 0)
              goto LABEL_130;
          }
          else if ((v40 & 4) == 0)
          {
LABEL_130:
            if ((v40 & 8) == 0)
              goto LABEL_160;
            goto LABEL_159;
          }
          v183[11] = *(_BYTE *)(v39 + 10);
          if ((v40 & 8) == 0)
            goto LABEL_160;
LABEL_159:
          v183[12] = *(_BYTE *)(v39 + 11);
          goto LABEL_160;
        }
        if ((v21 & 8) != 0)
        {
          v39 = *(_QWORD *)(v20 + 24);
          if (!v39)
            v39 = *(_QWORD *)(qword_1023115F0 + 24);
          v40 = *(_DWORD *)(v39 + 16);
          if ((v40 & 4) != 0)
          {
            v183[11] = *(_BYTE *)(v39 + 10);
            if ((v40 & 2) == 0)
              goto LABEL_155;
          }
          else if ((v40 & 2) == 0)
          {
LABEL_155:
            if ((v40 & 8) == 0)
              goto LABEL_173;
LABEL_172:
            v183[12] = *(_BYTE *)(v39 + 11);
            goto LABEL_173;
          }
          v183[10] = *(_BYTE *)(v39 + 9);
          if ((v40 & 8) == 0)
            goto LABEL_173;
          goto LABEL_172;
        }
        if ((v21 & 0x10) != 0)
        {
          v45 = *(_QWORD *)(v20 + 32);
          if (!v45)
            v45 = *(_QWORD *)(qword_1023115F0 + 32);
          v46 = *(_DWORD *)(v45 + 20);
          if ((v46 & 1) != 0)
          {
            v183[9] = *(_BYTE *)(v45 + 8);
            if ((v46 & 4) != 0)
              goto LABEL_183;
LABEL_166:
            if ((v46 & 8) == 0)
              goto LABEL_167;
LABEL_184:
            v183[12] = *(_BYTE *)(v45 + 11);
            if ((v46 & 2) != 0)
              goto LABEL_185;
LABEL_168:
            if ((v46 & 0x10) == 0)
              goto LABEL_46;
          }
          else
          {
            if ((v46 & 4) == 0)
              goto LABEL_166;
LABEL_183:
            v183[11] = *(_BYTE *)(v45 + 10);
            if ((v46 & 8) != 0)
              goto LABEL_184;
LABEL_167:
            if ((v46 & 2) == 0)
              goto LABEL_168;
LABEL_185:
            v183[10] = *(_BYTE *)(v45 + 9);
            if ((v46 & 0x10) == 0)
              goto LABEL_46;
          }
          v183[13] = *(_BYTE *)(v45 + 12);
          goto LABEL_46;
        }
        if ((v21 & 0x20) != 0)
        {
          v47 = *(_QWORD *)(v20 + 40);
          if (!v47)
            v47 = *(_QWORD *)(qword_1023115F0 + 40);
          v48 = *(_DWORD *)(v47 + 16);
          if ((v48 & 2) != 0)
          {
            v183[10] = *(_BYTE *)(v47 + 9);
            if ((v48 & 1) != 0)
              goto LABEL_195;
LABEL_179:
            if ((v48 & 8) == 0)
              goto LABEL_180;
LABEL_196:
            v183[12] = *(_BYTE *)(v47 + 11);
            if ((v48 & 4) == 0)
              goto LABEL_46;
          }
          else
          {
            if ((v48 & 1) == 0)
              goto LABEL_179;
LABEL_195:
            v183[9] = *(_BYTE *)(v47 + 8);
            if ((v48 & 8) != 0)
              goto LABEL_196;
LABEL_180:
            if ((v48 & 4) == 0)
              goto LABEL_46;
          }
          v183[11] = *(_BYTE *)(v47 + 10);
          goto LABEL_46;
        }
        if ((v21 & 0x40) != 0)
        {
          v49 = *(_QWORD *)(v20 + 48);
          if (!v49)
            v49 = *(_QWORD *)(qword_1023115F0 + 48);
          v50 = *(_DWORD *)(v49 + 16);
          if ((v50 & 4) != 0)
          {
            v183[11] = *(_BYTE *)(v49 + 10);
            if ((v50 & 8) != 0)
              goto LABEL_205;
LABEL_191:
            if ((v50 & 1) == 0)
              goto LABEL_192;
LABEL_206:
            v183[9] = *(_BYTE *)(v49 + 8);
            if ((v50 & 2) == 0)
              goto LABEL_46;
          }
          else
          {
            if ((v50 & 8) == 0)
              goto LABEL_191;
LABEL_205:
            v183[12] = *(_BYTE *)(v49 + 11);
            if ((v50 & 1) != 0)
              goto LABEL_206;
LABEL_192:
            if ((v50 & 2) == 0)
              goto LABEL_46;
          }
          v183[10] = *(_BYTE *)(v49 + 9);
          goto LABEL_46;
        }
        if ((v21 & 0x80) != 0)
        {
          v39 = *(_QWORD *)(v20 + 56);
          if (!v39)
            v39 = *(_QWORD *)(qword_1023115F0 + 56);
          v40 = *(_DWORD *)(v39 + 16);
          if ((v40 & 8) != 0)
            v183[12] = *(_BYTE *)(v39 + 11);
          if ((v40 & 4) != 0)
            v183[11] = *(_BYTE *)(v39 + 10);
LABEL_160:
          if ((v40 & 2) != 0)
            v183[10] = *(_BYTE *)(v39 + 9);
LABEL_173:
          if ((v40 & 1) != 0)
            v183[9] = *(_BYTE *)(v39 + 8);
          goto LABEL_46;
        }
        if ((v21 & 0x100) != 0)
        {
          v51 = *(_QWORD *)(v20 + 64);
          if (!v51)
            v51 = *(_QWORD *)(qword_1023115F0 + 64);
          sub_101741418(v51, &v183[9]);
        }
        else
        {
          if ((v21 & 0x400) == 0)
            goto LABEL_390;
          v24 = *(_QWORD *)(v20 + 80);
          if (!v24)
            v24 = *(_QWORD *)(qword_1023115F0 + 80);
          sub_1017413D0(v24, &v183[9]);
        }
      }
LABEL_46:
      v19 = *(_DWORD *)(v16 + 112);
      if ((v19 & 4) != 0)
      {
        *(_QWORD *)&v183[24] = *(_QWORD *)(v16 + 24);
        if ((v19 & 8) == 0)
        {
LABEL_48:
          if ((v19 & 0x10) == 0)
            goto LABEL_49;
          goto LABEL_71;
        }
      }
      else if ((v19 & 8) == 0)
      {
        goto LABEL_48;
      }
      *(_QWORD *)&v183[32] = *(_QWORD *)(v16 + 32);
      if ((v19 & 0x10) == 0)
      {
LABEL_49:
        if ((v19 & 0x20) == 0)
          goto LABEL_80;
        goto LABEL_72;
      }
LABEL_71:
      *(_QWORD *)&v184 = *(_QWORD *)(v16 + 40);
      if ((v19 & 0x20) == 0)
        goto LABEL_80;
LABEL_72:
      v25 = *(_QWORD *)(v16 + 48);
      if (!v25)
        v25 = *(_QWORD *)(qword_102311638 + 48);
      v26 = *(_DWORD *)(v25 + 32);
      if ((v26 & 1) != 0)
        *((_QWORD *)&v184 + 1) = *(_QWORD *)(v25 + 8);
      if ((v26 & 2) != 0)
      {
        v27 = *(double *)(v25 + 16);
        if (v27 < 1.17549435e-38 || v27 > 3.40282347e38)
          goto LABEL_390;
        v28 = v27;
        *(float *)v185 = v28;
      }
LABEL_80:
      if ((v19 & 0x40) != 0)
      {
        v29 = *(_QWORD *)(v16 + 56);
        if (!v29)
          v29 = *(_QWORD *)(qword_102311638 + 56);
        v30 = *(_DWORD *)(v29 + 32);
        if ((v30 & 1) != 0)
          *(_QWORD *)&v185[8] = *(_QWORD *)(v29 + 8);
        if ((v30 & 2) != 0)
          *(_QWORD *)&v185[16] = *(_QWORD *)(v29 + 16);
      }
      if ((v19 & 0x800) != 0)
      {
        v31 = *(_QWORD *)(v16 + 88);
        if (!v31)
          v31 = *(_QWORD *)(qword_102311638 + 88);
        v32 = *(_DWORD *)(v31 + 32);
        if ((v32 & 1) != 0)
          *(_QWORD *)&v185[24] = *(_QWORD *)(v31 + 8);
        if ((v32 & 2) != 0)
          *(_QWORD *)&v185[32] = *(_QWORD *)(v31 + 16);
        v33 = *(_QWORD *)(v16 + 96);
        if (!v33)
          v33 = *(_QWORD *)(qword_102311638 + 96);
        v34 = *(_DWORD *)(v33 + 32);
        if ((v34 & 1) != 0)
        {
          *(_QWORD *)&v185[40] = *(_QWORD *)(v33 + 8);
          if ((v34 & 2) == 0)
          {
LABEL_98:
            if ((v34 & 4) == 0)
              goto LABEL_100;
LABEL_99:
            LOBYTE(v186) = *(_BYTE *)(v33 + 24);
            goto LABEL_100;
          }
        }
        else if ((v34 & 2) == 0)
        {
          goto LABEL_98;
        }
        *(_QWORD *)&v185[48] = *(_QWORD *)(v33 + 16);
        if ((v34 & 4) != 0)
          goto LABEL_99;
      }
LABEL_100:
      if ((v19 & 0x80) == 0)
        goto LABEL_109;
      v35 = *(_QWORD *)(v16 + 64);
      if (!v35)
        v35 = *(_QWORD *)(qword_102311638 + 64);
      v36 = *(_DWORD *)(v35 + 48);
      if ((v36 & 0x10) != 0)
      {
        v189 = *(_BYTE *)(v35 + 40);
        if ((v36 & 2) == 0)
        {
LABEL_105:
          if ((v36 & 1) == 0)
            goto LABEL_106;
          goto LABEL_123;
        }
      }
      else if ((v36 & 2) == 0)
      {
        goto LABEL_105;
      }
      v187 = *(_QWORD *)(v35 + 16);
      if ((v36 & 1) == 0)
      {
LABEL_106:
        if ((v36 & 4) == 0)
          goto LABEL_107;
        goto LABEL_124;
      }
LABEL_123:
      *((_QWORD *)&v186 + 1) = *(_QWORD *)(v35 + 8);
      if ((v36 & 4) == 0)
      {
LABEL_107:
        if ((v36 & 8) == 0)
          goto LABEL_109;
LABEL_108:
        *((_QWORD *)&v188 + 1) = *(_QWORD *)(v35 + 32);
        goto LABEL_109;
      }
LABEL_124:
      *(_QWORD *)&v188 = *(_QWORD *)(v35 + 24);
      if ((v36 & 8) != 0)
        goto LABEL_108;
LABEL_109:
      if ((v19 & 0x100) != 0)
        operator new();
      v41 = *(_DWORD *)(v16 + 112);
      if ((v41 & 0x200) != 0)
      {
        v191 = *(_DWORD *)(v16 + 80);
        if ((v41 & 0x1000) != 0)
        {
LABEL_141:
          HIBYTE(v192) = *(_BYTE *)(v16 + 104);
          if ((v41 & 0x400) == 0)
            goto LABEL_147;
          goto LABEL_142;
        }
      }
      else if ((v41 & 0x1000) != 0)
      {
        goto LABEL_141;
      }
      if ((v41 & 0x400) == 0)
        goto LABEL_147;
LABEL_142:
      v42 = *(_DWORD *)(v16 + 84);
      LOBYTE(v192) = 0;
      if (v42 == 3)
      {
        v43 = 1;
        goto LABEL_146;
      }
      if (v42 == 4)
      {
        v43 = 2;
LABEL_146:
        LOBYTE(v192) = v43;
      }
LABEL_147:
      sub_101741218(v178, (uint64_t)v183);
      v44 = v190;
      v190 = 0;
      if (v44)
        sub_100E09580((uint64_t)&v190, v44);
      ++v15;
    }
    while (v15 != v177);
  }
LABEL_211:
  v52 = a1;
  v53 = *(int *)(a1 + 32);
  if ((_DWORD)v53)
  {
    v54 = *(uint64_t **)(a1 + 24);
    v180 = &v54[v53];
    v55 = vdupq_n_s64(0x7FF8000000000000uLL);
    v56 = vdup_n_s32(0x7FC00000u);
    v57 = 0uLL;
    v179 = v55;
    do
    {
      v58 = *v54;
      *(_DWORD *)v183 = 0;
      *(_WORD *)&v183[4] = 0;
      v183[6] = 127;
      *(_QWORD *)&v183[8] = 0x7FF8000000000000;
      v183[16] = 0;
      *(_OWORD *)&v183[24] = v57;
      v184 = v57;
      *(int64x2_t *)v185 = v55;
      *(int64x2_t *)&v185[16] = v55;
      *(int32x2_t *)&v185[32] = v56;
      *(_QWORD *)&v185[40] = 0;
      *(_WORD *)&v185[48] = 0;
      v187 = 0;
      v186 = 0uLL;
      LOBYTE(v188) = 0;
      v59 = *(_DWORD *)(v58 + 172);
      if ((v59 & 1) != 0)
      {
        v60 = *(_QWORD *)(v58 + 8);
        if (!v60)
          v60 = *(_QWORD *)(qword_102311688 + 8);
        if (!sub_10010BEF8(v60, (uint64_t)v183))
        {
LABEL_384:
          if ((_QWORD)v186)
          {
            *((_QWORD *)&v186 + 1) = v186;
            operator delete((void *)v186);
          }
          v173 = *((_QWORD *)&v184 + 1);
          *((_QWORD *)&v184 + 1) = 0;
          if (v173)
            operator delete();
          if (*(_QWORD *)&v183[24])
          {
            *(_QWORD *)&v183[32] = *(_QWORD *)&v183[24];
            operator delete(*(void **)&v183[24]);
          }
          return 0;
        }
        v59 = *(_DWORD *)(v58 + 172);
      }
      if ((v59 & 4) != 0)
      {
        v61 = *(_DWORD *)(v58 + 56) - 1;
        if (v61 > 5)
          goto LABEL_384;
        v183[16] = 0x30404020100uLL >> (8 * v61);
      }
      v62 = *(int *)(v58 + 32);
      if ((_DWORD)v62)
      {
        v63 = *(uint64_t **)(v58 + 24);
        v64 = &v63[v62];
        do
        {
          v65 = *v63;
          if ((*(_BYTE *)(*v63 + 28) & 2) != 0)
          {
            v69 = *(_QWORD **)(v65 + 16);
            if (!v69)
              v69 = *(_QWORD **)(qword_102311678 + 16);
            v66 = v69[1];
            v67 = v69[2];
            v68 = v69[3];
          }
          else
          {
            v66 = 0x7FF8000000000000;
            v67 = 0x7FF8000000000000;
            v68 = 0x7FF8000000000000;
          }
          v70 = *(_QWORD *)(v65 + 8);
          v71 = *(_QWORD **)&v183[32];
          if (*(_QWORD *)&v183[32] >= (unint64_t)v184)
          {
            v73 = *(_QWORD **)&v183[24];
            v74 = (uint64_t)(*(_QWORD *)&v183[32] - *(_QWORD *)&v183[24]) >> 5;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 59)
              sub_100259694();
            v76 = v184 - *(_QWORD *)&v183[24];
            if ((uint64_t)(v184 - *(_QWORD *)&v183[24]) >> 4 > v75)
              v75 = v76 >> 4;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
              v77 = 0x7FFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)sub_10025BA00((uint64_t)&v184, v77);
              v73 = *(_QWORD **)&v183[24];
              v71 = *(_QWORD **)&v183[32];
            }
            else
            {
              v78 = 0;
            }
            v79 = &v78[32 * v74];
            *(_QWORD *)v79 = v70;
            *((_QWORD *)v79 + 1) = v66;
            *((_QWORD *)v79 + 2) = v67;
            *((_QWORD *)v79 + 3) = v68;
            v80 = v79;
            if (v71 != v73)
            {
              do
              {
                v81 = *((_OWORD *)v71 - 1);
                *((_OWORD *)v80 - 2) = *((_OWORD *)v71 - 2);
                *((_OWORD *)v80 - 1) = v81;
                v80 -= 32;
                v71 -= 4;
              }
              while (v71 != v73);
              v73 = *(_QWORD **)&v183[24];
            }
            v72 = v79 + 32;
            *(_QWORD *)&v183[24] = v80;
            *(_QWORD *)&v183[32] = v79 + 32;
            *(_QWORD *)&v184 = &v78[32 * v77];
            if (v73)
              operator delete(v73);
          }
          else
          {
            **(_QWORD **)&v183[32] = v70;
            v71[1] = v66;
            v72 = v71 + 4;
            v71[2] = v67;
            v71[3] = v68;
          }
          *(_QWORD *)&v183[32] = v72;
          ++v63;
        }
        while (v63 != v64);
        v59 = *(_DWORD *)(v58 + 172);
      }
      *(_QWORD *)v185 = *(_QWORD *)(v58 + 48);
      *(_OWORD *)&v185[8] = *(_OWORD *)(v58 + 64);
      *(_DWORD *)&v185[32] = *(_DWORD *)(v58 + 60);
      *(_DWORD *)&v185[36] = *(_DWORD *)(v58 + 80);
      if ((v59 & 0x200) != 0)
      {
        v82 = *(_DWORD *)(v58 + 84) - 1;
        if (v82 > 3)
          goto LABEL_384;
        v185[40] = 0x2010000u >> (8 * v82);
      }
      if ((v59 & 0x400) != 0)
      {
        v83 = *(_DWORD *)(v58 + 88) - 1;
        if (v83 > 3)
          goto LABEL_384;
        v185[42] = 0x2010000u >> (8 * v83);
      }
      if ((v59 & 0x800) != 0)
      {
        v84 = *(_DWORD *)(v58 + 92) - 1;
        if (v84 > 3)
          goto LABEL_384;
        v185[44] = 0x2010000u >> (8 * v84);
      }
      if ((v59 & 0x1000) != 0)
      {
        v85 = *(_DWORD *)(v58 + 96) - 1;
        if (v85 > 3)
          goto LABEL_384;
        v185[46] = 0x2010000u >> (8 * v85);
      }
      if ((v59 & 0x2000) != 0)
      {
        v86 = *(_DWORD *)(v58 + 100) - 1;
        if (v86 > 3)
          goto LABEL_384;
        v185[48] = 0x2010000u >> (8 * v86);
      }
      if ((v59 & 0x10000) != 0)
      {
        v87 = *(_DWORD *)(v58 + 136) - 1;
        if (v87 > 3)
          goto LABEL_384;
        v185[41] = 0x2010000u >> (8 * v87);
      }
      if ((v59 & 0x20000) != 0)
      {
        v88 = *(_DWORD *)(v58 + 140) - 1;
        if (v88 > 3)
          goto LABEL_384;
        v185[43] = 0x2010000u >> (8 * v88);
      }
      if ((v59 & 0x40000) != 0)
      {
        v89 = *(_DWORD *)(v58 + 144) - 1;
        if (v89 > 3)
          goto LABEL_384;
        v185[45] = 0x2010000u >> (8 * v89);
      }
      if ((v59 & 0x80000) != 0)
      {
        v90 = *(_DWORD *)(v58 + 148) - 1;
        if (v90 > 3)
          goto LABEL_384;
        v185[47] = 0x2010000u >> (8 * v90);
      }
      if ((v59 & 0x100000) != 0)
      {
        v91 = *(_DWORD *)(v58 + 160) - 1;
        if (v91 > 3)
          goto LABEL_384;
        v185[49] = 0x2010000u >> (8 * v91);
      }
      v92 = *(int *)(v58 + 112);
      if ((_DWORD)v92)
      {
        v93 = *(uint64_t **)(v58 + 104);
        v94 = &v93[v92];
        do
        {
          v95 = *v93;
          if ((*(_BYTE *)(*v93 + 44) & 1) != 0)
          {
            v96 = *(_DWORD *)(v95 + 28);
            if (v96 > 2)
              goto LABEL_384;
            v100 = *(_QWORD *)(v95 + 8);
            v99 = *(_QWORD *)(v95 + 16);
            v98 = *(_QWORD *)(v95 + 32);
            v101 = *(_DWORD *)(v95 + 24) - 2;
            if (v101 <= 0xA && ((0x6FFu >> v101) & 1) != 0)
              v97 = byte_101CDB85C[v101];
            else
              v97 = 0;
          }
          else
          {
            v96 = 0;
            v97 = 0;
            v98 = 0x7FF8000000000000;
            v99 = 0x7FF8000000000000;
            v100 = 0x7FF8000000000000;
          }
          v102 = *((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1) >= v187)
          {
            v104 = (void *)v186;
            v105 = (uint64_t)(*((_QWORD *)&v186 + 1) - v186) >> 5;
            v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 59)
              sub_100259694();
            v107 = v187 - v186;
            if ((uint64_t)(v187 - v186) >> 4 > v106)
              v106 = v107 >> 4;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFE0)
              v108 = 0x7FFFFFFFFFFFFFFLL;
            else
              v108 = v106;
            if (v108)
            {
              v109 = (char *)sub_10025BA00((uint64_t)&v187, v108);
              v102 = *((_QWORD *)&v186 + 1);
              v104 = (void *)v186;
            }
            else
            {
              v109 = 0;
            }
            v110 = &v109[32 * v105];
            *v110 = v97;
            *((_DWORD *)v110 + 1) = v96;
            *((_QWORD *)v110 + 1) = v100;
            *((_QWORD *)v110 + 2) = v99;
            *((_QWORD *)v110 + 3) = v98;
            v111 = v110;
            if ((void *)v102 != v104)
            {
              do
              {
                v112 = *(_OWORD *)(v102 - 16);
                *((_OWORD *)v111 - 2) = *(_OWORD *)(v102 - 32);
                *((_OWORD *)v111 - 1) = v112;
                v111 -= 32;
                v102 -= 32;
              }
              while ((void *)v102 != v104);
              v104 = (void *)v186;
            }
            v103 = v110 + 32;
            *(_QWORD *)&v186 = v111;
            *((_QWORD *)&v186 + 1) = v110 + 32;
            v187 = (unint64_t)&v109[32 * v108];
            if (v104)
              operator delete(v104);
          }
          else
          {
            **((_BYTE **)&v186 + 1) = v97;
            *(_DWORD *)(v102 + 4) = v96;
            *(_QWORD *)(v102 + 8) = v100;
            *(_QWORD *)(v102 + 16) = v99;
            v103 = (char *)(v102 + 32);
            *(_QWORD *)(v102 + 24) = v98;
          }
          *((_QWORD *)&v186 + 1) = v103;
          ++v93;
        }
        while (v93 != v94);
      }
      v113 = *(_QWORD *)(a2 + 184);
      if (v113 >= *(_QWORD *)(a2 + 192))
      {
        v52 = a1;
        v119 = sub_101741848((uint64_t *)(a2 + 176), (uint64_t)v183);
        v120 = (void *)v186;
        *(_QWORD *)(a2 + 184) = v119;
        if (v120)
        {
          *((_QWORD *)&v186 + 1) = v120;
          operator delete(v120);
        }
      }
      else
      {
        v114 = *(_OWORD *)v183;
        *(_BYTE *)(v113 + 16) = v183[16];
        *(_OWORD *)v113 = v114;
        *(_QWORD *)(v113 + 32) = 0;
        *(_QWORD *)(v113 + 40) = 0;
        *(_QWORD *)(v113 + 24) = 0;
        *(_OWORD *)(v113 + 24) = *(_OWORD *)&v183[24];
        *(_QWORD *)(v113 + 40) = v184;
        *(_QWORD *)&v183[24] = 0;
        *(_QWORD *)&v183[32] = 0;
        v115 = *((_QWORD *)&v184 + 1);
        v184 = 0uLL;
        *(_QWORD *)(v113 + 48) = v115;
        v116 = *(_OWORD *)v185;
        v117 = *(_OWORD *)&v185[16];
        v118 = *(_OWORD *)&v185[32];
        *(_WORD *)(v113 + 104) = *(_WORD *)&v185[48];
        *(_OWORD *)(v113 + 88) = v118;
        *(_OWORD *)(v113 + 72) = v117;
        *(_OWORD *)(v113 + 56) = v116;
        *(_QWORD *)(v113 + 112) = 0;
        *(_QWORD *)(v113 + 120) = 0;
        *(_QWORD *)(v113 + 128) = 0;
        *(_OWORD *)(v113 + 112) = v186;
        *(_QWORD *)(v113 + 128) = v187;
        v186 = 0uLL;
        v187 = 0;
        *(_BYTE *)(v113 + 136) = v188;
        *(_QWORD *)(a2 + 184) = v113 + 144;
        v52 = a1;
      }
      v121 = *((_QWORD *)&v184 + 1);
      *((_QWORD *)&v184 + 1) = 0;
      if (v121)
        operator delete();
      if (*(_QWORD *)&v183[24])
      {
        *(_QWORD *)&v183[32] = *(_QWORD *)&v183[24];
        operator delete(*(void **)&v183[24]);
      }
      ++v54;
      v55 = v179;
      v57 = 0uLL;
    }
    while (v54 != v180);
  }
  v122 = *(int *)(v52 + 56);
  if ((_DWORD)v122)
  {
    v123 = *(uint64_t **)(a1 + 48);
    v124 = &v123[v122];
    v125 = (char **)(a2 + 200);
    do
    {
      v126 = *v123;
      v127 = *(_DWORD *)(*v123 + 16) - 2;
      if (v127 <= 0xA && ((0x6FFu >> v127) & 1) != 0)
        v128 = byte_101CDB85C[v127];
      else
        v128 = 0;
      v129 = *(_QWORD *)(v126 + 8);
      v131 = *(_DWORD *)(v126 + 20);
      v130 = *(_DWORD *)(v126 + 24);
      v133 = *(_QWORD *)(a2 + 208);
      v132 = *(_QWORD *)(a2 + 216);
      if (v133 >= v132)
      {
        v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133 - (_QWORD)*v125) >> 3);
        v136 = v135 + 1;
        if (v135 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132 - (_QWORD)*v125) >> 3);
        if (2 * v137 > v136)
          v136 = 2 * v137;
        if (v137 >= 0x555555555555555)
          v138 = 0xAAAAAAAAAAAAAAALL;
        else
          v138 = v136;
        if (v138)
          v139 = (char *)sub_1002596A8(a2 + 216, v138);
        else
          v139 = 0;
        v140 = &v139[24 * v135];
        *(_QWORD *)v140 = v129;
        *((_DWORD *)v140 + 2) = v131;
        *((_DWORD *)v140 + 3) = v130;
        v140[16] = v128;
        v142 = *(char **)(a2 + 200);
        v141 = *(char **)(a2 + 208);
        v143 = v140;
        if (v141 != v142)
        {
          do
          {
            v144 = *(_OWORD *)(v141 - 24);
            *(v143 - 8) = *(v141 - 8);
            *(_OWORD *)(v143 - 24) = v144;
            v143 -= 24;
            v141 -= 24;
          }
          while (v141 != v142);
          v141 = *v125;
        }
        v134 = v140 + 24;
        *(_QWORD *)(a2 + 200) = v143;
        *(_QWORD *)(a2 + 208) = v140 + 24;
        *(_QWORD *)(a2 + 216) = &v139[24 * v138];
        if (v141)
          operator delete(v141);
      }
      else
      {
        *(_QWORD *)v133 = v129;
        *(_DWORD *)(v133 + 8) = v131;
        *(_DWORD *)(v133 + 12) = v130;
        v134 = (char *)(v133 + 24);
        *(_BYTE *)(v133 + 16) = v128;
      }
      *(_QWORD *)(a2 + 208) = v134;
      ++v123;
    }
    while (v123 != v124);
  }
  if ((*(_BYTE *)(a1 + 132) & 0x10) != 0)
  {
    v145 = *(_QWORD *)(a1 + 72);
    if (!v145)
      v145 = *(_QWORD *)(qword_102311710 + 72);
    if ((*(_BYTE *)(v145 + 52) & 1) != 0)
      operator new();
    if ((*(_BYTE *)(v145 + 52) & 4) != 0)
      operator new();
    if ((*(_BYTE *)(v145 + 52) & 8) != 0)
      operator new();
    if ((*(_BYTE *)(v145 + 52) & 2) != 0)
      operator new();
    if ((*(_BYTE *)(v145 + 52) & 0x10) != 0)
      operator new();
  }
  if ((*(_BYTE *)(a1 + 132) & 0x80) != 0)
    operator new();
  v146 = *(int *)(a1 + 112);
  if (!(_DWORD)v146)
    return 1;
  v147 = *(uint64_t **)(a1 + 104);
  v148 = &v147[v146];
  v149 = (char **)(a2 + 272);
  v182 = vdupq_n_s64(0x7FF8000000000000uLL);
  while (1)
  {
    v150 = *v147;
    *(_DWORD *)v183 = 0;
    *(_WORD *)&v183[4] = 0;
    v183[6] = 127;
    *(_WORD *)&v183[8] = 0;
    *(int64x2_t *)&v183[16] = v182;
    *(_QWORD *)&v183[32] = 0x7FF8000000000000;
    v151 = *(_DWORD *)(v150 + 36);
    if ((v151 & 1) != 0)
    {
      v152 = *(_QWORD *)(v150 + 8);
      if (!v152)
        v152 = *(_QWORD *)(qword_102311700 + 8);
      result = sub_10010BEF8(v152, (uint64_t)v183);
      if (!(_DWORD)result)
        break;
    }
    if ((v151 & 2) != 0)
    {
      v154 = *(_DWORD *)(v150 + 16);
      v183[8] = 0;
      v155 = v154 - 2;
      if (v155 <= 0xA && ((0x6FFu >> v155) & 1) != 0)
        v183[8] = byte_101CDB85C[v155];
    }
    if ((v151 & 4) != 0)
    {
      v156 = *(_DWORD *)(v150 + 20);
      v183[9] = 0;
      v157 = v156 - 1;
      if (v157 <= 2)
        v183[9] = v157 + 1;
    }
    if ((v151 & 8) != 0)
    {
      v158 = *(_QWORD *)(v150 + 24);
      if (!v158)
        v158 = *(_QWORD *)(qword_102311700 + 24);
      *(_OWORD *)&v183[16] = *(_OWORD *)(v158 + 8);
      *(_QWORD *)&v183[32] = *(_QWORD *)(v158 + 24);
    }
    v159 = *(_QWORD *)(a2 + 280);
    v160 = *(_QWORD *)(a2 + 288);
    if (v159 >= v160)
    {
      v162 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v159 - (_QWORD)*v149) >> 3);
      v163 = v162 + 1;
      if (v162 + 1 > 0x666666666666666)
        sub_100259694();
      v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v160 - (_QWORD)*v149) >> 3);
      if (2 * v164 > v163)
        v163 = 2 * v164;
      if (v164 >= 0x333333333333333)
        v165 = 0x666666666666666;
      else
        v165 = v163;
      if (v165)
        v166 = (char *)sub_100357184(a2 + 288, v165);
      else
        v166 = 0;
      v167 = &v166[40 * v162];
      *(_OWORD *)v167 = *(_OWORD *)v183;
      *((_OWORD *)v167 + 1) = *(_OWORD *)&v183[16];
      *((_QWORD *)v167 + 4) = *(_QWORD *)&v183[32];
      v169 = *(char **)(a2 + 272);
      v168 = *(char **)(a2 + 280);
      v170 = v167;
      if (v168 != v169)
      {
        do
        {
          v171 = *(_OWORD *)(v168 - 40);
          v172 = *(_OWORD *)(v168 - 24);
          *((_QWORD *)v170 - 1) = *((_QWORD *)v168 - 1);
          *(_OWORD *)(v170 - 24) = v172;
          *(_OWORD *)(v170 - 40) = v171;
          v170 -= 40;
          v168 -= 40;
        }
        while (v168 != v169);
        v168 = *v149;
      }
      v161 = v167 + 40;
      *(_QWORD *)(a2 + 272) = v170;
      *(_QWORD *)(a2 + 280) = v167 + 40;
      *(_QWORD *)(a2 + 288) = &v166[40 * v165];
      if (v168)
        operator delete(v168);
    }
    else
    {
      *(_OWORD *)v159 = *(_OWORD *)v183;
      *(_OWORD *)(v159 + 16) = *(_OWORD *)&v183[16];
      *(_QWORD *)(v159 + 32) = *(_QWORD *)&v183[32];
      v161 = (char *)(v159 + 40);
    }
    *(_QWORD *)(a2 + 280) = v161;
    if (++v147 == v148)
      return 1;
  }
  return result;
}

void sub_10010BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_10173DCA0(&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_10010BEF8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 1) != 0)
  {
    v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a2 = 0;
    v4 = (v3 - 1);
    if (v4 <= 0x3F)
    {
      if (((1 << (v3 - 1)) & 0x808B) != 0)
      {
LABEL_4:
        *(_DWORD *)a2 = v3;
        goto LABEL_5;
      }
      if (v4 == 63)
      {
        v3 = 32;
        goto LABEL_4;
      }
    }
  }
LABEL_5:
  if ((v2 & 2) == 0)
    return 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_1023115A0 + 8);
  v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_DWORD *)(v5 + 16);
  }
  else if ((v6 & 0x10) != 0)
  {
    v7 = *(_DWORD *)(v5 + 28);
  }
  else
  {
    if ((v6 & 2) != 0)
    {
      v9 = *(_QWORD *)(v5 + 8);
      if (!v9)
        v9 = *(_QWORD *)(qword_102311598 + 8);
      v10 = *(_DWORD *)(v9 + 24);
      if ((v10 & 1) != 0)
      {
        v11 = *(_DWORD *)(v9 + 16);
        if (v11 != (char)v11)
          return 0;
        *(_BYTE *)(a2 + 6) = v11;
        v10 = *(_DWORD *)(v9 + 24);
      }
      if ((v10 & 2) != 0)
      {
        v12 = *(_QWORD *)(v9 + 8);
        if (!v12)
          v12 = *(_QWORD *)(qword_102311590 + 8);
        v13 = *(_DWORD *)(v12 + 8);
        if (v13 > 0xFF)
          return 0;
        *(_BYTE *)(a2 + 4) = v13;
        v14 = *(_DWORD *)(v12 + 12);
        *(_BYTE *)(a2 + 5) = 0;
        v15 = v14 - 2;
        if (v15 <= 2)
          *(_BYTE *)(a2 + 5) = v15 + 1;
      }
      return 1;
    }
    if ((v6 & 4) != 0)
    {
      v7 = *(_DWORD *)(v5 + 20);
    }
    else if ((v6 & 8) != 0)
    {
      v7 = *(_DWORD *)(v5 + 24);
    }
    else
    {
      if ((v6 & 0x40) == 0)
        return 0;
      v7 = *(_DWORD *)(v5 + 36);
    }
  }
  if (v7 > 0xFF)
    return 0;
  *(_BYTE *)(a2 + 4) = v7;
  return 1;
}

uint64_t sub_10010C034(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1017419CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_10010C0A8(void **a1)
{
  sub_101741B5C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_10010C0D8(uint64_t result)
{
  if ((result - 25) > 0x32 || ((1 << (result - 25)) & 0x4000002000001) == 0)
  {
    if ((_DWORD)result == 10)
      return 10;
    else
      return 0;
  }
  return result;
}

uint64_t *sub_10010C110(uint64_t *result, uint64_t a2, uint64_t **a3)
{
  _QWORD *i;
  uint64_t *j;
  unsigned int *v7;
  unsigned int *k;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;

  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    for (j = (uint64_t *)i[5]; j; j = (uint64_t *)*j)
    {
      j[3] = 0;
      *((_DWORD *)j + 11) = 0;
    }
  }
  v7 = (unsigned int *)result[19];
  for (k = (unsigned int *)result[20]; v7 != k; v7 += 44)
  {
    if (!*((_BYTE *)v7 + 173))
      continue;
    v18 = 0;
    v19 = 0;
    sub_100108D64(v7, &v19, &v18);
    v20 = (int *)&v19;
    v9 = sub_101741BA0(a2, &v19, (uint64_t)&unk_101B9EB60, &v20);
    v10 = v18;
    v17 = v18;
    v20 = (int *)&v17;
    v11 = sub_101741E10((uint64_t)(v9 + 3), (int *)&v17, (uint64_t)&unk_101B9EB60, &v20);
    v20 = (int *)(*v7 | (unint64_t)(v10 << 32));
    result = sub_10174203C(a3, (int *)&v20, (uint64_t *)&v20);
    v11[5] = v10;
    if ((*((_QWORD *)v7 + 12) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)v7 + 13) <= 0.0)
    {
      v13 = *((_QWORD *)v7 + 15);
      if (v13 == -1)
        goto LABEL_15;
      v12 = 0;
      v14 = *((_QWORD *)v7 + 16);
      if (v14 == -1 || v13 > v14)
        goto LABEL_16;
      if ((*((_QWORD *)v7 + 17) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
LABEL_15:
        v12 = 0;
      else
        v12 = *((double *)v7 + 18) > 0.0;
    }
    else
    {
      v12 = 1;
    }
LABEL_16:
    v15 = *((unsigned __int8 *)v7 + 8);
    if (v15 > 0xA || ((1 << v15) & 0x68D) == 0)
    {
      v11[6] = v7[42];
      if (!v12)
        continue;
      v16 = 1;
      goto LABEL_20;
    }
    v11[7] = v7[42];
    if (v12)
    {
      v16 = 2;
LABEL_20:
      v11[11] |= v16;
    }
  }
  return result;
}

void sub_10010C2EC(uint64_t *a1)
{
  sub_10010C310(a1);
  operator delete();
}

void sub_10010C310(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)off_102185A18;
  if ((uint64_t *)qword_102311660 != a1)
  {
    v2 = a1[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_10010C59C(a1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_10010C36C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021859A0;
  sub_10010C3B0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010C3B0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)qword_102311658 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[4];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010C420(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021858B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010C450(uint64_t *a1)
{
  sub_10010C474(a1);
  operator delete();
}

void sub_10010C474(uint64_t *a1)
{
  *a1 = (uint64_t)off_10213A218;
  sub_10010C910(a1);
  sub_10010C59C(a1 + 36);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_10010C4B0(uint64_t *a1)
{
  sub_10010C4D4(a1);
  operator delete();
}

void sub_10010C4D4(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_102186468;
  v2 = a1 + 13;
  sub_10010C85C(a1);
  sub_10010C59C(v2);
  sub_10010C59C(a1 + 6);
  sub_10010C59C(a1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_10010C52C(uint64_t *a1)
{
  sub_10010C550(a1);
  operator delete();
}

void sub_10010C550(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_102185C70;
  v2 = a1 + 13;
  sub_10010C6E8(a1);
  sub_10010C59C(v2);
  sub_10010C59C(a1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

uint64_t sub_10010C59C(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    operator delete[]();
  return result;
}

void sub_10010C614(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010C638(a1);
  operator delete();
}

void sub_10010C638(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102185B80;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311678 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10010C688(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185A90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010C6B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185B08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010C6E8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311688 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[16];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010C744(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010C768(a1);
  operator delete();
}

void sub_10010C768(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102184ED8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023115A0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10010C7B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010C7DC(a1);
  operator delete();
}

void sub_10010C7DC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102184E60;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102311598 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10010C82C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185CE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010C85C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((_QWORD *)qword_102311710 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[9];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = (_QWORD *)v1[12];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010C8E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186288;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010C910(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((_QWORD *)qword_102310628 != result)
  {
    v1 = result;
    v2 = result[8];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[11];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[13];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[17];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[26];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = (_QWORD *)v1[40];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010C9BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102139F48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010C9EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186210;
  sub_10010CA30(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010CA30(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((_QWORD *)qword_1023116E8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010CAC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185838;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CAF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021863F0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CB28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185FB8;
  sub_10010CB6C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010CB6C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_1023116C0 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010CBC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185F40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CBF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186120;
  sub_10010CC3C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010CC3C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)qword_1023116D8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010CCAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A0B0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CCDC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A038;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CD0C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021860A8;
  sub_10010CD50(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010CD50(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((_QWORD *)qword_1023116D0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010CDE8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102186198;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023116E0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10010CE38(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102186030;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CE68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010CDE8(a1);
  operator delete();
}

void sub_10010CE8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185EC8;
  sub_10010CF00(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_10010CED0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102185E50;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10010CF00(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_1023116B0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10010CF5C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10010CF80(a1);
  operator delete();
}

void sub_10010CF80(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_102185DD8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023116A0 != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

int64x2_t *sub_10010CFD0(int64x2_t *result, int a2)
{
  if ((a2 & 0x18) != 0)
    result[41] = vaddq_s64(result[41], vdupq_n_s64(1uLL));
  if ((a2 & 0x20) != 0)
  {
    ++result[44].i64[1];
    if ((a2 & 0x40) == 0)
    {
LABEL_5:
      if ((a2 & 0x80) == 0)
        goto LABEL_6;
      goto LABEL_19;
    }
  }
  else if ((a2 & 0x40) == 0)
  {
    goto LABEL_5;
  }
  ++result[44].i64[0];
  if ((a2 & 0x80) == 0)
  {
LABEL_6:
    if ((a2 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  ++result[43].i64[1];
  if ((a2 & 0x100) == 0)
  {
LABEL_7:
    if ((a2 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  ++result[43].i64[0];
  if ((a2 & 0x200) == 0)
  {
LABEL_8:
    if ((a2 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  ++result[42].i64[0];
  if ((a2 & 0x400) == 0)
  {
LABEL_9:
    if ((a2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  ++result[46].i64[0];
  if ((a2 & 0x800) == 0)
  {
LABEL_10:
    if ((a2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  ++result[49].i64[1];
  if ((a2 & 0x1000) == 0)
  {
LABEL_11:
    if ((a2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  ++result[49].i64[0];
  if ((a2 & 4) == 0)
  {
LABEL_12:
    if ((a2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  ++result[46].i64[1];
  if ((a2 & 0x2000) == 0)
  {
LABEL_13:
    if ((a2 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  ++result[47].i64[1];
  if ((a2 & 0x40000) == 0)
  {
LABEL_14:
    if ((a2 & 0x80000) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  ++result[48].i64[0];
  if ((a2 & 0x80000) == 0)
  {
LABEL_15:
    if ((a2 & 0x4000) == 0)
      return result;
LABEL_29:
    ++result[45].i64[1];
    return result;
  }
LABEL_28:
  ++result[48].i64[1];
  if ((a2 & 0x4000) != 0)
    goto LABEL_29;
  return result;
}

uint64_t sub_10010D0F4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t result;

  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 824) = sub_10010E71C(a2 + 40);
  sub_10010E77C(*(_QWORD *)a1 + 8, a2);
  v4 = *(_DWORD **)(a1 + 1184);
  if (v4)
    sub_10010D168(v4, a2);
  result = *(_QWORD *)(a1 + 392);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

void sub_10010D168(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t **v6;
  uint64_t **v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23[2];
  unint64_t *v24;

  v23[0] = 0;
  v23[1] = 0;
  v22 = (uint64_t *)v23;
  v4 = *(_QWORD *)(a2 + 152);
  for (i = *(_QWORD *)(a2 + 160); v4 != i; v4 += 176)
  {
    if (*(_BYTE *)(v4 + 173))
    {
      v21 = sub_10174F9B4(*(unsigned __int8 *)(v4 + 8), *(_DWORD *)v4);
      if ((v21 & 0xFF00000000) != 0)
      {
        v24 = &v21;
        v6 = sub_1000BC378(&v22, (int *)&v21, (uint64_t)&unk_101B9EB60, (_DWORD **)&v24);
        v7 = v6;
        v8 = (char *)v6[6];
        v9 = (uint64_t)(v6 + 7);
        v10 = v6[7];
        if (v8 >= (char *)v10)
        {
          v12 = v6[5];
          v13 = (v8 - (char *)v12) >> 2;
          if ((unint64_t)(v13 + 1) >> 62)
            sub_100259694();
          v14 = (char *)v10 - (char *)v12;
          v15 = ((char *)v10 - (char *)v12) >> 1;
          if (v15 <= v13 + 1)
            v15 = v13 + 1;
          if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
          {
            v17 = (char *)sub_100260634(v9, v16);
            v12 = v7[5];
            v8 = (char *)v7[6];
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = *(_DWORD *)(v4 + 168);
          v11 = (uint64_t *)(v18 + 4);
          while (v8 != (char *)v12)
          {
            v19 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          v7[5] = (uint64_t *)v18;
          v7[6] = v11;
          v7[7] = (uint64_t *)&v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v8 = *(_DWORD *)(v4 + 168);
          v11 = (uint64_t *)(v8 + 4);
        }
        v7[6] = v11;
        sub_10174FE80(a1, v4, v21);
      }
    }
  }
  sub_10010D3A0((uint64_t)a1, &v22);
  if (*(_BYTE *)(a2 + 81))
    v20 = *(_BYTE *)(a2 + 80) == 0;
  else
    v20 = 1;
  if (!v20)
    ++a1[601];
  sub_10010D350((uint64_t)&v22, v23[0]);
}

void sub_10010D330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10010D350((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_10010D350(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_10010D350(a1, *a2);
    sub_10010D350(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_10010D3A0(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t **v3;
  float *v4;
  float *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  int *v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  NSObject *v23;
  uint64_t *v24;
  float v25;
  double v26;
  uint64_t *v27;
  uint64_t *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t *v38;
  float v39;
  uint64_t *v40;
  float v41;
  uint64_t *v42;
  float v43;
  uint64_t *v44;
  float v45;
  uint64_t *v46;
  uint64_t *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  double v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t i;
  uint64_t **v69;
  uint64_t **v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t **v74;
  int *v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t **v78;
  uint64_t **v79;
  uint64_t j;
  uint64_t *v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t **v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  uint64_t *v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  float *v109;
  double v110;
  float v111;
  int v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  float v117;
  double v118;
  uint64_t *v119;
  uint64_t *v120;
  float v121;
  float v122;
  float v123;
  float v124;
  uint64_t *v125;
  float v126;
  float v127;
  float v128;
  float v129;
  uint64_t *v130;
  float v131;
  uint64_t *v132;
  float v133;
  uint64_t *v134;
  float v135;
  uint64_t *v136;
  float v137;
  uint64_t *v138;
  uint64_t *v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  double v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  const char *v159;
  char *v160;
  uint64_t v161;
  float v162;
  float v163;
  uint64_t v164;
  float v165;
  float v166;
  uint64_t v167;
  float v168;
  float v169;
  uint64_t v170;
  float v171;
  float v172;
  uint64_t v173;
  float v174;
  float v175;
  uint64_t v176;
  float v177;
  float v178;
  uint64_t v179;
  float v180;
  float v181;
  uint64_t v182;
  float v183;
  float v184;
  uint64_t v185;
  float v186;
  uint64_t **v187;
  uint64_t **v188;
  uint64_t **v189;
  uint64_t *v192;
  _QWORD *v193[2];
  int v194;
  uint64_t *v195;
  __int16 v196;
  double v197;
  __int16 v198;
  double v199;
  __int16 v200;
  double v201;
  __int16 v202;
  double v203;
  __int16 v204;
  double v205;
  __int16 v206;
  uint64_t *v207;
  __int16 v208;
  double v209;
  __int16 v210;
  double v211;
  __int16 v212;
  double v213;
  __int16 v214;
  double v215;
  __int16 v216;
  double v217;
  __int16 v218;
  uint64_t *v219;
  __int16 v220;
  double v221;
  __int16 v222;
  double v223;
  __int16 v224;
  double v225;
  __int16 v226;
  double v227;
  __int16 v228;
  double v229;
  __int16 v230;
  uint64_t *v231;
  __int16 v232;
  double v233;
  __int16 v234;
  double v235;
  __int16 v236;
  double v237;
  __int16 v238;
  double v239;
  __int16 v240;
  double v241;
  __int16 v242;
  uint64_t *v243;
  __int16 v244;
  double v245;
  __int16 v246;
  double v247;
  __int16 v248;
  double v249;
  __int16 v250;
  double v251;
  __int16 v252;
  double v253;
  __int16 v254;
  uint64_t *v255;
  __int16 v256;
  double v257;
  __int16 v258;
  double v259;
  __int16 v260;
  double v261;
  __int16 v262;
  double v263;
  __int16 v264;
  double v265;
  __int16 v266;
  uint64_t *v267;
  __int16 v268;
  double v269;
  __int16 v270;
  double v271;
  __int16 v272;
  double v273;
  __int16 v274;
  double v275;
  __int16 v276;
  double v277;
  __int16 v278;
  uint64_t *v279;
  __int16 v280;
  double v281;
  __int16 v282;
  double v283;
  __int16 v284;
  double v285;
  __int16 v286;
  double v287;
  __int16 v288;
  double v289;
  __int16 v290;
  uint64_t *v291;
  __int16 v292;
  double v293;
  __int16 v294;
  double v295;
  __int16 v296;
  double v297;
  __int16 v298;
  double v299;
  __int16 v300;
  double v301;
  __int16 v302;
  uint64_t *v303;
  __int16 v304;
  double v305;
  __int16 v306;
  double v307;
  __int16 v308;
  double v309;
  __int16 v310;
  double v311;
  __int16 v312;
  double v313;
  _BYTE buf[22];
  __int16 v315;
  double v316;
  __int16 v317;
  double v318;
  __int16 v319;
  double v320;
  __int16 v321;
  double v322;
  __int16 v323;
  uint64_t *v324;
  __int16 v325;
  double v326;
  __int16 v327;
  double v328;
  __int16 v329;
  double v330;
  __int16 v331;
  double v332;
  __int16 v333;
  double v334;
  __int16 v335;
  uint64_t *v336;
  __int16 v337;
  double v338;
  __int16 v339;
  double v340;
  __int16 v341;
  double v342;
  __int16 v343;
  double v344;
  __int16 v345;
  double v346;
  __int16 v347;
  uint64_t *v348;
  __int16 v349;
  double v350;
  __int16 v351;
  double v352;
  __int16 v353;
  double v354;
  __int16 v355;
  double v356;
  __int16 v357;
  double v358;
  __int16 v359;
  uint64_t *v360;
  __int16 v361;
  double v362;
  __int16 v363;
  double v364;
  __int16 v365;
  double v366;
  __int16 v367;
  double v368;
  __int16 v369;
  double v370;
  __int16 v371;
  uint64_t *v372;
  __int16 v373;
  double v374;
  __int16 v375;
  double v376;
  __int16 v377;
  double v378;
  __int16 v379;
  double v380;
  __int16 v381;
  double v382;
  __int16 v383;
  uint64_t *v384;
  __int16 v385;
  double v386;
  __int16 v387;
  double v388;
  __int16 v389;
  double v390;
  __int16 v391;
  double v392;
  __int16 v393;
  double v394;
  __int16 v395;
  uint64_t *v396;
  __int16 v397;
  double v398;
  __int16 v399;
  double v400;
  __int16 v401;
  double v402;
  __int16 v403;
  double v404;
  __int16 v405;
  double v406;
  __int16 v407;
  uint64_t *v408;
  __int16 v409;
  double v410;
  __int16 v411;
  double v412;
  __int16 v413;
  double v414;
  __int16 v415;
  double v416;
  __int16 v417;
  double v418;
  __int16 v419;
  uint64_t *v420;
  __int16 v421;
  double v422;
  __int16 v423;
  double v424;
  __int16 v425;
  double v426;
  __int16 v427;
  double v428;
  __int16 v429;
  double v430;

  v193[0] = 0;
  v193[1] = 0;
  v192 = (uint64_t *)v193;
  v3 = a2 + 1;
  v2 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      v4 = (float *)v2[5];
      v5 = (float *)v2[6];
      v6 = 126 - 2 * __clz(v5 - v4);
      if (v5 == v4)
        v7 = 0;
      else
        v7 = v6;
      sub_100393534(v4, v5, (uint64_t)buf, v7, 1);
      v8 = sub_10010E3D4(&v192, (int *)v2 + 8);
      v9 = (int *)v2[5];
      v10 = (v2[6] - (uint64_t)v9) >> 2;
      *v8 = (uint64_t *)v10;
      if (v10 >= 5)
        v10 = 5;
      if (v10)
      {
        v11 = v8 + 1;
        do
        {
          v12 = *v9++;
          *v11++ = v12;
          --v10;
        }
        while (v10);
      }
      v13 = (uint64_t *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != (uint64_t *)v3);
  }
  *(_DWORD *)buf = 0;
  v16 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 1;
  v189 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 4;
  v188 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 2;
  v187 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 3;
  v17 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 5;
  v18 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 6;
  v19 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 7;
  v20 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 8;
  v21 = sub_10010E3D4(&v192, (int *)buf);
  *(_DWORD *)buf = 9;
  v22 = sub_10010E3D4(&v192, (int *)buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v23 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *v16;
    v25 = *((float *)v16 + 3);
    v26 = *((float *)v16 + 2);
    v186 = *((float *)v16 + 4);
    v183 = *((float *)v16 + 5);
    v27 = *v189;
    v177 = *((float *)v189 + 3);
    v168 = *((float *)v189 + 4);
    v169 = *((float *)v189 + 2);
    v28 = *v188;
    v29 = *((float *)v188 + 2);
    v30 = *((float *)v188 + 3);
    v31 = *((float *)v188 + 4);
    v32 = *((float *)v188 + 5);
    v33 = *v187;
    v34 = *((float *)v187 + 2);
    v35 = *((float *)v187 + 3);
    v36 = *((float *)v187 + 4);
    v37 = *((float *)v187 + 5);
    v38 = *v17;
    v39 = *((float *)v17 + 2);
    v165 = *((float *)v17 + 3);
    v166 = *((float *)v189 + 5);
    v162 = *((float *)v17 + 5);
    v163 = *((float *)v17 + 4);
    v40 = *v18;
    v41 = *((float *)v18 + 2);
    v174 = *((float *)v18 + 4);
    v175 = *((float *)v18 + 3);
    v42 = *v19;
    v43 = *((float *)v19 + 2);
    v180 = *((float *)v19 + 4);
    v181 = *((float *)v19 + 3);
    v178 = *((float *)v19 + 5);
    v44 = *v20;
    v171 = *((float *)v20 + 2);
    v172 = *((float *)v18 + 5);
    v45 = *((float *)v20 + 4);
    v184 = *((float *)v20 + 3);
    v46 = *v21;
    v47 = *v22;
    *(_DWORD *)buf = 134364160;
    v49 = *((float *)v20 + 5);
    v48 = *((float *)v20 + 6);
    v50 = *((float *)v21 + 2);
    v51 = *((float *)v21 + 3);
    v52 = *((float *)v21 + 4);
    v53 = *((float *)v21 + 5);
    v54 = *((float *)v22 + 2);
    v55 = *((float *)v22 + 3);
    v57 = *((float *)v22 + 4);
    v56 = *((float *)v22 + 5);
    *(double *)&buf[14] = v26;
    v58 = v25;
    v59 = *((float *)v16 + 6);
    v60 = *((float *)v189 + 6);
    v61 = *((float *)v188 + 6);
    v62 = *((float *)v187 + 6);
    v63 = *((float *)v17 + 6);
    v64 = *((float *)v18 + 6);
    v65 = *((float *)v19 + 6);
    LODWORD(v26) = *((_DWORD *)v21 + 6);
    v66 = *((float *)v22 + 6);
    v316 = v58;
    v318 = v186;
    v320 = v183;
    v322 = v59;
    v326 = v169;
    v328 = v177;
    v330 = v168;
    v332 = v166;
    v334 = v60;
    v338 = v29;
    v340 = v30;
    v342 = v31;
    v344 = v32;
    v346 = v61;
    v350 = v34;
    v352 = v35;
    v354 = v36;
    v356 = v37;
    v358 = v62;
    v362 = v39;
    v364 = v165;
    v366 = v163;
    v368 = v162;
    v370 = v63;
    v374 = v41;
    v376 = v175;
    v378 = v174;
    v380 = v172;
    v382 = v64;
    v386 = v43;
    v388 = v181;
    v390 = v180;
    v392 = v178;
    v394 = v65;
    v398 = v171;
    v400 = v184;
    v402 = v45;
    v404 = v49;
    v406 = v48;
    v410 = v50;
    v412 = v51;
    v414 = v52;
    v416 = v53;
    v418 = *(float *)&v26;
    v422 = v54;
    v424 = v55;
    v426 = v57;
    v428 = v56;
    v430 = v66;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2050;
    v315 = 2050;
    v317 = 2050;
    v319 = 2050;
    v321 = 2050;
    v323 = 2050;
    v324 = v27;
    v325 = 2050;
    v327 = 2050;
    v329 = 2050;
    v331 = 2050;
    v333 = 2050;
    v335 = 2050;
    v336 = v28;
    v337 = 2050;
    v339 = 2050;
    v341 = 2050;
    v343 = 2050;
    v345 = 2050;
    v347 = 2050;
    v348 = v33;
    v349 = 2050;
    v351 = 2050;
    v353 = 2050;
    v355 = 2050;
    v357 = 2050;
    v359 = 2050;
    v360 = v38;
    v361 = 2050;
    v363 = 2050;
    v365 = 2050;
    v367 = 2050;
    v369 = 2050;
    v371 = 2050;
    v372 = v40;
    v373 = 2050;
    v375 = 2050;
    v377 = 2050;
    v379 = 2050;
    v381 = 2050;
    v383 = 2050;
    v384 = v42;
    v385 = 2050;
    v387 = 2050;
    v389 = 2050;
    v391 = 2050;
    v393 = 2050;
    v395 = 2050;
    v396 = v44;
    v397 = 2050;
    v399 = 2050;
    v401 = 2050;
    v403 = 2050;
    v405 = 2050;
    v407 = 2050;
    v408 = v46;
    v409 = 2050;
    v411 = 2050;
    v413 = 2050;
    v415 = 2050;
    v417 = 2050;
    v419 = 2050;
    v420 = v47;
    v421 = 2050;
    v423 = 2050;
    v425 = 2050;
    v427 = 2050;
    v429 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#track_status,L1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,G1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,L5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E5a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B2a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,NL5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f", buf, 0x25Au);
  }
  v67 = a1;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v116 = *v16;
    v117 = *((float *)v16 + 3);
    v118 = *((float *)v16 + 2);
    HIDWORD(v185) = *((_DWORD *)v16 + 4);
    HIDWORD(v182) = *((_DWORD *)v16 + 5);
    v119 = *v189;
    HIDWORD(v176) = *((_DWORD *)v189 + 3);
    HIDWORD(v167) = *((_DWORD *)v189 + 4);
    LODWORD(v170) = *((_DWORD *)v189 + 2);
    v120 = *v188;
    v121 = *((float *)v188 + 2);
    v122 = *((float *)v188 + 3);
    v123 = *((float *)v188 + 4);
    v124 = *((float *)v188 + 5);
    v125 = *v187;
    v126 = *((float *)v187 + 2);
    v127 = *((float *)v187 + 3);
    v128 = *((float *)v187 + 4);
    v129 = *((float *)v187 + 5);
    v130 = *v17;
    v131 = *((float *)v17 + 2);
    HIDWORD(v164) = *((_DWORD *)v17 + 3);
    LODWORD(v167) = *((_DWORD *)v189 + 5);
    HIDWORD(v161) = *((_DWORD *)v17 + 5);
    LODWORD(v164) = *((_DWORD *)v17 + 4);
    v132 = *v18;
    v133 = *((float *)v18 + 2);
    HIDWORD(v173) = *((_DWORD *)v18 + 4);
    LODWORD(v176) = *((_DWORD *)v18 + 3);
    v134 = *v19;
    v135 = *((float *)v19 + 2);
    HIDWORD(v179) = *((_DWORD *)v19 + 4);
    LODWORD(v182) = *((_DWORD *)v19 + 3);
    LODWORD(v179) = *((_DWORD *)v19 + 5);
    v136 = *v20;
    HIDWORD(v170) = *((_DWORD *)v20 + 2);
    LODWORD(v173) = *((_DWORD *)v18 + 5);
    v137 = *((float *)v20 + 4);
    LODWORD(v185) = *((_DWORD *)v20 + 3);
    v138 = *v21;
    v139 = *v22;
    v194 = 134364160;
    v141 = *((float *)v20 + 5);
    v140 = *((float *)v20 + 6);
    v142 = *((float *)v21 + 2);
    v143 = *((float *)v21 + 3);
    v144 = *((float *)v21 + 4);
    v145 = *((float *)v21 + 5);
    v146 = *((float *)v22 + 2);
    v147 = *((float *)v22 + 3);
    v149 = *((float *)v22 + 4);
    v148 = *((float *)v22 + 5);
    v197 = v118;
    v150 = v117;
    v151 = *((float *)v16 + 6);
    v152 = *((float *)v189 + 6);
    v153 = *((float *)v188 + 6);
    v154 = *((float *)v187 + 6);
    v155 = *((float *)v17 + 6);
    v156 = *((float *)v18 + 6);
    v157 = *((float *)v19 + 6);
    LODWORD(v118) = *((_DWORD *)v21 + 6);
    v158 = *((float *)v22 + 6);
    v199 = v150;
    v201 = *((float *)&v185 + 1);
    v203 = *((float *)&v182 + 1);
    v205 = v151;
    v209 = *(float *)&v170;
    v211 = *((float *)&v176 + 1);
    v213 = *((float *)&v167 + 1);
    v215 = *(float *)&v167;
    v217 = v152;
    v221 = v121;
    v223 = v122;
    v225 = v123;
    v227 = v124;
    v229 = v153;
    v233 = v126;
    v235 = v127;
    v237 = v128;
    v239 = v129;
    v241 = v154;
    v245 = v131;
    v247 = *((float *)&v164 + 1);
    v249 = *(float *)&v164;
    v251 = *((float *)&v161 + 1);
    v253 = v155;
    v257 = v133;
    v259 = *(float *)&v176;
    v261 = *((float *)&v173 + 1);
    v263 = *(float *)&v173;
    v265 = v156;
    v269 = v135;
    v271 = *(float *)&v182;
    v273 = *((float *)&v179 + 1);
    v275 = *(float *)&v179;
    v277 = v157;
    v281 = *((float *)&v170 + 1);
    v283 = *(float *)&v185;
    v285 = v137;
    v287 = v141;
    v289 = v140;
    v293 = v142;
    v295 = v143;
    v297 = v144;
    v299 = v145;
    v301 = *(float *)&v118;
    v305 = v146;
    v307 = v147;
    v309 = v149;
    v311 = v148;
    v313 = v158;
    v195 = v116;
    v196 = 2050;
    v198 = 2050;
    v200 = 2050;
    v202 = 2050;
    v204 = 2050;
    v206 = 2050;
    v207 = v119;
    v208 = 2050;
    v210 = 2050;
    v212 = 2050;
    v214 = 2050;
    v216 = 2050;
    v218 = 2050;
    v219 = v120;
    v220 = 2050;
    v222 = 2050;
    v224 = 2050;
    v226 = 2050;
    v228 = 2050;
    v230 = 2050;
    v231 = v125;
    v232 = 2050;
    v234 = 2050;
    v236 = 2050;
    v238 = 2050;
    v240 = 2050;
    v242 = 2050;
    v243 = v130;
    v244 = 2050;
    v246 = 2050;
    v248 = 2050;
    v250 = 2050;
    v252 = 2050;
    v254 = 2050;
    v255 = v132;
    v256 = 2050;
    v258 = 2050;
    v260 = 2050;
    v262 = 2050;
    v264 = 2050;
    v266 = 2050;
    v267 = v134;
    v268 = 2050;
    v270 = 2050;
    v272 = 2050;
    v274 = 2050;
    v276 = 2050;
    v278 = 2050;
    v279 = v136;
    v280 = 2050;
    v282 = 2050;
    v284 = 2050;
    v286 = 2050;
    v288 = 2050;
    v290 = 2050;
    v291 = v138;
    v292 = 2050;
    v294 = 2050;
    v296 = 2050;
    v298 = 2050;
    v300 = 2050;
    v302 = 2050;
    v303 = v139;
    v304 = 2050;
    v306 = 2050;
    v308 = 2050;
    v310 = 2050;
    v312 = 2050;
    LODWORD(v161) = 602;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#track_status,L1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,G1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B1,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,L5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,Q5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,E5a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,B2a,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,NL5,count,%{public}zu,cn0,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f", &v194, v161, v164, v167,
      v170,
      v173,
      v176,
      v179,
      v182,
      v185);
    v160 = (char *)v159;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCn0AndSignalCountSessionStats(MapSignalTypeToCn0Vector &)", "%s\n", v159);
    v67 = a1;
    if (v160 != buf)
      free(v160);
  }
  if (*(_BYTE *)(v67 + 2368))
  {
    for (i = 0; i != 40; i += 4)
    {
      *(_QWORD *)buf = (char *)&unk_101CDB9D0 + i;
      v69 = sub_10010E650((uint64_t **)(v67 + 312), (int *)((char *)&unk_101CDB9D0 + i), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      *(_QWORD *)buf = (char *)&unk_101CDB9D0 + i;
      v70 = sub_1000BC378(a2, (int *)((char *)&unk_101CDB9D0 + i), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v71 = (char *)v70[6] - (char *)v70[5];
      if (v71 < 0x34)
        v72 = 6;
      else
        v72 = 7;
      if (v71 < 0x24)
        v72 = 5;
      if (v71 >= 0x14)
        v73 = v72;
      else
        v73 = v71 >> 2;
      v194 = v73;
      *(_QWORD *)buf = &v194;
      v74 = sub_100041CE0(v69 + 5, &v194, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v74[5] = (uint64_t *)((char *)v74[5] + 1);
    }
    v75 = (int *)&unk_101CDB9D0;
    do
    {
      *(_QWORD *)buf = v75;
      v76 = sub_10010E650((uint64_t **)(a1 + 336), v75, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v77 = sub_10010E3D4(&v192, v75);
      v78 = v77;
      v79 = v76 + 5;
      for (j = 8; j != 28; j += 4)
      {
        if (*(float *)((char *)v78 + j) > 0.0)
        {
          v194 = sub_10174FFC8((uint64_t)v77, (float *)((char *)v78 + j));
          *(_QWORD *)buf = &v194;
          v77 = sub_100041CE0(v79, &v194, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          v77[5] = (uint64_t *)((char *)v77[5] + 1);
        }
      }
      ++v75;
    }
    while (v75 != (int *)&xmmword_101CDB9F8);
    v81 = *a2;
    if (*a2 != (uint64_t *)v3)
    {
      v82 = (uint64_t **)(a1 + 1216);
      v83 = (uint64_t *)(a1 + 1224);
      v84 = (uint64_t **)(a1 + 1264);
      do
      {
        v85 = *((_DWORD *)v81 + 8);
        v86 = *v83;
        if (!*v83)
          goto LABEL_50;
        v87 = a1 + 1224;
        do
        {
          v88 = *(_DWORD *)(v86 + 32);
          v89 = v88 < v85;
          if (v88 >= v85)
            v90 = (uint64_t *)v86;
          else
            v90 = (uint64_t *)(v86 + 8);
          if (!v89)
            v87 = v86;
          v86 = *v90;
        }
        while (*v90);
        if ((uint64_t *)v87 == v83 || v85 < *(_DWORD *)(v87 + 32))
        {
LABEL_50:
          *(_DWORD *)buf = *((_DWORD *)v81 + 8);
          *(_QWORD *)&buf[8] = 0;
          sub_10010E53C(v82, (int *)buf, (uint64_t)buf);
          *(_DWORD *)buf = *((_DWORD *)v81 + 8);
          *(_DWORD *)&buf[4] = 0;
          sub_10010E484(v84, (int *)buf, (uint64_t *)buf);
        }
        v91 = *(double *)sub_1000B5C9C((uint64_t)v82, (int *)v81 + 8);
        v93 = v81[5];
        v92 = v81[6];
        v94 = *(_DWORD *)sub_10010E5FC((uint64_t)v84, (int *)v81 + 8);
        *(double *)sub_1000B5C9C((uint64_t)v82, (int *)v81 + 8) = ((double)(unint64_t)((v92 - v93) >> 2)
                                                                + v91 * (double)v94)
                                                               / (double)(v94 + 1);
        v95 = sub_10010E5FC((uint64_t)v84, (int *)v81 + 8);
        ++*(_DWORD *)v95;
        v96 = (uint64_t *)v81[1];
        if (v96)
        {
          do
          {
            v97 = v96;
            v96 = (uint64_t *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            v97 = (uint64_t *)v81[2];
            v15 = *v97 == (_QWORD)v81;
            v81 = v97;
          }
          while (!v15);
        }
        v81 = v97;
      }
      while (v97 != (uint64_t *)v3);
    }
    v98 = v192;
    if (v192 != (uint64_t *)v193)
    {
      v99 = (uint64_t **)(a1 + 1192);
      v100 = (uint64_t *)(a1 + 1200);
      v101 = (uint64_t **)(a1 + 1240);
      do
      {
        v102 = *((_DWORD *)v98 + 8);
        v103 = *v100;
        if (!*v100)
          goto LABEL_69;
        v104 = a1 + 1200;
        do
        {
          v105 = *(_DWORD *)(v103 + 32);
          v106 = v105 < v102;
          if (v105 >= v102)
            v107 = (uint64_t *)v103;
          else
            v107 = (uint64_t *)(v103 + 8);
          if (!v106)
            v104 = v103;
          v103 = *v107;
        }
        while (*v107);
        if ((uint64_t *)v104 == v100 || v102 < *(_DWORD *)(v104 + 32))
        {
LABEL_69:
          *(_DWORD *)buf = *((_DWORD *)v98 + 8);
          *(_QWORD *)&buf[8] = 0;
          sub_10010E53C(v99, (int *)buf, (uint64_t)buf);
          *(_DWORD *)buf = *((_DWORD *)v98 + 8);
          *(_DWORD *)&buf[4] = 0;
          sub_10010E484(v101, (int *)buf, (uint64_t *)buf);
        }
        if ((unint64_t)v98[5] >= 5)
          v108 = 5;
        else
          v108 = v98[5];
        if (v108)
        {
          v109 = (float *)(v98 + 6);
          do
          {
            v110 = *(double *)sub_1000B5C9C((uint64_t)v99, (int *)v98 + 8);
            v111 = *v109;
            v112 = *(_DWORD *)sub_10010E5FC((uint64_t)v101, (int *)v98 + 8);
            *(double *)sub_1000B5C9C((uint64_t)v99, (int *)v98 + 8) = (v111 + v110 * (double)v112) / (double)(v112 + 1);
            v113 = sub_10010E5FC((uint64_t)v101, (int *)v98 + 8);
            ++*(_DWORD *)v113;
            ++v109;
            --v108;
          }
          while (v108);
        }
        v114 = (uint64_t *)v98[1];
        if (v114)
        {
          do
          {
            v115 = v114;
            v114 = (uint64_t *)*v114;
          }
          while (v114);
        }
        else
        {
          do
          {
            v115 = (uint64_t *)v98[2];
            v15 = *v115 == (_QWORD)v98;
            v98 = v115;
          }
          while (!v15);
        }
        v98 = v115;
      }
      while (v115 != (uint64_t *)v193);
    }
  }
  sub_10010E39C(v193[0]);
}

void sub_10010E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  sub_10010E39C(a26);
  _Unwind_Resume(a1);
}

void sub_10010E39C(_QWORD *a1)
{
  if (a1)
  {
    sub_10010E39C(*a1);
    sub_10010E39C(a1[1]);
    operator delete(a1);
  }
}

uint64_t **sub_10010E3D4(uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  char *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (char *)operator new(0x48uLL);
    *((_DWORD *)v8 + 8) = v5;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    sub_1000145B0(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t *sub_10010E484(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **sub_10010E53C(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  _DWORD *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 8);
    sub_1000145B0(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_10010E5FC(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_100263950("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t **sub_10010E650(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10010E71C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  if (v1 == v2)
  {
    v3 = 0;
    return v3 != 0;
  }
  v3 = 0;
  do
  {
    v3 += *(unsigned __int8 *)(v1 + 173);
    v1 += 176;
  }
  while (v1 != v2);
  if (v3 > 4)
    return 4;
  if (v3 == 4)
    return 3;
  if (v3 <= 2)
    return v3 != 0;
  return 2;
}

uint64_t sub_10010E77C(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v2 = *(_BYTE **)(a2 + 152);
  v3 = *(_BYTE **)(a2 + 160);
  if (v2 != v3)
  {
    v4 = ((*(double *)(a2 + 16) - *(double *)(result + 80)) * 1000.0);
    do
    {
      switch(v2[8])
      {
        case 1:
          if (*(_DWORD *)result)
            v7 = 1;
          else
            v7 = v2[9] == 0;
          if (!v7)
            *(_DWORD *)result = v4;
          if (*(_DWORD *)(result + 16))
            v8 = 1;
          else
            v8 = v2[12] == 0;
          if (!v8)
            *(_DWORD *)(result + 16) = v4;
          break;
        case 4:
          if (*(_DWORD *)(result + 4))
            v9 = 1;
          else
            v9 = v2[9] == 0;
          if (!v9)
            *(_DWORD *)(result + 4) = v4;
          if (*(_DWORD *)(result + 20))
            v10 = 1;
          else
            v10 = v2[13] == 0;
          if (!v10)
            *(_DWORD *)(result + 20) = v4;
          break;
        case 5:
        case 6:
          if (*(_DWORD *)(result + 12))
            v5 = 1;
          else
            v5 = v2[9] == 0;
          if (!v5)
            *(_DWORD *)(result + 12) = v4;
          if (*(_DWORD *)(result + 28))
            v6 = 1;
          else
            v6 = v2[12] == 0;
          if (!v6)
            *(_DWORD *)(result + 28) = v4;
          break;
        case 8:
          if (*(_DWORD *)(result + 8))
            v11 = 1;
          else
            v11 = v2[9] == 0;
          if (!v11)
            *(_DWORD *)(result + 8) = v4;
          if (*(_DWORD *)(result + 24))
            v12 = 1;
          else
            v12 = v2[12] == 0;
          if (!v12)
            *(_DWORD *)(result + 24) = v4;
          break;
        default:
          break;
      }
      v2 += 176;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_10010E8A8(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::EstimationTechnology", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::EstimationTechnology", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::EstimationTechnology ProtobufUtil::fromProtobuf(proto::gnss::EstimationTechnology)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

BOOL sub_10010EA68(uint64_t a1, double *a2, double *a3)
{
  NSObject *v7;
  char *v8;
  __int16 v9;
  double v10;
  uint8_t buf[1640];

  v10 = 0.0;
  if (sub_10010F630(a1, &v10))
  {
    *a3 = *a2 + v10;
    return sub_10010EFA0(a1, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between CF time and mach time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v9 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,Failed in getting the offset between CF time and mach time", &v9, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToCFAbsolute_RealTime(const CFTimeInterval &, CFAbsoluteTime &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return 0;
  }
}

BOOL sub_10010EC50(uint64_t a1, double a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  double v7;
  NSObject *v8;
  NSObject *v10;
  char *v11;
  char *v12;
  _WORD v13[8];
  double v14[2];
  unint64_t v15;
  double v16;
  uint8_t buf[1640];

  v16 = a2;
  if (!a1)
    return 0;
  *(_DWORD *)(a1 + 36) |= 1u;
  *(double *)(a1 + 8) = a2;
  v15 = 0xBFF0000000000000;
  v3 = sub_10010F194();
  if (!sub_10010F24C(v3, &v16, (double *)&v15))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213E5B0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "fromCFAbsoluteTime, convertCFAbsoluteToMachAbsolute_RealTime failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213E5B0);
      LOWORD(v14[0]) = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "fromCFAbsoluteTime, convertCFAbsoluteToMachAbsolute_RealTime failed", v14, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCFAbsoluteTime(const CFAbsoluteTime, CLP::LogEntry::OutdoorEstimator::Timestamp *)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    return 0;
  }
  v4 = v15;
  *(_DWORD *)(a1 + 36) |= 2u;
  *(_QWORD *)(a1 + 16) = v4;
  v14[0] = 0.0;
  v5 = sub_10010F194();
  v6 = sub_10010F7EC(v5, (double *)&v15, v14);
  if (v6)
  {
    v7 = v14[0];
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = v7;
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213E5B0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "fromCFAbsoluteTime, convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213E5B0);
      v13[0] = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "fromCFAbsoluteTime, convertMachAbsoluteToMachContinuous_RealTime failed", v13, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCFAbsoluteTime(const CFAbsoluteTime, CLP::LogEntry::OutdoorEstimator::Timestamp *)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  return v6;
}

void sub_10010EF94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10010EFA0(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  _BOOL8 result;
  double v8;
  uint64_t v9;
  char *v10;
  int v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 32) && *a2 >= *(double *)(a1 + 24))
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102168E28);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 134349312;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TCONV,Cannot get wakeTime or MachTime before sleep,machAbs,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v8 = *a2;
    v9 = *(_QWORD *)(a1 + 24);
    v11 = 134349312;
    v12 = v8;
    v13 = 2050;
    v14 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "TCONV,Cannot get wakeTime or MachTime before sleep,machAbs,%{public}.6lf,wakeTime,%{public}.6lf", &v11, 22);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::isMachTimeAfterCachedLastWakeUpTime(const CFTimeInterval &)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  return result;
}

uint64_t sub_10010F194()
{
  unsigned __int8 v0;
  uint64_t result;

  v0 = atomic_load((unsigned __int8 *)&qword_1023014C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023014C8))
  {
    __cxa_atexit((void (*)(void *))sub_1004BAAE8, &qword_1023014C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023014C8);
  }
  result = qword_1023014C0;
  if (!qword_1023014C0)
    operator new();
  return result;
}

BOOL sub_10010F24C(uint64_t a1, double *a2, double *a3)
{
  NSObject *v7;
  char *v8;
  __int16 v9;
  double v10;
  uint8_t buf[1640];

  v10 = 0.0;
  if (sub_10010F630(a1, &v10))
  {
    *a3 = *a2 - v10;
    return sub_10010EFA0(a1, a3);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between CF time and mach time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v9 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,Failed in getting the offset between CF time and mach time", &v9, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertCFAbsoluteToMachAbsolute_RealTime(const CFAbsoluteTime &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return 0;
  }
}

void sub_10010F434(uint64_t a1@<X8>)
{
  NSObject *v2;
  char *v9;
  _WORD v10[8];
  uint64_t v11[2];
  unint64_t v12;
  unint64_t v13;
  uint8_t buf[1640];

  v12 = 0;
  v13 = 0;
  if (mach_get_times(&v13, &v12, v11))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v10[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,mach_get_times failed", v10, 2);
      sub_100512490("Generic", 1, 0, 0, "Timestamp CLUtils::getTimestampNow()", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
    *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
    *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
    *(_BYTE *)(a1 + 24) = 0;
    *(double *)(a1 + 16) = sub_100110314(v11);
    *(double *)(a1 + 8) = sub_100127828(v13);
    *(double *)a1 = sub_100127828(v12);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

BOOL sub_10010F630(uint64_t a1, _QWORD *a2)
{
  _BOOL8 v3;
  NSObject *v4;
  char *v6;
  _WORD v7[8];
  __int128 v8;
  __int128 v9;
  char v10;
  uint8_t buf[1640];

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v3 = sub_10010FB90(a1, (uint64_t)&v8);
  if (v3)
  {
    *a2 = v9;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,UpdateLastWakeUpTime failed", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::deltaCFAbsTimeMachAbsTime_RealTime(CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return v3;
}

BOOL sub_10010F7EC(uint64_t a1, double *a2, double *a3)
{
  NSObject *v7;
  char *v8;
  __int16 v9;
  double v10;
  uint8_t buf[1640];

  v10 = 0.0;
  if (sub_10010F9D4(a1, &v10))
  {
    *a3 = *a2 + v10;
    return sub_10010EFA0(a1, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v9 = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,Failed in getting the offset between mach continuous time and mach absolute time", &v9, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::convertMachAbsoluteToMachContinuous_RealTime(const CFTimeInterval &, CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return 0;
  }
}

BOOL sub_10010F9D4(uint64_t a1, _QWORD *a2)
{
  _BOOL8 v3;
  NSObject *v4;
  char *v6;
  _WORD v7[8];
  _OWORD v8[2];
  char v9;
  uint8_t buf[1640];

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = sub_10010FB90(a1, (uint64_t)v8);
  if (v3)
  {
    *a2 = *((_QWORD *)&v8[0] + 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TCONV,UpdateLastWakeUpTime failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,UpdateLastWakeUpTime failed", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::deltaMachContinuousMachAbsolute_RealTime(CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return v3;
}

BOOL sub_10010FB90(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  _BOOL8 result;
  uint64_t v7;
  uint8_t *v8;
  double v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  NSObject *v22;
  _BOOL4 v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  uint8_t buf[4];
  unint64_t v55;
  __int16 v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;

  v32 = 0;
  v33 = 0;
  if (mach_get_times(&v33, &v32, &v30))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", buf, 2u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      LOWORD(v34) = 0;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,mach_get_times failed", &v34, 2);
LABEL_10:
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
LABEL_11:
      if (v8 != buf)
        free(v8);
      return 0;
    }
    return result;
  }
  v9 = sub_100127828(v32);
  v10 = v32 - v33;
  v11 = sub_100110314(&v30);
  v12 = v11 - sub_100127828(v33);
  if (*(_BYTE *)(a1 + 32)
    && vabdd_f64(v12, *(double *)(a1 + 16)) <= 0.0012
    && v10 == *(_QWORD *)a1
    && v9 <= *(double *)(a1 + 64) + 30.0)
  {
LABEL_26:
    v19 = *(_OWORD *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
    *(_OWORD *)a2 = v19;
    *(_OWORD *)(a2 + 16) = v20;
    return 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  if (!sub_100110344(a1, (double *)(a1 + 24)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TCONV,Getting last wake up time failed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      LOWORD(v34) = 0;
      v8 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,Getting last wake up time failed", &v34, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n");
      goto LABEL_11;
    }
    return result;
  }
  *(double *)(a1 + 64) = v9;
  *(_QWORD *)a1 = v10;
  v13 = sub_100127828(v10);
  *(double *)(a1 + 8) = v13;
  *(double *)(a1 + 16) = v12;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaContAbsSec", buf, 2u);
    }
    v23 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v23)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      LOWORD(v34) = 0;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,invalid deltaContAbsSec", &v34, 2);
      goto LABEL_10;
    }
    return result;
  }
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v14 = sub_100127828(v33);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134351360;
      v55 = v33;
      v56 = 2050;
      v57 = v32;
      v58 = 2050;
      v59 = v30;
      v60 = 2050;
      v61 = v31;
      v62 = 2050;
      v63 = v16;
      v64 = 2050;
      v65 = v17;
      v66 = 2050;
      v67 = v18;
      v68 = 2050;
      v69 = v14;
      v70 = 2050;
      v71 = v9;
      v72 = 2050;
      v73 = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TCONV,mach_get_times,machAbs,%{public}llu,machCont,%{public}llu,tv_sec,%{public}ld,tv_nsec,%{public}ld,deltaContAbs,%{public}.6lf,deltaCfAbs,%{public}.6lf,lastWakeAbs,%{public}.6lf,machNow,%{public}.6lf,machContNow,%{public}.6lf,sysNow,%{public}.6lf", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24);
      v34 = 134351360;
      v35 = v33;
      v36 = 2050;
      v37 = v32;
      v38 = 2050;
      v39 = v30;
      v40 = 2050;
      v41 = v31;
      v42 = 2050;
      v43 = v26;
      v44 = 2050;
      v45 = v27;
      v46 = 2050;
      v47 = v28;
      v48 = 2050;
      v49 = v14;
      v50 = 2050;
      v51 = v9;
      v52 = 2050;
      v53 = v11;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "TCONV,mach_get_times,machAbs,%{public}llu,machCont,%{public}llu,tv_sec,%{public}ld,tv_nsec,%{public}ld,deltaContAbs,%{public}.6lf,deltaCfAbs,%{public}.6lf,lastWakeAbs,%{public}.6lf,machNow,%{public}.6lf,machContNow,%{public}.6lf,sysNow,%{public}.6lf", &v34, 102);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpTime(WakeUpTime &)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    goto LABEL_26;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102168E28);
  v24 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "TCONV,invalid deltaCfAbsSec", buf, 2u);
  }
  v25 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v25)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    LOWORD(v34) = 0;
    v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,invalid deltaCfAbsSec", &v34, 2);
    goto LABEL_10;
  }
  return result;
}

double sub_100110314(uint64_t *a1)
{
  return (double)a1[1] / 1000000000.0 + (double)*a1 - kCFAbsoluteTimeIntervalSince1970;
}

BOOL sub_100110344(uint64_t a1, double *a2)
{
  int *v5;
  int *v6;
  int **v7;
  int v8;
  _BOOL8 v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  NSObject *v15;
  NSObject *v16;
  double v17;
  NSObject *v19;
  double v20;
  char *v21;
  char *v22;
  size_t v23;
  size_t v24;
  int v25;
  size_t v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  size_t v30;
  __int16 v31;
  double v32;

  *a2 = -1.0;
  v5 = *(int **)(a1 + 40);
  v6 = *(int **)(a1 + 48);
  v7 = (int **)(a1 + 40);
  if (v5 == v6)
  {
    v24 = 8;
    *(_DWORD *)buf = 0;
    sub_1002F4340((uint64_t)v7, 8uLL, buf);
    if (sysctlnametomib("kern.wake_abs_time", *v7, &v24))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "TCONV,error occurred, no mib to wake_abs_time conversion", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102168E28);
        LOWORD(v25) = 0;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "TCONV,error occurred, no mib to wake_abs_time conversion", &v25, 2);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
      v9 = 0;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
      return v9;
    }
    *(_DWORD *)buf = 0;
    sub_1002F4340((uint64_t)v7, v24, buf);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v30 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TCONV,mib filled to %zu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v25 = 134217984;
      v26 = v24;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,mib filled to %zu", (size_t)&v25);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    v5 = *(int **)(a1 + 40);
    v6 = *(int **)(a1 + 48);
  }
  v23 = 8;
  v24 = 0;
  v8 = sysctl(v5, (unint64_t)((char *)v6 - (char *)v5) >> 2, &v24, &v23, 0, 0);
  v9 = v8 == 0;
  if (v8)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v11 = *__error();
      *(_DWORD *)buf = 67109120;
      LODWORD(v30) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "TCONV,Error occurred when get wake_abs_time,%{errno}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v12 = qword_1022A0078;
      v13 = *__error();
      v25 = 67109120;
      LODWORD(v26) = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 16, "TCONV,Error occurred when get wake_abs_time,%{errno}d", &v25, 8);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v14);
LABEL_33:
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  else
  {
    *a2 = sub_100127828(v24);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102168E28);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a2;
      *(_DWORD *)buf = 134349312;
      v30 = v24;
      v31 = 2050;
      v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TCONV,GetLastWakeUpMachAbsoluteTime success,machAbs,%{public}llu,floatInterval,%{public}.6lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102168E28);
      v20 = *a2;
      v25 = 134349312;
      v26 = v24;
      v27 = 2050;
      v28 = v20;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TCONV,GetLastWakeUpMachAbsoluteTime success,machAbs,%{public}llu,floatInterval,%{public}.6lf", &v25, 22);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLUtils::LiveTimeConverter::getLastWakeUpMachAbsoluteTime(CFTimeInterval &)", "%s\n", v14);
      goto LABEL_33;
    }
  }
  return v9;
}

void sub_1001109A0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  double v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  unint64_t v19;
  double **v20;
  double *v21;
  double *v22;
  uint64_t v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  int v29;
  _BOOL4 v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  const char *v130;
  char *v131;
  uint64_t v132;
  _OWORD v133[8];
  _OWORD v134[2];
  _BYTE v135[513];
  uint64_t v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  _OWORD v147[8];
  _OWORD v148[2];
  _BYTE v149[513];
  uint64_t v150;
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  char v163;
  uint8_t v164[4];
  _BYTE v165[14];
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  int v179;
  _BYTE buf[96];
  _BYTE v181[60];
  _BYTE v182[513];
  uint64_t v183;
  std::__shared_weak_count *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  char v191;
  __int128 v192;
  uint64_t v193;

  v4 = sub_1001FCBB4();
  v5 = *(double *)(a2 + 504);
  if (v5 <= 0.0)
  {
    if (*(double *)(a2 + 76) <= 0.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v33 = *(_QWORD *)(a2 + 76);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,feedAssistanceLocation,missing timestamp,%{public}.3f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v34 = *(_QWORD *)(a2 + 76);
        *(_DWORD *)v164 = 134349056;
        *(_QWORD *)v165 = v34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssAssistancePosition,feedAssistanceLocation,missing timestamp,%{public}.3f", v164, 12);
        v36 = (char *)v35;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistancePosition::feedAssistanceLocation(CLGnssPositionAssistanceData &)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a2 + 504);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,#Warning,feedAssistanceLocation,missing mct timestamp,%{public}.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v129 = *(_QWORD *)(a2 + 504);
      *(_DWORD *)v164 = 134349056;
      *(_QWORD *)v165 = v129;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssAssistancePosition,#Warning,feedAssistanceLocation,missing mct timestamp,%{public}.3f", v164, 12);
      v131 = (char *)v130;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::feedAssistanceLocation(CLGnssPositionAssistanceData &)", "%s\n", v130);
      if (v131 != buf)
        free(v131);
    }
    v5 = v4 - (CFAbsoluteTimeGetCurrent() - *(double *)(a2 + 76));
    *(double *)(a2 + 504) = v5;
  }
  v8 = v4 - v5;
  if (v8 <= 0.0)
    v9 = 1.0;
  else
    v9 = v8;
  *(double *)(a2 + 808) = v9;
  v163 = 0;
  v162 = 0.0;
  v161 = 0;
  sub_100111C68(a1, *(_DWORD *)(a2 + 472), &v163, &v162, (double *)&v161, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a2 + 28), *(double *)(a2 + 36), *(float *)(a2 + 476));
  v10 = (_BYTE *)(a1 + 11672);
  *(double *)(a2 + 28) = v162;
  v11 = v161;
  *(_QWORD *)(a2 + 36) = v161;
  v12 = *(_QWORD *)(a2 + 20);
  if (!*(_BYTE *)(a1 + 11672))
  {
    v18 = *(_QWORD *)(a1 + 8176);
    if (*(_QWORD *)(a1 + 8184) == v18
      || (v19 = *(_QWORD *)(a1 + 8200),
          v20 = (double **)(v18 + 8 * (v19 >> 9)),
          v21 = *v20,
          v22 = &(*v20)[v19 & 0x1FF],
          v23 = *(_QWORD *)(v18 + (((*(_QWORD *)(a1 + 8208) + v19) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*(_QWORD *)(a1 + 8208) + v19) & 0x1FF),
          v22 == (double *)v23))
    {
      v30 = 0;
      v24 = 0;
      v29 = *(unsigned __int8 *)(a2 + 816);
      v25 = 0.0;
    }
    else
    {
      v24 = 0;
      v25 = 0.0;
      do
      {
        v26 = *v22++;
        v27 = v26;
        if ((char *)v22 - (char *)v21 == 4096)
        {
          v28 = v20[1];
          ++v20;
          v21 = v28;
          v22 = v28;
        }
        v25 = v25 + (v27 - v25) / (double)++v24;
      }
      while (v22 != (double *)v23);
      v29 = *(unsigned __int8 *)(a2 + 816);
      v30 = v24 == 20;
      if (*(_BYTE *)(a2 + 816) && v24 == 20 && v25 > 13.4112)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v31 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v25;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance: withdrawing tight coupling assistance due to average user speed\", \"averageSpeed\":\"%{public}f\"}", buf, 0x1Cu);
        }
        v29 = 0;
        *(_BYTE *)(a2 + 816) = 0;
        v24 = 20;
        v30 = 1;
      }
    }
    v132 = v12;
    if (v8 <= 0.0)
    {
      v38 = 0.65;
    }
    else
    {
      v37 = v8 > 1.0 && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      v38 = 0.65;
      if (v37)
        v38 = v8 + 0.65;
    }
    v39 = *(double *)(a2 + 20);
    if (v39 > 0.0)
    {
      v40 = v25 * 1.5;
      if (!v30)
        v40 = 13.4112;
      v39 = sqrt(v40 * (v40 * (v38 * v38)) + v39 * v39);
      *(double *)(a2 + 20) = v39;
    }
    v41 = *(double *)(a2 + 36);
    if (v41 > 0.0)
    {
      v41 = sqrt(v38 * v38 + v41 * v41);
      *(double *)(a2 + 36) = v41;
    }
    if (v8 > 0.0 && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v29)
    {
      *(double *)(a2 + 76) = v8 + *(double *)(a2 + 76);
      *(double *)(a2 + 192) = sub_100078B88();
      *(double *)(a2 + 504) = sub_1001FCBB4();
      *(double *)(a2 + 184) = v8 + *(double *)(a2 + 184);
      *(_QWORD *)(a2 + 808) = 0;
      v39 = *(double *)(a2 + 20);
      v41 = *(double *)(a2 + 36);
    }
    v42 = v41;
    if (v39 <= 0.0)
    {
LABEL_71:
      if (v42 <= 0.0)
        goto LABEL_82;
      *(double *)(a2 + 36) = (v42 * 1.95996398 + 25.0) / 1.95996398;
      if (*v10)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v47 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v48 = v47;
          v49 = OS_LOG_TYPE_DEFAULT;
LABEL_81:
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,vunc\"}", buf, 0x12u);
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v50 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v48 = v50;
          v49 = OS_LOG_TYPE_DEBUG;
          goto LABEL_81;
        }
      }
LABEL_82:
      v51 = *(_QWORD *)(a2 + 20);
      v52 = *(_QWORD *)(a2 + 36);
      v53 = -1.0;
      if (*(double *)(a1 + 5628) > 0.0)
      {
        sub_10011E258((double *)(a1 + 11560), a1 + 5608, a2);
        v53 = v54;
        v55 = 1.0;
        v56 = v25 * -0.48 + 1.0;
        v57 = 0.0;
        if (v56 < 0.0)
          v56 = 0.0;
        if (v56 > 1.0)
          v56 = 1.0;
        if (v53 * -0.00444444444 + 1.11111111 >= 0.0)
          v57 = v53 * -0.00444444444 + 1.11111111;
        if (v57 <= 1.0)
          v55 = v57;
        v58 = v56 * v55;
        v59 = *(double *)(a2 + 20);
        if (v59 > 0.0)
        {
          if (v59 < v58 * 1.41421356 * 250.0)
            v59 = v58 * 1.41421356 * 250.0;
          *(double *)(a2 + 20) = v59;
        }
        v60 = *(double *)(a2 + 36);
        if (v60 > 0.0)
        {
          v61 = v58 * 250.0;
          if (v60 >= v61)
            v61 = *(double *)(a2 + 36);
          *(double *)(a2 + 36) = v61;
        }
      }
      if (*v10)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v62 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_110;
        v63 = *(_QWORD *)(a2 + 20);
        v64 = *(_QWORD *)(a2 + 36);
        *(_DWORD *)buf = 68292098;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v9;
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v24;
        *(_WORD *)&buf[34] = 2050;
        *(double *)&buf[36] = v25;
        *(_WORD *)&buf[44] = 2050;
        *(double *)&buf[46] = v53;
        *(_WORD *)&buf[54] = 2050;
        *(_QWORD *)&buf[56] = v132;
        *(_WORD *)&buf[64] = 2050;
        *(double *)&buf[66] = v39;
        *(_WORD *)&buf[74] = 2050;
        *(_QWORD *)&buf[76] = v51;
        *(_WORD *)&buf[84] = 2050;
        *(_QWORD *)&buf[86] = v63;
        *(_WORD *)&buf[94] = 2050;
        *(_QWORD *)v181 = v11;
        *(_WORD *)&v181[8] = 2050;
        *(double *)&v181[10] = v41;
        *(_WORD *)&v181[18] = 2050;
        *(_QWORD *)&v181[20] = v52;
        *(_WORD *)&v181[28] = 2050;
        *(_QWORD *)&v181[30] = v64;
        v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance\", \"assistanceAge\":\"%{public}f\", \""
              "validRecentSpeeds\":%{public}d, \"averageSpeed\":\"%{public}f\", \"assistanceInnovation\":\"%{public}f\", "
              "\"huncOriginal\":\"%{public}f\", \"huncPropagated\":\"%{public}f\", \"huncMomentMatched\":\"%{public}f\", "
              "\"huncDiluted\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\", \"vuncPropagated\":\"%{public}f\", \"vunc"
              "MomentMatched\":\"%{public}f\", \"vuncDiluted\":\"%{public}f\"}";
        v15 = v62;
        v16 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v65 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_110;
        v66 = *(_QWORD *)(a2 + 20);
        v67 = *(_QWORD *)(a2 + 36);
        *(_DWORD *)buf = 68292098;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v9;
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v24;
        *(_WORD *)&buf[34] = 2050;
        *(double *)&buf[36] = v25;
        *(_WORD *)&buf[44] = 2050;
        *(double *)&buf[46] = v53;
        *(_WORD *)&buf[54] = 2050;
        *(_QWORD *)&buf[56] = v132;
        *(_WORD *)&buf[64] = 2050;
        *(double *)&buf[66] = v39;
        *(_WORD *)&buf[74] = 2050;
        *(_QWORD *)&buf[76] = v51;
        *(_WORD *)&buf[84] = 2050;
        *(_QWORD *)&buf[86] = v66;
        *(_WORD *)&buf[94] = 2050;
        *(_QWORD *)v181 = v11;
        *(_WORD *)&v181[8] = 2050;
        *(double *)&v181[10] = v41;
        *(_WORD *)&v181[18] = 2050;
        *(_QWORD *)&v181[20] = v52;
        *(_WORD *)&v181[28] = 2050;
        *(_QWORD *)&v181[30] = v67;
        v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance\", \"assistanceAge\":\"%{public}f\", \""
              "validRecentSpeeds\":%{public}d, \"averageSpeed\":\"%{public}f\", \"assistanceInnovation\":\"%{public}f\", "
              "\"huncOriginal\":\"%{public}f\", \"huncPropagated\":\"%{public}f\", \"huncMomentMatched\":\"%{public}f\", "
              "\"huncDiluted\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\", \"vuncPropagated\":\"%{public}f\", \"vunc"
              "MomentMatched\":\"%{public}f\", \"vuncDiluted\":\"%{public}f\"}";
        v15 = v65;
        v16 = OS_LOG_TYPE_DEBUG;
      }
      v17 = 134;
      goto LABEL_109;
    }
    *(double *)(a2 + 20) = (v39 * 1.73081838 + 25.0) / 1.73081838;
    if (*v10)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v43 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_70;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v44 = v43;
      v45 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v46 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_70;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v44 = v46;
      v45 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,hunc\"}", buf, 0x12u);
LABEL_70:
    v42 = *(double *)(a2 + 36);
    goto LABEL_71;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(double *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v12;
    *(_WORD *)&buf[38] = 2050;
    *(_QWORD *)&buf[40] = v11;
    v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance(undiluted)\", \"assistanceAge\":\"%{public"
          "}f\", \"huncOriginal\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\"}";
    v15 = v13;
    v16 = OS_LOG_TYPE_DEFAULT;
    v17 = 48;
LABEL_109:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, v17);
  }
LABEL_110:
  if (sub_100112110(a1))
  {
    v68 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)v181 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)&v181[16] = v68;
    *(_OWORD *)&v181[32] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)&v181[44] = *(_OWORD *)(a2 + 140);
    v69 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&buf[48] = v69;
    v70 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&buf[80] = v70;
    v71 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v71;
    memcpy(v182, (const void *)(a2 + 160), sizeof(v182));
    v72 = *(_QWORD *)(a2 + 680);
    v183 = v72;
    v73 = *(std::__shared_weak_count **)(a2 + 688);
    v184 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
    }
    v76 = *(_OWORD *)(a2 + 776);
    v189 = *(_OWORD *)(a2 + 760);
    v190 = v76;
    v77 = *(_OWORD *)(a2 + 712);
    v185 = *(_OWORD *)(a2 + 696);
    v186 = v77;
    v78 = *(_OWORD *)(a2 + 744);
    v187 = *(_OWORD *)(a2 + 728);
    v188 = v78;
    v191 = *(_BYTE *)(a2 + 792);
    v192 = *(_OWORD *)(a2 + 800);
    v193 = *(_QWORD *)(a2 + 816);
    *(_DWORD *)v181 = *(_DWORD *)(a1 + 8312);
    v79 = *(_QWORD *)(a1 + 8220);
    *(_QWORD *)&buf[4] = v79;
    v80 = *(_QWORD *)(a1 + 8228);
    *(_QWORD *)&buf[12] = v80;
    v81 = *(_QWORD *)(a1 + 8244);
    *(_QWORD *)&buf[28] = v81;
    v82 = *(_QWORD *)(a1 + 8236);
    *(_QWORD *)&buf[20] = v82;
    v83 = *(_QWORD *)(a1 + 8252);
    *(_QWORD *)&buf[36] = v83;
    if (*v10)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v84 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v164 = 68290819;
        *(_DWORD *)v165 = 0;
        *(_WORD *)&v165[4] = 2082;
        *(_QWORD *)&v165[6] = "";
        v166 = 2049;
        v167 = v79;
        v168 = 2049;
        v169 = v80;
        v170 = 2050;
        v171 = v81;
        v172 = 2050;
        v173 = v82;
        v174 = 2050;
        v175 = v83;
        v176 = 2050;
        v177 = *((_QWORD *)&v192 + 1);
        v178 = 1026;
        v179 = 1;
        v85 = v84;
        v86 = OS_LOG_TYPE_DEFAULT;
LABEL_128:
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"age\":\"%{public}.1f\", \"isCPI\":%{public}d}", v164, 0x54u);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v98 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v164 = 68290819;
        *(_DWORD *)v165 = 0;
        *(_WORD *)&v165[4] = 2082;
        *(_QWORD *)&v165[6] = "";
        v166 = 2049;
        v167 = v79;
        v168 = 2049;
        v169 = v80;
        v170 = 2050;
        v171 = v81;
        v172 = 2050;
        v173 = v82;
        v174 = 2050;
        v175 = v83;
        v176 = 2050;
        v177 = *((_QWORD *)&v192 + 1);
        v178 = 1026;
        v179 = 1;
        v85 = v98;
        v86 = OS_LOG_TYPE_DEBUG;
        goto LABEL_128;
      }
    }
    v147[6] = *(_OWORD *)v181;
    v147[7] = *(_OWORD *)&v181[16];
    v148[0] = *(_OWORD *)&v181[32];
    *(_OWORD *)((char *)v148 + 12) = *(_OWORD *)&v181[44];
    v147[2] = *(_OWORD *)&buf[32];
    v147[3] = *(_OWORD *)&buf[48];
    v147[4] = *(_OWORD *)&buf[64];
    v147[5] = *(_OWORD *)&buf[80];
    v147[0] = *(_OWORD *)buf;
    v147[1] = *(_OWORD *)&buf[16];
    memcpy(v149, v182, sizeof(v149));
    v150 = v72;
    v151 = v73;
    if (v73)
    {
      v99 = (unint64_t *)&v73->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v156 = v189;
    v157 = v190;
    v152 = v185;
    v153 = v186;
    v154 = v187;
    v155 = v188;
    v158 = v191;
    v159 = v192;
    v160 = v193;
    v101 = *(_QWORD *)(a1 + 32);
    if (!v101)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v101 + 48))(v101, v147);
    v102 = v151;
    if (v151)
    {
      v103 = (unint64_t *)&v151->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = v184;
    if (v184)
    {
      v106 = (unint64_t *)&v184->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
LABEL_154:
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      return;
    }
    return;
  }
  if (*v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v87 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v88 = *(_QWORD *)(a2 + 4);
      v89 = *(_QWORD *)(a2 + 12);
      v90 = *(_QWORD *)(a2 + 28);
      v91 = *(_QWORD *)(a2 + 20);
      v92 = *(_QWORD *)(a2 + 36);
      v93 = *(_QWORD *)(a2 + 808);
      v94 = *(unsigned __int8 *)(a2 + 816);
      v95 = (int)*(double *)(a2 + 76);
      *(_DWORD *)buf = 68291075;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v88;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v89;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v90;
      *(_WORD *)&buf[48] = 2050;
      *(_QWORD *)&buf[50] = v91;
      *(_WORD *)&buf[58] = 2050;
      *(_QWORD *)&buf[60] = v92;
      *(_WORD *)&buf[68] = 2050;
      *(_QWORD *)&buf[70] = v93;
      *(_WORD *)&buf[78] = 1026;
      *(_DWORD *)&buf[80] = v94;
      *(_WORD *)&buf[84] = 1026;
      *(_DWORD *)&buf[86] = v95;
      v96 = v87;
      v97 = OS_LOG_TYPE_DEFAULT;
LABEL_146:
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"age\":\"%{public}.1f\", \"isCPI\":%{public}d, \"timestamp\":%{public}d}", buf, 0x5Au);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v108 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v109 = *(_QWORD *)(a2 + 4);
      v110 = *(_QWORD *)(a2 + 12);
      v111 = *(_QWORD *)(a2 + 28);
      v112 = *(_QWORD *)(a2 + 20);
      v113 = *(_QWORD *)(a2 + 36);
      v114 = *(_QWORD *)(a2 + 808);
      v115 = *(unsigned __int8 *)(a2 + 816);
      v116 = (int)*(double *)(a2 + 76);
      *(_DWORD *)buf = 68291075;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v109;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v110;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v111;
      *(_WORD *)&buf[48] = 2050;
      *(_QWORD *)&buf[50] = v112;
      *(_WORD *)&buf[58] = 2050;
      *(_QWORD *)&buf[60] = v113;
      *(_WORD *)&buf[68] = 2050;
      *(_QWORD *)&buf[70] = v114;
      *(_WORD *)&buf[78] = 1026;
      *(_DWORD *)&buf[80] = v115;
      *(_WORD *)&buf[84] = 1026;
      *(_DWORD *)&buf[86] = v116;
      v96 = v108;
      v97 = OS_LOG_TYPE_DEBUG;
      goto LABEL_146;
    }
  }
  v117 = *(_OWORD *)(a2 + 112);
  v133[6] = *(_OWORD *)(a2 + 96);
  v133[7] = v117;
  v134[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v134 + 12) = *(_OWORD *)(a2 + 140);
  v118 = *(_OWORD *)(a2 + 48);
  v133[2] = *(_OWORD *)(a2 + 32);
  v133[3] = v118;
  v119 = *(_OWORD *)(a2 + 80);
  v133[4] = *(_OWORD *)(a2 + 64);
  v133[5] = v119;
  v120 = *(_OWORD *)(a2 + 16);
  v133[0] = *(_OWORD *)a2;
  v133[1] = v120;
  memcpy(v135, (const void *)(a2 + 160), sizeof(v135));
  v136 = *(_QWORD *)(a2 + 680);
  v121 = *(std::__shared_weak_count **)(a2 + 688);
  v137 = v121;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = *(_OWORD *)(a2 + 776);
  v142 = *(_OWORD *)(a2 + 760);
  v143 = v124;
  v125 = *(_OWORD *)(a2 + 712);
  v138 = *(_OWORD *)(a2 + 696);
  v139 = v125;
  v126 = *(_OWORD *)(a2 + 744);
  v140 = *(_OWORD *)(a2 + 728);
  v141 = v126;
  v144 = *(_BYTE *)(a2 + 792);
  v145 = *(_OWORD *)(a2 + 800);
  v146 = *(_QWORD *)(a2 + 816);
  v127 = *(_QWORD *)(a1 + 32);
  if (!v127)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v127 + 48))(v127, v133);
  v105 = v137;
  if (v137)
  {
    v128 = (unint64_t *)&v137->__shared_owners_;
    do
      v107 = __ldaxr(v128);
    while (__stlxr(v107 - 1, v128));
    goto LABEL_154;
  }
}

void sub_100111C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100111C68(uint64_t a1, int a2, _BYTE *a3, double *a4, double *a5, double a6, double a7, double a8, double a9, double a10)
{
  double v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v28;
  double v29;
  NSObject *v30;
  double v31;
  double v32;
  int v33;
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  if (a9 > 0.0 && (a8 < -450.0 || a8 > 8850.0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v33 = 68289282;
      v34 = 0;
      v35 = 2082;
      v36 = "";
      v37 = 2050;
      v38 = a8;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition bad altitude\", \"altitude\":\"%{public}f\"}", (uint8_t *)&v33, 0x1Cu);
    }
    *a3 = 0;
    *a4 = 0.0;
    *a5 = 3000.0;
  }
  else
  {
    *a4 = a8;
    v19 = 3000.0;
    if (a9 <= 3000.0)
      v19 = a9;
    *a5 = v19;
    if (a9 <= 0.0)
    {
      *a4 = 0.0;
      *a5 = 3000.0;
      *a3 = 0;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        *a5 = sqrt(v19 * v19 + 900.0);
      else
        *a4 = *a4 + a10;
      v21 = a1 + 9964;
      *a3 = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v23 = *a4;
        v33 = 68289795;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2049;
        v38 = a8;
        v39 = 2049;
        v40 = v23;
        v41 = 2049;
        v42 = a10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition converted MSL alt to WGS84\", \"altMsl\":\"%{private}.3f\", \"altWGS84\":\"%{private}.3f\", \"undulation\":\"%{private}.3f\"}", (uint8_t *)&v33, 0x30u);
      }
      if (*(_BYTE *)(v21 + 1708))
      {
        if (a9 <= 0.0 || a9 > 2.33)
        {
          if (a9 <= 2.33)
            v24 = *a5;
          else
            v24 = floor(a9 / 2.33) * 2.33;
        }
        else
        {
          v24 = 2.33;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v31 = *a4;
          v32 = *a5;
          v33 = 68290307;
          v34 = 0;
          v35 = 2082;
          v36 = "";
          v37 = 2049;
          v38 = a6;
          v39 = 2049;
          v40 = a7;
          v41 = 2049;
          v42 = v31;
          v43 = 2050;
          v44 = v32;
          v45 = 2050;
          v46 = v24;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, verticalAccuracyScalingDuringEmergency\", \"lat\":\"%{private}.6f\", \"lon\":\"%{private}.6f\", \"altWGS84\":\"%{private}.2f\", \"priorVunc\":\"%{public}.2f\", \"newVunc\":\"%{public}.2f\"}", (uint8_t *)&v33, 0x44u);
        }
        *a5 = v24;
      }
      else
      {
        v25 = 3.0;
        if (*(double *)v21 > 0.0)
        {
          v26 = sub_1001FC7BC(a1 + 9944, a1 + 10104);
          if (v26 >= 30.0 || v26 <= 0.0)
            v25 = 3.0;
          else
            v25 = 15.0;
        }
        if (*a5 > 0.0 && *a5 < v25)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v28 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v29 = *a4;
            v33 = 68290307;
            v34 = 0;
            v35 = 2082;
            v36 = "";
            v37 = 2049;
            v38 = a6;
            v39 = 2049;
            v40 = a7;
            v41 = 2049;
            v42 = v29;
            v43 = 2050;
            v44 = a9;
            v45 = 2050;
            v46 = v25;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition ApplyingVuncLowerBound\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"altWGS84\":\"%{private}.2f\", \"priorVunc\":\"%{public}.1f\", \"vuncLowerBound\":\"%{public}.1f\"}", (uint8_t *)&v33, 0x44u);
          }
          *a5 = v25;
        }
      }
    }
  }
}

BOOL sub_100112110(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 1537))
    return 0;
  result = sub_10013F000(a1, a1 + 8216, *(double *)(a1 + 9024));
  if (result)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_QWORD *)(a1 + 9024);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2050;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,useTightlyCoupledPosInFarStartTest\", \"age\":\"%{public}f\"}", (uint8_t *)v5, 0x1Cu);
    }
    return 1;
  }
  return result;
}

void sub_100112220(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  *(_BYTE *)(*a1 + 1288) = sub_1001123A8(*(double *)(a2 + 4), *(double *)(a2 + 12));
  *(_BYTE *)(*a1 + 1289) = sub_1001133C0(*(double *)(a2 + 4), *(double *)(a2 + 12)) != 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(*a1 + 1288);
    v6 = *(unsigned __int8 *)(a2 + 816);
    v7[0] = 68290307;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "Injecting position assistance to GNSS platform";
    v12 = 1040;
    v13 = 156;
    v14 = 2097;
    v15 = a2;
    v16 = 1025;
    v17 = v5;
    v18 = 1026;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"location\":%{private, location:CLClientLocation}.*P, \"isIndia\":%{private}hhd, \"isCPI\":%{public}hhd}", (uint8_t *)v7, 0x38u);
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 216))(*a1, a2);
  sub_1017A089C((uint64_t)(a1 + 350), a2, *(_BYTE *)(a2 + 768));
}

BOOL sub_1001123A8(double a1, double a2)
{
  return a2 <= 97.98
      && a2 >= 67.08
      && a1 >= 7.07
      && a1 <= 36.63
      && (a2 <= 94.23 && a2 >= 14.1 && a1 >= 9.9 && a1 <= 91.09
       || a1 <= 23.77 && a2 <= 89.25
       || a2 <= 76.19 && a2 >= 70.81 && a1 >= 8.29 && a1 <= 12.67
       || a1 >= 17.57 && a2 >= 67.18);
}

void sub_1001124B8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  NSObject *v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  int v42;
  int v43;
  BOOL v45;
  int v46;
  double v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  double v79;
  int v80;
  _BYTE v81[10];
  uint64_t v82;
  _BYTE v83[10];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  uint8_t buf[4];
  _BYTE v97[10];
  uint64_t v98;
  _BYTE v99[10];
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a2 + 816);
    v6 = sub_1001133B0(a1 + 1684);
    v7 = *(_DWORD *)(a2 + 84);
    v8 = *(_DWORD *)(a2 + 820);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v97 = v5;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = v6;
    LOWORD(v98) = 1024;
    *(_DWORD *)((char *)&v98 + 2) = v7;
    HIWORD(v98) = 1024;
    *(_DWORD *)v99 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,injectPosition,tightlyCoupled,%d,inEmergency,%d,confidence,%d,assistanceType,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v60 = qword_1022A0078;
    v61 = sub_1001133B0(a1 + 1684);
    v62 = *(_DWORD *)(a2 + 84);
    v63 = *(_DWORD *)(a2 + 820);
    *(_WORD *)&v81[4] = 1024;
    *(_WORD *)&v81[6] = v61;
    *(_DWORD *)((char *)&v82 + 2) = v62;
    HIWORD(v82) = 1024;
    *(_DWORD *)v83 = v63;
    v64 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "#gpsd,injectPosition,tightlyCoupled,%d,inEmergency,%d,confidence,%d,assistanceType,%d", &v80, 26, 67109888, *(_DWORD *)&v81[4]);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v64);
    if (v64 != (char *)buf)
      free(v64);
  }
  v9 = a1 + 1684;
  if (sub_1001133B0(a1 + 1684) || !*(_BYTE *)(a1 + 1706) || !*(_BYTE *)(a1 + 1707))
  {
    if (*(_DWORD *)(a2 + 820) == 2 && !sub_10075F198())
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v30 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#gpsd,dropping TEPA on this platform", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v80) = 0;
      LODWORD(v79) = 2;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,dropping TEPA on this platform", &v80, *(_QWORD *)&v79);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v11);
      goto LABEL_47;
    }
    v12 = *(_BYTE *)(a2 + 816) != 0;
    v13 = *(_DWORD *)(a2 + 84) > 0x41u;
    if ((v12 | !sub_1001133B0(a1 + 1684) | v13) != 1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v25 = sub_1001133B0(v9);
        v26 = *(_DWORD *)(a2 + 84);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v97 = v25;
        *(_WORD *)&v97[4] = 1024;
        *(_DWORD *)&v97[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#gpsd,Not feeding reference position,inCellularEmergency,%d,confidence,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v27 = qword_1022A0078;
        v28 = sub_1001133B0(v9);
        v29 = *(_DWORD *)(a2 + 84);
        v80 = 67109376;
        *(_DWORD *)v81 = v28;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = v29;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "#gpsd,Not feeding reference position,inCellularEmergency,%d,confidence,%d", &v80, 14);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v11);
        if (v11 != (char *)buf)
          goto LABEL_48;
      }
      return;
    }
    sub_1000FF154(a1 + 2576);
    v14 = sub_100103BB0(8);
    if ((v14 & 1) == 0)
      sub_10180AC90(v14, v15, v16);
    v17 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 8;
    *(_DWORD *)(a1 + 2972) = v17 | 0xC;
    v18 = *(_QWORD *)(a1 + 2600);
    if (!v18)
      operator new();
    v19 = sub_100113978(*(_DWORD *)(a2 + 820));
    if (!sub_10002A324(v19))
      sub_101935BB4();
    v20 = *(_DWORD *)(v18 + 36);
    *(_DWORD *)(v18 + 16) = v19;
    v21 = 504;
    if (*(_DWORD *)(a2 + 820) == 1)
      v21 = 512;
    ++*(_QWORD *)(a1 + v21);
    *(_DWORD *)(v18 + 36) = v20 | 3;
    v22 = *(_QWORD *)(v18 + 8);
    if (!v22)
      operator new();
    if (*(_DWORD *)(a2 + 132) == 1)
    {
      *(_DWORD *)(v22 + 96) |= 3u;
      v23 = *(_OWORD *)(a2 + 4);
    }
    else
    {
      if (*(_DWORD *)(a2 + 136) != 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v31 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#gpsd,Require WGS84 coordinates for injection", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          LOWORD(v80) = 0;
          LODWORD(v79) = 2;
          v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Require WGS84 coordinates for injection", &v80, *(_QWORD *)&v79);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v78);
          if (v78 != (char *)buf)
            free(v78);
        }
        goto LABEL_57;
      }
      *(_DWORD *)(v22 + 96) |= 3u;
      v23 = *(_OWORD *)(a2 + 100);
    }
    *(_OWORD *)(v22 + 8) = v23;
LABEL_57:
    v32 = *(_DWORD *)(v22 + 96);
    *(_QWORD *)(v22 + 24) = *(_QWORD *)(a2 + 28);
    *(double *)(v22 + 32) = *(float *)(a2 + 476);
    v33 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(v22 + 96) = v32 | 0x1C;
    *(_QWORD *)(v22 + 40) = v33;
    v34 = *(float *)(a2 + 200);
    if (v34 <= 0.0
      || (v35 = *(float *)(a2 + 204), v35 <= 0.0)
      || (v36 = *(float *)(a2 + 208), v36 < 0.0)
      || v36 > 180.0)
    {
      v38 = sqrt(*(double *)(a2 + 20) * (*(double *)(a2 + 20) * 0.5));
      *(double *)(v22 + 48) = v38;
      *(double *)(v22 + 56) = v38;
      v37 = 0.0;
    }
    else
    {
      *(double *)(v22 + 48) = v34 / 2.45;
      *(double *)(v22 + 56) = v35 / 2.45;
      v37 = v36;
    }
    *(_DWORD *)(v22 + 96) = v32 | 0xFC;
    *(double *)(v22 + 64) = v37;
    v39 = *(_DWORD *)(a2 + 800);
    if (v39)
    {
      v40 = sub_100113984(v39);
      if (!sub_100106054(v40))
        sub_101907834();
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,unset asst pos reliability", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(v80) = 0;
        LODWORD(v79) = 2;
        v77 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#gpsd,unset asst pos reliability", &v80, *(_QWORD *)&v79);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v77);
        if (v77 != (char *)buf)
          free(v77);
      }
      if (!sub_100106054(0xAu))
        sub_101907834();
      v40 = 10;
    }
    v42 = *(_DWORD *)(v22 + 96);
    *(_DWORD *)(v22 + 76) = v40;
    v43 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v22 + 96) = v42 | 0x300;
    *(_DWORD *)(v22 + 72) = v43;
    v45 = *(double *)(a2 + 36) > 0.0 && *(_DWORD *)(a2 + 820) != 2;
    v46 = *(_DWORD *)(v18 + 36) | 4;
    *(_DWORD *)(v18 + 36) = v46;
    *(_BYTE *)(v18 + 20) = v45;
    v47 = *(double *)(a2 + 504);
    if (v47 < 1.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v48 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(_QWORD *)(a2 + 808);
        *(_DWORD *)buf = 134349312;
        *(double *)v97 = v47;
        *(_WORD *)&v97[8] = 2050;
        v98 = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,unset asst pos time,%{public}.3f,age,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v75 = *(_QWORD *)(a2 + 808);
        v80 = 134349312;
        *(double *)v81 = v47;
        *(_WORD *)&v81[8] = 2050;
        v82 = v75;
        LODWORD(v79) = 22;
        v76 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#gpsd,unset asst pos time,%{public}.3f,age,%{public}.3f", &v80, *(_QWORD *)&v79);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v76);
        if (v76 != (char *)buf)
          free(v76);
      }
      v47 = sub_1001FCBB4();
      v46 = *(_DWORD *)(v18 + 36);
    }
    *(_DWORD *)(v18 + 36) = v46 | 8;
    *(_QWORD *)(v18 + 24) = (unint64_t)(v47 * 1000000000.0);
    if (*(_BYTE *)(a1 + 1216))
    {
      if ((*(_DWORD *)(a1 + 208) & 0x80000000) != 0)
      {
        *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 800);
        *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 20);
        *(_DWORD *)(a1 + 1152) = *(_DWORD *)(a2 + 820);
        *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 4);
      }
      *(_BYTE *)(a1 + 1216) = 0;
    }
    if (*(_DWORD *)(a2 + 96) == 4)
      *(_BYTE *)(a1 + 1156) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v50 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v51 = *(_QWORD *)(v22 + 8);
      v52 = *(_QWORD *)(v22 + 16);
      v53 = *(_QWORD *)(v22 + 24);
      v55 = *(_QWORD *)(v22 + 40);
      v54 = *(_QWORD *)(v22 + 48);
      v56 = *(_QWORD *)(a2 + 808);
      v57 = *(_DWORD *)(a2 + 800);
      v58 = *(_DWORD *)(a2 + 96);
      v59 = *(_DWORD *)(a2 + 820);
      *(_DWORD *)buf = 134220032;
      *(_QWORD *)v97 = v51;
      *(_WORD *)&v97[8] = 2048;
      v98 = v52;
      *(_WORD *)v99 = 2048;
      *(_QWORD *)&v99[2] = v53;
      v100 = 2048;
      v101 = v54;
      v102 = 2048;
      v103 = v55;
      v104 = 2048;
      v105 = v56;
      v106 = 1024;
      v107 = v57;
      v108 = 1024;
      v109 = v58;
      v110 = 1024;
      v111 = v59;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#gpsd,feeding reference location,lat,%.7lf,lon,%.7lf,alt,%.3lf,hunc,%.3lf,vunc,%.3lf,age,%f,rel,%d,locType,%d,assistType,%d", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v65 = *(_QWORD *)(v22 + 8);
      v66 = *(_QWORD *)(v22 + 16);
      v67 = *(_QWORD *)(v22 + 24);
      v69 = *(_QWORD *)(v22 + 40);
      v68 = *(_QWORD *)(v22 + 48);
      v70 = *(_QWORD *)(a2 + 808);
      v71 = *(_DWORD *)(a2 + 800);
      v72 = *(_DWORD *)(a2 + 96);
      v73 = *(_DWORD *)(a2 + 820);
      v80 = 134220032;
      *(_QWORD *)v81 = v65;
      *(_WORD *)&v81[8] = 2048;
      v82 = v66;
      *(_WORD *)v83 = 2048;
      *(_QWORD *)&v83[2] = v67;
      v84 = 2048;
      v85 = v68;
      v86 = 2048;
      v87 = v69;
      v88 = 2048;
      v89 = v70;
      v90 = 1024;
      v91 = v71;
      v92 = 1024;
      v93 = v72;
      v94 = 1024;
      v95 = v73;
      LODWORD(v79) = 80;
      v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,feeding reference location,lat,%.7lf,lon,%.7lf,alt,%.3lf,hunc,%.3lf,vunc,%.3lf,age,%f,rel,%d,locType,%d,assistType,%d", COERCE_DOUBLE(&v80), v79);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v74);
      if (v74 != (char *)buf)
        free(v74);
    }
    sub_1000FF8D8(a1 + 2176, 2);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsd,dropping airborne pos asst", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    return;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  LOWORD(v80) = 0;
  LODWORD(v79) = 2;
  v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,dropping airborne pos asst", &v80, *(_QWORD *)&v79);
  sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v11);
LABEL_47:
  if (v11 != (char *)buf)
LABEL_48:
    free(v11);
}

void sub_100113368()
{
  operator delete();
}

BOOL sub_1001133B0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1;
}

uint64_t sub_1001133C0(double a1, double a2)
{
  if (a2 > 134.82 || a2 < 73.48 || a1 < 18.15 || a1 > 53.6)
    return 0;
  if (a1 <= 42.3 && a2 >= 107.1 && a2 <= 119.3
    || a1 <= 42.3 && a1 >= 25.3 && a2 <= 123.45 && a2 >= 119.3
    || a1 >= 42.3 && a2 <= 129.2 && a1 <= 49.34 && a2 >= 119.93
    || a2 <= 107.1 && a2 >= 98.76 && a1 >= 23.39 && a1 <= 41.58
    || a1 <= 42.6 && a2 <= 98.76 && a1 >= 28.39 && a2 >= 85.19
    || a2 <= 90.66 && a2 >= 80.81 && a1 >= 42.6 && a1 <= 45.2
    || a2 <= 101.54 && a2 >= 99.4 && a1 >= 22.06 && a1 <= 23.39
    || a2 <= 119.93 && a1 >= 42.3 && a1 <= 44.74 && a2 >= 111.924
    || a2 <= 119.93 && a2 >= 116.55 && a1 >= 44.74 && a1 <= 46.35
    || a2 <= 133.09 && a2 >= 129.2 && a1 >= 45.23 && a1 <= 47.66
    || a2 <= 125.95 && a2 >= 120.78 && a1 >= 49.34 && a1 <= 52.86
    || a2 >= 123.45 && a1 <= 42.4 && a2 <= 126.51 && a1 >= 41.38
    || a2 <= 85.19 && a2 >= 79.24 && a1 >= 31.07 && a1 <= 41.73
    || a2 <= 85.19 && a1 <= 42.6 && a1 >= 41.73 && a2 >= 80.28
    || a2 >= 123.45 && a1 >= 40.9 && a1 <= 41.38 && a2 <= 125.97
    || a2 >= 123.45 && a1 >= 40.47 && a1 <= 40.9 && a2 <= 125.0
    || a2 <= 120.15 && a2 >= 119.2 && a1 >= 24.78 && a1 <= 25.4)
  {
    return 1;
  }
  if ((a2 > 108.15 || a2 < 97.511 || a1 < 21.14 || a1 > 28.39)
    && (a2 > 97.511 || a2 < 78.33 || a1 < 27.29 || a1 > 32.7)
    && (a1 < 32.7 || a2 > 79.24 || a1 > 41.73)
    && (a1 > 49.16 || a2 > 96.06 || a1 < 41.73 || a2 < 79.24)
    && (a1 > 45.45 || a2 < 96.06 || a2 > 115.52 || a1 < 41.38)
    && (a1 < 39.6 || a2 < 115.52)
    && (a1 < 21.7 || a1 > 25.3 || a2 > 122.5 || a2 < 119.3))
  {
    return 0;
  }
  else
  {
    return 2;
  }
}

uint64_t sub_100113978(unsigned int a1)
{
  if (a1 < 3)
    return a1 + 1;
  else
    return 0;
}

uint64_t sub_100113984(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 5)
    return dword_101CCE160[a1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for GNSS::ReliabilityIndication", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v5[0] = 67109120;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for GNSS::ReliabilityIndication", v5);
    sub_100512490("Generic", 1, 0, 0, "proto::gnss::Reliability ProtobufUtil::toProtobuf(GNSS::ReliabilityIndication)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return 1;
}

uint64_t sub_100113B48(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_100114ED4(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100113BC8(uint64_t **a1, unsigned int a2, int *a3, const std::string *a4)
{
  std::string::size_type size;
  BOOL v7;
  double Current;
  uint64_t *v9;
  double v10;
  double *v11;
  int *v12;
  NSObject *v13;
  void *p_p;
  int v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  int v21;
  const std::string *v22;
  unsigned __int8 *v23;
  NSObject *v24;
  _BYTE *v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  char *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v35;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  char v41;
  int v42;
  _BYTE *v43;
  __int16 v44;
  int v45;
  void *__p;
  _BYTE v47[32];
  std::string v48[2];
  std::string v49;
  int v50;
  int v51;
  uint64_t (**v52)();
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  HIDWORD(v35) = sub_100114254((uint64_t)a1, a2, a3, a4);
  if (HIDWORD(v35))
  {
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v7 = size && *a3 == 2;
    if (v7)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v9 = a1[38];
      if (v9 != (uint64_t *)(a1 + 39))
      {
        v10 = Current;
        while (1)
        {
          v11 = (double *)v9[20];
          if (v11 != (double *)(v9 + 19))
            break;
LABEL_62:
          if (v9[21])
          {
            v32 = (uint64_t *)v9[1];
            if (v32)
            {
              do
              {
                v33 = v32;
                v32 = (uint64_t *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                v33 = (uint64_t *)v9[2];
                v7 = *v33 == (_QWORD)v9;
                v9 = v33;
              }
              while (!v7);
            }
          }
          else
          {
            v33 = sub_1007A3B80(a1 + 38, v9);
          }
          v9 = v33;
          if (v33 == (uint64_t *)(a1 + 39))
            return HIDWORD(v35);
        }
        while (1)
        {
          if (v11[9] + 20.0 >= v10)
          {
            v18 = *((unsigned __int8 *)v9 + 95);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v9 + 95);
            else
              v19 = v9[10];
            v20 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
            v21 = (char)v20;
            if ((v20 & 0x80u) != 0)
              v20 = a4->__r_.__value_.__l.__size_;
            if (v19 == v20)
            {
              if (v21 >= 0)
                v22 = a4;
              else
                v22 = (const std::string *)a4->__r_.__value_.__r.__words[0];
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v9[9], v22, v9[10]))
                {
LABEL_39:
                  if (qword_1022A0030 != -1)
                    dispatch_once(&qword_1022A0030, &stru_102152DC0);
                  v24 = qword_1022A0038;
                  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
                  {
                    sub_1004E5AA8((uint64_t)(v9 + 4), buf);
                    v25 = buf;
                    if (v41 < 0)
                      v25 = *(_BYTE **)buf;
                    v26 = *((_DWORD *)v11 + 4);
                    v27 = *((_DWORD *)v11 + 20);
                    __p = (void *)68289795;
                    *(_WORD *)v47 = 2082;
                    *(_QWORD *)&v47[2] = "";
                    *(_WORD *)&v47[10] = 2081;
                    *(_QWORD *)&v47[12] = v25;
                    *(_WORD *)&v47[20] = 1025;
                    *(_DWORD *)&v47[22] = v26;
                    *(_WORD *)&v47[26] = 1025;
                    *(_DWORD *)&v47[28] = v27;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Sending cached notification for fence\", \"region\":%{private, location:escape_only}s, \"state\":%{private}d, \"type\":%{private}d}", (uint8_t *)&__p, 0x28u);
                    if (v41 < 0)
                      operator delete(*(void **)buf);
                  }
                  memset(v47, 0, sizeof(v47));
                  __p = off_10213F008;
                  memset(v48, 0, sizeof(v48));
                  memset(&v49, 0, sizeof(v49));
                  v51 = 0;
                  v52 = off_10213F058;
                  v53 = 0u;
                  v54 = 0u;
                  v55 = 1;
                  std::string::operator=((std::string *)v47, (const std::string *)(v9 + 5));
                  *(_QWORD *)&v47[24] = v9[8];
                  std::string::operator=(v48, (const std::string *)v9 + 3);
                  std::string::operator=(&v48[1], (const std::string *)v9 + 4);
                  std::string::operator=(&v49, (const std::string *)v9 + 5);
                  v50 = *((_DWORD *)v9 + 36);
                  v55 = *((_DWORD *)v11 + 4);
                  v56 = *((_QWORD *)v11 + 8);
                  if (*((_DWORD *)v11 + 20))
                  {
                    *(_DWORD *)buf = 3;
                  }
                  else
                  {
                    std::string::operator=((std::string *)&v53, (const std::string *)(v11 + 4));
                    *((double *)&v54 + 1) = v11[7];
                    *(_DWORD *)buf = 2;
                  }
                  ((void (*)(uint64_t **, _BYTE *, void **, _QWORD, _QWORD, _QWORD))(*a1)[19])(a1, buf, &__p, 0, a2, 0);
                  v11 = (double *)*((_QWORD *)v11 + 1);
                  v52 = off_10213F058;
                  if (SBYTE7(v54) < 0)
                    operator delete((void *)v53);
                  sub_100114750((uint64_t)&__p);
                  goto LABEL_52;
                }
              }
              else
              {
                if (!*((_BYTE *)v9 + 95))
                  goto LABEL_39;
                v23 = (unsigned __int8 *)(v9 + 9);
                while (*v23 == v22->__r_.__value_.__s.__data_[0])
                {
                  ++v23;
                  v22 = (const std::string *)((char *)v22 + 1);
                  if (!--v18)
                    goto LABEL_39;
                }
              }
            }
            v11 = (double *)*((_QWORD *)v11 + 1);
          }
          else
          {
            if (qword_1022A0030 != -1)
              dispatch_once(&qword_1022A0030, &stru_102152DC0);
            v12 = (int *)(v11 + 2);
            v13 = qword_1022A0038;
            if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
            {
              sub_1004E5AA8((uint64_t)(v9 + 4), &__p);
              p_p = &__p;
              if (v47[15] < 0)
                p_p = __p;
              v15 = *v12;
              *(_DWORD *)buf = 136380931;
              *(_QWORD *)&buf[4] = p_p;
              v39 = 1025;
              v40 = v15;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "iB: Pending notification for fence,%{private}s, state,%{private}d, has expired", buf, 0x12u);
              if ((v47[15] & 0x80000000) != 0)
                operator delete(__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1022A0030 != -1)
                dispatch_once(&qword_1022A0030, &stru_102152DC0);
              v28 = qword_1022A0038;
              sub_1004E5AA8((uint64_t)(v9 + 4), buf);
              v29 = buf;
              if (v41 < 0)
                v29 = *(_BYTE **)buf;
              v30 = *v12;
              v42 = 136380931;
              v43 = v29;
              v44 = 1025;
              v45 = v30;
              LODWORD(v35) = 18;
              v31 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v28, 2, "iB: Pending notification for fence,%{private}s, state,%{private}d, has expired", &v42, v35);
              if (v41 < 0)
                operator delete(*(void **)buf);
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLBTLEFenceManagerConcrete::registerForNotification(int, const CLBTLEFenceManager_Type::Notification &, const std::string &)", "%s\n", v31);
              if (v31 != (char *)&__p)
                free(v31);
            }
            v16 = *(_QWORD *)v11;
            v17 = (double *)*((_QWORD *)v11 + 1);
            *(_QWORD *)(v16 + 8) = v17;
            **((_QWORD **)v11 + 1) = v16;
            --v9[21];
            sub_1007A1E08((uint64_t)(v11 + 2));
            operator delete(v11);
            v11 = v17;
          }
LABEL_52:
          if (v11 == (double *)(v9 + 19))
            goto LABEL_62;
        }
      }
    }
  }
  return HIDWORD(v35);
}

void sub_100114230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_10079CD88((uint64_t)&a35);
  _Unwind_Resume(a1);
}

BOOL sub_100114254(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  _BYTE buf[24];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  int v54;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v38 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v40 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v39;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        v44 = 0u;
        *(_OWORD *)&buf[8] = 0u;
        *(_QWORD *)buf = off_10213F008;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0;
        v51 = off_10213F058;
        v52 = 0u;
        v53 = 0u;
        v50 = 0;
        v54 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1007A3A00();
        }
        v51 = off_10213F058;
        if (SBYTE7(v53) < 0)
          operator delete((void *)v52);
        sub_100114750((uint64_t)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v40 = a1 + 64;
        v29 = byte_1022A4358;
        HIDWORD(v37) = v16;
        *(_QWORD *)buf = (char *)&v37 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v37) = *a3;
        *(_QWORD *)buf = (char *)&v37 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v37) = *a3;
        *(_QWORD *)buf = (char *)&v37 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v37 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v39;
        v32 = sub_1000BC378(v31 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = a2;
    LODWORD(v37) = 18;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v40,
                    v37);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v36);
    if (v36 != buf)
      free(v36);
    return 0;
  }
  return result;
}

void sub_100114730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10079CD88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100114750(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213F008;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1001147D0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v12 + 32);
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v12 + 40));
  std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 64));
  std::string::operator=((std::string *)(a3 + 88), (const std::string *)(v12 + 88));
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(v12 + 112);
  *(_DWORD *)(a3 + 120) = *(_DWORD *)(v12 + 120);
  std::string::operator=((std::string *)(a3 + 136), (const std::string *)(v12 + 136));
  *(_QWORD *)(a3 + 160) = *(_QWORD *)(v12 + 160);
  v13 = *(_QWORD *)(v12 + 168);
  *(_DWORD *)(a3 + 176) = *(_DWORD *)(v12 + 176);
  *(_QWORD *)(a3 + 168) = v13;
  return 1;
}

uint64_t sub_1001148AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  int v7;
  NSObject *v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  NSObject *v13;
  uint8_t *v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE v26[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v4 = (_QWORD *)(a2 + 8);
  sub_100008848(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *v4 = 0;
  v5 = *(_QWORD **)(a1 + 240);
  if (v5 == (_QWORD *)(a1 + 248))
    goto LABEL_36;
  v6 = 0;
  do
  {
    if (!*((_BYTE *)v5 + 903))
      goto LABEL_17;
    v7 = *((_DWORD *)v5 + 224);
    if (v7 == 10)
    {
      if (*(_BYTE *)(a1 + 705))
        goto LABEL_16;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v13 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Indoor provider active, but pipelined not activated", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        *(_WORD *)v26 = 0;
        LODWORD(v25) = 2;
        v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Indoor provider active, but pipelined not activated", v26, v25, *(_QWORD *)v26);
        goto LABEL_32;
      }
    }
    else
    {
      if (v7 != 11 || *(_BYTE *)(a1 + 706))
      {
LABEL_16:
        *(_DWORD *)buf = *((_DWORD *)v5 + 224);
        sub_1000C6190((uint64_t **)a2, (int *)buf, buf);
        v6 |= *((_DWORD *)v5 + 224) == 1;
        goto LABEL_17;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Wifi2 provider active, but pipelined not activated", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        *(_WORD *)v26 = 0;
        LODWORD(v25) = 2;
        v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Wifi2 provider active, but pipelined not activated", v26, v25, *(_QWORD *)v26);
LABEL_32:
        v14 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v9);
        if (v14 != buf)
          free(v14);
      }
    }
LABEL_17:
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v5[2];
        v12 = *v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v12);
    }
    v5 = v11;
  }
  while (v11 != (_QWORD *)(a1 + 248));
  if ((v6 & 1) != 0)
  {
    v15 = 1;
    goto LABEL_43;
  }
LABEL_36:
  if (*(_BYTE *)(a1 + 704))
  {
    *(_DWORD *)buf = 1;
    sub_1000C6190((uint64_t **)a2, (int *)buf, buf);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "GPSController indicates hardware active while client is not active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v26 = 0;
      LODWORD(v25) = 2;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "GPSController indicates hardware active while client is not active", v26, v25);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
  }
  v15 = 0;
LABEL_43:
  *(_DWORD *)buf = 13;
  sub_1000C6190((uint64_t **)a2, (int *)buf, buf);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v17 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(unsigned __int8 *)(a1 + 704);
    *(_DWORD *)buf = 134349568;
    v32 = v18;
    v33 = 1026;
    v34 = v15;
    v35 = 1026;
    v36 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#techstatus,enquired,sz,%{public}zu,gpsClientActive,%{public}d,gpsHwActive,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v21 = *(_QWORD *)(a2 + 16);
    v22 = *(unsigned __int8 *)(a1 + 704);
    *(_DWORD *)v26 = 134349568;
    *(_QWORD *)&v26[4] = v21;
    v27 = 1026;
    v28 = v15;
    v29 = 1026;
    v30 = v22;
    LODWORD(v25) = 24;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#techstatus,enquired,sz,%{public}zu,gpsClientActive,%{public}d,gpsHwActive,%{public}d", v26, v25);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::getActiveTechs(std::set<int> &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  return 1;
}

id sub_100114ED4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100114F20(a1);
  else
    return 0;
}

id sub_100114F20(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102152E30);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C08068 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102152E30);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101C08068 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

BOOL sub_1001150F4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  __n128 v11;

  v8 = sub_100115178(a1, a2, a3, (const std::string *)a4);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(a4 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a4 + 8);
    if (v9)
    {
      v10 = *a3;
      if (v10 <= 1)
      {
        v11.n128_f64[0] = CFAbsoluteTimeGetCurrent();
        sub_1001160BC(a1, v10, a2, (unsigned __int8 *)a4, v11);
      }
    }
  }
  return v8;
}

BOOL sub_100115178(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t **v34;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _BYTE v45[12];
  __int16 v46;
  int v47;
  _BYTE buf[12];
  __int16 v49;
  int v50;
  char v51[248];
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unint64_t v59;
  __int128 v60;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;

  v44 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v43 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v45 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v44;
        v34 = sub_1000BC378((uint64_t **)(v25 + 40), &v44, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v34 + 5), a4);
        sub_1001157C0(buf);
        sub_1001157C0(v51);
        v52 = 0xFFFF;
        v53 = 0u;
        __asm { FMOV            V1.2D, #-1.0 }
        v54 = xmmword_101BAFC90;
        v55 = _Q1;
        v56 = _Q1;
        v57 = _Q1;
        v58 = 0;
        v59 = 0xBFF0000000000000;
        v60 = 0u;
        v61 = 0;
        v62 = 0xBFF0000000000000;
        v63 = 0x7FFFFFFF;
        v65 = 0u;
        v64 = 0;
        v66 = 0;
        v68 = 1;
        v67 = 0u;
        v69 = 0xBFF0000000000000;
        v70 = _Q1;
        v71 = _Q1;
        v72 = _Q1;
        v73 = _Q1;
        v74 = _Q1;
        v75 = _Q1;
        v76 = xmmword_101BAFC90;
        v77 = 0xFFFF;
        v79 = 0;
        v78 = 0;
        v80 = xmmword_101BAFC90;
        v81 = _Q1;
        v82 = _Q1;
        v83 = _Q1;
        v84 = 0;
        v85 = 0xBFF0000000000000;
        v87 = 0;
        v86 = 0;
        v88 = 0;
        v89 = 0xBFF0000000000000;
        v90 = 0x7FFFFFFF;
        v94 = 0;
        v92 = 0;
        v91 = 0;
        v93 = 0;
        v95 = 0xFFFF;
        v97 = 0;
        v96 = 0;
        v98 = xmmword_101BAFC90;
        v99 = _Q1;
        v100 = _Q1;
        v101 = _Q1;
        v102 = 0;
        v103 = 0xBFF0000000000000;
        v104 = 0;
        v105 = 0;
        v106 = 0;
        v107 = 0xBFF0000000000000;
        v108 = 0x7FFFFFFF;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0xFFFF;
        v115 = 0;
        v114 = 0;
        v116 = xmmword_101BAFC90;
        v117 = _Q1;
        v118 = _Q1;
        v119 = _Q1;
        v120 = 0;
        v121 = 0xBFF0000000000000;
        v123 = 0;
        v122 = 0;
        v124 = 0;
        v125 = 0xBFF0000000000000;
        v126 = 0x7FFFFFFF;
        v128 = 0;
        v127 = 0;
        v130 = 0;
        v129 = 0;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v131 = 0u;
        v152 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10091D26C();
        }
        sub_100115F78((uint64_t)buf);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v45 = a1 + 64;
        v29 = byte_1022A5718;
        HIDWORD(v42) = v16;
        *(_QWORD *)buf = (char *)&v42 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v42 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v42) = *a3;
        *(_QWORD *)buf = (char *)&v42 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v42 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v42) = *a3;
        *(_QWORD *)buf = (char *)&v42 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v42 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v44;
        v32 = sub_1000BC378(v31 + 5, &v44, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        std::string::operator=((std::string *)(v32 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v43 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215E918);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v49 = 1026;
    v50 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215E918);
    v40 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v40 = (_QWORD *)*v40;
    *(_DWORD *)v45 = 136446466;
    *(_QWORD *)&v45[4] = v40;
    v46 = 1026;
    v47 = a2;
    LODWORD(v42) = 18;
    v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v45,
                    v42);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v41);
    if (v41 != buf)
      free(v41);
    return 0;
  }
  return result;
}

void sub_100115790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100115F78((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1001157C0(char *a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;

  sub_1015A2E04(v7, "");
  sub_1015A2E04(v5, "");
  sub_1015A2E04(__p, "");
  sub_1001158A8(a1, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  return a1;
}

void sub_10011585C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

char *sub_1001158A8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __int128 __dst;
  uint64_t v15;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(v12, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
  }
  sub_1015A2E04(__p, "");
  sub_100115A48(a1, &__dst, (__int128 *)v12, (__int128 *)v10, -1, (__int128 *)__p, 0, 0, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_1001159E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

char *sub_100115A48(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, int a5, __int128 *a6, void *a7, char a8, double a9, double a10, double a11, double a12)
{
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  double v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v23 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v23;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v24;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v25 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v25;
  }
  *((double *)__dst + 9) = a9;
  *((double *)__dst + 10) = a10;
  *((double *)__dst + 11) = a11;
  *((double *)__dst + 12) = a11;
  *((double *)__dst + 13) = a12;
  *((_QWORD *)__dst + 14) = 0xBFF0000000000000;
  *((CFAbsoluteTime *)__dst + 15) = CFAbsoluteTimeGetCurrent();
  *((_QWORD *)__dst + 16) = 0xBFF0000000000000;
  *((_QWORD *)__dst + 17) = 0;
  *((_DWORD *)__dst + 36) = 0;
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 19) = 0xBFF0000000000000;
  __dst[176] = a8;
  *((_DWORD *)__dst + 45) = 0;
  *((_DWORD *)__dst + 46) = a5;
  __dst[188] = 0;
  if (*((char *)a6 + 23) < 0)
  {
    sub_100115CE4(__dst + 192, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v26 = *a6;
    *((_QWORD *)__dst + 26) = *((_QWORD *)a6 + 2);
    *((_OWORD *)__dst + 12) = v26;
  }
  *((_QWORD *)__dst + 27) = 0;
  v27 = a7;
  *((_QWORD *)__dst + 28) = 0;
  *((_QWORD *)__dst + 27) = v27;
  *((_QWORD *)__dst + 29) = 0;
  *((_QWORD *)__dst + 30) = 0;
  v28 = *((double *)__dst + 12);
  if (v28 >= 0.0 && v28 < sub_10016F61C((uint64_t)__dst))
  {
    v29 = __dst[23];
    if (v29 < 0)
    {
      if (*((_QWORD *)__dst + 1) != 21)
      {
LABEL_27:
        *((double *)__dst + 12) = sub_10016F61C((uint64_t)__dst);
        goto LABEL_28;
      }
      v30 = *(uint64_t **)__dst;
    }
    else
    {
      v30 = (uint64_t *)__dst;
      if (v29 != 21)
        goto LABEL_27;
    }
    v31 = *v30;
    v32 = v30[1];
    v33 = *(uint64_t *)((char *)v30 + 13);
    if (v31 != 0x6C7070612E6D6F63 || v32 != 0x2E65726F74732E65 || v33 != 0x796C6C6F4A2E6572)
      goto LABEL_27;
  }
LABEL_28:
  *((_DWORD *)__dst + 46) = sub_100115D70((uint64_t)__dst);
  return __dst;
}

void sub_100115C60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *sub_100115CE4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1002594D4();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_100115D70(uint64_t a1)
{
  int v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  unint64_t v15;
  std::string v17;
  std::string v18;
  std::string v19;
  __int128 v20;
  std::string::size_type v21;

  sub_10078A2A0((const void **)(a1 + 48), 47, (uint64_t)&v17);
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (const std::string::value_type *)a1;
  else
    v3 = *(const std::string::value_type **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::string::append(&v17, v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v18, 47);
  v19 = v18;
  memset(&v18, 0, sizeof(v18));
  v9 = *(const std::string::value_type **)(a1 + 24);
  v8 = a1 + 24;
  v7 = v9;
  v10 = *(char *)(v8 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  v13 = std::string::append(&v19, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v21 = v13->__r_.__value_.__r.__words[2];
  v20 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v15 = sub_100115F1C((uint64_t)&v19, (char *)&v20);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  return 678072505 * ((((0xC6A4A7935BD1E995 * v15) >> 32) >> 15) ^ (1540483477 * (_DWORD)v15))
       - 430675100;
}

void sub_100115EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

unint64_t sub_100115F1C(uint64_t a1, char *a2)
{
  uint64_t v2;
  char *v3;
  unint64_t result;
  uint64_t v5;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = *(char **)a2;
  result = 0;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  for (; v2; --v2)
  {
    v5 = *v3++;
    result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

uint64_t sub_100115F78(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(_QWORD *)(a1 + 480) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 463) < 0)
    operator delete(*(void **)(a1 + 440));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100116050(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v11)
    return 0;
  sub_10091D82C(a3, v11);
  return 1;
}

void sub_1001160BC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, __n128 a5)
{
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  NSObject *v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  _BYTE *v20;
  unsigned int v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  NSObject *v32;
  size_t v33;
  _BYTE *v34;
  const void *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  _BYTE *v41;
  unsigned int v42;
  const char *v43;
  const char *v44;
  uint64_t *v45;
  BOOL v46;
  uint64_t v47;
  std::string *v48;
  unsigned int v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  std::string *v55;
  unsigned int v56;
  const char *v57;
  const char *v58;
  char *v59;
  uint64_t *v60;
  NSObject *v61;
  size_t v62;
  _BYTE *v63;
  const void *v64;
  int v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  _BYTE *v70;
  unsigned int v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  NSObject *v82;
  size_t v83;
  _BYTE *v84;
  const void *v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  _BYTE *v91;
  unsigned int v92;
  const char *v93;
  const char *v94;
  uint64_t *v95;
  uint64_t v96;
  std::string *v97;
  unsigned int v98;
  const char *v99;
  const char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  std::string *v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  char *v108;
  uint64_t *v109;
  NSObject *v110;
  size_t v111;
  _BYTE *v112;
  const void *v113;
  int v114;
  const std::string::value_type *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  NSObject *v128;
  size_t v129;
  _BYTE *v130;
  const void *v131;
  int v132;
  const std::string::value_type *v133;
  std::string::size_type v134;
  std::string *v135;
  __int128 v136;
  _BYTE *v137;
  uint64_t *v138;
  uint64_t v139;
  std::string *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _BYTE *v144;
  char *v145;
  const char *v146;
  __n128 v147;
  uint64_t v148;
  int v150;
  std::string v151;
  _BYTE __p[32];
  __int16 v153;
  int v154;
  __int16 v155;
  uint64_t v156;
  _BYTE v157[12];
  __int16 v158;
  _BYTE v159[18];
  __int16 v160;
  int v161;
  __int16 v162;
  uint64_t v163;

  v7 = a5.n128_f64[0];
  v150 = a2;
  v8 = *(uint64_t **)(a1 + 3840);
  v9 = (uint64_t *)(a1 + 3848);
  if (v8 != (uint64_t *)(a1 + 3848))
  {
    v10 = (uint64_t **)(a1 + 3840);
    v148 = 136316162;
    a5.n128_u64[0] = 136381443;
    v147 = a5;
    do
    {
      if (*((double *)v8 + 36) + 20.0 < v7)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10215E938);
        v11 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v8 + 55) >= 0)
            v12 = *((unsigned __int8 *)v8 + 55);
          else
            v12 = v8[5];
          sub_100259584((uint64_t)v157, v12 + 1);
          if (v159[9] >= 0)
            v13 = v157;
          else
            v13 = *(_BYTE **)v157;
          if (v12)
          {
            if (*((char *)v8 + 55) >= 0)
              v14 = v8 + 4;
            else
              v14 = (const void *)v8[4];
            memmove(v13, v14, v12);
          }
          *(_WORD *)&v13[v12] = 47;
          v15 = *((char *)v8 + 79);
          if (v15 >= 0)
            v16 = (const std::string::value_type *)(v8 + 7);
          else
            v16 = (const std::string::value_type *)v8[7];
          if (v15 >= 0)
            v17 = *((unsigned __int8 *)v8 + 79);
          else
            v17 = v8[8];
          v18 = std::string::append((std::string *)v157, v16, v17);
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if ((v159[9] & 0x80000000) != 0)
            operator delete(*(void **)v157);
          v20 = __p;
          if (__p[23] < 0)
            v20 = *(_BYTE **)__p;
          v21 = *((_DWORD *)v8 + 70) + 1;
          v22 = "---";
          if (v21 <= 4)
            v22 = off_10215EB48[v21];
          v23 = "---";
          if ((v150 + 1) <= 4)
            v23 = off_10215EB48[v150 + 1];
          v24 = v8[36];
          *(_DWORD *)v157 = v148;
          *(_QWORD *)&v157[4] = v20;
          v158 = 2080;
          *(_QWORD *)v159 = v22;
          *(_WORD *)&v159[8] = 2080;
          *(_QWORD *)&v159[10] = v23;
          v160 = 1024;
          v161 = a3;
          v162 = 2048;
          v163 = v24;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid notifyFenceEntryExitForAuthorizedFence, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf", v157, 0x30u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v157, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10215E938);
          v47 = qword_1022A0068;
          sub_100914D68((const void **)v8 + 4, &v151);
          v48 = &v151;
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v48 = (std::string *)v151.__r_.__value_.__r.__words[0];
          v49 = *((_DWORD *)v8 + 70) + 1;
          v50 = "---";
          if (v49 <= 4)
            v50 = off_10215EB48[v49];
          v51 = "---";
          if ((v150 + 1) <= 4)
            v51 = off_10215EB48[v150 + 1];
          v52 = v8[36];
          *(_DWORD *)__p = v148;
          *(_QWORD *)&__p[4] = v48;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v50;
          *(_WORD *)&__p[22] = 2080;
          *(_QWORD *)&__p[24] = v51;
          v153 = 1024;
          v154 = a3;
          v155 = 2048;
          v156 = v52;
          LODWORD(v146) = 48;
          v53 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v47, 2, "#Warning Fence: avoid notifyFenceEntryExitForAuthorizedFence, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf", __p, v146, (const char *)v147.n128_u64[0], v147.n128_u32[2], *(double *)&v148);
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v53);
          if (v53 != v157)
            free(v53);
        }
        v25 = sub_10008A9F0(v10, v8);
        sub_10091BCFC((uint64_t)(v8 + 4));
        operator delete(v8);
        goto LABEL_90;
      }
      v26 = *((unsigned __int8 *)v8 + 55);
      if ((v26 & 0x80u) == 0)
        v27 = *((unsigned __int8 *)v8 + 55);
      else
        v27 = v8[5];
      v28 = a4[23];
      v29 = (char)v28;
      if ((v28 & 0x80u) != 0)
        v28 = *((_QWORD *)a4 + 1);
      if (v27 == v28)
      {
        if (v29 >= 0)
          v30 = a4;
        else
          v30 = *(unsigned __int8 **)a4;
        if ((v26 & 0x80) == 0)
        {
          if (*((_BYTE *)v8 + 55))
          {
            v31 = (unsigned __int8 *)(v8 + 4);
            while (*v31 == *v30)
            {
              ++v31;
              ++v30;
              if (!--v26)
                goto LABEL_52;
            }
            goto LABEL_85;
          }
LABEL_52:
          if (*((_DWORD *)v8 + 70) == v150)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10215E938);
            v32 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*((char *)v8 + 55) >= 0)
                v33 = *((unsigned __int8 *)v8 + 55);
              else
                v33 = v8[5];
              sub_100259584((uint64_t)v157, v33 + 1);
              if (v159[9] >= 0)
                v34 = v157;
              else
                v34 = *(_BYTE **)v157;
              if (v33)
              {
                if (*((char *)v8 + 55) >= 0)
                  v35 = v8 + 4;
                else
                  v35 = (const void *)v8[4];
                memmove(v34, v35, v33);
              }
              *(_WORD *)&v34[v33] = 47;
              v36 = *((char *)v8 + 79);
              if (v36 >= 0)
                v37 = (const std::string::value_type *)(v8 + 7);
              else
                v37 = (const std::string::value_type *)v8[7];
              if (v36 >= 0)
                v38 = *((unsigned __int8 *)v8 + 79);
              else
                v38 = v8[8];
              v39 = std::string::append((std::string *)v157, v37, v38);
              v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              *(_QWORD *)&__p[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              if ((v159[9] & 0x80000000) != 0)
                operator delete(*(void **)v157);
              v41 = __p;
              if (__p[23] < 0)
                v41 = *(_BYTE **)__p;
              v42 = *((_DWORD *)v8 + 70) + 1;
              v43 = "---";
              if (v42 <= 4)
                v43 = off_10215EB48[v42];
              v44 = "---";
              if ((v150 + 1) <= 4)
                v44 = off_10215EB48[v150 + 1];
              *(_DWORD *)v157 = v147.n128_u32[0];
              *(_QWORD *)&v157[4] = v41;
              v158 = 2081;
              *(_QWORD *)v159 = v43;
              *(_WORD *)&v159[8] = 2081;
              *(_QWORD *)&v159[10] = v44;
              v160 = 1026;
              v161 = a3;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "notifyFenceEntryExitForAuthorizedFence,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", v157, 0x26u);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v157, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10215E938);
              v54 = qword_1022A0068;
              sub_100914D68((const void **)v8 + 4, &v151);
              v55 = &v151;
              if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v55 = (std::string *)v151.__r_.__value_.__r.__words[0];
              v56 = *((_DWORD *)v8 + 70) + 1;
              v57 = "---";
              if (v56 <= 4)
                v57 = off_10215EB48[v56];
              v58 = "---";
              if ((v150 + 1) <= 4)
                v58 = off_10215EB48[v150 + 1];
              *(_DWORD *)__p = v147.n128_u32[0];
              *(_QWORD *)&__p[4] = v55;
              *(_WORD *)&__p[12] = 2081;
              *(_QWORD *)&__p[14] = v57;
              *(_WORD *)&__p[22] = 2081;
              *(_QWORD *)&__p[24] = v58;
              v153 = 1026;
              v154 = a3;
              LODWORD(v146) = 38;
              v59 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v54, 2, "notifyFenceEntryExitForAuthorizedFence,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", __p, v146);
              if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v151.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v59);
              if (v59 != v157)
                free(v59);
            }
            sub_10091748C(a1, (uint64_t)(v8 + 4), &v150, (__int128 *)(v8 + 39), a3);
          }
          goto LABEL_85;
        }
        if (!memcmp((const void *)v8[4], v30, v8[5]))
          goto LABEL_52;
      }
LABEL_85:
      v45 = (uint64_t *)v8[1];
      if (v45)
      {
        do
        {
          v25 = v45;
          v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v8[2];
          v46 = *v25 == (_QWORD)v8;
          v8 = v25;
        }
        while (!v46);
      }
LABEL_90:
      v8 = v25;
    }
    while (v25 != v9);
  }
  v60 = *(uint64_t **)(a1 + 3864);
  if (v60 != (uint64_t *)(a1 + 3872))
  {
    do
    {
      if (*((double *)v60 + 36) + 20.0 < v7)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10215E938);
        v61 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v60 + 55) >= 0)
            v62 = *((unsigned __int8 *)v60 + 55);
          else
            v62 = v60[5];
          sub_100259584((uint64_t)v157, v62 + 1);
          if (v159[9] >= 0)
            v63 = v157;
          else
            v63 = *(_BYTE **)v157;
          if (v62)
          {
            if (*((char *)v60 + 55) >= 0)
              v64 = v60 + 4;
            else
              v64 = (const void *)v60[4];
            memmove(v63, v64, v62);
          }
          *(_WORD *)&v63[v62] = 47;
          v65 = *((char *)v60 + 79);
          if (v65 >= 0)
            v66 = (const std::string::value_type *)(v60 + 7);
          else
            v66 = (const std::string::value_type *)v60[7];
          if (v65 >= 0)
            v67 = *((unsigned __int8 *)v60 + 79);
          else
            v67 = v60[8];
          v68 = std::string::append((std::string *)v157, v66, v67);
          v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          if ((v159[9] & 0x80000000) != 0)
            operator delete(*(void **)v157);
          v70 = __p;
          if (__p[23] < 0)
            v70 = *(_BYTE **)__p;
          v71 = *((_DWORD *)v60 + 70) + 1;
          v72 = "---";
          if (v71 <= 4)
            v72 = off_10215EB48[v71];
          v73 = "---";
          if ((v150 + 1) <= 4)
            v73 = off_10215EB48[v150 + 1];
          v74 = v60[36];
          *(_DWORD *)v157 = 136381699;
          *(_QWORD *)&v157[4] = v70;
          v158 = 2081;
          *(_QWORD *)v159 = v72;
          *(_WORD *)&v159[8] = 2081;
          *(_QWORD *)&v159[10] = v73;
          v160 = 1026;
          v161 = a3;
          v162 = 2050;
          v163 = v74;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid sendFenceStatusNotification, fence, %{private}s, status, %{private}s, searchStatus, %{private}s, client, %{public}d, timestamp,%{public}.1lf", v157, 0x30u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v157, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10215E938);
          v96 = qword_1022A0068;
          sub_100914D68((const void **)v60 + 4, &v151);
          v97 = &v151;
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v97 = (std::string *)v151.__r_.__value_.__r.__words[0];
          v98 = *((_DWORD *)v60 + 70) + 1;
          v99 = "---";
          if (v98 <= 4)
            v99 = off_10215EB48[v98];
          v100 = "---";
          if ((v150 + 1) <= 4)
            v100 = off_10215EB48[v150 + 1];
          v101 = v60[36];
          *(_DWORD *)__p = 136381699;
          *(_QWORD *)&__p[4] = v97;
          *(_WORD *)&__p[12] = 2081;
          *(_QWORD *)&__p[14] = v99;
          *(_WORD *)&__p[22] = 2081;
          *(_QWORD *)&__p[24] = v100;
          v153 = 1026;
          v154 = a3;
          v155 = 2050;
          v156 = v101;
          LODWORD(v146) = 48;
          v102 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v96, 2, "#Warning Fence: avoid sendFenceStatusNotification, fence, %{private}s, status, %{private}s, searchStatus, %{private}s, client, %{public}d, timestamp,%{public}.1lf", __p, v146);
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v102);
          if (v102 != v157)
            free(v102);
        }
        v75 = sub_10008A9F0((uint64_t **)(a1 + 3864), v60);
        sub_10091BCFC((uint64_t)(v60 + 4));
        operator delete(v60);
        goto LABEL_203;
      }
      v76 = *((unsigned __int8 *)v60 + 55);
      if ((v76 & 0x80u) == 0)
        v77 = *((unsigned __int8 *)v60 + 55);
      else
        v77 = v60[5];
      v78 = a4[23];
      v79 = (char)v78;
      if ((v78 & 0x80u) != 0)
        v78 = *((_QWORD *)a4 + 1);
      if (v77 == v78)
      {
        if (v79 >= 0)
          v80 = a4;
        else
          v80 = *(unsigned __int8 **)a4;
        if ((v76 & 0x80) == 0)
        {
          if (*((_BYTE *)v60 + 55))
          {
            v81 = (unsigned __int8 *)(v60 + 4);
            while (*v81 == *v80)
            {
              ++v81;
              ++v80;
              if (!--v76)
                goto LABEL_166;
            }
            goto LABEL_198;
          }
LABEL_166:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10215E938);
          v82 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)v60 + 55) >= 0)
              v83 = *((unsigned __int8 *)v60 + 55);
            else
              v83 = v60[5];
            sub_100259584((uint64_t)v157, v83 + 1);
            if (v159[9] >= 0)
              v84 = v157;
            else
              v84 = *(_BYTE **)v157;
            if (v83)
            {
              if (*((char *)v60 + 55) >= 0)
                v85 = v60 + 4;
              else
                v85 = (const void *)v60[4];
              memmove(v84, v85, v83);
            }
            *(_WORD *)&v84[v83] = 47;
            v86 = *((char *)v60 + 79);
            if (v86 >= 0)
              v87 = (const std::string::value_type *)(v60 + 7);
            else
              v87 = (const std::string::value_type *)v60[7];
            if (v86 >= 0)
              v88 = *((unsigned __int8 *)v60 + 79);
            else
              v88 = v60[8];
            v89 = std::string::append((std::string *)v157, v87, v88);
            v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v89->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            if ((v159[9] & 0x80000000) != 0)
              operator delete(*(void **)v157);
            v91 = __p;
            if (__p[23] < 0)
              v91 = *(_BYTE **)__p;
            v92 = *((_DWORD *)v60 + 70) + 1;
            v93 = "---";
            if (v92 <= 4)
              v93 = off_10215EB48[v92];
            v94 = "---";
            if ((v150 + 1) <= 4)
              v94 = off_10215EB48[v150 + 1];
            *(_DWORD *)v157 = 136381443;
            *(_QWORD *)&v157[4] = v91;
            v158 = 2081;
            *(_QWORD *)v159 = v93;
            *(_WORD *)&v159[8] = 2081;
            *(_QWORD *)&v159[10] = v94;
            v160 = 1026;
            v161 = a3;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "sendFenceStatusNotification,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", v157, 0x26u);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v157, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10215E938);
            v103 = qword_1022A0068;
            sub_100914D68((const void **)v60 + 4, &v151);
            v104 = &v151;
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v104 = (std::string *)v151.__r_.__value_.__r.__words[0];
            v105 = *((_DWORD *)v60 + 70) + 1;
            v106 = "---";
            if (v105 <= 4)
              v106 = off_10215EB48[v105];
            v107 = "---";
            if ((v150 + 1) <= 4)
              v107 = off_10215EB48[v150 + 1];
            *(_DWORD *)__p = 136381443;
            *(_QWORD *)&__p[4] = v104;
            *(_WORD *)&__p[12] = 2081;
            *(_QWORD *)&__p[14] = v106;
            *(_WORD *)&__p[22] = 2081;
            *(_QWORD *)&__p[24] = v107;
            v153 = 1026;
            v154 = a3;
            LODWORD(v146) = 38;
            v108 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v103, 2, "sendFenceStatusNotification,fence,%{private}s,fenceStatus,%{private}s,searchStatus %{private}s,client,%{public}d", __p, v146);
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v151.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v108);
            if (v108 != v157)
              free(v108);
          }
          sub_1009148CC(a1, (uint64_t)(v60 + 4), (int *)v60 + 70, (int *)v60 + 74, a3);
          goto LABEL_198;
        }
        if (!memcmp((const void *)v60[4], v80, v60[5]))
          goto LABEL_166;
      }
LABEL_198:
      v95 = (uint64_t *)v60[1];
      if (v95)
      {
        do
        {
          v75 = v95;
          v95 = (uint64_t *)*v95;
        }
        while (v95);
      }
      else
      {
        do
        {
          v75 = (uint64_t *)v60[2];
          v46 = *v75 == (_QWORD)v60;
          v60 = v75;
        }
        while (!v46);
      }
LABEL_203:
      v60 = v75;
    }
    while (v75 != (uint64_t *)(a1 + 3872));
  }
  v109 = *(uint64_t **)(a1 + 3888);
  if (v109 != (uint64_t *)(a1 + 3896))
  {
    do
    {
      if (*((double *)v109 + 35) + 20.0 < v7)
      {
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_10215E938);
        v110 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v109 + 55) >= 0)
            v111 = *((unsigned __int8 *)v109 + 55);
          else
            v111 = v109[5];
          sub_100259584((uint64_t)v157, v111 + 1);
          if (v159[9] >= 0)
            v112 = v157;
          else
            v112 = *(_BYTE **)v157;
          if (v111)
          {
            if (*((char *)v109 + 55) >= 0)
              v113 = v109 + 4;
            else
              v113 = (const void *)v109[4];
            memmove(v112, v113, v111);
          }
          *(_WORD *)&v112[v111] = 47;
          v114 = *((char *)v109 + 79);
          if (v114 >= 0)
            v115 = (const std::string::value_type *)(v109 + 7);
          else
            v115 = (const std::string::value_type *)v109[7];
          if (v114 >= 0)
            v116 = *((unsigned __int8 *)v109 + 79);
          else
            v116 = v109[8];
          v117 = std::string::append((std::string *)v157, v115, v116);
          v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v117->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          if ((v159[9] & 0x80000000) != 0)
            operator delete(*(void **)v157);
          v119 = __p;
          if (__p[23] < 0)
            v119 = *(_BYTE **)__p;
          v120 = v109[35];
          *(_DWORD *)v157 = 136381187;
          *(_QWORD *)&v157[4] = v119;
          v158 = 1026;
          *(_DWORD *)v159 = a3;
          *(_WORD *)&v159[4] = 2050;
          *(_QWORD *)&v159[6] = v120;
          _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "#Warning Fence: avoid sendFenceFailureNotification, fence, %{private}s, client, %{public}d, timestamp,%{public}.1lf", v157, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v157, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10215E938);
          v139 = qword_1022A0068;
          sub_100914D68((const void **)v109 + 4, &v151);
          v140 = &v151;
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v140 = (std::string *)v151.__r_.__value_.__r.__words[0];
          v141 = v109[35];
          *(_DWORD *)__p = 136381187;
          *(_QWORD *)&__p[4] = v140;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = a3;
          *(_WORD *)&__p[18] = 2050;
          *(_QWORD *)&__p[20] = v141;
          LODWORD(v146) = 28;
          v142 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v139, 2, "#Warning Fence: avoid sendFenceFailureNotification, fence, %{private}s, client, %{public}d, timestamp,%{public}.1lf", __p, v146);
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v142);
          if (v142 != v157)
            free(v142);
        }
        v121 = sub_10008A9F0((uint64_t **)(a1 + 3888), v109);
        sub_10091BDC8((uint64_t)(v109 + 4));
        operator delete(v109);
        goto LABEL_308;
      }
      v122 = *((unsigned __int8 *)v109 + 55);
      if ((v122 & 0x80u) == 0)
        v123 = *((unsigned __int8 *)v109 + 55);
      else
        v123 = v109[5];
      v124 = a4[23];
      v125 = (char)v124;
      if ((v124 & 0x80u) != 0)
        v124 = *((_QWORD *)a4 + 1);
      if (v123 == v124)
      {
        if (v125 >= 0)
          v126 = a4;
        else
          v126 = *(unsigned __int8 **)a4;
        if ((v122 & 0x80) == 0)
        {
          if (*((_BYTE *)v109 + 55))
          {
            v127 = (unsigned __int8 *)(v109 + 4);
            while (*v127 == *v126)
            {
              ++v127;
              ++v126;
              if (!--v122)
                goto LABEL_275;
            }
            goto LABEL_303;
          }
LABEL_275:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10215E938);
          v128 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)v109 + 55) >= 0)
              v129 = *((unsigned __int8 *)v109 + 55);
            else
              v129 = v109[5];
            sub_100259584((uint64_t)v157, v129 + 1);
            if (v159[9] >= 0)
              v130 = v157;
            else
              v130 = *(_BYTE **)v157;
            if (v129)
            {
              if (*((char *)v109 + 55) >= 0)
                v131 = v109 + 4;
              else
                v131 = (const void *)v109[4];
              memmove(v130, v131, v129);
            }
            *(_WORD *)&v130[v129] = 47;
            v132 = *((char *)v109 + 79);
            if (v132 >= 0)
              v133 = (const std::string::value_type *)(v109 + 7);
            else
              v133 = (const std::string::value_type *)v109[7];
            if (v132 >= 0)
              v134 = *((unsigned __int8 *)v109 + 79);
            else
              v134 = v109[8];
            v135 = std::string::append((std::string *)v157, v133, v134);
            v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v135->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v136;
            v135->__r_.__value_.__l.__size_ = 0;
            v135->__r_.__value_.__r.__words[2] = 0;
            v135->__r_.__value_.__r.__words[0] = 0;
            if ((v159[9] & 0x80000000) != 0)
              operator delete(*(void **)v157);
            v137 = __p;
            if (__p[23] < 0)
              v137 = *(_BYTE **)__p;
            *(_DWORD *)v157 = 136380931;
            *(_QWORD *)&v157[4] = v137;
            v158 = 1026;
            *(_DWORD *)v159 = a3;
            _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "sendFenceFailureNotification,fence,%{private}s,client,%{public}d", v157, 0x12u);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v157, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10215E938);
            v143 = qword_1022A0068;
            sub_100914D68((const void **)v109 + 4, (std::string *)__p);
            v144 = __p;
            if (__p[23] < 0)
              v144 = *(_BYTE **)__p;
            LODWORD(v151.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)v151.__r_.__value_.__r.__words + 4) = (std::string::size_type)v144;
            WORD2(v151.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v151.__r_.__value_.__r.__words[1] + 6) = a3;
            LODWORD(v146) = 18;
            v145 = (char *)_os_log_send_and_compose_impl(2, 0, v157, 1628, &_mh_execute_header, v143, 2, "sendFenceFailureNotification,fence,%{private}s,client,%{public}d", &v151, v146);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            sub_100512490("Generic", 1, 0, 2, "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceStatus, int, const std::string &)", "%s\n", v145);
            if (v145 != v157)
              free(v145);
          }
          sub_100914658(a1, (uint64_t)(v109 + 4));
          goto LABEL_303;
        }
        if (!memcmp((const void *)v109[4], v126, v109[5]))
          goto LABEL_275;
      }
LABEL_303:
      v138 = (uint64_t *)v109[1];
      if (v138)
      {
        do
        {
          v121 = v138;
          v138 = (uint64_t *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          v121 = (uint64_t *)v109[2];
          v46 = *v121 == (_QWORD)v109;
          v109 = v121;
        }
        while (!v46);
      }
LABEL_308:
      v109 = v121;
    }
    while (v121 != (uint64_t *)(a1 + 3896));
  }
}

void sub_10011766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1001176A4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100117BA0(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_1001176F0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_100117BA0(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_100117AC4(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214F050);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214F050);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100117AC4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100117BA0(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_100117BEC(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_100117BA0(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100118060(a1);
  else
    return 0;
}

uint64_t **sub_100117BEC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 40) = _Q0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

id sub_100117CB4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2D90);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C427D3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2D90);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2D90);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C427D3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021A2D90);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAppMonitor_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100118060(void *a1)
{
  id v2;
  id v3;
  id v4;
  id result;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  _BYTE v14[24];
  unint64_t v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;

  v2 = objc_msgSend(a1, "binaryVersion");
  v3 = objc_msgSend(a1, "sizeOfType");
  if (v2 == (id)1)
  {
    v4 = v3;
    result = objc_msgSend(a1, "cppObjectPtr");
    if (v4 == (id)1528)
      return result;
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213E4D0);
      v6 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        v17 = v4;
        v18 = 2048;
        v19 = 1528;
        v20 = 2080;
        v21 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213E4D0);
      v7 = qword_10229FC38;
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)&v14[4] = v4;
      *(_WORD *)&v14[12] = 2048;
      *(_QWORD *)&v14[14] = 1528;
      *(_WORD *)&v14[22] = 2080;
      v15 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
      v8 = "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has chang"
           "ed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly";
      goto LABEL_21;
    }
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v12 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v17 = v4;
      v18 = 2048;
      v19 = 1528;
      v20 = 2080;
      v21 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v7 = qword_10229FC38;
    *(_DWORD *)v14 = 134218498;
    *(_QWORD *)&v14[4] = v4;
    *(_WORD *)&v14[12] = 2048;
    *(_QWORD *)&v14[14] = 1528;
    *(_WORD *)&v14[22] = 2080;
    v15 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
    v8 = "Size mismatch between encoded (%zu) and decoded (%zu) objects! This is possibly because the version has changed"
         " on one side and possibly broken ABI compatibility. Please update your type for %s accordingly";
  }
  else
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213E4D0);
      v9 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        v17 = v2;
        v18 = 2048;
        v19 = 1;
        v20 = 2080;
        v21 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213E4D0);
      v7 = qword_10229FC38;
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)&v14[4] = v2;
      *(_WORD *)&v14[12] = 2048;
      *(_QWORD *)&v14[14] = 1;
      *(_WORD *)&v14[22] = 2080;
      v15 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
      v8 = "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version "
           "has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly";
LABEL_21:
      v10 = 16;
      goto LABEL_41;
    }
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v11 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v17 = v2;
      v18 = 2048;
      v19 = 1;
      v20 = 2080;
      v21 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213E4D0);
    v7 = qword_10229FC38;
    *(_DWORD *)v14 = 134218498;
    *(_QWORD *)&v14[4] = v2;
    *(_WORD *)&v14[12] = 2048;
    *(_QWORD *)&v14[14] = 1;
    *(_WORD *)&v14[22] = 2080;
    v15 = 0x8000000101BBF658 & 0x7FFFFFFFFFFFFFFFLL;
    v8 = "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version ha"
         "s changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly";
  }
  v10 = 17;
LABEL_41:
  v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, v10, v8, v14, 32, *(_OWORD *)v14, *(_QWORD *)&v14[16], v15);
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v13);
  if (v13 != (char *)buf)
    free(v13);
  return 0;
}

uint64_t sub_10011869C(uint64_t a1, int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t result;
  int v12;
  _OWORD *v13;
  _BOOL4 v14;
  double Current;
  double v16;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  double *v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  CFAbsoluteTime v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFAbsoluteTime v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  double v59;
  double v60;
  double v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  CFAbsoluteTime v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _BYTE buf[12];
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  CFAbsoluteTime v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  double v82;
  __int16 v83;
  uint64_t v84;

  HIDWORD(v61) = a2;
  *(_QWORD *)buf = (char *)&v61 + 4;
  v10 = sub_100119078(a1 + 1064, (int *)&v61 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result = sub_100118C5C(a1, HIDWORD(v61), a3);
  if (!(_DWORD)result)
    return result;
  v12 = *a3;
  if (*a3 >= 5)
  {
    if (v12 == 9)
    {
      *((_DWORD *)v10 + 8) = 0xFFFF;
      *(uint64_t *)((char *)v10 + 44) = 0;
      *(uint64_t *)((char *)v10 + 36) = 0;
      *(_OWORD *)((char *)v10 + 52) = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)((char *)v10 + 68) = _Q0;
      *(_OWORD *)((char *)v10 + 84) = _Q0;
      *(_OWORD *)((char *)v10 + 100) = _Q0;
      *((_DWORD *)v10 + 29) = 0;
      v10[16] = 0;
      v10[17] = 0;
      v10[15] = 0xBFF0000000000000;
      *((_DWORD *)v10 + 36) = 0;
      *(uint64_t *)((char *)v10 + 148) = 0xBFF0000000000000;
      *((_DWORD *)v10 + 39) = 0x7FFFFFFF;
      v10[21] = 0;
      v10[22] = 0;
      v10[20] = 0;
      result = 1;
      *((_BYTE *)v10 + 184) = 0;
      return result;
    }
    if (v12 != 39)
      return 1;
  }
  v13 = v10 + 4;
  v14 = sub_100119130((uint64_t)(v10 + 4), a4, 1);
  Current = CFAbsoluteTimeGetCurrent();
  v16 = *(double *)(a4 + 76);
  if (v14 || v16 < *(double *)((char *)v10 + 108))
    return 0;
  v18 = *(double *)(a4 + 20);
  v19 = *(double *)((char *)v10 + 52);
  if (v19 < 0.0
    || ((v20 = *(double *)(a6 + 8), v21 = v19 - v18, v20 >= 0.0) ? (v22 = v20 < v21) : (v22 = 1),
        v22 || (v23 = (double *)(a1 + 128), sub_10011E258(v23, (uint64_t)(v10 + 4), a4), v20 < v24)))
  {
    if (Current - v16 <= 1.0)
    {
      if (v18 > 0.0)
      {
        v34 = *(_OWORD *)(a4 + 16);
        *v13 = *(_OWORD *)a4;
        *((_OWORD *)v10 + 3) = v34;
        v35 = *(_OWORD *)(a4 + 32);
        v36 = *(_OWORD *)(a4 + 48);
        v37 = *(_OWORD *)(a4 + 80);
        *((_OWORD *)v10 + 6) = *(_OWORD *)(a4 + 64);
        *((_OWORD *)v10 + 7) = v37;
        *((_OWORD *)v10 + 4) = v35;
        *((_OWORD *)v10 + 5) = v36;
        v38 = *(_OWORD *)(a4 + 96);
        v39 = *(_OWORD *)(a4 + 112);
        v40 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)((char *)v10 + 172) = *(_OWORD *)(a4 + 140);
        *((_OWORD *)v10 + 9) = v39;
        *((_OWORD *)v10 + 10) = v40;
        *((_OWORD *)v10 + 8) = v38;
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v25 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_QWORD *)(a4 + 4);
        v27 = *(_QWORD *)(a4 + 12);
        v28 = CFAbsoluteTimeGetCurrent() - *(double *)(a4 + 76);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v26;
        v75 = 2048;
        v76 = v27;
        v77 = 2048;
        v78 = v28;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v29 = qword_1022A01D8;
        v30 = *(_QWORD *)(a4 + 4);
        v31 = *(_QWORD *)(a4 + 12);
        v32 = CFAbsoluteTimeGetCurrent() - *(double *)(a4 + 76);
        v62 = 134218496;
        v63 = v30;
        v64 = 2048;
        v65 = v31;
        v66 = 2048;
        v67 = v32;
        LODWORD(v59) = 32;
        v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering", COERCE_DOUBLE(&v62), v59, v60);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)", "%s\n", v33);
        if (v33 != buf)
          free(v33);
      }
    }
    return 1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v45 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(_QWORD *)(a6 + 8);
    v47 = *(uint64_t *)((char *)v10 + 36);
    v48 = *(double *)((char *)v10 + 44);
    v49 = *(_QWORD *)(a4 + 4);
    v60 = *(double *)(a4 + 12);
    sub_10011E258(v23, (uint64_t)(v10 + 4), a4);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = v46;
    v75 = 2048;
    v76 = v47;
    v77 = 2048;
    v78 = v48;
    v79 = 2048;
    v80 = v49;
    v81 = 2048;
    v82 = v60;
    v83 = 2048;
    v84 = v50;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)", buf, 0x3Eu);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v51 = qword_1022A01D8;
    v52 = *(_QWORD *)(a6 + 8);
    v53 = *(uint64_t *)((char *)v10 + 36);
    v54 = *(double *)((char *)v10 + 44);
    v55 = *(_QWORD *)(a4 + 4);
    v56 = *(_QWORD *)(a4 + 12);
    sub_10011E258(v23, (uint64_t)v13, a4);
    v62 = 134219264;
    v63 = v52;
    v64 = 2048;
    v65 = v53;
    v66 = 2048;
    v67 = v54;
    v68 = 2048;
    v69 = v55;
    v70 = 2048;
    v71 = v56;
    v72 = 2048;
    v73 = v57;
    LODWORD(v59) = 62;
    v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)", COERCE_DOUBLE(&v62), v59, v60, v61);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)", "%s\n", v58);
    if (v58 != buf)
      free(v58);
    return 0;
  }
  return result;
}

uint64_t sub_100118C5C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;

  switch(*a3)
  {
    case 1:
      v10 = 0;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v10);
      return v5 ^ 1u;
    case 2:
      v10 = 1;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v10) & 1) != 0)
        return 0;
      v9 = 0;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v9);
      return v5 ^ 1u;
    case 3:
      v10 = 2;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v10) & 1) != 0)
        return 0;
      v9 = 1;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v9) & 1) != 0)
        return 0;
      v8 = 0;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v8);
      return v5 ^ 1u;
    case 4:
      goto LABEL_4;
    default:
      if (*a3 != 39)
        return 1;
LABEL_4:
      v10 = 3;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v10) & 1) != 0)
        return 0;
      v9 = 2;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v9) & 1) != 0)
        return 0;
      v8 = 1;
      if (((*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v8) & 1) != 0)
        return 0;
      v7 = 0;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v7);
      return v5 ^ 1u;
  }
}

BOOL sub_100118DF8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  _QWORD *v29;
  __int16 v30;
  int v31;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v29 = v11;
      v30 = 1026;
      v31 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v24 = 136446466;
      v25 = v22;
      v26 = 1026;
      v27 = a2;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                      &v24,
                      18);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100119078(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_10014D258(a1, a4, (uint64_t)&v11);
    sub_1000145B0((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

BOOL sub_100119130(uint64_t a1, uint64_t a2, int a3)
{
  double v5;
  double v6;
  _BOOL4 v8;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  double v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;

  if (a1 && a2)
  {
    if (a3)
    {
      v5 = *(double *)(a1 + 88);
      v6 = *(double *)(a2 + 88);
      v8 = v5 == -1.0 && v6 == -1.0 || vabdd_f64(v5 + *(double *)(a1 + 76), *(double *)(a2 + 76) + v6) < 2.22044605e-16;
    }
    else
    {
      v8 = *(double *)(a1 + 76) == *(double *)(a2 + 76);
    }
    if (*(double *)(a1 + 4) != *(double *)(a2 + 4)
      || *(double *)(a1 + 12) != *(double *)(a2 + 12)
      || *(double *)(a1 + 20) != *(double *)(a2 + 20)
      || *(double *)(a1 + 28) != *(double *)(a2 + 28)
      || *(double *)(a1 + 36) != *(double *)(a2 + 36)
      || *(double *)(a1 + 44) != *(double *)(a2 + 44)
      || *(double *)(a1 + 60) != *(double *)(a2 + 60))
    {
      return 0;
    }
    if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      v8 = 0;
    if (!v8)
      return 0;
    if (*(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124) || *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132))
      return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v12 = *(_QWORD *)(a1 + 4);
      v13 = *(_QWORD *)(a1 + 12);
      v14 = *(_DWORD *)(a1 + 132);
      v15 = *(_QWORD *)(a2 + 4);
      v16 = *(_QWORD *)(a2 + 12);
      v17 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 134219264;
      v40 = v12;
      v41 = 2048;
      v42 = v13;
      v43 = 1024;
      v44 = v14;
      v45 = 2048;
      v46 = v15;
      v47 = 2048;
      v48 = v16;
      v49 = 1024;
      v50 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)", buf, 0x36u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v19 = *(_QWORD *)(a1 + 4);
      v20 = *(_QWORD *)(a1 + 12);
      v21 = *(_DWORD *)(a1 + 132);
      v22 = *(_QWORD *)(a2 + 4);
      v23 = *(_QWORD *)(a2 + 12);
      v24 = *(_DWORD *)(a2 + 132);
      v27 = 134219264;
      v28 = v19;
      v29 = 2048;
      v30 = v20;
      v31 = 1024;
      v32 = v21;
      v33 = 2048;
      v34 = v22;
      v35 = 2048;
      v36 = v23;
      v37 = 1024;
      v38 = v24;
      LODWORD(v26) = 54;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)", COERCE_DOUBLE(&v27), v26);
      sub_100512490("Generic", 1, 0, 0, "Boolean CLCommonCompareLocationEqualityClientWithTimeCheck(const CLClientLocation *, const CLClientLocation *, BOOL)", "%s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
    if (!*(_DWORD *)(a1 + 132))
      return 1;
    return *(_DWORD *)(a2 + 132) == 0;
  }
  else
  {
    return (a1 | a2) == 0;
  }
}

void sub_1001194B8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationSubscription::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A3888);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A3888);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100119690(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100119670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100119690(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  unint64_t i;
  _QWORD *v10;
  double Current;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD v25[5];
  _BYTE v26[16];
  _DWORD v27[4];
  uint8_t buf[8];
  _QWORD v29[5];
  _QWORD v30[5];

  sub_100119F3C(v26);
  v7 = *(unsigned int *)a3;
  if (v7 > 0x27)
    return sub_10011A5A8(v26);
  if (((1 << v7) & 0x800040003FLL) != 0)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10011A5B4;
    v25[3] = &unk_1021380A8;
    v25[4] = a1;
    sub_10011A810(a1, (_OWORD *)a4, (uint64_t)v25);
    if (*(_BYTE *)(a1 + 312))
    {
      v8 = *(int **)(a4 + 800);
      if (v8)
      {
        for (i = 0; i < sub_10104BD1C(v8); ++i)
        {
          sub_10104B598(*(_QWORD *)(a4 + 800), i, (uint64_t)buf);
          sub_1001247A0(a1, (uint64_t)buf);
          v8 = *(int **)(a4 + 800);
        }
      }
      else
      {
        sub_1001247A0(a1, a4);
      }
      v29[0] = CFSTR("ClientKey");
      v10 = (_QWORD *)(a1 + 328);
      if (*(char *)(a1 + 351) < 0)
        v10 = (_QWORD *)*v10;
      v30[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
      v29[1] = CFSTR("DeliveredLocationCount");
      v30[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 436));
      v29[2] = CFSTR("DesiredHAccuracy");
      v30[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 384));
      v29[3] = CFSTR("ReportedHAccuracy");
      v30[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a4 + 20));
      v29[4] = CFSTR("CorrectiveCompensation");
      v30[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100FFB2C8(a1, 12) ^ 1);
      AnalyticsSendEvent(CFSTR("com.apple.locationd.client.accuracyrelationship"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 5));
      Current = CFAbsoluteTimeGetCurrent();
      v12 = *(double *)(a4 + 76);
      if (vabdd_f64(Current, v12) < 3.0)
      {
        v13 = v12 - *(double *)(a1 + 320);
        if (v13 < 0.0)
          v13 = 0.0;
        if (*(double *)(a1 + 408) < 0.0)
          *(double *)(a1 + 408) = v13;
        if (*(double *)(a1 + 416) < 0.0 && *(_DWORD *)(a4 + 96) == 1)
          *(double *)(a1 + 416) = v13;
        v14 = *(double *)(a1 + 400);
        v15 = *(double *)(a4 + 20);
        if (v14 < 0.0 || v15 >= 0.0 && v15 < v14)
          *(double *)(a1 + 400) = v15;
        v16 = *(double *)(a4 + 44);
        if (*(double *)(a1 + 424) < v16)
          *(double *)(a1 + 424) = v16;
      }
    }
    return sub_10011A5A8(v26);
  }
  if (v7 != 9)
  {
    if (((1 << v7) & 0xC10000000) == 0)
      return sub_10011A5A8(v26);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    a1 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_DWORD *)a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)a1, OS_LOG_TYPE_DEFAULT, "Wiring bug: %{public}d should not notify", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v23 = *(_DWORD *)a3;
      v27[0] = 67240192;
      v27[1] = v23;
      a1 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Wiring bug: %{public}d should not notify", v27, 8);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", (const char *)a1);
      if ((uint8_t *)a1 != buf)
        free((void *)a1);
    }
    abort_report_np("Wiring bug: unexpected notification");
    __break(1u);
LABEL_53:
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    goto LABEL_41;
  }
  a3 = &qword_1022A0000;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "notifying clients of unavailable location", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_31;
  bzero(buf, 0x65CuLL);
  if (qword_1022A01C0 != -1)
    goto LABEL_53;
LABEL_41:
  LOWORD(v27[0]) = 0;
  LODWORD(v24) = 2;
  v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "notifying clients of unavailable location", v27, v24);
  sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
  if (v20 != (char *)buf)
    free(v20);
LABEL_31:
  *(_QWORD *)buf = sub_10011A5AC((uint64_t)v26);
  sub_10116760C(a1, buf);
  if (*(_BYTE *)(a1 + 241))
  {
    if (a3[56] != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BATCH: location unavailable caused batch failure", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (a3[56] != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      LOWORD(v27[0]) = 0;
      LODWORD(v24) = 2;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "BATCH: location unavailable caused batch failure", v27, v24);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_1011655AC(a1, 11);
  }
  return sub_10011A5A8(v26);
}

void sub_100119D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100119D70(_QWORD *a1)
{
  CFMutableDictionaryRef Mutable;
  NSObject *v3;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *a1 = off_102141960;
  a1[1] = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create new mutable dictionary", v6, 2);
      sub_100512490("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return a1;
}

uint64_t sub_100119F40(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  id v18;
  NSObject *v19;
  id v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v25;
  id v26;
  char *v27;
  void *v28;
  char *v29;
  void *v30;
  _OWORD v31[8];
  _OWORD v32[2];
  _BYTE v33[16];
  int v34;
  id v35;
  uint8_t buf[4];
  _BYTE v37[14];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _BYTE v43[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_100119F3C(v33);
  if (sub_10011A5BC(v2))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5 = sub_1003471BC(v2);
      v6 = *(_QWORD *)(v2 + 304);
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)v37 = 0;
      *(_WORD *)&v37[4] = 2082;
      *(_QWORD *)&v37[6] = "";
      v38 = 2114;
      v39 = v4;
      v40 = 2050;
      v41 = v5;
      v42 = 1040;
      *(_DWORD *)v43 = 156;
      *(_WORD *)&v43[4] = 2097;
      *(_QWORD *)&v43[6] = a1 + 40;
      *(_WORD *)&v43[14] = 2050;
      *(_QWORD *)&v43[16] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending location to client\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\", \"location\":%{private, location:CLClientLocation}.*P, \"desiredAccuracy\":\"%{public}f\"}", buf, 0x40u);
    }
    if (objc_msgSend(objc_msgSend(*(id *)(v2 + 24), "clientAnchor"), "isEqualToString:", CFSTR("/System/Library/PrivateFrameworks/IPTelephony.framework")))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021A3908);
      v7 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 44);
        v9 = *(_QWORD *)(a1 + 52);
        v10 = *(_QWORD *)(a1 + 68);
        v11 = *(_QWORD *)(a1 + 60);
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)v37 = 0;
        *(_WORD *)&v37[4] = 2082;
        *(_QWORD *)&v37[6] = "";
        v38 = 2049;
        v39 = v8;
        v40 = 2049;
        v41 = v9;
        v42 = 2049;
        *(_QWORD *)v43 = v10;
        *(_WORD *)&v43[8] = 2049;
        *(_QWORD *)&v43[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd #thumper Caching location \", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\"}", buf, 0x3Au);
      }
      v12 = objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "vendor"), "proxyForService:", CFSTR("CLGnssProvider"));
      v13 = *(_OWORD *)(a1 + 152);
      v31[6] = *(_OWORD *)(a1 + 136);
      v31[7] = v13;
      v32[0] = *(_OWORD *)(a1 + 168);
      *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(a1 + 180);
      v14 = *(_OWORD *)(a1 + 88);
      v31[2] = *(_OWORD *)(a1 + 72);
      v31[3] = v14;
      v15 = *(_OWORD *)(a1 + 120);
      v31[4] = *(_OWORD *)(a1 + 104);
      v31[5] = v15;
      v16 = *(_OWORD *)(a1 + 56);
      v31[0] = *(_OWORD *)(a1 + 40);
      v31[1] = v16;
      objc_msgSend(v12, "cacheEmergencyAWDStatistics:", v31);
    }
    v17 = (void *)sub_10011A5AC((uint64_t)v33);
    v30 = v17;
    if (objc_msgSend(objc_msgSend(v17, "allKeys"), "containsObject:", CFSTR("CoarseMetaData")))
    {
      v18 = objc_msgSend(v17, "valueForKey:", CFSTR("CoarseMetaData"));
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v19 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v20 = objc_msgSend(v18, "length");
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v37 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CoarseMetaData found in nvp. Encoded data size : %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v25 = qword_1022A01C8;
        v26 = objc_msgSend(v18, "length");
        v34 = 134217984;
        v35 = v26;
        v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "CoarseMetaData found in nvp. Encoded data size : %lu", &v34);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
    }
    if (*(_DWORD *)(a1 + 136) == 12)
      sub_1011673D0(v2, &v30);
    else
      sub_10011A5CC(v2, &v30);
    v21 = *(double *)(a1 + 200);
    if (v21 >= 0.0)
    {
      *(double *)(v2 + 248) = v21;
      *(_QWORD *)(v2 + 256) = *(_QWORD *)(a1 + 116);
    }
    if (*(_BYTE *)(v2 + 241)
      && (*(double *)(a1 + 116) > *(double *)(v2 + 272) || *(double *)(v2 + 248) > *(double *)(v2 + 264)))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v22 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_QWORD *)(v2 + 24);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v37 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "BATCH: successfully ended for %@", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v28 = *(void **)(v2 + 24);
        v34 = 138412290;
        v35 = v28;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "BATCH: successfully ended for %@", &v34, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)_block_invoke", "%s\n", v29);
        if (v29 != (char *)buf)
          free(v29);
      }
      sub_101165350(v2);
      sub_1011655AC(v2, 0xFFFFFFFFLL);
    }
  }
  return sub_10011A5A8(v33);
}

void sub_10011A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_10011A5A8(&a33);
  _Unwind_Resume(a1);
}

_QWORD *sub_10011A56C(_QWORD *a1)
{
  const void *v2;

  *a1 = off_102141960;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_10011A5AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_10011A5B4(uint64_t a1, uint64_t a2)
{
  sub_10011CECC(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_10011A5BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
}

void sub_10011A5CC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_1021A3AC8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10011A660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10011A678(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10011A704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10011A718(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  double v18;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = *a2;
    v16 = 0;
  }
  v17 = a3;
  v18 = a4;
  sub_10011D4E8(a1, (uint64_t)&v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v14)
  {
    v12 = (unint64_t *)&v14->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_10011A7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10011A810(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned __int8 v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  uint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[6];
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void *__p;
  char v40;
  std::__shared_weak_count *v41;
  id v42;
  _OWORD v43[8];
  _OWORD v44[2];
  _BYTE v45[688];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  void *v48;
  char v49;
  std::__shared_weak_count *v50;
  id v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDynamicAccuracyReductionKey")), "BOOLValue");
  if (objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 12) && (v6 & 1) != 0)
  {
    sub_10052D218(a1 + 520, &v52);
    sub_10011D234((uint64_t)v45, (uint64_t)a2);
    v7 = (void *)sub_1001B828C(a1);
    v8 = objc_alloc((Class)CLLocation);
    v9 = a2[7];
    v43[6] = a2[6];
    v43[7] = v9;
    v44[0] = a2[8];
    *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)((char *)a2 + 140);
    v10 = a2[3];
    v43[2] = a2[2];
    v43[3] = v10;
    v11 = a2[5];
    v43[4] = a2[4];
    v43[5] = v11;
    v12 = a2[1];
    v43[0] = *a2;
    v43[1] = v12;
    v13 = objc_msgSend(v8, "initWithClientLocation:", v43);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3321888768;
    v34[2] = sub_101166FD0;
    v34[3] = &unk_1021A3798;
    v34[5] = v52;
    v35 = v53;
    if (v53)
    {
      p_shared_weak_owners = &v53->__shared_weak_owners_;
      do
        v15 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v15 + 1, (unint64_t *)p_shared_weak_owners));
    }
    sub_10011D234((uint64_t)&v36, (uint64_t)v45);
    v34[4] = a3;
    objc_msgSend(v7, "reduceAccuracy:withReply:", v13, v34);

    v16 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v40 < 0)
      operator delete(__p);
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v37;
    if (v37)
    {
      v23 = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v35)
      std::__shared_weak_count::__release_weak(v35);

    v25 = v50;
    if (v50)
    {
      v26 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v49 < 0)
      operator delete(v48);
    v28 = v47;
    if (v47)
    {
      v29 = (unint64_t *)&v47->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v46;
    if (v46)
    {
      v32 = (unint64_t *)&v46->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v53)
      std::__shared_weak_count::__release_weak(v53);
  }
  else
  {
    (*(void (**)(uint64_t, _OWORD *))(a3 + 16))(a3, a2);
  }
}

void sub_10011AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v18;

  sub_1004B4F0C(v15);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  sub_1004B4F0C((uint64_t)&STACK[0x6D8]);
  v18 = *(std::__shared_weak_count **)(v16 - 56);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_10011AB90(_BYTE *a1, UInt8 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = sub_10011ABD0(a1);
  v7[1] = v5;
  return sub_10011ADE0(a2, a3, (uint64_t)v7);
}

unint64_t sub_10011ABD0(_BYTE *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  int v7;

  v2 = sub_10011AC50((uint64_t)a1);
  if (v2)
  {
    v3 = v2;
    v4 = sub_10011ADC0((uint64_t)v2);
    v5 = *((unsigned __int8 *)v3 + 194) << 8;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (a1[277] || a1[278] || a1[279])
    v7 = 0x10000;
  else
    v7 = a1[280] << 16;
  return (v7 | v5) & 0xFFFF00 | v6;
}

_QWORD *sub_10011AC50(uint64_t a1)
{
  _QWORD *result;
  const void *v2;
  _QWORD *v3;
  uint64_t *v4;
  _UNKNOWN **v5;

  result = sub_10011ACB0((_QWORD *)(a1 + 288), (uint64_t *)&v5);
  if (result)
  {
    v2 = (const void *)result[3];
    if (v2)
    {
      if (result)
        return result;
    }
    else
    {
      result = (_QWORD *)sub_100219F84();
    }
    v3 = (_QWORD *)sub_1019217FC(result);
    return sub_10011ACB0(v3, v4);
  }
  return result;
}

_QWORD *sub_10011ACB0(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *(_QWORD *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v3;
    if (v3 >= *(_QWORD *)&v7)
      v10 = v3 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v3;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v3 == v13)
      {
        if (sub_100270DE8(v12[2], *a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
        }
        else
        {
          v13 &= *(_QWORD *)&v7 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

id sub_10011ADC0(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAlteredAccessoryLocationsKey")), "BOOLValue");
}

uint64_t sub_10011ADE0(UInt8 *bytes, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  const __CFAllocator *v15;
  const UInt8 *v16;
  const __CFAllocator *v17;
  CFDataRef v18;
  CFDataRef v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  const UInt8 *v24;
  const UInt8 *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _WORD v31[8];
  _OWORD v32[8];
  _OWORD v33[2];
  UInt8 v34;
  unsigned int v35;
  UInt8 bytesa[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v6 = 0;
  v35 = 0;
  v34 = 1;
  if (!*(_BYTE *)a3)
    v6 = *((_DWORD *)bytes + 24) == 3 && *((_DWORD *)bytes + 33) == 2;
  v8 = *((_QWORD *)bytes + 100);
  if (v8 && (*(double *)(sub_1003471B4(v8) + 76) < *(double *)(a3 + 8) ? (v9 = 1) : (v9 = v6), v9 != 1))
  {
    if (*(_BYTE *)(a3 + 3))
      v20 = 1;
    else
      v20 = sub_10104BD1C(*((int **)bytes + 100));
    v35 = v20;
    v24 = (const UInt8 *)sub_1003471B4(*((_QWORD *)bytes + 100));
    v18 = CFDataCreate(kCFAllocatorDefault, v24, 156 * v20);
    v34 = *(_BYTE *)(sub_1003471BC(*((_QWORD *)bytes + 100)) + 52);
    if (!*(_BYTE *)(a3 + 2))
    {
      v19 = 0;
      if (!v18)
        goto LABEL_49;
      goto LABEL_38;
    }
    v25 = (const UInt8 *)sub_1003471BC(*((_QWORD *)bytes + 100));
    v19 = CFDataCreate(kCFAllocatorDefault, v25, 560 * v20);
  }
  else
  {
    v10 = *((_OWORD *)bytes + 7);
    v32[6] = *((_OWORD *)bytes + 6);
    v32[7] = v10;
    v33[0] = *((_OWORD *)bytes + 8);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(bytes + 140);
    v11 = *((_OWORD *)bytes + 3);
    v32[2] = *((_OWORD *)bytes + 2);
    v32[3] = v11;
    v12 = *((_OWORD *)bytes + 5);
    v32[4] = *((_OWORD *)bytes + 4);
    v32[5] = v12;
    v13 = *((_OWORD *)bytes + 1);
    v32[0] = *(_OWORD *)bytes;
    v32[1] = v13;
    if (v6)
    {
      result = sub_10145D188((uint64_t)v32, (uint64_t)(bytes + 160));
      if (!(_DWORD)result)
        return result;
      v15 = kCFAllocatorDefault;
      v16 = (const UInt8 *)v32;
      v17 = kCFAllocatorDefault;
    }
    else
    {
      v15 = kCFAllocatorDefault;
      v17 = kCFAllocatorDefault;
      v16 = bytes;
    }
    v18 = CFDataCreate(v17, v16, 156);
    v35 = 1;
    v34 = bytes[212];
    if (*(_BYTE *)(a3 + 2))
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)bytesa = 0u;
      v37 = 0u;
      sub_10014DF90((uint64_t)(bytes + 160), bytesa);
      v19 = CFDataCreate(v15, bytesa, 560);
    }
    else
    {
      v19 = 0;
    }
    v21 = *((_QWORD *)bytes + 165);
    if (v21 && (sub_10011B54C(a2, "CoarseMetaData", v21) & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
      v22 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Failed to convert Coarse MetaData to nvp", bytesa, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
        v31[0] = 0;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, bytesa, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to convert Coarse MetaData to nvp", v31, 2);
        sub_100512490("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v23);
        if (v23 != (char *)bytesa)
        {
          free(v23);
          if (!v18)
            goto LABEL_49;
LABEL_38:
          if (!sub_10011B54C(a2, "Locations", (uint64_t)v18)
            || !sub_10011B4E4(a2, "LocationCount", &v35)
            || !sub_10011B47C(a2, "ForceMapMatching", (_BYTE *)(a3 + 1))
            || !sub_10011B47C(a2, "IsFitnessMatch", &v34))
          {
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
            v26 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)bytesa = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Failed to convert location to nvp", bytesa, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(bytesa, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
              LOWORD(v32[0]) = 0;
              LODWORD(v30) = 2;
              v28 = (char *)_os_log_send_and_compose_impl(2, 0, bytesa, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to convert location to nvp", v32, v30);
              sub_100512490("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v28);
              if (v28 != (char *)bytesa)
                free(v28);
            }
            v35 = 0;
          }
          CFRelease(v18);
          goto LABEL_49;
        }
      }
    }
  }
  if (v18)
    goto LABEL_38;
LABEL_49:
  if (v19)
  {
    if ((sub_10011B54C(a2, "LocationsPrivate", (uint64_t)v19) & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
      v27 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)bytesa = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Failed to convert location private to nvp", bytesa, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(bytesa, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021B76A8);
        LOWORD(v32[0]) = 0;
        LODWORD(v30) = 2;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, bytesa, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Failed to convert location private to nvp", v32, v30);
        sub_100512490("Generic", 1, 0, 0, "int CLLocationProvider_Type::locationDataToNvpWithOptions(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &, const CLLocationProvider_Type::LocationDataSerializationOptions &)", "%s\n", v29);
        if (v29 != (char *)bytesa)
          free(v29);
      }
    }
    CFRelease(v19);
  }
  return v35;
}

BOOL sub_10011B47C(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10011B81C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10011B4E4(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10011B5B8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_10011B54C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

BOOL sub_10011B5B8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int &)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v5 != 0;
}

BOOL sub_10011B81C(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a3)
    v5 = (CFTypeRef *)&kCFBooleanFalse;
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 896))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v8 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 17, "could not create cf type for key %{public}s", &v15, 12);
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const BOOL &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v6 != 0;
}

uint64_t sub_10011BA90(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(a1[1], a2, a3);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

void sub_10011BAC4(char *a1, signed __int32 *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  signed __int32 v10;
  NSObject *v12;
  _QWORD *v13;
  signed __int32 v14;
  _QWORD *v15;
  signed __int32 v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  uint8_t *v24;
  NSObject *v25;
  _QWORD *v26;
  signed __int32 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  signed __int32 v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  NSObject *v36;
  _QWORD *v37;
  signed __int32 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  signed __int32 v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _BYTE v51[40];
  uint8_t buf[4];
  _QWORD *v53;
  __int16 v54;
  signed __int32 v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;

  if (!a1[111])
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v19 = a1 + 8;
      if (a1[31] < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)buf = 136380675;
      v53 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "LocationProvider,#Warning. Provider %{private}s is not enabled. Check defaults writes or internal settings", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v20 = a1 + 8;
    if (a1[31] < 0)
      v20 = (_QWORD *)*v20;
    *(_DWORD *)v51 = 136380675;
    *(_QWORD *)&v51[4] = v20;
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationProvider,#Warning. Provider %{private}s is not enabled. Check defaults writes or internal settings", v51, 12, *(_OWORD *)v51);
    goto LABEL_49;
  }
  v10 = *a2;
  if (*a2 >= 6 && v10 != 39 && v10 != 10)
    goto LABEL_63;
  if (a6)
  {
    if (a1[109])
      goto LABEL_10;
    goto LABEL_39;
  }
  if (a1[109])
  {
LABEL_39:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v22 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v23 = a1 + 8;
      if (a1[31] < 0)
        v23 = (_QWORD *)*v23;
      *(_DWORD *)buf = 136315138;
      v53 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "LocationProvider,Ignoring location for %s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationProvider,Ignoring location for %s", v51);
LABEL_49:
    v24 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n");
    goto LABEL_90;
  }
LABEL_10:
  if (!sub_10011CE88(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v26 = a1 + 8;
      if (a1[31] < 0)
        v26 = (_QWORD *)*v26;
      v27 = *a2;
      v28 = *(_QWORD *)(a3 + 4);
      v29 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)buf = 136381443;
      v53 = v26;
      v54 = 1024;
      v55 = v27;
      v56 = 2048;
      v57 = v28;
      v58 = 2048;
      v59 = v29;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v30 = a1 + 8;
    if (a1[31] < 0)
      v30 = (_QWORD *)*v30;
    v31 = *a2;
    v32 = *(_QWORD *)(a3 + 4);
    v33 = *(_QWORD *)(a3 + 12);
    *(_DWORD *)v51 = 136381443;
    *(_QWORD *)&v51[4] = v30;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v31;
    *(_WORD *)&v51[18] = 2048;
    *(_QWORD *)&v51[20] = v32;
    *(_WORD *)&v51[28] = 2048;
    *(_QWORD *)&v51[30] = v33;
    v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)", v51, 38, *(_QWORD *)v51, *(_OWORD *)&v51[8], *(_OWORD *)&v51[24]);
    goto LABEL_89;
  }
  if (*(double *)(a3 + 36) > 0.0 && !sub_10011E234(*(double *)(a3 + 28)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v36 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v37 = a1 + 8;
      if (a1[31] < 0)
        v37 = (_QWORD *)*v37;
      v38 = *a2;
      v39 = *(_QWORD *)(a3 + 28);
      v40 = *(_QWORD *)(a3 + 36);
      *(_DWORD *)buf = 136381443;
      v53 = v37;
      v54 = 1024;
      v55 = v38;
      v56 = 2048;
      v57 = v39;
      v58 = 2048;
      v59 = v40;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v41 = a1 + 8;
    if (a1[31] < 0)
      v41 = (_QWORD *)*v41;
    v42 = *a2;
    v43 = *(_QWORD *)(a3 + 28);
    v44 = *(_QWORD *)(a3 + 36);
    *(_DWORD *)v51 = 136381443;
    *(_QWORD *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v42;
    *(_WORD *)&v51[18] = 2048;
    *(_QWORD *)&v51[20] = v43;
    *(_WORD *)&v51[28] = 2048;
    *(_QWORD *)&v51[30] = v44;
    v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)", v51, 38, *(_QWORD *)v51, *(_OWORD *)&v51[8], *(_OWORD *)&v51[24]);
    goto LABEL_89;
  }
  if (sub_10011CE64(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v13 = a1 + 8;
      if (a1[31] < 0)
        v13 = (_QWORD *)*v13;
      v14 = *a2;
      *(_DWORD *)buf = 136380931;
      v53 = v13;
      v54 = 1024;
      v55 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of a <0,0> position", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v15 = a1 + 8;
    if (a1[31] < 0)
      v15 = (_QWORD *)*v15;
    v16 = *a2;
    *(_DWORD *)v51 = 136380931;
    *(_QWORD *)&v51[4] = v15;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v16;
    v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationProvider,Provider %{private}s is notifying clients (type=%d) of a <0,0> position", v51, 18, *(_QWORD *)v51, *(_OWORD *)&v51[8], *(_OWORD *)&v51[24]);
LABEL_89:
    v24 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n");
LABEL_90:
    if (v24 != buf)
      free(v24);
    return;
  }
  v10 = *a2;
LABEL_63:
  if ((v10 - 1) < 2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v34 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v35 = a1 + 8;
      if (a1[31] < 0)
        v35 = (_QWORD *)*v35;
      *(_DWORD *)buf = 136315138;
      v53 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "LocationProvider,#Warning Provider %s should not be sending coarse and fine notifications directly", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214EF10);
      v47 = a1 + 8;
      if (a1[31] < 0)
        v47 = (_QWORD *)*v47;
      *(_DWORD *)v51 = 136315138;
      *(_QWORD *)&v51[4] = v47;
      v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationProvider,#Warning Provider %s should not be sending coarse and fine notifications directly", v51);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    goto LABEL_76;
  }
  if (v10 != 9)
  {
    if (!v10)
    {
      if (*(double *)(a3 + 76) + *(double *)(a3 + 88) > CFAbsoluteTimeGetCurrent())
      {
        *(_DWORD *)buf = 9;
        (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
      }
      *(_DWORD *)buf = 3;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
      *(_DWORD *)buf = 4;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
      *(_DWORD *)buf = 39;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
      *(_DWORD *)buf = 2;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
      *(_DWORD *)buf = 1;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
      *(_DWORD *)buf = 5;
      sub_10011C740((uint64_t)a1, (signed __int32 *)buf, a3, a4);
    }
LABEL_76:
    sub_10011C740((uint64_t)a1, a2, a3, a4);
    return;
  }
  *(_DWORD *)buf = 0;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 2;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 1;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 3;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 4;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 39;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 5;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  if (!a1[112])
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v45 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v46 = a1 + 8;
      if (a1[31] < 0)
        v46 = (_QWORD *)*v46;
      *(_DWORD *)buf = 136315138;
      v53 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "LocationProvider,Sending location unavailable notification through for %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214EF10);
      v49 = a1 + 8;
      if (a1[31] < 0)
        v49 = (_QWORD *)*v49;
      *(_DWORD *)v51 = 136315138;
      *(_QWORD *)&v51[4] = v49;
      v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationProvider,Sending location unavailable notification through for %s", v51);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, BOOL, int, BOOL)", "%s\n", v50);
      if (v50 != (char *)buf)
        free(v50);
    }
    a1[112] = 1;
    goto LABEL_76;
  }
}

void sub_10011C740(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F050);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1006DC8D4((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1004B796C(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10011CDA8();
    os_activity_scope_leave(&state);
  }
}

void sub_10011CD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10011CDA8()
{
  operator new();
}

void sub_10011CE3C()
{
  operator delete();
}

BOOL sub_10011CE64(double a1, double a2)
{
  _BOOL4 v2;

  v2 = fabs(a1) < 0.00003;
  return fabs(a2) < 0.00003 && v2;
}

BOOL sub_10011CE88(double a1, double a2)
{
  _BOOL4 v2;

  v2 = a1 <= 90.0;
  if (a1 < -90.0)
    v2 = 0;
  if (a2 > 180.0)
    v2 = 0;
  return a2 >= -180.0 && v2;
}

void sub_10011CECC(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t *p_shared_weak_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[7];
  std::__shared_weak_count *v28;
  _OWORD v29[8];
  _OWORD v30[2];
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void *__p;
  char v41;
  std::__shared_weak_count *v42;
  id v43;
  _OWORD v44[8];
  _OWORD v45[35];
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  void *v48;
  char v49;
  std::__shared_weak_count *v50;
  id v51;

  sub_10011D234((uint64_t)v44, a2);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3321888768;
  v34 = sub_100119F40;
  v35 = &unk_1021A37C8;
  v36 = a1;
  sub_10011D234((uint64_t)&v37, (uint64_t)v44);
  sub_10052D218(a1 + 552, &v31);
  if ((objc_msgSend(*(id *)(a1 + 16), "isNonProvisionallyAuthorizedForServiceType:", 5) & 1) != 0)
  {
    v34((uint64_t)v33);
  }
  else
  {
    v3 = objc_alloc((Class)CLLocation);
    v29[6] = v44[6];
    v29[7] = v44[7];
    v30[0] = v45[0];
    *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)((char *)v45 + 12);
    v29[2] = v44[2];
    v29[3] = v44[3];
    v29[4] = v44[4];
    v29[5] = v44[5];
    v29[0] = v44[0];
    v29[1] = v44[1];
    v4 = objc_msgSend(v3, "initWithClientLocation:", v29);
    v5 = (void *)sub_1001B828C(a1);
    v6 = objc_msgSend(*(id *)(a1 + 24), "legacyClientKey");
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768;
    v27[2] = sub_101167478;
    v27[3] = &unk_1021A3828;
    v27[5] = a1;
    v27[6] = v31;
    v28 = v32;
    if (v32)
    {
      p_shared_weak_owners = &v32->__shared_weak_owners_;
      do
        v8 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v8 + 1, (unint64_t *)p_shared_weak_owners));
    }
    v27[4] = v33;
    objc_msgSend(v5, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 5, v6, v4, v27);
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
  }
  if (v32)
    std::__shared_weak_count::__release_weak(v32);

  v9 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v41 < 0)
    operator delete(__p);
  v12 = v39;
  if (v39)
  {
    v13 = (unint64_t *)&v39->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v38;
  if (v38)
  {
    v16 = (unint64_t *)&v38->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  v18 = v50;
  if (v50)
  {
    v19 = (unint64_t *)&v50->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v49 < 0)
    operator delete(v48);
  v21 = v47;
  if (v47)
  {
    v22 = (unint64_t *)&v47->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_10011D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  uint64_t v39;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  sub_1004B4F0C(v39);
  sub_1004B4F0C((uint64_t)&STACK[0x718]);
  _Unwind_Resume(a1);
}

uint64_t sub_10011D234(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  v11 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 688) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)(a2 + 696);
  v15 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v15;
  *(_OWORD *)(a1 + 696) = v14;
  v16 = *(_OWORD *)(a2 + 744);
  v17 = *(_OWORD *)(a2 + 760);
  v18 = *(_OWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
  *(_OWORD *)(a1 + 760) = v17;
  *(_OWORD *)(a1 + 776) = v18;
  *(_OWORD *)(a1 + 744) = v16;
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v19 = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 808) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  v22 = *(_OWORD *)(a2 + 832);
  v23 = *(_OWORD *)(a2 + 848);
  v24 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v24;
  *(_OWORD *)(a1 + 832) = v22;
  *(_OWORD *)(a1 + 848) = v23;
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  if (*(char *)(a2 + 927) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 904), *(void **)(a2 + 904), *(_QWORD *)(a2 + 912));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 904);
    *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
    *(_OWORD *)(a1 + 904) = v25;
  }
  v26 = *(_OWORD *)(a2 + 928);
  v27 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v27;
  *(_OWORD *)(a1 + 928) = v26;
  v28 = *(_OWORD *)(a2 + 976);
  v29 = *(_OWORD *)(a2 + 992);
  v30 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v30;
  *(_OWORD *)(a1 + 976) = v28;
  *(_OWORD *)(a1 + 992) = v29;
  v31 = *(_OWORD *)(a2 + 1040);
  v32 = *(_OWORD *)(a2 + 1056);
  v33 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1072) = v33;
  *(_OWORD *)(a1 + 1056) = v32;
  *(_OWORD *)(a1 + 1040) = v31;
  v34 = *(_OWORD *)(a2 + 1104);
  v35 = *(_OWORD *)(a2 + 1120);
  v36 = *(_OWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v36;
  *(_OWORD *)(a1 + 1120) = v35;
  *(_OWORD *)(a1 + 1104) = v34;
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a2 + 1160);
  v37 = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1168) = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  v40 = *(_OWORD *)(a2 + 1192);
  v41 = *(_OWORD *)(a2 + 1208);
  v42 = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
  *(_OWORD *)(a1 + 1240) = v42;
  *(_OWORD *)(a1 + 1192) = v40;
  *(_OWORD *)(a1 + 1208) = v41;
  v43 = *(_OWORD *)(a2 + 1256);
  v44 = *(_OWORD *)(a2 + 1272);
  v45 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1304) = v45;
  *(_OWORD *)(a1 + 1256) = v43;
  *(_OWORD *)(a1 + 1272) = v44;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1320) = *(id *)(a2 + 1320);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  v46 = *(_OWORD *)(a2 + 1344);
  v47 = *(_OWORD *)(a2 + 1360);
  v48 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = v48;
  *(_OWORD *)(a1 + 1360) = v47;
  *(_OWORD *)(a1 + 1344) = v46;
  v49 = *(_OWORD *)(a2 + 1408);
  v50 = *(_OWORD *)(a2 + 1424);
  v51 = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
  *(_OWORD *)(a1 + 1440) = v51;
  *(_OWORD *)(a1 + 1424) = v50;
  *(_OWORD *)(a1 + 1408) = v49;
  v52 = *(_OWORD *)(a2 + 1472);
  v53 = *(_OWORD *)(a2 + 1488);
  v54 = *(_OWORD *)(a2 + 1504);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  *(_OWORD *)(a1 + 1504) = v54;
  *(_OWORD *)(a1 + 1488) = v53;
  *(_OWORD *)(a1 + 1472) = v52;
  return a1;
}

void sub_10011D4A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 800);
  sub_100261F44(v1 + 680);
  _Unwind_Resume(a1);
}

void sub_10011D4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  int v26;
  _BOOL4 v27;
  CLConnectionMessage *v28;
  std::__shared_weak_count *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t *v37;

  v4 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v4))
  {
    v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (objc_msgSend(*(id *)(a1 + 112), "isNonProvisionallyAuthorizedForServiceTypeMask:", sub_10011DCB4(a1, v5)))
    {
      v6 = *(_QWORD *)(a1 + 264);
      v7 = *(std::__shared_weak_count **)(a2 + 8);
      v28 = *(CLConnectionMessage **)a2;
      v29 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      CLConnection::sendMessage(v6);
      if (v29)
      {
        v10 = (unint64_t *)&v29->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v12 = *(_QWORD *)(a2 + 16);
      if ((v12 & 0x7F) != 0)
      {
        sub_10011E130((uint64_t *)a1, v12, *(double *)(a2 + 24));
        v13 = *(_QWORD *)(a2 + 16) & 0x14;
        if (!v13)
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102174F78);
          v14 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          {
            v15 = *(uint64_t **)(a1 + 48);
            *(_DWORD *)buf = 68289282;
            v31 = 0;
            v32 = 2082;
            v33 = "";
            v34 = 2114;
            v35 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v16 = *(_QWORD *)(a1 + 16);
        if ((objc_msgSend(*(id *)(a1 + 48), "isAuthLimited", v28) & 1) != 0)
          v17 = sub_1007D4930(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48));
        else
          v17 = *(id *)(a1 + 48);
        v25 = (_QWORD *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        v26 = *((char *)v25 + 23);
        if (v26 < 0)
        {
          if (v25[1] != 39)
          {
LABEL_41:
            v27 = 1;
            goto LABEL_42;
          }
          v25 = (_QWORD *)*v25;
        }
        else if (v26 != 39)
        {
          goto LABEL_41;
        }
        v27 = memcmp(v25, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_42:
        sub_10019808C(v16, (uint64_t)v17, v27, v13 != 0);
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v22 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        v23 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*((char *)v23 + 23) >= 0)
          v24 = v23;
        else
          v24 = (uint64_t *)*v23;
        *(_DWORD *)buf = 68289282;
        v31 = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2082;
        v35 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Client not authorized for message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100B9ECD8((__n128 **)(a1 + 128), (__n128 *)a2);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v19 = *(uint64_t **)(a1 + 48);
      v20 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
      if (*((char *)v20 + 23) >= 0)
        v21 = v20;
      else
        v21 = (uint64_t *)*v20;
      *(_DWORD *)buf = 68289538;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2114;
      v35 = v19;
      v36 = 2082;
      v37 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning Client not interested in this message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"message\":%{public, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_10011D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10011D8C4(uint64_t a1, uint64_t *a2)
{
  void *v5;
  uint64_t *v6;

  if (sub_10011D92C(a2))
    return 1;
  v5 = *(void **)(a1 + 152);
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  return objc_msgSend(v5, "objectForKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)) != 0;
}

BOOL sub_10011D92C(_QWORD *a1)
{
  _QWORD *v1;
  unsigned int v2;
  const char *v3;
  size_t v4;
  uint64_t v5;

  v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = a1[1];
    if (v5 == 36)
    {
      if (!memcmp((const void *)*a1, "kCLConnectionMessageRegionMonitoring", 0x24uLL))
        return 1;
      v5 = v1[1];
    }
    else if (v5 == 39 && !memcmp((const void *)*a1, "kCLConnectionMessageAuthorizationStatus", 0x27uLL))
    {
      return 1;
    }
    if (v5 == 31)
    {
      if (*(_QWORD *)*v1 == 0x656E6E6F434C436BLL
        && *(_QWORD *)(*v1 + 8) == 0x73654D6E6F697463
        && *(_QWORD *)(*v1 + 16) == 0x6967655265676173
        && *(_QWORD *)(*v1 + 23) == 0x65746174536E6F69)
      {
        return 1;
      }
      v5 = v1[1];
    }
    if (v5 == 41)
    {
      if (!memcmp((const void *)*v1, "kCLConnectionMessageRegionMonitoringError", 0x29uLL))
        return 1;
      v5 = v1[1];
    }
    if (v5 == 51)
    {
      if (!memcmp((const void *)*v1, "kCLConnectionMessageRegionMonitoringResponseDelayed", 0x33uLL))
        return 1;
      v5 = v1[1];
    }
    if (v5 != 54)
      goto LABEL_54;
    a1 = (_QWORD *)*v1;
    goto LABEL_36;
  }
  v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 > 0x28)
  {
    switch(v2)
    {
      case ')':
        v3 = "kCLConnectionMessageRegionMonitoringError";
        v4 = 41;
        break;
      case '3':
        v3 = "kCLConnectionMessageRegionMonitoringResponseDelayed";
        v4 = 51;
        break;
      case '6':
LABEL_36:
        v3 = "kCLConnectionMessageRegionMonitoringNoLocationWatchdog";
        v4 = 54;
        break;
      default:
        goto LABEL_54;
    }
LABEL_53:
    if (memcmp(a1, v3, v4))
      goto LABEL_54;
    return 1;
  }
  switch(v2)
  {
    case 0x1Fu:
      if (*a1 == 0x656E6E6F434C436BLL
        && a1[1] == 0x73654D6E6F697463
        && a1[2] == 0x6967655265676173
        && *(_QWORD *)((char *)a1 + 23) == 0x65746174536E6F69)
      {
        return 1;
      }
      break;
    case 0x24u:
      if (memcmp(a1, "kCLConnectionMessageRegionMonitoring", 0x24uLL))
        break;
      return 1;
    case 0x27u:
      v3 = "kCLConnectionMessageAuthorizationStatus";
      v4 = 39;
      goto LABEL_53;
  }
LABEL_54:
  if (sub_100839084(v1, "kCLConnectionMessageRegionMonitoringSetupCompleted")
    || sub_100839084(v1, "LocationManager/kCLConnectionMessageRegistration")
    || sub_100839084(v1, "kCLConnectionMessageError")
    || sub_100839084(v1, "kCLConnectionMessageBatch")
    || sub_100839084(v1, "kCLConnectionMessageAutopauseStatus")
    || sub_100839084(v1, "kCLConnectionMessageSignificantLocationVisit")
    || sub_100839084(v1, "kCLConnectionMessageSignificantLocationVisitState")
    || sub_100839084(v1, "kCLConnectionMessageLocationPush"))
  {
    return 1;
  }
  return sub_100839084(v1, "kCLConnectionMessageTranscriptSession");
}

uint64_t sub_10011DCB4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v5 = (uint64_t *)a2;
    switch(*(_BYTE *)(a2 + 23))
    {
      case 0x1B:
        goto LABEL_78;
      case 0x1C:
        if (*(_QWORD *)a2 != 0x656E6E6F434C436BLL
          || *(_QWORD *)(a2 + 8) != 0x73654D6E6F697463
          || *(_QWORD *)(a2 + 16) != 0x61636F4C65676173
          || *(_DWORD *)(a2 + 24) != 1852795252)
        {
          goto LABEL_88;
        }
        goto LABEL_41;
      case 0x1D:
      case 0x1E:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_88;
      case 0x1F:
        goto LABEL_47;
      case 0x24:
        goto LABEL_43;
      default:
        if (v4 == 39
          && (!memcmp((const void *)a2, "kCLConnectionMessageCompensatedLocation", 0x27uLL)
           || !memcmp((const void *)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL)))
        {
          goto LABEL_41;
        }
        goto LABEL_88;
    }
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 == 28)
  {
    v10 = **(_QWORD **)a2 == 0x656E6E6F434C436BLL && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x73654D6E6F697463;
    v11 = v10 && *(_QWORD *)(*(_QWORD *)a2 + 16) == 0x61636F4C65676173;
    if (v11 && *(_DWORD *)(*(_QWORD *)a2 + 24) == 1852795252)
      goto LABEL_41;
  }
  if (v9 != 39)
    goto LABEL_35;
  if (!memcmp(*(const void **)a2, "kCLConnectionMessageCompensatedLocation", 0x27uLL))
    goto LABEL_41;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 != 39)
  {
LABEL_35:
    if (v9 != 36)
      goto LABEL_64;
    if (!memcmp(*(const void **)a2, "kCLConnectionMessageRegionMonitoring", 0x24uLL))
      return 3;
LABEL_63:
    v9 = *(_QWORD *)(a2 + 8);
LABEL_64:
    if (v9 != 31)
    {
LABEL_76:
      if (v9 != 27)
        goto LABEL_88;
      v5 = *(uint64_t **)a2;
LABEL_78:
      v20 = *v5;
      v21 = v5[1];
      v22 = v5[2];
      v23 = *(uint64_t *)((char *)v5 + 19);
      if (v20 == 0x656E6E6F434C436BLL
        && v21 == 0x73654D6E6F697463
        && v22 == 0x676E615265676173
        && v23 == 0x676E69676E615265)
      {
        return 4;
      }
      goto LABEL_88;
    }
    if (**(_QWORD **)a2 != 0x656E6E6F434C436BLL
      || *(_QWORD *)(*(_QWORD *)a2 + 8) != 0x73654D6E6F697463
      || *(_QWORD *)(*(_QWORD *)a2 + 16) != 0x6967655265676173
      || *(_QWORD *)(*(_QWORD *)a2 + 23) != 0x65746174536E6F69)
    {
LABEL_75:
      v9 = *(_QWORD *)(a2 + 8);
      goto LABEL_76;
    }
    return 3;
  }
  if (!memcmp(*(const void **)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL))
  {
LABEL_41:
    if ((sub_10011E0F0() & 1) != 0)
      return 16;
    if (objc_msgSend(*(id *)(a1 + 112), "inUseLevelIsAtLeast:", 3))
      return 16;
    return 32;
  }
  if ((v4 & 0x80) != 0)
    goto LABEL_35;
  v5 = (uint64_t *)a2;
  if (v4 == 27)
    goto LABEL_78;
  if (v4 == 31)
    goto LABEL_47;
  if (v4 != 36)
    goto LABEL_88;
LABEL_43:
  if (!memcmp((const void *)a2, "kCLConnectionMessageRegionMonitoring", 0x24uLL))
    return 3;
  if ((v4 & 0x80) != 0)
    goto LABEL_63;
  v5 = (uint64_t *)a2;
  if (v4 == 27)
    goto LABEL_78;
  if (v4 != 31)
    goto LABEL_88;
LABEL_47:
  if (*(_QWORD *)a2 == 0x656E6E6F434C436BLL
    && *(_QWORD *)(a2 + 8) == 0x73654D6E6F697463
    && *(_QWORD *)(a2 + 16) == 0x6967655265676173
    && *(_QWORD *)(a2 + 23) == 0x65746174536E6F69)
  {
    return 3;
  }
  if ((v4 & 0x80) != 0)
    goto LABEL_75;
  v5 = (uint64_t *)a2;
  if (v4 == 27)
    goto LABEL_78;
LABEL_88:
  if (sub_100839084((_QWORD *)a2, "kCLConnectionMessageSignificantLocationChange"))
    return 2048;
  if (sub_100839084((_QWORD *)a2, "kCLConnectionMessageSignificantLocationVisit")
    || sub_100839084((_QWORD *)a2, "kCLConnectionMessageSignificantLocationVisitState"))
  {
    return 64;
  }
  if (sub_100839084((_QWORD *)a2, "kCLConnectionMessageTranscriptFetch"))
    return 65552;
  return 0;
}

uint64_t sub_10011E0F0()
{
  if (qword_102303E00 != -1)
    dispatch_once(&qword_102303E00, &stru_1021514F0);
  return byte_102303DF8;
}

void sub_10011E130(uint64_t *a1, uint64_t a2, double a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;

  if ((a2 & 0x14) == 0)
    return;
  v4 = a2;
  v6 = a1[8];
  v7 = v6 & a2;
  if ((v6 & a2) != 0)
  {
    if ((a2 & 0x10) == 0)
      goto LABEL_4;
  }
  else
  {
    a1[8] = v6 | a2;
    if ((a2 & 0x10) == 0)
    {
LABEL_4:
      if ((a2 & 4) == 0)
        return;
      goto LABEL_11;
    }
  }
  v8 = a1[2];
  if ((objc_msgSend((id)a1[6], "isAuthLimited") & 1) != 0)
    v9 = sub_1007D4930(a1[2], a1[6]);
  else
    v9 = (id)a1[6];
  sub_1001966C4(v8, (uint64_t)v9, 4, v7 == 0, a3);
  if ((v4 & 4) != 0)
  {
LABEL_11:
    v10 = a1[2];
    if ((objc_msgSend((id)a1[6], "isAuthLimited") & 1) != 0)
      v11 = sub_1007D4930(a1[2], a1[6]);
    else
      v11 = (id)a1[6];
    sub_1001966C4(v10, (uint64_t)v11, 2, v7 == 0, a3);
  }
}

BOOL sub_10011E234(double a1)
{
  return a1 < 1000000.0 && a1 > -500.0;
}

void sub_10011E258(double *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint8_t *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  double v21;

  v6 = *(double *)(a2 + 36);
  v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      v9 = 0.0;
      if (v7 <= 0.0)
        goto LABEL_29;
      v8 = *(double *)(a3 + 28);
    }
    else
    {
      v8 = *(double *)(a2 + 28);
    }
  }
  else
  {
    v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }
  v9 = -450.0;
  if (v8 >= -450.0)
  {
    v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      v9 = v8;
      goto LABEL_29;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = 0x412E848000000000;
      v20 = 2048;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
      v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max");
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = 0xC07C200000000000;
      v20 = 2048;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219F4D0);
      v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min");
LABEL_26:
      v13 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v11);
      if (v13 != buf)
        free(v13);
    }
  }
LABEL_29:
  v14 = *(double *)(a2 + 4);
  v15 = *(double *)(a2 + 12);
  v16 = *(double *)(a3 + 4);
  v17 = *(double *)(a3 + 12);
  if (sub_10011E6FC(v14, v15, v16, v17))
    sub_1010B916C(v14, v15, v16, v17);
  else
    sub_10011E634(a1, v14, v15, v16, v17, v9);
}

long double sub_10011E634(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v13;
  double v14;
  double v15;

  v14 = 0.0;
  v15 = 0.0;
  if (sub_10011E6FC(a2, a3, a4, a5) || !sub_10011E780(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6))
    return sub_1010B916C(a2, a3, a4, a5);
  else
    return sqrt(v14 * v14 + v15 * v15);
}

BOOL sub_10011E6FC(double a1, double a2, double a3, double a4)
{
  double v4;
  unsigned int v5;
  int v6;

  if (a2 < 0.0)
    a2 = a2 + 360.0;
  if (a4 < 0.0)
    a4 = a4 + 360.0;
  v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0)
      v4 = v4 + 360.0;
  }
  else
  {
    v4 = v4 + -360.0;
  }
  v5 = (int)v4;
  if ((int)v4 < 0)
    v5 = -v5;
  v6 = (int)a3 - (int)a1;
  if (v6 < 0)
    v6 = (int)a1 - (int)a3;
  return v6 > 2 || v5 > 2;
}

BOOL sub_10011E780(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      v23 = __sincos_stret(v22 * 0.0174532925);
      v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }
    v26 = 360.0;
    v27 = a6 + 360.0;
    if (a6 >= 0.0)
      v27 = a6;
    v28 = a9 + 360.0;
    if (a9 >= 0.0)
      v28 = a9;
    v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }
    else
    {
      v26 = -360.0;
    }
    v29 = v29 + v26;
    goto LABEL_13;
  }
  return v10 <= 2.0;
}

void sub_10011E918(uint64_t a1, int *a2)
{
  if (*a2 == 9 && *(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 0;
  sub_10011E934(a1, a2);
}

void sub_10011E934(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
      sub_100346F9C((_QWORD *)(v6 + 64));
  }
}

uint64_t sub_10011E980(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint8_t buf[8];
  __int16 v21;
  const char *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  v19 = a2;
  if (*a3)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v6 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = &v19;
      v7 = objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
      v8 = *a3;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2082;
      v24 = v7;
      v25 = 2050;
      v26 = v8;
      v9 = "{\"msg%{public}.0s\":\"notifying\", \"client\":%{public, location:escape_only}s, \"notification\":%{public, l"
           "ocation:CLLocationProvider_Type::Notification}lld}";
      v10 = v6;
      v11 = 38;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = &v19;
      v14 = objc_msgSend(objc_msgSend(sub_1000823D0((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
      v15 = *(_QWORD *)(a4 + 20);
      v16 = *(unsigned int *)(a4 + 96);
      v17 = *(unsigned int *)(a4 + 512);
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2082;
      v24 = v14;
      v25 = 2050;
      v26 = v15;
      v27 = 2050;
      v28 = v16;
      v29 = 2050;
      v30 = v17;
      v9 = "{\"msg%{public}.0s\":\"notifying location\", \"client\":%{public, location:escape_only}s, \"accuracy\":\"%{pu"
           "blic}f\", \"type\":%{public, location:CLLocationType}lld, \"origin device\":%{public, location:CLClientLocati"
           "onOriginDevice}lld}";
      v10 = v13;
      v11 = 58;
      goto LABEL_10;
    }
  }
  return 1;
}

void sub_10011EBA0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFilteredLocationController::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102151218);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFilteredLocationController::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102151218);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFilteredLocationController::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10011ED78(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10011ED58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10011ED78(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v6;
  NSObject *v7;
  id v8;
  const __CFDate *v9;
  double AbsoluteTime;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  unsigned int v19;
  int v20;
  double v21;
  uint8_t buf[1640];

  v19 = *a3;
  if (v19 > 2 || (v19 = 0, *(double *)(a1 + 1024) < 0.0) || *(double *)(a1 + 1032) < 15.0)
  {
LABEL_24:
    (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v19, a4, 1, 0xFFFFFFFFLL, 0);
    sub_10011F264(a1 + 184, (int *)&v19, a4);
    return;
  }
  v6 = sub_1000C5B00(a1, a4);
  if (v6 >= CFAbsoluteTimeGetCurrent() + 15.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v6 - CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "turning off location requests and re-scheduling for %.3fs later", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v16 = qword_1022A01D8;
      v20 = 134217984;
      v21 = v6 - CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "turning off location requests and re-scheduling for %.3fs later", COERCE_DOUBLE(&v20));
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v17);
      if (v18 != (char *)buf)
        free(v18);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), 2);
    v20 = 0;
    *(_QWORD *)buf = &v20;
    *((_BYTE *)sub_1001AFE94((uint64_t **)(a1 + 1040), &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
    v20 = 1;
    *(_QWORD *)buf = &v20;
    *((_BYTE *)sub_1001AFE94((uint64_t **)(a1 + 1040), &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
    v20 = 2;
    *(_QWORD *)buf = &v20;
    *((_BYTE *)sub_1001AFE94((uint64_t **)(a1 + 1040), &v20, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
    objc_msgSend(*(id *)(a1 + 1016), "setNextFireTime:", v6);
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus"));
    v9 = *(const __CFDate **)(a1 + 1096);
    if (v9 && (AbsoluteTime = CFDateGetAbsoluteTime(v9), AbsoluteTime < CFAbsoluteTimeGetCurrent()))
    {
      v11 = objc_msgSend(v8, "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 1, a1, CFSTR("CLFilteredLocationController::onLocationNotification"));
      sub_1007521CC(a1);
      if (v11)
        objc_msgSend(v8, "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 0, a1, CFSTR("CLFilteredLocationController::onLocationNotification"));
    }
    else
    {
      sub_1007521CC(a1);
    }
    goto LABEL_24;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v6 - CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "leaving location as it would turn on in %.3fs anyway", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v13 = qword_1022A01D8;
    v20 = 134217984;
    v21 = v6 - CFAbsoluteTimeGetCurrent();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "leaving location as it would turn on in %.3fs anyway", COERCE_DOUBLE(&v20));
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
    if (v15 != (char *)buf)
      free(v15);
  }
}

void sub_10011F264(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  if (*(_BYTE *)(a1 + 24))
  {
    if (*a2 >= 6)
    {
      if (*a2 == 22)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        v6 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v7 = *(_DWORD *)(a1 + 824);
          v8 = sub_10104BD1C(*(int **)(a3 + 800));
          *(_DWORD *)buf = 67109376;
          v31 = v7;
          v32 = 2048;
          v33 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received kNotificationWifiLocationBatched, num,%u,Size, %lu", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
          v17 = qword_1022A02D8;
          v18 = *(_DWORD *)(a1 + 824);
          v19 = sub_10104BD1C(*(int **)(a3 + 800));
          v26 = 67109376;
          v27 = v18;
          v28 = 2048;
          v29 = v19;
          LODWORD(v25) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 2, "Received kNotificationWifiLocationBatched, num,%u,Size, %lu", &v26, v25);
          v21 = (uint8_t *)v20;
          sub_100512490("Generic", 1, 0, 2, "void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
          if (v21 != buf)
            free(v21);
        }
        if (sub_10104BD1C(*(int **)(a3 + 800)))
        {
          v9 = sub_10104BD1C(*(int **)(a3 + 800));
          while (v9)
          {
            sub_10104B598(*(_QWORD *)(a3 + 800), --v9, (uint64_t)&v26);
            sub_10104BAA8(*(_QWORD *)(a3 + 800), v9, (uint64_t)buf);
            v10 = sub_10011F6D4(a1, (__int128 *)&v26, (uint64_t)buf, 1);
            v11 = v10;
            v12 = v34;
            if (!v34)
              goto LABEL_17;
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
              if ((v11 & 1) != 0)
                break;
            }
            else
            {
LABEL_17:
              if ((v10 & 1) != 0)
                break;
            }
          }
        }
        sub_101224010(a1);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        v15 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v16 = *a2;
          *(_DWORD *)buf = 67109120;
          v31 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Received unknown notification %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
          v22 = *a2;
          v26 = 67109120;
          v27 = v22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Received unknown notification %d", &v26);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
    }
    else
    {
      sub_10011F6D4(a1, (__int128 *)a3, a3 + 160, 0);
    }
  }
}

void sub_10011F6B4(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_10011F6D4(uint64_t a1, __int128 *a2, uint64_t a3, int a4)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  result = sub_10011FD08(a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    if ((sub_10011F7C4(a1, (uint64_t)a2, a4) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v9 = *a2;
      *(_OWORD *)(a1 + 44) = a2[1];
      *(_OWORD *)(a1 + 28) = v9;
      v10 = a2[2];
      v11 = a2[3];
      v12 = a2[4];
      *(_OWORD *)(a1 + 108) = a2[5];
      *(_OWORD *)(a1 + 92) = v12;
      *(_OWORD *)(a1 + 76) = v11;
      *(_OWORD *)(a1 + 60) = v10;
      v13 = a2[6];
      v14 = a2[7];
      v15 = a2[8];
      *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 140);
      *(_OWORD *)(a1 + 156) = v15;
      *(_OWORD *)(a1 + 140) = v14;
      *(_OWORD *)(a1 + 124) = v13;
      memcpy((void *)(a1 + 184), (const void *)a3, 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 704), (uint64_t *)(a3 + 520));
      v17 = *(_OWORD *)(a3 + 552);
      v16 = *(_OWORD *)(a3 + 568);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a3 + 536);
      *(_OWORD *)(a1 + 736) = v17;
      *(_OWORD *)(a1 + 752) = v16;
      v19 = *(_OWORD *)(a3 + 600);
      v18 = *(_OWORD *)(a3 + 616);
      v20 = *(_OWORD *)(a3 + 584);
      *(_BYTE *)(a1 + 816) = *(_BYTE *)(a3 + 632);
      *(_OWORD *)(a1 + 784) = v19;
      *(_OWORD *)(a1 + 800) = v18;
      *(_OWORD *)(a1 + 768) = v20;
      return 1;
    }
  }
  return result;
}

