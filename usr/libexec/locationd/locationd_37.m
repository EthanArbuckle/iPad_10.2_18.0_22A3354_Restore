void sub_101690B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101690B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10169BC3C;
  v8[3] = &unk_1021C6D98;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10169BCF8;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 32, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_101690C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101690CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10169BF2C;
  v8[3] = &unk_1021C6E58;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10169BFE8;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 189, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_101690DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101690E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10169C21C;
  v8[3] = &unk_1021C6F18;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10169C2D8;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 190, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_101690F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101690F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10020E0AC;
  v8[3] = &unk_1021C6FD8;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020D92C;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 208, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_101691070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016910B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10169C640;
  v8[3] = &unk_1021C7098;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10169C6FC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 178, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016911B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016911FC(_QWORD *a1, int a2)
{
  if (a2 && (a2 != 1 || (sub_1001DC538() & 1) == 0))
    sub_1016A0624();
  return *a1 + 1328 * (a2 != 0);
}

id sub_101691248(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[8];
  void *v13;
  uint64_t v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Supl,enableSupl", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C6840);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,Supl,enableSupl", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::enableSupl(CLTelephonyService_Type::SimInstance)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if ((_DWORD)a2 == 1)
    v5 = 1;
  else
    v5 = -1;
  if ((_DWORD)a2)
    v6 = v5;
  else
    v6 = 0;
  if (v6 != -1)
  {
    *(_QWORD *)buf = 0;
    v13 = 0;
    v14 = 0;
    v7 = sub_1016911FC((_QWORD *)(a1 + 896), a2);
    sub_100517458((int)v11, (unint64_t *)buf, (unsigned __int8 *)(v7 + 960));
    sub_101697F88(a1, v6, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      v13 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  return sub_101698280(a1, a2);
}

void sub_101691444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101691468(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Supl,disableSupl", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C6840);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,Supl,disableSupl", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::disableSupl(CLTelephonyService_Type::SimInstance)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (a2 == 1)
    v5 = 1;
  else
    v5 = -1;
  if (!a2)
    v5 = 0;
  if (v5 != -1)
    sub_101698488(a1, v5);
}

void sub_101691620(uint64_t a1, char *a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  char *v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InitError\", \"error\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  sub_10169171C(a1, a2, 0);
}

void sub_10169171C(uint64_t a1, char *a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  _BYTE v12[28];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v12 = 68289282;
    *(_WORD *)&v12[8] = 2082;
    *(_QWORD *)&v12[10] = "";
    *(_WORD *)&v12[18] = 2082;
    *(_QWORD *)&v12[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#bb.e,handleQmiPdsError\", \"error\":%{public, location:escape_only}s}", v12, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 554))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v12 = 68289026;
      *(_WORD *)&v12[8] = 2082;
      *(_QWORD *)&v12[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,ErrorHandlingInProgress\"}", v12, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 554) = 1;
    if (sub_100CD5700(a1 + 532))
    {
      if (a3 == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C67E8);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v12 = 68289026;
          *(_WORD *)&v12[8] = 2082;
          *(_QWORD *)&v12[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InEmergency,restart@OnEmergencyExit\"}", v12, 0x12u);
        }
        *(_BYTE *)(a1 + 553) = 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C67E8);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v12 = 68289026;
          *(_WORD *)&v12[8] = 2082;
          *(_QWORD *)&v12[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,InEmergency,reinit@OnEmergencyExit\"}", v12, 0x12u);
        }
        *(_BYTE *)(a1 + 552) = 1;
      }
    }
    else
    {
      sub_1015A2E04(v12, a2);
      v9 = (void **)(a1 + 584);
      if (*(char *)(a1 + 607) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = *(_OWORD *)v12;
      *(_QWORD *)(a1 + 600) = *(_QWORD *)&v12[16];
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v12 = 68289282;
        *(_WORD *)&v12[8] = 2082;
        *(_QWORD *)&v12[10] = "";
        *(_WORD *)&v12[18] = 1026;
        *(_DWORD *)&v12[20] = 18;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#Warning,#bb.e,NotInEmergency,deferring Reset\", \"delay\":%{public}d}", v12, 0x18u);
      }
      objc_msgSend(*(id *)(a1 + 576), "setNextFireDelay:", 18.0);
    }
  }
}

uint64_t sub_101691AA0(uint64_t a1, qmi::MessageBase *a2)
{
  _QWORD **v8;
  int v9;
  int v10;
  char v11;
  char v13;
  int v14;
  _QWORD v16[5];
  _QWORD v17[6];
  int v18;
  _QWORD v19[5];
  _QWORD v20[6];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  uint64_t v27;
  __n128 (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  void *v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  void *v48;
  uint64_t v49;
  char v50;
  void *__p;
  void *v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[5];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  __int128 v74;
  char v75;
  __int128 v76;
  char v77;
  __int128 v78;
  char v79;
  __int128 v80;
  _BYTE v81[32];
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;

  v68 = 0u;
  v67 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0;
  v69 = 1;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v74 = _Q1;
  v75 = 0;
  v76 = _Q1;
  v77 = 0;
  v78 = _Q1;
  v79 = 0;
  v82 = 0;
  memset(v81, 0, sizeof(v81));
  v80 = 0u;
  v83 = 1065353216;
  v84 = 0x100000005;
  v85 = 0;
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_101692008;
  v62[3] = &unk_1021380A8;
  v62[4] = a1;
  v25 = v62;
  sub_10169C930(a2, 26, (uint64_t)&v25);
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_101692190;
  v61[3] = &unk_1021C6618;
  v61[4] = a1;
  v25 = v61;
  sub_10169B82C(a2, 27, (uint64_t)&v25);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_101692364;
  v60[3] = &unk_1021C6638;
  v60[4] = a1;
  v25 = v60;
  sub_10169CCF8(a2, 39, (uint64_t)&v25);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_101692550;
  v59[3] = &unk_1021C6658;
  v59[4] = a1;
  v25 = v59;
  sub_10169CCF8(a2, 40, (uint64_t)&v25);
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_101692704;
  v58[3] = &unk_1021C6678;
  v58[4] = a1;
  v25 = v58;
  sub_10169CCF8(a2, 50, (uint64_t)&v25);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_1016929AC;
  v57[3] = &unk_1021C6698;
  v57[4] = a1;
  v25 = v57;
  sub_10169CD88(a2, 19, &v25);
  v25 = 0;
  v26 = &v25;
  v27 = 0x11012000000;
  v28 = sub_1002073D4;
  v29 = sub_100207EC0;
  v30 = &unk_102080316;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v36 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 9;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v46 = -1;
  v49 = 0;
  v47 = 0;
  v48 = 0;
  v50 = -1;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v52 = 0;
  v55 = 255;
  v56 = 0;
  v35 = 0xFFFFFFFFLL;
  v31 = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_101692DE0;
  v23[3] = &unk_1021C66C0;
  v23[4] = &v25;
  v24 = v23;
  sub_10169CCF8(a2, 43, (uint64_t)&v24);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_101692EF0;
  v22[3] = &unk_1021C66E8;
  v22[4] = &v25;
  v24 = v22;
  sub_10169CCF8(a2, 41, (uint64_t)&v24);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_101693000;
  v21[3] = &unk_1021C6710;
  v21[4] = &v25;
  v24 = v21;
  sub_10169CE40(a2, 42, (uint64_t)&v24);
  v8 = v26;
  *((_WORD *)v26 + 130) = 255;
  *((_DWORD *)v8 + 64) = 255;
  v8[33] = 0;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_101693118;
  v20[3] = &unk_1021C6738;
  v20[4] = &v25;
  v20[5] = a1;
  v24 = v20;
  sub_10169CCF8(a2, 55, (uint64_t)&v24);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_101693144;
  v19[3] = &unk_1021C6760;
  v19[4] = &v25;
  v24 = v19;
  sub_10169B8BC(a2, 54, (uint64_t)&v24);
  v9 = *((_DWORD *)v26 + 64);
  if (v9 == 1)
    v10 = 1;
  else
    v10 = 255;
  if (v9 == 1)
    v11 = 1;
  else
    v11 = -1;
  _ZF = v9 == 0;
  if (v9)
    v13 = v11;
  else
    v13 = 0;
  *((_BYTE *)v26 + 260) = v13;
  if (_ZF)
    v14 = 0;
  else
    v14 = v10;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_101693168;
  v17[3] = &unk_1021C6788;
  v17[4] = &v25;
  v17[5] = a1;
  v18 = v14;
  v24 = v17;
  sub_10169CF8C(a2, 25, (uint64_t)&v24);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_101693AC4;
  v16[3] = &unk_1021C67A8;
  v16[4] = a1;
  v24 = v16;
  sub_10169CCF8(a2, 49, (uint64_t)&v24);
  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  return sub_100067A50((uint64_t)&v81[8]);
}

void sub_101691FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a49, 8);
  sub_101692D70(v49 + 48);
  sub_100067A50((uint64_t)&STACK[0x438]);
  _Unwind_Resume(a1);
}

void sub_10169200C()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#tb,Recvd UmtsCpNetworkPrompt", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,Recvd UmtsCpNetworkPrompt", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleUmtsCpNetworkPrompt(const pds::tlv::umtsCpNetworkPrompt &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_101692194(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a2[1];
    v5 = *a2;
    *(_DWORD *)buf = 67240448;
    v14 = v4;
    v15 = 1026;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Cplane,#tb,Recvd CommEvent,protocol,%{public}d,type,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v6 = a2[1];
    v7 = *a2;
    v10[0] = 67240448;
    v10[1] = v6;
    v11 = 1026;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Cplane,#tb,Recvd CommEvent,protocol,%{public}d,type,%{public}d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleCommEvent(const pds::tlv::commEvent &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_101692364(uint64_t a1, int *a2)
{
  sub_10169236C(*(_QWORD *)(a1 + 32), a2);
}

void sub_10169236C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,Recvd tlv::resetState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v7 = *a2;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,Recvd tlv::resetState,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleResetState(const pds::tlv::resetState &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_QWORD *)buf = 0;
  if (*(_BYTE *)(a1 + 513) || *(_BYTE *)(a1 + 514))
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (!v6)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
  }
}

void sub_101692554(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#tb,Recvd tlv::sessionEndReason,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,Recvd tlv::sessionEndReason,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleSessionEndReason(const pds::tlv::sessionEndReason &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_101692704(uint64_t a1, int *a2)
{
  sub_10169270C(*(_QWORD *)(a1 + 32), a2);
}

void sub_10169270C(uint64_t a1, int *a2)
{
  NSObject *v4;
  _BYTE *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  _BYTE __p[12];
  int v18;
  int v19;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_101862E2C(*a2, __p);
    v5 = v19 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,EmergencyEvent,%{public}s", buf, 0xCu);
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C6840);
    v9 = qword_1022A0088;
    sub_101862E2C(*a2, buf);
    if (v14 >= 0)
      v10 = buf;
    else
      v10 = *(_BYTE **)buf;
    v15 = 136446210;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 0, "#tb,EmergencyEvent,%{public}s", &v15, 12);
    v12 = v11;
    if (v14 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencyEvent(const pds::tlv::emergencyEvent &)", "%s\n", v12);
    if (v12 != __p)
      free(v12);
  }
  v6 = *a2;
  if (*a2 > 8 || ((1 << v6) & 0x1E9) == 0)
  {
    *(_QWORD *)&__p[4] = -1;
    v18 = -1;
    *(_DWORD *)__p = *(_DWORD *)(a1 + 908);
    v7 = v6 - 1;
    if (v7 <= 9 && ((0x30Bu >> v7) & 1) != 0)
      v19 = dword_101CCCCB4[v7];
    v8 = *(_QWORD *)(a1 + 184);
    if (!v8)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, __p);
  }
}

void sub_1016929AC(uint64_t a1, int *a2)
{
  sub_1016929B4(*(_QWORD *)(a1 + 32), a2);
}

void sub_1016929B4(uint64_t a1, int *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)((char *)a2 + 15);
    v6 = *a2;
    v7 = *(_QWORD *)((char *)a2 + 27);
    v8 = *(_QWORD *)((char *)a2 + 35);
    v9 = *(float *)((char *)a2 + 43);
    v10 = *(float *)((char *)a2 + 63);
    v11 = *(float *)((char *)a2 + 67);
    v12 = *(float *)((char *)a2 + 71);
    v13 = *(float *)((char *)a2 + 51);
    v14 = *(float *)((char *)a2 + 83);
    v15 = *((unsigned __int8 *)a2 + 91);
    v16 = *((unsigned __int8 *)a2 + 104);
    *(_DWORD *)buf = 68292099;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2049;
    v34 = v5;
    v35 = 2049;
    v36 = v6;
    v37 = 2049;
    v38 = v7;
    v39 = 2049;
    v40 = v8;
    v41 = 2049;
    v42 = v9;
    v43 = 2050;
    v44 = v10;
    v45 = 2050;
    v46 = v11;
    v47 = 2050;
    v48 = v12;
    v49 = 2050;
    v50 = v13;
    v51 = 2050;
    v52 = v14;
    v53 = 1026;
    v54 = v15;
    v55 = 1026;
    v56 = v16;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PositionDataEvent\", \"utc\":%{private}lld, \"valid\":%{private}ld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"horAcc\":\"%{public}f\", \"uncMaj\":\"%{public}f\", \"uncMinor\":\"%{public}f\", \"horzSpeed\":\"%{public}f\", \"horzSpeedUnc\":\"%{public}f\", \"horzConf\":%{public}d, \"fixMode\":%{public}d}", buf, 0x82u);
    v17 = *((unsigned __int8 *)a2 + 104);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + 104);
  }
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 1026;
    LODWORD(v34) = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,PositionDataEvent\", \"mode\":%{public}d}", buf, 0x18u);
  }
  if (v17 == 1 && (*(_BYTE *)(a1 + 513) || *(_BYTE *)(a1 + 514)))
  {
    v26 = -1;
    v27 = -1;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C6840);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#tb,simulator/conformance mode, send cplane end indication", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C6840);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,simulator/conformance mode, send cplane end indication", &v24, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleParsedPositionData(const pds::tlv::parsedPositionData &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v20 = *(_DWORD *)(a1 + 908);
    v28 = 1;
    v25 = v20;
    v21 = *(_QWORD *)(a1 + 184);
    if (!v21)
      sub_10025FD1C();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v21 + 48))(v21, &v25);
  }
}

uint64_t sub_101692D70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 112);
  if (v4)
  {
    *(_QWORD *)(a1 + 120) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_101692DE0(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 49) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) = *a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,SuplInitSource\", \"suplinitsource\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101692EF0(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 50) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84) = *a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,suplTriggerType\", \"supltriggertype\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101693000(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  _QWORD *v10;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 1;
  std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56), a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)(v4 + 56);
    if (*(char *)(v4 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,suplEmergencyNotification\", \"suplemergencynotification\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

uint64_t sub_101693118(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;

  v2 = *a2;
  v3 = *(_QWORD *)(result + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 256) = *a2;
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 255;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  *(_DWORD *)(v3 + 908) = v5;
  return result;
}

uint64_t sub_101693144(uint64_t result, _QWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 261) = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 264) = *a2;
  return result;
}

_QWORD *sub_101693168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  size_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  size_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  _BYTE *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  size_t v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  char *v78;
  _BYTE *v79;
  _BYTE *v80;
  char v81;
  unint64_t v82;
  NSObject *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v104;
  uint8_t buf[4];
  int v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;

  v3 = a1;
  v4 = 0;
  v104 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 51) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88) = *(_DWORD *)a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 92) = *(_BYTE *)(a2 + 4);
  do
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
    v6 = *(_QWORD *)(a2 + 8) >> (8 * v4);
    v8 = (_BYTE *)v5[13];
    v7 = v5[14];
    if ((unint64_t)v8 >= v7)
    {
      v10 = v5[12];
      v11 = &v8[-v10];
      v12 = (uint64_t)&v8[-v10 + 1];
      if (v12 < 0)
LABEL_115:
        sub_100259694();
      v13 = v7 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)operator new(v14);
      else
        v15 = 0;
      v16 = &v11[(_QWORD)v15];
      v17 = &v11[(_QWORD)v15];
      *v17 = v6;
      v9 = v17 + 1;
      if (v8 != (_BYTE *)v10)
      {
        v18 = &v8[~v10];
        do
        {
          v19 = *--v8;
          (v18--)[(_QWORD)v15] = v19;
        }
        while (v8 != (_BYTE *)v10);
        v8 = (_BYTE *)v5[12];
        v16 = v15;
      }
      v5[12] = v16;
      v5[13] = v9;
      v5[14] = &v15[v14];
      v3 = a1;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    v5[13] = v9;
    ++v4;
  }
  while (v4 != 8);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 120) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 124) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 128) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 132) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 136) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 140) = *(_OWORD *)(a2 + 36);
  if (*(char *)(a2 + 79) >= 0)
    v20 = *(unsigned __int8 *)(a2 + 79);
  else
    v20 = *(_QWORD *)(a2 + 64);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 160), v20);
  v21 = *(char *)(a2 + 79) < 0;
  v22 = *(unsigned __int8 *)(a2 + 79);
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 64);
  if (v22)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v21)
        v25 = *(_QWORD *)(a2 + 56);
      else
        v25 = a2 + 56;
      v26 = *(_BYTE *)(v25 + v23);
      v28 = (_BYTE *)v24[21];
      v27 = v24[22];
      if ((unint64_t)v28 >= v27)
      {
        v30 = v24[20];
        v31 = &v28[-v30];
        v32 = (uint64_t)&v28[-v30 + 1];
        if (v32 < 0)
          goto LABEL_115;
        v33 = v27 - v30;
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
          v35 = (char *)operator new(v34);
        else
          v35 = 0;
        v36 = &v31[(_QWORD)v35];
        v37 = &v31[(_QWORD)v35];
        *v37 = v26;
        v29 = v37 + 1;
        if (v28 != (_BYTE *)v30)
        {
          v38 = &v28[~v30];
          do
          {
            v39 = *--v28;
            (v38--)[(_QWORD)v35] = v39;
          }
          while (v28 != (_BYTE *)v30);
          v28 = (_BYTE *)v24[20];
          v36 = v35;
        }
        v24[20] = v36;
        v24[21] = v29;
        v24[22] = &v35[v34];
        v3 = a1;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v28 = v26;
        v29 = v28 + 1;
      }
      v24[21] = v29;
      ++v23;
      v21 = *(char *)(a2 + 79) < 0;
      v40 = *(unsigned __int8 *)(a2 + 79);
      if ((v40 & 0x80u) != 0)
        v40 = *(_QWORD *)(a2 + 64);
    }
    while (v40 > v23);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 184) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 185) = *(_BYTE *)(a2 + 81);
  if (*(char *)(a2 + 111) >= 0)
    v41 = *(unsigned __int8 *)(a2 + 111);
  else
    v41 = *(_QWORD *)(a2 + 96);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 192), v41);
  v42 = *(char *)(a2 + 111) < 0;
  v43 = *(unsigned __int8 *)(a2 + 111);
  if ((v43 & 0x80u) != 0)
    v43 = *(_QWORD *)(a2 + 96);
  if (v43)
  {
    v44 = 0;
    do
    {
      v45 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v42)
        v46 = *(_QWORD *)(a2 + 88);
      else
        v46 = a2 + 88;
      v47 = *(_BYTE *)(v46 + v44);
      v49 = (_BYTE *)v45[25];
      v48 = v45[26];
      if ((unint64_t)v49 >= v48)
      {
        v51 = v45[24];
        v52 = &v49[-v51];
        v53 = (uint64_t)&v49[-v51 + 1];
        if (v53 < 0)
          goto LABEL_115;
        v54 = v48 - v51;
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
          v56 = (char *)operator new(v55);
        else
          v56 = 0;
        v57 = &v52[(_QWORD)v56];
        v58 = &v52[(_QWORD)v56];
        *v58 = v47;
        v50 = v58 + 1;
        if (v49 != (_BYTE *)v51)
        {
          v59 = &v49[~v51];
          do
          {
            v60 = *--v49;
            (v59--)[(_QWORD)v56] = v60;
          }
          while (v49 != (_BYTE *)v51);
          v49 = (_BYTE *)v45[24];
          v57 = v56;
        }
        v45[24] = v57;
        v45[25] = v50;
        v45[26] = &v56[v55];
        v3 = a1;
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v49 = v47;
        v50 = v49 + 1;
      }
      v45[25] = v50;
      ++v44;
      v42 = *(char *)(a2 + 111) < 0;
      v61 = *(unsigned __int8 *)(a2 + 111);
      if ((v61 & 0x80u) != 0)
        v61 = *(_QWORD *)(a2 + 96);
    }
    while (v61 > v44);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 216) = *(_BYTE *)(a2 + 112);
  if (*(char *)(a2 + 143) >= 0)
    v62 = *(unsigned __int8 *)(a2 + 143);
  else
    v62 = *(_QWORD *)(a2 + 128);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 224), v62);
  v63 = *(char *)(a2 + 143) < 0;
  v64 = *(unsigned __int8 *)(a2 + 143);
  if ((v64 & 0x80u) != 0)
    v64 = *(_QWORD *)(a2 + 128);
  if (v64)
  {
    v65 = 0;
    do
    {
      v66 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v63)
        v67 = *(_QWORD *)(a2 + 120);
      else
        v67 = a2 + 120;
      v68 = *(_BYTE *)(v67 + v65);
      v70 = (_BYTE *)v66[29];
      v69 = v66[30];
      if ((unint64_t)v70 >= v69)
      {
        v72 = v66[28];
        v73 = &v70[-v72];
        v74 = (uint64_t)&v70[-v72 + 1];
        if (v74 < 0)
          goto LABEL_115;
        v75 = v69 - v72;
        if (2 * v75 > v74)
          v74 = 2 * v75;
        if (v75 >= 0x3FFFFFFFFFFFFFFFLL)
          v76 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
          v77 = (char *)operator new(v76);
        else
          v77 = 0;
        v78 = &v73[(_QWORD)v77];
        v79 = &v73[(_QWORD)v77];
        *v79 = v68;
        v71 = v79 + 1;
        if (v70 != (_BYTE *)v72)
        {
          v80 = &v70[~v72];
          do
          {
            v81 = *--v70;
            (v80--)[(_QWORD)v77] = v81;
          }
          while (v70 != (_BYTE *)v72);
          v70 = (_BYTE *)v66[28];
          v78 = v77;
        }
        v66[28] = v78;
        v66[29] = v71;
        v66[30] = &v77[v76];
        v3 = a1;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v70 = v68;
        v71 = v70 + 1;
      }
      v66[29] = v71;
      ++v65;
      v63 = *(char *)(a2 + 143) < 0;
      v82 = *(unsigned __int8 *)(a2 + 143);
      if ((v82 & 0x80u) != 0)
        v82 = *(_QWORD *)(a2 + 128);
    }
    while (v82 > v65);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 248) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 249) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 250) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 251) = *(_BYTE *)(a2 + 147);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v83 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v84 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
    v85 = *(_DWORD *)(v84 + 88);
    v86 = *(unsigned __int8 *)(v84 + 92);
    v87 = *(unsigned __int8 *)(v84 + 120);
    v88 = *(_DWORD *)(v84 + 124);
    v89 = *(_DWORD *)(v84 + 128);
    v90 = *(_DWORD *)(v84 + 132);
    v91 = *(_DWORD *)(v84 + 136);
    v92 = *(unsigned __int8 *)(v84 + 184);
    v93 = *(unsigned __int8 *)(v84 + 185);
    v94 = *(unsigned __int8 *)(v84 + 216);
    v95 = *(unsigned __int8 *)(v84 + 248);
    v96 = *(unsigned __int8 *)(v84 + 249);
    v97 = *(unsigned __int8 *)(v84 + 250);
    v98 = *(unsigned __int8 *)(v84 + 251);
    v99 = *(_DWORD *)(v84 + 256);
    v100 = *(unsigned __int8 *)(v84 + 260);
    v101 = *(unsigned __int8 *)(v84 + 261);
    v102 = *(_QWORD *)(v84 + 264);
    *(_DWORD *)buf = 68293634;
    v107 = 0;
    v108 = 2082;
    v109 = "";
    v110 = 1026;
    v111 = v85;
    v112 = 1026;
    v113 = v86;
    v114 = 1026;
    v115 = v87;
    v116 = 1026;
    v117 = v88;
    v118 = 1026;
    v119 = v89;
    v120 = 1026;
    v121 = v90;
    v122 = 1026;
    v123 = v91;
    v124 = 1026;
    v125 = v92;
    v126 = 1026;
    v127 = v93;
    v128 = 1026;
    v129 = v94;
    v130 = 1026;
    v131 = v95;
    v132 = 1026;
    v133 = v96;
    v134 = 1026;
    v135 = v97;
    v136 = 1026;
    v137 = v98;
    v138 = 1026;
    v139 = v99;
    v140 = 1026;
    v141 = v100;
    v142 = 1026;
    v143 = v101;
    v144 = 2050;
    v145 = v102;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInit\", \"validmask\":%{public}d, \"privacy\":%{public}d, \"mode\":%{public}d, \"sessionid\":%{public}d, \"slpserveripv4port\":%{public}d, \"slpserveripv4addr\":%{public}d, \"slpserveripv6port\":%{public}d, \"dcs\":%{public}d, \"requestoriddcs\":%{public}d, \"clientnamedcs\":%{public}d, \"qophorizacc\":%{public}d, \"qopvertzacc\":%{public}d, \"qopmaxlocage\":%{public}d, \"qopdelay\":%{public}d, \"instance\":%{public}d, \"certIndex\":%{public}d, \"isMaskPresent\":%{public}hhd, \"mask\":%{public}llu}", buf, 0x82u);
  }
  return sub_101693904(v104, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 48, *(_DWORD *)(v3 + 48));
}

_QWORD *sub_101693904(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  unsigned int v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tb,handlesuplinit", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlesuplinit", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleSuplInit(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v7 = sub_1016986C4(a1, a2, a3);
  return sub_101698DDC(a1, v7, a2);
}

void sub_101693AC4(uint64_t a1, int *a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  _BOOL8 v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unsigned int v19;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_DWORD *)(v3 + 904);
  *(_DWORD *)(v3 + 904) = 255;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v5 = qword_1022A0088;
  v6 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    v7 = *a2;
    *(_DWORD *)buf = 68289538;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = v7;
    v18 = 1026;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEndReason\", \"suplendreason\":%{public}d, \"instance\":%{public}d}", buf, 0x1Eu);
  }
  if (v4 > 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "NonMatchingSuplEnd", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "NonMatchingSuplEnd", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaModemController::handlePdsEventReport(const pds::eventReportInd::Indication &)_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  else
  {
    sub_101693D10(v6, a2);
  }
}

void sub_101693D10(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#tb,handleSuplEnd,reason,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handleSuplEnd,reason,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleSuplEnd(const qmi::pds::SuplEndReason &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

_QWORD *sub_101693EC4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169D488(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101693F5C(uint64_t a1, uint64_t a2)
{
  return sub_101693F64((_QWORD *)(a1 + 32), a2);
}

_QWORD *sub_101693F64(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169D5FC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_101693FFC(uint64_t a1, uint64_t a2)
{
  return sub_101694004((_QWORD *)(a1 + 160), a2);
}

_QWORD *sub_101694004(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169D770(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10169409C(uint64_t a1, uint64_t a2)
{
  return sub_1016940A4((_QWORD *)(a1 + 64), a2);
}

_QWORD *sub_1016940A4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169D8E4(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_10169413C(uint64_t a1, uint64_t a2)
{
  return sub_101694144((_QWORD *)(a1 + 96), a2);
}

_QWORD *sub_101694144(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169DA58(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1016941DC(uint64_t a1, uint64_t a2)
{
  return sub_1016941E4((_QWORD *)(a1 + 128), a2);
}

_QWORD *sub_1016941E4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_10169DBCC(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_10169427C(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  NSObject *v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  NSObject *v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  int v60;
  uint64_t v61;
  const char *v63;
  uint8_t *v64;
  _BYTE v65[4];
  int v66;
  _BYTE v67[4];
  unsigned int v68;
  char v69;
  unsigned __int8 v70;
  _BYTE v71[4];
  unsigned int v72;
  char v73;
  unsigned __int8 v74;
  _BYTE v75[4];
  unsigned int v76;
  _BYTE v77[4];
  unsigned int v78;
  _BYTE v79[4];
  unsigned int v80;
  uint8_t v81[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  int v88;
  _BYTE v89[8];
  uint64_t v90;
  _BYTE v91[8];
  uint64_t v92;
  _BYTE v93[8];
  uint64_t v94;
  _BYTE v95[8];
  uint64_t v96;
  uint8_t buf[4];
  __int16 v98;
  int v99;
  __int16 v100;
  char v101;
  int v102;
  __int16 v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  int v109;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNetworkRLIReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    *(_WORD *)v81 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlePdsNetworkRLIReport", v81, 2);
    v64 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNetworkRLIReport(const pds::pdsNetworkRLIReport::Indication &)", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
  v98 = -1;
  v99 = -1;
  v100 = -1;
  v101 = 0;
  v102 = -1;
  v103 = 0;
  v104 = 0;
  v105 = -1;
  v106 = -16777216;
  v107 = -1;
  v108 = -1;
  v95[0] = 0;
  sub_10169DD40(a2, 1u, (uint64_t)v95);
  if (v95[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5 = qword_1022A0078;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      if (!v95[0])
        sub_1018ED2D4(v6, v7, v8);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v96;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"wwanType,\":%{public}d}", v81, 0x18u);
    }
  }
  v93[0] = 0;
  sub_10169DD40(a2, 2u, (uint64_t)v93);
  if (v93[0])
  {
    v9 = -1;
    switch(v94)
    {
      case 1:
        v9 = 2;
        break;
      case 2:
        v9 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        v9 = 0;
        break;
      case 8:
        goto LABEL_16;
      default:
        if (v94 == 16)
LABEL_16:
          v9 = 3;
        break;
    }
    LODWORD(v108) = v9;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = qword_1022A0078;
    v11 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      if (!v93[0])
        sub_1018ED2D4(v11, v12, v13);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v94;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"protocolType,\":%{public}d}", v81, 0x18u);
    }
  }
  v91[0] = 0;
  sub_10169DD40(a2, 3u, (uint64_t)v91);
  if (v91[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v14 = qword_1022A0078;
    v15 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v15)
    {
      if (!v91[0])
        sub_1018ED2D4(v15, v16, v17);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v92;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"transportType,\":%{public}d}", v81, 0x18u);
    }
    if (!v91[0])
      sub_1018ED2D4(v15, v16, v17);
    *(_DWORD *)(a1 + 864) = v92;
  }
  v79[0] = 0;
  sub_100014D50(a2, 4u, (uint64_t)v79);
  if (v79[0])
  {
    LODWORD(v18) = v80;
    v100 = llround((double)v18 / 1000.0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v19 = qword_1022A0078;
    v20 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v20)
    {
      if (!v79[0])
        sub_1018ED2D4(v20, v21, v22);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v80;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosTimeModemMsec,\":%{public}d}", v81, 0x18u);
    }
  }
  v77[0] = 0;
  sub_100014D50(a2, 0x12u, (uint64_t)v77);
  if (v77[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v23 = qword_1022A0078;
    v24 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v24)
    {
      if (!v77[0])
        sub_1018ED2D4(v24, v25, v26);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v78;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosTimeNetworkMsec,\":%{public}d}", v81, 0x18u);
    }
  }
  v75[0] = 0;
  sub_100014D50(a2, 5u, (uint64_t)v75);
  if (v75[0])
  {
    v27 = v76;
    if (v76 != 1)
    {
      if (v76 == 128)
      {
        v27 = 2;
      }
      else if (v76 == 2)
      {
        v27 = 0;
      }
      else
      {
        v27 = -1;
      }
    }
    v99 = v27;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v28 = qword_1022A0078;
    v29 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v29)
    {
      if (!v75[0])
        sub_1018ED2D4(v29, v30, v31);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v76;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"sessionType,\":%{public}d}", v81, 0x18u);
    }
  }
  v73 = 0;
  sub_10169DDA0(a2, 6u, &v73);
  if (v73)
  {
    v102 = v74;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v32 = qword_1022A0078;
    v33 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v33)
    {
      if (!v73)
        sub_1018ED2D4(v33, v34, v35);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v74;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"velocityRequested,\":%{public}hhd}", v81, 0x18u);
    }
  }
  v71[0] = 0;
  sub_100014D50(a2, 0x13u, (uint64_t)v71);
  if (v71[0])
  {
    v101 = sub_1016E14B4(v72);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v36 = qword_1022A0078;
    v37 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v37)
    {
      if (!v71[0])
        sub_1018ED2D4(v37, v38, v39);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v72;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"qosAccuracyMeters,\":%{public}d}", v81, 0x18u);
    }
  }
  v69 = 0;
  sub_10169DDA0(a2, 0x14u, &v69);
  if (v69)
  {
    LOBYTE(v103) = v70;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v40 = qword_1022A0078;
    v41 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v41)
    {
      if (!v69)
        sub_1018ED2D4(v41, v42, v43);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v70;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"horizontalConfidence,\":%{public}d}", v81, 0x18u);
    }
  }
  v89[0] = 0;
  v44 = sub_10169DD40(a2, 0x16u, (uint64_t)v89);
  if (v89[0])
  {
    BYTE2(v106) = sub_101694FF0((uint64_t)v44, v90);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v45 = qword_1022A0078;
    v46 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v46)
    {
      if (!v89[0])
        sub_1018ED2D4(v46, v47, v48);
      *(_DWORD *)v81 = 68289538;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v90;
      v87 = 1026;
      v88 = BYTE2(v106);
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"shapeType,\":%{public}d, \"shapeType,\":%{public}d}", v81, 0x1Eu);
    }
    if (BYTE2(v106) != 32)
    {
      BYTE2(v106) = 32;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v49 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v81 = 68289026;
        v82 = 0;
        v83 = 2082;
        v84 = "";
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,hard coding locCordinateTypeAllowed\"}", v81, 0x12u);
      }
    }
  }
  v67[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v67);
  if (v67[0])
  {
    *(_DWORD *)buf = v68;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v50 = qword_1022A0078;
    v51 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v51)
    {
      if (!v67[0])
        sub_1018ED2D4(v51, v52, v53);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v68;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"callSubId,\":%{public}d}", v81, 0x18u);
    }
  }
  v65[0] = 0;
  sub_100014D50(a2, 0x11u, (uint64_t)v65);
  if (v65[0])
  {
    v54 = 0;
    if (v66 > 7)
    {
      if (v66 == 8)
      {
        v54 = 16;
      }
      else if (v66 == 16)
      {
        v54 = 2;
      }
    }
    else if (v66 == 1)
    {
      v54 = 1;
    }
    else if (v66 == 2)
    {
      v54 = 32;
    }
    LOWORD(v106) = v54;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v55 = qword_1022A0078;
    v56 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v56)
    {
      if (!v65[0])
        sub_1018ED2D4(v56, v57, v58);
      *(_DWORD *)v81 = 68289282;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      v85 = 1026;
      v86 = v66;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RLIReport\", \"requestedConstellations,\":%{public}d}", v81, 0x18u);
    }
    if ((unsigned __int16)v106 != 1)
    {
      LOWORD(v106) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v59 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v81 = 68289026;
        v82 = 0;
        v83 = 2082;
        v84 = "";
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,hard coding requestedGnss\"}", v81, 0x12u);
      }
    }
  }
  v98 = 0;
  v107 = 1;
  v60 = *(_DWORD *)(a1 + 864);
  HIDWORD(v108) = 1;
  v109 = v60;
  v61 = *(_QWORD *)(a1 + 56);
  if (!v61)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v61 + 48))(v61, buf);
}

uint64_t sub_101694FF0(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if (a2 == 128)
    v2 = 64;
  else
    v2 = 0;
  if (a2 == 64)
    v3 = 32;
  else
    v3 = v2;
  if (a2 == 32)
    v4 = 16;
  else
    v4 = 0;
  if (a2 == 16)
    v5 = 8;
  else
    v5 = v4;
  if (a2 <= 63)
    v3 = v5;
  if (a2 == 8)
    v6 = 4;
  else
    v6 = 0;
  if (a2 == 4)
    v7 = 2;
  else
    v7 = v6;
  if (a2 == 2)
    v8 = 1;
  else
    v8 = v7;
  if (a2 <= 15)
    return v8;
  else
    return v3;
}

uint64_t sub_101695058(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  NSObject *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v31;
  uint8_t *v32;
  _BYTE v34[4];
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  _BYTE v42[8];
  uint64_t v43;
  _BYTE v44[8];
  uint64_t v45;
  _BYTE v46[8];
  uint64_t v47;
  unsigned __int8 v48[8];
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  __int16 v57;
  char v58;
  unsigned __int8 v59;
  uint8_t buf[4];
  int v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    *(_WORD *)v48 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlePdsNwAssistanceLocation", v48, 2);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceLocation(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v37 = -1;
  v38 = 0xFFFFFFFF7FFFFFFFLL;
  v40 = -1;
  v41 = -1;
  v39 = -1;
  v48[0] = 0;
  sub_10169DE00(a2, 0x12u, v48);
  if (v48[0])
  {
    LOBYTE(v37) = v49;
    BYTE1(v37) = v50 != 0;
    v4 = v51;
    v5 = v52;
    HIDWORD(v37) = v51;
    LODWORD(v38) = v52;
    v6 = v59;
    HIBYTE(v39) = v59;
    v7 = v54;
    *(_WORD *)((char *)&v38 + 5) = v54;
    v8 = HIBYTE(v54);
    HIBYTE(v38) = v53;
    if (v55)
    {
      WORD1(v37) = v57;
      LOBYTE(v39) = v58;
      BYTE4(v38) = v56;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68290307;
      v61 = 0;
      v62 = 2082;
      v63 = "";
      v64 = 1025;
      v65 = v4;
      v66 = 1025;
      v67 = v5;
      v68 = 1026;
      v69 = v7;
      v70 = 1026;
      v71 = v8;
      v72 = 1026;
      v73 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"lat,\":%{private}d, \"lon,\":%{private}d, \"semiMajorUncert,\":%{public}d, \"semiMinorUncert,\":%{public}d, \"confidence,\":%{public}d}", buf, 0x30u);
    }
  }
  v46[0] = 0;
  sub_10169DD40(a2, 1u, (uint64_t)v46);
  if (v46[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = qword_1022A0078;
    v11 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      if (!v46[0])
        sub_1018ED2D4(v11, v12, v13);
      *(_DWORD *)buf = 68289282;
      v61 = 0;
      v62 = 2082;
      v63 = "";
      v64 = 1026;
      v65 = v47;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  v44[0] = 0;
  sub_10169DD40(a2, 2u, (uint64_t)v44);
  if (v44[0])
  {
    v14 = -1;
    switch(v45)
    {
      case 1:
        v14 = 2;
        break;
      case 2:
        v14 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        v14 = 0;
        break;
      case 8:
        goto LABEL_23;
      default:
        if (v45 == 16)
LABEL_23:
          v14 = 3;
        break;
    }
    HIDWORD(v40) = v14;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v15 = qword_1022A0078;
    v16 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v16)
    {
      if (!v44[0])
        sub_1018ED2D4(v16, v17, v18);
      *(_DWORD *)buf = 68289282;
      v61 = 0;
      v62 = 2082;
      v63 = "";
      v64 = 1026;
      v65 = v45;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v42[0] = 0;
  sub_10169DD40(a2, 3u, (uint64_t)v42);
  if (v42[0])
  {
    if (v43 == 2)
      v19 = 1;
    else
      v19 = -1;
    if (v43 == 1)
      v20 = 0;
    else
      v20 = v19;
    LODWORD(v40) = v20;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v21 = qword_1022A0078;
    v22 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v22)
    {
      if (!v42[0])
        sub_1018ED2D4(v22, v23, v24);
      *(_DWORD *)buf = 68289282;
      v61 = 0;
      v62 = 2082;
      v63 = "";
      v64 = 1026;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v34[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v34);
  if (v34[0])
  {
    v36 = v35;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v25 = qword_1022A0078;
    v26 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v26)
    {
      if (!v34[0])
        sub_1018ED2D4(v26, v27, v28);
      *(_DWORD *)buf = 68289282;
      v61 = 0;
      v62 = 2082;
      v63 = "";
      v64 = 1026;
      v65 = v35;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefLoc\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  v41 = 1;
  v29 = *(_QWORD *)(a1 + 120);
  if (!v29)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v29 + 48))(v29, &v36);
}

void sub_101695704(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  int *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  NSObject *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  char v39[4];
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  char v47[8];
  uint64_t v48;
  int v49;
  int v50;
  _BYTE v51[6];
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  void *__p;
  _BYTE *v61;
  uint64_t v62;
  _BYTE v63[10];
  __int16 v64;
  int v65;
  float v66;
  void *v67;
  _BYTE *v68;
  uint8_t buf[4];
  int v70;
  __int16 v71;
  _BYTE v72[10];
  _BYTE v73[6];
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceTime", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlePdsNwAssistanceTime", &v41, 2);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  v42 = -1;
  v5 = 12;
  do
  {
    v6 = (char *)&v41 + v5;
    *(_WORD *)v6 = -1;
    v6[2] = -1;
    *(_QWORD *)(v6 + 4) = -1;
    v6[12] = -1;
    v5 += 16;
  }
  while (v6 + 16 != &v44);
  v44 = -1;
  v45 = -1;
  v46 = -1;
  sub_101696208(a2, v63);
  if (v63[0])
  {
    if (v63[8])
    {
      LODWORD(v42) = v65;
      WORD2(v42) = v64;
      BYTE6(v42) = (int)v66;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240960;
      v70 = v45;
      v71 = 1026;
      *(_DWORD *)v72 = HIDWORD(v45);
      *(_WORD *)&v72[4] = 1026;
      *(_DWORD *)&v72[6] = WORD2(v42);
      *(_WORD *)v73 = 1026;
      *(_DWORD *)&v73[2] = v42;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tb,RefTime,sessionProtocol,%{public}d,posProtocol,%{public}d,gpsWeek,%{public}d,gpsTow,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v49 = 67240960;
      v50 = v45;
      *(_WORD *)v51 = 1026;
      *(_DWORD *)&v51[2] = HIDWORD(v45);
      v52 = 1026;
      v53 = WORD2(v42);
      v54 = 1026;
      v55 = v42;
      LODWORD(v38) = 26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,RefTime,sessionProtocol,%{public}d,posProtocol,%{public}d,gpsWeek,%{public}d,gpsTow,%{public}d", &v49, v38);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    if (!v63[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    __p = 0;
    v61 = 0;
    v62 = 0;
    sub_10025EA00(&__p, v67, (uint64_t)v68, (v68 - (_BYTE *)v67) >> 3);
    v8 = __p;
    if (__p != v61)
    {
      HIBYTE(v42) = (v61 - (_BYTE *)__p) >> 3;
      if ((((_WORD)v61 - (_WORD)__p) & 0x7F8u) <= 0x87uLL)
      {
        if ((unint64_t)((v61 - (_BYTE *)__p) >> 3) <= 1)
          v9 = 1;
        else
          v9 = (v61 - (_BYTE *)__p) >> 3;
        v10 = &v43;
        v11 = (unsigned __int8 *)__p + 3;
        v12 = v9;
        do
        {
          *((_BYTE *)v10 + 2) = *(v11 - 3);
          v10[1] = *(v11 - 1);
          v10[2] = *v11;
          *((_BYTE *)v10 + 12) = v11[1];
          *(_WORD *)v10 = *(_WORD *)(v11 + 3);
          v10 += 4;
          v11 += 8;
          --v12;
        }
        while (v12);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C67E8);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v14 = &v41 + 4 * v9;
          v15 = *((unsigned __int8 *)v14 + 14);
          v16 = v14[4];
          v17 = v14[5];
          v18 = *((unsigned __int8 *)v14 + 24);
          LODWORD(v14) = *((unsigned __int16 *)v14 + 6);
          *(_DWORD *)buf = 67241472;
          v70 = v9;
          v71 = 1026;
          *(_DWORD *)v72 = v15;
          *(_WORD *)&v72[4] = 1026;
          *(_DWORD *)&v72[6] = v16;
          *(_WORD *)v73 = 1026;
          *(_DWORD *)&v73[2] = v17;
          v74 = 1026;
          v75 = v18;
          v76 = 1026;
          v77 = (int)v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#tb,RefTime,towAssist,%{public}d,satId,%{public}d,antiSpoof,%{public}d,alert,%{public}d,tlmReserved,%{public}d,tlmMsg,%{public}d", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C67E8);
          v31 = &v41 + 4 * v9;
          v32 = *((unsigned __int8 *)v31 + 14);
          v33 = v31[4];
          v34 = v31[5];
          v35 = *((unsigned __int8 *)v31 + 24);
          LODWORD(v31) = *((unsigned __int16 *)v31 + 6);
          v49 = 67241472;
          v50 = v9;
          *(_WORD *)v51 = 1026;
          *(_DWORD *)&v51[2] = v32;
          v52 = 1026;
          v53 = v33;
          v54 = 1026;
          v55 = v34;
          v56 = 1026;
          v57 = v35;
          v58 = 1026;
          v59 = (int)v31;
          LODWORD(v38) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,RefTime,towAssist,%{public}d,satId,%{public}d,antiSpoof,%{public}d,alert,%{public}d,tlmReserved,%{public}d,tlmMsg,%{public}d", &v49, v38);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceTime(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
      }
      v8 = __p;
    }
    if (v8)
    {
      v61 = v8;
      operator delete(v8);
    }
  }
  LOBYTE(v49) = 0;
  sub_10169DD40(a2, 1u, (uint64_t)&v49);
  if ((_BYTE)v49)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!(_BYTE)v49)
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 68289282;
      v70 = 0;
      v71 = 2082;
      *(_QWORD *)v72 = "";
      *(_WORD *)&v72[8] = 1026;
      *(_DWORD *)v73 = *(_DWORD *)v51;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  LOBYTE(__p) = 0;
  sub_10169DD40(a2, 2u, (uint64_t)&__p);
  if ((_BYTE)__p)
  {
    v20 = -1;
    switch((unint64_t)v61)
    {
      case 1uLL:
        v20 = 2;
        break;
      case 2uLL:
        v20 = 1;
        break;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        break;
      case 4uLL:
        v20 = 0;
        break;
      case 8uLL:
        goto LABEL_42;
      default:
        if (v61 == (_BYTE *)16)
LABEL_42:
          v20 = 3;
        break;
    }
    HIDWORD(v45) = v20;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!(_BYTE)__p)
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 68289282;
      v70 = 0;
      v71 = 2082;
      *(_QWORD *)v72 = "";
      *(_WORD *)&v72[8] = 1026;
      *(_DWORD *)v73 = (_DWORD)v61;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v47[0] = 0;
  sub_10169DD40(a2, 3u, (uint64_t)v47);
  if (v47[0])
  {
    if (v48 == 2)
      v22 = 1;
    else
      v22 = -1;
    if (v48 == 1)
      v23 = 0;
    else
      v23 = v22;
    LODWORD(v45) = v23;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!v47[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 68289282;
      v70 = 0;
      v71 = 2082;
      *(_QWORD *)v72 = "";
      *(_WORD *)&v72[8] = 1026;
      *(_DWORD *)v73 = v48;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v39[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v39);
  if (v39[0])
  {
    v41 = v40;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!v39[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 68289282;
      v70 = 0;
      v71 = 2082;
      *(_QWORD *)v72 = "";
      *(_WORD *)&v72[8] = 1026;
      *(_DWORD *)v73 = v40;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,RefTime\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  v46 = 1;
  v26 = *(_QWORD *)(a1 + 152);
  if (!v26)
    sub_10025FD1C();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v26 + 48))(v26, &v41);
  if (v63[0])
  {
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
  }
}

void sub_101696174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p)
    operator delete(__p);
  if (a59)
  {
    if (a62)
      operator delete(a62);
  }
  _Unwind_Resume(exception_object);
}

void sub_101696208(qmi::MessageBase *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  sub_10169E024(a1, 0x13u, (uint64_t)a2);
}

void sub_101696234(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (*v1)
    sub_1016A07D4((uint64_t)v1);
  _Unwind_Resume(exception_object);
}

void sub_101696250(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  NSObject *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  NSObject *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  void *__p;
  void *v104;
  uint64_t v105;
  char v106[4];
  int v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _DWORD v113[2];
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  int v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  char v170[8];
  void *v171;
  void *v172;
  char v173[8];
  uint64_t v174;
  char v175[8];
  uint64_t v176;
  char v177[8];
  uint64_t v178;
  uint8_t buf[4];
  int v180;
  __int16 v181;
  _BYTE v182[10];
  _BYTE v183[6];
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  __int16 v196;
  int v197;
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  __int16 v230;
  int v231;
  __int16 v232;
  int v233;

  v4 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v5 = &qword_1022A0000;
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceEphemeris", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    LOWORD(v108) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlePdsNwAssistanceEphemeris", &v108, 2);
    v89 = (uint8_t *)v88;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceNavModel(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v88);
    if (v89 != buf)
      free(v89);
  }
  v109 = -1;
  v7 = 8;
  *(_QWORD *)&v8 = 0x8000000080000000;
  *((_QWORD *)&v8 + 1) = 0x8000000080000000;
  do
  {
    v9 = (char *)&v108 + v7;
    *(_OWORD *)v9 = xmmword_101CCCCE0;
    *((_OWORD *)v9 + 1) = v8;
    *((_OWORD *)v9 + 2) = xmmword_101CCCCF0;
    *((_QWORD *)v9 + 6) = 0x8000800080008000;
    *((_DWORD *)v9 + 14) = 0x80000000;
    *((_WORD *)v9 + 30) = -1;
    *((_DWORD *)v9 + 16) = -1;
    v9[68] = 127;
    *((_DWORD *)v9 + 18) = -1;
    v7 += 96;
    v9[76] = -1;
  }
  while (v9 + 96 != (char *)&v111);
  v111 = -1;
  v112 = -1;
  v177[0] = 0;
  sub_10169DD40(a2, 1u, (uint64_t)v177);
  if (v177[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = qword_1022A0078;
    v11 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      if (!v177[0])
        sub_1018ED2D4(v11, v12, v13);
      *(_DWORD *)buf = 68289282;
      v180 = 0;
      v181 = 2082;
      *(_QWORD *)v182 = "";
      *(_WORD *)&v182[8] = 1026;
      *(_DWORD *)v183 = v178;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"wwanType,\":%{public}d}", buf, 0x18u);
    }
  }
  v175[0] = 0;
  sub_10169DD40(a2, 2u, (uint64_t)v175);
  if (v175[0])
  {
    v14 = -1;
    switch(v176)
    {
      case 1:
        v14 = 2;
        break;
      case 2:
        v14 = 1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        v14 = 0;
        break;
      case 8:
        goto LABEL_18;
      default:
        if (v176 == 16)
LABEL_18:
          v14 = 3;
        break;
    }
    HIDWORD(v111) = v14;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v15 = qword_1022A0078;
    v16 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v16)
    {
      if (!v175[0])
        sub_1018ED2D4(v16, v17, v18);
      *(_DWORD *)buf = 68289282;
      v180 = 0;
      v181 = 2082;
      *(_QWORD *)v182 = "";
      *(_WORD *)&v182[8] = 1026;
      *(_DWORD *)v183 = v176;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"protocolType,\":%{public}d}", buf, 0x18u);
    }
  }
  v173[0] = 0;
  sub_10169DD40(a2, 3u, (uint64_t)v173);
  if (v173[0])
  {
    if (v174 == 2)
      v19 = 1;
    else
      v19 = -1;
    if (v174 == 1)
      v20 = 0;
    else
      v20 = v19;
    LODWORD(v111) = v20;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v21 = qword_1022A0078;
    v22 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v22)
    {
      if (!v173[0])
        sub_1018ED2D4(v22, v23, v24);
      *(_DWORD *)buf = 68289282;
      v180 = 0;
      v181 = 2082;
      *(_QWORD *)v182 = "";
      *(_WORD *)&v182[8] = 1026;
      *(_DWORD *)v183 = v174;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"transportType,\":%{public}d}", buf, 0x18u);
    }
  }
  v106[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v106);
  if (v106[0])
  {
    v108 = v107;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v25 = qword_1022A0078;
    v26 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v26)
    {
      if (!v106[0])
        sub_1018ED2D4(v26, v27, v28);
      *(_DWORD *)buf = 68289282;
      v180 = 0;
      v181 = 2082;
      *(_QWORD *)v182 = "";
      *(_WORD *)&v182[8] = 1026;
      *(_DWORD *)v183 = v107;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,NavModel\", \"SubId,\":%{public}d}", buf, 0x18u);
    }
  }
  sub_101696F08(a2, v170);
  if (v170[0])
  {
    v29 = v172;
    v30 = v171;
    v31 = ((_BYTE *)v172 - (_BYTE *)v171) / 100;
    __p = 0;
    v104 = 0;
    v105 = 0;
    sub_101699C24(&__p, v171, (uint64_t)v172, v31);
    v32 = __p;
    if (__p != v104)
    {
      if (!v170[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      v109 = 41 * (((_DWORD)v172 - (_DWORD)v171) >> 2);
      if (v29 != v30)
      {
        v91 = a1;
        v33 = 0;
        v34 = 0;
        if (v31 <= 1)
          v31 = 1;
        v35 = &v110;
        v92 = v31;
        do
        {
          v36 = (char *)__p;
          v37 = (char *)__p + v33;
          *((_DWORD *)v35 - 10) = *(_DWORD *)((char *)__p + v33 + 32);
          *((_DWORD *)v35 - 9) = *((_DWORD *)v37 + 11);
          *((_DWORD *)v35 - 8) = *((_DWORD *)v37 + 13);
          *((_DWORD *)v35 - 7) = *((_DWORD *)v37 + 15);
          LODWORD(v38) = *((_DWORD *)v37 + 18);
          DWORD1(v38) = *((_DWORD *)v37 + 20);
          *((_QWORD *)&v38 + 1) = *((_QWORD *)v37 + 11);
          *(_OWORD *)(v35 - 3) = v38;
          *((_WORD *)v35 - 4) = *((_WORD *)v37 + 3);
          *((_WORD *)v35 - 3) = *((_WORD *)v37 + 13);
          *((_WORD *)v35 - 2) = *((_WORD *)v37 + 15);
          *((_WORD *)v35 - 1) = *((_WORD *)v37 + 19);
          *(_WORD *)v35 = *((_WORD *)v37 + 20);
          *((_WORD *)v35 + 1) = *((_WORD *)v37 + 24);
          *((_WORD *)v35 + 2) = *((_WORD *)v37 + 28);
          *((_WORD *)v35 + 3) = *((_WORD *)v37 + 32);
          *((_WORD *)v35 + 4) = *((_WORD *)v37 + 35);
          *((_WORD *)v35 + 5) = *((_WORD *)v37 + 38);
          *((_WORD *)v35 + 6) = *((_WORD *)v37 + 42);
          *((_WORD *)v35 + 7) = *((_WORD *)v37 + 48);
          *((_BYTE *)v35 + 16) = *v37 - 1;
          *((_BYTE *)v35 + 17) = v37[3];
          *((_BYTE *)v35 + 18) = v37[4];
          *((_BYTE *)v35 + 19) = v37[28];
          *((_BYTE *)v35 + 20) = 0;
          *((_BYTE *)v35 + 21) = v37[2];
          *((_DWORD *)v35 + 6) = v37[9];
          *((_BYTE *)v35 + 28) = v37[25];
          if (v37[66])
            *((_DWORD *)v35 + 8) = v37[67];
          *((_BYTE *)v35 + 36) = v37[69];
          if (v37[10])
          {
            v39 = &v36[v33];
            *((_DWORD *)v35 + 10) = *((_DWORD *)v39 + 3);
            *((_DWORD *)v35 + 11) = *((_DWORD *)v39 + 4);
            *((_DWORD *)v35 + 12) = *((_DWORD *)v39 + 5);
          }
          if (v4[14] != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C67E8);
          v40 = v5[15];
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            v41 = *((_DWORD *)v37 + 8);
            v42 = *((_DWORD *)v37 + 11);
            v43 = *((_DWORD *)v37 + 13);
            v44 = *((_DWORD *)v37 + 15);
            v45 = *((_DWORD *)v37 + 18);
            v46 = *((_DWORD *)v37 + 20);
            v48 = *((_DWORD *)v37 + 22);
            v47 = *((_DWORD *)v37 + 23);
            v49 = *((unsigned __int16 *)v37 + 3);
            v50 = *((unsigned __int16 *)v37 + 13);
            v51 = *((unsigned __int16 *)v37 + 15);
            v52 = *((unsigned __int16 *)v37 + 19);
            v53 = *((unsigned __int16 *)v37 + 20);
            v54 = *((unsigned __int16 *)v37 + 24);
            v55 = *((unsigned __int16 *)v37 + 28);
            v56 = *((unsigned __int16 *)v37 + 32);
            v57 = *((unsigned __int16 *)v37 + 35);
            v58 = *((unsigned __int16 *)v37 + 38);
            v59 = *((unsigned __int16 *)v37 + 42);
            v60 = *((unsigned __int16 *)v37 + 48);
            v61 = v37[3];
            v93 = v37[4];
            v94 = v37[28];
            v95 = v37[98];
            v97 = v37[2];
            v99 = v37[9];
            v101 = v37[69];
            *(_DWORD *)v182 = *((unsigned __int8 *)v35 + 16);
            *(_DWORD *)&v182[6] = v41;
            *(_DWORD *)&v183[2] = v42;
            v185 = v43;
            v187 = v44;
            v189 = v45;
            v191 = v46;
            v193 = v48;
            v195 = v47;
            v197 = v49;
            v199 = v50;
            v201 = v51;
            v203 = v52;
            v205 = v53;
            v207 = v54;
            v209 = v55;
            v211 = v56;
            v213 = v57;
            v215 = v58;
            v4 = &qword_1022A0000;
            v217 = v59;
            v31 = v92;
            v219 = v60;
            v5 = &qword_1022A0000;
            v221 = v61;
            v223 = v93;
            v225 = v94;
            v227 = v95;
            v229 = v97;
            v231 = v99;
            v233 = v101;
            *(_DWORD *)buf = 67247360;
            v180 = v34;
            v181 = 1026;
            *(_WORD *)&v182[4] = 1026;
            *(_WORD *)v183 = 1026;
            v184 = 1026;
            v186 = 1026;
            v188 = 1026;
            v190 = 1026;
            v192 = 1026;
            v194 = 1026;
            v196 = 1026;
            v198 = 1026;
            v200 = 1026;
            v202 = 1026;
            v204 = 1026;
            v206 = 1026;
            v208 = 1026;
            v210 = 1026;
            v212 = 1026;
            v214 = 1026;
            v216 = 1026;
            v218 = 1026;
            v220 = 1026;
            v222 = 1026;
            v224 = 1026;
            v226 = 1026;
            v228 = 1026;
            v230 = 1026;
            v232 = 1026;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#tb,NavModel,ephemeris,%{public}d,satId,%{public}u,af0,%{public}u,m0,%{public}u,eccentricity,%{public}u,sqrtA,%{public}u,omega0,%{public}u,i0,%{public}u,omega,%{public}u,omegaDot,%{public}u,iodc,%{public}u,toc,%{public}u,af1,%{public}u,crs,%{public}u,deltaN,%{public}u,cuc,%{public}u,cus,%{public}u,toe,%{public}u,cic,%{public}u,cis,%{public}u,crc,%{public}u,idot,%{public}u,userRangeAccuracy,%{public}u,svHealth,%{public}u,af2,%{public}u,satelliteStatus,%{public}u,codeL2,%{public}u,pcodeFlag,%{public}u,aodo,%{public}u", buf, 0xB0u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v4[14] != -1)
              dispatch_once(&qword_1022A0070, &stru_1021C67E8);
            v62 = *((_DWORD *)v37 + 8);
            v63 = *((_DWORD *)v37 + 11);
            v64 = *((_DWORD *)v37 + 13);
            v65 = *((_DWORD *)v37 + 15);
            v66 = *((_DWORD *)v37 + 18);
            v67 = *((_DWORD *)v37 + 20);
            v69 = *((_DWORD *)v37 + 22);
            v68 = *((_DWORD *)v37 + 23);
            v70 = *((unsigned __int16 *)v37 + 3);
            v71 = *((unsigned __int16 *)v37 + 13);
            v72 = *((unsigned __int16 *)v37 + 15);
            v73 = *((unsigned __int16 *)v37 + 19);
            v74 = *((unsigned __int16 *)v37 + 20);
            v75 = *((unsigned __int16 *)v37 + 24);
            v76 = *((unsigned __int16 *)v37 + 28);
            v77 = *((unsigned __int16 *)v37 + 32);
            v78 = *((unsigned __int16 *)v37 + 35);
            v79 = *((unsigned __int16 *)v37 + 38);
            v80 = *((unsigned __int16 *)v37 + 42);
            v81 = *((unsigned __int16 *)v37 + 48);
            v82 = v37[3];
            v83 = v37[4];
            v96 = v37[28];
            v98 = v37[98];
            v100 = v37[2];
            v102 = v37[9];
            v84 = v37[69];
            v115 = *((unsigned __int8 *)v35 + 16);
            v117 = v62;
            v119 = v63;
            v121 = v64;
            v123 = v65;
            v125 = v66;
            v127 = v67;
            v129 = v69;
            v131 = v68;
            v133 = v70;
            v135 = v71;
            v137 = v72;
            v139 = v73;
            v141 = v74;
            v143 = v75;
            v145 = v76;
            v147 = v77;
            v149 = v78;
            v151 = v79;
            v153 = v80;
            v155 = v81;
            v157 = v82;
            v159 = v83;
            v161 = v96;
            v163 = v98;
            v165 = v100;
            v167 = v102;
            v169 = v84;
            v5 = &qword_1022A0000;
            v113[0] = 67247360;
            v113[1] = v34;
            v114 = 1026;
            v116 = 1026;
            v118 = 1026;
            v120 = 1026;
            v122 = 1026;
            v124 = 1026;
            v126 = 1026;
            v128 = 1026;
            v130 = 1026;
            v132 = 1026;
            v134 = 1026;
            v136 = 1026;
            v138 = 1026;
            v140 = 1026;
            v142 = 1026;
            v144 = 1026;
            v146 = 1026;
            v148 = 1026;
            v150 = 1026;
            v152 = 1026;
            v154 = 1026;
            v156 = 1026;
            v158 = 1026;
            v160 = 1026;
            v162 = 1026;
            v164 = 1026;
            v166 = 1026;
            v168 = 1026;
            LODWORD(v90) = 176;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,NavModel,ephemeris,%{public}d,satId,%{public}u,af0,%{public}u,m0,%{public}u,eccentricity,%{public}u,sqrtA,%{public}u,omega0,%{public}u,i0,%{public}u,omega,%{public}u,omegaDot,%{public}u,iodc,%{public}u,toc,%{public}u,af1,%{public}u,crs,%{public}u,deltaN,%{public}u,cuc,%{public}u,cus,%{public}u,toe,%{public}u,cic,%{public}u,cis,%{public}u,crc,%{public}u,idot,%{public}u,userRangeAccuracy,%{public}u,svHealth,%{public}u,af2,%{public}u,satelliteStatus,%{public}u,codeL2,%{public}u,pcodeFlag,%{public}u,aodo,%{public}u", v113, v90);
            v86 = (uint8_t *)v85;
            sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceNavModel(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v85);
            v4 = &qword_1022A0000;
            v31 = v92;
            if (v86 != buf)
              free(v86);
          }
          ++v34;
          v33 += 100;
          v35 += 12;
        }
        while (v31 != v34);
        v32 = __p;
        a1 = v91;
      }
    }
    if (v32)
    {
      v104 = v32;
      operator delete(v32);
    }
  }
  v112 = 1;
  v87 = *(_QWORD *)(a1 + 88);
  if (!v87)
    sub_10025FD1C();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v87 + 48))(v87, &v108);
  if (v170[0])
  {
    if (v171)
    {
      v172 = v171;
      operator delete(v171);
    }
  }
}

void sub_101696E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  void *v20;

  if (__p)
    operator delete(__p);
  if (LOBYTE(STACK[0x740]))
  {
    v20 = (void *)STACK[0x748];
    if (STACK[0x748])
    {
      STACK[0x750] = (unint64_t)v20;
      operator delete(v20);
    }
  }
  _Unwind_Resume(a1);
}

void sub_101696F08(qmi::MessageBase *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  sub_10169E444(a1, 0x11u, (uint64_t)a2);
}

void sub_101696F34(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  if (*v1)
    sub_1016A0804((uint64_t)v1);
  _Unwind_Resume(exception_object);
}

void sub_101696F50(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t v9[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  _BYTE v15[8];
  void *__p;
  void *v17;
  unsigned __int8 v18[48];
  uint8_t buf[24];
  void *v20;
  void *v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,handlePdsNwAssistanceReport", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    *(_WORD *)v18 = 0;
    LODWORD(v8) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,handlePdsNwAssistanceReport", v18, v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsNwAssistanceReport(const pds::pdsNetworkAssistanceDataReport::Indication &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  v18[0] = 0;
  sub_10169DE00(a2, 0x12u, v18);
  if (v18[0])
    sub_101695058(a1, a2);
  sub_101696208(a2, buf);
  if (buf[0])
    sub_101695704(a1, a2);
  sub_101696F08(a2, v15);
  if (v15[0])
    sub_101696250(a1, a2);
  BYTE6(v8) = 0;
  sub_10169DDA0(a2, 4u, (_BYTE *)&v8 + 6);
  if (BYTE6(v8))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!BYTE6(v8))
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 1026;
      v14 = HIBYTE(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tb,ADReport\", \"Islast,\":%{public}hhd}", v9, 0x18u);
    }
  }
  if (v15[0] && __p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (buf[0])
  {
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
  }
}

void sub_101697260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  if (a15 && __p)
    operator delete(__p);
  if (a25)
  {
    v27 = *(void **)(v25 + 24);
    if (v27)
    {
      *(_QWORD *)(v25 + 32) = v27;
      operator delete(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1016972B8(uint64_t a1, _DWORD *a2)
{
  _OWORD *v4;
  _BOOL4 v5;
  int v6;
  NSObject *v7;
  std::string *v8;
  _BOOL4 v9;
  uint64_t v10;
  std::string *p_buf;
  std::string *v12;
  std::string *v13;
  std::string buf;
  int v15;
  std::string *v16;
  std::string __p[68];

  v4 = (_OWORD *)(a1 + 532);
  v5 = sub_100CD5700(a1 + 532);
  v6 = a2[4];
  *v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 548) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_100CD5278(a2, __p);
    v8 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tb,EMERGENCY: state,%{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = qword_1022A0078;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v15 = 136446210;
    v16 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 2, "#tb,EMERGENCY: state,%{public}s", &v15, 12);
    v13 = v12;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v13);
    if (v13 != __p)
      free(v13);
  }
  v9 = sub_100CD5700((uint64_t)a2);
  if (!v5 || v9)
  {
    if (!v5 && v9)
      sub_1016977EC();
  }
  else
  {
    sub_101697524((_BYTE *)a1);
  }
}

void sub_101697524(_BYTE *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#tb,onEmergencyEntry", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,onEmergencyEntry", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::onEmergencyExit()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (a1[553])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,Restart GPS at end of emergency mode\"}", buf, 0x12u);
    }
    sub_10168F514((uint64_t)a1);
  }
  else if (a1[552])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,Restart QMI connection to enable reinitialization\"}", buf, 0x12u);
    }
    sub_10168F514((uint64_t)a1);
    sub_10178E694((uint64_t)(a1 + 200));
  }
  if (a1[556])
    a1[556] = 0;
}

void sub_1016977EC()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#tb,onEmergencyEntry", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,onEmergencyEntry", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::onEmergencyEntry()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_101697970(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v5;
  void **v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  const char *v38;
  uint8_t *v39;
  void *__p;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  int v57;
  __int16 v58;
  _BYTE v59[20];
  _BYTE v60[6];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F790BC(a3, &__p);
    v6 = v45 >= 0 ? &__p : (void **)__p;
    v7 = *(_DWORD *)a2;
    *(_DWORD *)buf = 68289538;
    v57 = 0;
    v58 = 2082;
    *(_QWORD *)v59 = "";
    *(_WORD *)&v59[8] = 2082;
    *(_QWORD *)&v59[10] = v6;
    *(_WORD *)&v59[18] = 1026;
    *(_DWORD *)v60 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,emergency settings changed\", \"reason\":%{public, location:escape_only}s, \"instance\":%{public}d}", buf, 0x22u);
    if (SHIBYTE(v45) < 0)
      operator delete(__p);
  }
  v8 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    goto LABEL_13;
  if (v8 == 1 && sub_1001DC538())
  {
    v8 = *(_DWORD *)a2;
LABEL_13:
    v9 = (_QWORD *)(a1 + 896);
    v10 = sub_1016911FC((_QWORD *)(a1 + 896), v8);
    sub_10084B628(v10, a2);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 7);
      v13 = *(unsigned __int16 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 984);
      v14 = sub_1016911FC(v9, *(_DWORD *)a2);
      if (*(char *)(v14 + 959) >= 0)
        v15 = v14 + 936;
      else
        v15 = *(_QWORD *)(v14 + 936);
      v16 = *(_BYTE *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v17 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v18 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v19 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v20 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      *(_DWORD *)buf = 67241986;
      v57 = v12;
      v58 = 1026;
      *(_DWORD *)v59 = v13;
      *(_WORD *)&v59[4] = 2080;
      *(_QWORD *)&v59[6] = v15;
      *(_WORD *)&v59[14] = 1026;
      *(_DWORD *)&v59[16] = v16 & 1;
      *(_WORD *)v60 = 1026;
      *(_DWORD *)&v60[2] = (v17 >> 1) & 1;
      v61 = 1026;
      v62 = (v18 >> 2) & 1;
      v63 = 1026;
      v64 = (v19 >> 3) & 1;
      v65 = 1026;
      v66 = (v20 >> 4) & 1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tb,carrierBundleSettings,supported,%{public}d,port,%{public}d,hslp,%s,allowNonEmergencySupl,%{public}d,allowSuplWithoutEmergencyNotification,%{public}d,allowHslpMismatch,%{public}d,allowHslpWildCard,%{public}d,allowNonConformingEslpAddress,%{public}d\n", buf, 0x36u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v28 = qword_1022A0078;
      v29 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 7);
      v30 = *(unsigned __int16 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 984);
      v31 = sub_1016911FC(v9, *(_DWORD *)a2);
      if (*(char *)(v31 + 959) >= 0)
        v32 = v31 + 936;
      else
        v32 = *(_QWORD *)(v31 + 936);
      v33 = *(_BYTE *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v34 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v35 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v36 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      v37 = *(unsigned __int8 *)(sub_1016911FC(v9, *(_DWORD *)a2) + 992);
      LODWORD(__p) = 67241986;
      HIDWORD(__p) = v29;
      v42 = 1026;
      v43 = v30;
      v44 = 2080;
      v45 = v32;
      v46 = 1026;
      v47 = v33 & 1;
      v48 = 1026;
      v49 = (v34 >> 1) & 1;
      v50 = 1026;
      v51 = (v35 >> 2) & 1;
      v52 = 1026;
      v53 = (v36 >> 3) & 1;
      v54 = 1026;
      v55 = (v37 >> 4) & 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "#tb,carrierBundleSettings,supported,%{public}d,port,%{public}d,hslp,%s,allowNonEmergencySupl,%{public}d,allowSuplWithoutEmergencyNotification,%{public}d,allowHslpMismatch,%{public}d,allowHslpWildCard,%{public}d,allowNonConformingEslpAddress,%{public}d\n", &__p, 54);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    v21 = sub_1016911FC(v9, *(_DWORD *)a2);
    v22 = *(unsigned int *)a2;
    if (*(_BYTE *)(v21 + 7))
      sub_101691248(a1, v22);
    else
      sub_101691468(a1, v22);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v23 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v24 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67240192;
    v57 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#tb,InvalidArgs for handleEmergencySettingsChange,instance,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v25 = *(_DWORD *)a2;
    LODWORD(__p) = 67240192;
    HIDWORD(__p) = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tb,InvalidArgs for handleEmergencySettingsChange,instance,%{public}d", &__p, 8);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaModemController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
}

void sub_101697F88(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    *(_DWORD *)buf = 67240448;
    v23 = a2;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendInjectSuplCertReq,index,%{public}d,len,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v11 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    v19[0] = 67240448;
    v19[1] = a2;
    v20 = 1026;
    v21 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,#supl,sendInjectSuplCertReq,index,%{public}d,len,%{public}d", v19, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v15 = 0;
  v16 = 0;
  __p = 0;
  sub_1007855D8(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v18 = 0;
  v8 = operator new(0x28uLL);
  *(_QWORD *)v8 = off_1021C72A8;
  v8[8] = a2;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  sub_1007855D8((_QWORD *)v8 + 2, __p, (uint64_t)v15, v15 - (_BYTE *)__p);
  v18 = v8;
  sub_10178EA00(a1 + 200, (uint64_t)v17);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_101698218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_101698280(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  int v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,fetchUmtsApn,instance,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v11[0] = 67240192;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,fetchUmtsApn,instance,%{public}d", v11, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 192), "vendor"), "proxyForService:forClient:", CFSTR("CLTelephonyService"), CFSTR("CLGnssProvider"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1016992A8;
  v9[3] = &unk_1021C67C8;
  v9[4] = a1;
  v10 = a2;
  return objc_msgSend(v5, "fetchUmtsApnForInstance:WithReply:", a2, v9);
}

uint64_t (***sub_101698488(uint64_t a1, int a2))()
{
  NSObject *v4;
  uint64_t (***result)();
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendDeleteSuplCert,index,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v12[0] = 67240192;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendDeleteSuplCert,index,%{public}d", v12, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9 = off_1021C7348;
  v10 = a2;
  v11 = &v9;
  sub_10178EA00(a1 + 200, (uint64_t)&v9);
  result = v11;
  if (v11 == &v9)
  {
    v6 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (uint64_t (***)())(*result)[v6]();
}

void sub_101698684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1016986C4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  _BOOL8 result;
  int v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  __int128 v29;
  uint8_t buf[4];
  _BYTE v31[14];
  __int16 v32;
  _BYTE v33[14];
  __int16 v34;
  int v35;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C6840);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2 + 8;
    v8 = *(_DWORD *)(a2 + 36);
    if (*(char *)(a2 + 31) < 0)
      v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)v31 = 0;
    *(_WORD *)&v31[4] = 2082;
    *(_QWORD *)&v31[6] = "";
    v32 = 1026;
    *(_DWORD *)v33 = v8;
    *(_WORD *)&v33[4] = 2082;
    *(_QWORD *)&v33[6] = v7;
    v34 = 1026;
    v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,#supl,isValidSupl\", \"trigger\":%{public}d, \"url\":%{public, location:escape_only}s, \"simInstance\":%{public}d}", buf, 0x28u);
  }
  if (*(_DWORD *)(a2 + 36) == -1)
  {
    v15 = *(unsigned __int8 *)(a2 + 31);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a2 + 16);
    if (!v15
      || (*(_BYTE *)(sub_1016911FC((_QWORD *)(a1 + 896), a3) + 992) & 4) != 0
      || (v16 = sub_1016911FC((_QWORD *)(a1 + 896), a3) + 936,
          v17 = sub_1016911FC((_QWORD *)(a1 + 896), a3),
          sub_100F890C0((uint64_t *)(a2 + 8), v16, (*(unsigned __int8 *)(v17 + 992) >> 3) & 1)))
    {
      if (!sub_100CD5700(a1 + 532) && (*(_BYTE *)(sub_1016911FC((_QWORD *)(a1 + 896), a3) + 992) & 1) == 0)
      {
        v18 = *(unsigned __int8 *)(a2 + 31);
        if ((v18 & 0x80u) != 0)
          v18 = *(_QWORD *)(a2 + 16);
        if (!v18)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C6840);
          v24 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v25 = sub_100CD5700(a1 + 532);
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v31 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,emerg check failed,isBasebandEmergency,%{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021C6840);
            v26 = qword_1022A0088;
            LODWORD(v29) = 67240192;
            DWORD1(v29) = sub_100CD5700(a1 + 532);
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#tb,#supl,isValidSupl,emerg check failed,isBasebandEmergency,%{public}d", &v29, 8);
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaModemController::isValidSupl(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          sub_101698EB4(a1, 2);
          return 0;
        }
      }
      if (*(_DWORD *)(a2 + 32) == 3 && !*(_DWORD *)(sub_1016911FC((_QWORD *)(a1 + 896), a3) + 988))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C6840);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,UDP check failed", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C6840);
          LOWORD(v29) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,#supl,isValidSupl,UDP check failed", &v29, 2, v29);
          goto LABEL_16;
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C6840);
        v19 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)v31 = 0;
          *(_WORD *)&v31[4] = 2082;
          *(_QWORD *)&v31[6] = "";
          v32 = 2082;
          *(_QWORD *)v33 = "Pass";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tb,isValidSupl\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        return 1;
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C6840);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 31) >= 0)
          v21 = a2 + 8;
        else
          v21 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v31 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,url check failed ,%{public}s", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C6840);
        if (*(char *)(a2 + 31) >= 0)
          v22 = a2 + 8;
        else
          v22 = *(_QWORD *)(a2 + 8);
        LODWORD(v29) = 136446210;
        *(_QWORD *)((char *)&v29 + 4) = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,#supl,isValidSupl,url check failed ,%{public}s", &v29, 12, v29);
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C6840);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#tb,#supl,isValidSupl,unsupported trigger,%{public}d", buf, 8u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C6840);
      v12 = *(_DWORD *)(a2 + 36);
      LODWORD(v29) = 67240192;
      DWORD1(v29) = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#tb,#supl,isValidSupl,unsupported trigger,%{public}d", &v29, 8, v29);
LABEL_16:
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaModemController::isValidSupl(const CLEurekaNilrTypes::SuplInit &, CLTelephonyService_Type::SimInstance)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_101698DDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_1021C7168;
  v5[1] = a2;
  v5[2] = a3;
  v6 = v5;
  sub_10178EA00(a1 + 200, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_101698E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101698EB4(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t i;
  void *v6;
  void *v7;
  const char *v8;
  uint8_t *v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12[4];
  char v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[10];
  __int16 v17;
  int v18;
  uint8_t buf[8];
  _BYTE v20[6];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v20 = 1026;
    *(_DWORD *)&v20[2] = a2;
    v21 = 1026;
    v22 = 0;
    v23 = 1026;
    v24 = 0;
    v25 = 1026;
    v26 = 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tb,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v14 = 67241216;
    LOWORD(v15) = 1026;
    *(_DWORD *)((char *)&v15 + 2) = a2;
    HIWORD(v15) = 1026;
    *(_DWORD *)v16 = 0;
    *(_WORD *)&v16[4] = 1026;
    *(_DWORD *)&v16[6] = 0;
    v17 = 1026;
    v18 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", &v14, 32);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::submitNonEmergencyNILRSessionStatsToCA(Emergency::PositionSession)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)buf = 86;
  *(_DWORD *)v20 = 0;
  v27 = 0;
  v28 = 51;
  v29 = a2;
  v30 = 0;
  v31 = 52;
  v32 = 0;
  v33 = 0;
  v34 = 84;
  v35 = 1;
  v36 = 0;
  v37 = 85;
  v38 = 0;
  v39 = 0;
  v15 = 0;
  *(_QWORD *)v16 = 0;
  v14 = 0;
  v12[3] = (uint64_t)&v14;
  v13 = 0;
  v14 = (uint64_t)operator new(0xC8uLL);
  v15 = v14;
  *(_QWORD *)v16 = v14 + 200;
  v15 = sub_1006AB40C((uint64_t)v16, (uint64_t)buf, (uint64_t)&v40, v14);
  for (i = 168; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  v6 = *(void **)(a1 + 912);
  memset(v12, 0, 24);
  sub_1006AB68C(v12, v14, v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - v14) >> 3));
  objc_msgSend(v6, "setMeasurements:", sub_1006A7590(v12));
  *(_QWORD *)buf = v12;
  sub_1006AB5A0((void ***)buf);
  v7 = *(void **)(a1 + 912);
  if (byte_102311227 < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102311210, *((unint64_t *)&xmmword_102311210 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102311210;
    v11 = unk_102311220;
  }
  objc_msgSend(v7, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  *(_QWORD *)buf = &v14;
  sub_1006AB5A0((void ***)buf);
}

void sub_101699220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

void sub_1016992A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  __int128 *p_src;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 __src;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  int v30;
  __int128 *v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  __int128 *v35;
  __int16 v36;
  int v37;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v4 + 192), "silo");
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v25, a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v27 < 0)
      p_src = (__int128 *)__src;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136446466;
    v35 = p_src;
    v36 = 1026;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tb,SUPL: UMTS apn:%{public}s,instance,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v16 = &__src;
    if (v27 < 0)
      v16 = (__int128 *)__src;
    v17 = *(_DWORD *)(a1 + 40);
    v30 = 136446466;
    v31 = v16;
    v32 = 1026;
    v33 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tb,SUPL: UMTS apn:%{public}s,instance,%{public}d", &v30, 18);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v8 = HIBYTE(v27);
  if (v27 < 0)
    v8 = *((_QWORD *)&__src + 1);
  if (v8)
  {
    v21 = v25;
    if (SHIBYTE(v27) < 0)
    {
      sub_100115CE4(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      __p = __src;
      v23 = v27;
    }
    v12 = *(_DWORD *)(a1 + 40);
    v24 = v12;
    v29 = 0;
    v13 = operator new(0x30uLL);
    *v13 = off_1021C7208;
    v13[1] = v21;
    *((_OWORD *)v13 + 1) = __p;
    v13[4] = v23;
    __p = 0uLL;
    v23 = 0;
    *((_DWORD *)v13 + 10) = v12;
    v29 = v13;
    sub_10178EA00(v4 + 200, (uint64_t)v28);
    v14 = v29;
    if (v29 == v28)
    {
      v15 = 4;
      v14 = v28;
    }
    else
    {
      if (!v29)
        goto LABEL_28;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
    goto LABEL_30;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#tb,SUPL: can't find usable APN", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    LOWORD(v30) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tb,SUPL: can't find usable APN", &v30, v20);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
LABEL_30:
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__src);
}

void sub_1016996E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101699760(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,enter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "handlePdsSessionStatisticsReport,enter", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  if (!sub_100CD5700(a1 + 532) && !*(_BYTE *)(a1 + 513))
    sub_101698EB4(a1, 1);
}

void sub_101699910(uint64_t *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7[3];
  _WORD v8[8];
  uint8_t buf[8];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvanceForTailBoneDevices", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,queryTimingAdvanceForTailBoneDevices", v8, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaModemController::queryTimingAdvanceForTailBoneDevices(SimInstance)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  memset(v7, 0, sizeof(v7));
  sub_100D97524(v7, a1[109], a1[110], 0x66FD0EB66FD0EB67 * ((a1[110] - a1[109]) >> 3));
  sub_101878030(a2, v7, (uint64_t)(a1 + 25), a1[24]);
  *(_QWORD *)buf = v7;
  sub_10087B4F8((void ***)buf);
}

void sub_101699AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10087B4F8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_101699B1C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101699B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v3 = a2 - 1328;
      v4 = 1328 * v2;
      do
      {
        sub_100857FD0(v3 + v4);
        v4 -= 1328;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_101699BAC(_QWORD *a1)
{
  *a1 = off_1021C6818;
  sub_100261F44((uint64_t)(a1 + 33));
  sub_101788F60((uint64_t)a1);
  operator delete();
}

void sub_101699BF8(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

_QWORD *sub_101699C24(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_101699C9C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 1);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_101699C80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_101699C9C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x28F5C28F5C28F5DLL)
    sub_100259694();
  result = (char *)sub_101699CF0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[100 * v4];
  return result;
}

void *sub_101699CF0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x28F5C28F5C28F5DLL)
    sub_10025955C();
  return operator new(100 * a2);
}

void sub_101699D3C()
{
  operator delete();
}

_QWORD *sub_101699D50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6870;
  result[1] = v3;
  return result;
}

uint64_t sub_101699D84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6870;
  a2[1] = v2;
  return result;
}

uint64_t sub_101699DA0(uint64_t a1, qmi::Client *a2)
{
  return sub_10169069C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101699DA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101699DE4()
{
}

void sub_101699DF0(_QWORD *a1)
{
  *a1 = 0;
  if (sub_1001DC538())
    sub_101699E98(2uLL);
  sub_101699E98(1uLL);
}

void sub_101699E70(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_101699B48((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void sub_101699E98(unint64_t a1)
{
  is_mul_ok(a1, 0x530uLL);
  operator new[]();
}

qmi::Client *sub_10169A0B0(qmi::Client **a1, qmi::Client *a2)
{
  qmi::Client *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1016A1384(result);
    operator delete();
  }
  return result;
}

void sub_10169A0F0()
{
  operator delete();
}

_QWORD *sub_10169A104(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6900;
  result[1] = v3;
  return result;
}

uint64_t sub_10169A138(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6900;
  a2[1] = v2;
  return result;
}

id sub_10169A154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 560);
  if (v2)
    sub_10176C3F0(v2);
  return sub_10168FBC0(v1);
}

uint64_t sub_10169A180(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169A1BC()
{
}

void sub_10169A1CC()
{
  operator delete();
}

_QWORD *sub_10169A1E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6980;
  result[1] = v3;
  return result;
}

uint64_t sub_10169A214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6980;
  a2[1] = v2;
  return result;
}

id sub_10169A230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 560);
  if (v2)
    sub_10176C3F8(v2);
  return sub_10168F898(v1);
}

uint64_t sub_10169A25C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169A298()
{
}

void sub_10169A2A8()
{
  operator delete();
}

_QWORD *sub_10169A2BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6A00;
  result[1] = v3;
  return result;
}

uint64_t sub_10169A2F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6A00;
  a2[1] = v2;
  return result;
}

void sub_10169A30C(uint64_t a1)
{
  sub_10178E694(*(_QWORD *)(a1 + 8) + 200);
}

uint64_t sub_10169A318(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169A354()
{
}

void sub_10169A364()
{
  operator delete();
}

_QWORD *sub_10169A378(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6A80;
  result[1] = v3;
  return result;
}

uint64_t sub_10169A3AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6A80;
  a2[1] = v2;
  return result;
}

void sub_10169A3C8(uint64_t a1)
{
  sub_101691620(*(_QWORD *)(a1 + 8), "#tb,locationd,bbInitFailed");
}

uint64_t sub_10169A3D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169A414()
{
}

_QWORD *sub_10169A420@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = sub_10169A478(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10169A464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10169A478(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021C6B00;
  sub_10176AA80(a1 + 3, *a2);
  return a1;
}

void sub_10169A4B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10169A4C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C6B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10169A4DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C6B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10169A510(uint64_t a1)
{
  return sub_10169A51C(a1 + 24);
}

uint64_t sub_10169A51C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_10169A584(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_10169A584(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_10169A600(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_10169A600(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_10176AB94(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_10176AB94(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::cancelTimeoutEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_10176AB94(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_10176AB94(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_10169AA94()
{
  operator delete();
}

_QWORD *sub_10169AAA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6B50;
  result[1] = v3;
  return result;
}

uint64_t sub_10169AADC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6B50;
  a2[1] = v2;
  return result;
}

void sub_10169AAF8(uint64_t a1, uint64_t *a2)
{
  sub_1017219C0(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021C6BE0);
}

uint64_t sub_10169AB10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169AB4C()
{
}

void sub_10169AB5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x66FD0EB66FD0EB67 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10169ACFC((void **)a1);
    if (a4 > 0x5E293205E29320)
      sub_100259694();
    v10 = 0xCDFA1D6CDFA1D6CELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x66FD0EB66FD0EB67 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x2F149902F14990)
      v11 = 0x5E293205E29320;
    else
      v11 = v10;
    sub_100D975A8((_QWORD *)a1, v11);
    v12 = sub_100D975FC(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x66FD0EB66FD0EB67 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_10169AD68((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = sub_100D975FC(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10169AD68((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 696;
      sub_1005A9904(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_10169ACEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10169ACF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10169ACFC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 696;
        sub_1005A9904((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_10169AD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 96;
  do
  {
    v7 = v6 - 96;
    *(_OWORD *)a4 = *(_OWORD *)(v6 - 96);
    v8 = *(_OWORD *)(v6 - 80);
    v9 = *(_OWORD *)(v6 - 64);
    v10 = *(_OWORD *)(v6 - 48);
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(v6 - 36);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = v10;
    *(_OWORD *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 80) = *(_DWORD *)(v6 - 16);
    if (a4 != v6 - 96)
      sub_1002A3054((char *)(a4 + 88), *(char **)(v6 - 8), *(_QWORD *)v6, (uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 2);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(v6 + 16);
    v11 = *(_OWORD *)(v6 + 32);
    v12 = *(_OWORD *)(v6 + 48);
    v13 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a4 + 176) = v13;
    *(_OWORD *)(a4 + 128) = v11;
    *(_OWORD *)(a4 + 144) = v12;
    v14 = *(_OWORD *)(v6 + 96);
    v15 = *(_OWORD *)(v6 + 112);
    v16 = *(_OWORD *)(v6 + 144);
    *(_OWORD *)(a4 + 224) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a4 + 240) = v16;
    *(_OWORD *)(a4 + 192) = v14;
    *(_OWORD *)(a4 + 208) = v15;
    v17 = *(_OWORD *)(v6 + 160);
    v18 = *(_OWORD *)(v6 + 176);
    v19 = *(_OWORD *)(v6 + 192);
    *(_OWORD *)(a4 + 300) = *(_OWORD *)(v6 + 204);
    *(_OWORD *)(a4 + 272) = v18;
    *(_OWORD *)(a4 + 288) = v19;
    *(_OWORD *)(a4 + 256) = v17;
    std::string::operator=((std::string *)(a4 + 320), (const std::string *)(v6 + 224));
    v20 = *(_OWORD *)(v6 + 280);
    v21 = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a4 + 344) = *(_OWORD *)(v6 + 248);
    *(_OWORD *)(a4 + 360) = v21;
    *(_OWORD *)(a4 + 376) = v20;
    v22 = *(_OWORD *)(v6 + 312);
    v23 = *(_OWORD *)(v6 + 328);
    v24 = *(_OWORD *)(v6 + 344);
    *(_OWORD *)(a4 + 392) = *(_OWORD *)(v6 + 296);
    *(_OWORD *)(a4 + 440) = v24;
    *(_OWORD *)(a4 + 424) = v23;
    *(_OWORD *)(a4 + 408) = v22;
    v25 = *(_OWORD *)(v6 + 376);
    v26 = *(_OWORD *)(v6 + 392);
    v27 = *(_DWORD *)(v6 + 408);
    *(_OWORD *)(a4 + 456) = *(_OWORD *)(v6 + 360);
    *(_DWORD *)(a4 + 504) = v27;
    *(_OWORD *)(a4 + 488) = v26;
    *(_OWORD *)(a4 + 472) = v25;
    v28 = *(_OWORD *)(v6 + 544);
    v29 = *(_OWORD *)(v6 + 560);
    v30 = *(_OWORD *)(v6 + 576);
    *(_DWORD *)(a4 + 688) = *(_DWORD *)(v6 + 592);
    *(_OWORD *)(a4 + 656) = v29;
    *(_OWORD *)(a4 + 672) = v30;
    *(_OWORD *)(a4 + 640) = v28;
    v31 = *(_OWORD *)(v6 + 480);
    v32 = *(_OWORD *)(v6 + 496);
    v33 = *(_OWORD *)(v6 + 528);
    *(_OWORD *)(a4 + 608) = *(_OWORD *)(v6 + 512);
    *(_OWORD *)(a4 + 624) = v33;
    *(_OWORD *)(a4 + 576) = v31;
    *(_OWORD *)(a4 + 592) = v32;
    v34 = *(_OWORD *)(v6 + 416);
    v35 = *(_OWORD *)(v6 + 432);
    v36 = *(_OWORD *)(v6 + 464);
    *(_OWORD *)(a4 + 544) = *(_OWORD *)(v6 + 448);
    *(_OWORD *)(a4 + 560) = v36;
    *(_OWORD *)(a4 + 512) = v34;
    *(_OWORD *)(a4 + 528) = v35;
    a4 += 696;
    v6 += 696;
  }
  while (v7 + 696 != v5);
  return v5;
}

void sub_10169AF00()
{
  operator delete();
}

_QWORD *sub_10169AF14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6C20;
  result[1] = v3;
  return result;
}

uint64_t sub_10169AF48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6C20;
  a2[1] = v2;
  return result;
}

void sub_10169AF64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  double v5;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  int v38;
  int v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BYTE v50[10];
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  uint8_t buf[4];
  _BOOL4 v67;
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  _BYTE v71[10];
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 72);
  v5 = 0.0;
  if (v4 == 9 || v4 == 3)
  {
    v12 = sub_1016E13F0(*(_DWORD *)(v3 + 100));
    v11 = sub_1016E1414(*(_DWORD *)(v3 + 104));
    v9 = sub_1016E138C(*(unsigned __int8 *)(v3 + 110));
    v8 = sub_1016E138C(*(unsigned __int8 *)(v3 + 111));
    v10 = sqrt(v8 * v8 + v9 * v9);
    v7 = *(unsigned __int8 *)(v3 + 114);
    v4 = *(_DWORD *)(v3 + 72);
  }
  else
  {
    v7 = 0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
  }
  v13 = 0.0;
  if (v4 == 9)
  {
    v13 = sub_1016E1370(*(_WORD *)(v3 + 108));
    v5 = sub_1016E13BC(*(unsigned __int8 *)(v3 + 113));
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(v3 + 100);
    v16 = *(_DWORD *)(v3 + 104);
    v17 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)buf = 67177217;
    v67 = v15;
    v68 = 1025;
    v69 = v16;
    v70 = 2049;
    *(double *)v71 = v12;
    *(_WORD *)&v71[8] = 2049;
    v72 = v11;
    v73 = 2049;
    v74 = v13;
    v75 = 2050;
    v76 = v5;
    v77 = 2050;
    v78 = v9;
    v79 = 2050;
    v80 = v8;
    v81 = 2050;
    v82 = v10;
    v83 = 1026;
    v84 = v7;
    v85 = 1026;
    v86 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,Fix,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,hunc,%{public}.3f,confidence,%{public}d,shape,%{public}d", buf, 0x60u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v33 = *(_DWORD *)(v3 + 100);
    v34 = *(_DWORD *)(v3 + 104);
    v35 = *(_DWORD *)(v3 + 72);
    v45 = 67177217;
    v46 = v33;
    v47 = 1025;
    v48 = v34;
    v49 = 2049;
    *(double *)v50 = v12;
    *(_WORD *)&v50[8] = 2049;
    v51 = v11;
    v52 = 2049;
    v53 = v13;
    v54 = 2050;
    v55 = v5;
    v56 = 2050;
    v57 = v9;
    v58 = 2050;
    v59 = v8;
    v60 = 2050;
    v61 = v10;
    v62 = 1026;
    v63 = v7;
    v64 = 1026;
    v65 = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendLocation,Fix,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,hunc,%{public}.3f,confidence,%{public}d,shape,%{public}d", &v45, 96);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  v18 = *(unsigned __int16 *)(v3 + 32);
  v19 = *(unsigned int *)(v3 + 28);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v20 = v19 + 604800000 * v18;
  v21 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int16 *)(v3 + 32);
    v23 = *(_DWORD *)(v3 + 28);
    *(_DWORD *)buf = 67240704;
    v67 = v22;
    v68 = 1026;
    v69 = v23;
    v70 = 2050;
    *(_QWORD *)v71 = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#tb,sendLocation,gpsWeek,%{public}d,gpsTow,%{public}d,gpsTimestamp,%{public}llu", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v38 = *(unsigned __int16 *)(v3 + 32);
    v39 = *(_DWORD *)(v3 + 28);
    v45 = 67240704;
    v46 = v38;
    v47 = 1026;
    v48 = v39;
    v49 = 2050;
    *(_QWORD *)v50 = v20;
    LODWORD(v44) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendLocation,gpsWeek,%{public}d,gpsTow,%{public}d,gpsTimestamp,%{public}llu", &v45, v44);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  if (sub_10011CE88(v12, v11)
    && !sub_10011CE64(v12, v11)
    && sub_10011E234(v13)
    && sub_10051575C(v5)
    && sub_10051575C(v10))
  {
    v24 = v13;
    v25 = v10;
    v26 = v5;
    sub_101724F54(a2, v20, 4, 4, 7, 9, 1, 1, v12, v11, v24, v25, v26, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_1021C6C80);
  }
  else
  {
    v27 = sub_100515714(v12);
    v28 = sub_100515738(v11);
    v29 = sub_10011E234(v13);
    v30 = sub_10051575C(v10);
    v31 = sub_10051575C(v5);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v32 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67241216;
      v67 = v27;
      v68 = 1026;
      v69 = v28;
      v70 = 1026;
      *(_DWORD *)v71 = v29;
      *(_WORD *)&v71[4] = 1026;
      *(_DWORD *)&v71[6] = v30;
      LOWORD(v72) = 1026;
      *(_DWORD *)((char *)&v72 + 2) = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#tb,sendLocation,Error in position fix,wasLatitudeValid,%{public}d,wasLongitudeValid,%{public}d,wasAltitudeValid,%{public}d,wasHorizontalUncertaintyValid,%{public}d,wasVerticalUncertaintyValid,%{public}d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
      v45 = 67241216;
      v46 = v27;
      v47 = 1026;
      v48 = v28;
      v49 = 1026;
      *(_DWORD *)v50 = v29;
      *(_WORD *)&v50[4] = 1026;
      *(_DWORD *)&v50[6] = v30;
      LOWORD(v51) = 1026;
      *(_DWORD *)((char *)&v51 + 2) = v31;
      LODWORD(v44) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tb,sendLocation,Error in position fix,wasLatitudeValid,%{public}d,wasLongitudeValid,%{public}d,wasAltitudeValid,%{public}d,wasHorizontalUncertaintyValid,%{public}d,wasVerticalUncertaintyValid,%{public}d", COERCE_DOUBLE(67241216), &v45, v44);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaModemController::sendLocation(const gnss::Emergency::Cplane::PositionReportToModem &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
  }
}

uint64_t sub_10169B6F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169B730()
{
}

void sub_10169B73C(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectPositionDataError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

uint64_t sub_10169B82C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 2)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10169B8BC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 8)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

void sub_10169B94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10169B9C8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169B9D4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10169BA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169BA64(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10169BA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10169BA64(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10169BB44(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169BB04((uint64_t)a2);
  }
}

void sub_10169BAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169BB04(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 1u);
  return a1;
}

void sub_10169BB30(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10169BB44(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 1u);
  return a1;
}

void sub_10169BB70(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169BB88()
{
  operator delete();
}

_QWORD *sub_10169BB9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6D18;
  result[1] = v3;
  return result;
}

uint64_t sub_10169BBD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6D18;
  a2[1] = v2;
  return result;
}

uint64_t sub_10169BBEC(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_101691AA0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10169BBF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169BC30()
{
}

void sub_10169BC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10169BCB8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169BCC4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10169BCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169BD54(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10169BD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10169BD54(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10169BE34(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169BDF4((uint64_t)a2);
  }
}

void sub_10169BDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169BDF4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x20u);
  return a1;
}

void sub_10169BE20(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10169BE34(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x20u);
  return a1;
}

void sub_10169BE60(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169BE78()
{
  operator delete();
}

_QWORD *sub_10169BE8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6DD8;
  result[1] = v3;
  return result;
}

uint64_t sub_10169BEC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6DD8;
  a2[1] = v2;
  return result;
}

void sub_10169BEDC(uint64_t a1, qmi::MessageBase *a2)
{
  sub_101690304(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10169BEE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169BF20()
{
}

void sub_10169BF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10169BFA8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169BFB4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10169BFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169C044(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10169C030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10169C044(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10169C124(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169C0E4((uint64_t)a2);
  }
}

void sub_10169C0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169C0E4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBDu);
  return a1;
}

void sub_10169C110(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10169C124(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBDu);
  return a1;
}

void sub_10169C150(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169C168()
{
  operator delete();
}

_QWORD *sub_10169C17C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6E98;
  result[1] = v3;
  return result;
}

uint64_t sub_10169C1B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6E98;
  a2[1] = v2;
  return result;
}

void sub_10169C1CC(uint64_t a1, qmi::MessageBase *a2)
{
  sub_101696F50(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10169C1D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169C210()
{
}

void sub_10169C21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10169C298(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169C2A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10169C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169C334(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10169C320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10169C334(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10169C414(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169C3D4((uint64_t)a2);
  }
}

void sub_10169C3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169C3D4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBEu);
  return a1;
}

void sub_10169C400(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10169C414(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBEu);
  return a1;
}

void sub_10169C440(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169C458()
{
  operator delete();
}

_QWORD *sub_10169C46C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C6F58;
  result[1] = v3;
  return result;
}

uint64_t sub_10169C4A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C6F58;
  a2[1] = v2;
  return result;
}

uint64_t sub_10169C4BC(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_10169427C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10169C4C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169C500()
{
}

uint64_t sub_10169C50C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169C518(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_10169C54C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xD0u);
  return a1;
}

void sub_10169C578(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169C590()
{
  operator delete();
}

_QWORD *sub_10169C5A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7018;
  result[1] = v3;
  return result;
}

uint64_t sub_10169C5D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7018;
  a2[1] = v2;
  return result;
}

uint64_t sub_10169C5F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169C634()
{
}

void sub_10169C640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10169C6BC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10169C6C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10169C6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169C758(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10169C744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10169C758(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10169C838(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169C7F8((uint64_t)a2);
  }
}

void sub_10169C7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169C7F8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB2u);
  return a1;
}

void sub_10169C824(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10169C838(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB2u);
  return a1;
}

void sub_10169C864(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10169C87C()
{
  operator delete();
}

_QWORD *sub_10169C890(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C70D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10169C8C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C70D8;
  a2[1] = v2;
  return result;
}

void sub_10169C8E0(uint64_t a1)
{
  sub_101699760(*(_QWORD *)(a1 + 8));
}

uint64_t sub_10169C8E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169C924()
{
}

uint64_t sub_10169C930(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10169C9C0((uint64_t)a1, (std::string::value_type *)result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10169C9C0(uint64_t a1, std::string::value_type *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE v7[8];
  void *v8[2];
  void *v9[2];
  __int128 v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char v19;
  std::string::value_type *v20;
  int v21;

  v20 = a2;
  memset(v7, 0, 7);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v15 = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v19 = 0;
  v21 = a3;
  if (sub_10169CB20((uint64_t)v7, &v21, &v20))
  {
    v5 = 0;
    v20 = 0;
  }
  else if (v20)
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  if (SHIBYTE(v14) < 0)
    operator delete(v12);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
  return v5;
}

void sub_10169CAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10169CAC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10169CAC0(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10169CB20(uint64_t a1, int *a2, std::string::value_type **a3)
{
  int v5;
  std::string::value_type *v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  int v9;
  int v10;
  std::string::value_type *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t result;
  char v16;
  char v17;
  char v18;
  char v19;

  v5 = *a2;
  if (*a2 >= 4)
  {
    *(_DWORD *)a1 = *(_DWORD *)*a3;
    v6 = *a3;
    *a3 += 4;
    if (v5 != 4)
    {
      *(_BYTE *)(a1 + 4) = v6[4];
      v7 = v6 + 5;
      *a3 = v7;
      if (v5 != 5)
      {
        *(_BYTE *)(a1 + 5) = *v7;
        v8 = *a3 + 1;
        *a3 = v8;
        if (v5 != 6)
        {
          *(_BYTE *)(a1 + 6) = *v8;
          ++*a3;
        }
      }
    }
  }
  v9 = sub_10169CC84((int)&v16, a3, v5 - 7, (std::string *)(a1 + 8));
  v10 = sub_10169CC84((int)&v17, a3, v9, (std::string *)(a1 + 32));
  if (v10 >= 1)
  {
    *(_BYTE *)(a1 + 56) = **a3;
    v11 = *a3 + 1;
    *a3 = v11;
    if (v10 != 1)
    {
      *(_BYTE *)(a1 + 57) = *v11;
      ++*a3;
    }
  }
  v12 = sub_10169CC84((int)&v18, a3, v10 - 2, (std::string *)(a1 + 64));
  if (v12 >= 1)
    *(_BYTE *)(a1 + 88) = *(*a3)++;
  v13 = sub_10169CC84((int)&v19, a3, v12 - 1, (std::string *)(a1 + 96));
  v14 = __OFSUB__(v13, 1);
  result = (v13 - 1);
  if ((int)result < 0 == v14)
    *(_BYTE *)(a1 + 120) = *(*a3)++;
  return result;
}

uint64_t sub_10169CC84(int a1, std::string::value_type **a2, int a3, std::string *this)
{
  std::string::value_type *v6;
  std::string::value_type *v7;
  uint64_t v8;

  if (a3 < 1)
    return 0xFFFFFFFFLL;
  v6 = *a2;
  v7 = *a2 + 1;
  *a2 = v7;
  v8 = *v6;
  if (v8 < a3)
  {
    sub_10026A8FC(this, v7, &v7[v8], *v6);
    *a2 += v8;
  }
  return (~(_DWORD)v8 + a3);
}

uint64_t sub_10169CCF8(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 4)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10169CD88(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[5];
  _BYTE v19[25];

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 < 105)
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    v13 = *(_OWORD *)result;
    v14 = *(_OWORD *)(result + 32);
    v18[1] = *(_OWORD *)(result + 16);
    v18[2] = v14;
    v18[0] = v13;
    v15 = *(_OWORD *)(result + 48);
    v16 = *(_OWORD *)(result + 64);
    v17 = *(_OWORD *)(result + 80);
    *(_OWORD *)&v19[9] = *(_OWORD *)(result + 89);
    v18[4] = v16;
    *(_OWORD *)v19 = v17;
    v18[3] = v15;
    if (v7 == 105)
    {
      (*(void (**)(_QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a3 + 16))(*a3, v18, result, v8, v9, v10, v11, v12);
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10169CE40(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10169CED0((uint64_t)a1, (std::string::value_type *)result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10169CED0(uint64_t a1, std::string::value_type *a2, int a3, uint64_t a4)
{
  std::string::size_type v6;
  uint64_t v7;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3 < 1)
    goto LABEL_6;
  v6 = *a2;
  if (v6 < a3)
    sub_10026A8FC(&__p, a2 + 1, &a2[v6 + 1], v6);
  if (~(_DWORD)v6 + a3)
  {
LABEL_6:
    v7 = 0;
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v7 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_10169CF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169CF8C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10169D01C((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10169D01C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::string::value_type **v26;

  v25 = a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  __p = 0;
  v24 = 0;
  v26 = (std::string::value_type **)&v25;
  if (sub_10169D170(&v26, a3, (uint64_t)&v7))
  {
    v5 = 0;
    v25 = 0;
  }
  else if (v25)
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  return v5;
}

void sub_10169D108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10169D120((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10169D120(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t sub_10169D170(std::string::value_type ***a1, int a2, uint64_t a3)
{
  std::string::value_type **v3;
  std::string::value_type *v4;
  std::string::value_type *v5;
  std::string::value_type *v6;
  std::string::value_type **v8;
  uint64_t v9;

  v3 = *a1;
  v8 = *a1;
  if (a2 < 4
    || (*(_DWORD *)a3 = *(_DWORD *)*v3, v4 = *v3, *v3 += 4, a2 == 4)
    || (*(_BYTE *)(a3 + 4) = v4[4], v5 = v4 + 5, *v3 = v5, (a2 - 4) <= 8))
  {
    v9 = a3;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = *(_QWORD *)v5;
    v6 = *v3;
    *v3 += 8;
    v9 = a3;
    if (a2 != 13)
    {
      *(_BYTE *)(a3 + 16) = v6[8];
      *v3 = v6 + 9;
    }
  }
  return sub_10169D218(&v9, a2 - 14, &v8);
}

uint64_t sub_10169D218(uint64_t *a1, int a2, std::string::value_type ***a3)
{
  uint64_t v4;
  int v5;
  std::string::value_type **v6;
  uint64_t i;
  BOOL v8;
  int v9;
  std::string::value_type **v10;
  std::string::value_type *v11;
  char v13;
  uint64_t v14;

  v4 = *a1;
  if (a2 < 4
    || (*(_DWORD *)(v4 + 20) = *(_DWORD *)**a3, **a3 += 4, a2 < 8)
    || (*(_DWORD *)(v4 + 24) = *(_DWORD *)**a3, **a3 += 4, (a2 - 12) >= 0xFFFFFFF8))
  {
    v5 = a2 - 16;
  }
  else
  {
    *(_DWORD *)(v4 + 28) = *(_DWORD *)**a3;
    **a3 += 4;
    v5 = a2 - 16;
    if ((a2 - 16) <= 0xFFFFFFF7)
    {
      *(_DWORD *)(v4 + 32) = *(_DWORD *)**a3;
      **a3 += 4;
    }
  }
  v6 = *a3;
  for (i = 36; i != 52; i += 2)
  {
    v8 = __OFSUB__(v5, 2);
    v5 -= 2;
    if (v5 < 0 == v8)
    {
      *(_WORD *)(v4 + i) = *(_WORD *)*v6;
      *v6 += 2;
    }
  }
  v9 = sub_10169CC84((int)&v13, *a3, a2 - 32, (std::string *)(v4 + 56));
  v14 = v4;
  if (v9 >= 1)
  {
    v10 = *a3;
    v11 = **a3;
    *(_BYTE *)(v4 + 80) = *v11;
    *v10 = v11 + 1;
  }
  return sub_10169D364(&v14, v9 - 1, a3);
}

uint64_t sub_10169D364(uint64_t *a1, int a2, std::string::value_type ***a3)
{
  uint64_t v4;
  std::string::value_type **v5;
  std::string::value_type *v6;
  int v7;
  std::string::value_type **v8;
  std::string::value_type *v9;
  int v10;
  char v12;
  char v13;

  v4 = *a1;
  if (a2 >= 1)
  {
    v5 = *a3;
    v6 = **a3;
    *(_BYTE *)(v4 + 81) = *v6;
    *v5 = v6 + 1;
  }
  v7 = sub_10169CC84((int)&v12, *a3, a2 - 1, (std::string *)(v4 + 88));
  if (v7 >= 1)
  {
    v8 = *a3;
    v9 = **a3;
    *(_BYTE *)(v4 + 112) = *v9;
    *v8 = v9 + 1;
  }
  v10 = sub_10169CC84((int)&v13, *a3, v7 - 1, (std::string *)(v4 + 120));
  if (v10 >= 1)
  {
    *(_BYTE *)(v4 + 144) = *(**a3)++;
    if (v10 != 1)
    {
      *(_BYTE *)(v4 + 145) = *(**a3)++;
      if (v10 != 2)
      {
        *(_BYTE *)(v4 + 146) = *(**a3)++;
        if (v10 != 3)
          *(_BYTE *)(v4 + 147) = *(**a3)++;
      }
    }
  }
  return (v10 - 4);
}

_QWORD *sub_10169D488(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169D5F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10169D5FC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169D764(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10169D770(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169D8D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10169D8E4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169DA4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10169DA58(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169DBC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_10169DBCC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10169DD34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t *sub_10169DD40(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 8)
  {
    v6 = 0;
  }
  else
  {
    v7 = *result++;
    v6 = v7;
    if (v5 == 8)
      goto LABEL_7;
  }
  result = 0;
LABEL_7:
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v6;
  if (!result)
    *(_BYTE *)a3 = 0;
  return result;
}

char *sub_10169DDA0(qmi::MessageBase *a1, unsigned __int16 a2, _BYTE *a3)
{
  char *result;
  int v5;
  char v6;
  char v7;

  result = (char *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 1)
  {
    v6 = 0;
  }
  else
  {
    v7 = *result++;
    v6 = v7;
    if (v5 == 1)
      goto LABEL_7;
  }
  result = 0;
LABEL_7:
  if (!*a3)
    *a3 = 1;
  a3[1] = v6;
  if (!result)
    *a3 = 0;
  return result;
}

uint64_t sub_10169DE00(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  __int16 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  __int16 *v19;
  int v20;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 8)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)result;
  if (v5 == 8)
  {
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v7 = *(_BYTE *)(result + 8);
  if ((v5 - 13) > 0xFFFFFFFA)
  {
LABEL_11:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v11 = 0;
    v10 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v8 = *(_DWORD *)(result + 9);
  v9 = v5 - 17;
  if ((v5 - 17) > 0xFFFFFFF7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v11 = 0;
    v10 = 0;
    goto LABEL_12;
  }
  v10 = *(_DWORD *)(result + 13);
  if (v5 == 17)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v11 = 0;
    goto LABEL_12;
  }
  v11 = *(_BYTE *)(result + 17);
  if (v5 != 18)
  {
    v18 = *(_BYTE *)(result + 18);
    if (v5 == 19)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      goto LABEL_12;
    }
    v17 = *(_BYTE *)(result + 19);
    if (v5 == 20)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_12;
    }
    v16 = *(_BYTE *)(result + 20);
    if (v5 == 21)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_12;
    }
    v15 = *(_BYTE *)(result + 21);
    v19 = (__int16 *)(result + 22);
    if ((v5 - 24) > 0xFFFFFFFC)
    {
      v14 = 0;
      v13 = 0;
      v12 = 0;
    }
    else
    {
      v20 = v5 - 22;
      v12 = *v19;
      if (v20 == 2)
      {
        v13 = 0;
LABEL_31:
        v14 = 0;
        goto LABEL_12;
      }
      v13 = *(_BYTE *)(result + 24);
      if (v20 == 3)
        goto LABEL_31;
      v14 = *(_BYTE *)(result + 25);
      v19 = (__int16 *)(result + 26);
    }
    if (v9 == 9)
      goto LABEL_13;
    goto LABEL_12;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
LABEL_12:
  v19 = 0;
LABEL_13:
  result = *a3;
  *((_QWORD *)a3 + 1) = v6;
  a3[16] = v7;
  *((_DWORD *)a3 + 5) = v8;
  *((_DWORD *)a3 + 6) = v10;
  a3[28] = v11;
  a3[29] = v18;
  a3[30] = v17;
  a3[31] = v16;
  a3[32] = v15;
  if (!(_DWORD)result)
    *a3 = 1;
  *((_WORD *)a3 + 17) = v12;
  a3[36] = v13;
  a3[37] = v14;
  if (!v19)
    *a3 = 0;
  return result;
}

void sub_10169E024(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  __n128 v6;
  void *__p;
  void *v8;
  uint64_t v9;
  _QWORD v10[2];
  _BYTE **v11;

  v10[0] = qmi::MessageBase::findTlvValue(a1, a2);
  v10[1] = v4;
  if (v10[0])
  {
    v6.n128_u8[0] = 0;
    v6.n128_u16[1] = 0;
    *(unint64_t *)((char *)v6.n128_u64 + 4) = 0;
    v8 = 0;
    v9 = 0;
    __p = 0;
    v11 = (_BYTE **)v10;
    if (sub_10169E0E4(&v11, v4, (uint64_t)&v6))
      v10[0] = 0;
    sub_10169E3EC((unsigned __int8 *)a3, &v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
    if (!v10[0] && *(_BYTE *)a3)
    {
      v5 = *(void **)(a3 + 24);
      if (v5)
      {
        *(_QWORD *)(a3 + 32) = v5;
        operator delete(v5);
      }
      *(_BYTE *)a3 = 0;
    }
  }
}

void sub_10169E0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169E0E4(_BYTE ***a1, int a2, uint64_t a3)
{
  _BYTE **v3;
  _WORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int v7;

  v3 = *a1;
  if (a2 < 1
    || (*(_BYTE *)a3 = **v3, v4 = *v3 + 1, *v3 = v4, a2 < 3)
    || (*(_WORD *)(a3 + 2) = *v4, v5 = *v3 + 2, *v3 = v5, (a2 - 7) >= 0xFFFFFFFA))
  {
    v7 = a2 - 11;
  }
  else
  {
    *(_DWORD *)(a3 + 4) = *v5;
    v6 = *v3 + 4;
    *v3 = v6;
    v7 = a2 - 11;
    if (v7 <= 0xFFFFFFF7)
    {
      *(_DWORD *)(a3 + 8) = *v6;
      *v3 += 4;
    }
  }
  return sub_10169E174((_WORD **)v3, v7, (uint64_t *)(a3 + 16));
}

uint64_t sub_10169E174(_WORD **a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD **v9;

  v9 = a1;
  v4 = (a2 - 1);
  if (a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)*a1;
    *a1 = (_WORD *)((char *)*a1 + 1);
  }
  sub_10169E1F4((uint64_t)a3, v5);
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    v4 = sub_10169E224(&v9, v4, v6);
    v6 += 8;
  }
  return v4;
}

void sub_10169E1F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_10169E2C8((void **)a1, a2 - v2);
  }
}

uint64_t sub_10169E224(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  _WORD *v8;

  if (a2 < 2)
    return (a2 - 7);
  v3 = *a1;
  *(_WORD *)a3 = ***a1;
  v4 = (_BYTE *)(*v3 + 2);
  *v3 = v4;
  if (a2 == 2)
    return (a2 - 7);
  *(_BYTE *)(a3 + 2) = *v4;
  v5 = (_BYTE *)(*v3 + 1);
  *v3 = v5;
  if (a2 == 3)
    return (a2 - 7);
  *(_BYTE *)(a3 + 3) = *v5;
  v6 = (_BYTE *)(*v3 + 1);
  *v3 = v6;
  if (a2 == 4)
    return (a2 - 7);
  *(_BYTE *)(a3 + 4) = *v6;
  v8 = (_WORD *)(*v3 + 1);
  *v3 = v8;
  result = (a2 - 7);
  if ((a2 - 7) <= 0xFFFFFFFC)
  {
    *(_WORD *)(a3 + 6) = *v8;
    *v3 += 2;
  }
  return result;
}

void sub_10169E2C8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _WORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _WORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_WORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 3)
  {
    if (a2)
    {
      v14 = 8 * a2;
      v15 = &v7[4 * a2];
      do
      {
        v7[3] = 0;
        *(_DWORD *)v7 = 0;
        *((_BYTE *)v7 + 4) = 0;
        v7 += 4;
        v14 -= 8;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_100259694();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_10025E6A0(v4, v12);
    else
      v13 = 0;
    v16 = &v13[8 * v10];
    v17 = &v16[8 * a2];
    v18 = 8 * a2;
    v19 = v16;
    do
    {
      *((_WORD *)v19 + 3) = 0;
      *(_DWORD *)v19 = 0;
      v19[4] = 0;
      v19 += 8;
      v18 -= 8;
    }
    while (v18);
    v20 = &v13[8 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v16 - 1) = v23;
        v16 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

__n128 sub_10169E3EC(unsigned __int8 *a1, __n128 *a2)
{
  int v2;
  unsigned __int32 v3;
  __n128 result;

  v2 = *a1;
  v3 = a2->n128_u32[2];
  *((_QWORD *)a1 + 1) = a2->n128_u64[0];
  *((_DWORD *)a1 + 4) = v3;
  if (v2)
  {
    result.n128_u64[0] = sub_100006898((uint64_t)(a1 + 24), a2 + 1).n128_u64[0];
  }
  else
  {
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
    result = a2[1];
    *(__n128 *)(a1 + 24) = result;
    *((_QWORD *)a1 + 5) = a2[2].n128_u64[0];
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

void sub_10169E444(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  _BYTE *v4;
  void *v5;
  __n128 __p;
  uint64_t v7;
  _BYTE *v8[2];

  v8[0] = (_BYTE *)qmi::MessageBase::findTlvValue(a1, a2);
  v8[1] = v4;
  if (v8[0])
  {
    __p = 0uLL;
    v7 = 0;
    if (sub_10169E4F0(v8, (int)v4, &__p))
      v8[0] = 0;
    sub_10169F020(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(_BYTE *)a3)
    {
      v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(_QWORD *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(_BYTE *)a3 = 0;
    }
  }
}

void sub_10169E4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169E4F0(_BYTE **a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _BYTE **v9;

  v9 = a1;
  v4 = (a2 - 1);
  if (a2 < 1)
    v5 = 0;
  else
    v5 = *(*a1)++;
  sub_10169E570((uint64_t)a3, v5);
  v6 = (_WORD *)*a3;
  v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    v4 = sub_10169E5B4(&v9, v4, v6);
    v6 += 50;
  }
  return v4;
}

void sub_10169E570(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10169E600((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 100 * a2;
  }
}

uint64_t sub_10169E5B4(_BYTE ***a1, int a2, _WORD *a3)
{
  _BYTE **v3;
  BOOL v4;
  int v5;
  _BYTE **v7;
  _WORD *v8;

  v3 = *a1;
  v7 = *a1;
  v8 = a3;
  v4 = __OFSUB__(a2, 2);
  v5 = a2 - 2;
  if (v5 < 0 == v4)
  {
    *a3 = *(_WORD *)*v3;
    *v3 += 2;
  }
  return sub_10169E954((uint64_t *)&v8, v5, &v7);
}

void sub_10169E600(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x8F5C28F5C28F5C29 * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    sub_10169E82C((uint64_t)a1, a2);
  }
  else
  {
    v8 = 0x8F5C28F5C28F5C29 * ((v7 - (uint64_t)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x28F5C28F5C28F5CLL)
      sub_100259694();
    v10 = 0x8F5C28F5C28F5C29 * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x147AE147AE147AELL)
      v11 = 0x28F5C28F5C28F5CLL;
    else
      v11 = v9;
    v26 = v4;
    if (v11)
      v12 = (char *)sub_101699CF0(v4, v11);
    else
      v12 = 0;
    v23 = v12;
    v24 = &v12[100 * v8];
    *(_QWORD *)&v25 = v24;
    *((_QWORD *)&v25 + 1) = &v12[100 * v11];
    sub_10169E8C0((uint64_t)&v23, a2);
    v14 = *a1;
    v13 = a1[1];
    v15 = v24;
    if (v13 == *a1)
    {
      v21 = a1[1];
    }
    else
    {
      do
      {
        v16 = *(_OWORD *)(v13 - 100);
        v17 = *(_OWORD *)(v13 - 84);
        *(_OWORD *)(v15 - 68) = *(_OWORD *)(v13 - 68);
        *(_OWORD *)(v15 - 84) = v17;
        *(_OWORD *)(v15 - 100) = v16;
        v18 = *(_OWORD *)(v13 - 52);
        v19 = *(_OWORD *)(v13 - 36);
        v20 = *(_OWORD *)(v13 - 20);
        *(_DWORD *)(v15 - 5) = *(_DWORD *)(v13 - 5);
        *(_OWORD *)(v15 - 20) = v20;
        *(_OWORD *)(v15 - 36) = v19;
        *(_OWORD *)(v15 - 52) = v18;
        v15 -= 100;
        v13 -= 100;
      }
      while (v13 != v14);
      v21 = *a1;
      v13 = a1[1];
    }
    *a1 = v15;
    v22 = a1[2];
    *(_OWORD *)(a1 + 1) = v25;
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v22;
    v23 = v21;
    v24 = v21;
    if (v13 != v21)
      *(_QWORD *)&v25 = &v21[(v13 - v21 - 100) % 0x64uLL];
    if (v21)
      operator delete(v21);
  }
}

void sub_10169E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169E82C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = 0;
    v4 = v2 + 100 * a2;
    do
    {
      v5 = v2 + v3;
      *(_WORD *)(v5 + 30) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(_BYTE *)(v5 + 36) = 0;
      *(_DWORD *)(v5 + 38) = 0;
      *(_DWORD *)(v5 + 44) = 0;
      *(_WORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 52) = 0;
      *(_WORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 80) = 0;
      *(_WORD *)(v5 + 84) = 0;
      *(_DWORD *)v5 = 0;
      *(_BYTE *)(v5 + 4) = 0;
      *(_DWORD *)(v5 + 6) = 0;
      *(_BYTE *)(v5 + 10) = 0;
      *(_QWORD *)(v5 + 20) = 0;
      *(_QWORD *)(v5 + 12) = 0;
      *(_BYTE *)(v5 + 28) = 0;
      *(_QWORD *)(v5 + 68) = 0;
      *(_QWORD *)(v5 + 60) = 0;
      *(_WORD *)(v5 + 76) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      v3 += 100;
      *(_DWORD *)(v5 + 95) = 0;
    }
    while (100 * a2 != v3);
  }
  else
  {
    v4 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(result + 8) = v4;
  return result;
}

uint64_t sub_10169E8C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v3 = 0;
    v4 = v2 + 100 * a2;
    do
    {
      v5 = v2 + v3;
      *(_WORD *)(v5 + 30) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(_BYTE *)(v5 + 36) = 0;
      *(_DWORD *)(v5 + 38) = 0;
      *(_DWORD *)(v5 + 44) = 0;
      *(_WORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 52) = 0;
      *(_WORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 80) = 0;
      *(_WORD *)(v5 + 84) = 0;
      *(_DWORD *)v5 = 0;
      *(_BYTE *)(v5 + 4) = 0;
      *(_DWORD *)(v5 + 6) = 0;
      *(_BYTE *)(v5 + 10) = 0;
      *(_QWORD *)(v5 + 20) = 0;
      *(_QWORD *)(v5 + 12) = 0;
      *(_BYTE *)(v5 + 28) = 0;
      *(_QWORD *)(v5 + 68) = 0;
      *(_QWORD *)(v5 + 60) = 0;
      *(_WORD *)(v5 + 76) = 0;
      *(_QWORD *)(v5 + 88) = 0;
      v3 += 100;
      *(_DWORD *)(v5 + 95) = 0;
    }
    while (100 * a2 != v3);
  }
  else
  {
    v4 = *(_QWORD *)(result + 16);
  }
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t sub_10169E954(uint64_t *a1, int a2, _BYTE ***a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  if (a2 < 1)
    goto LABEL_7;
  *(_BYTE *)(v3 + 2) = *(**a3)++;
  if (a2 == 1)
    goto LABEL_7;
  *(_BYTE *)(v3 + 3) = *(**a3)++;
  if (a2 == 2
    || (*(_BYTE *)(v3 + 4) = ***a3, ++**a3, (a2 - 2) < 3)
    || (*(_WORD *)(v3 + 6) = *(_WORD *)**a3, **a3 += 2, a2 == 5)
    || (*(_BYTE *)(v3 + 8) = ***a3, ++**a3, a2 == 6))
  {
LABEL_7:
    v5 = v3;
  }
  else
  {
    *(_BYTE *)(v3 + 9) = *(**a3)++;
    v5 = v3;
    if (a2 != 7)
      *(_BYTE *)(v3 + 10) = *(**a3)++;
  }
  return sub_10169EAA4(&v5, a2 - 8, (_WORD ***)a3);
}

uint64_t sub_10169EAA4(uint64_t *a1, int a2, _WORD ***a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a3;
  v5 = 12;
  v6 = a2;
  do
  {
    v7 = __OFSUB__(v6, 4);
    v6 -= 4;
    if (v6 < 0 == v7)
    {
      *(_DWORD *)(v3 + v5) = *(_DWORD *)*v4;
      *v4 += 4;
    }
    v5 += 4;
  }
  while (v5 != 24);
  if (a2 - 12 < 1)
    goto LABEL_12;
  *(_BYTE *)(v3 + 24) = *(_BYTE *)**a3;
  **a3 = (_WORD *)((char *)**a3 + 1);
  if (a2 == 13
    || (*(_BYTE *)(v3 + 25) = *(_BYTE *)**a3, **a3 = (_WORD *)((char *)**a3 + 1), (a2 - 13) < 3)
    || (*(_WORD *)(v3 + 26) = ***a3, ++**a3, a2 == 16)
    || (*(_BYTE *)(v3 + 28) = *(_BYTE *)**a3, **a3 = (_WORD *)((char *)**a3 + 1), (a2 - 19) >= 0xFFFFFFFD))
  {
LABEL_12:
    v10 = v3;
    v8 = a2 - 23;
  }
  else
  {
    *(_WORD *)(v3 + 30) = *(**a3)++;
    v10 = v3;
    v8 = a2 - 23;
    if (v8 <= 0xFFFFFFF9)
    {
      *(_DWORD *)(v3 + 32) = *(_DWORD *)**a3;
      **a3 += 2;
    }
  }
  return sub_10169EC10(&v10, v8, a3);
}

uint64_t sub_10169EC10(uint64_t *a1, int a2, _WORD ***a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;

  v3 = *a1;
  if (a2 < 1)
    goto LABEL_9;
  *(_BYTE *)(v3 + 36) = *(_BYTE *)**a3;
  **a3 = (_WORD *)((char *)**a3 + 1);
  if (a2 < 3)
    goto LABEL_9;
  *(_WORD *)(v3 + 38) = *(**a3)++;
  if ((a2 - 5) > 0xFFFFFFFB
    || (*(_WORD *)(v3 + 40) = ***a3, ++**a3, (a2 - 9) > 0xFFFFFFF9)
    || (*(_DWORD *)(v3 + 44) = *(_DWORD *)**a3, **a3 += 2, (a2 - 11) > 0xFFFFFFF9)
    || (*(_WORD *)(v3 + 48) = ***a3, ++**a3, (a2 - 15) >= 0xFFFFFFFA))
  {
LABEL_9:
    v6 = v3;
    v4 = a2 - 17;
  }
  else
  {
    *(_DWORD *)(v3 + 52) = *(_DWORD *)**a3;
    **a3 += 2;
    v6 = v3;
    v4 = a2 - 17;
    if (v4 <= 0xFFFFFFF9)
      *(_WORD *)(v3 + 56) = *(**a3)++;
  }
  return sub_10169ED70(&v6, v4, (_BYTE ***)a3);
}

uint64_t sub_10169ED70(uint64_t *a1, int a2, _BYTE ***a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;

  v3 = *a1;
  if (a2 < 4)
    goto LABEL_7;
  *(_DWORD *)(v3 + 60) = *(_DWORD *)**a3;
  **a3 += 4;
  if (a2 < 6)
    goto LABEL_7;
  *(_WORD *)(v3 + 64) = *(_WORD *)**a3;
  **a3 += 2;
  if (a2 == 6
    || (*(_BYTE *)(v3 + 66) = ***a3, ++**a3, a2 == 7)
    || (*(_BYTE *)(v3 + 67) = ***a3, ++**a3, a2 == 8)
    || (*(_BYTE *)(v3 + 68) = ***a3, ++**a3, a2 == 9))
  {
LABEL_7:
    v6 = v3;
    v4 = a2 - 12;
  }
  else
  {
    *(_BYTE *)(v3 + 69) = *(**a3)++;
    v6 = v3;
    v4 = a2 - 12;
    if (v4 <= 0xFFFFFFFC)
    {
      *(_WORD *)(v3 + 70) = *(_WORD *)**a3;
      **a3 += 2;
    }
  }
  return sub_10169EEC4(&v6, v4, (_DWORD ***)a3);
}

uint64_t sub_10169EEC4(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3;

  if (a2 >= 4)
  {
    v3 = *a1;
    *(_DWORD *)(*a1 + 72) = *(**a3)++;
    if (a2 >= 6)
    {
      *(_WORD *)(v3 + 76) = *(_WORD *)**a3;
      **a3 = (_DWORD *)((char *)**a3 + 2);
      if ((a2 - 10) <= 0xFFFFFFF9)
      {
        *(_DWORD *)(v3 + 80) = *(**a3)++;
        if ((a2 - 12) <= 0xFFFFFFF9)
        {
          *(_WORD *)(v3 + 84) = *(_WORD *)**a3;
          **a3 = (_DWORD *)((char *)**a3 + 2);
          if ((a2 - 16) <= 0xFFFFFFF9)
          {
            *(_DWORD *)(v3 + 88) = *(**a3)++;
            if ((a2 - 20) <= 0xFFFFFFF7)
            {
              *(_DWORD *)(v3 + 92) = *(**a3)++;
              if ((a2 - 16) >= 6)
              {
                *(_WORD *)(v3 + 96) = *(_WORD *)**a3;
                **a3 = (_DWORD *)((char *)**a3 + 2);
                if (a2 != 22)
                {
                  *(_BYTE *)(v3 + 98) = *(_BYTE *)**a3;
                  **a3 = (_DWORD *)((char *)**a3 + 1);
                }
              }
            }
          }
        }
      }
    }
  }
  return (a2 - 23);
}

__n128 sub_10169F020(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(_BYTE *)a1)
  {
    result.n128_u64[0] = sub_100006898(a1 + 8, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)a1 = 1;
  }
  return result;
}

void sub_10169F064()
{
  operator delete();
}

__n128 sub_10169F078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C7168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10169F0B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C7168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10169F0D0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,sendNiResponse,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v6 = *(unsigned __int8 *)(a1 + 8);
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,sendNiResponse,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_101725FC8(a2, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 **)(a1 + 16), (uint64_t)&stru_1021C71C8);
}

uint64_t sub_10169F29C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169F2D8()
{
}

void sub_10169F2E4(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240706;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    v20 = 2082;
    v21 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v6 = qword_1022A0078;
    v7 = *(unsigned __int16 *)a2;
    v8 = *((unsigned int *)a2 + 1);
    v11[0] = 67240706;
    v11[1] = v7;
    v12 = 1026;
    v13 = v8;
    v14 = 2082;
    v15 = qmi::asString(v8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", v11, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

uint64_t sub_10169F4E8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021C7208;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10169F524(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021C7208;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

_QWORD *sub_10169F570(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_1021C7208;
  sub_10169F94C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10169F5B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10169F5C4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C7208;
  return sub_10169F94C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10169F5E0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_10169F5F4(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void sub_10169F624(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  void *__p[2];
  _QWORD v20[2];
  uint8_t buf[8];
  uint64_t v22;
  __int128 v23;
  unsigned int v24;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_DWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67240962;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v22) = 1026;
    *(_DWORD *)((char *)&v22 + 2) = v7;
    HIWORD(v22) = 1026;
    LODWORD(v23) = v8;
    WORD2(v23) = 2082;
    *(_QWORD *)((char *)&v23 + 6) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,setApnProfilesReq,instance,%{public}d,apn,%{public}d,pdnType,%{public}d,apnName,%{public}s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v13 = a1 + 16;
    v14 = *(_DWORD *)(a1 + 40);
    v15 = *(_DWORD *)(a1 + 8);
    v16 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v13 = *(_QWORD *)(a1 + 16);
    LODWORD(__p[0]) = 67240962;
    HIDWORD(__p[0]) = v14;
    LOWORD(__p[1]) = 1026;
    *(_DWORD *)((char *)&__p[1] + 2) = v15;
    HIWORD(__p[1]) = 1026;
    LODWORD(v20[0]) = v16;
    WORD2(v20[0]) = 2082;
    *(_QWORD *)((char *)v20 + 6) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tb,setApnProfilesReq,instance,%{public}d,apn,%{public}d,pdnType,%{public}d,apnName,%{public}s", __p, 30);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v9 = *(_DWORD *)(a1 + 40);
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    v12 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 16);
    v20[0] = *(_QWORD *)(a1 + 32);
    v12 = v9;
  }
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v22 = 3221225472;
  *(_QWORD *)&v23 = sub_10169F9A8;
  *((_QWORD *)&v23 + 1) = &unk_1021C7268;
  v24 = v12;
  sub_101726CA0(a2, v9, v10, v11, (uint64_t *)__p, (uint64_t)buf);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(__p[0]);
}

void sub_10169F8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10169F904(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021C7288))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10169F940()
{
  return &off_1021C7288;
}

uint64_t sub_10169F94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void sub_10169F9A8(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240962;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 2082;
    v28 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,setApnProfilesRsp,instance,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v8 = qword_1022A0078;
    v9 = *(_DWORD *)(a1 + 32);
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 1);
    v14[0] = 67240962;
    v14[1] = v9;
    v15 = 1026;
    v16 = v10;
    v17 = 1026;
    v18 = v11;
    v19 = 2082;
    v20 = qmi::asString(v11);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#tb,#supl,setApnProfilesRsp,instance,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", v14, 30);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

_QWORD *sub_10169FBD0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021C72A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10169FC0C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021C72A8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

_BYTE *sub_10169FC58(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021C72A8;
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  sub_1007855D8((_QWORD *)v2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_10169FCAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10169FCC0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021C72A8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_1007855D8((_QWORD *)(a2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
}

void sub_10169FCF0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_10169FD08(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_10169FD38(uint64_t a1, uint64_t *a2)
{
  int v3;
  _QWORD v4[4];
  char v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10169FDE0;
  v4[3] = &unk_1021C7308;
  v5 = v3;
  sub_101729320(a2, v3, a1 + 16, (uint64_t)v4);
}

uint64_t sub_10169FD98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10169FDD4()
{
}

void sub_10169FDE0(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240962;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 2082;
    v28 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendInjectSuplCertRsp,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v8 = qword_1022A0078;
    v9 = *(unsigned __int8 *)(a1 + 32);
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 1);
    v14[0] = 67240962;
    v14[1] = v9;
    v15 = 1026;
    v16 = v10;
    v17 = 1026;
    v18 = v11;
    v19 = 2082;
    v20 = qmi::asString(v11);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#tb,#supl,sendInjectSuplCertRsp,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", v14, 30);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_1016A000C()
{
  operator delete();
}

_BYTE *sub_1016A0020(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021C7348;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1016A0058(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021C7348;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_1016A0078(uint64_t a1, uint64_t *a2)
{
  int v3;
  _QWORD v4[4];
  char v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1016A011C;
  v4[3] = &unk_1021C7308;
  v5 = v3;
  sub_1017295AC(a2, v3, (uint64_t)v4);
}

uint64_t sub_1016A00D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016A0110()
{
}

void sub_1016A011C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240962;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 2082;
    v28 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tb,#supl,sendDeleteSuplCert,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    v8 = qword_1022A0078;
    v9 = *(unsigned __int8 *)(a1 + 32);
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 1);
    v14[0] = 67240962;
    v14[1] = v9;
    v15 = 1026;
    v16 = v10;
    v17 = 1026;
    v18 = v11;
    v19 = 2082;
    v20 = qmi::asString(v11);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#tb,#supl,sendDeleteSuplCert,index,%{public}d,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{public}s", v14, 30);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaModemController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_1016A0344(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_101256420();
  if (!v3)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "fErrorProcDelayTimer is null", "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fErrorProcDelayTimer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 76;
  sub_100299FDC();
}

void sub_1016A04B4(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_101256420();
  if (!v3)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "#irat,fGnssIratState is null", "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#irat,fGnssIratState is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 72;
  sub_100299FDC();
}

void sub_1016A0624()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    }
    v1 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Invalid sim instance index", "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C67E8);
    }
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid sim instance index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService_Type.h", 309, "operator[]");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  }
}

void sub_1016A07D4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  *(_BYTE *)a1 = 0;
}

void sub_1016A0804(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  *(_BYTE *)a1 = 0;
}

uint64_t sub_1016A0834(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  _QWORD v8[5];
  _QWORD v9[5];
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint8_t buf[8];
  __int128 v15;
  void *v16;
  _QWORD *v17;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100270E34(a1 + 40, a3);
  v5 = objc_msgSend(objc_msgSend(a2, "silo"), "queue");
  sub_1015A2E04(v12, "QMI-PDC");
  sub_1015A2E04(__p, "location");
  qmi::Client::create(buf, v12, 36, v5, __p, 0);
  sub_1002B7674(a1 + 16, (__int128 *)((char *)&v15 + 8));
  qmi::Client::~Client((qmi::Client *)buf);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  *(_QWORD *)(a1 + 32) = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1016A0B0C;
  v9[3] = &unk_10212ECA0;
  v9[4] = a1;
  qmi::Client::setHandler(a1, 2, v9);
  qmi::Client::setHandler(a1, 1, &stru_1021C73B8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1016A10B4;
  v8[3] = &unk_1021380A8;
  v8[4] = a1;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v15 = 3221225472;
  *((_QWORD *)&v15 + 1) = sub_1016A1620;
  v16 = &unk_1021C6CE8;
  v17 = v8;
  qmi::Client::setIndHandler(a1, 47, buf);
  qmi::Client::setIndShouldWake((qmi::Client *)a1, 0x2Fu, 1);
  qmi::Client::start((qmi::Client *)a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68289026;
    LOWORD(v15) = 2082;
    *(_QWORD *)((char *)&v15 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#pdc,Initialized\"}", buf, 0x12u);
  }
  return a1;
}

void sub_1016A0A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  qmi::Client *v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  v33 = (_QWORD *)*((_QWORD *)v30 + 8);
  if (v33 == v31)
  {
    v34 = 4;
    v33 = v31;
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_10:
  qmi::Client::~Client(v30);
  _Unwind_Resume(a1);
}

void sub_1016A0B0C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,kEventStarted", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C73F8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#bb.e,#pdc,kEventStarted", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLQmiPdcController::CLQmiPdcController(CLIntersiloUniverse *, PdcRefreshCallback)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1016A0CA4(v1);
}

void sub_1016A0CA4(uint64_t a1)
{
  NSObject *v2;
  const qmi::MutableMessageBase *v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *aBlock;
  uint8_t v12[32];
  uint8_t buf[8];
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void *v16;
  Block_layout *v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,sendRegisterRequest", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C73F8);
    LOWORD(v7) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#bb.e,#pdc,sendRegisterRequest", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdcController::sendRegisterRequest()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12, 0x20u);
  *sub_1016A179C((uint64_t)v12, 16) = 1;
  *sub_1016A19CC((uint64_t)v12, 17) = 0;
  v7 = a1;
  v8 = QMIServiceMsg::create((QMIServiceMsg *)v12, v3);
  v9 = 25000;
  v10 = 0;
  aBlock = 0;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_1016A1BAC;
  v16 = &unk_1021C6CE8;
  v17 = &stru_1021C73D8;
  v4 = _Block_copy(buf);
  aBlock = v4;
  if (v8)
  {
    qmi::Client::send(v7, &v7);
    v4 = aBlock;
  }
  if (v4)
    _Block_release(v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
}

void sub_1016A0EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1016A15B0((uint64_t *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1016A0F30(id a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,kEventStopped", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C73F8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#bb.e,#pdc,kEventStopped", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "CLQmiPdcController::CLQmiPdcController(CLIntersiloUniverse *, PdcRefreshCallback)_block_invoke", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

uint64_t sub_1016A10B4(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_1016A10BC(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1016A10BC(uint64_t a1, qmi::MessageBase *this)
{
  int *TlvValue;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t result;
  const char *v15;
  uint8_t *v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  TlvValue = (int *)qmi::MessageBase::findTlvValue(this, 1u);
  if (TlvValue)
  {
    if (v5 == 4)
    {
      v6 = *TlvValue;
      goto LABEL_6;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 1, TlvValue, v5);
  }
  v6 = -1;
LABEL_6:
  v7 = (int *)qmi::MessageBase::findTlvValue(this, 0x10u);
  if (v7)
  {
    if (v8 == 4)
    {
      v9 = *v7;
      goto LABEL_11;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 16, v7, v8);
  }
  v9 = -1;
LABEL_11:
  v10 = (int *)qmi::MessageBase::findTlvValue(this, 0x11u);
  if (v10)
  {
    if (v11 == 4)
    {
      v12 = *v10;
      goto LABEL_16;
    }
    qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)this, 17, v10, v11);
  }
  v12 = -1;
LABEL_16:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v23 = v9;
    v24 = 1024;
    v25 = v12;
    v26 = 1024;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,RefreshInd,sub,%d,slot,%d,event,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C73F8);
    v18 = 1024;
    v19 = v12;
    v20 = 1024;
    v21 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#bb.e,#pdc,RefreshInd,sub,%d,slot,%d,event,%d", &v17, 20, 67109632);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdcController::handleRefreshInd(const pdc::Refresh::Indication &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    if (v6 == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

void sub_1016A1384(qmi::Client *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  qmi::Client::~Client(this);
}

void sub_1016A13D4(id a1, const void *a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  unsigned int v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C73F8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109378;
    v14 = v4;
    v15 = 2080;
    v16 = qmi::asString(v4);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#bb.e,#pdc,indicationRegisterResponse,error,%d,errorStr,%s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C73F8);
    v5 = qword_1022A0078;
    v6 = *((unsigned int *)a2 + 1);
    v10[0] = 67109378;
    v10[1] = v6;
    v11 = 2080;
    v12 = qmi::asString(v6);
    LODWORD(v9) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#bb.e,#pdc,indicationRegisterResponse,error,%d,errorStr,%s", v10, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdcController::sendRegisterRequest()_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

_QWORD *sub_1016A15B0(_QWORD *a1)
{
  const void *v2;

  if (a1[1])
    qmi::Client::send(*a1, a1);
  v2 = (const void *)a1[4];
  if (v2)
    _Block_release(v2);
  return a1;
}

void sub_1016A15F4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1016A1620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1016A167C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1016A1668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1016A167C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1016A175C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1016A171C((uint64_t)a2);
  }
}

void sub_1016A1700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016A171C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x2Fu);
  return a1;
}

void sub_1016A1748(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1016A175C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Fu);
  return a1;
}

void sub_1016A1788(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1016A179C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1016A1810();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1016A1810()
{
  operator new();
}

void sub_1016A1930()
{
  operator delete();
}

uint64_t sub_1016A1944(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  v4 = *a2 + 1;
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_1016A1980()
{
  operator new();
}

char *sub_1016A19CC(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1016A1A40();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1016A1A40()
{
  operator new();
}

void sub_1016A1B60()
{
  operator new();
}

void sub_1016A1BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1016A1C08(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1016A1BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1016A1C08(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1016A1CA8(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169BDF4((uint64_t)a2);
  }
}

void sub_1016A1C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_1016A1CA8(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x20u);
  return a1;
}

void sub_1016A1CD4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1016A1CE8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  void *__p;
  uint8_t buf[8];

  *a1 = a3;
  v11 = (uint64_t)(a1 + 5);
  sub_100270E34((uint64_t)(a1 + 1), a5);
  sub_100270E34(v11, a6);
  sub_100270E34((uint64_t)(a1 + 9), a7);
  sub_1015A2E04(&__p, off_1023008A0[a2]);
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_1016A24D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1016A24DCLL);
}

void sub_1016A24F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_1016A24F8()
{
  JUMPOUT(0x1016A2710);
}

void sub_1016A2500()
{
  JUMPOUT(0x1016A273CLL);
}

void sub_1016A2508()
{
  JUMPOUT(0x1016A2768);
}

void sub_1016A2510()
{
  JUMPOUT(0x1016A263CLL);
}

uint64_t **sub_1016A279C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21[2];
  char v22;
  int v23;
  _BYTE __p[12];
  __int16 v25;
  int v26;
  __int16 v27;
  void **v28;
  _BYTE buf[12];
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;

  v23 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_1016B0DAC(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021C7518);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7)
      v11 = "Session";
    else
      v11 = "Idle";
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v28) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v30 = 1024;
    v31 = v7;
    v32 = 2080;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v28) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    if (v7)
      v17 = "Session";
    else
      v17 = "Idle";
    sub_1015A2E04(v21, v17);
    if (v22 >= 0)
      v18 = v21;
    else
      v18 = (void **)v21[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v25 = 1024;
    v26 = v7;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v21[0]);
    v20 = v19;
    if (v22 < 0)
      operator delete(v21[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::setStateHandler(State, StateHandler) [T = CLNilrSupl]", "%s\n", v20);
    if (v20 != buf)
      free(v20);
  }
  *(_QWORD *)buf = &v23;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_1016A2A90(uint64_t a1, int a2)
{
  _BOOL8 result;
  NSObject *v5;
  _BOOL4 v6;
  void **v7;
  const char *v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  _BOOL4 v26;
  void **v27;
  NSObject *v28;
  int v29;
  int v30;
  const char *v31;
  NSObject *v32;
  int v33;
  int v34;
  const char *v35;
  NSObject *v36;
  int v37;
  int v38;
  const char *v39;
  NSObject *v40;
  int v41;
  int v42;
  const char *v43;
  NSObject *v44;
  int v45;
  int v46;
  const char *v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  int v54;
  const char *v55;
  uint8_t *v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  void *__p[2];
  char v61;
  uint8_t buf[4];
  int v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  void **v67;

  result = 0;
  switch(a2)
  {
    case 0:
      sub_1016A8E4C(a1);
      sub_1016A91B0(a1);
      return 0;
    case 2:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v18 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,EmergencyModeStart", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v48 = *(_DWORD *)(a1 + 2556);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ins%d,#nilr,#supl,EmergencyModeStart", __p);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      sub_1016A9088(a1 + 2128);
      sub_1016A5134(a1);
      return 0;
    case 3:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,EmergencyModeEnd", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v51 = *(_DWORD *)(a1 + 2556);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v51;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ins%d,#nilr,#supl,EmergencyModeEnd", __p);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
      sub_1016A9088(a1 + 2128);
      return 0;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v22 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,isSUPLInitValid?", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v54 = *(_DWORD *)(a1 + 2556);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v54;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,isSUPLInitValid?", __p);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      result = sub_1016A95E4(a1, *(int **)(a1 + 2520), a1 + 2560);
      if (result)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          v63 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,SUPLInit is valid", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v57 = *(_DWORD *)(a1 + 2556);
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v57;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,SUPLInit is valid", __p);
          v59 = (uint8_t *)v58;
          sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v58);
          if (v59 != buf)
            free(v59);
        }
        *(_QWORD *)(a1 + 360) = 0x4060000000000000;
        return 1;
      }
      return result;
    case 6:
    case 7:
      sub_1016A91B0(a1);
      sub_1016A5134(a1);
      return 0;
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v5 = qword_1022A0088;
      v6 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v6)
        return result;
      sub_1016A919C(a2, __p);
      if (v61 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v63 = 0;
      v64 = 2082;
      v65 = "";
      v66 = 2082;
      v67 = v7;
      v8 = "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,connEvent without session\", \"connEvent\":%{public, location:escape_only}s}";
      goto LABEL_9;
    case 9:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v5 = qword_1022A0088;
      v26 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v26)
        return result;
      sub_1015A2E04(__p, "ConnClose");
      if (v61 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v63 = 0;
      v64 = 2082;
      v65 = "";
      v66 = 2082;
      v67 = v27;
      v8 = "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,event without session, possibly due to session abort\", \"event\""
           ":%{public, location:escape_only}s}";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v8, buf, 0x1Cu);
      if (v61 < 0)
        operator delete(__p[0]);
      return 0;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,timeout without session", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v11 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,timeout without session", __p);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v12);
      goto LABEL_102;
    case 16:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v29 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,ecid request without session, dropping..", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v30 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,ecid request without session, dropping..", __p);
      v13 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v31);
      goto LABEL_102;
    case 17:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v32 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ecid response without session, dropping..", buf, 8u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v34 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,ecid response without session, dropping..", __p);
      v13 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v35);
      goto LABEL_102;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v36 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v37 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,ecid request timeout without session", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v38 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,ecid request timeout without session", __p);
      v13 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v39);
      goto LABEL_102;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v40 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v41 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan request without session, dropping..", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v42 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,wlan request without session, dropping..", __p);
      v13 = (uint8_t *)v43;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v43);
      goto LABEL_102;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan response without session, dropping..", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v16 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,wlan response without session, dropping..", __p);
      v13 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v17);
      goto LABEL_102;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v45 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v63 = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,wlan request timeout without session, dropping..", buf, 8u);
      }
      result = sub_1001BFF7C(115, 0);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v46 = *(_DWORD *)(a1 + 2556);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v46;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,wlan request timeout without session, dropping..", __p);
      v13 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Idle(CLNilrSupl::Event)", "%s\n", v47);
LABEL_102:
      if (v13 != buf)
        free(v13);
      return 0;
    default:
      return result;
  }
}

uint64_t sub_1016A3B64(uint64_t a1, int a2)
{
  uint64_t result;
  std::string *v5;
  NSObject *v6;
  void **v7;
  const void *v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  std::string::size_type v30;
  int v31;
  const char *v32;
  std::string *v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  int v40;
  NSObject *v42;
  int v43;
  NSObject *v44;
  int v45;
  __int128 v46;
  NSObject *v48;
  int v49;
  uint64_t v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  const char *v59;
  std::string *v60;
  int v61;
  const char *v62;
  std::string *v63;
  int v64;
  const char *v65;
  std::string *v66;
  int v67;
  const char *v68;
  std::string *v69;
  int v70;
  const char *v71;
  std::string *v72;
  int v73;
  const char *v74;
  std::string *v75;
  int v76;
  const char *v77;
  std::string *v78;
  int v79;
  const char *v80;
  std::string *v81;
  int v82;
  const char *v83;
  _OWORD v84[3];
  _DWORD v85[68];
  _DWORD v86[68];
  _DWORD __dst[68];
  _DWORD v88[68];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  int64x2_t v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD v102[2];
  int v103;
  char v104;
  unint64_t v105;
  int v106;
  int64x2_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  __int16 v111;
  int v112;
  uint64_t v113;
  char v114;
  uint64_t data_low;
  int v116;
  int64x2_t v117;
  unint64_t v118;
  _DWORD v119[68];
  void *v120[2];
  std::string::size_type v121;
  std::string buf[68];
  _QWORD v123[3];
  _QWORD *v124;
  void *v125[2];
  unsigned __int8 v126;
  _QWORD v127[3];
  _QWORD *v128;

  result = 1;
  v5 = buf;
  switch(a2)
  {
    case 0:
      *(_QWORD *)(a1 + 360) = 0x4060000000000000;
      sub_1016A9088(a1 + 1856);
      *(_DWORD *)(a1 + 1856) = 1;
      *(_DWORD *)(a1 + 1900) = 2 * *(unsigned __int8 *)(a1 + 371);
      *(_DWORD *)(a1 + 1904) = 1;
      *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a1 + 360);
      *(CFAbsoluteTime *)(a1 + 1880) = CFAbsoluteTimeGetCurrent();
      v22 = *(_QWORD *)(a1 + 96);
      if (!v22)
        goto LABEL_164;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(v22, a1 + 1856);
      v127[0] = off_1021C7898;
      v127[1] = a1;
      v128 = v127;
      v23 = *(_QWORD *)(a1 + 32);
      if (!v23)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 48))(v23, v127);
      v24 = v128;
      if (v128 == v127)
      {
        v25 = 4;
        v24 = v127;
      }
      else
      {
        if (!v128)
          goto LABEL_104;
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_104:
      v50 = *(_QWORD *)(a1 + 232);
      if (*(int *)(v50 + 8) <= 0)
      {
        sub_1015A2E04(buf, "Session");
        sub_1015A2E04(v125, "Enter");
        if ((v126 & 0x80u) == 0)
          v51 = (const std::string::value_type *)v125;
        else
          v51 = (const std::string::value_type *)v125[0];
        if ((v126 & 0x80u) == 0)
          v52 = v126;
        else
          v52 = (std::string::size_type)v125[1];
        v53 = std::string::append(buf, v51, v52);
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v121 = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)v120 = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        sub_10002B684(v50, (uint64_t *)v120);
        if (SHIBYTE(v121) < 0)
          operator delete(v120[0]);
        if ((char)v126 < 0)
          operator delete(v125[0]);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      sub_1016AAE9C(a1 + 104, 15, *(double *)(a1 + 360));
      if (!*(_BYTE *)(a1 + 424))
        return 1;
      v123[0] = off_1021C7918;
      v124 = v123;
      v55 = *(_QWORD *)(a1 + 32);
      if (!v55)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v55 + 48))(v55, v123);
      v56 = v124;
      if (v124 == v123)
      {
        v57 = 4;
        v56 = v123;
      }
      else
      {
        if (!v124)
          goto LABEL_125;
        v57 = 5;
      }
      (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_125:
      sub_101833EEC(*(_QWORD *)(a1 + 2592));
      return 1;
    case 1:
      v26 = *(_QWORD *)(a1 + 232);
      if (*(int *)(v26 + 8) <= 0)
      {
        sub_1016B0F24();
        __break(1u);
LABEL_168:
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
LABEL_53:
        v30 = v5[5].__r_.__value_.__r.__words[2];
        v31 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "#ins%d,#nilr,#supl,connection to SLP established", v125);
        v33 = (std::string *)v32;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      else
      {
        sub_100E3E6F0(v26);
        sub_1016AB96C(a1 + 104, 15);
        *(_DWORD *)(a1 + 1856) = 2;
        *(CFAbsoluteTime *)(a1 + 1888) = CFAbsoluteTimeGetCurrent();
        if (!*(_DWORD *)(a1 + 1860))
          *(_DWORD *)(a1 + 1860) = 3;
        v27 = *(_QWORD *)(a1 + 96);
        if (!v27)
LABEL_164:
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 48))(v27, a1 + 1856);
        if (*(_BYTE *)(a1 + 2464))
          sub_1016AB96C(a1 + 104, 18);
        if (*(char *)(a1 + 2583) < 0)
        {
          **(_BYTE **)(a1 + 2560) = 0;
          *(_QWORD *)(a1 + 2568) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 2560) = 0;
          *(_BYTE *)(a1 + 2583) = 0;
        }
      }
      return 1;
    case 3:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v37 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,Emergency call end", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v70 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v70;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,Emergency call end", v125);
        v72 = (std::string *)v71;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
      if (*(_BYTE *)(a1 + 314))
        return 1;
      sub_1016ABDFC(a1);
      *(_DWORD *)(a1 + 1860) = 7;
      *(_BYTE *)(a1 + 2084) = 1;
      memcpy(v119, (const void *)(a1 + 1856), sizeof(v119));
      sub_1016ABEE8(a1, v119);
      return 0;
    case 4:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v39 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,received SUPL init while in session. Dropping", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v73 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v73;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,received SUPL init while in session. Dropping", v125);
        v75 = (std::string *)v74;
        sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v74);
        if (v75 != buf)
          free(v75);
      }
      v102[0] = 0;
      *(_QWORD *)((char *)v102 + 5) = 0;
      v113 = 0;
      v114 = 0;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 3) = 0;
      buf[0].__r_.__value_.__s.__data_[11] = 0;
      __asm { FMOV            V1.2D, #-1.0 }
      v90 = _Q1;
      v91 = _Q1;
      v89 = 0x1800000000;
      v92 = -1;
      v93 = 1;
      v94 = 0;
      v95 = 0;
      v96 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v97 = xmmword_101BBE630;
      v98 = _Q1;
      v99 = 0xBFF0000000000000;
      v100 = 0;
      v101 = 2;
      v103 = 0;
      v104 = 0;
      v105 = 0xFFFFFFFF00000000;
      v106 = -1;
      v107 = v96;
      v108 = 0xBFF0000000000000;
      v109 = 0xFFFFFFFF00000000;
      v110 = 0;
      v111 = 255;
      v112 = 1;
      data_low = LODWORD(buf[0].__r_.__value_.__l.__data_);
      v116 = 0;
      v117 = v96;
      v118 = 0xBFF0000000000000;
      sub_1016A7758(a1, &v89);
      return 1;
    case 5:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,asked to abort", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v64 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v64;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,asked to abort", v125);
        v66 = (std::string *)v65;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
      sub_1016ABDFC(a1);
      *(_DWORD *)(a1 + 1860) = 19;
      *(_BYTE *)(a1 + 2084) = 1;
      memcpy(v88, (const void *)(a1 + 1856), sizeof(v88));
      sub_1016ABEE8(a1, v88);
      return 0;
    case 6:
    case 7:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v6 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        sub_1016A919C(a2, v125);
        v7 = (v126 & 0x80u) == 0 ? v125 : (void **)v125[0];
        buf[0].__r_.__value_.__r.__words[0] = 68289282;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,carrier/op change. Abort\", \"event\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
        if ((char)v126 < 0)
          operator delete(v125[0]);
      }
      sub_1016ABDFC(a1);
      v8 = (const void *)(a1 + 1856);
      if (a2 == 6)
      {
        *(_DWORD *)(a1 + 1860) = 12;
        *(_BYTE *)(a1 + 2084) = 1;
        memcpy(__dst, v8, sizeof(__dst));
        sub_1016ABEE8(a1, __dst);
      }
      else
      {
        *(_DWORD *)(a1 + 1860) = 13;
        *(_BYTE *)(a1 + 2084) = 1;
        memcpy(v86, v8, sizeof(v86));
        sub_1016ABEE8(a1, v86);
      }
      return 0;
    case 8:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v5 = (std::string *)&qword_1022A0000;
      v28 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,connection to SLP established", (uint8_t *)buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 == -1)
        goto LABEL_53;
      goto LABEL_168;
    case 9:
      return 0;
    case 10:
      result = 0;
      v11 = 14;
      goto LABEL_86;
    case 11:
      result = 0;
      v11 = 15;
      goto LABEL_86;
    case 12:
      result = 0;
      v11 = 16;
      goto LABEL_86;
    case 13:
      result = 0;
      v11 = 17;
      goto LABEL_86;
    case 14:
      result = 0;
      v11 = 18;
LABEL_86:
      *(_DWORD *)(a1 + 1860) = v11;
      return result;
    case 15:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v34 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v35 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning session timeout", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v67 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v67;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,#Warning session timeout", v125);
        v69 = (std::string *)v68;
        sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v68);
        if (v69 != buf)
          free(v69);
      }
      sub_1016ABDFC(a1);
      *(_DWORD *)(a1 + 1860) = 2;
      *(_BYTE *)(a1 + 2084) = 1;
      memcpy(v85, (const void *)(a1 + 1856), sizeof(v85));
      sub_1016ABEE8(a1, v85);
      return 0;
    case 16:
      v36 = *(_QWORD *)(a1 + 2432);
      if (!v36)
        goto LABEL_164;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36))
      {
        sub_1016AAE9C(a1 + 104, 18, 1.5);
        sub_1016A78A0(a1);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v48 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v49 = *(_DWORD *)(a1 + 2556);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,not on LTE, ecid not needed", (uint8_t *)buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v82 = *(_DWORD *)(a1 + 2556);
          LODWORD(v125[0]) = 67109120;
          HIDWORD(v125[0]) = v82;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,not on LTE, ecid not needed", v125);
          v78 = (std::string *)v83;
          sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v83);
          if (v78 != buf)
LABEL_155:
            free(v78);
        }
LABEL_82:
        sub_1016A7AF8(a1);
      }
      return 1;
    case 17:
      sub_1016AB96C(a1 + 104, 18);
      sub_1016A7AF8(a1);
      return 1;
    case 18:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v42 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v43 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning Ecid request timeout", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v76 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v76;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,#Warning Ecid request timeout", v125);
        v78 = (std::string *)v77;
        sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v77);
        if (v78 != buf)
          goto LABEL_155;
      }
      goto LABEL_82;
    case 19:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v9 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,Wlan request received", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v58 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,Wlan request received", v125);
        v60 = (std::string *)v59;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v59);
        if (v60 != buf)
          free(v60);
      }
      sub_101837358(*(_QWORD *)(a1 + 2592), *(_QWORD *)(a1 + 616), *(_DWORD *)(a1 + 624), (int)*(double *)(a1 + 2600));
      sub_1016AAE9C(a1 + 104, 21, *(double *)(a1 + 2600));
      return 1;
    case 20:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,Wlan response received", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v61 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v61;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,Wlan response received", v125);
        v63 = (std::string *)v62;
        sub_100512490("Generic", 1, 0, 2, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      sub_1016AB96C(a1 + 104, 21);
      sub_1016AC028(a1, a1 + 2616);
      *(_DWORD *)(a1 + 2656) = 3;
      v14 = *(_QWORD *)(a1 + 2728);
      if (!v14)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, a1 + 2656);
      *(_QWORD *)(a1 + 2656) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 2672) = _Q0;
      *(_WORD *)(a1 + 2694) = 0;
      *(_DWORD *)(a1 + 2664) = 0;
      *(_DWORD *)(a1 + 2688) = 0;
      *(_BYTE *)(a1 + 2692) = 0;
      result = 1;
      *(_DWORD *)(a1 + 2696) = 1;
      return result;
    case 21:
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v44 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v45 = *(_DWORD *)(a1 + 2556);
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,#Warning,#wlan, Request timeout", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v79 = *(_DWORD *)(a1 + 2556);
        LODWORD(v125[0]) = 67109120;
        HIDWORD(v125[0]) = v79;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,#Warning,#wlan, Request timeout", v125);
        v81 = (std::string *)v80;
        sub_100512490("Generic", 1, 0, 0, "CLNilrSupl::State CLNilrSupl::handler_Session(CLNilrSupl::Event)", "%s\n", v80);
        if (v81 != buf)
          free(v81);
      }
      memset(&buf[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 3;
      sub_1016AC028(a1, (uint64_t)buf);
      *(_DWORD *)(a1 + 2660) = 3;
      *(CFAbsoluteTime *)(a1 + 2680) = CFAbsoluteTimeGetCurrent();
      v46 = *(_OWORD *)(a1 + 2672);
      v84[0] = *(_OWORD *)(a1 + 2656);
      v84[1] = v46;
      v84[2] = *(_OWORD *)(a1 + 2688);
      sub_1016AC284(a1, v84);
      *(_QWORD *)(a1 + 2656) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 2672) = _Q0;
      *(_WORD *)(a1 + 2694) = 0;
      *(_DWORD *)(a1 + 2664) = 0;
      *(_DWORD *)(a1 + 2688) = 0;
      *(_BYTE *)(a1 + 2692) = 0;
      *(_DWORD *)(a1 + 2696) = 1;
      if (buf[0].__r_.__value_.__l.__size_)
      {
        buf[0].__r_.__value_.__r.__words[2] = buf[0].__r_.__value_.__l.__size_;
        operator delete((void *)buf[0].__r_.__value_.__l.__size_);
      }
      return 1;
    default:
      return result;
  }
}

void sub_1016A501C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete((void *)STACK[0x6A0]);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  _Unwind_Resume(a1);
}

void sub_1016A5134(uint64_t a1)
{
  NSObject *v2;
  _BOOL4 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  void *__p[2];
  uint64_t v27;
  int v28;
  int v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  if (*(_BYTE *)(a1 + 272) && *(_BYTE *)(a1 + 313))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v2 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a1 + 272))
        v3 = *(_BYTE *)(a1 + 313) != 0;
      else
        v3 = 0;
      v4 = *(_QWORD *)(a1 + 2432);
      if (!v4)
        sub_10025FD1C();
      v5 = *(_DWORD *)(a1 + 2556);
      v6 = *(unsigned __int8 *)(a1 + 318);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      v8 = *(unsigned __int8 *)(a1 + 312);
      *(_DWORD *)buf = 67110144;
      v39 = v5;
      v40 = 1024;
      v41 = v3;
      v42 = 1024;
      v43 = v6;
      v44 = 1024;
      v45 = v7;
      v46 = 1024;
      v47 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,startUdpListenerOnce,isSuplAllowed,%d,fInCellularEmergency,%d,fIsServingCellOnLte,%d,fUdpListenerIsRunning,%d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      if (*(_BYTE *)(a1 + 272))
        v14 = *(_BYTE *)(a1 + 313) != 0;
      else
        v14 = 0;
      v15 = *(_QWORD *)(a1 + 2432);
      if (!v15)
        sub_10025FD1C();
      v16 = qword_1022A0088;
      v17 = *(_DWORD *)(a1 + 2556);
      v18 = *(unsigned __int8 *)(a1 + 318);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      v20 = *(unsigned __int8 *)(a1 + 312);
      v28 = 67110144;
      v29 = v17;
      v30 = 1024;
      v31 = v14;
      v32 = 1024;
      v33 = v18;
      v34 = 1024;
      v35 = v19;
      v36 = 1024;
      v37 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "#ins%d,#nilr,#supl,startUdpListenerOnce,isSuplAllowed,%d,fInCellularEmergency,%d,fIsServingCellOnLte,%d,fUdpListenerIsRunning,%d", &v28, 32, LODWORD(__p[0]), LODWORD(__p[1]), v27);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::startUdpListenerOnce()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (*(_BYTE *)(a1 + 272) && *(_BYTE *)(a1 + 313))
    {
      v9 = *(_QWORD *)(a1 + 2432);
      if (!v9)
        sub_10025FD1C();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) && !*(_BYTE *)(a1 + 312))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v10 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          v39 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,startUdpListenerOnce,success", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v23 = *(_DWORD *)(a1 + 2556);
          v28 = 67109120;
          v29 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,startUdpListenerOnce,success", &v28);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::startUdpListenerOnce()", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        v12 = *(_QWORD *)(a1 + 304);
        v13 = *(unsigned __int8 *)(a1 + 424);
        if (*(char *)(a1 + 423) < 0)
        {
          sub_100115CE4(__p, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(a1 + 400);
          v27 = *(_QWORD *)(a1 + 416);
        }
        sub_100C1CD2C(v12, v13 != 0, (uint64_t)__p);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        *(_BYTE *)(a1 + 312) = 1;
      }
    }
  }
}

void sub_1016A55A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1016A55C8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1016A1CE8(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1016A55DC(uint64_t a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  int v7;
  id v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[5];
  uint64_t v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *__p;
  void *v21;
  int v22;
  _DWORD v23[4];
  uint8_t buf[24];
  void *v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,dispatch_decodedSuplInit", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v9 = *(_DWORD *)(a1 + 2556);
    v23[0] = 67109120;
    v23[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,dispatch_decodedSuplInit", v23);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_1016AEB94((uint64_t)buf, a3);
  v8 = objc_msgSend(*(id *)a1, "silo");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_1016A58B4;
  v12[3] = &unk_1021C74C8;
  v12[4] = a1;
  sub_1016AEB94((uint64_t)&v13, (uint64_t *)buf);
  v22 = a2;
  objc_msgSend(v8, "async:", v12);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0)
    operator delete(v18);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v15 < 0)
    operator delete(v14);
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v30 < 0)
    operator delete(v29);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v26 < 0)
    operator delete(v25);
}

void sub_1016A5888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_1016A69A4(v37);
  sub_1016A69A4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1016A58B4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[8];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 2556);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,processing decodedSuplInit", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v4 = *(_DWORD *)(v1 + 2556);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,processing decodedSuplInit", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  operator new();
}

void sub_1016A5B10()
{
  operator delete();
}

uint64_t sub_1016A5B3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t **v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  _QWORD *v29;
  char *v30;
  _BYTE *v31;
  NSObject *v32;
  os_log_type_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t *v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t *v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  const char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  int v87;
  _BYTE *v88;
  _BYTE *v89;
  void **v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  int v97;
  _BYTE *v98;
  _BYTE *v99;
  void **v100;
  char *v101;
  char *v102;
  const char *v103;
  const char *v104;
  int v105;
  void *v106[2];
  char v107;
  int v108;
  _BYTE __p[12];
  __int16 v110;
  _BYTE *v111;
  __int16 v112;
  void **v113;
  _BYTE buf[12];
  __int16 v115;
  _BYTE *v116;
  __int16 v117;
  _BYTE *v118;
  _BYTE v119[12];
  __int16 v120;
  _BYTE *v121;
  char v122;

  ++*(_DWORD *)(a1 + 88);
  v108 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_1016B10A4();
    goto LABEL_181;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_1016B1224(qword_1022A0070 == -1);
    goto LABEL_181;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    if (*(_DWORD *)(a1 + 4))
      v8 = "Session";
    else
      v8 = "Idle";
    sub_1015A2E04(__p, v8);
    v9 = SHIBYTE(v112);
    v10 = *(_BYTE **)__p;
    sub_1016A919C(a2, v119);
    v11 = __p;
    if (v9 < 0)
      v11 = v10;
    if (v122 >= 0)
      v12 = v119;
    else
      v12 = *(_BYTE **)v119;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v115 = 2080;
    v116 = v11;
    v117 = 2080;
    v118 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v122 < 0)
      operator delete(*(void **)v119);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v112) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v62 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v62 = (_QWORD *)*v62;
    v63 = qword_1022A0078;
    v64 = *(unsigned __int8 *)(a1 + 120);
    if (*(_DWORD *)(a1 + 4))
      v65 = "Session";
    else
      v65 = "Idle";
    sub_1015A2E04(v119, v65);
    v66 = v122;
    v67 = *(_BYTE **)v119;
    sub_1016A919C(a2, v106);
    v68 = v119;
    if (v66 < 0)
      v68 = v67;
    if (v107 >= 0)
      v69 = v106;
    else
      v69 = (void **)v106[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v62;
    v110 = 2080;
    v111 = v68;
    v112 = 2080;
    v113 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, v64, "%scurrent_state,%s,event,%s", __p, 32, v104);
    v71 = v70;
    if (v107 < 0)
      operator delete(v106[0]);
    v3 = &qword_1022A0000;
    if (v122 < 0)
      operator delete(*(void **)v119);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_31;
  v14 = (uint64_t **)(a1 + 8);
  v15 = *(_DWORD *)(a1 + 4);
  v16 = a1 + 16;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 < v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (!v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 == a1 + 16 || v15 < *(_DWORD *)(v16 + 32))
  {
LABEL_31:
    sub_1016B139C();
    goto LABEL_181;
  }
  v21 = *(uint64_t (**)(_QWORD *, uint64_t))(v16 + 40);
  v20 = *(_QWORD *)(v16 + 48);
  v22 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v20 >> 1));
  if ((v20 & 1) != 0)
    v21 = *(uint64_t (**)(_QWORD *, uint64_t))(*v22 + v21);
  v23 = v21(v22, a2);
  v24 = v23;
  v105 = v23;
  if (a2 <= 1 && (_DWORD)v23 != v108)
  {
    sub_1016B181C();
    goto LABEL_181;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v25 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v26 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v26 = (_QWORD *)*v26;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v79 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v79 = (_QWORD *)*v79;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v79;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v81 = (char *)v80;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v80);
      if (v81 != buf)
        free(v81);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v27 = qword_1022A0078;
  v28 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v28))
  {
    v29 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v29 = (_QWORD *)*v29;
    if ((_DWORD)v24)
      v30 = "Session";
    else
      v30 = "Idle";
    sub_1015A2E04(buf, v30);
    if (v117 >= 0)
      v31 = buf;
    else
      v31 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v29;
    v110 = 2080;
    v111 = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v117) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    if ((_DWORD)v24)
      v75 = "Session";
    else
      v75 = "Idle";
    sub_1015A2E04(__p, v75);
    if (v112 >= 0)
      v76 = __p;
    else
      v76 = *(_BYTE **)__p;
    *(_DWORD *)v119 = 136315394;
    *(_QWORD *)&v119[4] = v72;
    v120 = 2080;
    v121 = v76;
    LODWORD(v103) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v119, v103);
    v78 = v77;
    if (SHIBYTE(v112) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v78);
    if (v78 != buf)
      free(v78);
  }
  if ((_DWORD)v24 != v108)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v32 = qword_1022A0078;
    v33 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v33))
    {
      v34 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v34 = (_QWORD *)*v34;
      if (v108)
        v35 = "Session";
      else
        v35 = "Idle";
      sub_1015A2E04(__p, v35);
      v36 = v3;
      v37 = SHIBYTE(v112);
      v38 = *(_BYTE **)__p;
      sub_1015A2E04(v119, "Exit");
      v39 = __p;
      if (v37 < 0)
        v39 = v38;
      if (v122 >= 0)
        v40 = v119;
      else
        v40 = *(_BYTE **)v119;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v34;
      v115 = 2080;
      v116 = v39;
      v117 = 2080;
      v118 = v40;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%soldState,%s,event,%s", buf, 0x20u);
      if (v122 < 0)
        operator delete(*(void **)v119);
      v3 = v36;
      if (SHIBYTE(v112) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v82 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v82 = (_QWORD *)*v82;
      v83 = qword_1022A0078;
      v84 = *(unsigned __int8 *)(a1 + 120);
      if (v108)
        v85 = "Session";
      else
        v85 = "Idle";
      sub_1015A2E04(v119, v85);
      v86 = v3;
      v87 = v122;
      v88 = *(_BYTE **)v119;
      sub_1015A2E04(v106, "Exit");
      v89 = v119;
      if (v87 < 0)
        v89 = v88;
      if (v107 >= 0)
        v90 = v106;
      else
        v90 = (void **)v106[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v82;
      v110 = 2080;
      v111 = v89;
      v112 = 2080;
      v113 = v90;
      LODWORD(v103) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, v84, "%soldState,%s,event,%s", __p, v103, (const char *)(a1 + 8));
      v92 = v91;
      if (v107 < 0)
        operator delete(v106[0]);
      v3 = v86;
      v14 = (uint64_t **)v104;
      if (v122 < 0)
        operator delete(*(void **)v119);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v92);
      if (v92 != buf)
        free(v92);
    }
    v41 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v108;
    v42 = sub_1000610B4(v14, &v108, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v43 = v42[5];
    v44 = (uint64_t)v42[6];
    v45 = (_QWORD *)(v41 + (v44 >> 1));
    if ((v44 & 1) != 0)
      v43 = *(uint64_t **)(*v45 + v43);
    v46 = ((uint64_t (*)(_QWORD *, uint64_t))v43)(v45, 1);
    if (v46 == v108)
    {
      *(_DWORD *)(a1 + 4) = v24;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v47 = qword_1022A0078;
      v48 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v48))
      {
        v49 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v49 = (_QWORD *)*v49;
        if ((_DWORD)v24)
          v50 = "Session";
        else
          v50 = "Idle";
        sub_1015A2E04(__p, v50);
        v51 = v3;
        v52 = SHIBYTE(v112);
        v53 = *(_BYTE **)__p;
        sub_1015A2E04(v119, "Enter");
        v54 = __p;
        if (v52 < 0)
          v54 = v53;
        if (v122 >= 0)
          v55 = v119;
        else
          v55 = *(_BYTE **)v119;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v49;
        v115 = 2080;
        v116 = v54;
        v117 = 2080;
        v118 = v55;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%snewState,%s,event,%s", buf, 0x20u);
        if (v122 < 0)
          operator delete(*(void **)v119);
        v3 = v51;
        if (SHIBYTE(v112) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7518);
        v93 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v93 = (_QWORD *)*v93;
        v94 = qword_1022A0078;
        v95 = *(unsigned __int8 *)(a1 + 120);
        if ((_DWORD)v24)
          v96 = "Session";
        else
          v96 = "Idle";
        sub_1015A2E04(v119, v96);
        v97 = v122;
        v98 = *(_BYTE **)v119;
        sub_1015A2E04(v106, "Enter");
        v99 = v119;
        if (v97 < 0)
          v99 = v98;
        if (v107 >= 0)
          v100 = v106;
        else
          v100 = (void **)v106[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v93;
        v110 = 2080;
        v111 = v99;
        v112 = 2080;
        v113 = v100;
        LODWORD(v103) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v94, v95, "%snewState,%s,event,%s", __p, v103, v104);
        v102 = v101;
        if (v107 < 0)
          operator delete(v106[0]);
        if (v122 < 0)
          operator delete(*(void **)v119);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrSupl>::handleEvent(Event) [T = CLNilrSupl]", "%s\n", v102);
        if (v102 != buf)
          free(v102);
      }
      v56 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v105;
      v57 = sub_1000610B4(v14, &v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v58 = v57[5];
      v59 = (uint64_t)v57[6];
      v60 = (_QWORD *)(v56 + (v59 >> 1));
      if ((v59 & 1) != 0)
        v58 = *(uint64_t **)(*v60 + v58);
      v24 = ((uint64_t (*)(_QWORD *, _QWORD))v58)(v60, 0);
      if ((_DWORD)v24 == v105)
        goto LABEL_101;
      sub_1016B151C();
    }
    else
    {
      sub_1016B169C();
    }
LABEL_181:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v24;
}

void sub_1016A68D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016A6934(uint64_t a1, uint64_t a2)
{
  return sub_1016AEB94(a1 + 40, (uint64_t *)(a2 + 40));
}

void sub_1016A6940(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

uint64_t sub_1016A69A4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

id sub_1016A6A04(uint64_t a1)
{
  NSObject *v2;
  int v3;
  id v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,dispatch_requestLocationId", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v6 = *(_DWORD *)(a1 + 2556);
    v10[0] = 67109120;
    v10[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,dispatch_requestLocationId", v10);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestLocationId()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v4 = objc_msgSend(*(id *)a1, "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1016A6BF4;
  v9[3] = &unk_10212ECA0;
  v9[4] = a1;
  return objc_msgSend(v4, "async:", v9);
}

uint64_t sub_1016A6BF4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 2556);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,requestLocationId", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v5 = *(_DWORD *)(v1 + 2556);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,requestLocationId", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestLocationId()_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_1016A5B3C(v1 + 104, 16);
}

uint64_t sub_1016A6DB0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (a2[1] - *a2 < 3uLL)
    return 0;
  if (*(_BYTE *)(*a2 + 2) == 2)
    return 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,SuplMajorVersion is not 2", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v7 = *(_DWORD *)(a1 + 2556);
    v9[0] = 67109120;
    v9[1] = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,SuplMajorVersion is not 2", v9);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSuplVersionSupported(const std::vector<uint8_t> &)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

_QWORD *sub_1016A6F8C(uint64_t a1, char **a2)
{
  uint64_t **v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  _QWORD *result;
  NSObject *v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD v43[2];
  int v44;
  char v45;
  unint64_t v46;
  int v47;
  int64x2_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  int64x2_t v58;
  unint64_t v59;
  _DWORD v60[4];
  _BYTE v61[11];
  char v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint8_t buf[8];

  *(_DWORD *)v61 = *(unsigned __int16 *)(a1 + 2552);
  *(_QWORD *)buf = v61;
  v4 = sub_1016AF6AC((uint64_t **)(a1 + 2528), (unsigned int *)v61, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5;
  if (v4 != (uint64_t **)a2)
    sub_100A38C94(v4, *a2, a2[1], a2[1] - *a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,process_RawSuplInit", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v22 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)v61 = 67109120;
    *(_DWORD *)&v61[4] = v22;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,process_RawSuplInit", v61);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  if (!*(_BYTE *)(a1 + 273)
    && *(_BYTE *)(a1 + 272)
    && *(_BYTE *)(a1 + 313)
    && (*(_BYTE *)(a1 + 318) || *(_BYTE *)(a1 + 314))
    && sub_1016A6DB0(a1, a2))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,In emergency mode or SUPL allowed in non emergency , process_RawSuplInit", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v28 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)v61 = 67109120;
      *(_DWORD *)&v61[4] = v28;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,In emergency mode or SUPL allowed in non emergency , process_RawSuplInit", v61);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    v63[0] = off_1021C76E8;
    v63[1] = a1;
    v64 = v63;
    v20 = *(_QWORD *)(a1 + 32);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 48))(v20, v63);
    result = v64;
    if (v64 == v63)
    {
      v21 = 4;
      result = v63;
    }
    else
    {
      if (!v64)
      {
LABEL_39:
        ++*(_WORD *)(a1 + 2552);
        return result;
      }
      v21 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
    goto LABEL_39;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,received SUPL init while not in emergency or not allowed in non-emergnecy. Dropping", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v24 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)v61 = 67109120;
    *(_DWORD *)&v61[4] = v24;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,received SUPL init while not in emergency or not allowed in non-emergnecy. Dropping", v61);
    sub_100512490("Generic", 1, 0, 0, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v25);
    if (v25 != (char *)buf)
      free(v25);
  }
  v43[0] = 0;
  *(_QWORD *)((char *)v43 + 5) = 0;
  v54 = 0;
  v55 = 0;
  *(_QWORD *)&v61[3] = 0;
  v62 = 0;
  v30 = 0x1700000000;
  __asm { FMOV            V0.2D, #-1.0 }
  v31 = _Q0;
  v32 = _Q0;
  v33 = -1;
  v34 = 1;
  v35 = 0;
  v36 = 0;
  v37 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v38 = xmmword_101BBE630;
  v39 = _Q0;
  v40 = 0xBFF0000000000000;
  v41 = 0;
  v42 = 2;
  v44 = 0;
  v45 = 0;
  v46 = 0xFFFFFFFF00000000;
  v47 = -1;
  v48 = v37;
  v49 = 0xBFF0000000000000;
  v50 = 0xFFFFFFFF00000000;
  v51 = 0;
  v52 = 255;
  v53 = 1;
  v56 = *(unsigned int *)v61;
  v57 = 0;
  v58 = v37;
  v59 = 0xBFF0000000000000;
  result = (_QWORD *)sub_1016A7758(a1, &v30);
  if (!*(_BYTE *)(a1 + 318))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v15 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,Received SUPL INIT outside emergency", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v26 = *(_DWORD *)(a1 + 2556);
      v60[0] = 67109120;
      v60[1] = v26;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,Received SUPL INIT outside emergency", v60);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)", "%s\n", v27);
      if (v27 != (char *)buf)
        free(v27);
    }
    buf[0] = 1;
    v17 = *(_QWORD *)(a1 + 2760);
    if (!v17)
      sub_10025FD1C();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v17 + 48))(v17, buf);
  }
  return result;
}

void sub_1016A7714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  char *v53;
  uint64_t v54;

  v53 = a52;
  if (a52 == &a49)
  {
    v54 = 4;
    v53 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016A7758(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  void **v5;
  uint64_t result;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1016E07FC(a2[1], __p);
    v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,Supl Reject\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    *a2 = 3;
    a2[12] = 1;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)result + 48))(result, a2);
  }
  return result;
}

_QWORD *sub_1016A78A0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[3];
  _QWORD *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,issueEcidRequest", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v7 = *(_DWORD *)(a1 + 2556);
    v12[0] = 67109120;
    v12[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,issueEcidRequest", v12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::issueEcidRequest()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v10[0] = off_1021C7778;
  v10[1] = a1;
  v11 = v10;
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v10);
  result = v11;
  if (v11 == v10)
  {
    v6 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1016A7AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1016A7AF8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,reportCellMeasurements", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v4 = *(_DWORD *)(a1 + 2556);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,reportCellMeasurements", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::reportCellMeasurements()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1016A7CC8(a1, a1 + 2440, (uint64_t *)(a1 + 2472));
  *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a1 + 2440);
}

void sub_1016A7CC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v5;
  int v6;
  char *i;
  NSObject *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  int *v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  void *v33;
  int *v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  void *v42;
  NSObject *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  BOOL *v59;
  char *v60;
  char *v61;
  BOOL *v62;
  const char *v63;
  BOOL *v64;
  char *v65;
  char *v66;
  BOOL *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  NSObject *v74;
  const char *v75;
  uint32_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  BOOL *v80;
  char *v81;
  char *v82;
  BOOL *v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  const char *v92;
  uint8_t *v93;
  int v94;
  const char *v95;
  uint8_t *v96;
  int v97;
  int v98;
  int v99;
  const char *v100;
  uint8_t *v101;
  int v102;
  const char *v103;
  uint8_t *v104;
  int v105;
  int v107;
  void *v108[2];
  void *v109[2];
  __int128 v110;
  void *__p[2];
  char *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  int v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  uint8_t buf[4];
  int v124;
  __int16 v125;
  _BYTE v126[10];
  const char *v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;

  v107 = 0;
  *(_OWORD *)v108 = 0u;
  *(_OWORD *)v109 = 0u;
  v110 = 0u;
  *(_OWORD *)__p = 0u;
  v112 = 0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v124 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,sendCellMeasurements", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v91 = *(_DWORD *)(a1 + 2556);
    v117 = 67109120;
    v118 = v91;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,sendCellMeasurements", &v117);
    v93 = (uint8_t *)v92;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v92);
    if (v93 != buf)
      free(v93);
  }
  for (i = *(char **)a2; ; i += 28)
  {
    if (i == *(char **)(a2 + 8))
      goto LABEL_28;
    if (*i)
      break;
  }
  if (*((unsigned __int16 *)i + 1) > 0x3E7u || *((unsigned __int16 *)i + 2) >= 0x3E8u)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v13 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_DWORD *)(a1 + 2556);
      v15 = *((unsigned __int16 *)i + 1);
      v16 = *((unsigned __int16 *)i + 2);
      *(_DWORD *)buf = 67109632;
      v124 = v14;
      v125 = 1024;
      *(_DWORD *)v126 = v15;
      *(_WORD *)&v126[4] = 1024;
      *(_DWORD *)&v126[6] = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#ins%d,nilr,#supl,serving cell with invalid mcc %d, mnc %d. handover?", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v97 = *(_DWORD *)(a1 + 2556);
      v98 = *((unsigned __int16 *)i + 1);
      v99 = *((unsigned __int16 *)i + 2);
      v117 = 67109632;
      v118 = v97;
      v119 = 1024;
      v120 = v98;
      v121 = 1024;
      v122 = v99;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,nilr,#supl,serving cell with invalid mcc %d, mnc %d. handover?", &v117, 20, v105);
      v101 = (uint8_t *)v100;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v100);
      if (v101 != buf)
        free(v101);
    }
LABEL_28:
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)buf = 67109120;
      v124 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,usingEcidMeasurements,0", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v94 = *(_DWORD *)(a1 + 2556);
      v117 = 67109120;
      v118 = v94;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,usingEcidMeasurements,0", &v117);
      v96 = (uint8_t *)v95;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v95);
      if (v96 != buf)
        free(v96);
    }
    v19 = *a3;
    v20 = a3[1];
    if (*a3 == v20)
      goto LABEL_112;
    while (1)
    {
      if (!*(_BYTE *)v19)
        goto LABEL_98;
      v107 = 0;
      v108[1] = v108[0];
      *(void **)&v110 = v109[1];
      __p[1] = __p[0];
      v21 = *(_DWORD *)(v19 + 8);
      if (v21 >= 3)
      {
        if (v21 == 6)
        {
          v34 = (int *)sub_1001E3CA4(v19);
          v35 = *(_DWORD *)(v19 + 4) == 0;
          v36 = *v34;
          v37 = v34[1];
          v39 = v34[2];
          v38 = v34[3];
          v40 = v34[5];
          v107 = 5;
          v41 = (char *)v108[1];
          if (v108[1] >= v109[0])
          {
            v55 = 0x6DB6DB6DB6DB6DB7 * (((char *)v108[1] - (char *)v108[0]) >> 2);
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) > 0x924924924924924)
              sub_100259694();
            if (0xDB6DB6DB6DB6DB6ELL * (((char *)v109[0] - (char *)v108[0]) >> 2) > v56)
              v56 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v109[0] - (char *)v108[0]) >> 2);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v109[0] - (char *)v108[0]) >> 2)) >= 0x492492492492492)
              v57 = 0x924924924924924;
            else
              v57 = v56;
            if (v57)
              v58 = (char *)sub_100AAF154((uint64_t)v109, v57);
            else
              v58 = 0;
            v80 = (BOOL *)&v58[28 * v55];
            *v80 = v35;
            *((_WORD *)v80 + 1) = v36;
            *((_WORD *)v80 + 2) = v37;
            *((_DWORD *)v80 + 2) = v39;
            *((_DWORD *)v80 + 3) = v38;
            *((_WORD *)v80 + 8) = v40;
            *((_WORD *)v80 + 9) = 25443;
            *(_QWORD *)(v80 + 20) = 0xFFFFFFFF7FFFFFFFLL;
            v82 = (char *)v108[0];
            v81 = (char *)v108[1];
            v83 = v80;
            if (v108[1] != v108[0])
            {
              do
              {
                v84 = *(_OWORD *)(v81 - 28);
                *((_OWORD *)v83 - 1) = *((_OWORD *)v81 - 1);
                *(_OWORD *)(v83 - 28) = v84;
                v83 -= 28;
                v81 -= 28;
              }
              while (v81 != v82);
              v81 = (char *)v108[0];
            }
            v42 = v80 + 28;
            v108[0] = v83;
            v108[1] = v80 + 28;
            v109[0] = &v58[28 * v57];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_BYTE *)v108[1] = v35;
            *((_WORD *)v41 + 1) = v36;
            *((_WORD *)v41 + 2) = v37;
            *((_DWORD *)v41 + 2) = v39;
            *((_DWORD *)v41 + 3) = v38;
            *((_WORD *)v41 + 8) = v40;
            *((_WORD *)v41 + 9) = 25443;
            v42 = v41 + 28;
            *(_QWORD *)(v41 + 20) = 0xFFFFFFFF7FFFFFFFLL;
          }
          v108[1] = v42;
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v85 = qword_1022A0088;
          if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
            goto LABEL_92;
          v86 = *v34;
          v87 = v34[1];
          v88 = v34[5];
          v90 = v34[2];
          v89 = v34[3];
          *(_DWORD *)buf = 68290562;
          v124 = 0;
          v125 = 2082;
          *(_QWORD *)v126 = "";
          *(_WORD *)&v126[8] = 2082;
          v127 = "lte";
          v128 = 1026;
          v129 = v86;
          v130 = 1026;
          v131 = v87;
          v132 = 1026;
          v133 = v89;
          v134 = 1026;
          v135 = v88;
          v136 = 1026;
          v137 = v90;
          v74 = v85;
          v75 = "{\"msg%{public}.0s\":\"#nilr,#supl,locationId\", \"cellType\":%{public, location:escape_only}s, \"mcc\":"
                "%{public}d, \"mnc\":%{public}d, \"ci\":%{public}d, \"physCellId\":%{public}d, \"tac\":%{public}d}";
          v76 = 58;
          goto LABEL_91;
        }
        if (v21 != 7)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v43 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v44 = *(_DWORD *)(v19 + 8);
            *(_DWORD *)buf = 68289282;
            v124 = 0;
            v125 = 2082;
            *(_QWORD *)v126 = "";
            *(_WORD *)&v126[8] = 1026;
            LODWORD(v127) = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,locationId RAT not supported\", \"cell\":%{public}d}", buf, 0x18u);
          }
          goto LABEL_98;
        }
      }
      v22 = (int *)sub_1007057DC(v19);
      v23 = v22;
      v24 = *(_DWORD *)(v19 + 4) == 0;
      v25 = *v22;
      v26 = v22[1];
      v28 = v22[2];
      v27 = v22[3];
      if (*(_DWORD *)(v19 + 8) > 1u)
      {
        v31 = v22[5];
        v107 = 2;
        v32 = (char *)__p[1];
        if (__p[1] >= v112)
        {
          v50 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 59)
            sub_100259694();
          v52 = v112 - (char *)__p[0];
          if ((v112 - (char *)__p[0]) >> 4 > v51)
            v51 = v52 >> 4;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
            v53 = 0x7FFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
            v54 = (char *)sub_10025BA00((uint64_t)&v112, v53);
          else
            v54 = 0;
          v64 = (BOOL *)&v54[32 * v50];
          *v64 = v24;
          *((_WORD *)v64 + 1) = v25;
          *((_WORD *)v64 + 2) = v26;
          *((_DWORD *)v64 + 2) = v28;
          *((_DWORD *)v64 + 3) = v27;
          *((_WORD *)v64 + 8) = v31;
          *(_QWORD *)(v64 + 20) = 0x7FFFFFFFLL;
          *((_DWORD *)v64 + 7) = -1;
          v66 = (char *)__p[0];
          v65 = (char *)__p[1];
          v67 = v64;
          if (__p[1] != __p[0])
          {
            do
            {
              v68 = *((_OWORD *)v65 - 1);
              *((_OWORD *)v67 - 2) = *((_OWORD *)v65 - 2);
              *((_OWORD *)v67 - 1) = v68;
              v67 -= 32;
              v65 -= 32;
            }
            while (v65 != v66);
            v65 = (char *)__p[0];
          }
          v33 = v64 + 32;
          __p[0] = v67;
          __p[1] = v64 + 32;
          v112 = &v54[32 * v53];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_BYTE *)__p[1] = v24;
          *((_WORD *)v32 + 1) = v25;
          *((_WORD *)v32 + 2) = v26;
          *((_DWORD *)v32 + 2) = v28;
          *((_DWORD *)v32 + 3) = v27;
          *((_WORD *)v32 + 8) = v31;
          *(_QWORD *)(v32 + 20) = 0x7FFFFFFFLL;
          v33 = v32 + 32;
          *((_DWORD *)v32 + 7) = -1;
        }
        __p[1] = v33;
        v63 = "wcdma";
      }
      else
      {
        v107 = 1;
        v29 = v110;
        if ((unint64_t)v110 >= *((_QWORD *)&v110 + 1))
        {
          v45 = (uint64_t)(v110 - (unint64_t)v109[1]) >> 4;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60)
            sub_100259694();
          v47 = *((_QWORD *)&v110 + 1) - (unint64_t)v109[1];
          if ((uint64_t)(*((_QWORD *)&v110 + 1) - (unint64_t)v109[1]) >> 3 > v46)
            v46 = v47 >> 3;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
            v49 = (char *)sub_10028E224((uint64_t)&v110 + 8, v48);
          else
            v49 = 0;
          v59 = (BOOL *)&v49[16 * v45];
          *v59 = v24;
          *((_WORD *)v59 + 1) = v25;
          *((_WORD *)v59 + 2) = v26;
          *((_DWORD *)v59 + 2) = v28;
          *((_DWORD *)v59 + 3) = v27;
          v61 = (char *)v109[1];
          v60 = (char *)v110;
          v62 = v59;
          if ((void *)v110 != v109[1])
          {
            do
            {
              *((_OWORD *)v62 - 1) = *((_OWORD *)v60 - 1);
              v62 -= 16;
              v60 -= 16;
            }
            while (v60 != v61);
            v60 = (char *)v109[1];
          }
          v30 = (char *)(v59 + 16);
          v109[1] = v62;
          *(_QWORD *)&v110 = v59 + 16;
          *((_QWORD *)&v110 + 1) = &v49[16 * v48];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_BYTE *)v110 = v24;
          *(_WORD *)(v29 + 2) = v25;
          *(_WORD *)(v29 + 4) = v26;
          v30 = (char *)(v29 + 16);
          *(_DWORD *)(v29 + 8) = v28;
          *(_DWORD *)(v29 + 12) = v27;
        }
        *(_QWORD *)&v110 = v30;
        v63 = "gsm";
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v69 = qword_1022A0088;
      if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        goto LABEL_92;
      v70 = *v23;
      v71 = v23[1];
      v73 = v23[2];
      v72 = v23[3];
      *(_DWORD *)buf = 68290306;
      v124 = 0;
      v125 = 2082;
      *(_QWORD *)v126 = "";
      *(_WORD *)&v126[8] = 2082;
      v127 = v63;
      v128 = 1026;
      v129 = v70;
      v130 = 1026;
      v131 = v71;
      v132 = 1026;
      v133 = v72;
      v134 = 1026;
      v135 = v73;
      v74 = v69;
      v75 = "{\"msg%{public}.0s\":\"#nilr,#supl,locationId\", \"cellType\":%{public, location:escape_only}s, \"mcc\":%{pu"
            "blic}d, \"mnc\":%{public}d, \"ci\":%{public}d, \"lac\":%{public}d}";
      v76 = 52;
LABEL_91:
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, v75, buf, v76);
LABEL_92:
      v113[0] = off_1021C7A98;
      v113[1] = &v107;
      v114 = v113;
      v77 = *(_QWORD *)(a1 + 32);
      if (!v77)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 48))(v77, v113);
      v78 = v114;
      if (v114 == v113)
      {
        v78 = v113;
        v79 = 4;
        goto LABEL_97;
      }
      if (v114)
      {
        v79 = 5;
LABEL_97:
        (*(void (**)(void))(*v78 + 8 * v79))();
      }
LABEL_98:
      v19 += 696;
      if (v19 == v20)
        goto LABEL_112;
    }
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v124 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,usingEcidMeasurements,1", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v102 = *(_DWORD *)(a1 + 2556);
    v117 = 67109120;
    v118 = v102;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,usingEcidMeasurements,1", &v117);
    v104 = (uint8_t *)v103;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::sendCellMeasurements(const std::vector<gnss::Emergency::Supl::LteCellInfo> &, const std::vector<CLCell> &)", "%s\n", v103);
    if (v104 != buf)
      free(v104);
  }
  v107 = 5;
  if (v108 != (void **)a2)
    sub_100AAEFA8((char *)v108, *(char **)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  v115[0] = off_1021C7A18;
  v115[1] = &v107;
  v116 = v115;
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v115);
  v11 = v116;
  if (v116 == v115)
  {
    v12 = 4;
    v11 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_112;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_112:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v109[1])
  {
    *(void **)&v110 = v109[1];
    operator delete(v109[1]);
  }
  if (v108[0])
  {
    v108[1] = v108[0];
    operator delete(v108[0]);
  }
}

void sub_1016A8B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1016ADBC4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016A8BBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v23;

  sub_1016A8E4C(a1);
  sub_1016A9088(a1 + 2128);

  *(_QWORD *)(a1 + 2400) = 0;
  v2 = *(_QWORD **)(a1 + 2760);
  if (v2 == (_QWORD *)(a1 + 2736))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 2736);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 2728);
  if (v4 == (_QWORD *)(a1 + 2704))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 2704);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(void **)(a1 + 2624);
  if (v6)
  {
    *(_QWORD *)(a1 + 2632) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 2583) < 0)
    operator delete(*(void **)(a1 + 2560));
  sub_10010D350(a1 + 2528, *(_QWORD **)(a1 + 2536));
  v7 = *(_QWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 2520) = 0;
  if (v7)
    sub_1016AF088(a1 + 2520, v7);
  v8 = *(void **)(a1 + 2496);
  if (v8)
  {
    *(_QWORD *)(a1 + 2504) = v8;
    operator delete(v8);
  }
  v23 = (void **)(a1 + 2472);
  sub_10087B4F8(&v23);
  v9 = *(void **)(a1 + 2440);
  if (v9)
  {
    *(_QWORD *)(a1 + 2448) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 2432);
  if (v10 == (_QWORD *)(a1 + 2408))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 2408);
  }
  else
  {
    if (!v10)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  sub_100857FD0(a1 + 528);
  sub_1016AEB4C(a1 + 456);
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  sub_1016AEFCC((_QWORD **)(a1 + 304), 0);
  v12 = *(void **)(a1 + 280);
  if (v12)
  {
    *(_QWORD *)(a1 + 288) = v12;
    operator delete(v12);
  }
  v13 = *(_QWORD **)(a1 + 264);
  if (v13 == (_QWORD *)(a1 + 240))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 240);
  }
  else
  {
    if (!v13)
      goto LABEL_41;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_41:
  v15 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  sub_1016AEF64(a1 + 104);
  v16 = *(_QWORD **)(a1 + 96);
  if (v16 == (_QWORD *)(a1 + 72))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v16)
      goto LABEL_48;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_48:
  v18 = *(_QWORD **)(a1 + 64);
  if (v18 == (_QWORD *)(a1 + 40))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v18)
      goto LABEL_53;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_53:
  v20 = *(_QWORD **)(a1 + 32);
  if (v20 == (_QWORD *)(a1 + 8))
  {
    v21 = 4;
    v20 = (_QWORD *)(a1 + 8);
    goto LABEL_57;
  }
  if (v20)
  {
    v21 = 5;
LABEL_57:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return a1;
}

__n128 sub_1016A8E4C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  void *v5;
  __n128 result;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,resetStateData", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v11 = *(_DWORD *)(a1 + 2556);
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,resetStateData", v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::resetStateData()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_1016B0984(*(_QWORD **)(a1 + 160), (_QWORD *)(a1 + 168), a1 + 104);
  v4 = *(_QWORD *)(a1 + 232);
  if (*(int *)(v4 + 8) >= 1)
    sub_100E3E6F0(v4);
  sub_1016A9088(a1 + 1856);
  *(_QWORD *)(a1 + 2600) = 0;
  *(_WORD *)(a1 + 2608) = -1;
  *(_BYTE *)(a1 + 2610) = 0;
  *(_DWORD *)(a1 + 2616) = 0;
  v5 = *(void **)(a1 + 2624);
  if (v5)
  {
    *(_QWORD *)(a1 + 2632) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 2656) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2640) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 2672) = result;
  *(_WORD *)(a1 + 2694) = 0;
  *(_DWORD *)(a1 + 2664) = 0;
  *(_DWORD *)(a1 + 2688) = 0;
  *(_BYTE *)(a1 + 2692) = 0;
  *(_DWORD *)(a1 + 2696) = 1;
  *(_DWORD *)(a1 + 2584) = 0;
  return result;
}

double sub_1016A9088(uint64_t a1)
{
  int64x2_t v6;
  double result;

  *(_QWORD *)a1 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q1;
  *(_OWORD *)(a1 + 24) = _Q1;
  *(_QWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  v6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = xmmword_101BBE630;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 2;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 168) = -1;
  *(int64x2_t *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 192) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 200) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 208) = 0xFF00000000;
  *(_DWORD *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 229) = 0;
  *(_DWORD *)(a1 + 237) = 0;
  *(_DWORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  *(int64x2_t *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  return result;
}

_QWORD *sub_1016A919C@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, (&off_1021C7B88)[a1]);
}

void sub_1016A91B0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,readCarrierSettings", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v4 = *(_DWORD *)(a1 + 2556);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,readCarrierSettings", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::readCarrierSettings()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_1016A9368(a1);
}

void sub_1016A9368(uint64_t a1)
{
  int v2;
  const std::string *v3;
  _QWORD *v4;
  char v5;
  char v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void *__p[2];
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  v2 = *(unsigned __int8 *)(a1 + 313);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a1 + 535);
  *(_BYTE *)(a1 + 368) = *(_DWORD *)(a1 + 592) != 0;
  *(_WORD *)(a1 + 369) = *(_WORD *)(a1 + 532);
  v3 = (const std::string *)(a1 + 456);
  sub_1016AC9C4((std::string *)(a1 + 456), (std::string *)(a1 + 1464));
  v4 = (_QWORD *)(a1 + 328);
  std::string::operator=((std::string *)(a1 + 328), v3);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a1 + 504);
  v5 = *(_BYTE *)(a1 + 512);
  *(_BYTE *)(a1 + 316) = (v5 & 4) != 0;
  *(_BYTE *)(a1 + 317) = (v5 & 8) != 0;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 508);
  *(_BYTE *)(a1 + 2648) = *(_DWORD *)(a1 + 616) != 0;
  *(_BYTE *)(a1 + 2649) = *(_DWORD *)(a1 + 624) != 0;
  *(_BYTE *)(a1 + 2650) = *(_DWORD *)(a1 + 628) != 0;
  if (*(char *)(a1 + 503) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 480), *(_QWORD *)(a1 + 488));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 480);
    v16 = *(_QWORD *)(a1 + 496);
  }
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  sub_100517458((int)buf, (unint64_t *)(a1 + 280), (unsigned __int8 *)__p);
  v6 = *(_BYTE *)(a1 + 512);
  *(_BYTE *)(a1 + 314) = v6 & 1;
  *(_BYTE *)(a1 + 315) = (v6 & 2) != 0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(unsigned __int8 *)(a1 + 313);
    if (*(char *)(a1 + 351) < 0)
      v4 = (_QWORD *)*v4;
    v9 = *(unsigned __int16 *)(a1 + 352);
    v10 = *(unsigned __int8 *)(a1 + 314);
    v11 = *(unsigned __int8 *)(a1 + 315);
    v12 = *(unsigned __int8 *)(a1 + 2648);
    v13 = *(unsigned __int8 *)(a1 + 2649);
    v14 = *(unsigned __int8 *)(a1 + 2650);
    *(_DWORD *)buf = 68291330;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    v22 = v2;
    v23 = 1026;
    v24 = v8;
    v25 = 2082;
    v26 = v4;
    v27 = 1026;
    v28 = v9;
    v29 = 1026;
    v30 = v10;
    v31 = 1026;
    v32 = v11;
    v33 = 1026;
    v34 = v12;
    v35 = 1026;
    v36 = v13;
    v37 = 1026;
    v38 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,carrier settings update\", \"prevSuplState\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd, \"fHslpAddress\":%{public, location:escape_only}s, \"fHslpPort\":%{public}d, \"fAllowNonEmergencySupl\":%{public}hhd, \"fAllowSuplWithoutEmergencyNotification\":%{public}hhd, \"fEnableLppRel13WlanMeas\":%{public}hhd, \"fSupportsLppRel13WlanMeasTypeRssi\":%{public}hhd, \"fEnableLocationSourceReporting\":%{public}hhd}", buf, 0x4Cu);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_1016A95C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1016A95E4(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  std::string *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  NSObject *v34;
  NSObject *v35;
  long double v36;
  long double v37;
  unsigned int v38;
  NSObject *v39;
  int v40;
  NSObject *v43;
  int v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  int v50;
  char v52;
  NSObject *v53;
  int v54;
  int v55;
  const char *v56;
  uint8_t *v57;
  NSObject *v58;
  int v59;
  NSObject *v61;
  int v62;
  NSObject *v64;
  int v65;
  NSObject *v66;
  int v67;
  int v69;
  const char *v70;
  uint8_t *v71;
  int v72;
  const char *v73;
  uint8_t *v74;
  int v75;
  const char *v76;
  uint8_t *v77;
  int v78;
  const char *v79;
  uint8_t *v80;
  int v81;
  const char *v82;
  uint8_t *v83;
  int v84;
  const char *v85;
  uint8_t *v86;
  int v87;
  const char *v88;
  uint8_t *v89;
  _QWORD v90[3];
  __int128 v91;
  uint64_t v92;
  int v93;
  long double v94;
  char v95;
  _BYTE v96[7];
  int64x2_t v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  char v107;
  __int16 v108;
  char v109;
  unint64_t v110;
  int v111;
  int64x2_t v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  __int16 v116;
  int v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  int v121;
  _BYTE v122[7];
  int64x2_t v123;
  unint64_t v124;
  void *v125[2];
  char v126;
  _QWORD v127[3];
  __int128 v128;
  uint64_t v129;
  int v130;
  long double v131;
  char v132;
  _BYTE v133[7];
  int64x2_t v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  char v144;
  __int16 v145;
  char v146;
  unint64_t v147;
  int v148;
  int64x2_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  int v158;
  _BYTE v159[7];
  int64x2_t v160;
  unint64_t v161;
  _QWORD v162[3];
  __int128 v163;
  uint64_t v164;
  int v165;
  long double v166;
  char v167;
  _BYTE v168[7];
  int64x2_t v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  char v179;
  __int16 v180;
  char v181;
  unint64_t v182;
  int v183;
  int64x2_t v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  __int16 v188;
  int v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  int v193;
  _BYTE v194[7];
  int64x2_t v195;
  unint64_t v196;
  void *__p[2];
  char v198;
  _QWORD v199[3];
  __int128 v200;
  uint64_t v201;
  int v202;
  long double v203;
  char v204;
  _BYTE v205[7];
  int64x2_t v206;
  __int128 v207;
  __int128 v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  char v216;
  __int16 v217;
  char v218;
  unint64_t v219;
  int v220;
  int64x2_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  __int16 v225;
  int v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  int v230;
  _BYTE v231[7];
  int64x2_t v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  __int128 v236;
  uint64_t v237;
  int v238;
  long double v239;
  char v240;
  _BYTE v241[7];
  int64x2_t v242;
  __int128 v243;
  __int128 v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  char v252;
  __int16 v253;
  char v254;
  unint64_t v255;
  int v256;
  int64x2_t v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  __int16 v261;
  int v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  int v266;
  _BYTE v267[7];
  int64x2_t v268;
  unint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  char v276;
  _BYTE v277[7];
  int64x2_t v278;
  __int128 v279;
  __int128 v280;
  unint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  _BYTE v285[13];
  __int16 v286;
  char v287;
  unint64_t v288;
  int v289;
  int64x2_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  __int16 v294;
  int v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  int v299;
  _BYTE v300[7];
  int64x2_t v301;
  unint64_t v302;
  _BYTE v303[7];
  __int16 v304;
  char v305;
  _BYTE v306[7];
  int v307;
  int v308;
  uint8_t buf[4];
  int v310;
  __int16 v311;
  const char *v312;
  __int16 v313;
  _BYTE v314[10];
  __int16 v315;
  int v316;
  __int16 v317;
  int v318;
  __int16 v319;
  int v320;
  __int16 v321;
  int v322;
  __int16 v323;
  int v324;
  std::string __str;
  _BYTE v326[12];
  uint64_t v327;
  char v328;

  v327 = 0;
  v328 = 0;
  *(_QWORD *)&v326[3] = 0;
  v326[11] = 0;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100517448((int)&v234, a1 + 2496, &__str);
    v7 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__str
       : (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289282;
    v310 = 0;
    v311 = 2082;
    v312 = "";
    v313 = 2082;
    *(_QWORD *)v314 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"suplInit\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(unsigned __int8 *)(a1 + 272);
    v10 = *(unsigned __int8 *)(a1 + 318);
    v11 = *(unsigned __int8 *)(a1 + 313);
    v12 = *(unsigned __int8 *)(a1 + 314);
    v13 = *(unsigned __int8 *)(a1 + 315);
    v14 = *(unsigned __int8 *)(a1 + 316);
    v15 = *(unsigned __int8 *)(a1 + 317);
    *(_DWORD *)buf = 68290818;
    v310 = 0;
    v311 = 2082;
    v312 = "";
    v313 = 1026;
    *(_DWORD *)v314 = v9;
    *(_WORD *)&v314[4] = 1026;
    *(_DWORD *)&v314[6] = v10;
    v315 = 1026;
    v316 = v11;
    v317 = 1026;
    v318 = v12;
    v319 = 1026;
    v320 = v13;
    v321 = 1026;
    v322 = v14;
    v323 = 1026;
    v324 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fSuplEnable\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd, \"fAllowSuplWithoutEmergencyNotification\":%{public}hhd, \"fAllowHslpMismatch\":%{public}hhd, \"fAllowHslpWildcard\":%{public}hhd}", buf, 0x3Cu);
  }
  if (!*(_BYTE *)(a1 + 272) || !*(_BYTE *)(a1 + 313) || !*(_BYTE *)(a1 + 318) && !*(_BYTE *)(a1 + 314))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v25 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(unsigned __int8 *)(a1 + 272);
      if (*(_BYTE *)(a1 + 272))
        v26 = *(unsigned __int8 *)(a1 + 313);
      v27 = *(unsigned __int8 *)(a1 + 318);
      v28 = *(unsigned __int8 *)(a1 + 314);
      *(_DWORD *)buf = 68289794;
      v310 = 0;
      v311 = 2082;
      v312 = "";
      v313 = 1026;
      *(_DWORD *)v314 = v26;
      *(_WORD *)&v314[4] = 1026;
      *(_DWORD *)&v314[6] = v27;
      v315 = 1026;
      v316 = v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,fail\", \"isSuplAllowed\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd}", buf, 0x24u);
    }
    __asm { FMOV            V1.2D, #-1.0 }
    v271 = _Q1;
    v272 = _Q1;
    v270 = 0x1700000000;
    v273 = -1;
    v274 = 1;
    v275 = 0;
    v276 = 0;
    *(_DWORD *)v277 = *(_DWORD *)v306;
    *(_DWORD *)&v277[3] = *(_DWORD *)&v306[3];
    v278 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v279 = xmmword_101BBE630;
    v280 = _Q1;
    v281 = 0xBFF0000000000000;
    v282 = 0;
    v283 = 2;
    memset(v285, 0, sizeof(v285));
    v284 = 0;
    v286 = v304;
    v287 = v305;
    v288 = 0xFFFFFFFF00000000;
    v289 = -1;
    v290 = v278;
    v291 = 0xBFF0000000000000;
    v292 = 0xFFFFFFFF00000000;
    v293 = 0;
    v294 = 255;
    v295 = 1;
    v296 = v327;
    v297 = v328;
    v299 = *(_DWORD *)&v326[8];
    v298 = *(_QWORD *)v326;
    *(_DWORD *)&v300[3] = *(_DWORD *)&v303[3];
    *(_DWORD *)v300 = *(_DWORD *)v303;
    v301 = v278;
    v302 = 0xBFF0000000000000;
    sub_1016A7758(a1, &v270);
    return 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v16 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(unsigned __int8 *)(a1 + 272);
    if (*(_BYTE *)(a1 + 272))
      v17 = *(_BYTE *)(a1 + 313) != 0;
    v18 = *(unsigned __int8 *)(a1 + 318);
    v19 = *(unsigned __int8 *)(a1 + 314);
    *(_DWORD *)buf = 68289794;
    v310 = 0;
    v311 = 2082;
    v312 = "";
    v313 = 1026;
    *(_DWORD *)v314 = v17;
    *(_WORD *)&v314[4] = 1026;
    *(_DWORD *)&v314[6] = v18;
    v315 = 1026;
    v316 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,pass\", \"isSuplAllowed\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"fAllowNonEmergencySupl\":%{public}hhd}", buf, 0x24u);
  }
  v20 = a2[34];
  if (v20 == 2)
    v21 = 3;
  else
    v21 = 1;
  if (v20 == 1)
    v22 = 2;
  else
    v22 = v21;
  v23 = *a2;
  if (*a2 >= 0xF)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v34 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v310 = 0;
      v311 = 2082;
      v312 = "";
      v313 = 1026;
      *(_DWORD *)v314 = v23;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#awd,#nilr,#supl,\", \"unsupported positioning method\":%{public}d}", buf, 0x18u);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    }
    v35 = qword_1022A0088;
    if (os_signpost_enabled((os_log_t)qword_1022A0088))
    {
      *(_DWORD *)buf = 68289282;
      v310 = 0;
      v311 = 2082;
      v312 = "";
      v313 = 1026;
      *(_DWORD *)v314 = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#awd,#nilr,#supl,", "{\"msg%{public}.0s\":\"#awd,#nilr,#supl,\", \"unsupported positioning method\":%{public}d}", buf, 0x18u);
    }
    v24 = 0;
  }
  else
  {
    v24 = *(_DWORD *)&asc_101CCDFD8[4 * v23];
  }
  v36 = -1.0;
  if (*((_BYTE *)a2 + 4))
  {
    v37 = sub_1016E138C(*((unsigned __int8 *)a2 + 5));
    v38 = *((unsigned __int8 *)a2 + 10);
    if (v38 <= 7)
      v36 = ldexp(1.0, v38);
  }
  else
  {
    v37 = 0.0;
  }
  if (a2[34])
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v39 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v40 = a2[34];
      *(_DWORD *)buf = 68289282;
      v310 = 0;
      v311 = 2082;
      v312 = "";
      v313 = 1026;
      *(_DWORD *)v314 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,fail\", \"triggerType\":%{public}d}", buf, 0x18u);
    }
    v235[0] = 0x400000000;
    v235[1] = 0xBFF0000000000000;
    __asm { FMOV            V0.2D, #-1.0 }
    v236 = _Q0;
    *(long double *)&v235[2] = v36;
    v237 = -1;
    v238 = 1;
    v239 = v37;
    v240 = 0;
    *(_DWORD *)v241 = *(_DWORD *)v306;
    *(_DWORD *)&v241[3] = *(_DWORD *)&v306[3];
    v242 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v243 = xmmword_101BBE630;
    v244 = _Q0;
    v245 = 0xBFF0000000000000;
    v246 = 0;
    v247 = 2;
    v248 = v24;
    v250 = 0;
    v249 = v22;
    v251 = 0;
    v252 = 0;
    v253 = v304;
    v254 = v305;
    v255 = 0xFFFFFFFF00000000;
    v256 = -1;
    v257 = v242;
    v258 = 0xBFF0000000000000;
    v259 = 0xFFFFFFFF00000000;
    v260 = 0;
    v261 = 255;
    v262 = 1;
    v263 = v327;
    v264 = v328;
    v266 = *(_DWORD *)&v326[8];
    v265 = *(_QWORD *)v326;
    *(_DWORD *)&v267[3] = *(_DWORD *)&v303[3];
    *(_DWORD *)v267 = *(_DWORD *)v303;
    v268 = v242;
    v269 = 0xBFF0000000000000;
    sub_1016A7758(a1, v235);
    return 0;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v43 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v44 = a2[34];
    *(_DWORD *)buf = 68289282;
    v310 = 0;
    v311 = 2082;
    v312 = "";
    v313 = 1026;
    *(_DWORD *)v314 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,pass\", \"triggerType\":%{public}d}", buf, 0x18u);
  }
  v234 = a1;
  if (*((_BYTE *)a2 + 72) && *((_BYTE *)a2 + 73))
  {
    if (*((_BYTE *)a2 + 80))
    {
      if (a2[21] != 3)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v49 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          v50 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          v310 = v50;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,fail", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v75 = *(_DWORD *)(a1 + 2556);
          LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str.__r_.__value_.__r.__words[0]) = v75;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,fail", &__str);
          v77 = (uint8_t *)v76;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v76);
          if (v77 != buf)
            free(v77);
        }
        v199[0] = 0x1600000000;
        v199[1] = 0xBFF0000000000000;
        __asm { FMOV            V0.2D, #-1.0 }
        v200 = _Q0;
        *(long double *)&v199[2] = v36;
        v201 = -1;
        v202 = 1;
        v203 = v37;
        v204 = 0;
        *(_DWORD *)v205 = *(_DWORD *)v306;
        *(_DWORD *)&v205[3] = *(_DWORD *)&v306[3];
        v206 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v207 = xmmword_101BBE630;
        v208 = _Q0;
        v209 = 0xBFF0000000000000;
        v210 = 0;
        v211 = 2;
        v212 = v24;
        v214 = 0;
        v213 = v22;
        v215 = 0;
        v216 = 0;
        v217 = v304;
        v218 = v305;
        v219 = 0xFFFFFFFF00000000;
        v220 = -1;
        v221 = v206;
        v222 = 0xBFF0000000000000;
        v223 = 0xFFFFFFFF00000000;
        v224 = 0;
        v225 = 255;
        v226 = 1;
        v227 = v327;
        v228 = v328;
        v230 = *(_DWORD *)&v326[8];
        v229 = *(_QWORD *)v326;
        *(_DWORD *)&v231[3] = *(_DWORD *)&v303[3];
        *(_DWORD *)v231 = *(_DWORD *)v303;
        v232 = v206;
        v233 = 0xBFF0000000000000;
        sub_1016A7758(a1, v199);
        return 0;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v45 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,pass", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v72 = *(_DWORD *)(a1 + 2556);
        LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__str.__r_.__value_.__r.__words[0]) = v72;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPAddressValidCheck,pass", &__str);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
    }
    if (*((char *)a2 + 111) < 0)
      sub_100115CE4(&__str, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
    else
      __str = *(std::string *)(a2 + 22);
    sub_1015A2E04(__p, "e-slp");
    v52 = sub_1016AC4EC(&v234, (uint64_t)&__str, (uint64_t)__p);
    if (v198 < 0)
      operator delete(__p[0]);
    if ((v52 & 1) != 0)
    {
      std::string::operator=((std::string *)a3, &__str);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v53 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v54;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,pass", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v55 = *(_DWORD *)(a1 + 2556);
        v307 = 67109120;
        v308 = v55;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,pass", &v307);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v58 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v59 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v59;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,fail", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v69 = *(_DWORD *)(a1 + 2556);
        v307 = 67109120;
        v308 = v69;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,emergencyCallLocationPresent,eSLPIsFQDNCheck,fail", &v307);
        v71 = (uint8_t *)v70;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v70);
        if (v71 != buf)
          free(v71);
      }
      v162[0] = 0x1600000000;
      v162[1] = 0xBFF0000000000000;
      __asm { FMOV            V0.2D, #-1.0 }
      v163 = _Q0;
      *(long double *)&v162[2] = v36;
      v164 = -1;
      v165 = 1;
      v166 = v37;
      v167 = 0;
      *(_DWORD *)v168 = *(_DWORD *)v306;
      *(_DWORD *)&v168[3] = *(_DWORD *)&v306[3];
      v169 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v170 = xmmword_101BBE630;
      v171 = _Q0;
      v172 = 0xBFF0000000000000;
      v173 = 0;
      v174 = 2;
      v175 = v24;
      v177 = 0;
      v176 = v22;
      v178 = 0;
      v179 = 0;
      v180 = v304;
      v181 = v305;
      v182 = 0xFFFFFFFF00000000;
      v183 = -1;
      v184 = v169;
      v185 = 0xBFF0000000000000;
      v186 = 0xFFFFFFFF00000000;
      v187 = 0;
      v188 = 255;
      v189 = 1;
      v190 = v327;
      v191 = v328;
      v193 = *(_DWORD *)&v326[8];
      v192 = *(_QWORD *)v326;
      *(_DWORD *)&v194[3] = *(_DWORD *)&v303[3];
      *(_DWORD *)v194 = *(_DWORD *)v303;
      v195 = v169;
      v196 = 0xBFF0000000000000;
      sub_1016A7758(a1, v162);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 315))
      return 1;
    if (*((_BYTE *)a2 + 80))
    {
      if (a2[21] != 3)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v61 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          v62 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          v310 = v62;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,fail", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v87 = *(_DWORD *)(a1 + 2556);
          LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str.__r_.__value_.__r.__words[0]) = v87;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,fail", &__str);
          v89 = (uint8_t *)v88;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v88);
          if (v89 != buf)
            free(v89);
        }
        v127[0] = 0x1600000000;
        v127[1] = 0xBFF0000000000000;
        __asm { FMOV            V0.2D, #-1.0 }
        v128 = _Q0;
        *(long double *)&v127[2] = v36;
        v129 = -1;
        v130 = 1;
        v131 = v37;
        v132 = 0;
        *(_DWORD *)v133 = *(_DWORD *)v306;
        *(_DWORD *)&v133[3] = *(_DWORD *)&v306[3];
        v134 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        v135 = xmmword_101BBE630;
        v136 = _Q0;
        v137 = 0xBFF0000000000000;
        v138 = 0;
        v139 = 2;
        v140 = v24;
        v142 = 0;
        v141 = v22;
        v143 = 0;
        v144 = 0;
        v145 = v304;
        v146 = v305;
        v147 = 0xFFFFFFFF00000000;
        v148 = -1;
        v149 = v134;
        v150 = 0xBFF0000000000000;
        v151 = 0xFFFFFFFF00000000;
        v152 = 0;
        v153 = 255;
        v154 = 1;
        v155 = v327;
        v156 = v328;
        v158 = *(_DWORD *)&v326[8];
        v157 = *(_QWORD *)v326;
        *(_DWORD *)&v159[3] = *(_DWORD *)&v303[3];
        *(_DWORD *)v159 = *(_DWORD *)v303;
        v160 = v134;
        v161 = 0xBFF0000000000000;
        sub_1016A7758(a1, v127);
        return 0;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v47 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,pass", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v84 = *(_DWORD *)(a1 + 2556);
        LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__str.__r_.__value_.__r.__words[0]) = v84;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPIsFQDNCheck,pass", &__str);
        v86 = (uint8_t *)v85;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v85);
        if (v86 != buf)
          free(v86);
      }
    }
    if (*((char *)a2 + 111) < 0)
      sub_100115CE4(&__str, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
    else
      __str = *(std::string *)(a2 + 22);
    sub_1015A2E04(v125, "hslp");
    v52 = sub_1016AC4EC(&v234, (uint64_t)&__str, (uint64_t)v125);
    if (v126 < 0)
      operator delete(v125[0]);
    if ((v52 & 1) != 0)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v64 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v65 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,pass", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v78 = *(_DWORD *)(a1 + 2556);
        v307 = 67109120;
        v308 = v78;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,pass", &v307);
        v80 = (uint8_t *)v79;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v79);
        if (v80 != buf)
          free(v80);
      }
      std::string::operator=((std::string *)a3, &__str);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v66 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v67 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v310 = v67;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,fail", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v81 = *(_DWORD *)(a1 + 2556);
        v307 = 67109120;
        v308 = v81;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,emergencyCallLocationNotPresent,eSLPAddressValidCheck,fail", &v307);
        v83 = (uint8_t *)v82;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)", "%s\n", v82);
        if (v83 != buf)
          free(v83);
      }
      v90[0] = 0x1600000000;
      v90[1] = 0xBFF0000000000000;
      *(long double *)&v90[2] = v36;
      __asm { FMOV            V0.2D, #-1.0 }
      v91 = _Q0;
      v92 = -1;
      v93 = 1;
      v94 = v37;
      v95 = 0;
      *(_DWORD *)v96 = *(_DWORD *)v306;
      *(_DWORD *)&v96[3] = *(_DWORD *)&v306[3];
      v97 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v98 = xmmword_101BBE630;
      v99 = _Q0;
      v100 = 0xBFF0000000000000;
      v101 = 0;
      v102 = 2;
      v103 = v24;
      v105 = 0;
      v104 = v22;
      v106 = 0;
      v107 = 0;
      v108 = v304;
      v109 = v305;
      v110 = 0xFFFFFFFF00000000;
      v111 = -1;
      v112 = v97;
      v113 = 0xBFF0000000000000;
      v114 = 0xFFFFFFFF00000000;
      v115 = 0;
      v116 = 255;
      v117 = 1;
      v118 = v327;
      v119 = v328;
      v121 = *(_DWORD *)&v326[8];
      v120 = *(_QWORD *)v326;
      *(_DWORD *)&v122[3] = *(_DWORD *)&v303[3];
      *(_DWORD *)v122 = *(_DWORD *)v303;
      v123 = v97;
      v124 = 0xBFF0000000000000;
      sub_1016A7758(a1, v90);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return (v52 & 1) != 0;
}

void sub_1016AAE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_1016AAE9C(uint64_t a1, int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  int v49;
  int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1016A919C(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1016A919C(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7518);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1016A919C(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7518);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1016A919C(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::setTimeoutEvent(Event, double) [T = CLNilrSupl]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1016B0784;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1016A919C(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1016A919C(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_1016AB96C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1016A919C(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1016A919C(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrSupl>::cancelTimeoutEvent(Event) [T = CLNilrSupl]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1016A919C(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1016A919C(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

_QWORD *sub_1016ABDFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v4[0] = off_1021C7998;
  v5 = v4;
  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 48))(v1, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1016ABEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ABEE8(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  void **v5;
  uint64_t result;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_1016E07FC(a2[1], __p);
    v5 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,Supl Failed\", \"result\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    *a2 = 3;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)result + 48))(result, a2);
  }
  return result;
}

_QWORD *sub_1016AC028(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,reportWlanMeasurements", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v9 = *(_DWORD *)(a1 + 2556);
    v14[0] = 67109120;
    v14[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,reportWlanMeasurements", v14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::reportWlanMeasurements(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v12[0] = off_1021C7B18;
  v12[1] = a2;
  v13 = v12;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v12);
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1016AC240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016AC284(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  void **v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint8_t *v10;
  char *v11;
  char *v12;
  const char *v13;
  uint8_t buf[8];
  __int16 v15;
  void **v16;
  char v17;
  _DWORD v18[2];
  __int16 v19;
  uint8_t *v20;
  void *__p[2];
  char v22;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    sub_1016E0828(a2[1], __p);
    v6 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v5;
    v15 = 2080;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cplane,Wlan,Reject,instance,%d,result,%s", buf, 0x12u);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v8 = qword_1022A0088;
    v9 = *(_DWORD *)(a1 + 2556);
    sub_1016E0828(a2[1], buf);
    if (v17 >= 0)
      v10 = buf;
    else
      v10 = *(uint8_t **)buf;
    v18[0] = 67109378;
    v18[1] = v9;
    v19 = 2080;
    v20 = v10;
    LODWORD(v13) = 18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 0, "Cplane,Wlan,Reject,instance,%d,result,%s", v18, v13);
    v12 = v11;
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::logFailedWlanSession(CLNilrTypes::WlanSessionStatus)", "%s\n", v12);
    if (v12 != (char *)__p)
      free(v12);
  }
  *a2 = 3;
  result = *(_QWORD *)(a1 + 2728);
  if (result)
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

uint64_t sub_1016AC4E0(uint64_t a1)
{
  return sub_1016A5B3C(a1 + 104, 5);
}

uint64_t sub_1016AC4EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  _DWORD v28[4];
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  int v40;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v13 = qword_1022A0088;
    if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      return 1;
    if (*(char *)(a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    *(_DWORD *)buf = 68289282;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    v34 = v14;
    v15 = "{\"msg%{public}.0s\":\"#nilr,#supl,validate,receivedAddressCheck,pass\", \"receivedAddress\":%{public, locatio"
          "n:escape_only}s}";
    v16 = v13;
    v17 = 28;
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    return 1;
  }
  v5 = *a1;
  if (*(_BYTE *)(*a1 + 316))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int8 *)(v5 + 316);
      *(_DWORD *)buf = 68289282;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 1026;
      LODWORD(v34) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,allowHslpMismatchCheck,pass\", \"fAllowHslpMismatch\":%{public}hhd}", buf, 0x18u);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    }
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(v5 + 2556);
      *(_DWORD *)buf = 67109120;
      v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,allowMismatch is set. Not checking against programmed HSLP", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v10 = *(_DWORD *)(v5 + 2556);
      v28[0] = 67109120;
      v28[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,allowMismatch is set. Not checking against programmed HSLP", v28);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrSupl::isSUPLInitValid(const gnss::Emergency::Supl::Init &, std::string &)::(anonymous class)::operator()(const std::string &, std::string) const", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return 1;
  }
  v19 = (_QWORD *)(v5 + 328);
  if (sub_100F890C0((uint64_t *)a2, v5 + 328, *(unsigned __int8 *)(v5 + 317)))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v20 = qword_1022A0088;
    if (!os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      return 1;
    if (*(char *)(a3 + 23) < 0)
      a3 = *(_QWORD *)a3;
    if (*(char *)(a2 + 23) >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (*(char *)(v5 + 351) < 0)
      v19 = (_QWORD *)*v19;
    v22 = *(unsigned __int8 *)(v5 + 317);
    *(_DWORD *)buf = 68290050;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    v34 = a3;
    v35 = 2082;
    v36 = v21;
    v37 = 2082;
    v38 = v19;
    v39 = 1026;
    v40 = v22;
    v15 = "{\"msg%{public}.0s\":\"#nilr,#supl,validate,validHslpAddressCheck,pass\", \"slpType\":%{public, location:escap"
          "e_only}s, \"receivedAddress\":%{public, location:escape_only}s, \"fHslpAddress\":%{public, location:escape_onl"
          "y}s, \"fAllowHslpWildcard\":%{public}d}";
    v16 = v20;
    v17 = 54;
    goto LABEL_36;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v24 = qword_1022A0088;
  v25 = os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v25)
  {
    if (*(char *)(a3 + 23) < 0)
      a3 = *(_QWORD *)a3;
    if (*(char *)(a2 + 23) >= 0)
      v26 = a2;
    else
      v26 = *(_QWORD *)a2;
    if (*(char *)(v5 + 351) < 0)
      v19 = (_QWORD *)*v19;
    v27 = *(unsigned __int8 *)(v5 + 317);
    *(_DWORD *)buf = 68290050;
    v30 = 0;
    v31 = 2082;
    v32 = "";
    v33 = 2082;
    v34 = a3;
    v35 = 2082;
    v36 = v26;
    v37 = 2082;
    v38 = v19;
    v39 = 1026;
    v40 = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,validate,validHslpAddressCheck,fail\", \"slpType\":%{public, location:escape_only}s, \"receivedAddress\":%{public, location:escape_only}s, \"fHslpAddress\":%{public, location:escape_only}s, \"fAllowHslpWildcard\":%{public}d}", buf, 0x36u);
    return 0;
  }
  return result;
}

std::string *sub_1016AC9C4(std::string *__dst, std::string *__str)
{
  int v4;

  if (__dst[2].__r_.__value_.__s.__data_[16])
  {
    std::string::operator=(__dst, __str);
    std::string::operator=(__dst + 1, __str + 1);
    v4 = __str[2].__r_.__value_.__r.__words[1];
    __dst[2].__r_.__value_.__r.__words[0] = __str[2].__r_.__value_.__r.__words[0];
    LODWORD(__dst[2].__r_.__value_.__r.__words[1]) = v4;
  }
  else
  {
    sub_1016B08E0((char *)__dst, (__int128 *)__str);
    __dst[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return __dst;
}

uint64_t sub_1016ACA30(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  void **v7;
  uint64_t result;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    sub_100F790BC(a3, __p);
    v7 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#cb,#supl,received updated emergency settings\", \"reason\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  result = sub_10084B628(a1 + 528, a2);
  if (a3 <= 3)
    return sub_1016A5B3C(a1 + 104, dword_101CCCDB0[a3]);
  return result;
}

void sub_1016ACB84(uint64_t a1, char a2, unsigned int a3)
{
  int v5;
  NSObject *v6;
  int v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;

  *(_DWORD *)(a1 + 2584) = a3;
  v5 = *(unsigned __int8 *)(a1 + 318);
  *(_BYTE *)(a1 + 318) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 318);
    sub_1017E1CCC(a3, __p);
    v8 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289794;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = v5;
    v18 = 1026;
    v19 = v7;
    v20 = 2082;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"wasInEmergency\":%{public}hhd, \"fInCellularEmergency\":%{public}hhd, \"commType\":%{public, location:escape_only}s}", buf, 0x28u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  if (*(unsigned __int8 *)(a1 + 318) != v5)
  {
    if (*(_BYTE *)(a1 + 318))
      v9 = 2;
    else
      v9 = 3;
    sub_1016A5B3C(a1 + 104, v9);
  }
}

void sub_1016ACCF0(uint64_t a1, char a2, int a3, int a4)
{
  NSObject *v7;
  int v8;
  int v9;
  _DWORD v10[68];
  uint64_t buf;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  *(_BYTE *)(a1 + 272) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(unsigned __int8 *)(a1 + 272);
    v9 = *(unsigned __int8 *)(a1 + 313);
    buf = 68289538;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = v8;
    v16 = 1026;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fSuplEnable\":%{public}hhd, \"fSupportsEmergencySupl\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
  }
  if (*(_BYTE *)(a1 + 272))
  {
    if (!a3)
      return;
  }
  else
  {
    sub_1016A5B3C(a1 + 104, 5);
    if (!a3)
      return;
  }
  *(_DWORD *)(a1 + 1860) = 8;
  *(_DWORD *)(a1 + 2076) = a4;
  *(_DWORD *)(a1 + 2080) = *(_DWORD *)(a1 + 2584);
  *(_BYTE *)(a1 + 2084) = 1;
  memcpy(v10, (const void *)(a1 + 1856), sizeof(v10));
  sub_1016ABEE8(a1, v10);
}

void sub_1016ACE5C(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if ((sub_100014ADC() & 1) == 0)
  {
    *(_BYTE *)(a1 + 273) = a2;
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 273);
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 1026;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl\", \"fLockOutNILR\":%{public}hhd}", (uint8_t *)v6, 0x18u);
    }
    if (*(_BYTE *)(a1 + 273))
      sub_1016A5B3C(a1 + 104, 5);
  }
}

void sub_1016ACF68(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 <= 0x10)
    *a3 = dword_101CCE014[v3];
}

void sub_1016ACF88(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 <= 0x10)
    *a3 = dword_101CCE058[v3];
}

void sub_1016ACFA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  int v27;
  int v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  const char *v73;
  uint8_t *v74;
  uint8_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  const char *v79;
  uint8_t *v80;
  uint64_t v81;
  double v82;
  _BYTE v83[32];
  int v84;
  __int16 v85;
  _BYTE v86[34];
  uint8_t buf[4];
  int v88;
  __int16 v89;
  _BYTE v90[18];
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  _BYTE v94[10];
  _BYTE v95[10];
  _BYTE v96[10];
  uint64_t v97;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 67109376;
    v88 = v5;
    v89 = 1024;
    *(_DWORD *)v90 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,suplStatusReport status=%d", buf, 0xEu);
  }
  v7 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v56 = *(_DWORD *)(a1 + 2556);
    v57 = *(_DWORD *)(a2 + 8);
    LODWORD(v82) = 67109376;
    HIDWORD(v82) = v56;
    *(_WORD *)v83 = 1024;
    *(_DWORD *)&v83[2] = v57;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,suplStatusReport status=%d", &v82, 14);
    v59 = (uint8_t *)v58;
    v7 = sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 17) >= 0xC)
  {
    *(_DWORD *)(a1 + 1896) = *(_DWORD *)a2;
  }
  else
  {
    v9 = (int *)(a2 + 4);
    sub_1016ACF88(v7, (int *)(a2 + 4), (_DWORD *)(a1 + 1996));
    sub_1016ACF68(v10, (int *)(a2 + 4), (_DWORD *)(a1 + 1992));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 2556);
      v13 = *v9;
      v14 = *(_DWORD *)(a1 + 1996);
      v15 = *(_DWORD *)(a1 + 1992);
      *(_DWORD *)buf = 67109888;
      v88 = v12;
      v89 = 1024;
      *(_DWORD *)v90 = v13;
      *(_WORD *)&v90[4] = 1024;
      *(_DWORD *)&v90[6] = v14;
      *(_WORD *)&v90[10] = 1024;
      *(_DWORD *)&v90[12] = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,posMethod,%d,fSessionStatus,posMethod,%d,method,%d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v60 = *v9;
      v61 = *(_DWORD *)(a1 + 1996);
      v62 = *(_DWORD *)(a1 + 1992);
      *(_WORD *)v83 = 1024;
      *(_WORD *)&v83[2] = v60;
      *(_DWORD *)&v83[8] = v61;
      *(_WORD *)&v83[12] = 1024;
      *(_DWORD *)&v83[14] = v62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,#supl, statusReport,posMethod,%d,fSessionStatus,posMethod,%d,method,%d", &v82, 26, 67109888, *(_DWORD *)v83);
      v64 = (uint8_t *)v63;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v63);
      if (v64 != buf)
        free(v64);
    }
    v8 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 1896) = *(_DWORD *)a2;
    if (v8 == 18)
    {
      *(_OWORD *)(a1 + 1928) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 1960) = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 1976) = *(_QWORD *)(a2 + 64);
      *(_WORD *)(a1 + 2064) = *(_WORD *)(a2 + 73);
      *(_BYTE *)(a1 + 2066) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a2 + 16);
LABEL_47:
      *(_DWORD *)(a1 + 1860) = 1;
      return;
    }
  }
  if (v8 == 15)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_DWORD *)(a1 + 2556);
      v18 = *(_QWORD *)(a2 + 80);
      v19 = *(_QWORD *)(a2 + 88);
      v21 = *(_QWORD *)(a2 + 104);
      v20 = *(_QWORD *)(a2 + 112);
      v22 = *(unsigned __int8 *)(a2 + 120);
      v23 = *(unsigned __int8 *)(a2 + 121);
      v24 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)buf = 67110913;
      v88 = v17;
      v89 = 2049;
      *(_QWORD *)v90 = v18;
      *(_WORD *)&v90[8] = 2049;
      *(_QWORD *)&v90[10] = v19;
      v91 = 2050;
      v92 = v20;
      v93 = 1026;
      *(_DWORD *)v94 = v22;
      *(_WORD *)&v94[4] = 1026;
      *(_DWORD *)&v94[6] = v23;
      *(_WORD *)v95 = 2049;
      *(_QWORD *)&v95[2] = v24;
      *(_WORD *)v96 = 2050;
      *(_QWORD *)&v96[2] = v21;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,kNwAsstPositionReceived,refLat,%{private}f,refLon,%{private}f,refUnc,%{public}f,horizConf,%{public}hhu,vertConf,%{public}hhu,alt,%{private}.3f,vunc,%{public}.3f", buf, 0x46u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v65 = *(_DWORD *)(a1 + 2556);
      v66 = *(_QWORD *)(a2 + 80);
      v67 = *(_QWORD *)(a2 + 88);
      v69 = *(_QWORD *)(a2 + 104);
      v68 = *(_QWORD *)(a2 + 112);
      v70 = *(unsigned __int8 *)(a2 + 120);
      v71 = *(unsigned __int8 *)(a2 + 121);
      v72 = *(_QWORD *)(a2 + 96);
      LODWORD(v82) = 67110913;
      HIDWORD(v82) = v65;
      *(_WORD *)v83 = 2049;
      *(_QWORD *)&v83[2] = v66;
      *(_WORD *)&v83[10] = 2049;
      *(_QWORD *)&v83[12] = v67;
      *(_WORD *)&v83[20] = 2050;
      *(_QWORD *)&v83[22] = v68;
      *(_WORD *)&v83[30] = 1026;
      v84 = v70;
      v85 = 1026;
      *(_DWORD *)v86 = v71;
      *(_WORD *)&v86[4] = 2049;
      *(_QWORD *)&v86[6] = v72;
      *(_WORD *)&v86[14] = 2050;
      *(_QWORD *)&v86[16] = v69;
      LODWORD(v81) = 70;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,#supl, statusReport,kNwAsstPositionReceived,refLat,%{private}f,refLon,%{private}f,refUnc,%{public}f,horizConf,%{public}hhu,vertConf,%{public}hhu,alt,%{private}.3f,vunc,%{public}.3f", &v82, v81);
      v74 = (uint8_t *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v73);
      if (v74 != buf)
        free(v74);
    }
    *(_BYTE *)(a1 + 2065) = *(_BYTE *)(a2 + 74);
    *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 2048) = *(_QWORD *)(a2 + 112);
    v25 = *(unsigned __int8 *)(a2 + 120);
    *(_DWORD *)(a1 + 2056) = v25;
    if (v25 != 90)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v26 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_DWORD *)(a1 + 2556);
        v28 = *(_DWORD *)(a1 + 2056);
        v29 = *(_QWORD *)(a1 + 2048);
        *(_DWORD *)buf = 67109632;
        v88 = v27;
        v89 = 1024;
        *(_DWORD *)v90 = v28;
        *(_WORD *)&v90[4] = 2048;
        *(_QWORD *)&v90[6] = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl,NW Ref location confidence,%d,uncertainity,%f", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v76 = *(_DWORD *)(a1 + 2556);
        v77 = *(_DWORD *)(a1 + 2056);
        v78 = *(_QWORD *)(a1 + 2048);
        LODWORD(v82) = 67109632;
        HIDWORD(v82) = v76;
        *(_WORD *)v83 = 1024;
        *(_DWORD *)&v83[2] = v77;
        *(_WORD *)&v83[6] = 2048;
        *(_QWORD *)&v83[8] = v78;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#ins%d,#nilr,#supl,#supl,NW Ref location confidence,%d,uncertainity,%f", &v82, 24, v82);
        v80 = (uint8_t *)v79;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v79);
        if (v80 != buf)
          free(v80);
      }
    }
    memcpy((void *)(a1 + 2128), (const void *)(a1 + 1856), 0x110uLL);
    v8 = *(_DWORD *)(a2 + 8);
  }
  if (v8 == 30)
  {
    v30 = *(double *)(a2 + 24);
    if (v30 == 1.79769313e308 || (v31 = *(double *)(a2 + 32), v31 == 1.79769313e308))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v52 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v53 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        v88 = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Invalid lat/lon", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Invalid lat/lon", &v82);
    }
    else
    {
      *(_BYTE *)(a1 + 2368) = 1;
      *(double *)(a1 + 2376) = v30;
      *(double *)(a1 + 2384) = v31;
      v32 = sub_1016E138C((int)*(double *)(a2 + 48));
      v33 = sub_1016E138C((int)*(double *)(a2 + 56));
      *(double *)(a1 + 2392) = sqrt(v33 * v33 + v32 * v32);
      *(double *)(a1 + 1960) = v32;
      *(long double *)(a1 + 1968) = v33;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(_DWORD *)(a1 + 2556);
        v36 = *(_QWORD *)(a2 + 24);
        v37 = *(_QWORD *)(a2 + 32);
        v39 = *(_QWORD *)(a2 + 40);
        v38 = *(_QWORD *)(a2 + 48);
        v40 = *(_QWORD *)(a2 + 56);
        v41 = *(_QWORD *)(a2 + 64);
        v42 = *(_QWORD *)(a1 + 2392);
        *(_DWORD *)buf = 67110913;
        v88 = v35;
        v89 = 2049;
        *(_QWORD *)v90 = v36;
        *(_WORD *)&v90[8] = 2049;
        *(_QWORD *)&v90[10] = v37;
        v91 = 2050;
        v92 = v38;
        v93 = 2050;
        *(_QWORD *)v94 = v40;
        *(_WORD *)&v94[8] = 2049;
        *(_QWORD *)v95 = v39;
        *(_WORD *)&v95[8] = 2050;
        *(_QWORD *)v96 = v41;
        *(_WORD *)&v96[8] = 2050;
        v97 = v42;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Lat,%{private}f,Lon,%{private}f,uncSemiMajor,%{public}f,uncSemiMinor,%{public}f,alt,%{private}f,uncAlt,%{public}f,unc,%{public}f", buf, 0x4Eu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v43 = *(_DWORD *)(a1 + 2556);
      v44 = *(_QWORD *)(a2 + 24);
      v45 = *(_QWORD *)(a2 + 32);
      v47 = *(_QWORD *)(a2 + 40);
      v46 = *(_QWORD *)(a2 + 48);
      v48 = *(_QWORD *)(a2 + 56);
      v49 = *(_QWORD *)(a2 + 64);
      v50 = *(_QWORD *)(a1 + 2392);
      LODWORD(v82) = 67110913;
      HIDWORD(v82) = v43;
      *(_WORD *)v83 = 2049;
      *(_QWORD *)&v83[2] = v44;
      *(_WORD *)&v83[10] = 2049;
      *(_QWORD *)&v83[12] = v45;
      *(_WORD *)&v83[20] = 2050;
      *(_QWORD *)&v83[22] = v46;
      *(_WORD *)&v83[30] = 2050;
      *(_WORD *)&v86[2] = 2049;
      *(_QWORD *)&v86[4] = v47;
      *(_WORD *)&v86[12] = 2050;
      *(_QWORD *)&v86[14] = v49;
      *(_WORD *)&v86[22] = 2050;
      *(_QWORD *)&v86[24] = v50;
      LODWORD(v81) = 78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,#supl, statusReport,kSuplEndReceived,Lat,%{private}f,Lon,%{private}f,uncSemiMajor,%{public}f,uncSemiMinor,%{public}f,alt,%{private}f,uncAlt,%{public}f,unc,%{public}f", &v82, v81, *(_QWORD *)&v82, *(_OWORD *)v83, *(_OWORD *)&v83[16], v48, *(_OWORD *)&v86[2], *(_OWORD *)&v86[18]);
    }
    v75 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v51);
    if (v75 != buf)
      free(v75);
LABEL_44:
    v8 = *(_DWORD *)(a2 + 8);
  }
  switch(v8)
  {
    case 2:
      v54 = a1 + 104;
      v55 = 8;
      goto LABEL_51;
    case 3:
    case 4:
      *(_DWORD *)(a1 + 1860) = 15;
      v54 = a1 + 104;
      v55 = 11;
      goto LABEL_51;
    case 5:
      *(_DWORD *)(a1 + 1860) = 14;
      v54 = a1 + 104;
      v55 = 10;
      goto LABEL_51;
    case 10:
      v54 = a1 + 104;
      v55 = 9;
LABEL_51:
      sub_1016A5B3C(v54, v55);
      break;
    case 14:
      *(_BYTE *)(a1 + 2064) = 1;
      *(_BYTE *)(a1 + 2336) = 1;
      break;
    case 16:
      *(_BYTE *)(a1 + 2066) = 1;
      *(_BYTE *)(a1 + 2338) = 1;
      break;
    case 18:
      goto LABEL_47;
    default:
      return;
  }
}

void *sub_1016ADBB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 2128), 0x110uLL);
}

_QWORD *sub_1016ADBC4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1016ADC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  std::string *v9;
  const std::string *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  _QWORD *v15;
  NSObject *v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  _QWORD *v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  _QWORD *v26;
  char *v27;
  int v28;
  int v29;
  __int16 v30;
  _QWORD *v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  _QWORD *v35;

  if (*(char *)(a1 + 399) < 0)
    v4 = *(_QWORD *)(a1 + 384);
  else
    v4 = *(unsigned __int8 *)(a1 + 399);
  if (v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v5 = (const std::string *)(a1 + 376);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 2556);
      v8 = (_QWORD *)(a1 + 376);
      if (*(char *)(a1 + 399) < 0)
        v8 = (_QWORD *)v5->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67109379;
      v33 = v7;
      v34 = 2081;
      v35 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,imsi is %{private}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v20 = *(_DWORD *)(a1 + 2556);
      v21 = (_QWORD *)(a1 + 376);
      if (*(char *)(a1 + 399) < 0)
        v21 = (_QWORD *)v5->__r_.__value_.__r.__words[0];
      v28 = 67109379;
      v29 = v20;
      v30 = 2081;
      v31 = v21;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,imsi is %{private}s", &v28, 18);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    v9 = (std::string *)(a2 + 8);
    v10 = v5;
    goto LABEL_28;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,imsi is empty", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v23 = *(_DWORD *)(a1 + 2556);
    v28 = 67109120;
    v29 = v23;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#supl,imsi is empty", &v28);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_DWORD *)(a1 + 2556);
    v15 = (_QWORD *)(a1 + 432);
    if (*(char *)(a1 + 455) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 67109379;
    v33 = v14;
    v34 = 2081;
    v35 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#supl,imei,%{private}s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v25 = *(_DWORD *)(a1 + 2556);
    v26 = (_QWORD *)(a1 + 432);
    if (*(char *)(a1 + 455) < 0)
      v26 = (_QWORD *)*v26;
    v28 = 67109379;
    v29 = v25;
    v30 = 2081;
    v31 = v26;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#supl,imei,%{private}s", &v28, 18);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  if (*(char *)(a1 + 455) < 0)
  {
    if (*(_QWORD *)(a1 + 440))
      goto LABEL_27;
  }
  else if (*(_BYTE *)(a1 + 455))
  {
LABEL_27:
    v10 = (const std::string *)(a1 + 432);
    v9 = (std::string *)(a2 + 8);
LABEL_28:
    std::string::operator=(v9, v10);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v17 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v33 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,imeiEmpty", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
    v18 = *(_DWORD *)(a1 + 2556);
    v28 = 67109120;
    v29 = v18;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#supl,imeiEmpty", &v28);
    sub_100512490("Generic", 1, 0, 0, "void CLNilrSupl::getImsi(gnss::Emergency::Config &)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
}

__n128 sub_1016AE25C(uint64_t a1, __int16 *a2)
{
  int v3;
  _OWORD *v4;
  uint64_t v5;
  int v6;
  NSObject *v8;
  int v9;
  __int16 v10;
  CFAbsoluteTime Current;
  id v12;
  __n128 result;
  NSObject *v14;
  int v15;
  __int128 v16;
  _OWORD *v17;
  NSObject *v18;
  int v19;
  __int128 v20;
  int v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  const char *v32;
  uint8_t *v33;
  _QWORD v34[5];
  _OWORD v35[3];
  _OWORD v36[3];
  int v37;
  int v38;
  uint8_t buf[4];
  int v40;

  v3 = *(_DWORD *)(a1 + 616);
  v4 = (_OWORD *)(a1 + 2656);
  v5 = a1 + 2688;
  *(_BYTE *)(a1 + 2688) = v3 != 0;
  *(_BYTE *)(a1 + 2689) = *(_DWORD *)(a1 + 624) != 0;
  v6 = *((unsigned __int8 *)a2 + 2);
  *(_BYTE *)(a1 + 2690) = v6;
  *(_DWORD *)(a1 + 2664) = 7;
  if (!v3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)buf = 67109120;
      v40 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as feature disabled", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v28 = *(_DWORD *)(a1 + 2556);
      v37 = 67109120;
      v38 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as feature disabled", &v37);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    *(_DWORD *)(a1 + 2660) = 5;
    *(CFAbsoluteTime *)(a1 + 2680) = CFAbsoluteTimeGetCurrent();
    v16 = v4[1];
    v36[0] = *v4;
    v36[1] = v16;
    v36[2] = v4[2];
    v17 = v36;
    goto LABEL_22;
  }
  if (v6 && !*(_BYTE *)(a1 + 2649))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)(a1 + 2556);
      *(_DWORD *)buf = 67109120;
      v40 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as rssi requested even when disabled", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v31 = *(_DWORD *)(a1 + 2556);
      v37 = 67109120;
      v38 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,discard Wlan Meas request as rssi requested even when disabled", &v37);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    *(_DWORD *)(a1 + 2660) = 5;
    *(CFAbsoluteTime *)(a1 + 2680) = CFAbsoluteTimeGetCurrent();
    v20 = v4[1];
    v35[0] = *v4;
    v35[1] = v20;
    v35[2] = v4[2];
    v17 = v35;
LABEL_22:
    sub_1016AC284(a1, v17);
    *(_QWORD *)(a1 + 2656) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(__n128 *)(a1 + 2672) = result;
    *(_WORD *)(a1 + 2694) = 0;
    *(_DWORD *)(a1 + 2664) = 0;
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 4) = 0;
    *(_DWORD *)(a1 + 2696) = 1;
    return result;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v40 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,dispatch_requestWlanMeas", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v25 = *(_DWORD *)(a1 + 2556);
    v37 = 67109120;
    v38 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,dispatch_requestWlanMeas", &v37);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::dispatch_requestWlanMeas(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v10 = *a2;
  *(_BYTE *)(a1 + 2610) = *((_BYTE *)a2 + 2);
  *(_WORD *)(a1 + 2608) = v10;
  *(_WORD *)(a1 + 2694) = *a2;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 2672) = Current;
  LOWORD(Current) = *a2;
  *(double *)(a1 + 2600) = (double)*(unint64_t *)&Current + -2.0;
  v12 = objc_msgSend(*(id *)a1, "silo");
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1016AE7F4;
  v34[3] = &unk_10212ECA0;
  v34[4] = a1;
  objc_msgSend(v12, "async:", v34);
  return result;
}

uint64_t sub_1016AE7F4(uint64_t a1)
{
  return sub_1016A5B3C(*(_QWORD *)(a1 + 32) + 104, 19);
}

id sub_1016AE804(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char *v10;
  char v11;
  id v12;
  int v14;
  const char *v15;
  uint8_t *v16;
  _QWORD v17[5];
  _DWORD v18[4];
  uint8_t buf[4];
  int v20;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#wlan,wlanMeasurementHandler", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v14 = *(_DWORD *)(a1 + 2556);
    v18[0] = 67109120;
    v18[1] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#wlan,wlanMeasurementHandler", v18);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::wlanMeasurementHandler(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*(_DWORD *)a2 == 1)
  {
    *(_DWORD *)(a1 + 2660) = 1;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16) - v6;
    if (v7)
    {
      v8 = v7 / 12;
      v9 = *(_BYTE *)(a1 + 2691);
      if (v8 <= 1)
        v8 = 1;
      v10 = (char *)(v6 + 6);
      do
      {
        v11 = *v10;
        v10 += 12;
        v9 |= v11;
        --v8;
      }
      while (v8);
      *(_BYTE *)(a1 + 2691) = v9;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 2660) = 4;
  }
  v12 = objc_msgSend(*(id *)a1, "silo");
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1016AEA5C;
  v17[3] = &unk_10212ECA0;
  v17[4] = a1;
  return objc_msgSend(v12, "async:", v17);
}

uint64_t sub_1016AEA5C(uint64_t a1)
{
  return sub_1016A5B3C(*(_QWORD *)(a1 + 32) + 104, 20);
}

double sub_1016AEA6C(uint64_t a1)
{
  int64x2_t v6;
  double result;

  *(_QWORD *)a1 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q1;
  *(_OWORD *)(a1 + 24) = _Q1;
  *(_QWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  v6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = xmmword_101BBE630;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(_QWORD *)(a1 + 120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 2;
  *(_DWORD *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 145) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 164) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 172) = -1;
  *(int64x2_t *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 192) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 200) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 212) = 255;
  *(_DWORD *)(a1 + 216) = 1;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(int64x2_t *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  return result;
}

void sub_1016AEB20(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1016AEB4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1016AEB94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), (void *)a2[3], a2[4]);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1007855D8((_QWORD *)(a1 + 48), (const void *)a2[6], a2[7], a2[7] - a2[6]);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(_QWORD *)(a1 + 80) = a2[10];
  if (*((char *)a2 + 111) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 88), (void *)a2[11], a2[12]);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 11);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v6;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_1007855D8((_QWORD *)(a1 + 112), (const void *)a2[14], a2[15], a2[15] - a2[14]);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  return a1;
}

void sub_1016AEC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1016AECC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1016AECC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1016AED08(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1016AED38(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1016AED60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1016AEDA0(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_1016B199C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_1016AEF24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1016AEF64(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_1016B0984(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

_QWORD *sub_1016AEFCC(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1016AF008(result);
    operator delete();
  }
  return result;
}

_QWORD *sub_1016AF008(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1016AF088(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(_QWORD *)(a2 + 120) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    v4 = *(void **)(a2 + 48);
    if (v4)
    {
      *(_QWORD *)(a2 + 56) = v4;
      operator delete(v4);
    }
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    operator delete();
  }
}

void sub_1016AF104()
{
  operator delete();
}

_QWORD *sub_1016AF118(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C75A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1016AF14C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C75A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016AF168(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 371);
}

uint64_t sub_1016AF174(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016AF1B0()
{
}

_QWORD *sub_1016AF1BC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1016AF324(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1016AF334()
{
  operator delete();
}

_QWORD *sub_1016AF348(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7628;
  result[1] = v3;
  return result;
}

uint64_t sub_1016AF37C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7628;
  a2[1] = v2;
  return result;
}

void sub_1016AF398(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  uint64_t v7;
  id v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[8];
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 2556);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,suplInitUdp", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v9 = *(_DWORD *)(v3 + 2556);
    v12[0] = 67109120;
    v12[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,suplInitUdp", v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrSupl::CLNilrSupl(const SimInstance, id<CLIntersiloUniverse>, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLModemController::ExecuteWrapper, CLNilrTypes::StatusCb, CLNilrWlanScanner &, CLNilrTypes::WlanStatusCb, CLNilrTypes::NonEmergencyNilrCb, CLNilrTypes::ProcessRawSuplInitCb)::(anonymous class)::operator()(std::vector<uint8_t> &&) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = objc_msgSend(*(id *)v3, "silo");
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v14 = 3321888768;
  v15 = sub_1016AF658;
  v16 = &unk_1021C7698;
  v17 = v3;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_1007855D8(&__p, v6, v7, v7 - (_QWORD)v6);
  objc_msgSend(v8, "async:", buf);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v6)
    operator delete(v6);
}

void sub_1016AF5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016AF610(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016AF64C()
{
}

uint64_t sub_1016AF658(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a1 + 40);
  return result;
}

_QWORD *sub_1016AF67C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_1007855D8(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
}

void sub_1016AF694(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t **sub_1016AF6AC(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1016AF770(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10071CFEC((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

void sub_1016AF7D8()
{
  operator delete();
}

_QWORD *sub_1016AF7EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C76E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1016AF820(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C76E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016AF83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t **v9;
  unsigned int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  unsigned int v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[8];
  __int16 v19;
  int v20;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 2556);
    v6 = *(unsigned __int16 *)(v3 + 2552);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    v19 = 1024;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,decodeSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v11 = *(_DWORD *)(v3 + 2556);
    v12 = *(unsigned __int16 *)(v3 + 2552);
    v15[0] = 67109376;
    v15[1] = v11;
    v16 = 1024;
    v17 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,decodeSuplInit,index,%d", v15, 14);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrSupl::process_RawSuplInit(const std::vector<uint8_t> &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v7 = *(_DWORD *)(v3 + 2556);
  v8 = *(unsigned __int16 *)(v3 + 2552);
  v15[0] = v8;
  *(_QWORD *)buf = v15;
  v9 = sub_1016AF6AC((uint64_t **)(v3 + 2528), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  return sub_101805C48(a2, v7, v8, (unsigned __int8 **)v9 + 5);
}

uint64_t sub_1016AFA54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016AFA90()
{
}

void sub_1016AFAA0()
{
  operator delete();
}

_QWORD *sub_1016AFAB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7778;
  result[1] = v3;
  return result;
}

uint64_t sub_1016AFAE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7778;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1016AFB04(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;

  result = *(_QWORD **)(a2 + 32);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(v4 + 2556) != 0;
    v7[0] = off_1021C77F8;
    v7[1] = v4;
    v8 = v7;
    sub_10183EBD8((uint64_t)result, v5, (uint64_t)v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_1016AFBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016AFBF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016AFC2C()
{
}

void sub_1016AFC3C()
{
  operator delete();
}

_QWORD *sub_1016AFC50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C77F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1016AFC84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C77F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016AFCA0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(v5 + 2556);
    v8 = -1227133513 * ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    *(_DWORD *)buf = 67109632;
    v24 = v7;
    v25 = 1024;
    v26 = v4;
    v27 = 1024;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,ecidCallback,%d,lteCellListSize,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v12 = -1227133513 * ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,ecidCallback,%d,lteCellListSize,%d", v18, 20, 67109632);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrSupl::issueEcidRequest()::(anonymous class)::operator()(CLModemController &)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_DWORD *)(v5 + 2556);
      *(_DWORD *)buf = 67109120;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,serving_rat_lte,false", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C74F8);
      v15 = *(_DWORD *)(v5 + 2556);
      v18[0] = 67109120;
      v18[1] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,serving_rat_lte,false", v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "auto CLNilrSupl::issueEcidRequest()::(anonymous class)::operator()(CLModemController &)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  if (v5 + 2440 != a3)
    sub_100AAEFA8((char *)(v5 + 2440), *(char **)a3, *(_QWORD *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
  return sub_1016A5B3C(v5 + 104, 17);
}

uint64_t sub_1016B0040(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016B007C()
{
}

void sub_1016B008C()
{
  operator delete();
}

_QWORD *sub_1016B00A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7898;
  result[1] = v3;
  return result;
}

uint64_t sub_1016B00D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7898;
  a2[1] = v2;
  return result;
}

void sub_1016B00F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const std::string *v6;
  uint64_t v7;
  const std::string *v8;
  NSObject *v9;
  int v10;
  std::string::size_type p_size;
  _QWORD *v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type size;
  _QWORD *v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  std::string v28;
  const char *v29;
  int v30;
  std::string __p;
  _BYTE v32[3];
  __int16 v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  std::string::size_type v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  uint8_t buf[4];
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int data_low;
  __int16 v69;
  std::string::size_type v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _QWORD *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;

  v3 = *(_QWORD *)(a1 + 8);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (&v35 != (void **)(v3 + 280))
    sub_100A38C94(&v35, *(char **)(v3 + 280), *(char **)(v3 + 288), *(_QWORD *)(v3 + 288) - *(_QWORD *)(v3 + 280));
  v4 = *(_QWORD *)(v3 + 2432);
  if (!v4)
    sub_10025FD1C();
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = 0uLL;
  LOBYTE(v30) = 0;
  v29 = 0;
  memset(&__p, 0, sizeof(__p));
  *(_WORD *)v32 = 0;
  v32[2] = 1;
  v33 = 257;
  v34 = 0xBFF0000000000000;
  LOWORD(v28.__r_.__value_.__l.__data_) = *(_WORD *)(v3 + 352);
  if (*(char *)(v3 + 2583) < 0)
    v5 = *(_QWORD *)(v3 + 2568);
  else
    v5 = *(unsigned __int8 *)(v3 + 2583);
  if (v5)
    v6 = (const std::string *)(v3 + 2560);
  else
    v6 = (const std::string *)(v3 + 328);
  std::string::operator=((std::string *)&v28.__r_.__value_.__r.__words[1], v6);
  LOBYTE(v30) = *(_BYTE *)(v3 + 368);
  v33 = *(_WORD *)(v3 + 369);
  if (*(_BYTE *)(v3 + 632))
    v34 = *(_QWORD *)(v3 + 640);
  if (*(char *)(v3 + 399) < 0)
    v7 = *(_QWORD *)(v3 + 384);
  else
    v7 = *(unsigned __int8 *)(v3 + 399);
  if (v7)
    v8 = (const std::string *)(v3 + 376);
  else
    v8 = (const std::string *)(v3 + 432);
  std::string::operator=(&__p, v8);
  v32[0] = *(_BYTE *)(v3 + 2648);
  *(_WORD *)&v32[1] = *(_WORD *)(v3 + 2649);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_DWORD *)(v3 + 2556);
    if (SHIBYTE(v29) >= 0)
      p_size = (std::string::size_type)&v28.__r_.__value_.__l.__size_;
    else
      p_size = v28.__r_.__value_.__l.__size_;
    v12 = (_QWORD *)(v3 + 400);
    if (*(char *)(v3 + 423) < 0)
      v12 = (_QWORD *)*v12;
    v13 = *(unsigned __int8 *)(v3 + 632);
    *(_DWORD *)buf = 67111682;
    v62 = v10;
    v63 = 1024;
    v64 = HIBYTE(v33);
    v65 = 1024;
    v66 = v33;
    v67 = 1024;
    data_low = LOWORD(v28.__r_.__value_.__l.__data_);
    v69 = 2080;
    v70 = p_size;
    v71 = 1024;
    v72 = v30;
    v73 = 2080;
    v74 = v12;
    v75 = 1024;
    v76 = v32[0];
    v77 = 1024;
    v78 = v32[1];
    v79 = 1024;
    v80 = v32[2];
    v81 = 1024;
    v82 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,uuid,%s,enableLPPRel13,%d,enableRssi,%d,enableLocationSource,%d,configureVerticalUncertainty,%d", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v17 = *(_DWORD *)(v3 + 2556);
    if (SHIBYTE(v29) >= 0)
      size = (std::string::size_type)&v28.__r_.__value_.__l.__size_;
    else
      size = v28.__r_.__value_.__l.__size_;
    v19 = (_QWORD *)(v3 + 400);
    if (*(char *)(v3 + 423) < 0)
      v19 = (_QWORD *)*v19;
    v20 = *(unsigned __int8 *)(v3 + 632);
    v39 = 67111682;
    v40 = v17;
    v41 = 1024;
    v42 = HIBYTE(v33);
    v43 = 1024;
    v44 = v33;
    v45 = 1024;
    v46 = LOWORD(v28.__r_.__value_.__l.__data_);
    v47 = 2080;
    v48 = size;
    v49 = 1024;
    v50 = v30;
    v51 = 2080;
    v52 = v19;
    v53 = 1024;
    v54 = v32[0];
    v55 = 1024;
    v56 = v32[1];
    v57 = 1024;
    v58 = v32[2];
    v59 = 1024;
    v60 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,uuid,%s,enableLPPRel13,%d,enableRssi,%d,enableLocationSource,%d,configureVerticalUncertainty,%d", &v39, 76, v27, LODWORD(v28.__r_.__value_.__l.__data_), (const char *)v28.__r_.__value_.__l.__size_, LODWORD(v28.__r_.__value_.__r.__words[2]), v29, v30, LODWORD(__p.__r_.__value_.__l.__data_), LODWORD(__p.__r_.__value_.__r.__words[1]),
      LODWORD(__p.__r_.__value_.__r.__words[2]));
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrSupl::handler_Session(CLNilrSupl::Event)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v14 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(v3 + 2556);
    v16 = *(_DWORD *)(v3 + 2504) - *(_DWORD *)(v3 + 2496);
    *(_DWORD *)buf = 67109888;
    v62 = v15;
    v63 = 1024;
    v64 = v38;
    v65 = 1024;
    v66 = (_DWORD)v36 - (_DWORD)v35;
    v67 = 1024;
    data_low = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,sendSuplInitToDD,lte,%d,certLen,%d,rawSuplInitLen,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v23 = *(_DWORD *)(v3 + 2556);
    v24 = *(_DWORD *)(v3 + 2504) - *(_DWORD *)(v3 + 2496);
    v39 = 67109888;
    v40 = v23;
    v41 = 1024;
    v42 = v38;
    v43 = 1024;
    v44 = (_DWORD)v36 - (_DWORD)v35;
    v45 = 1024;
    v46 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,sendSuplInitToDD,lte,%d,certLen,%d,rawSuplInitLen,%d", &v39, 26, v27, LODWORD(v28.__r_.__value_.__l.__data_));
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrSupl::handler_Session(CLNilrSupl::Event)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  sub_101806424(a2, (unsigned __int8 **)(v3 + 2496), (unsigned __int8 **)&v35, &v28, (std::string *)(v3 + 400));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28.__r_.__value_.__l.__size_);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_1016B06F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016B073C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016B0778()
{
}

uint64_t sub_1016B0784(uint64_t a1)
{
  return sub_1016A5B3C(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1016B0798()
{
  operator delete();
}

_QWORD *sub_1016B07AC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C7918;
  return result;
}

void sub_1016B07D0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C7918;
}

uint64_t sub_1016B07E8(uint64_t a1, uint64_t a2)
{
  return sub_1017FA360(a2, 1);
}

uint64_t sub_1016B07F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016B0830()
{
}

void sub_1016B0840()
{
  operator delete();
}

_QWORD *sub_1016B0854()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C7998;
  return result;
}

void sub_1016B0878(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C7998;
}

uint64_t sub_1016B0890(uint64_t a1, uint64_t a2)
{
  return sub_101806B38(a2);
}

uint64_t sub_1016B0898(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016B08D4()
{
}

char *sub_1016B08E0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  v7 = *((_QWORD *)a2 + 6);
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  *((_QWORD *)__dst + 6) = v7;
  return __dst;
}

void sub_1016B0968(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016B0984(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1016AB96C(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1016B0A04()
{
  operator delete();
}

_QWORD *sub_1016B0A18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7A18;
  result[1] = v3;
  return result;
}

uint64_t sub_1016B0A4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7A18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016B0A68(uint64_t a1, uint64_t a2)
{
  return sub_101806A74(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1016B0A78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016B0AB4()
{
}

void sub_1016B0AC4()
{
  operator delete();
}

_QWORD *sub_1016B0AD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7A98;
  result[1] = v3;
  return result;
}

uint64_t sub_1016B0B0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7A98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016B0B28(uint64_t a1, uint64_t a2)
{
  return sub_101806A74(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1016B0B38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016B0B74()
{
}

void sub_1016B0B84()
{
  operator delete();
}

_QWORD *sub_1016B0B98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7B18;
  result[1] = v3;
  return result;
}

uint64_t sub_1016B0BCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7B18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016B0BE8(uint64_t a1, uint64_t a2)
{
  return sub_101805F40(a2, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1016B0BF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016B0C34()
{
}

void sub_1016B0C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "noCallbackQueue", "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"noCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

#error "1016B0E24: call analysis failed (funcsize=75)"

#error "1016B0FA4: call analysis failed (funcsize=77)"

#error "1016B1124: call analysis failed (funcsize=77)"

#error "1016B129C: call analysis failed (funcsize=75)"

#error "1016B141C: call analysis failed (funcsize=77)"

#error "1016B159C: call analysis failed (funcsize=77)"

#error "1016B171C: call analysis failed (funcsize=77)"

#error "1016B189C: call analysis failed (funcsize=77)"

void sub_1016B199C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7518);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7518);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

uint64_t sub_1016B1B08(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::TimeQuality", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::TimeQuality", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::TimeQuality ProtobufUtil::fromProtobuf(proto::gnss::TimeQuality)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B1CC8(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 72);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(result + 20);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_11:
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
    return result;
  }
LABEL_10:
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 64);
  if ((*(_DWORD *)(result + 72) & 0x10) != 0)
    goto LABEL_11;
  return result;
}

uint64_t sub_1016B1D24(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(result + 16);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v5 = *(_QWORD *)(result + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310C78 + 8);
  result = sub_1016B1CC8(v5, a2 + 8);
  v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = sub_1016B1B08(*(_DWORD *)(v3 + 20));
  *(_DWORD *)(a2 + 40) = result;
  v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(v3 + 40);
  v4 = *(_DWORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    goto LABEL_7;
  }
LABEL_15:
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v3 + 24);
  if ((v4 & 0x20) == 0)
    return result;
LABEL_7:
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v3 + 32);
  return result;
}

uint64_t sub_1016B1DD0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  v4 = result;
  v5 = *(_DWORD *)(result + 52);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(result + 8);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310C80 + 8);
    result = sub_1016B1D24(v6, a2);
    v5 = *(_DWORD *)(v4 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return result;
      goto LABEL_4;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  *a3 = *(_QWORD *)(v4 + 16);
  if ((v5 & 4) == 0)
    return result;
LABEL_4:
  a3[1] = *(_QWORD *)(v4 + 24);
  return result;
}

uint64_t sub_1016B1E3C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)result;
  v3 = *(unsigned __int16 *)(result + 2);
  *(_DWORD *)(a2 + 52) = v2 | 7;
  v4 = *(unsigned __int16 *)(result + 4);
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  v5 = *(_DWORD *)(result + 8);
  *(_DWORD *)(a2 + 52) = v2 | 0xF;
  v6 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 20) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  v7 = *(unsigned __int8 *)(result + 18);
  *(_DWORD *)(a2 + 28) = *(unsigned __int16 *)(result + 16);
  *(_DWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 52) = v2 | 0xFF;
  v8 = *(_DWORD *)(result + 20);
  *(_DWORD *)(a2 + 52) = v2 | 0x1FF;
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(result + 19);
  *(_DWORD *)(a2 + 40) = v8;
  v9 = *(_DWORD *)(result + 24);
  *(_DWORD *)(a2 + 52) = v2 | 0x3FF;
  *(_DWORD *)(a2 + 44) = v9;
  return result;
}

BOOL sub_1016B1EAC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 result;
  int v13;
  int v14;

  v4 = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)a1;
  v5 = *(unsigned __int16 *)(a1 + 2);
  *(_DWORD *)(a2 + 44) = v4 | 7;
  v6 = *(unsigned __int16 *)(a1 + 4);
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  v7 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 44) = v4 | 0xF;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = v8;
  v9 = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a2 + 44) = v4 | 0x3F;
  *(_DWORD *)(a2 + 28) = v9;
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 < 3)
    v11 = v10 + 1;
  else
    v11 = 0;
  result = sub_10002A324(v11);
  if (!result)
    sub_10190E2C8();
  v13 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v13 | 0x40;
  v14 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 44) = v13 | 0xC0;
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = v14;
  return result;
}

uint64_t sub_1016B1F50(uint64_t a1, int *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_DWORD *)a1 < 6u)
    v4 = *(_DWORD *)a1 + 1;
  else
    v4 = 0;
  if (!sub_10001B780(v4))
    sub_10190E2F0();
  a2[22] |= 1u;
  a2[20] = v4;
  v5 = -1227133513 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v5);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 28 * v5;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = a2[5];
      v10 = a2[4];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v9 + 1);
          v9 = a2[5];
        }
        a2[5] = v9 + 1;
        sub_1016B9158();
      }
      v11 = *((_QWORD *)a2 + 1);
      a2[4] = v10 + 1;
      sub_1016B1E3C(v8 + v6, *(_QWORD *)(v11 + 8 * v10));
      v6 += 28;
    }
    while (v7 != v6);
  }
  v12 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v12 >> 4);
  if ((int)(v12 >> 4) >= 1)
  {
    v13 = 0;
    v14 = v12 & 0xFFFFFFFF0;
    do
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = a2[11];
      v17 = a2[10];
      if ((int)v17 >= v16)
      {
        if (v16 == a2[12])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8), v16 + 1);
          v16 = a2[11];
        }
        a2[11] = v16 + 1;
        sub_1016B91B8();
      }
      v18 = *((_QWORD *)a2 + 4);
      a2[10] = v17 + 1;
      v19 = *(_QWORD *)(v18 + 8 * v17);
      v20 = *(_DWORD *)(v19 + 32);
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v15 + v13);
      v21 = *(unsigned __int16 *)(v15 + v13 + 2);
      *(_DWORD *)(v19 + 32) = v20 | 7;
      v22 = *(unsigned __int16 *)(v15 + v13 + 4);
      *(_DWORD *)(v19 + 12) = v21;
      *(_DWORD *)(v19 + 16) = v22;
      v23 = *(_DWORD *)(v15 + v13 + 8);
      *(_DWORD *)(v19 + 32) = v20 | 0xF;
      v24 = *(_DWORD *)(v15 + v13 + 12);
      *(_DWORD *)(v19 + 32) = v20 | 0x1F;
      *(_DWORD *)(v19 + 20) = v23;
      *(_DWORD *)(v19 + 24) = v24;
      v13 += 16;
    }
    while (v14 != v13);
  }
  v25 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
  result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 14), v25 >> 5);
  if ((int)(v25 >> 5) >= 1)
  {
    v27 = 0;
    v28 = v25 & 0x1FFFFFFFE0;
    do
    {
      v29 = *(_QWORD *)(a1 + 56);
      v30 = a2[17];
      v31 = a2[16];
      if ((int)v31 >= v30)
      {
        if (v30 == a2[18])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 14), v30 + 1);
          v30 = a2[17];
        }
        a2[17] = v30 + 1;
        sub_1016B9218();
      }
      v32 = *((_QWORD *)a2 + 7);
      a2[16] = v31 + 1;
      result = sub_1016B1EAC(v29 + v27, *(_QWORD *)(v32 + 8 * v31));
      v27 += 32;
    }
    while (v28 != v27);
  }
  return result;
}

std::string *sub_1016B21F4(std::string *__str, uint64_t a2)
{
  std::string *v3;

  *(_DWORD *)(a2 + 52) |= 0x20u;
  v3 = *(std::string **)(a2 + 40);
  if (v3 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  return std::string::operator=(v3, __str);
}

BOOL sub_1016B225C(unsigned __int16 *a1, _DWORD *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 result;
  int v22;
  int v23;

  v4 = *a1;
  a2[20] |= 1u;
  a2[2] = v4;
  v5 = *((_DWORD *)a1 + 1);
  v6 = v5 + 1;
  v7 = v5 + 2;
  if (v6 >= 4)
    v8 = 0;
  else
    v8 = v7;
  if (!sub_100106094(v8))
    sub_10190E4D0();
  v9 = a2[20];
  v10 = a1[4];
  a2[3] = v8;
  a2[4] = v10;
  v11 = *((unsigned __int8 *)a1 + 10);
  a2[20] = v9 | 0xE;
  v12 = *((_DWORD *)a1 + 3);
  a2[5] = v11;
  a2[6] = v12;
  v13 = *((unsigned __int8 *)a1 + 17);
  a2[7] = *((unsigned __int8 *)a1 + 16);
  a2[8] = v13;
  a2[20] = v9 | 0xFE;
  v14 = *((_DWORD *)a1 + 5);
  a2[20] = v9 | 0x1FE;
  a2[9] = *((unsigned __int8 *)a1 + 18);
  a2[10] = v14;
  v15 = a1[14];
  a2[11] = *((_DWORD *)a1 + 6);
  a2[12] = v15;
  v16 = *((unsigned __int8 *)a1 + 31);
  a2[13] = *((unsigned __int8 *)a1 + 30);
  a2[14] = v16;
  a2[20] = v9 | 0x3FFE;
  v17 = *((_DWORD *)a1 + 9);
  v18 = v17 + 1;
  v19 = v17 + 2;
  if (v18 >= 6)
    v20 = 0;
  else
    v20 = v19;
  a2[15] = *((unsigned __int8 *)a1 + 32);
  result = sub_10001B780(v20);
  if (!result)
    sub_10190E4A8();
  v22 = a2[20];
  a2[20] = v22 | 0x4000;
  v23 = *((_DWORD *)a1 + 10);
  a2[20] = v22 | 0xC000;
  a2[16] = v20;
  a2[17] = v23;
  return result;
}

BOOL sub_1016B236C(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  uint64_t i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL8 result;
  int v30;
  int v31;

  v4 = a2[17];
  v5 = *(unsigned __int16 *)(a1 + 4);
  a2[2] = *(_DWORD *)a1;
  a2[3] = v5;
  v6 = *(unsigned __int8 *)(a1 + 6);
  v7 = *(unsigned __int8 *)(a1 + 7);
  a2[17] = v4 | 0xF;
  a2[4] = v6;
  a2[5] = v7;
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 6);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 6), 16);
  for (i = 0; i != 256; i += 16)
  {
    v10 = a2[9];
    v11 = (int)a2[8];
    if ((int)v11 >= v10)
    {
      if (v10 == a2[10])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v10 + 1);
        v10 = a2[9];
      }
      a2[9] = v10 + 1;
      sub_1016B9278();
    }
    v12 = *((_QWORD *)a2 + 3);
    a2[8] = v11 + 1;
    v13 = *(_DWORD **)(v12 + 8 * v11);
    v14 = *(unsigned __int16 *)(a1 + i + 8);
    v15 = v13[8];
    v13[8] = v15 | 3;
    v16 = *(unsigned __int8 *)(a1 + i + 10);
    v13[2] = v14;
    v13[3] = v16;
    v17 = *(_DWORD *)(a1 + i + 12);
    v13[8] = v15 | 7;
    v18 = *(_DWORD *)(a1 + i + 16);
    v13[4] = v17;
    v13[5] = v18;
    v19 = *(unsigned __int8 *)(a1 + i + 20);
    v13[8] = v15 | 0x1F;
    v13[6] = v19;
  }
  v20 = *(unsigned __int8 *)(a1 + 264);
  a2[17] |= 0x20u;
  a2[12] = v20;
  v21 = *(_DWORD *)(a1 + 268);
  v22 = v21 + 1;
  v23 = v21 + 2;
  if (v22 >= 5)
    v24 = 0;
  else
    v24 = v23;
  if (!sub_1002BC6DC(v24))
    sub_10190E7A0();
  a2[17] |= 0x40u;
  a2[13] = v24;
  v25 = *(_DWORD *)(a1 + 272);
  v26 = v25 + 1;
  v27 = v25 + 2;
  if (v26 >= 6)
    v28 = 0;
  else
    v28 = v27;
  result = sub_10001B780(v28);
  if (!result)
    sub_10190E778();
  v30 = a2[17];
  a2[17] = v30 | 0x80;
  v31 = *(_DWORD *)(a1 + 276);
  a2[17] = v30 | 0x180;
  a2[14] = v28;
  a2[15] = v31;
  return result;
}

BOOL sub_1016B2504(unsigned __int8 *a1, uint64_t a2, uint8x8_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL8 result;
  int v19;
  int v20;

  v5 = *(_DWORD *)(a2 + 68);
  v6 = a1[1];
  *(_DWORD *)(a2 + 8) = *a1;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 68) = v5 | 7;
  v7 = *((_DWORD *)a1 + 1);
  *(_DWORD *)(a2 + 68) = v5 | 0xF;
  *(_DWORD *)(a2 + 16) = *((unsigned __int16 *)a1 + 1);
  *(_DWORD *)(a2 + 20) = v7;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 2);
  a3.i32[0] = *((_DWORD *)a1 + 3);
  *(uint32x4_t *)(a2 + 28) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  v8 = a1[16];
  v9 = a1[17];
  *(_DWORD *)(a2 + 68) = v5 | 0x7FF;
  *(_DWORD *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 48) = v9;
  v10 = *((_DWORD *)a1 + 5);
  v11 = v10 + 1;
  v12 = v10 + 2;
  if (v11 >= 5)
    v13 = 0;
  else
    v13 = v12;
  if (!sub_1002BC6DC(v13))
    sub_10190E7F0();
  *(_DWORD *)(a2 + 68) |= 0x800u;
  *(_DWORD *)(a2 + 52) = v13;
  v14 = *((_DWORD *)a1 + 6);
  v15 = v14 + 1;
  v16 = v14 + 2;
  if (v15 >= 6)
    v17 = 0;
  else
    v17 = v16;
  result = sub_10001B780(v17);
  if (!result)
    sub_10190E7C8();
  v19 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = v19 | 0x1000;
  v20 = *((_DWORD *)a1 + 7);
  *(_DWORD *)(a2 + 68) = v19 | 0x3000;
  *(_DWORD *)(a2 + 56) = v17;
  *(_DWORD *)(a2 + 60) = v20;
  return result;
}

__n128 sub_1016B25F8(__int128 *a1, uint64_t a2)
{
  int v2;
  int v3;
  __int128 v4;
  __int128 v5;
  int16x4_t v6;
  __int128 v7;
  int32x4_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __n128 result;

  v2 = *(_DWORD *)(a2 + 148);
  v3 = *(_DWORD *)(a2 + 152);
  v4 = *a1;
  *(_DWORD *)(a2 + 148) = v2 | 1;
  DWORD1(v4) = *((_DWORD *)a1 + 1);
  *(_DWORD *)(a2 + 148) = v2 | 3;
  DWORD2(v4) = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 148) = v2 | 7;
  HIDWORD(v4) = *((_DWORD *)a1 + 3);
  *(_DWORD *)(a2 + 148) = v2 | 0xF;
  *(_OWORD *)(a2 + 8) = v4;
  v5 = a1[1];
  *(_DWORD *)(a2 + 148) = v2 | 0x1F;
  DWORD1(v5) = *((_DWORD *)a1 + 5);
  *(_DWORD *)(a2 + 148) = v2 | 0x3F;
  DWORD2(v5) = *((_DWORD *)a1 + 6);
  *(_DWORD *)(a2 + 148) = v2 | 0x7F;
  HIDWORD(v5) = *((_DWORD *)a1 + 7);
  *(_OWORD *)(a2 + 24) = v5;
  *(_QWORD *)&v5 = *((_QWORD *)a1 + 4);
  v6 = *(int16x4_t *)((char *)a1 + 40);
  *(_QWORD *)&v7 = vmovl_u16(*(uint16x4_t *)&v5).u64[0];
  *((_QWORD *)&v7 + 1) = vmovl_s16(*(int16x4_t *)&v5).i64[1];
  *(_OWORD *)(a2 + 40) = v7;
  v8 = vmovl_s16(v6);
  v8.i32[3] = vmovl_u16(*(uint16x4_t *)&v6).i32[3];
  *(int32x4_t *)(a2 + 56) = v8;
  *(int32x4_t *)(a2 + 72) = vmovl_s16((int16x4_t)a1[3]);
  v9 = *((unsigned __int8 *)a1 + 57);
  *(_DWORD *)(a2 + 88) = *((unsigned __int8 *)a1 + 56);
  *(_DWORD *)(a2 + 92) = v9;
  v10 = *((char *)a1 + 59);
  *(_DWORD *)(a2 + 96) = *((unsigned __int8 *)a1 + 58);
  *(_DWORD *)(a2 + 100) = v10;
  v11 = *((unsigned __int8 *)a1 + 60);
  v12 = *((unsigned __int8 *)a1 + 61);
  *(_DWORD *)(a2 + 148) = v2 | 0x3FFFFFF;
  *(_DWORD *)(a2 + 104) = v11;
  *(_DWORD *)(a2 + 108) = v12;
  v13 = *((_DWORD *)a1 + 16);
  v14 = *((char *)a1 + 68);
  *(_DWORD *)(a2 + 148) = v2 | 0xFFFFFFF;
  *(_DWORD *)(a2 + 112) = v13;
  *(_DWORD *)(a2 + 116) = v14;
  v15 = *((_DWORD *)a1 + 18);
  v16 = *((unsigned __int8 *)a1 + 76);
  *(_DWORD *)(a2 + 148) = v2 | 0x3FFFFFFF;
  *(_DWORD *)(a2 + 120) = v15;
  *(_DWORD *)(a2 + 124) = v16;
  result = (__n128)a1[5];
  *(_DWORD *)(a2 + 148) = v2 | 0x7FFFFFFF;
  result.n128_u32[1] = *((_DWORD *)a1 + 21);
  *(_DWORD *)(a2 + 148) = -1;
  result.n128_u32[2] = *((_DWORD *)a1 + 22);
  *(_DWORD *)(a2 + 152) = v3 | 1;
  result.n128_u32[3] = *((_DWORD *)a1 + 23);
  *(_DWORD *)(a2 + 152) = v3 | 3;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

BOOL sub_1016B273C(_DWORD *a1, int *a2)
{
  int v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL8 result;
  int v19;
  int v20;

  v4 = *(unsigned __int8 *)a1;
  a2[13] |= 1u;
  a2[8] = v4;
  v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), 16);
  for (i = 1; i != 385; i += 24)
  {
    v7 = a2[5];
    v8 = a2[4];
    if ((int)v8 >= v7)
    {
      if (v7 == a2[6])
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v7 + 1);
        v7 = a2[5];
      }
      a2[5] = v7 + 1;
      sub_1016B92D8();
    }
    v9 = *((_QWORD *)a2 + 1);
    a2[4] = v8 + 1;
    sub_1016B25F8((__int128 *)&a1[i], *(_QWORD *)(v9 + 8 * v8));
  }
  v10 = a1[385];
  v11 = v10 + 1;
  v12 = v10 + 2;
  if (v11 >= 5)
    v13 = 0;
  else
    v13 = v12;
  if (!sub_1002BC6DC(v13))
    sub_10190E840();
  a2[13] |= 4u;
  a2[9] = v13;
  v14 = a1[386];
  v15 = v14 + 1;
  v16 = v14 + 2;
  if (v15 >= 6)
    v17 = 0;
  else
    v17 = v16;
  result = sub_10001B780(v17);
  if (!result)
    sub_10190E818();
  v19 = a2[13];
  a2[13] = v19 | 8;
  v20 = a1[387];
  a2[13] = v19 | 0x18;
  a2[10] = v17;
  a2[11] = v20;
  return result;
}

uint64_t sub_1016B2878(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a2 + 28) |= 1u;
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)(v2 + 24);
  *(_WORD *)(v2 + 16) = *(_WORD *)result;
  v4 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v2 + 24) = v3 | 7;
  *(_QWORD *)(v2 + 8) = v4;
  *(_DWORD *)(a2 + 28) |= 2u;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 16) |= 0xFu;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 16);
  return result;
}

void sub_1016B2940()
{
  operator delete();
}

std::string *sub_1016B2978(std::string *__str, uint64_t a2)
{
  const std::string *v4;
  int v5;
  std::string *v6;
  uint64_t v7;
  std::string::value_type v8;

  v4 = (const std::string *)&__str->__r_.__value_.__r.__words[1];
  v5 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 32) = __str->__r_.__value_.__s.__data_[0];
  *(_DWORD *)(a2 + 40) = v5 | 3;
  v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, v4);
  *(_DWORD *)(a2 + 40) |= 4u;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    operator new();
  v8 = __str[1].__r_.__value_.__s.__data_[8];
  *(_DWORD *)(v7 + 16) |= 1u;
  *(_BYTE *)(v7 + 8) = v8;
  *(_DWORD *)(a2 + 40) |= 8u;
  if (!*(_QWORD *)(a2 + 24))
    operator new();
  return sub_1016B2AC4((unsigned __int16 *)&__str[1].__r_.__value_.__r.__words[2], *(_QWORD *)(a2 + 24));
}

void sub_1016B2A84()
{
  operator delete();
}

std::string *sub_1016B2AC4(unsigned __int16 *a1, uint64_t a2)
{
  int v4;
  std::string *v5;
  std::string *result;

  v4 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 16) = *a1;
  *(_DWORD *)(a2 + 28) = v4 | 3;
  v5 = *(std::string **)(a2 + 8);
  if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  result = std::string::operator=(v5, (const std::string *)(a1 + 4));
  *(_DWORD *)(a2 + 28) |= 0x3Cu;
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a1 + 8);
  return result;
}

BOOL sub_1016B2B4C(unsigned __int16 *a1, uint64_t a2, uint8x8_t a3)
{
  int v4;
  int v5;
  uint32x4_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _BOOL8 result;

  v4 = *(_DWORD *)(a2 + 64);
  v5 = (__int16)a1[1];
  *(_DWORD *)(a2 + 8) = *a1;
  *(_DWORD *)(a2 + 12) = v5;
  a3.i32[0] = *((_DWORD *)a1 + 1);
  v6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  *(uint32x4_t *)(a2 + 16) = v6;
  v7 = a1[5];
  *(_DWORD *)(a2 + 32) = *((unsigned __int8 *)a1 + 8);
  *(_DWORD *)(a2 + 36) = v7;
  *(_DWORD *)(a2 + 64) = v4 | 0xFFF;
  v6.i32[0] = *((_DWORD *)a1 + 3);
  *(uint32x4_t *)(a2 + 40) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
  v8 = *((_DWORD *)a1 + 4);
  switch(v8)
  {
    case 0:
      v9 = 1;
      break;
    case 1:
      v9 = 2;
      break;
    case 2:
      v9 = 3;
      break;
    case 3:
      v9 = 4;
      break;
    default:
      if (v8 == 255)
        v9 = 5;
      else
        v9 = 0;
      break;
  }
  result = sub_10001B780(v9);
  if (!result)
    sub_10190E868();
  *(_DWORD *)(a2 + 64) |= 0x1000u;
  *(_DWORD *)(a2 + 56) = v9;
  return result;
}

int *sub_1016B2C1C(int *result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_DWORD *)(a2 + 28) |= 1u;
  v2 = *(_DWORD **)(a2 + 8);
  if (!v2)
    operator new();
  v3 = *result;
  v4 = v2[5];
  v2[5] = v4 | 1;
  v5 = result[1];
  v2[5] = v4 | 3;
  v2[2] = v3;
  v2[3] = v5;
  v6 = *((unsigned __int16 *)result + 4);
  v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = v7 | 2;
  v8 = result[3];
  *(_DWORD *)(a2 + 28) = v7 | 6;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v8;
  return result;
}

void sub_1016B2CBC()
{
  operator delete();
}

int *sub_1016B2CE0(unsigned __int16 *a1, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_DWORD *)(a2 + 28) |= 1u;
  v2 = *(_DWORD **)(a2 + 8);
  if (!v2)
    operator new();
  v3 = *a1;
  v4 = v2[6];
  v2[6] = v4 | 1;
  v5 = *((_DWORD *)a1 + 1);
  v2[2] = v3;
  v2[3] = v5;
  v6 = a1[4];
  v2[6] = v4 | 7;
  v2[4] = v6;
  *(_DWORD *)(a2 + 28) |= 2u;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    operator new();
  return sub_1016B2C1C((int *)a1 + 3, v7);
}

void sub_1016B2DA8()
{
  operator delete();
}

int *sub_1016B2DE8(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = *(int *)a1;
  if (v4 > 4)
    v5 = 0;
  else
    v5 = dword_101CCE0A4[v4];
  if (!sub_1002BC6DC(v5))
    sub_10190E750();
  v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v6 | 3;
  if (!*(_QWORD *)(a2 + 8))
    operator new();
  return sub_1016B2CE0(a1 + 2, *(_QWORD *)(a2 + 8));
}

void sub_1016B2E84()
{
  operator delete();
}

BOOL sub_1016B2EA8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint8x8_t v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 result;
  int v22;
  int v23;

  v4 = *(_DWORD *)(a2 + 68);
  v5 = *(unsigned __int8 *)(a1 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 68) = v4 | 7;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    operator new();
  sub_1016B2DE8((unsigned __int16 *)(a1 + 8), v6);
  for (i = 40; i != 360; i += 20)
  {
    v9 = *(_DWORD *)(a2 + 36);
    v10 = *(int *)(a2 + 32);
    if ((int)v10 >= v9)
    {
      if (v9 == *(_DWORD *)(a2 + 40))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 24), v9 + 1);
        v9 = *(_DWORD *)(a2 + 36);
      }
      *(_DWORD *)(a2 + 36) = v9 + 1;
      sub_1016B9338();
    }
    v11 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = v10 + 1;
    sub_1016B2B4C((unsigned __int16 *)(a1 + i), *(_QWORD *)(v11 + 8 * v10), v7);
  }
  v12 = *(unsigned __int8 *)(a1 + 360);
  *(_DWORD *)(a2 + 68) |= 0x10u;
  *(_DWORD *)(a2 + 48) = v12;
  v13 = *(_DWORD *)(a1 + 364);
  v14 = v13 + 1;
  v15 = v13 + 2;
  if (v14 >= 5)
    v16 = 0;
  else
    v16 = v15;
  if (!sub_1002BC6DC(v16))
    sub_10190E8B8();
  *(_DWORD *)(a2 + 68) |= 0x20u;
  *(_DWORD *)(a2 + 52) = v16;
  v17 = *(_DWORD *)(a1 + 368);
  v18 = v17 + 1;
  v19 = v17 + 2;
  if (v18 >= 6)
    v20 = 0;
  else
    v20 = v19;
  result = sub_10001B780(v20);
  if (!result)
    sub_10190E890();
  v22 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = v22 | 0x40;
  v23 = *(_DWORD *)(a1 + 372);
  *(_DWORD *)(a2 + 68) = v22 | 0xC0;
  *(_DWORD *)(a2 + 56) = v20;
  *(_DWORD *)(a2 + 60) = v23;
  return result;
}

void sub_1016B3028()
{
  operator delete();
}

int *sub_1016B304C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  v4 = sub_10173DC80(*(_DWORD *)a1);
  if (!sub_10010285C(v4))
    sub_10190E930();
  *(_DWORD *)(a2 + 28) |= 1u;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = *(int *)(a1 + 4);
  if (v5 > 4)
    v6 = 0;
  else
    v6 = dword_101CCE0A4[v5];
  if (!sub_1002BC6DC(v6))
    sub_10190E908();
  v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 28) = v7 | 6;
  if (!*(_QWORD *)(a2 + 16))
    operator new();
  return sub_1016B2CE0((unsigned __int16 *)(a1 + 8), *(_QWORD *)(a2 + 16));
}

void sub_1016B3110()
{
  operator delete();
}

uint64_t sub_1016B3134(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 0x11)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionMethod", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::PositionMethod", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::PositionMethod ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionMethod)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B32F4(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionReqType", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::PositionReqType", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::PositionReqType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionReqType)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B34B4(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionSession", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::PositionSession", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::PositionSession ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionSession)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B3674(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PositionProtocol", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::PositionProtocol", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::PositionProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PositionProtocol)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B3834(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((a1 - 1) < 0x10)
    return dword_101CCE0B8[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SessionErrorCode", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v7[0] = 67109120;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::SessionErrorCode", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::SessionErrorCode ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SessionErrorCode)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_1016B3A04(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::TriggerType", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::TriggerType", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Supl::TriggerType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::TriggerType)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B3BC4(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 0x20)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::Status", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::Status", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Supl::Status ProtobufUtil::fromProtobuf(proto::gnss::Emergency::Status)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B3D84(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 0x17)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::EndCause", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::EndCause", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Supl::EndCause ProtobufUtil::fromProtobuf(proto::gnss::Emergency::EndCause)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B3F44(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SLPAddressType", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::SLPAddressType", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Supl::SLPAddressType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SLPAddressType)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1016B4104(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 8)
    return dword_101CCE0F8[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ErrorCodes", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::ErrorCodes", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ErrorCodes ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ErrorCodes)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 4294967294;
}

uint64_t sub_1016B42CC(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 4)
    return (a1 - 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ClsModemState", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::ClsModemState", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ClsModemState ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ClsModemState)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1016B448C(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 5)
    return (a1 - 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::SessionProtocol", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::SessionProtocol", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::SessionProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::SessionProtocol)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1016B464C(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 6)
    return (a1 - 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::PosProtocol", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::PosProtocol", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::PosProtocol ProtobufUtil::fromProtobuf(proto::gnss::Emergency::PosProtocol)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1016B480C(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 3)
    return (a1 - 2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::FixType", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::FixType", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::FixType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::FixType)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1016B49CC(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if ((a1 - 1) < 5)
    return dword_101CCE118[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ClsNetworkType", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v7[0] = 67109120;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::ClsNetworkType", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ClsNetworkType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ClsNetworkType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_1016B4B9C(int a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::GnssTimeId", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::GnssTimeId", v6);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::GnssTimeId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::GnssTimeId)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 4;
  }
  return result;
}

uint64_t sub_1016B4D54(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 8)
    return dword_101CCE12C[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::ShapeType", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::ShapeType", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::ShapeType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::ShapeType)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 255;
}

uint64_t sub_1016B4F1C(int a1)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if ((a1 - 1) < 5)
    return dword_101CCE14C[a1 - 1];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::VelocityType", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::VelocityType", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::VelocityType ProtobufUtil::fromProtobuf(proto::gnss::Emergency::VelocityType)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 255;
}

uint64_t sub_1016B50E4(int a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::MultipathIndicator", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::MultipathIndicator", v6);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::MultipathIndicator ProtobufUtil::fromProtobuf(proto::gnss::Emergency::MultipathIndicator)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 4;
  }
  return result;
}

uint64_t sub_1016B529C(int a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::GanssId", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::GanssId", v6);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::GanssId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::GanssId)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 5;
  }
  return result;
}

uint64_t sub_1016B5454(int a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  result = (a1 - 1);
  if (result >= 6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::LcsGanssId", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v6[0] = 67109120;
      v6[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::LcsGanssId", v6);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::LcsGanssId ProtobufUtil::fromProtobuf(proto::gnss::Emergency::LcsGanssId)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return 5;
  }
  return result;
}

uint64_t sub_1016B560C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 16);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 24);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(result + 56);
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = sub_1016B3134(*(_DWORD *)(result + 60));
  *(_DWORD *)(a2 + 52) = result;
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = sub_1016B34B4(*(_DWORD *)(v3 + 64));
  *(_DWORD *)(a2 + 56) = result;
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = sub_1016B3674(*(_DWORD *)(v3 + 68));
  *(_DWORD *)(a2 + 60) = result;
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  result = sub_1016B32F4(*(_DWORD *)(v3 + 96));
  *(_DWORD *)(a2 + 88) = result;
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  result = sub_1016B3834(*(_DWORD *)(v3 + 100));
  *(_DWORD *)(a2 + 92) = result;
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(v3 + 104);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  *(_BYTE *)(a2 + 97) = *(_BYTE *)(v3 + 105);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      return result;
    goto LABEL_20;
  }
LABEL_39:
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
    return result;
LABEL_20:
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v3 + 108);
  return result;
}

uint64_t sub_1016B578C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 32);
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 1) = *(_DWORD *)(result + 12);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_BYTE *)(a2 + 2) = *(_DWORD *)(result + 16);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_11:
    *(_BYTE *)(a2 + 6) = *(_DWORD *)(result + 24);
    return result;
  }
LABEL_10:
  *(_WORD *)(a2 + 4) = *(_DWORD *)(result + 20);
  if ((v2 & 0x10) != 0)
    goto LABEL_11;
  return result;
}

void sub_1016B57E4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  v4 = *(_DWORD *)(a1 + 44);
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = sub_1016B3F44(*(_DWORD *)(a1 + 12));
  if ((*(_DWORD *)(a1 + 44) & 4) != 0)
LABEL_4:
    std::string::operator=((std::string *)(a2 + 8), *(const std::string **)(a1 + 16));
LABEL_5:
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_DWORD *)(a1 + 32);
  if ((int)v7 <= (unint64_t)(v6 - v5))
  {
    if ((int)v7 < (unint64_t)(v6 - v5))
    {
      LODWORD(v6) = v5 + v7;
      *(_QWORD *)(a2 + 40) = v5 + (int)v7;
    }
  }
  else
  {
    sub_1005176A0((unint64_t *)(a2 + 32), (int)v7 - (v6 - v5));
    v7 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_QWORD *)(a2 + 40);
  }
  v8 = v6 - v5;
  if ((int)v7 >= (int)v8)
    v9 = v8;
  else
    v9 = v7;
  if ((int)v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if (i >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v11 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v11);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
      }
      *(_BYTE *)(*(_QWORD *)(a2 + 32) + i) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * i);
    }
  }
}

void sub_1016B591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B5934(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310DA8 + 8);
    sub_1016B57E4(v5, a2);
    v4 = *(_DWORD *)(a1 + 24);
  }
  if ((v4 & 2) != 0)
    *(_DWORD *)(a2 + 56) = sub_1016B3A04(*(_DWORD *)(a1 + 16));
}

void sub_1016B5990(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = sub_1016B3134(*(_DWORD *)(a1 + 40));
    v4 = *(_DWORD *)(a1 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310DB0 + 8);
  sub_1016B578C(v5, a2 + 4);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_19;
    goto LABEL_13;
  }
LABEL_10:
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_102310DB0 + 16);
  sub_1016B57E4(v6, a2 + 16);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 8) != 0)
  {
LABEL_13:
    v7 = *(_QWORD *)(a1 + 24);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310DB0 + 24);
    v8 = *(_DWORD *)(v7 + 16);
    if ((v8 & 1) != 0)
      *(_BYTE *)(a2 + 72) = *(_BYTE *)(v7 + 8);
    if ((v8 & 2) != 0)
      *(_BYTE *)(a2 + 73) = *(_BYTE *)(v7 + 9);
  }
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (!v9)
      v9 = *(_QWORD *)(qword_102310DB0 + 32);
    sub_1016B5934(v9, a2 + 80);
  }
}

_DWORD *sub_1016B5A8C(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = result;
  v4 = result[26];
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = result[2];
    v4 = result[26];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (_DWORD *)sub_1016B3134(result[3]);
  *(_DWORD *)(a2 + 4) = (_DWORD)result;
  v4 = v3[26];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = (_DWORD *)sub_1016B3BC4(v3[4]);
  *(_DWORD *)(a2 + 8) = (_DWORD)result;
  v4 = v3[26];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = (_DWORD *)sub_1016B3D84(v3[5]);
  *(_DWORD *)(a2 + 12) = (_DWORD)result;
  v4 = v3[26];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 3);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  *(_QWORD *)(a2 + 24) = *((_QWORD *)v3 + 4);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(a2 + 32) = *((_QWORD *)v3 + 5);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 6);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  *(_QWORD *)(a2 + 48) = *((_QWORD *)v3 + 7);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v3 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  *(_QWORD *)(a2 + 64) = *((_QWORD *)v3 + 9);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  *(_BYTE *)(a2 + 72) = *((_BYTE *)v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  *(_BYTE *)(a2 + 73) = *((_BYTE *)v3 + 97);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  *(_BYTE *)(a2 + 74) = *((_BYTE *)v3 + 98);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      return result;
LABEL_35:
    v6 = *((_QWORD *)v3 + 11);
    if (!v6)
      v6 = *(_QWORD *)(qword_102310DC0 + 88);
    v7 = *(_DWORD *)(v6 + 28);
    if ((v7 & 1) != 0)
    {
      *(_DWORD *)(a2 + 128) = *(_DWORD *)(v6 + 8);
      v7 = *(_DWORD *)(v6 + 28);
      if ((v7 & 2) == 0)
      {
LABEL_39:
        if ((v7 & 4) == 0)
          return result;
        goto LABEL_40;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_39;
    }
    *(_WORD *)(a2 + 132) = *(_DWORD *)(v6 + 12);
    if ((v7 & 4) == 0)
      return result;
LABEL_40:
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(v6 + 16);
    return result;
  }
LABEL_32:
  v5 = *((_QWORD *)v3 + 10);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310DC0 + 80);
  result = (_DWORD *)sub_1016B5C30(v5, a2 + 80);
  if ((v3[26] & 0x8000) != 0)
    goto LABEL_35;
  return result;
}

uint64_t sub_1016B5C30(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 60);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 16);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 24);
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_15:
    *(_BYTE *)(a2 + 41) = *(_DWORD *)(result + 52);
    return result;
  }
LABEL_14:
  *(_BYTE *)(a2 + 40) = *(_DWORD *)(result + 48);
  if ((v2 & 0x40) != 0)
    goto LABEL_15;
  return result;
}

uint64_t sub_1016B5CA8(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;

  if ((*(_BYTE *)(result + 36) & 1) != 0)
  {
    v3 = *(_DWORD **)(result + 8);
    if (!v3)
      v3 = *(_DWORD **)(qword_102310DD0 + 8);
    v4 = v3[5];
    if ((v4 & 1) != 0)
    {
      *(_DWORD *)a2 = v3[2];
      v4 = v3[5];
    }
    if ((v4 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v3[3];
  }
  v5 = *(_DWORD *)(result + 36);
  if ((v5 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v5 & 4) == 0)
    {
LABEL_10:
      if ((v5 & 8) == 0)
        goto LABEL_11;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(_WORD *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0)
      return result;
    goto LABEL_12;
  }
LABEL_16:
  *(_WORD *)(a2 + 12) = *(_DWORD *)(result + 24);
  if ((v5 & 0x10) == 0)
    return result;
LABEL_12:
  result = sub_1016B42CC(*(_DWORD *)(result + 28));
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1016B5D4C(uint64_t result, _DWORD *a2)
{
  int *v3;
  int v4;

  v3 = (int *)result;
  v4 = *(_DWORD *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B448C(*(_DWORD *)(result + 8));
    *a2 = result;
    v4 = v3[6];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = sub_1016B464C(v3[3]);
  a2[1] = result;
  if ((v3[6] & 4) == 0)
    return result;
LABEL_4:
  a2[2] = v3[4];
  return result;
}

uint64_t sub_1016B5DB0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;

  v3 = result;
  v4 = *(_DWORD *)(result + 28);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310DF0 + 8);
    result = sub_1016B5CA8(v5, a2);
    v4 = *(_DWORD *)(v3 + 28);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *(_DWORD **)(v3 + 16);
    if (!v6)
      v6 = *(_DWORD **)(qword_102310DF0 + 16);
    v7 = v6[5];
    if ((v7 & 1) != 0)
    {
      *(_DWORD *)(a2 + 20) = v6[2];
      v7 = v6[5];
    }
    if ((v7 & 2) != 0)
      *(_DWORD *)(a2 + 24) = v6[3];
  }
  return result;
}

uint64_t sub_1016B5E38(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310E08 + 8);
    result = sub_1016B5DB0(v5, a2);
    v4 = *(_DWORD *)(v3 + 36);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *(_DWORD **)(v3 + 16);
    if (!v6)
      v6 = *(_DWORD **)(qword_102310E08 + 16);
    v7 = v6[5];
    if ((v7 & 1) != 0)
    {
      *(_DWORD *)(a2 + 28) = v6[2];
      v7 = v6[5];
    }
    if ((v7 & 2) != 0)
      *(_BYTE *)(a2 + 32) = v6[3];
  }
  if ((*(_BYTE *)(v3 + 36) & 4) != 0)
  {
    v8 = *(_DWORD **)(v3 + 24);
    if (!v8)
      v8 = *(_DWORD **)(qword_102310E08 + 24);
    v9 = v8[5];
    if ((v9 & 1) != 0)
    {
      *(_DWORD *)(a2 + 36) = v8[2];
      v9 = v8[5];
    }
    if ((v9 & 2) != 0)
      *(_BYTE *)(a2 + 40) = v8[3];
  }
  return result;
}

uint64_t sub_1016B5F00(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B49CC(*(_DWORD *)(result + 16));
    *a2 = result;
    if ((*(_DWORD *)(v3 + 24) & 2) == 0)
      return result;
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  v5 = *(_QWORD *)(v3 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310E10 + 8);
  return sub_1016B5E38(v5, (uint64_t)(a2 + 1));
}

_DWORD *sub_1016B5F68(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;

  v3 = result;
  v4 = result[10];
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = result[2];
    v4 = result[10];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_BYTE *)(a2 + 6) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = (_DWORD *)sub_1016B480C(result[5]);
  *(_DWORD *)(a2 + 8) = (_DWORD)result;
  v4 = v3[10];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    goto LABEL_13;
  }
LABEL_12:
  *(_DWORD *)(a2 + 12) = v3[8];
  if ((v3[10] & 0x20) == 0)
    return result;
LABEL_13:
  v5 = (_DWORD *)*((_QWORD *)v3 + 3);
  if (!v5)
    v5 = *(_DWORD **)(qword_102310E20 + 24);
  v6 = v5[6];
  if ((v6 & 1) != 0)
  {
    *(_DWORD *)(a2 + 16) = v5[2];
    v6 = v5[6];
    if ((v6 & 2) == 0)
    {
LABEL_17:
      if ((v6 & 4) == 0)
        return result;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_17;
  }
  *(_WORD *)(a2 + 20) = v5[3];
  if ((v6 & 4) == 0)
    return result;
LABEL_18:
  *(_BYTE *)(a2 + 22) = v5[4];
  return result;
}

uint64_t sub_1016B6044(uint64_t result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  int v4;

  v2 = *(_DWORD *)(result + 32);
  if ((v2 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 8);
    v2 = *(_DWORD *)(result + 32);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(result + 12);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
    goto LABEL_9;
  }
LABEL_8:
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 24);
  if ((*(_DWORD *)(result + 32) & 8) == 0)
    return result;
LABEL_9:
  v3 = *(_DWORD **)(result + 16);
  if (!v3)
    v3 = *(_DWORD **)(qword_102310E28 + 16);
  v4 = v3[6];
  if ((v4 & 1) != 0)
  {
    *(_WORD *)(a2 + 12) = v3[2];
    if ((v4 & 2) == 0)
    {
LABEL_13:
      if ((v4 & 4) != 0)
        goto LABEL_17;
      return result;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_13;
  }
  *(_WORD *)(a2 + 14) = v3[3];
  if ((v4 & 4) != 0)
LABEL_17:
    *(_DWORD *)(a2 + 16) = v3[4];
  return result;
}

uint64_t sub_1016B60D8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(result + 36);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      *(_WORD *)(a2 + 10) = *(_DWORD *)(result + 20);
      if ((v2 & 8) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 4) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v2 & 8) == 0)
    return result;
LABEL_9:
  v3 = *(_QWORD *)(result + 24);
  if (!v3)
    v3 = *(_QWORD *)(qword_102310E30 + 24);
  return sub_1016B6044(v3, a2 + 12);
}

uint64_t sub_1016B6134(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(result + 28);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    *(_WORD *)(a2 + 2) = *(_DWORD *)(result + 12);
    if ((v2 & 4) == 0)
      return result;
    goto LABEL_7;
  }
  *(_BYTE *)a2 = *(_DWORD *)(result + 8);
  if ((v2 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v2 & 4) == 0)
    return result;
LABEL_7:
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    v3 = *(_QWORD *)(qword_102310E38 + 16);
  return sub_1016B6044(v3, a2 + 4);
}

uint64_t sub_1016B6180(uint64_t result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  int v4;

  v2 = *(_DWORD *)(result + 60);
  if ((v2 & 1) != 0)
  {
    *(_WORD *)a2 = *(_DWORD *)(result + 8);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 12);
  v2 = *(_DWORD *)(result + 60);
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
LABEL_10:
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 20);
    v2 = *(_DWORD *)(result + 60);
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_9:
  *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  if ((v2 & 8) != 0)
    goto LABEL_10;
LABEL_5:
  if ((v2 & 0x10) == 0)
    goto LABEL_17;
LABEL_11:
  v3 = *(_DWORD **)(result + 24);
  if (!v3)
    v3 = *(_DWORD **)(qword_102310E40 + 24);
  v4 = v3[6];
  if ((v4 & 1) != 0)
  {
    *(_WORD *)(a2 + 16) = v3[2];
    if ((v4 & 2) == 0)
    {
LABEL_15:
      if ((v4 & 4) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_15;
  }
  *(_WORD *)(a2 + 18) = v3[3];
  if ((v4 & 4) != 0)
  {
LABEL_16:
    *(_DWORD *)(a2 + 20) = v3[4];
    v2 = *(_DWORD *)(result + 60);
  }
LABEL_17:
  if ((v2 & 0x20) != 0)
  {
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 32);
    v2 = *(_DWORD *)(result + 60);
    if ((v2 & 0x40) == 0)
    {
LABEL_19:
      if ((v2 & 0x80) == 0)
        goto LABEL_20;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_19;
  }
  *(_WORD *)(a2 + 28) = *(_DWORD *)(result + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_27;
  }
LABEL_26:
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 40);
  v2 = *(_DWORD *)(result + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_28;
  }
LABEL_27:
  *(_BYTE *)(a2 + 36) = *(_DWORD *)(result + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_29:
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 52);
    return result;
  }
LABEL_28:
  *(_BYTE *)(a2 + 37) = *(_DWORD *)(result + 48);
  if ((v2 & 0x400) != 0)
    goto LABEL_29;
  return result;
}

uint64_t sub_1016B6290(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_DWORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310E48 + 8);
    result = sub_1016B60D8(v5, a2);
    v4 = *(_DWORD *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6 = *(_QWORD *)(v3 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_102310E48 + 16);
  result = sub_1016B6134(v6, a2 + 32);
  if ((*(_DWORD *)(v3 + 36) & 4) != 0)
  {
LABEL_11:
    v7 = *(_QWORD *)(v3 + 24);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310E48 + 24);
    return sub_1016B6180(v7, a2 + 56);
  }
  return result;
}

uint64_t sub_1016B6338(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_DWORD *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B49CC(*(_DWORD *)(result + 16));
    *a2 = result;
    if ((*(_DWORD *)(v3 + 24) & 2) == 0)
      return result;
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  v5 = *(_QWORD *)(v3 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310E50 + 8);
  return sub_1016B6290(v5, (uint64_t)(a2 + 2));
}

uint64_t sub_1016B63A0(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  int v4;

  v3 = (_DWORD *)result;
  v4 = *(_DWORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B4B9C(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    v4 = v3[9];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = v3[3];
  v4 = v3[9];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *(_WORD *)(a2 + 8) = v3[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_BYTE *)(a2 + 10) = v3[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    goto LABEL_7;
  }
LABEL_13:
  result = sub_1016B480C(v3[6]);
  *(_DWORD *)(a2 + 12) = result;
  if ((v3[9] & 0x20) == 0)
    return result;
LABEL_7:
  *(_WORD *)(a2 + 16) = v3[7];
  return result;
}

uint64_t sub_1016B6438(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;

  if ((*(_BYTE *)(result + 24) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(qword_102310E68 + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  if ((*(_BYTE *)(result + 24) & 2) != 0)
    *(_BYTE *)(a2 + 8) = *(_DWORD *)(result + 16);
  return result;
}

uint64_t sub_1016B648C(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(result + 36) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(qword_102310E70 + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  v4 = *(_DWORD *)(result + 36);
  if ((v4 & 2) != 0)
  {
    *(_BYTE *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0)
        goto LABEL_11;
      goto LABEL_15;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(_BYTE *)(a2 + 9) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
LABEL_16:
    *(_BYTE *)(a2 + 11) = *(_DWORD *)(result + 28);
    return result;
  }
LABEL_15:
  *(_BYTE *)(a2 + 10) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_1016B6514(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(result + 44) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(qword_102310E78 + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  v4 = *(_DWORD *)(result + 44);
  if ((v4 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(_BYTE *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  *(_BYTE *)(a2 + 11) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_19;
  }
LABEL_18:
  *(_BYTE *)(a2 + 12) = *(_DWORD *)(result + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      return result;
LABEL_20:
    *(_BYTE *)(a2 + 14) = *(_DWORD *)(result + 36);
    return result;
  }
LABEL_19:
  *(_BYTE *)(a2 + 13) = *(_DWORD *)(result + 32);
  if ((v4 & 0x40) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_1016B65BC(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(result + 40) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(qword_102310E80 + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  v4 = *(_DWORD *)(result + 40);
  if ((v4 & 2) != 0)
  {
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
    if ((v4 & 4) == 0)
    {
LABEL_10:
      if ((v4 & 8) == 0)
        goto LABEL_11;
      goto LABEL_16;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_10;
  }
  *(_BYTE *)(a2 + 10) = *(_DWORD *)(result + 20);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a2 + 11) = *(_DWORD *)(result + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      return result;
LABEL_18:
    *(_BYTE *)(a2 + 13) = *(_DWORD *)(result + 32);
    return result;
  }
LABEL_17:
  *(_BYTE *)(a2 + 12) = *(_DWORD *)(result + 28);
  if ((v4 & 0x20) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_1016B6654(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;

  if ((*(_BYTE *)(result + 24) & 1) != 0)
  {
    v2 = *(_DWORD **)(result + 8);
    if (!v2)
      v2 = *(_DWORD **)(qword_102310E88 + 8);
    v3 = v2[5];
    if ((v3 & 1) != 0)
    {
      *(_DWORD *)a2 = v2[2];
      v3 = v2[5];
    }
    if ((v3 & 2) != 0)
      *(_DWORD *)(a2 + 4) = v2[3];
  }
  if ((*(_BYTE *)(result + 24) & 2) != 0)
    *(_WORD *)(a2 + 8) = *(_DWORD *)(result + 16);
  return result;
}

void sub_1016B66A8(uint64_t a1, _BYTE *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  char v10;
  _BYTE v11[48];

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    *a2 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 1)
  {
    v4 = 0;
    if (v3 >= 15)
      v5 = 15;
    else
      v5 = v3;
    v6 = a2 + 8;
    do
    {
      if (v4 >= *(int *)(a1 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v7 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v7);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
      }
      v8 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v9 = v8[5];
      if ((v9 & 1) != 0)
      {
        *(v6 - 1) = v8[2];
        v9 = v8[5];
      }
      if ((v9 & 2) != 0)
        *v6 = v8[3];
      ++v4;
      v6 += 2;
    }
    while (v5 != v4);
  }
}

void sub_1016B6794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B67AC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310E98 + 8);
    sub_1016B6438(v5, a2);
    v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_102310E98 + 16);
  sub_1016B648C(v6, a2 + 12);
  v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310E98 + 24);
  sub_1016B6514(v7, a2 + 24);
  v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_19;
  }
LABEL_16:
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310E98 + 32);
  sub_1016B65BC(v8, a2 + 40);
  if ((*(_DWORD *)(a1 + 72) & 0x10) != 0)
  {
LABEL_19:
    v9 = *(_DWORD **)(a1 + 40);
    if (!v9)
      v9 = *(_DWORD **)(qword_102310E98 + 40);
    v10 = v9[5];
    if ((v10 & 1) != 0)
    {
      *(_DWORD *)(a2 + 56) = v9[2];
      v10 = v9[5];
    }
    if ((v10 & 2) != 0)
      *(_DWORD *)(a2 + 60) = v9[3];
  }
LABEL_25:
  v11 = *(_DWORD *)(a1 + 72);
  if ((v11 & 0x20) != 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
    if (!v12)
      v12 = *(_QWORD *)(qword_102310E98 + 48);
    sub_1016B6654(v12, a2 + 64);
    v11 = *(_DWORD *)(a1 + 72);
    if ((v11 & 0x40) == 0)
    {
LABEL_27:
      if ((v11 & 0x80) == 0)
        return;
      goto LABEL_28;
    }
  }
  else if ((v11 & 0x40) == 0)
  {
    goto LABEL_27;
  }
  v13 = *(_QWORD *)(a1 + 56);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310E98 + 56);
  sub_1016B66A8(v13, (_BYTE *)(a2 + 76));
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
LABEL_28:
    *(_BYTE *)(a2 + 200) = *(_DWORD *)(a1 + 64);
}

void sub_1016B692C(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    *a2 = sub_1016B4D54(*(_DWORD *)(a1 + 16));
    if ((*(_DWORD *)(a1 + 24) & 2) == 0)
      return;
  }
  else if ((v4 & 2) == 0)
  {
    return;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310EA0 + 8);
  sub_1016B67AC(v5, (uint64_t)(a2 + 1));
}

_DWORD *sub_1016B6994(_DWORD *result, uint64_t a2)
{
  int v2;

  v2 = result[7];
  if ((v2 & 1) != 0)
  {
    *(_WORD *)a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    *(_BYTE *)(a2 + 5) = result[5];
    return result;
  }
LABEL_8:
  *(_BYTE *)(a2 + 4) = result[4];
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

_DWORD *sub_1016B69DC(_DWORD *result, uint64_t a2)
{
  int v2;

  v2 = result[9];
  if ((v2 & 1) != 0)
  {
    *(_WORD *)a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_BYTE *)(a2 + 4) = result[4];
  if ((v2 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  *(_BYTE *)(a2 + 5) = result[5];
  if ((v2 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_13:
    *(_BYTE *)(a2 + 7) = result[7];
    return result;
  }
LABEL_12:
  *(_BYTE *)(a2 + 6) = result[6];
  if ((v2 & 0x20) != 0)
    goto LABEL_13;
  return result;
}

_DWORD *sub_1016B6A44(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;

  v3 = result;
  v4 = result[11];
  if ((v4 & 1) != 0)
  {
    v5 = (_DWORD *)*((_QWORD *)result + 1);
    if (!v5)
      v5 = *(_DWORD **)(qword_102310EC8 + 8);
    v6 = v5[5];
    if ((v6 & 1) != 0)
      *(_WORD *)a2 = v5[2];
    if ((v6 & 2) != 0)
      *(_WORD *)(a2 + 2) = v5[3];
  }
  if ((v4 & 2) != 0)
  {
    v7 = (_DWORD *)*((_QWORD *)result + 2);
    if (!v7)
      v7 = *(_DWORD **)(qword_102310EC8 + 16);
    result = sub_1016B6994(v7, a2 + 4);
    v4 = v3[11];
  }
  if ((v4 & 4) != 0)
  {
    v8 = (_DWORD *)*((_QWORD *)v3 + 3);
    if (!v8)
      v8 = *(_DWORD **)(qword_102310EC8 + 24);
    v9 = v8[6];
    if ((v9 & 1) != 0)
    {
      *(_WORD *)(a2 + 10) = v8[2];
      if ((v9 & 2) == 0)
      {
LABEL_17:
        if ((v9 & 4) == 0)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)(a2 + 12) = v8[3];
    if ((v9 & 4) != 0)
LABEL_18:
      *(_BYTE *)(a2 + 14) = v8[4];
  }
LABEL_19:
  if ((v4 & 8) != 0)
  {
    v10 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (!v10)
      v10 = *(_DWORD **)(qword_102310EC8 + 32);
    return sub_1016B69DC(v10, a2 + 16);
  }
  return result;
}

_DWORD *sub_1016B6B44(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;

  v3 = result;
  v4 = result[6];
  if ((v4 & 1) != 0)
  {
    result = (_DWORD *)sub_1016B4F1C(result[4]);
    *a2 = (_DWORD)result;
    if ((v3[6] & 2) == 0)
      return result;
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  v5 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (!v5)
    v5 = *(_DWORD **)(qword_102310ED0 + 8);
  return sub_1016B6A44(v5, (uint64_t)(a2 + 1));
}

void sub_1016B6BAC(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 1) != 0)
  {
    *a2 = sub_1016B4104(*(_DWORD *)(a1 + 8));
    v4 = *(_DWORD *)(a1 + 64);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_13:
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310ED8 + 16);
  sub_1016B5D4C(v5, a2 + 2);
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_16:
  v6 = *(_DWORD **)(a1 + 24);
  if (!v6)
    v6 = *(_DWORD **)(qword_102310ED8 + 24);
  sub_1016B5F68(v6, (uint64_t)(a2 + 5));
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_19:
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310ED8 + 32);
  sub_1016B63A0(v7, (uint64_t)(a2 + 11));
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_22:
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    v8 = *(_QWORD *)(qword_102310ED8 + 40);
  sub_1016B692C(v8, a2 + 16);
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return;
    goto LABEL_9;
  }
LABEL_25:
  v9 = *(_DWORD **)(a1 + 48);
  if (!v9)
    v9 = *(_DWORD **)(qword_102310ED8 + 48);
  sub_1016B6B44(v9, a2 + 68);
  if ((*(_DWORD *)(a1 + 64) & 0x80) != 0)
LABEL_9:
    a2[75] = *(_DWORD *)(a1 + 56);
}

_DWORD *sub_1016B6CE8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;

  v3 = result;
  v4 = result[12];
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = result[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 2) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_BYTE *)(a2 + 3) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_BYTE *)(a2 + 4) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = (_DWORD *)sub_1016B50E4(result[6]);
  *(_DWORD *)(a2 + 8) = (_DWORD)result;
  v4 = v3[12];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_DWORD *)(a2 + 12) = v3[7];
  v4 = v3[12];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_BYTE *)(a2 + 16) = v3[8];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return result;
    goto LABEL_10;
  }
LABEL_19:
  *(_BYTE *)(a2 + 17) = v3[9];
  if ((v4 & 0x100) == 0)
    return result;
LABEL_10:
  *(_DWORD *)(a2 + 20) = v3[10];
  return result;
}

_DWORD *sub_1016B6DA8(_DWORD *result, _BYTE *a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  v2 = result;
  v3 = result[12];
  if ((v3 & 1) != 0)
  {
    *a2 = result[2];
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = result[3];
  if ((v3 & 4) != 0)
LABEL_4:
    a2[2] = result[10];
LABEL_5:
  v4 = result[6];
  if (v4 >= 1)
  {
    v5 = 0;
    if (v4 >= 32)
      v6 = 32;
    else
      v6 = v4;
    v7 = (uint64_t)(a2 + 4);
    do
    {
      if (v5 >= (int)v2[6])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
      }
      result = sub_1016B6CE8(*(_DWORD **)(*((_QWORD *)v2 + 2) + 8 * v5++), v7);
      v7 += 24;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_1016B6EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1016B6EB8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;

  v3 = result;
  v4 = result[6];
  if ((v4 & 1) != 0)
  {
    result = (_DWORD *)sub_1016B529C(result[4]);
    *(_DWORD *)a2 = (_DWORD)result;
    if ((v3[6] & 2) == 0)
      return result;
  }
  else if ((v4 & 2) == 0)
  {
    return result;
  }
  v5 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (!v5)
    v5 = *(_DWORD **)(qword_102310EF0 + 8);
  return sub_1016B6DA8(v5, (_BYTE *)(a2 + 4));
}

_DWORD *sub_1016B6F20(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = result;
  v4 = result[13];
  if ((v4 & 1) != 0)
  {
    result = (_DWORD *)sub_1016B4B9C(result[2]);
    *(_DWORD *)a2 = (_DWORD)result;
    v4 = v3[13];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = v3[3];
  v4 = v3[13];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_WORD *)(a2 + 8) = v3[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_BYTE *)(a2 + 10) = v3[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_BYTE *)(a2 + 11) = v3[8];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    *(_BYTE *)(a2 + 128) = v3[9];
    if ((v4 & 0x80) == 0)
      return result;
    goto LABEL_19;
  }
LABEL_15:
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310EF8 + 24);
  result = (_DWORD *)sub_1016B6338(v5, (_DWORD *)(a2 + 16));
  v4 = v3[13];
  if ((v4 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v4 & 0x80) == 0)
    return result;
LABEL_19:
  v6 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (!v6)
    v6 = *(_DWORD **)(qword_102310EF8 + 40);
  return sub_1016B6EB8(v6, a2 + 132);
}

_DWORD *sub_1016B7008(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;

  v3 = result;
  v4 = result[12];
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = result[2];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_WORD *)(a2 + 4) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_BYTE *)(a2 + 6) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a2 + 7) = result[6];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_BYTE *)(a2 + 8) = result[7];
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = (_DWORD *)sub_1016B50E4(result[8]);
  *(_DWORD *)(a2 + 12) = (_DWORD)result;
  v4 = v3[12];
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return result;
    goto LABEL_10;
  }
LABEL_19:
  *(_DWORD *)(a2 + 16) = v3[9];
  if ((v3[12] & 0x100) == 0)
    return result;
LABEL_10:
  *(_BYTE *)(a2 + 20) = v3[10];
  return result;
}

_DWORD *sub_1016B70C8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char v13;
  _BYTE v14[48];

  v3 = result;
  v4 = result[19];
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = result[2];
    v4 = result[19];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = result[3];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_22:
  *(_BYTE *)(a2 + 6) = result[4];
  if ((v4 & 8) != 0)
LABEL_5:
    *(_BYTE *)(a2 + 7) = result[5];
LABEL_6:
  v5 = result[8];
  if (v5 >= 1)
  {
    v6 = 0;
    if (v5 >= 16)
      v7 = 16;
    else
      v7 = v5;
    v8 = a2 + 8;
    do
    {
      if (v6 >= (int)v3[8])
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v9 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v9);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
      }
      result = sub_1016B7008(*(_DWORD **)(*((_QWORD *)v3 + 3) + 8 * v6++), v8);
      v8 += 24;
    }
    while (v7 != v6);
    v4 = v3[19];
  }
  if ((v4 & 0x20) != 0)
  {
    v10 = *((_QWORD *)v3 + 6);
    if (!v10)
      v10 = *(_QWORD *)(qword_102310F08 + 48);
    result = (_DWORD *)sub_1016B5F00(v10, (_DWORD *)(a2 + 392));
    v4 = v3[19];
    if ((v4 & 0x40) == 0)
    {
LABEL_17:
      if ((v4 & 0x80) == 0)
        goto LABEL_18;
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  *(_BYTE *)(a2 + 440) = v3[14];
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return result;
    goto LABEL_29;
  }
LABEL_28:
  *(_DWORD *)(a2 + 444) = v3[15];
  if ((v3[19] & 0x100) == 0)
    return result;
LABEL_29:
  v11 = (_DWORD *)*((_QWORD *)v3 + 8);
  if (!v11)
    v11 = *(_DWORD **)(qword_102310F08 + 64);
  v12 = v11[6];
  if ((v12 & 1) != 0)
  {
    *(_DWORD *)(a2 + 448) = v11[2];
    v12 = v11[6];
    if ((v12 & 2) == 0)
    {
LABEL_33:
      if ((v12 & 4) == 0)
        return result;
      goto LABEL_34;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_33;
  }
  *(_WORD *)(a2 + 452) = v11[3];
  if ((v12 & 4) == 0)
    return result;
LABEL_34:
  *(_BYTE *)(a2 + 454) = v11[4];
  return result;
}

void sub_1016B728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016B72A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B4104(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    v4 = *(_DWORD *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = *(_DWORD *)(v3 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310F10 + 16);
  result = sub_1016B5D4C(v5, (_DWORD *)(a2 + 8));
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v6 = *(_DWORD **)(v3 + 24);
  if (!v6)
    v6 = *(_DWORD **)(qword_102310F10 + 24);
  result = (uint64_t)sub_1016B70C8(v6, a2 + 20);
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_18:
  v7 = *(_DWORD **)(v3 + 32);
  if (!v7)
    v7 = *(_DWORD **)(qword_102310F10 + 32);
  result = (uint64_t)sub_1016B6F20(v7, a2 + 480);
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    goto LABEL_8;
  }
LABEL_21:
  *(_DWORD *)(a2 + 1392) = *(_DWORD *)(v3 + 40);
  if ((*(_DWORD *)(v3 + 52) & 0x40) == 0)
    return result;
LABEL_8:
  *(_BYTE *)(a2 + 1396) = *(_BYTE *)(v3 + 44);
  return result;
}

void sub_1016B7398(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 1) != 0)
  {
    *(_WORD *)a2 = *(_DWORD *)(a1 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 2) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  *(_BYTE *)(a2 + 4) = *(_DWORD *)(a1 + 16);
  if ((v4 & 8) != 0)
LABEL_5:
    *(_BYTE *)(a2 + 5) = *(_DWORD *)(a1 + 20);
LABEL_6:
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= 1)
  {
    v6 = 0;
    if (v5 >= 15)
      v7 = 15;
    else
      v7 = v5;
    do
    {
      if (v6 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v8);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
      }
      *(_BYTE *)(a2 + 6 + v6) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v6);
      ++v6;
    }
    while (v7 != v6);
  }
  v9 = *(_DWORD *)(a1 + 48);
  if (v9 >= 1)
  {
    v10 = 0;
    if (v9 >= 15)
      v11 = 15;
    else
      v11 = v9;
    do
    {
      if (v10 >= *(int *)(a1 + 48))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v12 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v12);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
      }
      *(_BYTE *)(a2 + 21 + v10) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v10);
      ++v10;
    }
    while (v11 != v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 0x40) != 0)
    *(_BYTE *)(a2 + 36) = *(_DWORD *)(a1 + 56);
}

void sub_1016B753C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B755C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 1) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  *(_BYTE *)(a2 + 6) = *(_DWORD *)(a1 + 16);
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_19:
  *(_BYTE *)(a2 + 7) = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x10) != 0)
LABEL_6:
    *(_BYTE *)(a2 + 8) = *(_DWORD *)(a1 + 40);
LABEL_7:
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 >= 1)
  {
    v5 = 0;
    if (v4 >= 15)
      v6 = 15;
    else
      v6 = v4;
    v7 = a2 + 9;
    do
    {
      if (v5 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
      }
      *(_BYTE *)(v7 + v5) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v5);
      ++v5;
    }
    while (v6 != v5);
  }
}

void sub_1016B7670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B7688(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  char v11;
  _BYTE v12[48];

  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 1) != 0)
  {
    *(_WORD *)a2 = *(_DWORD *)(a1 + 8);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 2) = *(_DWORD *)(a1 + 12);
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_21:
  *(_BYTE *)(a2 + 3) = *(_DWORD *)(a1 + 16);
  if ((v3 & 8) != 0)
LABEL_5:
    *(_BYTE *)(a2 + 4) = *(_DWORD *)(a1 + 20);
LABEL_6:
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 >= 1)
  {
    v5 = 0;
    if (v4 >= 15)
      v6 = 15;
    else
      v6 = v4;
    v7 = (_WORD *)(a2 + 8);
    do
    {
      if (v5 >= *(int *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v8);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
      }
      v9 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8 * v5);
      v10 = v9[5];
      if ((v10 & 1) != 0)
        *((_BYTE *)v7 - 2) = v9[2];
      if ((v10 & 2) != 0)
        *v7 = v9[3];
      ++v5;
      v7 += 2;
    }
    while (v6 != v5);
  }
}

void sub_1016B77A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1016B77BC(_DWORD *result, _BYTE *a2)
{
  int v2;

  v2 = result[7];
  if ((v2 & 1) != 0)
  {
    *a2 = result[2];
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = result[3];
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    a2[3] = result[5];
    return result;
  }
LABEL_8:
  a2[2] = result[4];
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

void sub_1016B7804(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  _BYTE v16[48];

  v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = sub_1016B5454(*(_DWORD *)(a1 + 8));
    v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) != 0)
LABEL_4:
    *(_BYTE *)(a2 + 6) = *(_DWORD *)(a1 + 64);
LABEL_5:
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= 1)
  {
    v6 = 0;
    if (v5 >= 15)
      v7 = 15;
    else
      v7 = v5;
    v8 = (_DWORD *)(a2 + 12);
    do
    {
      if (v6 >= *(int *)(a1 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v9 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v9);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
      }
      v10 = *(_DWORD **)(*(_QWORD *)(a1 + 16) + 8 * v6);
      v11 = v10[5];
      if ((v11 & 1) != 0)
        *((_BYTE *)v8 - 4) = v10[2];
      if ((v11 & 2) != 0)
        *v8 = v10[3];
      ++v6;
      v8 += 2;
    }
    while (v7 != v6);
    v4 = *(_DWORD *)(a1 + 72);
  }
  if ((v4 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      v12 = *(_QWORD *)(qword_102310F48 + 40);
    sub_1016B755C(v12, a2 + 128);
    v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 0x20) == 0)
    {
LABEL_20:
      if ((v4 & 0x40) == 0)
        return;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(a1 + 48);
  if (!v13)
    v13 = *(_QWORD *)(qword_102310F48 + 48);
  sub_1016B7688(v13, a2 + 152);
  if ((*(_DWORD *)(a1 + 72) & 0x40) != 0)
  {
LABEL_31:
    v14 = *(_DWORD **)(a1 + 56);
    if (!v14)
      v14 = *(_DWORD **)(qword_102310F48 + 56);
    sub_1016B77BC(v14, (_BYTE *)(a2 + 218));
  }
}

void sub_1016B79A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B79C0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  v4 = *(_DWORD *)(a1 + 72);
  if ((v4 & 1) != 0)
    *(_BYTE *)a2 = *(_DWORD *)(a1 + 8);
  if ((v4 & 2) != 0)
    *(_BYTE *)(a2 + 1) = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= 1)
  {
    v6 = 0;
    if (v5 >= 8)
      v7 = 8;
    else
      v7 = v5;
    do
    {
      if (v6 >= *(int *)(a1 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 614);
        v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v8);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
      }
      *(_DWORD *)(a2 + 4 + 4 * v6) = sub_1016B5454(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v6));
      ++v6;
    }
    while (v7 != v6);
    v4 = *(_DWORD *)(a1 + 72);
  }
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 32);
    v4 = *(_DWORD *)(a1 + 72);
    if ((v4 & 0x10) == 0)
    {
LABEL_15:
      if ((v4 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 40) = *(_DWORD *)(a1 + 36);
  if ((v4 & 0x20) != 0)
LABEL_16:
    *(_BYTE *)(a2 + 41) = *(_DWORD *)(a1 + 64);
LABEL_17:
  v9 = *(_DWORD *)(a1 + 48);
  if (v9 >= 1)
  {
    v10 = 0;
    if (v9 >= 8)
      v11 = 8;
    else
      v11 = v9;
    v12 = a2 + 44;
    do
    {
      if (v10 >= *(int *)(a1 + 48))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/AppleInternal/Library/BuildRoots/f82e4213-595f-11ef-b136-76625042721f/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h", 825);
        v13 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v13);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
      }
      sub_1016B7804(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v10++), v12);
      v12 += 224;
    }
    while (v11 != v10);
  }
}

void sub_1016B7B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1016B7B90(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a1 + 44);
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = sub_1016B4104(*(_DWORD *)(a1 + 8));
    v4 = *(_DWORD *)(a1 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = *(_DWORD *)(a1 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_9:
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310F58 + 16);
  sub_1016B5D4C(v5, (_DWORD *)(a2 + 8));
  v4 = *(_DWORD *)(a1 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return;
    goto LABEL_15;
  }
LABEL_12:
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    v6 = *(_QWORD *)(qword_102310F58 + 24);
  sub_1016B7398(v6, a2 + 20);
  if ((*(_DWORD *)(a1 + 44) & 0x10) != 0)
  {
LABEL_15:
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      v7 = *(_QWORD *)(qword_102310F58 + 32);
    sub_1016B79C0(v7, a2 + 60);
  }
}

uint64_t sub_1016B7C60(uint64_t result)
{
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v1 = result;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 4)
    {
      return 3;
    }
    else if ((_DWORD)result == 2)
    {
      return 2;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v8 = v1;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::SuplInitDecodeResult", buf, 8u);
      }
      v3 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v3)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7C38);
        v6[0] = 67109120;
        v6[1] = v1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gpsd::SuplInitDecodeResult", v6);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Supl::DecodeResult ProtobufUtil::fromProtobuf(proto::gpsd::SuplInitDecodeResult)", "%s\n", v4);
        if (v5 != buf)
          free(v5);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1016B7E44(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v5 | 1;
  v6 = a1[1];
  *(_DWORD *)(a2 + 52) = v5 | 3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v6;
  v7 = a2 + 16;
  sub_1002A19E0(a2 + 16, 135);
  result = sub_1002A19E0(a2 + 32, 135);
  v9 = 0;
  v10 = a1 + 137;
  do
  {
    v11 = v10[v9 - 135];
    v12 = *(_DWORD *)(a2 + 24);
    if (v12 == *(_DWORD *)(a2 + 28))
    {
      result = sub_1002A19E0(v7, v12 + 1);
      v12 = *(_DWORD *)(a2 + 24);
    }
    v13 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 24) = v12 + 1;
    *(_DWORD *)(v13 + 4 * v12) = v11;
    v14 = *((unsigned __int16 *)v10 + v9);
    v15 = *(_DWORD *)(a2 + 40);
    if (v15 == *(_DWORD *)(a2 + 44))
    {
      result = sub_1002A19E0(a2 + 32, v15 + 1);
      v15 = *(_DWORD *)(a2 + 40);
    }
    v16 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 40) = v15 + 1;
    *(_DWORD *)(v16 + 4 * v15) = v14;
    ++v9;
  }
  while (v9 != 135);
  return result;
}

uint64_t sub_1016B7F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  v4 = a2 + 8;
  result = sub_1002A19E0(a2 + 8, 8);
  v6 = 0;
  do
  {
    v7 = *(__int16 *)(a1 + v6);
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 == *(_DWORD *)(a2 + 20))
    {
      result = sub_1002A19E0(v4, v8 + 1);
      v8 = *(_DWORD *)(a2 + 16);
    }
    v6 += 2;
    v9 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v8 + 1;
    *(_DWORD *)(v9 + 4 * v8) = v7;
  }
  while (v6 != 16);
  v10 = *(unsigned __int8 *)(a1 + 16);
  v11 = *(unsigned __int8 *)(a1 + 17);
  *(_DWORD *)(a2 + 36) |= 6u;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v11;
  return result;
}

__n128 sub_1016B7FC8(__n128 *a1, uint64_t a2)
{
  int v2;
  __n128 result;
  unsigned __int32 v4;
  unsigned __int32 v5;
  int v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;

  v2 = *(_DWORD *)(a2 + 56);
  result = *a1;
  *(_DWORD *)(a2 + 56) = v2 | 1;
  result.n128_u32[1] = a1->n128_u32[1];
  *(_DWORD *)(a2 + 56) = v2 | 3;
  result.n128_u32[2] = a1->n128_u32[2];
  *(_DWORD *)(a2 + 56) = v2 | 7;
  result.n128_u32[3] = a1->n128_u32[3];
  *(_DWORD *)(a2 + 56) = v2 | 0xF;
  *(__n128 *)(a2 + 8) = result;
  v4 = a1[1].n128_u32[0];
  *(_DWORD *)(a2 + 56) = v2 | 0x1F;
  v5 = a1[1].n128_u32[1];
  *(_DWORD *)(a2 + 24) = v4;
  *(_DWORD *)(a2 + 28) = v5;
  *(_BYTE *)(a2 + 32) = a1[1].n128_u8[8];
  v6 = a1[1].n128_i16[5];
  *(_DWORD *)(a2 + 56) = v2 | 0xFF;
  v7 = a1[1].n128_u32[3];
  *(_DWORD *)(a2 + 56) = v2 | 0x1FF;
  *(_DWORD *)(a2 + 36) = v6;
  *(_DWORD *)(a2 + 40) = v7;
  v8 = a1[2].n128_u32[0];
  *(_DWORD *)(a2 + 56) = v2 | 0x3FF;
  v9 = a1[2].n128_u32[1];
  *(_DWORD *)(a2 + 56) = v2 | 0x7FF;
  *(_DWORD *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 48) = v9;
  return result;
}

uint64_t sub_1016B8064(char *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _DWORD *v15;
  int v16;
  int v17;

  v4 = *a1;
  v5 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5 | 1;
  *(_BYTE *)(a2 + 8) = v4;
  v6 = v5 | 3;
  v7 = *((_DWORD *)a1 + 1);
  v8 = *((_DWORD *)a1 + 2);
  *(_DWORD *)(a2 + 56) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  if ((v8 + 1) >= 4)
    v9 = 0;
  else
    v9 = v8 + 2;
  if (!sub_100106094(v9))
    sub_101935CCC();
  v10 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 48) = v9;
  *(_DWORD *)(a2 + 56) = v10 | 0xC;
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
    operator new();
  sub_1016B7FC8((__n128 *)(a1 + 12), v11);
  *(_DWORD *)(a2 + 56) |= 0x10u;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    operator new();
  sub_1016B7E44((int *)a1 + 13, v12);
  *(_DWORD *)(a2 + 56) |= 0x20u;
  v13 = *(_QWORD *)(a2 + 32);
  if (!v13)
    operator new();
  result = sub_1016B7F30((uint64_t)(a1 + 872), v13);
  *(_DWORD *)(a2 + 56) |= 0x40u;
  v15 = *(_DWORD **)(a2 + 40);
  if (!v15)
    operator new();
  v16 = *((unsigned __int16 *)a1 + 445);
  v17 = *((unsigned __int16 *)a1 + 446);
  v15[5] |= 3u;
  v15[2] = v16;
  v15[3] = v17;
  return result;
}

void sub_1016B81F0()
{
  operator delete();
}

uint64_t sub_1016B8258(int a1)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint8_t buf[4];
  int v10;

  result = 0xFFFFFFFFLL;
  switch(a1)
  {
    case 0:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::LtlInfoType", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_14;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        goto LABEL_22;
      goto LABEL_20;
    case 1:
      return result;
    case 2:
      result = 0;
      break;
    case 3:
      result = 1;
      break;
    case 4:
      result = 2;
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v10 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gpsd::LtlInfoType", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
LABEL_22:
          dispatch_once(&qword_1022A0070, &stru_1021C7C38);
LABEL_20:
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gpsd::LtlInfoType", &v8);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "GnssHal::ExtensionsOlaf::LtlInfoType ProtobufUtil::fromProtobuf(proto::gpsd::LtlInfoType)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
LABEL_14:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_1016B8544(uint64_t result, _DWORD *a2)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    result = sub_1016B8258(*(_DWORD *)(result + 8));
    *a2 = result;
  }
  return result;
}

uint64_t sub_1016B8574(char a1)
{
  return a1 & 0x1F;
}

uint64_t sub_1016B857C(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (a1 <= 24)
  {
    if (a1 == 1)
      return 0;
    if (a1 == 10)
      return 1;
  }
  else
  {
    switch(a1)
    {
      case 25:
        return 2;
      case 50:
        return 3;
      case 75:
        return 4;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7C38);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Reliability", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v7[0] = 67109120;
    v7[1] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Reliability", v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "GNSS::ReliabilityIndication ProtobufUtil::fromProtobuf(proto::gnss::Reliability)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_1016B877C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 24);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_5:
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 16);
    return result;
  }
  *(_QWORD *)a2 = *(_QWORD *)(result + 8);
  if ((v2 & 2) != 0)
    goto LABEL_5;
  return result;
}

uint64_t sub_1016B87A4(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 5)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::GnssContent", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::GnssContent", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::GnssContent ProtobufUtil::fromProtobuf(proto::gnss::GnssContent)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

double sub_1016B8964(std::string *__str, uint64_t a2)
{
  const std::string *v4;
  int v5;
  std::string *v6;
  int v7;
  std::string *v8;
  int v9;
  uint64_t v10;
  int v11;
  double result;

  v4 = (const std::string *)&__str->__r_.__value_.__r.__words[1];
  v5 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 32) = LOWORD(__str->__r_.__value_.__l.__data_);
  *(_DWORD *)(a2 + 52) = v5 | 3;
  v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, v4);
  v7 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a2 + 36) = __str[1].__r_.__value_.__s.__data_[8];
  *(_DWORD *)(a2 + 52) = v7 | 0xC;
  v8 = *(std::string **)(a2 + 16);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v8, (std::string *)((char *)__str + 40));
  v9 = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a2 + 37) = __str[2].__r_.__value_.__s.__data_[16];
  *(_WORD *)(a2 + 38) = *(_WORD *)((char *)&__str[2].__r_.__value_.__r.__words[2] + 1);
  *(_DWORD *)(a2 + 52) = v9 | 0x1D0;
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10)
    operator new();
  v11 = *(_DWORD *)(v10 + 24);
  *(_WORD *)(v10 + 16) = __str[3].__r_.__value_.__l.__data_;
  result = *(double *)&__str[3].__r_.__value_.__l.__size_;
  *(_DWORD *)(v10 + 24) = v11 | 7;
  *(double *)(v10 + 8) = result;
  return result;
}

void sub_1016B8A9C()
{
  operator delete();
}

void sub_1016B8AC0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  std::string *v6;
  int v7;
  std::string __str;

  v4 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 6);
  v5 = *(unsigned __int16 *)(a1 + 8);
  *(_DWORD *)(a2 + 32) = v4 | 0xE;
  *(_DWORD *)(a2 + 20) = v5;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 6;
  LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
  WORD2(__str.__r_.__value_.__r.__words[0]) = *(_WORD *)(a1 + 4);
  __str.__r_.__value_.__s.__data_[6] = 0;
  *(_DWORD *)(a2 + 32) = v4 | 0xF;
  v6 = *(std::string **)(a2 + 8);
  if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = *(__int16 *)(a1 + 10);
  *(_DWORD *)(a2 + 32) |= 0x10u;
  *(_DWORD *)(a2 + 24) = v7;
}

void sub_1016B8B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1016B8BA8(uint64_t a1, int *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)a1 < 5u)
    v4 = *(_DWORD *)a1 + 1;
  else
    v4 = 0;
  if (!sub_1002BC6DC(v4))
    sub_10190E318();
  a2[10] |= 1u;
  a2[8] = v4;
  v5 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v5);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 12 * v5;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = a2[5];
      v10 = a2[4];
      if ((int)v10 >= v9)
      {
        if (v9 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2), v9 + 1);
          v9 = a2[5];
        }
        a2[5] = v9 + 1;
        sub_1016B9398();
      }
      v11 = *((_QWORD *)a2 + 1);
      a2[4] = v10 + 1;
      sub_1016B8AC0(v8 + v6, *(_QWORD *)(v11 + 8 * v10));
      v6 += 12;
    }
    while (v7 != v6);
  }
}

uint64_t sub_1016B8CC4(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_5:
    *(_BYTE *)(a2 + 2) = *(_BYTE *)(result + 12);
    return result;
  }
  *(_WORD *)a2 = *(_DWORD *)(result + 8);
  if ((v2 & 2) != 0)
    goto LABEL_5;
  return result;
}

uint64_t sub_1016B8CEC(int a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (a1 - 1);
  if (result >= 3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7C38);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Invalid value %d for proto::gnss::Emergency::AfltAction", buf, 8u);
    }
    v4 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7C38);
      v7[0] = 67109120;
      v7[1] = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "Invalid value %d for proto::gnss::Emergency::AfltAction", v7);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "gnss::Emergency::Cplane::AfltAction ProtobufUtil::fromProtobuf(proto::gnss::Emergency::AfltAction)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

_DWORD *sub_1016B8EAC(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;

  v3 = result;
  v4 = result[16];
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)a2 = result[2];
    v4 = result[16];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a2 + 4) = result[3];
  v4 = result[16];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_BYTE *)(a2 + 8) = result[4];
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_BYTE *)(a2 + 9) = result[5];
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_BYTE *)(a2 + 10) = result[6];
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    *(_BYTE *)(a2 + 16) = *((_BYTE *)v3 + 56);
    if ((v4 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_17;
  }
LABEL_15:
  result = (_DWORD *)sub_1016B480C(result[7]);
  *(_DWORD *)(a2 + 12) = (_DWORD)result;
  v4 = v3[16];
  if ((v4 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if ((v4 & 0x80) == 0)
    goto LABEL_23;
LABEL_17:
  v5 = (_DWORD *)*((_QWORD *)v3 + 4);
  if (!v5)
    v5 = *(_DWORD **)(qword_102311020 + 32);
  v6 = v5[6];
  if ((v6 & 1) != 0)
  {
    *(_WORD *)(a2 + 18) = v5[2];
    if ((v6 & 2) == 0)
    {
LABEL_21:
      if ((v6 & 4) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_21;
  }
  *(_WORD *)(a2 + 20) = v5[3];
  if ((v6 & 4) != 0)
LABEL_22:
    *(_BYTE *)(a2 + 22) = v5[4];
LABEL_23:
  if ((v4 & 0x100) != 0)
    *(_BYTE *)(a2 + 24) = *((_BYTE *)v3 + 57);
  if ((v4 & 0x200) != 0)
  {
    v7 = (_DWORD *)*((_QWORD *)v3 + 5);
    if (!v7)
      v7 = *(_DWORD **)(qword_102311020 + 40);
    v8 = v7[5];
    if ((v8 & 1) != 0)
    {
      *(_DWORD *)(a2 + 28) = v7[2];
      v8 = v7[5];
    }
    if ((v8 & 2) != 0)
      *(_WORD *)(a2 + 32) = v7[3];
  }
  v9 = v3[16];
  if ((v9 & 0x400) != 0)
    *(_BYTE *)(a2 + 36) = *((_BYTE *)v3 + 58);
  if ((v9 & 0x800) != 0)
  {
    v10 = (_DWORD *)*((_QWORD *)v3 + 6);
    if (!v10)
      v10 = *(_DWORD **)(qword_102311020 + 48);
    v11 = v10[5];
    if ((v11 & 1) != 0)
      *(_WORD *)(a2 + 38) = v10[2];
    if ((v11 & 2) != 0)
      *(_BYTE *)(a2 + 40) = v10[3];
  }
  return result;
}

uint64_t sub_1016B9034(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = sub_1016B4104(*(_DWORD *)(result + 8));
    *(_DWORD *)a2 = result;
    v4 = *(_DWORD *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  *(_BYTE *)(a2 + 4) = *(_DWORD *)(v3 + 12);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311028 + 16);
  result = sub_1016B5D4C(v5, (_DWORD *)(a2 + 8));
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  v6 = *(_DWORD **)(v3 + 24);
  if (!v6)
    v6 = *(_DWORD **)(qword_102311028 + 24);
  result = (uint64_t)sub_1016B70C8(v6, a2 + 20);
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_18:
  v7 = *(_DWORD **)(v3 + 32);
  if (!v7)
    v7 = *(_DWORD **)(qword_102311028 + 32);
  result = (uint64_t)sub_1016B8EAC(v7, a2 + 476);
  v4 = *(_DWORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    goto LABEL_8;
  }
LABEL_21:
  result = sub_1016B8CEC(*(_DWORD *)(v3 + 40));
  *(_DWORD *)(a2 + 520) = result;
  if ((*(_DWORD *)(v3 + 52) & 0x40) == 0)
    return result;
LABEL_8:
  *(_BYTE *)(a2 + 524) = *(_BYTE *)(v3 + 44);
  return result;
}

void sub_1016B912C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1016B9158()
{
  operator new();
}

void sub_1016B9194()
{
  operator delete();
}

void sub_1016B91B8()
{
  operator new();
}

void sub_1016B91F4()
{
  operator delete();
}

void sub_1016B9218()
{
  operator new();
}

void sub_1016B9254()
{
  operator delete();
}

void sub_1016B9278()
{
  operator new();
}

void sub_1016B92B4()
{
  operator delete();
}

void sub_1016B92D8()
{
  operator new();
}

void sub_1016B9314()
{
  operator delete();
}

void sub_1016B9338()
{
  operator new();
}

void sub_1016B9374()
{
  operator delete();
}

void sub_1016B9398()
{
  operator new();
}

void sub_1016B93D4()
{
  operator delete();
}

void sub_1016B93F8(_QWORD *a1, int a2, uint64_t a3)
{
  void *__p;
  uint8_t buf[8];

  *a1 = a3;
  sub_1015A2E04(&__p, off_1023008B0[a2]);
  *(_QWORD *)buf = a1;
  operator new();
}

void sub_1016B9A94()
{
  __cxa_end_catch();
  JUMPOUT(0x1016B9A9CLL);
}

void sub_1016B9AB0(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1016B9BDCLL);
}

void sub_1016B9AC0()
{
  JUMPOUT(0x1016B9BDCLL);
}

uint64_t **sub_1016B9BE4(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  char *v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  void **v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BYTE *v32;

  v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_1016DA948(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021C7D48);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    if (v7 > 3)
      v11 = "StateUnknown";
    else
      v11 = off_1021C93C8[v7];
    sub_1015A2E04(__p, v11);
    if (SBYTE3(v27) >= 0)
      v12 = __p;
    else
      v12 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v29 = 1024;
    v30 = v7;
    v31 = 2080;
    v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v14 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v14 = (_QWORD *)*v14;
    v15 = qword_1022A0078;
    v16 = *(unsigned __int8 *)(v6 + 120);
    sub_1016C7504(v7, v20);
    if (v21 >= 0)
      v17 = v20;
    else
      v17 = (void **)v20[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v14;
    v24 = 1024;
    v25 = v7;
    v26 = 2080;
    v27 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, v16, "%sstate,%d,%s", __p, 28, (const char *)v20[0]);
    v19 = v18;
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::setStateHandler(State, StateHandler) [T = CLNilrCplane]", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  *(_QWORD *)buf = &v22;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

__n128 sub_1016B9ECC(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v6;
  int v7;
  void **v8;
  __n128 result;
  uint64_t v10;
  int v11;
  uint8_t *v12;
  void **v13;
  void **v14;
  NSObject *v15;
  int v16;
  void **v17;
  uint64_t v18;
  int v19;
  uint8_t *v20;
  void **v21;
  uint64_t v22;
  __int128 *v23;
  _DWORD *v24;
  int *v25;
  NSObject *v26;
  int v27;
  int v28;
  const char *v29;
  void **v30;
  NSObject *v31;
  int v32;
  int v33;
  const char *v34;
  NSObject *v35;
  int v36;
  int v37;
  const char *v38;
  NSObject *v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  const char *v44;
  NSObject *v45;
  int v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  _DWORD *v51;
  int v52;
  int v53;
  const char *v54;
  NSObject *v55;
  int v56;
  int v57;
  const char *v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  __int128 v62;
  uint64_t v67;
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  void **v72;
  const char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint8_t buf[8];
  __int16 v78;
  _BYTE v79[10];
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  int v84;
  int v85;
  __int16 v86;
  uint8_t *v87;
  void *__p;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;

  switch(a2)
  {
    case 0u:
      result.n128_f64[0] = sub_1016C0B50(a1);
      return result;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Emergency mode start", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_80;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v28 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v28;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,Emergency mode start", buf);
      v30 = (void **)v29;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v29);
      goto LABEL_127;
    case 3u:
      v2 = &qword_1022A0000;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v3 = &qword_1022A0000;
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v40 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Emergency call end", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_80;
      goto LABEL_124;
    case 4u:
      v24 = *(_DWORD **)(a1 + 2344);
      if (v24)
      {
        sub_1016C4C60(a1, v24);
        return result;
      }
      sub_1016DAABC(0);
      goto LABEL_123;
    case 6u:
      v25 = *(int **)(a1 + 2352);
      if (v25)
      {
        sub_1016C50C8(a1, v25);
        return result;
      }
      sub_1016DAC24(0);
      goto LABEL_123;
    case 7u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v42 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,#Warning, Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v43 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v43;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#cp,#Warning, Not implemented", buf);
      v14 = (void **)v44;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v44);
      goto LABEL_106;
    case 8u:
      v23 = *(__int128 **)(a1 + 2360);
      if (v23)
      {
        sub_1016C53D0(a1, v23);
        return result;
      }
      sub_1016DAD8C(0);
      goto LABEL_123;
    case 9u:
    case 0xAu:
      if (!sub_1016C4060(a1, a1 + 2220))
      {
        sub_1016C2084(a1, -9, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C63BC(a1, 4u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
      }
      return result;
    case 0xBu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x17u:
    case 0x1Du:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 880);
        sub_1016C6880(a2, &__p);
        v8 = (v94 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v7;
        v78 = 2080;
        *(_QWORD *)v79 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v94) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      v11 = *(_DWORD *)(a1 + 880);
      sub_1016C6880(a2, buf);
      if ((v81 & 0x8000) == 0)
        v12 = buf;
      else
        v12 = *(uint8_t **)buf;
      v84 = 67109378;
      v85 = v11;
      v86 = 2080;
      v87 = v12;
      LODWORD(v73) = 18;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v10, 0, "#ins%d,#nilr,#cp,#Warning Unexpected event,%s", &v84, v73);
      v14 = v13;
      if (SBYTE1(v81) < 0)
        operator delete(*(void **)buf);
      goto LABEL_35;
    case 0xCu:
      sub_101833EEC(*(_QWORD *)(a1 + 2400));
      return result;
    case 0x12u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v35 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v36 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Timeout but session is closed", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v37 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v37;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Timeout but session is closed", buf);
      v14 = (void **)v38;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v38);
      goto LABEL_106;
    case 0x13u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v55 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v56 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v56;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,Baseband connected", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v57 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v57;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,Baseband connected", buf);
      v14 = (void **)v58;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v58);
      goto LABEL_106;
    case 0x14u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v31 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v33 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v33;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Baseband disconnected", buf);
      v14 = (void **)v34;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v34);
      goto LABEL_106;
    case 0x15u:
      v2 = &qword_1022A0000;
      if (!*(_QWORD *)(a1 + 2376))
      {
        sub_1016DB05C(qword_1022A0070 == -1);
        goto LABEL_123;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v45 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(_DWORD *)(a1 + 880);
        v47 = *(_DWORD **)(a1 + 2376);
        v49 = v47[1];
        v48 = v47[2];
        LODWORD(v47) = v47[3];
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v46;
        v89 = 1024;
        v90 = v46;
        v91 = 1024;
        v92 = v48;
        v93 = 1024;
        v94 = v49;
        v95 = 1024;
        v96 = (int)v47;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v50 = *(_DWORD *)(a1 + 880);
        v51 = *(_DWORD **)(a1 + 2376);
        v53 = v51[1];
        v52 = v51[2];
        LODWORD(v51) = v51[3];
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = v50;
        v78 = 1024;
        *(_DWORD *)v79 = v50;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v52;
        v80 = 1024;
        v81 = v53;
        v82 = 1024;
        v83 = (int)v51;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", buf, 32, (_DWORD)v74, DWORD2(v74), (_DWORD)v75);
        v14 = (void **)v54;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v54);
LABEL_106:
        if (v14 != &__p)
LABEL_107:
          free(v14);
      }
      return result;
    case 0x16u:
      v22 = *(_QWORD *)(a1 + 2384);
      if (v22)
      {
        sub_1016C5E14(a1, v22);
        return result;
      }
      sub_1016DAEF4(0);
      goto LABEL_123;
    case 0x18u:
      v59 = *(_QWORD *)(a1 + 2392);
      if (v59)
      {
        sub_1016C68AC(a1, v59);
      }
      else
      {
        sub_1016DB1D0(0);
LABEL_123:
        __break(1u);
LABEL_124:
        bzero(&__p, 0x65CuLL);
        if (v2[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v67 = v3[15];
        v68 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v68;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v67, 2, "#ins%d,#nilr,#cp,Emergency call end", buf);
        v30 = (void **)v69;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v69);
LABEL_127:
        if (v30 != &__p)
          free(v30);
LABEL_80:
        result.n128_f64[0] = sub_1016A9088(a1 + 512);
      }
      return result;
    case 0x19u:
      if ((sub_1016C6D2C(a1) & 1) == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v60 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v61 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v70 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v70;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", buf);
          v72 = (void **)v71;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", v71);
          if (v72 != &__p)
            free(v72);
        }
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        v62 = *(_OWORD *)(a1 + 800);
        v74 = *(_OWORD *)(a1 + 784);
        v75 = v62;
        v76 = *(_OWORD *)(a1 + 816);
        sub_1016C7290(a1, &v74);
        *(_QWORD *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(__n128 *)(a1 + 800) = result;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(_BYTE *)(a1 + 820) = 0;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_DWORD *)(a1 + 880);
        sub_1016C6880(a2, &__p);
        v17 = (v94 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v16;
        v78 = 2080;
        *(_QWORD *)v79 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v94) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v18 = qword_1022A0078;
      v19 = *(_DWORD *)(a1 + 880);
      sub_1016C6880(a2, buf);
      if ((v81 & 0x8000) == 0)
        v20 = buf;
      else
        v20 = *(uint8_t **)buf;
      v84 = 67109378;
      v85 = v19;
      v86 = 2080;
      v87 = v20;
      LODWORD(v73) = 18;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v18, 0, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", &v84, v73);
      v14 = v21;
      if (SBYTE1(v81) < 0)
        operator delete(*(void **)buf);
LABEL_35:
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Idle(CLNilrCplane::Event)", "%s\n", (const char *)v14);
      if (v14 == &__p)
        return result;
      goto LABEL_107;
    default:
      return result;
  }
}

uint64_t sub_1016BAF84(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t result;
  NSObject *v6;
  int v7;
  void **v8;
  uint64_t v9;
  int v10;
  uint8_t *v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  int v24;
  const char *v25;
  NSObject *v26;
  int v27;
  int v28;
  const char *v29;
  int *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint8_t *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  NSObject *v39;
  int v40;
  int v41;
  const char *v42;
  __int128 *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  int v48;
  int v49;
  const char *v50;
  _DWORD *v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  unsigned int v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  NSObject *v64;
  unsigned int v65;
  _DWORD *v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  int v74;
  const char *v75;
  NSObject *v76;
  unsigned int v77;
  _DWORD *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  _DWORD *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  const char *v89;
  NSObject *v90;
  int v91;
  __int128 v92;
  int v98;
  int v99;
  int v100;
  NSObject *v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  const char *v108;
  void **v109;
  int v110;
  const char *v111;
  void **v112;
  int v113;
  const char *v114;
  void **v115;
  int v116;
  const char *v117;
  void **v118;
  int v119;
  const char *v120;
  void **v121;
  int v122;
  const char *v123;
  void **v124;
  int v125;
  _DWORD *v126;
  int v127;
  int v128;
  const char *v129;
  void **v130;
  int v131;
  int v132;
  const char *v133;
  void **v134;
  const char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  void *v139[2];
  std::string::size_type v140;
  _DWORD v141[2];
  __int16 v142;
  uint8_t *v143;
  uint8_t buf[8];
  _BYTE v145[12];
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  _QWORD v154[3];
  _QWORD *v155;
  _QWORD v156[3];
  _QWORD *v157;
  void *__p;
  __int16 v159;
  unsigned int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;

  result = 1;
  switch(a2)
  {
    case 0u:
      v33 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v33 + 8) <= 0)
      {
        sub_1015A2E04(&__p, "RILD_Session");
        sub_1015A2E04(buf, "Enter");
        if ((v147 & 0x8000) == 0)
          v34 = buf;
        else
          v34 = *(uint8_t **)buf;
        if ((v147 & 0x8000) == 0)
          v35 = BYTE1(v147);
        else
          v35 = *(_QWORD *)v145;
        v36 = std::string::append((std::string *)&__p, (const std::string::value_type *)v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v140 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)v139 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        sub_10002B684(v33, (uint64_t *)v139);
        if (SHIBYTE(v140) < 0)
          operator delete(v139[0]);
        if (SBYTE1(v147) < 0)
          operator delete(*(void **)buf);
        if (SBYTE1(v164) < 0)
          operator delete(__p);
      }
      sub_1016C2F4C(a1, (unsigned __int16 *)(a1 + 2220));
      return 1;
    case 1u:
      v38 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v38 + 8) > 0)
      {
        sub_100E3E6F0(v38);
        sub_1016C27C0(a1);
        return 1;
      }
      sub_1016DB338();
      goto LABEL_241;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v28 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v28;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", buf);
      v13 = (void **)v29;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v29);
      goto LABEL_161;
    case 3u:
      if (!*(_BYTE *)(a1 + 878))
      {
        *(_DWORD *)(a1 + 244) = 7;
        sub_1016C2084(a1, -2, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C7530(a1, 7u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v47 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v49 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v49;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", buf);
      v13 = (void **)v50;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v50);
      goto LABEL_161;
    case 4u:
      v51 = *(_DWORD **)(a1 + 2344);
      if (v51)
      {
        sub_1016C4C60(a1, v51);
        return 1;
      }
      sub_1016DB608(1);
      goto LABEL_241;
    case 6u:
      v30 = *(int **)(a1 + 2352);
      if (v30)
      {
        sub_1016C50C8(a1, v30);
        return 1;
      }
      sub_1016DB770(1);
      goto LABEL_241;
    case 7u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v40 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v41 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v41;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Not implemented", buf);
      v13 = (void **)v42;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v42);
      goto LABEL_161;
    case 8u:
      v43 = *(__int128 **)(a1 + 2360);
      if (v43)
      {
        sub_1016C53D0(a1, v43);
        return 1;
      }
      sub_1016DB8D8(1);
      goto LABEL_241;
    case 9u:
    case 0xAu:
      if (sub_1016C4060(a1, a1 + 2220))
      {
        if (*(_WORD *)(a1 + 2220))
          return 2;
        sub_1016C42B4((_DWORD *)a1, a1 + 2220);
      }
      else
      {
        sub_1016C2084(a1, -9, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C63BC(a1, 4u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
      }
      return 1;
    case 0xBu:
      if (!*(_QWORD *)(a1 + 2368))
      {
        sub_1016DBBA8(qword_1022A0070 == -1);
        goto LABEL_241;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v53 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning session aborted", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v119 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v119;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning session aborted", buf);
        v121 = (void **)v120;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v120);
        if (v121 != &__p)
          free(v121);
      }
      v54 = *(_QWORD *)(a1 + 2368);
      if (*(_DWORD *)(v54 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v54 + 4) != *(_DWORD *)(a1 + 860))
        return 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v55 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v56 = *(_DWORD *)(a1 + 880);
        v57 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v56;
        v159 = 1024;
        v160 = v56;
        v161 = 1024;
        v162 = v57;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", (uint8_t *)&__p, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v131 = *(_DWORD *)(a1 + 880);
        v132 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v131;
        *(_WORD *)v145 = 1024;
        *(_DWORD *)&v145[2] = v131;
        *(_WORD *)&v145[6] = 1024;
        *(_DWORD *)&v145[8] = v132;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", buf, 20, (_DWORD)v136);
        v134 = (void **)v133;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v133);
        if (v134 != &__p)
          free(v134);
      }
      sub_1016C1DD4(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 244) = 5;
      result = sub_10075BD88();
      if (!(_DWORD)result)
        return result;
      v58 = *(_DWORD **)(a1 + 2368);
      v59 = v58[4];
      *(_DWORD *)(a1 + 456) = v59;
      v60 = *(_DWORD *)(a1 + 2224);
      v61 = *(_DWORD *)(a1 + 2256);
      v62 = *(_DWORD *)(a1 + 2260);
      if (v59 == 6)
        sub_1016C7B6C(a1, 8u, v60, v61, v62, 1u, *(_DWORD *)(a1 + 2216), v58[5], v58[6], 1u);
      else
        sub_1016C81F0(a1, 5u, v60, v61, v62, v59, 1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v101 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v102 = *(_DWORD *)(a1 + 880);
        v103 = *(_DWORD *)(a1 + 856);
        v104 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
        __p = (void *)__PAIR64__(v102, 67109888);
        v159 = 1024;
        v160 = v102;
        v161 = 1024;
        v162 = v103;
        v163 = 1024;
        v164 = v104;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", (uint8_t *)&__p, 0x1Au);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v105 = *(_DWORD *)(a1 + 880);
      v106 = *(_DWORD *)(a1 + 856);
      v107 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v105;
      *(_WORD *)v145 = 1024;
      *(_DWORD *)&v145[2] = v105;
      *(_WORD *)&v145[6] = 1024;
      *(_DWORD *)&v145[8] = v106;
      v146 = 1024;
      v147 = v107;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", buf, 26, (_DWORD)v136, DWORD2(v136));
      v109 = (void **)v108;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v108);
      if (v109 != &__p)
        free(v109);
      return 0;
    case 0xCu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v24 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", buf);
      v13 = (void **)v25;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v25);
      goto LABEL_161;
    case 0xDu:
      v19 = *(_QWORD *)(a1 + 2264);
      if (!v19)
      {
        sub_1016DBD1C(1);
        goto LABEL_241;
      }
      sub_1016C4A88(a1, v19);
      if (*(_DWORD *)(a1 + 860))
        return 1;
      result = 0;
      *(_DWORD *)(a1 + 244) = 10;
      return result;
    case 0xEu:
      if (!*(_QWORD *)(a1 + 2296))
      {
        sub_1016DB4A0(1);
        goto LABEL_241;
      }
      v156[0] = off_1021C8718;
      v156[1] = a1;
      v157 = v156;
      v69 = *(_QWORD *)(a1 + 200);
      if (!v69)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 48))(v69, v156);
      v70 = v157;
      if (v157 == v156)
      {
        v71 = 4;
        v70 = v156;
      }
      else
      {
        if (!v157)
          goto LABEL_180;
        v71 = 5;
      }
      (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_180:
      v100 = **(_DWORD **)(a1 + 2296);
      if (v100 == -9)
      {
        v99 = 4;
      }
      else if (v100 == -4)
      {
        v99 = 3;
      }
      else
      {
        if (v100)
          goto LABEL_184;
        v99 = 1;
      }
      goto LABEL_187;
    case 0xFu:
    case 0x11u:
      *(_BYTE *)(a1 + 876) = 0;
      *(_DWORD *)(a1 + 244) = 3;
      sub_1016C2084(a1, -4, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      return 0;
    case 0x10u:
      if (!*(_QWORD *)(a1 + 2312))
      {
        sub_1016DBE84(1);
        goto LABEL_241;
      }
      v154[0] = off_1021C8818;
      v154[1] = a1;
      v155 = v154;
      v44 = *(_QWORD *)(a1 + 200);
      if (!v44)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v44 + 48))(v44, v154);
      v45 = v155;
      if (v155 == v154)
      {
        v46 = 4;
        v45 = v154;
      }
      else
      {
        if (!v155)
          goto LABEL_176;
        v46 = 5;
      }
      (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_176:
      v98 = **(_DWORD **)(a1 + 2312) + 9;
      if (v98 >= 0xA)
LABEL_184:
        v99 = 11;
      else
        v99 = dword_101CD0F20[v98];
LABEL_187:
      result = 0;
      *(_DWORD *)(a1 + 244) = v99;
LABEL_188:
      *(_BYTE *)(a1 + 876) = 0;
      return result;
    case 0x12u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v31 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v116 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v116;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", buf);
        v118 = (void **)v117;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v117);
        if (v118 != &__p)
          free(v118);
      }
      *(_DWORD *)(a1 + 244) = 2;
      sub_1016C2084(a1, -4, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      sub_1016C7530(a1, 2u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
      return 0;
    case 0x13u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v72 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v73 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v73;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v74 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v74;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", buf);
      v13 = (void **)v75;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v75);
      goto LABEL_161;
    case 0x14u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v113 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v113;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", buf);
        v115 = (void **)v114;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v114);
        if (v115 != &__p)
          free(v115);
      }
      *(_DWORD *)(a1 + 244) = 6;
      sub_1016C7530(a1, 6u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
      return 0;
    case 0x15u:
      v63 = *(_QWORD *)(a1 + 2376);
      if (!v63)
      {
        sub_1016DBFEC(1);
        goto LABEL_241;
      }
      if (*(_DWORD *)(v63 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v63 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v64 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v65 = *(_DWORD *)(a1 + 880);
          v66 = *(_DWORD **)(a1 + 2376);
          v68 = v66[1];
          v67 = v66[2];
          LODWORD(v66) = v66[3];
          LODWORD(__p) = 67110144;
          HIDWORD(__p) = v65;
          v159 = 1024;
          v160 = v65;
          v161 = 1024;
          v162 = v67;
          v163 = 1024;
          v164 = v68;
          v165 = 1024;
          v166 = (int)v66;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v125 = *(_DWORD *)(a1 + 880);
          v126 = *(_DWORD **)(a1 + 2376);
          v128 = v126[1];
          v127 = v126[2];
          LODWORD(v126) = v126[3];
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&buf[4] = v125;
          *(_WORD *)v145 = 1024;
          *(_DWORD *)&v145[2] = v125;
          *(_WORD *)&v145[6] = 1024;
          *(_DWORD *)&v145[8] = v127;
          v146 = 1024;
          v147 = v128;
          v148 = 1024;
          v149 = (int)v126;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", buf, 32, (_DWORD)v136, DWORD2(v136), (_DWORD)v137);
          v130 = (void **)v129;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v129);
          if (v130 != &__p)
            free(v130);
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1016C7530(a1, 9u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v76 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v77 = *(_DWORD *)(a1 + 880);
        v78 = *(_DWORD **)(a1 + 2376);
        v80 = v78[1];
        v79 = v78[2];
        LODWORD(v78) = v78[3];
        v81 = *(_DWORD *)(a1 + 860);
        v82 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67110656;
        HIDWORD(__p) = v77;
        v159 = 1024;
        v160 = v77;
        v161 = 1024;
        v162 = v79;
        v163 = 1024;
        v164 = v80;
        v165 = 1024;
        v166 = (int)v78;
        v167 = 1024;
        v168 = v81;
        v169 = 1024;
        v170 = v82;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x2Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v83 = *(_DWORD *)(a1 + 880);
      v84 = *(_DWORD **)(a1 + 2376);
      v86 = v84[1];
      v85 = v84[2];
      LODWORD(v84) = v84[3];
      v87 = *(_DWORD *)(a1 + 860);
      v88 = *(_DWORD *)(a1 + 856);
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)&buf[4] = v83;
      *(_WORD *)v145 = 1024;
      *(_DWORD *)&v145[2] = v83;
      *(_WORD *)&v145[6] = 1024;
      *(_DWORD *)&v145[8] = v85;
      v146 = 1024;
      v147 = v86;
      v148 = 1024;
      v149 = (int)v84;
      v150 = 1024;
      v151 = v87;
      v152 = 1024;
      v153 = v88;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", buf, 44, (_DWORD)v136, DWORD2(v136), (_DWORD)v137, DWORD2(v137), (_DWORD)v138);
      v13 = (void **)v89;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v89);
LABEL_161:
      if (v13 == &__p)
        return 1;
      goto LABEL_162;
    case 0x16u:
      v14 = *(_QWORD *)(a1 + 2384);
      if (v14)
      {
        sub_1016C5E14(a1, v14);
        return 1;
      }
      sub_1016DBA40(1);
      goto LABEL_241;
    case 0x17u:
      v18 = *(_QWORD *)(a1 + 2280);
      if (v18)
      {
        sub_1016C4B74(a1, v18);
        return 1;
      }
      sub_1016DC154(1);
      goto LABEL_241;
    case 0x18u:
      v15 = *(_QWORD *)(a1 + 2392);
      if (v15)
      {
        sub_1016C68AC(a1, v15);
      }
      else
      {
        sub_1016DC2BC(1);
LABEL_241:
        __break(1u);
LABEL_242:
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
LABEL_12:
        v9 = v2[15];
        v10 = *(_DWORD *)(a1 + 880);
        sub_1016C6880(a2, buf);
        if ((v147 & 0x8000) == 0)
          v11 = buf;
        else
          v11 = *(uint8_t **)buf;
        v141[0] = 67109378;
        v141[1] = v10;
        v142 = 2080;
        v143 = v11;
        LODWORD(v135) = 18;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v9, 0, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", v141, v135);
        v13 = v12;
        if (SBYTE1(v147) < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", (const char *)v13);
        if (v13 != &__p)
LABEL_162:
          free(v13);
      }
      return 1;
    case 0x19u:
      if (sub_1016C6D2C(a1))
      {
        if (*(_BYTE *)(a1 + 876))
        {
          *(_DWORD *)(a1 + 244) = 8;
          sub_1016C2084(a1, -2, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
          sub_1016C4588(a1, 8u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 6, *(_DWORD *)(a1 + 2216), 1);
          sub_1016C27C0(a1);
        }
        return 3;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v90 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v91 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v91;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v122 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v122;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", buf);
          v124 = (void **)v123;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v123);
          if (v124 != &__p)
            free(v124);
        }
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        v92 = *(_OWORD *)(a1 + 800);
        v136 = *(_OWORD *)(a1 + 784);
        v137 = v92;
        v138 = *(_OWORD *)(a1 + 816);
        sub_1016C7290(a1, &v136);
        *(_QWORD *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(_BYTE *)(a1 + 820) = 0;
        result = 1;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v2 = &qword_1022A0000;
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 880);
        sub_1016C6880(a2, &__p);
        v8 = (v164 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)v145 = 2080;
        *(_QWORD *)&v145[2] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v164) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_12;
      goto LABEL_242;
    case 0x1Du:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,MeasurementAndEstimateResponse response received", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v110 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v110;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#dbh,MeasurementAndEstimateResponse response received", buf);
        v112 = (void **)v111;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)", "%s\n", v111);
        if (v112 != &__p)
          free(v112);
      }
      sub_1016C86F8(a1);
      result = 0;
      goto LABEL_188;
    default:
      return result;
  }
}

void sub_1016BCB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016BCCA0(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t result;
  NSObject *v6;
  int v7;
  void **v8;
  uint64_t v9;
  int v10;
  uint8_t *v11;
  char *v12;
  char *v13;
  NSObject *v14;
  int v15;
  void **v16;
  uint64_t v17;
  int v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  int v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  const char *v36;
  _DWORD *v37;
  _DWORD *v38;
  int *v39;
  uint64_t v40;
  uint8_t *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  NSObject *v45;
  int v46;
  int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  unsigned int v52;
  int v53;
  NSObject *v54;
  unsigned int v55;
  int v56;
  int v57;
  NSObject *v58;
  int v59;
  int v60;
  const char *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  NSObject *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  NSObject *v75;
  int v76;
  NSObject *v77;
  unsigned int v78;
  _DWORD *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  const char *v90;
  NSObject *v91;
  int v92;
  __int128 v93;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  const char *v103;
  void **v104;
  int v105;
  const char *v106;
  void **v107;
  int v108;
  const char *v109;
  void **v110;
  int v111;
  const char *v112;
  void **v113;
  int v114;
  _DWORD *v115;
  int v116;
  int v117;
  const char *v118;
  void **v119;
  int v120;
  int v121;
  const char *v122;
  void **v123;
  int v124;
  int v125;
  int v126;
  const char *v127;
  void **v128;
  const char *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  void *v133[2];
  std::string::size_type v134;
  int v135;
  int v136;
  __int16 v137;
  uint8_t *v138;
  uint8_t buf[8];
  _BYTE v140[12];
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  _QWORD v149[3];
  _QWORD *v150;
  _QWORD v151[3];
  _QWORD *v152;
  void *__p;
  __int16 v154;
  unsigned int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;

  result = 2;
  switch(a2)
  {
    case 0u:
      v40 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v40 + 8) <= 0)
      {
        sub_1015A2E04(&__p, "RILD_SessionPeriodic");
        sub_1015A2E04(buf, "Enter");
        if ((v142 & 0x8000) == 0)
          v41 = buf;
        else
          v41 = *(uint8_t **)buf;
        if ((v142 & 0x8000) == 0)
          v42 = BYTE1(v142);
        else
          v42 = *(_QWORD *)v140;
        v43 = std::string::append((std::string *)&__p, (const std::string::value_type *)v41, v42);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v134 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)v133 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        sub_10002B684(v40, (uint64_t *)v133);
        if (SHIBYTE(v134) < 0)
          operator delete(v133[0]);
        if (SBYTE1(v142) < 0)
          operator delete(*(void **)buf);
        if (SBYTE1(v159) < 0)
          operator delete(__p);
      }
      sub_1016C2F4C(a1, (unsigned __int16 *)(a1 + 2220));
      return 2;
    case 1u:
      v49 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v49 + 8) > 0)
      {
        sub_100E3E6F0(v49);
        sub_1016C27C0(a1);
        return 2;
      }
      sub_1016DC424();
      goto LABEL_234;
    case 2u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v35 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v35;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started session", buf);
      v13 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v36);
      goto LABEL_168;
    case 3u:
      if (!*(_BYTE *)(a1 + 878))
      {
        *(_DWORD *)(a1 + 244) = 7;
        sub_1016C2084(a1, -2, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C7530(a1, 7u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v45 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored for conformance mode", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v47 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v47;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored for conformance mode", buf);
      v13 = (char *)v48;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v48);
      goto LABEL_168;
    case 4u:
      v37 = *(_DWORD **)(a1 + 2344);
      if (v37)
      {
        sub_1016C4C60(a1, v37);
        return 2;
      }
      sub_1016DC6F4(2);
      goto LABEL_234;
    case 6u:
      v39 = *(int **)(a1 + 2352);
      if (v39)
      {
        sub_1016C50C8(a1, v39);
        return 2;
      }
      sub_1016DC85C(2);
      goto LABEL_234;
    case 7u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v58 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v59 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v59;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Not implemented", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v60 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v60;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Not implemented", buf);
      v13 = (char *)v61;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v61);
      goto LABEL_168;
    case 8u:
      v62 = *(__int128 **)(a1 + 2360);
      if (v62)
      {
        sub_1016C53D0(a1, v62);
        return 2;
      }
      sub_1016DC9C4(2);
      goto LABEL_234;
    case 9u:
    case 0xAu:
      if (!sub_1016C4060(a1, a1 + 2220))
      {
        sub_1016C2084(a1, -9, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C63BC(a1, 4u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        return 2;
      }
      if (*(_WORD *)(a1 + 2220))
      {
        sub_1016C42B4((_DWORD *)a1, a1 + 2220);
        return 2;
      }
      return 1;
    case 0xBu:
      v50 = *(_QWORD *)(a1 + 2368);
      if (!v50)
      {
        sub_1016DCC94(2);
        goto LABEL_234;
      }
      if (*(_DWORD *)(v50 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v50 + 4) != *(_DWORD *)(a1 + 860))
        return result;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v51 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(_DWORD *)(a1 + 880);
        v53 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v52;
        v154 = 1024;
        v155 = v52;
        v156 = 1024;
        v157 = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", (uint8_t *)&__p, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v120 = *(_DWORD *)(a1 + 880);
        v121 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v120;
        *(_WORD *)v140 = 1024;
        *(_DWORD *)&v140[2] = v120;
        *(_WORD *)&v140[6] = 1024;
        *(_DWORD *)&v140[8] = v121;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,aborted", buf, 20, (_DWORD)v130);
        v123 = (void **)v122;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v122);
        if (v123 != &__p)
          free(v123);
      }
      sub_1016C1DD4(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 244) = 5;
      if (sub_10075BD88())
      {
        *(_DWORD *)(a1 + 456) = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v54 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *(_DWORD *)(a1 + 880);
          v56 = *(_DWORD *)(a1 + 856);
          v57 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
          __p = (void *)__PAIR64__(v55, 67109888);
          v154 = 1024;
          v155 = v55;
          v156 = 1024;
          v157 = v56;
          v158 = 1024;
          v159 = v57;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", (uint8_t *)&__p, 0x1Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v124 = *(_DWORD *)(a1 + 880);
          v125 = *(_DWORD *)(a1 + 856);
          v126 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = v124;
          *(_WORD *)v140 = 1024;
          *(_DWORD *)&v140[2] = v124;
          *(_WORD *)&v140[6] = 1024;
          *(_DWORD *)&v140[8] = v125;
          v141 = 1024;
          v142 = v126;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning instance,%d,session,%u,abortReason,%d", buf, 26, (_DWORD)v130, DWORD2(v130));
          v128 = (void **)v127;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v127);
          if (v128 != &__p)
            free(v128);
        }
      }
      sub_1016C81F0(a1, 5u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16), 1);
      return 0;
    case 0xCu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v65 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v66 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,OTA delete unexpected during RILD_SessionPeriodic state", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v102 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v102;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,OTA delete unexpected during RILD_SessionPeriodic state", buf);
        v104 = (void **)v103;
        sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v103);
        if (v104 != &__p)
          free(v104);
      }
      if (!*(_BYTE *)(a1 + 878))
        return 2;
      *(_DWORD *)(a1 + 244) = 9;
      sub_1016C27C0(a1);
      return 0;
    case 0xDu:
      v64 = *(_QWORD *)(a1 + 2264);
      if (v64)
      {
        sub_1016C4A88(a1, v64);
        return 2;
      }
      sub_1016DCDFC(2);
      goto LABEL_234;
    case 0xEu:
      v38 = *(_DWORD **)(a1 + 2296);
      if (v38)
      {
        if (*v38)
        {
          if (!*(_BYTE *)(a1 + 877))
            goto LABEL_189;
        }
        else
        {
          *(_BYTE *)(a1 + 877) = 1;
        }
        v151[0] = off_1021C8918;
        v151[1] = a1;
        v152 = v151;
        v99 = *(_QWORD *)(a1 + 200);
        if (!v99)
          sub_10025FD1C();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v99 + 48))(v99, v151);
        v100 = v152;
        if (v152 == v151)
        {
          v101 = 4;
          v100 = v151;
        }
        else
        {
          if (!v152)
          {
LABEL_189:
            sub_1016C3590(a1 + 8, 18, *(double *)(a1 + 848));
            return 2;
          }
          v101 = 5;
        }
        (*(void (**)(void))(*v100 + 8 * v101))();
        goto LABEL_189;
      }
      sub_1016DC58C(2);
LABEL_234:
      __break(1u);
LABEL_235:
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
LABEL_32:
      v17 = v2[15];
      v18 = *(_DWORD *)(a1 + 880);
      sub_1015A2E04(buf, "MeasurementAndEstimateResponse");
      if ((v142 & 0x8000) == 0)
        v19 = buf;
      else
        v19 = *(uint8_t **)buf;
      v135 = 67109378;
      v136 = v18;
      v137 = 2080;
      v138 = v19;
      LODWORD(v129) = 18;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v17, 0, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", &v135, v129);
      v13 = v20;
      if (SBYTE1(v142) < 0)
        operator delete(*(void **)buf);
LABEL_37:
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v13);
      if (v13 != (char *)&__p)
LABEL_169:
        free(v13);
      return 2;
    case 0x10u:
      if (!*(_QWORD *)(a1 + 2312))
      {
        sub_1016DCF64(2);
        goto LABEL_234;
      }
      v149[0] = off_1021C8A18;
      v149[1] = a1;
      v150 = v149;
      v67 = *(_QWORD *)(a1 + 200);
      if (!v67)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v67 + 48))(v67, v149);
      v68 = v150;
      if (v150 == v149)
      {
        v69 = 4;
        v68 = v149;
      }
      else
      {
        if (!v150)
          return 2;
        v69 = 5;
      }
      (*(void (**)(void))(*v68 + 8 * v69))();
      return 2;
    case 0x12u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v70 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v71 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v71;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v105 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v105;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning no fix to send. sending back error", buf);
        v107 = (void **)v106;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v106);
        if (v107 != &__p)
          free(v107);
      }
      *(_DWORD *)(a1 + 244) = 2;
      sub_1016C7530(a1, 2u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
      v72 = *(_DWORD *)(a1 + 868);
      v73 = *(_DWORD *)(a1 + 860);
      v74 = *(_DWORD *)(a1 + 856);
      if (*(_BYTE *)(a1 + 877))
        sub_1016C2084(a1, -2, v72, v73, v74);
      else
        sub_1016C2084(a1, -4, v72, v73, v74);
      return 0;
    case 0x13u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", (uint8_t *)&__p, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v24 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", buf);
      v13 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v25);
      goto LABEL_168;
    case 0x14u:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v75 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v76 = *(_DWORD *)(a1 + 880);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v108 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v108;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", buf);
        v110 = (void **)v109;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v109);
        if (v110 != &__p)
          free(v110);
      }
      result = 0;
      *(_DWORD *)(a1 + 244) = 6;
      return result;
    case 0x15u:
      v26 = *(_QWORD *)(a1 + 2376);
      if (!v26)
      {
        sub_1016DD0CC(2);
        goto LABEL_234;
      }
      if (*(_DWORD *)(v26 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v26 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v27 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v28 = *(_DWORD *)(a1 + 880);
          v29 = *(_DWORD **)(a1 + 2376);
          v31 = v29[1];
          v30 = v29[2];
          LODWORD(v29) = v29[3];
          LODWORD(__p) = 67110144;
          HIDWORD(__p) = v28;
          v154 = 1024;
          v155 = v28;
          v156 = 1024;
          v157 = v30;
          v158 = 1024;
          v159 = v31;
          v160 = 1024;
          v161 = (int)v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v114 = *(_DWORD *)(a1 + 880);
          v115 = *(_DWORD **)(a1 + 2376);
          v117 = v115[1];
          v116 = v115[2];
          LODWORD(v115) = v115[3];
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&buf[4] = v114;
          *(_WORD *)v140 = 1024;
          *(_DWORD *)&v140[2] = v114;
          *(_WORD *)&v140[6] = 1024;
          *(_DWORD *)&v140[8] = v116;
          v141 = 1024;
          v142 = v117;
          v143 = 1024;
          v144 = (int)v115;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", buf, 32, (_DWORD)v130, DWORD2(v130), (_DWORD)v131);
          v119 = (void **)v118;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v118);
          if (v119 != &__p)
            free(v119);
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1016C7530(a1, 9u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v77 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v78 = *(_DWORD *)(a1 + 880);
        v79 = *(_DWORD **)(a1 + 2376);
        v81 = v79[1];
        v80 = v79[2];
        LODWORD(v79) = v79[3];
        v82 = *(_DWORD *)(a1 + 860);
        v83 = *(_DWORD *)(a1 + 856);
        LODWORD(__p) = 67110656;
        HIDWORD(__p) = v78;
        v154 = 1024;
        v155 = v78;
        v156 = 1024;
        v157 = v80;
        v158 = 1024;
        v159 = v81;
        v160 = 1024;
        v161 = (int)v79;
        v162 = 1024;
        v163 = v82;
        v164 = 1024;
        v165 = v83;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", (uint8_t *)&__p, 0x2Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v84 = *(_DWORD *)(a1 + 880);
      v85 = *(_DWORD **)(a1 + 2376);
      v87 = v85[1];
      v86 = v85[2];
      LODWORD(v85) = v85[3];
      v88 = *(_DWORD *)(a1 + 860);
      v89 = *(_DWORD *)(a1 + 856);
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)&buf[4] = v84;
      *(_WORD *)v140 = 1024;
      *(_DWORD *)&v140[2] = v84;
      *(_WORD *)&v140[6] = 1024;
      *(_DWORD *)&v140[8] = v86;
      v141 = 1024;
      v142 = v87;
      v143 = 1024;
      v144 = (int)v85;
      v145 = 1024;
      v146 = v88;
      v147 = 1024;
      v148 = v89;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", buf, 44, (_DWORD)v130, DWORD2(v130), (_DWORD)v131, DWORD2(v131), (_DWORD)v132);
      v13 = (char *)v90;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v90);
LABEL_168:
      if (v13 == (char *)&__p)
        return 2;
      goto LABEL_169;
    case 0x16u:
      v63 = *(_QWORD *)(a1 + 2384);
      if (v63)
      {
        sub_1016C5E14(a1, v63);
        return 2;
      }
      sub_1016DCB2C(2);
      goto LABEL_234;
    case 0x17u:
      v21 = *(_QWORD *)(a1 + 2280);
      if (v21)
      {
        sub_1016C4B74(a1, v21);
        return 2;
      }
      sub_1016DD234(2);
      goto LABEL_234;
    case 0x18u:
      v32 = *(_QWORD *)(a1 + 2392);
      if (v32)
      {
        sub_1016C68AC(a1, v32);
        return 2;
      }
      sub_1016DD39C(2);
      goto LABEL_234;
    case 0x19u:
      if (sub_1016C6D2C(a1))
      {
        if (*(_BYTE *)(a1 + 876))
        {
          *(_DWORD *)(a1 + 244) = 8;
          sub_1016C2084(a1, -2, *(_DWORD *)(a1 + 868), *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
          sub_1016C4588(a1, 8u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 6, *(_DWORD *)(a1 + 2216), 1);
          sub_1016C27C0(a1);
        }
        return 3;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v91 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v92 = *(_DWORD *)(a1 + 880);
          LODWORD(__p) = 67109120;
          HIDWORD(__p) = v92;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", (uint8_t *)&__p, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v111 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v111;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", buf);
          v113 = (void **)v112;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)", "%s\n", v112);
          if (v113 != &__p)
            free(v113);
        }
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        v93 = *(_OWORD *)(a1 + 800);
        v130 = *(_OWORD *)(a1 + 784);
        v131 = v93;
        v132 = *(_OWORD *)(a1 + 816);
        sub_1016C7290(a1, &v130);
        *(_QWORD *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(_BYTE *)(a1 + 820) = 0;
        result = 2;
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 880);
        sub_1016C6880(a2, &__p);
        v8 = (v159 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)v140 = 2080;
        *(_QWORD *)&v140[2] = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v159) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v9 = qword_1022A0078;
      v10 = *(_DWORD *)(a1 + 880);
      sub_1016C6880(a2, buf);
      if ((v142 & 0x8000) == 0)
        v11 = buf;
      else
        v11 = *(uint8_t **)buf;
      v135 = 67109378;
      v136 = v10;
      v137 = 2080;
      v138 = v11;
      LODWORD(v129) = 18;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v9, 0, "#ins%d,#nilr,#cp,#Warning,#wlan,unexpected event,%s", &v135, v129);
      v13 = v12;
      if (SBYTE1(v142) < 0)
        operator delete(*(void **)buf);
      goto LABEL_37;
    case 0x1Du:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v2 = &qword_1022A0000;
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_DWORD *)(a1 + 880);
        sub_1015A2E04(&__p, "MeasurementAndEstimateResponse");
        v16 = (v159 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)v140 = 2080;
        *(_QWORD *)&v140[2] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", buf, 0x12u);
        if (SBYTE1(v159) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        return 2;
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_32;
      goto LABEL_235;
    default:
      return result;
  }
}

void sub_1016BE740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a22 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016BE864(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t result;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int128 v15;
  NSObject *v16;
  int v17;
  __int128 v18;
  uint64_t v24;
  NSObject *v25;
  int v26;
  _DWORD *v27;
  int v28;
  int v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  const char *v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  int v40;
  int v41;
  const char *v42;
  __int128 *v43;
  NSObject *v44;
  int v45;
  int v46;
  const char *v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  int v53;
  NSObject *v54;
  int v55;
  int v56;
  int v57;
  __int128 v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  int v69;
  const char *v70;
  int *v71;
  NSObject *v72;
  int v73;
  uint8_t *v74;
  uint64_t v75;
  int v76;
  uint8_t *v77;
  uint8_t *v78;
  NSObject *v79;
  int v80;
  int v81;
  const char *v82;
  uint8_t *v83;
  NSObject *v84;
  int v85;
  int v86;
  const char *v87;
  __int128 v88;
  __int128 v89;
  NSObject *v90;
  int v91;
  _DWORD *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  NSObject *v97;
  int v98;
  __int128 v99;
  __int128 v101;
  int v102;
  const char *v103;
  uint8_t *v104;
  int v105;
  const char *v106;
  uint8_t *v107;
  int v108;
  const char *v109;
  uint8_t *v110;
  int v111;
  _DWORD *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  const char *v117;
  int v118;
  const char *v119;
  uint8_t *v120;
  int v121;
  _DWORD *v122;
  int v123;
  int v124;
  const char *v125;
  uint8_t *v126;
  int v127;
  int v128;
  const char *v129;
  uint8_t *v130;
  int v131;
  int v132;
  int v133;
  const char *v134;
  uint8_t *v135;
  const char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[3];
  _OWORD v141[3];
  _OWORD v142[3];
  _OWORD v143[3];
  _OWORD v144[3];
  void *__p[2];
  std::string::size_type v146;
  _DWORD v147[2];
  __int16 v148;
  uint8_t *v149;
  uint8_t v150[8];
  _BYTE v151[12];
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  uint8_t buf[8];
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  __int16 v171;
  int v172;

  result = 3;
  switch(a2)
  {
    case 0:
      v61 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v61 + 8) <= 0)
      {
        sub_1015A2E04(buf, "RILD_WlanSession");
        sub_1015A2E04(v150, "Enter");
        if ((v153 & 0x8000) == 0)
          v62 = v150;
        else
          v62 = *(uint8_t **)v150;
        if ((v153 & 0x8000) == 0)
          v63 = BYTE1(v153);
        else
          v63 = *(_QWORD *)v151;
        v64 = std::string::append((std::string *)buf, (const std::string::value_type *)v62, v63);
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v146 = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        sub_10002B684(v61, (uint64_t *)__p);
        if (SHIBYTE(v146) < 0)
          operator delete(__p[0]);
        if (SBYTE1(v153) < 0)
          operator delete(*(void **)v150);
        if (SBYTE1(v166) < 0)
          operator delete(*(void **)buf);
      }
      sub_1016C87F8(a1, a1 + 2408);
      return 3;
    case 1:
      v60 = *(_QWORD *)(a1 + 840);
      if (*(int *)(v60 + 8) > 0)
      {
        sub_100E3E6F0(v60);
        sub_1016C2ABC(a1 + 8, 27);
        return 3;
      }
      sub_1016DD504();
      goto LABEL_223;
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v67 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v68 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v68;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started wlan session", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v69 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v69;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Emergency call start receieved after we started wlan session", v150);
      v9 = (uint8_t *)v70;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v70);
      goto LABEL_203;
    case 3:
      if (!*(_BYTE *)(a1 + 878))
      {
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 7;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        v101 = *(_OWORD *)(a1 + 816);
        v143[1] = *(_OWORD *)(a1 + 800);
        v143[2] = v101;
        v143[0] = *(_OWORD *)(a1 + 784);
        sub_1016C7290(a1, v143);
        result = 0;
        *(_QWORD *)(a1 + 784) = 0;
        goto LABEL_26;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v44 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v45 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v46 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v46;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning EmergencyModeEnd ignored in conformance mode", v150);
      v9 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v47);
      goto LABEL_203;
    case 4:
      v59 = *(_DWORD **)(a1 + 2344);
      if (v59)
      {
        sub_1016C4C60(a1, v59);
        return 3;
      }
      sub_1016DD66C(3);
      goto LABEL_223;
    case 6:
      v71 = *(int **)(a1 + 2352);
      if (v71)
      {
        sub_1016C50C8(a1, v71);
        return 3;
      }
      sub_1016DD7D4(3);
      goto LABEL_223;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,#Warning, Not implemented", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v41 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v41;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#cp,#Warning, Not implemented", v150);
      v9 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v42);
      goto LABEL_203;
    case 8:
      v43 = *(__int128 **)(a1 + 2360);
      if (v43)
      {
        sub_1016C53D0(a1, v43);
        return 3;
      }
      sub_1016DD93C(3);
      goto LABEL_223;
    case 9:
    case 10:
      if (!sub_1016C4060(a1, a1 + 2220))
      {
        sub_1016C2084(a1, -9, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        sub_1016C63BC(a1, 4u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260));
        return 3;
      }
      sub_1016C7094(a1, -2);
      *(_DWORD *)(a1 + 788) = 6;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      v15 = *(_OWORD *)(a1 + 816);
      v142[1] = *(_OWORD *)(a1 + 800);
      v142[2] = v15;
      v142[0] = *(_OWORD *)(a1 + 784);
      sub_1016C7290(a1, v142);
      if (*(_WORD *)(a1 + 2220))
        return 2;
      else
        return 1;
    case 11:
      v2 = &qword_1022A0000;
      if (!*(_QWORD *)(a1 + 2368))
      {
        sub_1016DDC0C(qword_1022A0070 == -1);
        goto LABEL_223;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v48 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning session aborted", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v108 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)v150 = 67109120;
        *(_DWORD *)&v150[4] = v108;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,#Warning session aborted", v150);
        v110 = (uint8_t *)v109;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v109);
        if (v110 != buf)
          free(v110);
      }
      v50 = *(_QWORD *)(a1 + 2368);
      if (*(_DWORD *)(v50 + 12) != *(_DWORD *)(a1 + 856) || *(_DWORD *)(v50 + 4) != *(_DWORD *)(a1 + 860))
        return 3;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v51 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(_DWORD *)(a1 + 880);
        v53 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v52;
        v161 = 1024;
        v162 = v52;
        v163 = 1024;
        v164 = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,aborted", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v127 = *(_DWORD *)(a1 + 880);
        v128 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)v150 = 67109632;
        *(_DWORD *)&v150[4] = v127;
        *(_WORD *)v151 = 1024;
        *(_DWORD *)&v151[2] = v127;
        *(_WORD *)&v151[6] = 1024;
        *(_DWORD *)&v151[8] = v128;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,aborted", v150, 20, (_DWORD)v137);
        v130 = (uint8_t *)v129;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v129);
        if (v130 != buf)
          free(v130);
      }
      sub_1016C1DD4(a1, *(_DWORD *)(a1 + 860), *(_DWORD *)(a1 + 856));
      *(_DWORD *)(a1 + 788) = 8;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      if (sub_10075BD88())
      {
        *(_DWORD *)(a1 + 824) = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v54 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *(_DWORD *)(a1 + 880);
          v56 = *(_DWORD *)(a1 + 856);
          v57 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = v55;
          v161 = 1024;
          v162 = v55;
          v163 = 1024;
          v164 = v56;
          v165 = 1024;
          v166 = v57;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,abortReason,%d", buf, 0x1Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v131 = *(_DWORD *)(a1 + 880);
          v132 = *(_DWORD *)(a1 + 856);
          v133 = *(_DWORD *)(*(_QWORD *)(a1 + 2368) + 16);
          *(_DWORD *)v150 = 67109888;
          *(_DWORD *)&v150[4] = v131;
          *(_WORD *)v151 = 1024;
          *(_DWORD *)&v151[2] = v131;
          *(_WORD *)&v151[6] = 1024;
          *(_DWORD *)&v151[8] = v132;
          v152 = 1024;
          v153 = v133;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,#Warning instance,%d,session,%u,abortReason,%d", v150, 26, (_DWORD)v137, DWORD2(v137));
          v135 = (uint8_t *)v134;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v134);
          if (v135 != buf)
            free(v135);
        }
      }
      v58 = *(_OWORD *)(a1 + 800);
      v144[0] = *(_OWORD *)(a1 + 784);
      v144[1] = v58;
      v144[2] = *(_OWORD *)(a1 + 816);
      sub_1016C7290(a1, v144);
      result = 0;
      *(_QWORD *)(a1 + 784) = 0;
LABEL_26:
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 800) = _Q0;
      *(_WORD *)(a1 + 822) = 0;
      *(_DWORD *)(a1 + 792) = 0;
      *(_DWORD *)(a1 + 816) = 0;
      *(_BYTE *)(a1 + 820) = 0;
      goto LABEL_27;
    case 12:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v84 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v85 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v85;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v86 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v86;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,#Warning,OTA delete unexpected during RILD_Session state", v150);
      v9 = (uint8_t *)v87;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v87);
      goto LABEL_203;
    case 13:
    case 15:
    case 16:
    case 17:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_8;
      goto LABEL_221;
    case 18:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v37 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_8;
LABEL_221:
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
LABEL_8:
      v7 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning unexpected event", v150);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v8);
      goto LABEL_203;
    case 19:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v34 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v35 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#cp,We are in a session, so we should not have got baseband connect here", v150);
      v9 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 0, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v36);
      goto LABEL_203;
    case 20:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v79 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v80 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v80;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", buf, 8u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v81 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)v150 = 67109120;
      *(_DWORD *)&v150[4] = v81;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Baseband disconnected during session", v150);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v82);
      if (v83 != buf)
        free(v83);
      return 0;
    case 21:
      v24 = *(_QWORD *)(a1 + 2376);
      if (!v24)
      {
        sub_1016DDD80(3);
        goto LABEL_223;
      }
      if (*(_DWORD *)(v24 + 8) == *(_DWORD *)(a1 + 860) && *(_DWORD *)(v24 + 12) == *(_DWORD *)(a1 + 856))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v25 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_DWORD *)(a1 + 880);
          v27 = *(_DWORD **)(a1 + 2376);
          v29 = v27[1];
          v28 = v27[2];
          LODWORD(v27) = v27[3];
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&buf[4] = v26;
          v161 = 1024;
          v162 = v26;
          v163 = 1024;
          v164 = v28;
          v165 = 1024;
          v166 = v29;
          v167 = 1024;
          v168 = (int)v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v121 = *(_DWORD *)(a1 + 880);
          v122 = *(_DWORD **)(a1 + 2376);
          v124 = v122[1];
          v123 = v122[2];
          LODWORD(v122) = v122[3];
          *(_DWORD *)v150 = 67110144;
          *(_DWORD *)&v150[4] = v121;
          *(_WORD *)v151 = 1024;
          *(_DWORD *)&v151[2] = v121;
          *(_WORD *)&v151[6] = 1024;
          *(_DWORD *)&v151[8] = v123;
          v152 = 1024;
          v153 = v124;
          v154 = 1024;
          v155 = (int)v122;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,SessionEnded,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u", v150, 32, (_DWORD)v137, DWORD2(v137), (_DWORD)v138);
          v126 = (uint8_t *)v125;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v125);
          if (v126 != buf)
            free(v126);
        }
        *(_DWORD *)(a1 + 244) = 9;
        sub_1016C7530(a1, 9u, *(_DWORD *)(a1 + 2224), *(_DWORD *)(a1 + 2256), *(_DWORD *)(a1 + 2260), 1);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v90 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v91 = *(_DWORD *)(a1 + 880);
        v92 = *(_DWORD **)(a1 + 2376);
        v94 = v92[1];
        v93 = v92[2];
        LODWORD(v92) = v92[3];
        v95 = *(_DWORD *)(a1 + 860);
        v96 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)buf = 67110656;
        *(_DWORD *)&buf[4] = v91;
        v161 = 1024;
        v162 = v91;
        v163 = 1024;
        v164 = v93;
        v165 = 1024;
        v166 = v94;
        v167 = 1024;
        v168 = (int)v92;
        v169 = 1024;
        v170 = v95;
        v171 = 1024;
        v172 = v96;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v111 = *(_DWORD *)(a1 + 880);
        v112 = *(_DWORD **)(a1 + 2376);
        v114 = v112[1];
        v113 = v112[2];
        LODWORD(v112) = v112[3];
        v115 = *(_DWORD *)(a1 + 860);
        v116 = *(_DWORD *)(a1 + 856);
        *(_DWORD *)v150 = 67110656;
        *(_DWORD *)&v150[4] = v111;
        *(_WORD *)v151 = 1024;
        *(_DWORD *)&v151[2] = v111;
        *(_WORD *)&v151[6] = 1024;
        *(_DWORD *)&v151[8] = v113;
        v152 = 1024;
        v153 = v114;
        v154 = 1024;
        v155 = (int)v112;
        v156 = 1024;
        v157 = v115;
        v158 = 1024;
        v159 = v116;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning SessionNotActive,instance,%d,posProtocol,%d,sessionProtocol,%d,sessionId,%u,CurrentSession,posProtocol,%d,sessionId,%u", v150, 44, (_DWORD)v137, DWORD2(v137), (_DWORD)v138, DWORD2(v138), (_DWORD)v139);
        v9 = (uint8_t *)v117;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v117);
        goto LABEL_203;
      }
      return 3;
    case 22:
      v66 = *(_QWORD *)(a1 + 2384);
      if (v66)
      {
        sub_1016C5E14(a1, v66);
      }
      else
      {
        sub_1016DDAA4(3);
LABEL_223:
        __break(1u);
LABEL_224:
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
LABEL_15:
        v12 = v2[15];
        v13 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)v150 = 67109120;
        *(_DWORD *)&v150[4] = v13;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#ins%d,#nilr,#cp,#Warning unexpected event", v150);
        v9 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v14);
LABEL_203:
        if (v9 != buf)
LABEL_204:
          free(v9);
      }
      return 3;
    case 23:
    case 24:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v2 = &qword_1022A0000;
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning unexpected event", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_15;
      goto LABEL_224;
    case 25:
      if (sub_1016C6D2C(a1))
      {
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 6;
        v88 = *(_OWORD *)(a1 + 816);
        v89 = *(_OWORD *)(a1 + 784);
        v141[1] = *(_OWORD *)(a1 + 800);
        v141[2] = v88;
        v141[0] = v89;
        sub_1016C7290(a1, v141);
        sub_1016C3590(a1 + 8, 27, *(double *)(a1 + 3240));
        return 3;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v97 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v98 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v98;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v118 = *(_DWORD *)(a1 + 880);
          *(_DWORD *)v150 = 67109120;
          *(_DWORD *)&v150[4] = v118;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan request failed", v150);
          v120 = (uint8_t *)v119;
          sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v119);
          if (v120 != buf)
            free(v120);
        }
        sub_1016C7094(a1, -2);
        *(_DWORD *)(a1 + 788) = 5;
        *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
        v99 = *(_OWORD *)(a1 + 800);
        v140[0] = *(_OWORD *)(a1 + 784);
        v140[1] = v99;
        v140[2] = *(_OWORD *)(a1 + 816);
        sub_1016C7290(a1, v140);
        *(_QWORD *)(a1 + 784) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 800) = _Q0;
        *(_WORD *)(a1 + 822) = 0;
        *(_DWORD *)(a1 + 792) = 0;
        *(_DWORD *)(a1 + 816) = 0;
        *(_BYTE *)(a1 + 820) = 0;
        result = 3;
LABEL_27:
        *(_DWORD *)(a1 + 824) = 1;
      }
      return result;
    case 26:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v30 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan response received", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v105 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)v150 = 67109120;
        *(_DWORD *)&v150[4] = v105;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan response received", v150);
        v107 = (uint8_t *)v106;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v106);
        if (v107 != buf)
          free(v107);
      }
      sub_1016C8A08(a1, a1 + 2428);
      *(_DWORD *)(a1 + 784) = 3;
      v32 = *(_QWORD *)(a1 + 3272);
      if (!v32)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 48))(v32, a1 + 784);
      return 0;
    case 27:
    case 28:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan request timeout", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v102 = *(_DWORD *)(a1 + 880);
        *(_DWORD *)v150 = 67109120;
        *(_DWORD *)&v150[4] = v102;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan request timeout", v150);
        v104 = (uint8_t *)v103;
        sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", v103);
        if (v104 != buf)
          free(v104);
      }
      sub_1016C7094(a1, -2);
      *(_DWORD *)(a1 + 788) = 3;
      *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
      v18 = *(_OWORD *)(a1 + 800);
      v137 = *(_OWORD *)(a1 + 784);
      v138 = v18;
      v139 = *(_OWORD *)(a1 + 816);
      sub_1016C7290(a1, &v137);
      result = 0;
      *(_QWORD *)(a1 + 784) = 0;
      goto LABEL_26;
    case 29:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v72 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v73 = *(_DWORD *)(a1 + 880);
        sub_1015A2E04(buf, "MeasurementAndEstimateResponse");
        v74 = (v166 & 0x8000) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v150 = 67109378;
        *(_DWORD *)&v150[4] = v73;
        *(_WORD *)v151 = 2080;
        *(_QWORD *)&v151[2] = v74;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", v150, 0x12u);
        if (SBYTE1(v166) < 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        return 3;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v75 = qword_1022A0078;
      v76 = *(_DWORD *)(a1 + 880);
      sub_1015A2E04(v150, "MeasurementAndEstimateResponse");
      if ((v153 & 0x8000) == 0)
        v77 = v150;
      else
        v77 = *(uint8_t **)v150;
      v147[0] = 67109378;
      v147[1] = v76;
      v148 = 2080;
      v149 = v77;
      LODWORD(v136) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 0, "#ins%d,#nilr,#cp,#Warning,unexpected event,%s", v147, v136);
      v9 = v78;
      if (SBYTE1(v153) < 0)
        operator delete(*(void **)v150);
      sub_100512490("Generic", 1, 0, 2, "CLNilrCplane::State CLNilrCplane::handler_RILD_WlanSession(CLNilrCplane::Event)", "%s\n", (const char *)v9);
      if (v9 == buf)
        return 3;
      goto LABEL_204;
    default:
      return result;
  }
}

void sub_1016C0670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a67;
  char a72;

  if (a52 < 0)
    operator delete(__p);
  if (a63 < 0)
    operator delete(a58);
  if (a72 < 0)
    operator delete(a67);
  _Unwind_Resume(a1);
}

uint64_t (***sub_1016C073C(uint64_t a1, _DWORD *a2))()
{
  uint64_t (***result)();
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t (**v20)();
  _DWORD *v21;
  int v22;
  uint64_t (***v23)();
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  sub_100197040();
  result = (uint64_t (***)())sub_10075BD18();
  if ((_DWORD)result)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 880);
      v7 = *a2;
      v8 = a2[10];
      v9 = a2[12];
      v10 = a2[13];
      *(_DWORD *)buf = 67110144;
      v34 = v6;
      v35 = 1024;
      v36 = v7;
      v37 = 1024;
      v38 = v8;
      v39 = 1024;
      v40 = v9;
      v41 = 1024;
      v42 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,sendLPPConfigToBaseband,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v13 = *(_DWORD *)(a1 + 880);
      v14 = *a2;
      v15 = a2[10];
      v16 = a2[12];
      v17 = a2[13];
      v24[0] = 67110144;
      v24[1] = v13;
      v25 = 1024;
      v26 = v14;
      v27 = 1024;
      v28 = v15;
      v29 = 1024;
      v30 = v16;
      v31 = 1024;
      v32 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,sendLPPConfigToBaseband,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", v24, 32, (_DWORD)v20, (_DWORD)v21, v22);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::sendLPPConfigToBaseband(const CLEmergencyController::LocationSettings &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v20 = off_1021C8F28;
    v21 = a2;
    v23 = &v20;
    v11 = *(_QWORD *)(a1 + 200);
    if (!v11)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v11 + 48))(v11, &v20);
    result = v23;
    if (v23 == &v20)
    {
      v12 = 4;
      result = &v20;
    }
    else
    {
      if (!v23)
        return result;
      v12 = 5;
    }
    return (uint64_t (***)())(*result)[v12]();
  }
  return result;
}

void sub_1016C09C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1016C0A04(_QWORD *a1, int a2, uint64_t a3)
{
  sub_1016B93F8(a1, a2, a3);
}

_QWORD *sub_1016C0A10(_QWORD *a1)
{
  __n128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_1016C0B50((uint64_t)a1);
  v2.n128_f64[0] = sub_1016A9088((uint64_t)(a1 + 64));
  v3 = (_QWORD *)a1[409];
  if (v3 == a1 + 406)
  {
    v4 = 4;
    v3 = a1 + 406;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(__n128))(*v3 + 8 * v4))(v2);
LABEL_6:
  sub_100261F44((uint64_t)(a1 + 291));
  sub_100261F44((uint64_t)(a1 + 289));
  sub_100261F44((uint64_t)(a1 + 287));
  sub_100261F44((uint64_t)(a1 + 285));
  sub_100261F44((uint64_t)(a1 + 283));
  sub_100857FD0((uint64_t)(a1 + 111));
  v5 = a1[105];
  a1[105] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (_QWORD *)a1[29];
  if (v6 == a1 + 26)
  {
    v7 = 4;
    v6 = a1 + 26;
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  v8 = (_QWORD *)a1[25];
  if (v8 == a1 + 22)
  {
    v9 = 4;
    v8 = a1 + 22;
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_18:
  v10 = (_QWORD *)a1[21];
  if (v10 == a1 + 18)
  {
    v11 = 4;
    v10 = a1 + 18;
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
LABEL_22:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  sub_1016CD57C((uint64_t)(a1 + 1));
  return a1;
}

double sub_1016C0B50(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v10;
  uint8_t *v11;
  double result;
  int v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[4];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,resetStateData", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v13 = *(_DWORD *)(a1 + 880);
    v16[0] = 67109120;
    v16[1] = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,resetStateData", v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::resetStateData()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  sub_100346F9C((_QWORD *)(a1 + 2296));
  sub_100346F9C((_QWORD *)(a1 + 2312));
  sub_100346F9C((_QWORD *)(a1 + 2264));
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 868) = -1;
  *(_QWORD *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 877) = 0;
  sub_1016D7364(*(_QWORD **)(a1 + 64), (_QWORD *)(a1 + 72), a1 + 8);
  v4 = *(_QWORD *)(a1 + 840);
  if (*(int *)(v4 + 8) >= 1)
    sub_100E3E6F0(v4);
  sub_1016A9088(a1 + 240);
  *(_QWORD *)(a1 + 784) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 800) = _Q0;
  *(_WORD *)(a1 + 822) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 820) = 0;
  *(_DWORD *)(a1 + 824) = 1;
  bzero(buf, 0x328uLL);
  v10 = 0;
  *(_QWORD *)&buf[8] = -1;
  *(_DWORD *)&buf[16] = -1;
  do
  {
    v11 = &buf[v10];
    *((_WORD *)v11 + 14) = 0;
    *(_DWORD *)(v11 + 30) = 0x7FFFFFFF;
    v10 += 12;
  }
  while (v10 != 768);
  buf[790] = 0;
  buf[800] = 0;
  memcpy((void *)(a1 + 2428), buf, 0x328uLL);
  result = NAN;
  *(_OWORD *)(a1 + 2408) = xmmword_101BB6FC0;
  *(_BYTE *)(a1 + 2426) = 0;
  *(_WORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 3240) = 0;
  return result;
}

void sub_1016C0DF8(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  _DWORD v15[409];

  if ((sub_100014ADC() & 1) == 0)
  {
    *(_BYTE *)(a1 + 138) = a2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 880);
      v6 = *(unsigned __int8 *)(a1 + 138);
      *(_DWORD *)buf = 67109376;
      v15[0] = v5;
      LOWORD(v15[1]) = 1024;
      *(_DWORD *)((char *)&v15[1] + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,setLockOutNILR,fLockOutNILR,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v7 = *(_DWORD *)(a1 + 880);
      v8 = *(unsigned __int8 *)(a1 + 138);
      v11[0] = 67109376;
      v11[1] = v7;
      v12 = 1024;
      v13 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,setLockOutNILR,fLockOutNILR,%d", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::setLockOutNILR(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (*(_BYTE *)(a1 + 138))
    {
      *(_QWORD *)&v15[3] = 0;
      v15[5] = 0;
      v15[2] = *(_DWORD *)(a1 + 856);
      *(_QWORD *)v15 = *(_QWORD *)(a1 + 860);
      *(_QWORD *)(a1 + 2368) = buf;
      sub_1016C1014(a1 + 8, 11);
      *(_QWORD *)(a1 + 2368) = 0;
    }
  }
}

uint64_t sub_1016C1014(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t **v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t *v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  void **v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  void **v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _BYTE *v95;
  _BYTE *v96;
  void **v97;
  char *v98;
  char *v99;
  const char *v100;
  const char *v101;
  int v102;
  void *v103[2];
  char v104;
  unsigned int v105;
  _BYTE __p[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  void **v110;
  _BYTE buf[12];
  __int16 v112;
  _BYTE *v113;
  __int16 v114;
  _BYTE *v115;
  _BYTE v116[12];
  __int16 v117;
  _BYTE *v118;
  char v119;

  ++*(_DWORD *)(a1 + 88);
  v105 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_1016DDEE8();
    goto LABEL_169;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_1016DE050(qword_1022A0070 == -1);
    goto LABEL_169;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    v8 = *(int *)(a1 + 4);
    if (v8 > 3)
      v9 = "StateUnknown";
    else
      v9 = off_1021C93C8[v8];
    sub_1015A2E04(__p, v9);
    v10 = SHIBYTE(v109);
    v11 = *(_BYTE **)__p;
    sub_1016C6880(a2, v116);
    v12 = __p;
    if (v10 < 0)
      v12 = v11;
    if (v119 >= 0)
      v13 = v116;
    else
      v13 = *(_BYTE **)v116;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v112 = 2080;
    v113 = v12;
    v114 = 2080;
    v115 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v119 < 0)
      operator delete(*(void **)v116);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v63 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v63 = (_QWORD *)*v63;
    v64 = qword_1022A0078;
    v65 = *(unsigned __int8 *)(a1 + 120);
    sub_1016C7504(*(_DWORD *)(a1 + 4), v116);
    v66 = v119;
    v67 = *(_BYTE **)v116;
    sub_1016C6880(a2, v103);
    v68 = v116;
    if (v66 < 0)
      v68 = v67;
    if (v104 >= 0)
      v69 = v103;
    else
      v69 = (void **)v103[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v63;
    v107 = 2080;
    v108 = v68;
    v109 = 2080;
    v110 = v69;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v64, v65, "%scurrent_state,%s,event,%s", __p, 32, v101);
    v71 = v70;
    if (v104 < 0)
      operator delete(v103[0]);
    v3 = &qword_1022A0000;
    if (v119 < 0)
      operator delete(*(void **)v116);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v71);
    if (v71 != buf)
      free(v71);
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (uint64_t **)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 4);
  v17 = a1 + 16;
  do
  {
    v18 = *(_DWORD *)(v14 + 32);
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (!v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_1016DE1C4();
    goto LABEL_169;
  }
  v22 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 40);
  v21 = *(_QWORD *)(v17 + 48);
  v23 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v21 >> 1));
  if ((v21 & 1) != 0)
    v22 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v22);
  v24 = v22(v23, a2);
  v25 = v24;
  v102 = v24;
  if (a2 <= 1 && (_DWORD)v24 != v105)
  {
    sub_1016DE5FC();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v27 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v78 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v78 = (_QWORD *)*v78;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v78;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v79);
      if (v80 != buf)
        free(v80);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v28 = qword_1022A0078;
  v29 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v29))
  {
    v30 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v30 = (_QWORD *)*v30;
    if (v25 > 3)
      v31 = "StateUnknown";
    else
      v31 = off_1021C93C8[(int)v25];
    sub_1015A2E04(buf, v31);
    if (v114 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v30;
    v107 = 2080;
    v108 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v114) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v72 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v72 = (_QWORD *)*v72;
    v73 = qword_1022A0078;
    v74 = *(unsigned __int8 *)(a1 + 120);
    sub_1016C7504(v25, __p);
    if (v109 >= 0)
      v75 = __p;
    else
      v75 = *(_BYTE **)__p;
    *(_DWORD *)v116 = 136315394;
    *(_QWORD *)&v116[4] = v72;
    v117 = 2080;
    v118 = v75;
    LODWORD(v100) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, v74, "%snewState,%s", v116, v100);
    v77 = v76;
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v77);
    if (v77 != buf)
      free(v77);
  }
  if ((_DWORD)v25 != v105)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v35 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v35 = (_QWORD *)*v35;
      if (v105 > 3)
        v36 = "StateUnknown";
      else
        v36 = off_1021C93C8[v105];
      sub_1015A2E04(__p, v36);
      v37 = v3;
      v38 = SHIBYTE(v109);
      v39 = *(_BYTE **)__p;
      sub_1015A2E04(v116, "Exit");
      v40 = __p;
      if (v38 < 0)
        v40 = v39;
      if (v119 >= 0)
        v41 = v116;
      else
        v41 = *(_BYTE **)v116;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v112 = 2080;
      v113 = v40;
      v114 = 2080;
      v115 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v119 < 0)
        operator delete(*(void **)v116);
      v3 = v37;
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v81 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v81 = (_QWORD *)*v81;
      v82 = qword_1022A0078;
      v83 = *(unsigned __int8 *)(a1 + 120);
      sub_1016C7504(v105, v116);
      v84 = v3;
      v85 = v119;
      v86 = *(_BYTE **)v116;
      sub_1015A2E04(v103, "Exit");
      v87 = v116;
      if (v85 < 0)
        v87 = v86;
      if (v104 >= 0)
        v88 = v103;
      else
        v88 = (void **)v103[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v81;
      v107 = 2080;
      v108 = v87;
      v109 = 2080;
      v110 = v88;
      LODWORD(v100) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, v83, "%soldState,%s,event,%s", __p, v100, (const char *)(a1 + 8));
      v90 = v89;
      if (v104 < 0)
        operator delete(v103[0]);
      v3 = v84;
      v15 = (uint64_t **)v101;
      if (v119 < 0)
        operator delete(*(void **)v116);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v90);
      if (v90 != buf)
        free(v90);
    }
    v42 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v105;
    v43 = sub_1000610B4(v15, (int *)&v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v44 = v43[5];
    v45 = (uint64_t)v43[6];
    v46 = (_QWORD *)(v42 + (v45 >> 1));
    if ((v45 & 1) != 0)
      v44 = *(uint64_t **)(*v46 + v44);
    v47 = ((uint64_t (*)(_QWORD *, uint64_t))v44)(v46, 1);
    if (v47 == v105)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v48 = qword_1022A0078;
      v49 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v49))
      {
        v50 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v50 = (_QWORD *)*v50;
        if (v25 > 3)
          v51 = "StateUnknown";
        else
          v51 = off_1021C93C8[(int)v25];
        sub_1015A2E04(__p, v51);
        v52 = v3;
        v53 = SHIBYTE(v109);
        v54 = *(_BYTE **)__p;
        sub_1015A2E04(v116, "Enter");
        v55 = __p;
        if (v53 < 0)
          v55 = v54;
        if (v119 >= 0)
          v56 = v116;
        else
          v56 = *(_BYTE **)v116;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v50;
        v112 = 2080;
        v113 = v55;
        v114 = 2080;
        v115 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v119 < 0)
          operator delete(*(void **)v116);
        v3 = v52;
        if (SHIBYTE(v109) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v91 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v91 = (_QWORD *)*v91;
        v92 = qword_1022A0078;
        v93 = *(unsigned __int8 *)(a1 + 120);
        sub_1016C7504(v25, v116);
        v94 = v119;
        v95 = *(_BYTE **)v116;
        sub_1015A2E04(v103, "Enter");
        v96 = v116;
        if (v94 < 0)
          v96 = v95;
        if (v104 >= 0)
          v97 = v103;
        else
          v97 = (void **)v103[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v91;
        v107 = 2080;
        v108 = v96;
        v109 = 2080;
        v110 = v97;
        LODWORD(v100) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v92, v93, "%snewState,%s,event,%s", __p, v100, v101);
        v99 = v98;
        if (v104 < 0)
          operator delete(v103[0]);
        if (v119 < 0)
          operator delete(*(void **)v116);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLNilrCplane>::handleEvent(Event) [T = CLNilrCplane]", "%s\n", v99);
        if (v99 != buf)
          free(v99);
      }
      v57 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v102;
      v58 = sub_1000610B4(v15, &v102, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v59 = v58[5];
      v60 = (uint64_t)v58[6];
      v61 = (_QWORD *)(v57 + (v60 >> 1));
      if ((v60 & 1) != 0)
        v59 = *(uint64_t **)(*v61 + v59);
      v25 = ((uint64_t (*)(_QWORD *, _QWORD))v59)(v61, 0);
      if ((_DWORD)v25 == v102)
        goto LABEL_101;
      sub_1016DE32C();
    }
    else
    {
      sub_1016DE494();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1016C1D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C1DD4(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  int v15;
  int v16;
  _QWORD v17[3];
  _QWORD *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v14[0] = *(_DWORD *)(a1 + 880) != 0;
  v14[1] = a2;
  v15 = 0;
  v16 = a3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109888;
    v27 = v7;
    v28 = 1024;
    v29 = v7;
    v30 = 1024;
    v31 = a2;
    v32 = 1024;
    v33 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,SendAbortCnf,instance,%d,posProtocol,%d,sessionId,%d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = *(_DWORD *)(a1 + 880);
    v19[0] = 67109888;
    v19[1] = v11;
    v20 = 1024;
    v21 = v11;
    v22 = 1024;
    v23 = a2;
    v24 = 1024;
    v25 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,SendAbortCnf,instance,%d,posProtocol,%d,sessionId,%d", v19, 26, v14[0], v15);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::sendAbortCnf(gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v17[0] = off_1021C7DF8;
  v17[1] = v14;
  v18 = v17;
  v8 = *(_QWORD *)(a1 + 200);
  if (!v8)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v17);
  result = v18;
  if (v18 == v17)
  {
    v10 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016C2040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C2084(uint64_t a1, int a2, int a3, int a4, int a5)
{
  __int128 v9;
  _BOOL4 v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _BOOL4 v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  _DWORD v30[2];
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD v36[3];
  __int16 v37;
  char v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  char v43;
  __int128 v44;
  _DWORD v45[6];
  __int16 v46;
  __int128 v47;
  __int16 v48;
  char v49;
  _BYTE v50[124];
  int v51;
  _QWORD v52[3];
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  char v64;
  _QWORD v65[2];
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  char v87;
  int v88;
  __int16 v89;
  char v90;
  _DWORD v91[2];
  char v92;
  _QWORD v93[3];
  _QWORD *v94;
  _QWORD v95[3];
  _QWORD *v96;
  int v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  uint8_t buf[4];
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;

  if (a3)
  {
    v34 = -1;
    LOWORD(v35) = 0;
    BYTE2(v35) = -1;
    v36[0] = -1;
    *(_QWORD *)((char *)v36 + 7) = -1;
    v36[2] = 0xFFFFFFFF00000004;
    v37 = -1;
    v38 = -1;
    v39 = -1;
    v40 = 0;
    v41 = 0x7FFFFFFF000000FFLL;
    v42 = 0x7FFFFFFF;
    v43 = -1;
    v44 = xmmword_101CCE1C0;
    *(_QWORD *)v45 = 0xFFFFFFFF7FFFFFFFLL;
    *(_DWORD *)((char *)&v45[1] + 3) = -1;
    *(_QWORD *)&v45[3] = 0x8000000080000000;
    v46 = -1;
    v45[5] = -1;
    *(_QWORD *)&v9 = 0x8000000080000000;
    *((_QWORD *)&v9 + 1) = 0x8000000080000000;
    v47 = v9;
    v48 = -1;
    v49 = -1;
    memset_pattern16(v50, &unk_101CCE1D0, 0x78uLL);
    v50[120] = -1;
    v51 = 255;
    v52[2] = -1;
    v52[0] = -1;
    *(_QWORD *)((char *)v52 + 7) = -1;
    v53 = 0;
    v54 = 0;
    v10 = *(_DWORD *)(a1 + 880) != 0;
    HIDWORD(v33) = a4;
    LODWORD(v34) = a5;
    v32 = 0;
    LODWORD(v33) = 0;
    v30[0] = v10;
    v31 = a2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67110144;
      v108 = v12;
      v109 = 1024;
      v110 = v12;
      v111 = 1024;
      v112 = a4;
      v113 = 1024;
      v114 = a5;
      v115 = 1024;
      v116 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,nilr,posResponseFailure,posProtocol,%d,sessionId,%d,result,%d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v24 = *(_DWORD *)(a1 + 880);
      v97 = 67110144;
      v98 = v24;
      v99 = 1024;
      v100 = v24;
      v101 = 1024;
      v102 = a4;
      v103 = 1024;
      v104 = a5;
      v105 = 1024;
      v106 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#ins%d,nilr,posResponseFailure,posProtocol,%d,sessionId,%d,result,%d", &v97, 32, v30[0], v31, v33);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::sendMeasurementFailure(gnss::Emergency::Cplane::ErrorCodes, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v93[0] = off_1021C8138;
    v93[1] = v30;
    v94 = v93;
    v13 = *(_QWORD *)(a1 + 200);
    if (!v13)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v93);
    result = v94;
    if (v94 == v93)
    {
      v15 = 4;
      result = v93;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
    }
  }
  else
  {
    v31 = 0;
    LOBYTE(v32) = 0;
    v33 = -1;
    v34 = -1;
    v16 = 9;
    v35 = -1;
    do
    {
      v17 = &v30[v16];
      *(_WORD *)v17 = 0x7FFF;
      *(_DWORD *)((char *)v17 + 2) = -1;
      *(_DWORD *)((char *)v17 + 5) = -1;
      *(_QWORD *)(v17 + 3) = 0xFFFFFFFF00000004;
      *((_BYTE *)v17 + 20) = -1;
      v16 += 6;
    }
    while (v17 + 6 != &v55);
    v55 = 0;
    v56 = -1;
    v57 = 33619967;
    v58 = -1;
    v62 = -1;
    v63 = -1;
    v59 = -1;
    v60 = -1;
    v61 = -1;
    v64 = -1;
    *(_DWORD *)((char *)v65 + 7) = -1;
    v65[0] = -1;
    v66 = 4;
    v67 = -1;
    v68 = 0;
    v72 = -1;
    v73 = -1;
    v71 = -1;
    v70 = -1;
    v69 = -1;
    v74 = -1;
    v76 = -1;
    v77 = -1;
    v75 = -1;
    v78 = -1;
    v79 = -1;
    v80 = -1;
    v84 = -1;
    v81 = -1;
    v82 = -1;
    v83 = -1;
    v85 = -129;
    v86 = -1;
    v87 = -1;
    v88 = 5;
    v89 = -1;
    v90 = -1;
    v18 = 157;
    do
    {
      v19 = &v30[v18];
      *v19 = -32769;
      *((_BYTE *)v19 + 4) = -1;
      *((_QWORD *)v19 + 1) = 0xFF00000004;
      *((_WORD *)v19 + 8) = -1;
      v19[5] = -1;
      v18 += 6;
    }
    while (v19 + 6 != v91);
    v92 = 0;
    v20 = *(_DWORD *)(a1 + 880) != 0;
    v91[1] = -1;
    HIDWORD(v33) = a4;
    LODWORD(v34) = a5;
    LODWORD(v33) = 0;
    v30[0] = v20;
    v31 = a2;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67110144;
      v108 = v22;
      v109 = 1024;
      v110 = v22;
      v111 = 1024;
      v112 = a4;
      v113 = 1024;
      v114 = a5;
      v115 = 1024;
      v116 = a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,nilr,measResponseFailure,posProtocol,%d,sessionId,%d,result,%d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v27 = *(_DWORD *)(a1 + 880);
      v97 = 67110144;
      v98 = v27;
      v99 = 1024;
      v100 = v27;
      v101 = 1024;
      v102 = a4;
      v103 = 1024;
      v104 = a5;
      v105 = 1024;
      v106 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#ins%d,nilr,measResponseFailure,posProtocol,%d,sessionId,%d,result,%d", &v97, 32, v30[0], v31, v33);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::sendMeasurementFailure(gnss::Emergency::Cplane::ErrorCodes, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v95[0] = off_1021C7F98;
    v95[1] = v30;
    v96 = v95;
    v23 = *(_QWORD *)(a1 + 200);
    if (!v23)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 48))(v23, v95);
    result = v96;
    if (v96 == v95)
    {
      v15 = 4;
      result = v95;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
    }
  }
  if (!result)
    return result;
  v15 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_1016C275C(_Unwind_Exception *a1)
{
  unint64_t *v2;
  uint64_t v3;

  v2 = (unint64_t *)STACK[0x5C8];
  if ((unint64_t *)STACK[0x5C8] == &STACK[0x5B0])
  {
    v3 = 4;
    v2 = &STACK[0x5B0];
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1016C27C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  if (*(_BYTE *)(a1 + 876))
  {
    v5[0] = off_1021C82D8;
    v5[1] = a1;
    v6 = v5;
    v2 = *(_QWORD *)(a1 + 168);
    if (!v2)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v5);
    v3 = v6;
    if (v6 == v5)
    {
      v4 = 4;
      v3 = v5;
      goto LABEL_7;
    }
    if (v6)
    {
      v4 = 5;
LABEL_7:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  sub_1016C28D8(a1);
  sub_1016C2ABC(a1 + 8, 18);
  *(_BYTE *)(a1 + 876) = 0;
}

void sub_1016C2894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016C28D8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane,reportSessionEnd", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 880);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,CPlane,reportSessionEnd", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::reportSessionEnd()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    *(_DWORD *)(a1 + 240) = 2;
    v4 = a1 + 240;
    *(CFAbsoluteTime *)(v4 + 32) = CFAbsoluteTimeGetCurrent();
    v5 = *(_QWORD *)(v4 - 8);
    if (!v5)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v4);
  }
}

void sub_1016C2ABC(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1016C6880(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1016C6880(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::cancelTimeoutEvent(Event) [T = CLNilrCplane]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1016C6880(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1016C6880(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_1016C2F4C(uint64_t a1, unsigned __int16 *a2)
{
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void **v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  int v21;
  char *v22;
  char *v23;
  void *v24;
  int v25;
  const char *v26;
  int v27;
  unint64_t v28;
  int v29;
  _QWORD v30[3];
  _QWORD *v31;
  void *__p;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  int v42;
  uint8_t buf[4];
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  int v54;

  *(_DWORD *)(a1 + 856) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 860) = *((_DWORD *)a2 + 9);
  *(_DWORD *)(a1 + 868) = *((_DWORD *)a2 + 1);
  if (*a2)
  {
    v4 = (double)((8389 * (*a2 >> 3)) >> 20) + 10.0;
  }
  else
  {
    v4 = (double)a2[4];
    if (!a2[4])
      v4 = 30.0;
  }
  *(double *)(a1 + 848) = v4;
  LOWORD(v27) = 257;
  v28 = 0xBFF0000000000000;
  v29 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 880);
    v7 = *(unsigned __int8 *)(a1 + 893);
    v8 = *(unsigned __int8 *)(a1 + 892);
    v9 = *(unsigned __int8 *)(a1 + 944);
    sub_100F8DED0(*(_DWORD *)(a1 + 948), &__p);
    v10 = (v38 & 0x8000) == 0 ? &__p : (void **)__p;
    v11 = *(unsigned __int8 *)(a1 + 992);
    *(_DWORD *)buf = 67110402;
    v44 = v6;
    v45 = 1024;
    v46 = v7;
    v47 = 1024;
    v48 = v8;
    v49 = 1024;
    v50 = v9;
    v51 = 2080;
    v52 = v10;
    v53 = 1024;
    v54 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,earlyReturn,%d,HELO,%d,provideHELOUnsolicited,%d,measTimeStampSource,%s,configureVerticalUncertainty,%d", buf, 0x2Au);
    if (SBYTE1(v38) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v15 = qword_1022A0078;
    v16 = *(_DWORD *)(a1 + 880);
    v17 = *(unsigned __int8 *)(a1 + 893);
    v18 = *(unsigned __int8 *)(a1 + 892);
    v19 = *(unsigned __int8 *)(a1 + 944);
    sub_100F8DED0(*(_DWORD *)(a1 + 948), &v24);
    if (SHIBYTE(v26) >= 0)
      v20 = &v24;
    else
      v20 = v24;
    v21 = *(unsigned __int8 *)(a1 + 992);
    LODWORD(__p) = 67110402;
    HIDWORD(__p) = v16;
    v33 = 1024;
    v34 = v17;
    v35 = 1024;
    v36 = v18;
    v37 = 1024;
    v38 = v19;
    v39 = 2080;
    v40 = v20;
    v41 = 1024;
    v42 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#ins%d,#nilr,#cp,NilrCPlane,earlyReturn,%d,HELO,%d,provideHELOUnsolicited,%d,measTimeStampSource,%s,configureVerticalUncertainty,%d", &__p, 42, (_DWORD)v24, v25, v26, v27);
    v23 = v22;
    if (SHIBYTE(v26) < 0)
      operator delete(v24);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::startRildSession(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  LOWORD(v27) = *(_WORD *)(a1 + 892);
  if (*(_BYTE *)(a1 + 992))
    v28 = *(_QWORD *)(a1 + 1000);
  LOBYTE(v29) = *(_BYTE *)(a1 + 944);
  HIBYTE(v29) = *(_DWORD *)(a1 + 948) == 1;
  v30[0] = off_1021C8358;
  v30[1] = a2;
  v30[2] = &v27;
  v31 = v30;
  v12 = *(_QWORD *)(a1 + 168);
  if (!v12)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v30);
  v13 = v31;
  if (v31 == v30)
  {
    v14 = 4;
    v13 = v30;
    goto LABEL_21;
  }
  if (v31)
  {
    v14 = 5;
LABEL_21:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  sub_1016C3360(a1);
  *(_BYTE *)(a1 + 876) = 1;
  sub_1016C3590(a1 + 8, 18, *(double *)(a1 + 848));
}

void sub_1016C331C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v21;
  uint64_t v22;

  v21 = a20;
  if (a20 == &a17)
  {
    v22 = 4;
    v21 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016C3360(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  CFAbsoluteTime Current;
  unint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane,reportSessionStart", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(a1 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,CPlane,reportSessionStart", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::reportSessionStart()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (*(_QWORD *)(a1 + 232))
  {
    *(_DWORD *)(a1 + 240) = 1;
    v4 = a1 + 240;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 608);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v4 + 616);
    Current = CFAbsoluteTimeGetCurrent();
    LOWORD(v6) = *(_WORD *)(v4 + 1988);
    *(double *)(v4 + 16) = (double)v6;
    *(CFAbsoluteTime *)(v4 + 24) = Current;
    *(long double *)(v4 + 56) = sub_1016E138C(*(unsigned __int8 *)(v4 + 1990));
    *(_DWORD *)(v4 + 136) = *(_DWORD *)(v4 + 1984);
    *(_BYTE *)(v4 + 152) = *(_BYTE *)(v4 + 1996);
    *(_DWORD *)(v4 + 156) = *(_DWORD *)(v4 + 2004);
    *(_BYTE *)(v4 + 160) = *(_BYTE *)(v4 + 2010);
    *(_DWORD *)(v4 + 164) = *(unsigned __int16 *)(v4 + 1980);
    v7 = *(_QWORD *)(v4 - 8);
    if (!v7)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v4);
  }
}

void sub_1016C3590(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1016C6880(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1016C6880(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1016C6880(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C7D48);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1016C6880(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLNilrCplane>::setTimeoutEvent(Event, double) [T = CLNilrCplane]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1016D1DD4;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1016C6880(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1016C6880(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

BOOL sub_1016C4060(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  _BOOL8 result;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if ((sub_10075BE08() & 1) != 0 || !*(_WORD *)a2)
    return 1;
  v4 = *(_WORD *)a2 != 2000 || *(_BYTE *)(a1 + 872) == 0;
  if (!v4 && *(unsigned __int8 *)(a2 + 32) == 255 && *(_DWORD *)(a2 + 4) == 1)
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = *(unsigned __int16 *)(a1 + 2220);
    v9 = *(unsigned __int8 *)(a1 + 2252);
    v10 = *(_DWORD *)(a1 + 2224);
    *(_DWORD *)buf = 67110144;
    v23 = v7;
    v24 = 1024;
    v25 = v7;
    v26 = 1024;
    v27 = v8;
    v28 = 1024;
    v29 = v9;
    v30 = 1024;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning Unsupported periodic request,instance,%d,interval,%d,reportingAmount,%d,method,%d", buf, 0x20u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = *(_DWORD *)(a1 + 880);
    v12 = *(unsigned __int16 *)(a1 + 2220);
    v13 = *(unsigned __int8 *)(a1 + 2252);
    v14 = *(_DWORD *)(a1 + 2224);
    LOWORD(v18) = 1024;
    HIWORD(v18) = v11;
    HIWORD(v19) = HIWORD(v13);
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning Unsupported periodic request,instance,%d,interval,%d,reportingAmount,%d,method,%d", &v17, 32, 67110144, v18, v12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrCplane::isSessionAllowed(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
    return 0;
  }
  return result;
}

void sub_1016C42B4(_DWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  if (a1[214] == *(_DWORD *)(a2 + 40) && a1[215] == *(_DWORD *)(a2 + 36))
  {
    sub_1016C2F4C((uint64_t)a1, (unsigned __int16 *)a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[220];
      v6 = a1[215];
      v7 = a1[214];
      v8 = *(_DWORD *)(a2 + 36);
      v9 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)buf = 67110400;
      v22 = v5;
      v23 = 1024;
      v24 = v5;
      v25 = 1024;
      v26 = v6;
      v27 = 1024;
      v28 = v7;
      v29 = 1024;
      v30 = v8;
      v31 = 1024;
      v32 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#ins%d,#Warning Concurrent session, overriding with new one, ending currentSession,%d,%d,withNewSession,%d,%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = a1[220];
      v11 = a1[215];
      v12 = a1[214];
      v13 = *(_DWORD *)(a2 + 40);
      LOWORD(v17) = 1024;
      HIWORD(v17) = v10;
      LOWORD(v18) = HIWORD(v12);
      HIWORD(v18) = 1024;
      v19 = 1024;
      v20 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#ins%d,#Warning Concurrent session, overriding with new one, ending currentSession,%d,%d,withNewSession,%d,%d", &v16, 38, 67110400, v17, v11, v18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::handleMeasurementRequestUpdate(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    a1[61] = 8;
    sub_1016C2084((uint64_t)a1, -2, a1[217], a1[215], a1[214]);
    sub_1016C4588((uint64_t)a1, 8u, a1[217], a1[215], a1[214], 1, a1[554], 1);
    sub_1016C27C0((uint64_t)a1);
    sub_1016C2F4C((uint64_t)a1, (unsigned __int16 *)a2);
  }
}

uint64_t sub_1016C4588(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, int a8)
{
  NSObject *v13;
  unsigned int v14;
  void *v15;
  int v16;
  int v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t result;
  uint64_t v28;
  int v29;
  void **v30;
  int v31;
  int v32;
  void **v33;
  void **v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  int v42;
  int v43;
  char v44;
  void *__p[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  void **v55;
  __int16 v56;
  void **v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  uint8_t buf[4];
  unsigned int v67;
  _BYTE v68[32];
  _BYTE v69[12];
  int v70;
  uint64_t v71;
  int v72;
  int64x2_t v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD v79[2];
  int v80;
  char v81;
  unint64_t v82;
  int v83;
  int64x2_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  __int16 v88;
  int v89;
  int v90;
  int v91;
  char v92;
  uint64_t v93;
  char v94;
  int64x2_t v95;
  unint64_t v96;

  v39 = (const char *)__PAIR64__(a4, a3);
  v40 = a1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_DWORD *)(v40 + 880);
    v15 = &v49;
    sub_1016E0854(SHIDWORD(v39), &v49);
    v16 = a7;
    v17 = a8;
    if (SBYTE1(v55) < 0)
      v15 = v49;
    sub_1016E0884((int)v39, v47);
    v18 = v48;
    v19 = (void **)v47[0];
    sub_1016E07FC(a2, __p);
    v20 = v47;
    if (v18 < 0)
      v20 = v19;
    v21 = __p;
    if (v46 < 0)
      v21 = (void **)__p[0];
    *(_DWORD *)buf = 67111170;
    v67 = v14;
    *(_WORD *)v68 = 1024;
    *(_DWORD *)&v68[2] = v14;
    *(_WORD *)&v68[6] = 1024;
    *(_DWORD *)&v68[8] = a5;
    *(_WORD *)&v68[12] = 2080;
    *(_QWORD *)&v68[14] = v15;
    *(_WORD *)&v68[22] = 2080;
    *(_QWORD *)&v68[24] = v20;
    *(_WORD *)v69 = 2080;
    *(_QWORD *)&v69[2] = v21;
    *(_WORD *)&v69[10] = 1024;
    v70 = a6;
    LOWORD(v71) = 1024;
    a7 = v16;
    *(_DWORD *)((char *)&v71 + 2) = v16;
    HIWORD(v71) = 1024;
    a8 = v17;
    v72 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%d,overridingCommType,%d,waitToPostToAWD,%d", buf, 0x44u);
    if (v46 < 0)
      operator delete(__p[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    if (SBYTE1(v55) < 0)
      operator delete(v49);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v28 = qword_1022A0078;
    v29 = *(_DWORD *)(v40 + 880);
    v30 = v47;
    sub_1016E0854(SHIDWORD(v39), v47);
    v38 = v28;
    v31 = a6;
    if (v48 < 0)
      v30 = (void **)v47[0];
    sub_1016E0884((int)v39, __p);
    v32 = v46;
    v33 = (void **)__p[0];
    sub_1016E07FC(a2, &v41);
    v34 = __p;
    if (v32 < 0)
      v34 = v33;
    v35 = &v41;
    if (v44 < 0)
      v35 = v41;
    LODWORD(v49) = 67111170;
    HIDWORD(v49) = v29;
    v50 = 1024;
    v51 = v29;
    v52 = 1024;
    v53 = a5;
    v54 = 2080;
    v55 = v30;
    v56 = 2080;
    v57 = v34;
    v58 = 2080;
    v59 = v35;
    v60 = 1024;
    a6 = v31;
    v61 = v31;
    v62 = 1024;
    v63 = a7;
    v64 = 1024;
    v65 = a8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 0, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%d,overridingCommType,%d,waitToPostToAWD,%d", &v49, 68, v38, v39, (const char *)v40, (const char *)v41, v42, v43, LODWORD(__p[0]));
    v37 = v36;
    if (v44 < 0)
      operator delete(v41);
    if (v46 < 0)
      operator delete(__p[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, Emergency::PositionSession, Emergency::CommunicationType, BOOL)", "%s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  result = *(_QWORD *)(v40 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v68 = _Q0;
    *(_OWORD *)&v68[16] = _Q0;
    v71 = 0;
    LOBYTE(v72) = 0;
    v73 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v74 = xmmword_101BBE630;
    v75 = _Q0;
    v76 = 0xBFF0000000000000;
    v77 = 0;
    v81 = 0;
    v79[0] = 0;
    *(_QWORD *)((char *)v79 + 5) = 0;
    v82 = 0xFFFFFFFF00000000;
    v83 = -1;
    v84 = v73;
    v85 = 0xBFF0000000000000;
    v86 = 0xFFFFFFFF00000000;
    v87 = 0;
    v88 = 255;
    v94 = 0;
    v93 = 0;
    v95 = v73;
    v96 = 0xBFF0000000000000;
    v80 = 0;
    v78 = (int)v39;
    *(_DWORD *)v69 = a5;
    *(_DWORD *)&v69[4] = HIDWORD(v39);
    *(_DWORD *)&v69[8] = 0;
    *(_DWORD *)buf = 3;
    v67 = a2;
    v89 = 1;
    v90 = a6;
    v91 = a7;
    v92 = a8;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)result + 48))(result, buf);
  }
  return result;
}

void sub_1016C4A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C4A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_1021C83D8;
  v5[1] = a1;
  v5[2] = a2;
  v6 = v5;
  v2 = *(_QWORD *)(a1 + 200);
  if (!v2)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1016C4B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C4B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_1021C8578;
  v5[1] = a1;
  v5[2] = a2;
  v6 = v5;
  v2 = *(_QWORD *)(a1 + 200);
  if (!v2)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1016C4C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016C4C60(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  _DWORD *v30;
  uint64_t (***v31)();
  int v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = a2[385];
    v7 = a2[386];
    v8 = a2[387];
    v9 = *(unsigned __int8 *)a2;
    *(_DWORD *)buf = 67110400;
    v45 = v5;
    v46 = 1024;
    v47 = v5;
    v48 = 1024;
    v49 = v6;
    v50 = 1024;
    v51 = v7;
    v52 = 1024;
    v53 = v8;
    v54 = 1024;
    v55 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,ephCount,%d\n", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v20 = *(_DWORD *)(a1 + 880);
    v21 = a2[385];
    v22 = a2[386];
    v23 = a2[387];
    v24 = *(unsigned __int8 *)a2;
    v32 = 67110400;
    v33 = v20;
    v34 = 1024;
    v35 = v20;
    v36 = 1024;
    v37 = v21;
    v38 = 1024;
    v39 = v22;
    v40 = 1024;
    v41 = v23;
    v42 = 1024;
    v43 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,ephCount,%d\n", &v32, 38, (_DWORD)v28, v29, (_DWORD)v30, (_DWORD)v31);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if (*(unsigned __int8 *)a2 - 1 <= 0xF)
  {
    v28 = off_1021C8B18;
    v29 = a1;
    v30 = a2;
    v31 = &v28;
    v10 = *(_QWORD *)(a1 + 168);
    if (!v10)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v10 + 48))(v10, &v28);
    v11 = v31;
    if (v31 == &v28)
    {
      v12 = 4;
      v11 = &v28;
    }
    else
    {
      if (!v31)
      {
LABEL_22:
        *(_BYTE *)(a1 + 450) = 1;
        *(_DWORD *)(a1 + 444) = *(unsigned __int8 *)a2;
        *(_BYTE *)(a1 + 722) = 1;
        return;
      }
      v12 = 5;
    }
    (*v11)[v12]();
    goto LABEL_22;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v14 = *(_DWORD *)(a1 + 880);
    v15 = *(unsigned __int8 *)a2;
    *(_DWORD *)buf = 67109376;
    v45 = v14;
    v46 = 1026;
    v47 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Badly formed assistance,nrOfSats,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = *(_DWORD *)(a1 + 880);
    v17 = *(unsigned __int8 *)a2;
    v32 = 67109376;
    v33 = v16;
    v34 = 1026;
    v35 = v17;
    LODWORD(v27) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Badly formed assistance,nrOfSats,%{public}d", &v32, v27);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "void CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
}

void sub_1016C5084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016C50C8(uint64_t a1, int *a2))()
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t (***result)();
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t (**v22)();
  uint64_t v23;
  int *v24;
  uint64_t (***v25)();
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = a2[67];
    v7 = a2[68];
    v8 = a2[69];
    v9 = *((unsigned __int16 *)a2 + 2);
    v10 = *a2;
    *(_DWORD *)buf = 67110656;
    v40 = v5;
    v41 = 1024;
    v42 = v5;
    v43 = 1024;
    v44 = v6;
    v45 = 1024;
    v46 = v7;
    v47 = 1024;
    v48 = v8;
    v49 = 1024;
    v50 = v9;
    v51 = 1024;
    v52 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,week,%d,tow,%d", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v14 = *(_DWORD *)(a1 + 880);
    v15 = a2[67];
    v16 = a2[68];
    v17 = a2[69];
    v18 = *((unsigned __int16 *)a2 + 2);
    v19 = *a2;
    v27 = 1024;
    v28 = v14;
    v29 = 1024;
    v30 = v15;
    v31 = 1024;
    v32 = v16;
    v33 = 1024;
    v34 = v17;
    v35 = 1024;
    v36 = v18;
    v37 = 1024;
    v38 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,week,%d,tow,%d", &v26, 44, (_DWORD)v22, v23, (_DWORD)v24, (_DWORD)v25, 67110656);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v22 = off_1021C8B98;
  v23 = a1;
  v24 = a2;
  v25 = &v22;
  v11 = *(_QWORD *)(a1 + 168);
  if (!v11)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v11 + 48))(v11, &v22);
  result = v25;
  if (v25 == &v22)
  {
    v13 = 4;
    result = &v22;
    goto LABEL_11;
  }
  if (v25)
  {
    v13 = 5;
LABEL_11:
    result = (uint64_t (***)())(*result)[v13]();
  }
  *(_BYTE *)(a1 + 448) = 1;
  *(_DWORD *)(a1 + 408) = *((unsigned __int16 *)a2 + 2);
  *(_DWORD *)(a1 + 412) = *a2;
  *(_BYTE *)(a1 + 720) = 1;
  return result;
}

void sub_1016C538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016C53D0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double DoubleValue;
  double v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  double v32;
  long double v33;
  NSObject *v34;
  int v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  int v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  int v53;
  int v54;
  uint64_t v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  CFStringRef v59;
  CFStringRef str;
  _QWORD v61[2];
  __int128 v62;
  __int128 v63;
  _QWORD v64[3];
  _QWORD *v65;
  int v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  _BYTE v71[10];
  uint64_t v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uint8_t buf[8];
  std::__shared_weak_count *v85;
  _BYTE v86[10];
  uint64_t v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;

  v4 = a2[1];
  v62 = *a2;
  v63 = v4;
  if (*((unsigned __int8 *)a2 + 13) <= 0x44u)
    BYTE13(v62) = 69;
  if (*((unsigned __int8 *)a2 + 14) <= 0x44u)
    BYTE14(v62) = 69;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 880);
    v7 = *((unsigned __int8 *)a2 + 13);
    v8 = *((unsigned __int8 *)a2 + 14);
    *(_DWORD *)buf = 67111681;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v85) = 1026;
    *(_DWORD *)((char *)&v85 + 2) = v6;
    HIWORD(v85) = 1026;
    *(_DWORD *)v86 = DWORD1(v63);
    *(_WORD *)&v86[4] = 1026;
    *(_DWORD *)&v86[6] = DWORD2(v63);
    LOWORD(v87) = 1026;
    *(_DWORD *)((char *)&v87 + 2) = HIDWORD(v63);
    HIWORD(v87) = 1025;
    v88 = DWORD1(v62);
    v89 = 1025;
    v90 = DWORD2(v62);
    v91 = 1026;
    v92 = v7;
    v93 = 1026;
    v94 = v8;
    v95 = 1026;
    v96 = BYTE13(v62);
    v97 = 1026;
    v98 = BYTE14(v62);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}d,lat,%{private}d,lon,%{private}d,uncert,%{public}d,%{public}d,inflated,%{public}d,%{public}d", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v43 = *(_DWORD *)(a1 + 880);
    v44 = *((unsigned __int8 *)a2 + 13);
    v45 = *((unsigned __int8 *)a2 + 14);
    v66 = 67111681;
    v67 = v43;
    v68 = 1026;
    v69 = v43;
    v70 = 1026;
    *(_DWORD *)v71 = DWORD1(v63);
    *(_WORD *)&v71[4] = 1026;
    *(_DWORD *)&v71[6] = DWORD2(v63);
    LOWORD(v72) = 1026;
    *(_DWORD *)((char *)&v72 + 2) = HIDWORD(v63);
    HIWORD(v72) = 1025;
    v73 = DWORD1(v62);
    v74 = 1025;
    v75 = DWORD2(v62);
    v76 = 1026;
    v77 = v44;
    v78 = 1026;
    v79 = v45;
    v80 = 1026;
    v81 = BYTE13(v62);
    v82 = 1026;
    v83 = BYTE14(v62);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}d,lat,%{private}d,lon,%{private}d,uncert,%{public}d,%{public}d,inflated,%{public}d,%{public}d", &v66, 68);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  sub_100119F3C();
  v59 = 0;
  str = 0;
  sub_1001E4804(buf);
  if (sub_100006BB4(*(uint64_t *)buf, "GpsNWReferenceLocation", v61)
    && sub_1005268D0((uint64_t)v61, "Latitude", (CFTypeRef *)&str))
  {
    v9 = sub_1005268D0((uint64_t)v61, "Longitude", (CFTypeRef *)&v59);
    v10 = v9;
    v11 = v85;
    if (!v85)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        goto LABEL_31;
    }
    else
    {
LABEL_16:
      if (!v9)
        goto LABEL_31;
    }
    DoubleValue = CFStringGetDoubleValue(str);
    DWORD1(v62) = sub_1016E142C((int)DoubleValue);
    v15 = CFStringGetDoubleValue(v59);
    DWORD2(v62) = (int)sub_1016E1440((int)v15);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_DWORD *)(a1 + 880);
      v18 = *((_DWORD *)a2 + 1);
      v19 = *((_DWORD *)a2 + 2);
      *(_DWORD *)buf = 67110401;
      *(_DWORD *)&buf[4] = v17;
      LOWORD(v85) = 1026;
      *(_DWORD *)((char *)&v85 + 2) = v17;
      HIWORD(v85) = 1025;
      *(_DWORD *)v86 = v18;
      *(_WORD *)&v86[4] = 1025;
      *(_DWORD *)&v86[6] = v19;
      LOWORD(v87) = 1025;
      *(_DWORD *)((char *)&v87 + 2) = DWORD1(v62);
      HIWORD(v87) = 1025;
      v88 = DWORD2(v62);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,NWRefLocationOverride,latitudePrior,%{private}d,longitudePrior,%{private}d,latitudeNew,%{private}d,longitudeNew,%{private}d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v20 = *(_DWORD *)(a1 + 880);
      v21 = *((_DWORD *)a2 + 1);
      v22 = *((_DWORD *)a2 + 2);
      v66 = 67110401;
      v67 = v20;
      v68 = 1026;
      v69 = v20;
      v70 = 1025;
      *(_DWORD *)v71 = v21;
      *(_WORD *)&v71[4] = 1025;
      *(_DWORD *)&v71[6] = v22;
      LOWORD(v72) = 1025;
      *(_DWORD *)((char *)&v72 + 2) = DWORD1(v62);
      HIWORD(v72) = 1025;
      v73 = DWORD2(v62);
      LODWORD(v58) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%{public}d,NWRefLocationOverride,latitudePrior,%{private}d,longitudePrior,%{private}d,latitudeNew,%{private}d,longitudeNew,%{private}d", &v66, v58);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    v25 = v85;
    if (v85)
    {
      v26 = (unint64_t *)&v85->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
LABEL_31:
  v64[0] = off_1021C8C18;
  v64[1] = a1;
  v64[2] = &v62;
  v65 = v64;
  v28 = *(_QWORD *)(a1 + 168);
  if (!v28)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v64);
  v29 = v65;
  if (v65 == v64)
  {
    v30 = 4;
    v29 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_37;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_37:
  v31 = sub_1016E13F0(*((_DWORD *)a2 + 1));
  *(double *)(a1 + 416) = v31;
  if (*((_BYTE *)a2 + 1))
    *(double *)(a1 + 416) = -v31;
  *(_BYTE *)(a1 + 449) = 1;
  *(double *)(a1 + 424) = sub_1016E1414(*((_DWORD *)a2 + 2));
  *(_DWORD *)(a1 + 440) = *((unsigned __int8 *)a2 + 17);
  v32 = sub_1016E138C(*((unsigned __int8 *)a2 + 13));
  v33 = sub_1016E138C(*((unsigned __int8 *)a2 + 14));
  *(double *)(a1 + 432) = sqrt(v33 * v33 + v32 * v32);
  if (*(_DWORD *)(a1 + 440) != 90)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C7D68);
    v34 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_DWORD *)(a1 + 880);
      v36 = *(_DWORD *)(a1 + 440);
      v37 = *(_QWORD *)(a1 + 432);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v35;
      LOWORD(v85) = 1024;
      *(_DWORD *)((char *)&v85 + 2) = v36;
      HIWORD(v85) = 2048;
      *(_QWORD *)v86 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,NW Ref location confidence,%d,uncertainity,%f", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C7D68);
      v53 = *(_DWORD *)(a1 + 880);
      v54 = *(_DWORD *)(a1 + 440);
      v55 = *(_QWORD *)(a1 + 432);
      v66 = 67109632;
      v67 = v53;
      v68 = 1024;
      v69 = v54;
      v70 = 2048;
      *(_QWORD *)v71 = v55;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#cp,NilrCPlane,NW Ref location confidence,%d,uncertainity,%f", &v66, 24, *(double *)&v59);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
  }
  memcpy((void *)(a1 + 512), (const void *)(a1 + 240), 0x110uLL);
  if (!sub_10011CE88(*(double *)(a1 + 416), *(double *)(a1 + 424))
    || sub_10011CE64(*(double *)(a1 + 416), *(double *)(a1 + 424)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v38 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v39 = *(_DWORD *)(a1 + 880);
      v40 = *(_QWORD *)(a1 + 416);
      v41 = *(_QWORD *)(a1 + 424);
      *(_DWORD *)buf = 67109889;
      *(_DWORD *)&buf[4] = v39;
      LOWORD(v85) = 1026;
      *(_DWORD *)((char *)&v85 + 2) = v39;
      HIWORD(v85) = 2049;
      *(_QWORD *)v86 = v40;
      *(_WORD *)&v86[8] = 2049;
      v87 = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning referencePositionInvalid,instance,%{public}d,lat,%{private}.8f,lon,%{private}.8f", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v48 = *(_DWORD *)(a1 + 880);
      v49 = *(_QWORD *)(a1 + 416);
      v50 = *(_QWORD *)(a1 + 424);
      v66 = 67109889;
      v67 = v48;
      v68 = 1026;
      v69 = v48;
      v70 = 2049;
      *(_QWORD *)v71 = v49;
      *(_WORD *)&v71[8] = 2049;
      v72 = v50;
      LODWORD(v58) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning referencePositionInvalid,instance,%{public}d,lat,%{private}.8f,lon,%{private}.8f", &v66, v58);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
  }
  return sub_10011A5A8(v61);
}

void sub_1016C5D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1016C5E14(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t (***v36)();
  int v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v50 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceAcquisition received \n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = *(_DWORD *)(a1 + 880);
    v37 = 67109120;
    v38 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceAcquisition received \n", &v37);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = *(_DWORD *)(a2 + 364);
    v9 = *(_DWORD *)(a2 + 368);
    v10 = *(_DWORD *)(a2 + 372);
    v11 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)buf = 67110400;
    v50 = v7;
    v51 = 1024;
    v52 = v7;
    v53 = 1024;
    v54 = v8;
    v55 = 1024;
    v56 = v9;
    v57 = 1024;
    v58 = v10;
    v59 = 1024;
    v60 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,acqCount,%d\n", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v25 = *(_DWORD *)(a1 + 880);
    v26 = *(_DWORD *)(a2 + 364);
    v27 = *(_DWORD *)(a2 + 368);
    v28 = *(_DWORD *)(a2 + 372);
    v29 = *(unsigned __int8 *)(a2 + 4);
    v37 = 67110400;
    v38 = v25;
    v39 = 1024;
    v40 = v25;
    v41 = 1024;
    v42 = v26;
    v43 = 1024;
    v44 = v27;
    v45 = 1024;
    v46 = v28;
    v47 = 1024;
    v48 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,acqCount,%d\n", &v37, 38, (_DWORD)v33, v34, v35, (_DWORD)v36);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (*(unsigned __int8 *)(a2 + 4) - 1 <= 0xF)
  {
    v33 = off_1021C8C98;
    v34 = a1;
    v35 = a2;
    v36 = &v33;
    v12 = *(_QWORD *)(a1 + 168);
    if (!v12)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v12 + 48))(v12, &v33);
    v13 = v36;
    if (v36 == &v33)
    {
      v14 = 4;
      v13 = &v33;
    }
    else
    {
      if (!v36)
      {
LABEL_27:
        *(_BYTE *)(a1 + 451) = 1;
        *(_BYTE *)(a1 + 723) = 1;
        return;
      }
      v14 = 5;
    }
    (*v13)[v14]();
    goto LABEL_27;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v15 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v16 = *(_DWORD *)(a1 + 880);
    v17 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)buf = 67109376;
    v50 = v16;
    v51 = 1026;
    v52 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Badly formed acquisition assistance,nrOfSats,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = *(_DWORD *)(a1 + 880);
    v19 = *(unsigned __int8 *)(a2 + 4);
    v37 = 67109376;
    v38 = v18;
    v39 = 1026;
    v40 = v19;
    LODWORD(v32) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Badly formed acquisition assistance,nrOfSats,%{public}d", &v37, v32);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "void CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_1016C6378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016C63BC(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  unsigned int v11;
  void *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t result;
  uint64_t v26;
  int v27;
  void **v28;
  unsigned int v29;
  int v30;
  void **v31;
  void **v32;
  void **v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  const char *v41;
  void *__p[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  void **v54;
  __int16 v55;
  void **v56;
  uint8_t buf[4];
  unsigned int v58;
  _BYTE v59[32];
  _BYTE v60[12];
  uint64_t v61;
  char v62;
  int64x2_t v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  _QWORD v69[2];
  int v70;
  char v71;
  unint64_t v72;
  int v73;
  int64x2_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __int16 v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  int64x2_t v84;
  unint64_t v85;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_DWORD *)(a1 + 880);
    v12 = &v46;
    sub_1016E0854(a4, &v46);
    v38 = a1;
    v13 = a3;
    v14 = a4;
    v15 = a2;
    if (SBYTE1(v52) < 0)
      v12 = v46;
    v36 = v13;
    sub_1016E0884(v13, v44);
    v16 = v45;
    v17 = (void **)v44[0];
    sub_1016E07FC(v15, __p);
    v18 = v44;
    if (v16 < 0)
      v18 = v17;
    if (v43 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *(_DWORD *)buf = 67110402;
    v58 = v11;
    *(_WORD *)v59 = 1024;
    *(_DWORD *)&v59[2] = v11;
    *(_WORD *)&v59[6] = 1024;
    *(_DWORD *)&v59[8] = a5;
    *(_WORD *)&v59[12] = 2080;
    *(_QWORD *)&v59[14] = v12;
    *(_WORD *)&v59[22] = 2080;
    *(_QWORD *)&v59[24] = v18;
    *(_WORD *)v60 = 2080;
    *(_QWORD *)&v60[2] = v19;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Reject,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s", buf, 0x32u);
    if (v43 < 0)
      operator delete(__p[0]);
    a2 = v15;
    a4 = v14;
    if (v45 < 0)
      operator delete(v44[0]);
    a3 = v36;
    a1 = v38;
    if (SBYTE1(v52) < 0)
      operator delete(v46);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = *(_DWORD *)(a1 + 880);
    v28 = v44;
    sub_1016E0854(a4, v44);
    v29 = a2;
    if (v45 < 0)
      v28 = (void **)v44[0];
    sub_1016E0884(a3, __p);
    v30 = v43;
    v31 = (void **)__p[0];
    sub_1016E07FC(v29, v40);
    v32 = __p;
    if (v30 < 0)
      v32 = v31;
    if (SHIBYTE(v41) >= 0)
      v33 = v40;
    else
      v33 = (void **)v40[0];
    LODWORD(v46) = 67110402;
    HIDWORD(v46) = v27;
    v47 = 1024;
    v48 = v27;
    v49 = 1024;
    v50 = a5;
    v51 = 2080;
    v52 = v28;
    v53 = 2080;
    v54 = v32;
    v55 = 2080;
    v56 = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#ins%d,#nilr,#cp,Cplane,Reject,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s", &v46, 50, a1, (const char *)v40[0], (const char *)v40[1], v41);
    v35 = v34;
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    a2 = v29;
    a4 = v37;
    a1 = v39;
    if (v43 < 0)
      operator delete(__p[0]);
    if (v45 < 0)
      operator delete(v44[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logRejectedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t)", "%s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
  result = *(_QWORD *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v59 = _Q0;
    *(_OWORD *)&v59[16] = _Q0;
    v61 = 0;
    v62 = 0;
    v63 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v64 = xmmword_101BBE630;
    v65 = _Q0;
    v66 = 0xBFF0000000000000;
    v67 = 0;
    v71 = 0;
    v69[0] = 0;
    *(_QWORD *)((char *)v69 + 5) = 0;
    v72 = 0xFFFFFFFF00000000;
    v73 = -1;
    v74 = v63;
    v75 = 0xBFF0000000000000;
    v76 = 0xFFFFFFFF00000000;
    v77 = 0;
    v78 = 255;
    v79 = 1;
    v81 = 0;
    v80 = 0;
    v83 = 0;
    v82 = 0;
    v84 = v63;
    v85 = 0xBFF0000000000000;
    v70 = 0;
    v68 = a3;
    *(_DWORD *)v60 = a5;
    *(_DWORD *)&v60[4] = a4;
    *(_DWORD *)&v60[8] = 0;
    *(_DWORD *)buf = 3;
    v58 = a2;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)result + 48))(result, buf);
  }
  return result;
}

void sub_1016C6818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C6880@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x1D)
    v2 = "EventUnknown";
  else
    v2 = off_1021C92D8[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t (***sub_1016C68AC(uint64_t a1, uint64_t a2))()
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t (***result)();
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t (**v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  _DWORD v36[2];
  int v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v50 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceFTA1x received \n", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = *(_DWORD *)(a1 + 880);
    v36[0] = 67109120;
    v36[1] = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,inject_AssistanceFTA1x received \n", v36);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = *(_DWORD *)(a2 + 4);
    v9 = *(_DWORD *)(a2 + 12);
    v10 = *(unsigned __int16 *)(a2 + 16);
    v11 = *(unsigned __int16 *)(a2 + 8);
    v12 = *(_DWORD *)(a2 + 20);
    v13 = *(_DWORD *)(a2 + 24);
    v14 = *(unsigned __int16 *)(a2 + 28);
    v15 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)buf = 67111424;
    v50 = v7;
    v51 = 1024;
    v52 = v7;
    v53 = 1024;
    v54 = v8;
    v55 = 1024;
    v56 = v9;
    v57 = 1024;
    v58 = v10;
    v59 = 1024;
    v60 = v11;
    v61 = 1024;
    v62 = v12;
    v63 = 1024;
    v64 = v13;
    v65 = 1024;
    v66 = v14;
    v67 = 1024;
    v68 = v15;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,networkType,%d,eutranTime.earfcn,%d,eutranTime.sfnk,%d,eutranTime.physicalCellId,%d,cdmaTime.cdmaTow.intPart,%d,cdmaTime.cdmaTow.fracPart,%d,cdmaTime.weekNum,%d,cdmaTime.absoluteRmsAcc,%d\n", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = *(_DWORD *)(a1 + 880);
    v23 = *(_DWORD *)(a2 + 4);
    v24 = *(_DWORD *)(a2 + 12);
    v25 = *(unsigned __int16 *)(a2 + 8);
    v26 = *(_DWORD *)(a2 + 20);
    v27 = *(_DWORD *)(a2 + 24);
    v28 = *(unsigned __int16 *)(a2 + 28);
    v29 = *(_DWORD *)(a2 + 32);
    LOWORD(v37) = 1024;
    HIWORD(v37) = v22;
    LOWORD(v38) = HIWORD(v24);
    HIWORD(v38) = 1024;
    v39 = 1024;
    v40 = v25;
    v41 = 1024;
    v42 = v26;
    v43 = 1024;
    v44 = v27;
    v45 = 1024;
    v46 = v28;
    v47 = 1024;
    v48 = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,networkType,%d,eutranTime.earfcn,%d,eutranTime.sfnk,%d,eutranTime.physicalCellId,%d,cdmaTime.cdmaTow.intPart,%d,cdmaTime.cdmaTow.fracPart,%d,cdmaTime.weekNum,%d,cdmaTime.absoluteRmsAcc,%d\n", v36, 62, (_DWORD)v32, v33, v34, (_DWORD)v35, 67111424, v37, v23, v38);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v32 = off_1021C8D18;
  v33 = a1;
  v34 = a2;
  v35 = &v32;
  v16 = *(_QWORD *)(a1 + 168);
  if (!v16)
    sub_10025FD1C();
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v16 + 48))(v16, &v32);
  result = v35;
  if (v35 == &v32)
  {
    v18 = 4;
    result = &v32;
  }
  else
  {
    if (!v35)
      return result;
    v18 = 5;
  }
  return (uint64_t (***)())(*result)[v18]();
}

void sub_1016C6CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016C6D2C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  uint8_t buf[4];
  int v17;

  v2 = *(_DWORD *)(a1 + 928);
  *(_BYTE *)(a1 + 816) = v2 != 0;
  *(_BYTE *)(a1 + 817) = *(_DWORD *)(a1 + 936) != 0;
  if (!v2)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C7D68);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature disabled", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021C7D68);
      v11 = *(_DWORD *)(a1 + 880);
      v14 = 67109120;
      v15 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature disabled", &v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrCplane::isWlanSessionAllowed()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (*(unsigned __int8 *)(a1 + 2426) > 1u)
    return 0;
  if (!*(_BYTE *)(a1 + 2426))
    return *(_DWORD *)(a1 + 928) != 0;
  *(_BYTE *)(a1 + 818) = 1;
  if (*(_DWORD *)(a1 + 928) && *(_DWORD *)(a1 + 936))
    return 1;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C7D68);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature RSSI is requested when disabled", buf, 8u);
  }
  result = sub_1001BFF7C(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C7D68);
    v8 = *(_DWORD *)(a1 + 880);
    v14 = 67109120;
    v15 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#cp,#wlan,discard Wlan request as feature RSSI is requested when disabled", &v14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNilrCplane::isWlanSessionAllowed()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  return result;
}

_QWORD *sub_1016C7094(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasFailure", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v7 = *(_DWORD *)(a1 + 880);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasFailure", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::reportWlanMeasFailure(gnss::Emergency::Cplane::ErrorCodes)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)(a1 + 2432) = a2;
  *(_DWORD *)(a1 + 2444) = *(_DWORD *)(a1 + 2420);
  *(_QWORD *)(a1 + 2436) = *(_QWORD *)(a1 + 2412);
  *(_BYTE *)(a1 + 3228) = 1;
  *(_DWORD *)(a1 + 3232) = 2;
  *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
  return sub_1016C8A08(a1, a1 + 2428);
}

uint64_t sub_1016C7290(uint64_t a1, _DWORD *a2)
{
  NSObject *v4;
  int v5;
  void **v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  void **v10;
  char *v11;
  char *v12;
  const char *v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void **v21;
  void **v22;
  __int16 v23;
  int v24;
  __int16 v25;
  void **v26;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    sub_1016E0828(a2[1], &v22);
    v6 = SHIBYTE(v26) >= 0 ? (void **)&v22 : v22;
    *(_DWORD *)buf = 67109634;
    v17 = v5;
    v18 = 1024;
    v19 = v5;
    v20 = 2080;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Wlan,Reject,instance,%d,result,%s", buf, 0x18u);
    if (SHIBYTE(v26) < 0)
      operator delete(v22);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = qword_1022A0078;
    v9 = *(_DWORD *)(a1 + 880);
    sub_1016E0828(a2[1], __p);
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    LODWORD(v22) = 67109634;
    HIDWORD(v22) = v9;
    v23 = 1024;
    v24 = v9;
    v25 = 2080;
    v26 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#ins%d,#nilr,#cp,Cplane,Wlan,Reject,instance,%d,result,%s", &v22, 24, v13);
    v12 = v11;
    if (v15 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedWlanSession(CLNilrTypes::WlanSessionStatus)", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  *a2 = 3;
  result = *(_QWORD *)(a1 + 3272);
  if (result)
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

_QWORD *sub_1016C7504@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StateUnknown";
  else
    v2 = off_1021C93C8[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_1016C7530(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t *v12;
  uint64_t *v13;
  NSObject *v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  int v21;
  void **v22;
  void **v23;
  void **v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t result;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  void **v37;
  int v38;
  void **v39;
  void **v40;
  void **v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53[2];
  const char *v54;
  void *__p[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  void **v65;
  __int16 v66;
  void **v67;
  __int16 v68;
  void **v69;
  __int16 v70;
  int v71;
  uint8_t buf[4];
  unsigned int v73;
  _BYTE v74[32];
  _BYTE v75[12];
  int v76;
  uint64_t v77;
  char v78;
  int64x2_t v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD v85[2];
  int v86;
  char v87;
  unint64_t v88;
  int v89;
  int64x2_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  __int16 v94;
  int v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  int64x2_t v100;
  unint64_t v101;

  v12 = &qword_1022A0000;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v13 = &qword_1022A0000;
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(a1 + 880);
    sub_1016E0854(a4, &v59);
    v50 = a1;
    v16 = a3;
    v17 = a4;
    v18 = a5;
    v19 = a6;
    if (SBYTE1(v65) >= 0)
      v20 = &v59;
    else
      v20 = v59;
    v48 = v16;
    sub_1016E0884(v16, v57);
    v21 = v58;
    v22 = (void **)v57[0];
    sub_1016E07FC(a2, __p);
    v23 = v57;
    if (v21 < 0)
      v23 = v22;
    if (v56 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    *(_DWORD *)buf = 67110658;
    v73 = v15;
    *(_WORD *)v74 = 1024;
    *(_DWORD *)&v74[2] = v15;
    *(_WORD *)&v74[6] = 1024;
    a5 = v18;
    *(_DWORD *)&v74[8] = v18;
    *(_WORD *)&v74[12] = 2080;
    *(_QWORD *)&v74[14] = v20;
    *(_WORD *)&v74[22] = 2080;
    *(_QWORD *)&v74[24] = v23;
    *(_WORD *)v75 = 2080;
    *(_QWORD *)&v75[2] = v24;
    *(_WORD *)&v75[10] = 1024;
    a6 = v19;
    v76 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,waitToPostToAWD,%d", buf, 0x38u);
    if (v56 < 0)
      operator delete(__p[0]);
    a4 = v17;
    a1 = v50;
    v12 = &qword_1022A0000;
    v13 = &qword_1022A0000;
    if (v58 < 0)
      operator delete(v57[0]);
    a3 = v48;
    if (SBYTE1(v65) < 0)
      operator delete(v59);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v33 = qword_1022A0078;
    v34 = *(_DWORD *)(a1 + 880);
    sub_1016E0854(a4, v57);
    v51 = a1;
    v35 = a5;
    v36 = a6;
    if (v58 >= 0)
      v37 = v57;
    else
      v37 = (void **)v57[0];
    sub_1016E0884(a3, __p);
    v38 = v56;
    v39 = (void **)__p[0];
    sub_1016E07FC(a2, v53);
    v40 = __p;
    if (v38 < 0)
      v40 = v39;
    if (SHIBYTE(v54) >= 0)
      v41 = v53;
    else
      v41 = (void **)v53[0];
    LODWORD(v59) = 67110658;
    HIDWORD(v59) = v34;
    v60 = 1024;
    v61 = v34;
    v62 = 1024;
    a5 = v35;
    v63 = v35;
    v64 = 2080;
    v65 = v37;
    v66 = 2080;
    v67 = v40;
    v68 = 2080;
    v69 = v41;
    v70 = 1024;
    LOBYTE(a6) = v36;
    v71 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,waitToPostToAWD,%d", &v59, 56, v51, (const char *)v53[0], (const char *)v53[1], v54, LODWORD(__p[0]));
    v43 = v42;
    if (SHIBYTE(v54) < 0)
      operator delete(v53[0]);
    a4 = v49;
    a1 = v52;
    v12 = &qword_1022A0000;
    v13 = &qword_1022A0000;
    if (v56 < 0)
      operator delete(__p[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, BOOL)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
  if (v12[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v25 = v13[15];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v73 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,submitting AWD", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v12[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v44 = v13[15];
    v45 = *(_DWORD *)(a1 + 880);
    LODWORD(v59) = 67109120;
    HIDWORD(v59) = v45;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 0, "#ins%d,#nilr,#cp,Cplane,submitting AWD", &v59);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, BOOL)", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  result = *(_QWORD *)(a1 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v74 = _Q0;
    *(_OWORD *)&v74[16] = _Q0;
    v77 = 0;
    v78 = 0;
    v79 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v80 = xmmword_101BBE630;
    v81 = _Q0;
    v82 = 0xBFF0000000000000;
    v83 = 0;
    v87 = 0;
    v85[0] = 0;
    *(_QWORD *)((char *)v85 + 5) = 0;
    v88 = 0xFFFFFFFF00000000;
    v89 = -1;
    v90 = v79;
    v91 = 0xBFF0000000000000;
    v92 = 0xFFFFFFFF00000000;
    v93 = 0;
    v94 = 255;
    v95 = 1;
    v96 = 0;
    v99 = 0;
    v98 = 0;
    v100 = v79;
    v101 = 0xBFF0000000000000;
    v86 = 0;
    v84 = a3;
    *(_DWORD *)v75 = a5;
    *(_DWORD *)&v75[4] = a4;
    *(_DWORD *)&v75[8] = 0;
    *(_DWORD *)buf = 3;
    v73 = a2;
    v97 = a6;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)result + 48))(result, buf);
  }
  return result;
}

void sub_1016C7B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016C7B6C(uint64_t a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, __int32 a8, __int32 a9, unsigned __int8 a10)
{
  unsigned __int8 v16;
  NSObject *v17;
  unsigned int v18;
  void *v19;
  void **v20;
  unsigned int v21;
  void **v22;
  int v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t result;
  const char *v33;
  int v34;
  void **v35;
  void **v36;
  void **v37;
  __int32 v38;
  int v39;
  void **v40;
  void **v41;
  void *v42;
  char *v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const char *v51;
  const char *v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  int v56;
  int v57;
  char v58;
  void *__p[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  void **v75;
  __int16 v76;
  void **v77;
  __int16 v78;
  void **v79;
  __int16 v80;
  void *v81;
  __int16 v82;
  __int32 v83;
  __int16 v84;
  __int32 v85;
  __int16 v86;
  int v87;
  uint8_t buf[4];
  unsigned int v89;
  _BYTE v90[32];
  _BYTE v91[12];
  _BYTE v92[18];
  __int16 v93;
  int64x2_t v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD v100[2];
  int v101;
  char v102;
  unint64_t v103;
  int v104;
  int64x2_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  __int16 v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned __int8 v113;
  uint64_t v114;
  char v115;
  int64x2_t v116;
  unint64_t v117;

  HIDWORD(v52) = a3;
  v54 = a1;
  v16 = a10;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  HIDWORD(v51) = a9;
  v17 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_DWORD *)(v54 + 880);
    sub_1016E0854(a4, &v67);
    v47 = a4;
    v53 = a2;
    if (SBYTE1(v73) >= 0)
      v19 = &v67;
    else
      v19 = v67;
    sub_1016E0884(SHIDWORD(v52), v65);
    v50 = a5;
    if (v66 >= 0)
      v20 = v65;
    else
      v20 = (void **)v65[0];
    sub_1016E07FC(v53, v63);
    v21 = a7;
    if (v64 >= 0)
      v22 = v63;
    else
      v22 = (void **)v63[0];
    v45 = a6;
    sub_1017E1BF0(a6, v61);
    v23 = v62;
    v24 = (void **)v61[0];
    sub_1017E1CCC(v21, __p);
    v25 = v61;
    if (v23 < 0)
      v25 = v24;
    if (v60 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *(_DWORD *)buf = 67111682;
    v89 = v18;
    *(_WORD *)v90 = 1024;
    *(_DWORD *)&v90[2] = v18;
    *(_WORD *)&v90[6] = 1024;
    *(_DWORD *)&v90[8] = v50;
    *(_WORD *)&v90[12] = 2080;
    *(_QWORD *)&v90[14] = v19;
    *(_WORD *)&v90[22] = 2080;
    *(_QWORD *)&v90[24] = v20;
    *(_WORD *)v91 = 2080;
    *(_QWORD *)&v91[2] = v22;
    *(_WORD *)&v91[10] = 2080;
    *(_QWORD *)v92 = v25;
    *(_WORD *)&v92[8] = 2080;
    *(_QWORD *)&v92[10] = v26;
    v93 = 1024;
    v94.i32[0] = a8;
    v94.i16[2] = 1024;
    *(__int32 *)((char *)&v94.i32[1] + 2) = a9;
    v94.i16[5] = 1024;
    v94.i32[3] = a10;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%s,overridingCommType,%soverRidingPositionMethod,%d,overRidingMethodType,%d,waitToPostToAWD,%d", buf, 0x58u);
    if (v60 < 0)
      operator delete(__p[0]);
    a7 = v21;
    a6 = v45;
    a4 = v47;
    if (v62 < 0)
      operator delete(v61[0]);
    a5 = v50;
    if (v64 < 0)
      operator delete(v63[0]);
    a2 = v53;
    if (v66 < 0)
      operator delete(v65[0]);
    if (SBYTE1(v73) < 0)
      operator delete(v67);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v33 = (const char *)qword_1022A0078;
    v34 = *(_DWORD *)(v54 + 880);
    v35 = v65;
    sub_1016E0854(a4, v65);
    v48 = a4;
    LODWORD(v52) = a2;
    if (v66 < 0)
      v35 = (void **)v65[0];
    v36 = v63;
    sub_1016E0884(SHIDWORD(v52), v63);
    if (v64 < 0)
      v36 = (void **)v63[0];
    v37 = v61;
    sub_1016E07FC(a2, v61);
    v38 = a8;
    if (v62 < 0)
      v37 = (void **)v61[0];
    sub_1017E1BF0(a6, __p);
    v39 = v60;
    v40 = (void **)__p[0];
    sub_1017E1CCC(a7, &v55);
    v41 = __p;
    if (v39 < 0)
      v41 = v40;
    if (v58 >= 0)
      v42 = &v55;
    else
      v42 = v55;
    LODWORD(v67) = 67111682;
    HIDWORD(v67) = v34;
    v68 = 1024;
    v69 = v34;
    v70 = 1024;
    v71 = a5;
    v72 = 2080;
    v73 = v35;
    v74 = 2080;
    v75 = v36;
    v76 = 2080;
    v77 = v37;
    v78 = 2080;
    v79 = v41;
    v80 = 2080;
    v81 = v42;
    v82 = 1024;
    v83 = v38;
    v84 = 1024;
    v85 = a9;
    v86 = 1024;
    v16 = a10;
    v87 = a10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,overridingSessionType,%s,overridingCommType,%soverRidingPositionMethod,%d,overRidingMethodType,%d,waitToPostToAWD,%d", &v67, 88, v48, v33, v51, v52, (const char *)v54, (const char *)v55, v56, v57,
      LODWORD(__p[0]));
    v44 = v43;
    if (v58 < 0)
      operator delete(v55);
    a6 = v46;
    a4 = v49;
    a2 = v52;
    if (v60 < 0)
      operator delete(__p[0]);
    if (v62 < 0)
      operator delete(v61[0]);
    if (v64 < 0)
      operator delete(v63[0]);
    if (v66 < 0)
      operator delete(v65[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, Emergency::PositionSession, Emergency::CommunicationType, uint32_t, uint32_t, BOOL)", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  result = *(_QWORD *)(v54 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v90 = _Q0;
    *(_OWORD *)&v90[16] = _Q0;
    *(_QWORD *)&v92[4] = 0;
    v92[12] = 0;
    v94 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v95 = xmmword_101BBE630;
    v96 = _Q0;
    v97 = 0xBFF0000000000000;
    v98 = 0;
    v102 = 0;
    v100[0] = 0;
    *(_QWORD *)((char *)v100 + 5) = 0;
    v103 = 0xFFFFFFFF00000000;
    v104 = -1;
    v105 = v94;
    v106 = 0xBFF0000000000000;
    v107 = 0xFFFFFFFF00000000;
    v108 = 0;
    v109 = 255;
    v115 = 0;
    v114 = 0;
    v116 = v94;
    v117 = 0xBFF0000000000000;
    v101 = 0;
    v99 = HIDWORD(v52);
    *(_DWORD *)v91 = a5;
    *(_DWORD *)&v91[4] = a4;
    *(_DWORD *)&v91[8] = 0;
    *(_DWORD *)buf = 3;
    v89 = a2;
    v110 = 1;
    v111 = a6;
    v112 = a7;
    v113 = v16;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)result + 48))(result, buf);
  }
  return result;
}

void sub_1016C8128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016C81F0(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7)
{
  NSObject *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t result;
  int v30;
  void **v31;
  int v32;
  int v33;
  int v34;
  int v35;
  void **v36;
  void **v37;
  void *v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  const char *v43;
  int v44;
  int v45;
  uint64_t v46;
  void *v47;
  int v48;
  int v49;
  char v50;
  void *__p[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  void **v61;
  __int16 v62;
  void **v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  uint8_t buf[4];
  unsigned int v71;
  _BYTE v72[32];
  _BYTE v73[12];
  int v74;
  uint64_t v75;
  char v76;
  int64x2_t v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD v83[2];
  int v84;
  char v85;
  unint64_t v86;
  int v87;
  int64x2_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  __int16 v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  int64x2_t v98;
  unint64_t v99;

  v46 = a1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_DWORD *)(v46 + 880);
    v15 = &v55;
    sub_1016E0854(a4, &v55);
    v41 = a4;
    v16 = a2;
    v17 = a5;
    v18 = a3;
    v19 = a7;
    if (SBYTE1(v61) < 0)
      v15 = v55;
    v44 = v18;
    sub_1016E0884(v18, v53);
    v20 = v54;
    v21 = (void **)v53[0];
    sub_1016E07FC(v16, __p);
    v22 = v53;
    if (v20 < 0)
      v22 = v21;
    if (v52 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    *(_DWORD *)buf = 67110914;
    v71 = v14;
    *(_WORD *)v72 = 1024;
    *(_DWORD *)&v72[2] = v14;
    *(_WORD *)&v72[6] = 1024;
    a5 = v17;
    *(_DWORD *)&v72[8] = v17;
    *(_WORD *)&v72[12] = 2080;
    *(_QWORD *)&v72[14] = v15;
    *(_WORD *)&v72[22] = 2080;
    *(_QWORD *)&v72[24] = v22;
    *(_WORD *)v73 = 2080;
    *(_QWORD *)&v73[2] = v23;
    *(_WORD *)&v73[10] = 1024;
    v74 = a6;
    LOWORD(v75) = 1024;
    a7 = v19;
    *(_DWORD *)((char *)&v75 + 2) = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,abortReason,%d,waitToPostToAWD,%d", buf, 0x3Eu);
    if (v52 < 0)
      operator delete(__p[0]);
    a2 = v16;
    a3 = v44;
    if (v54 < 0)
      operator delete(v53[0]);
    a4 = v41;
    if (SBYTE1(v61) < 0)
      operator delete(v55);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v42 = qword_1022A0078;
    v30 = *(_DWORD *)(v46 + 880);
    v31 = v53;
    sub_1016E0854(a4, v53);
    v32 = a5;
    v33 = a3;
    v34 = a6;
    if (v54 < 0)
      v31 = (void **)v53[0];
    HIDWORD(v43) = v33;
    sub_1016E0884(v33, __p);
    v35 = v52;
    v36 = (void **)__p[0];
    sub_1016E07FC(a2, &v47);
    v37 = __p;
    if (v35 < 0)
      v37 = v36;
    v38 = &v47;
    if (v50 < 0)
      v38 = v47;
    LODWORD(v55) = 67110914;
    HIDWORD(v55) = v30;
    v56 = 1024;
    v57 = v30;
    v58 = 1024;
    a5 = v32;
    v59 = v32;
    v60 = 2080;
    v61 = v31;
    v62 = 2080;
    v63 = v37;
    v64 = 2080;
    v65 = v38;
    v66 = 1024;
    a6 = v34;
    v67 = v34;
    v68 = 1024;
    v69 = a7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 0, "#ins%d,#nilr,#cp,Cplane,Failed,instance,%d,sessionId,%u,posProtocol,%s,method,%s,result,%s,abortReason,%d,waitToPostToAWD,%d", &v55, 62, v42, v43, (const char *)v46, (const char *)v47, v48, v49);
    v40 = v39;
    if (v50 < 0)
      operator delete(v47);
    a3 = v45;
    if (v52 < 0)
      operator delete(__p[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::logFailedSession(CLNilrTypes::Result, gnss::Emergency::Cplane::MethodType, gnss::Emergency::Cplane::PosProtocol, uint32_t, gnss::Emergency::Cplane::AbortReason, BOOL)", "%s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  result = *(_QWORD *)(v46 + 232);
  if (result)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)v72 = _Q0;
    *(_OWORD *)&v72[16] = _Q0;
    v75 = 0;
    v76 = 0;
    v77 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v78 = xmmword_101BBE630;
    v79 = _Q0;
    v80 = 0xBFF0000000000000;
    v81 = 0;
    v85 = 0;
    v83[0] = 0;
    *(_QWORD *)((char *)v83 + 5) = 0;
    v86 = 0xFFFFFFFF00000000;
    v87 = -1;
    v88 = v77;
    v89 = 0xBFF0000000000000;
    v90 = 0xFFFFFFFF00000000;
    v91 = 0;
    v92 = 255;
    v94 = 0;
    v97 = 0;
    v96 = 0;
    v98 = v77;
    v99 = 0xBFF0000000000000;
    v84 = 0;
    v82 = a3;
    *(_DWORD *)v73 = a5;
    *(_DWORD *)&v73[4] = a4;
    *(_DWORD *)&v73[8] = 0;
    *(_DWORD *)buf = 3;
    v71 = a2;
    v93 = a6;
    v95 = a7;
    return (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)result + 48))(result, buf);
  }
  return result;
}

void sub_1016C8690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016C86F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  if (!*(_QWORD *)(a1 + 2328))
  {
    sub_1016DE764();
    __break(1u);
  }
  v4[0] = off_1021C9148;
  v4[1] = a1;
  v5 = v4;
  v1 = *(_QWORD *)(a1 + 200);
  if (!v1)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 48))(v1, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1016C87B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  uint64_t v14;

  v13 = a13;
  if (a13 == &a10)
  {
    v14 = 4;
    v13 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1016C87F8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _QWORD block[5];
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,startWlanSession", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v7 = *(_DWORD *)(a1 + 880);
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,startWlanSession", v11);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::startWlanSession(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 860) = *(_DWORD *)(a2 + 8);
  v6 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1016CD00C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v6, block);
  sub_1016C3590(a1 + 8, 27, *(double *)(a1 + 3240));
}

_QWORD *sub_1016C8A08(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _DWORD v14[4];
  uint8_t buf[4];
  int v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasurements", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v9 = *(_DWORD *)(a1 + 880);
    v14[0] = 67109120;
    v14[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,reportWlanMeasurements", v14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::reportWlanMeasurements(gnss::Emergency::Cplane::WlanMeasReport &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v12[0] = off_1021C8FA8;
  v12[1] = a2;
  v12[2] = a1;
  v13 = v12;
  v6 = *(_QWORD *)(a1 + 200);
  if (!v6)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v12);
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1016C8C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1016C8C64(uint64_t a1, int a2, unsigned int a3)
{
  int v6;
  NSObject *v7;
  int v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void **v13;
  char *v14;
  char *v15;
  int v16;
  void *v17[2];
  char v18;
  void *__p;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;

  *(_DWORD *)(a1 + 2216) = a3;
  v6 = *(unsigned __int8 *)(a1 + 832);
  *(_BYTE *)(a1 + 832) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(a1 + 880);
    sub_1017E1CCC(a3, &__p);
    v9 = SBYTE1(v25) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109890;
    v27 = v8;
    v28 = 1024;
    v29 = v8;
    v30 = 1024;
    v31 = a2;
    v32 = 2080;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,emergency,%d,commType,%s", buf, 0x1Eu);
    if (SBYTE1(v25) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = qword_1022A0078;
    v12 = *(_DWORD *)(a1 + 880);
    sub_1017E1CCC(a3, v17);
    if (v18 >= 0)
      v13 = v17;
    else
      v13 = (void **)v17[0];
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v12;
    v20 = 1024;
    v21 = v12;
    v22 = 1024;
    v23 = a2;
    v24 = 2080;
    v25 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,emergency,%d,commType,%s", &__p, 30, v16, (const char *)v17[0]);
    v15 = v14;
    if (v18 < 0)
      operator delete(v17[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  if (v6)
  {
    if (*(_BYTE *)(a1 + 832))
      return;
    v10 = 3;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 832))
      return;
    v10 = 2;
  }
  sub_1016C1014(a1 + 8, v10);
}

uint64_t sub_1016C8F04(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(_DWORD *)(a2 + 12);
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(unsigned __int8 *)(a2 + 4);
    v10 = *(unsigned __int16 *)(a2 + 20);
    v11 = *(unsigned __int16 *)(a2 + 22);
    v12 = *(unsigned __int8 *)(a2 + 24);
    v13 = *(unsigned __int8 *)(a2 + 25);
    *(_DWORD *)buf = 67111424;
    v31 = v5;
    v32 = 1024;
    v33 = v5;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 1024;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    v42 = 1024;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    v46 = 1024;
    v47 = v12;
    v48 = 1024;
    v49 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,responseType,%u,aidMask,%u,gWeek,%u,gToe,%u,numOfSats,%u", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v15 = *(_DWORD *)(a1 + 880);
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_DWORD *)(a2 + 12);
    v18 = *(unsigned __int8 *)(a2 + 4);
    v19 = *(unsigned __int16 *)(a2 + 20);
    v20 = *(unsigned __int16 *)(a2 + 22);
    v21 = *(unsigned __int8 *)(a2 + 25);
    LOWORD(v25) = 1024;
    HIWORD(v25) = v15;
    LOWORD(v26) = HIWORD(v17);
    HIWORD(v26) = 1024;
    LOWORD(v27) = 1024;
    HIWORD(v27) = v18;
    LOWORD(v28) = HIWORD(v20);
    HIWORD(v28) = 1024;
    LOWORD(v29) = 1024;
    HIWORD(v29) = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d,responseType,%u,aidMask,%u,gWeek,%u,gToe,%u,numOfSats,%u", &v24, 62, 67111424, v25, v16, v26, v27, v19, v28, v29);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceDataNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  return sub_1016C1014(a1 + 8, 13);
}

uint64_t sub_1016C9194(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = *a2;
    *(_DWORD *)buf = 67109632;
    v18 = v5;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(a1 + 880);
    v9 = *a2;
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", &v12, 20, 67109632);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_Fta1xAssistanceDataNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_1016C1014(a1 + 8, 23);
}

void sub_1016C9384(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring acquistion assistance due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring acquistion assistance due to NILR lock out", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2384) = a2;
    sub_1016C1014(a1 + 8, 22);
    *(_QWORD *)(a1 + 2384) = 0;
  }
}

void sub_1016C9550(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring FT assistance due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring FT assistance due to NILR lock out", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_CellFT1xAssistance(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2392) = a2;
    sub_1016C1014(a1 + 8, 24);
    *(_QWORD *)(a1 + 2392) = 0;
  }
}

void sub_1016C971C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance ephemeris due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance ephemeris due to NILR lock out", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2344) = a2;
    sub_1016C1014(a1 + 8, 4);
    *(_QWORD *)(a1 + 2344) = 0;
  }
}

void sub_1016C98E8(uint64_t a1, void *__src)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  char *v7;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int16 v13;
  NSObject *v14;
  int v15;
  const char *v16;
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  _DWORD __dst[70];
  uint64_t buf;
  std::__shared_weak_count *v26;
  int v27;

  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      LODWORD(buf) = 67109120;
      HIDWORD(buf) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance time due to NILR lock out", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      __dst[0] = 67109120;
      __dst[1] = v5;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance time due to NILR lock out", __dst);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v6);
      if (v7 != (char *)&buf)
        free(v7);
    }
  }
  else
  {
    v18 = 0;
    if (*(_BYTE *)(a1 + 878))
    {
      sub_1001E4804(&buf);
      v9 = sub_100525CE4(buf, "GpsWeekOffset", &v18);
      v10 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if ((v9 & 1) == 0)
        v18 = 1024;
    }
    memcpy(__dst, __src, sizeof(__dst));
    sub_100197040();
    if (sub_100195F08() && sub_1000FDB0C())
    {
      v13 = v18 + *((_WORD *)__src + 2);
      LOWORD(__dst[1]) = v13;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_DWORD *)(a1 + 880);
        LODWORD(buf) = 67109632;
        HIDWORD(buf) = v15;
        LOWORD(v26) = 1024;
        *(_DWORD *)((char *)&v26 + 2) = v13;
        HIWORD(v26) = 1024;
        v27 = __dst[0];
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,week,%d,gpsTow,%d", (uint8_t *)&buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7D48);
        v20 = 1024;
        v21 = v13;
        v22 = 1024;
        v23 = __dst[0];
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,week,%d,gpsTow,%d", &v19, 20, 67109632);
        v17 = (char *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v16);
        if (v17 != (char *)&buf)
          free(v17);
      }
    }
    *(_QWORD *)(a1 + 2352) = __dst;
    sub_1016C1014(a1 + 8, 6);
    *(_QWORD *)(a1 + 2352) = 0;
  }
}

void sub_1016C9CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_100261F44((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1016C9D18(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance location due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring assistance location due to NILR lock out", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2360) = a2;
    sub_1016C1014(a1 + 8, 8);
    *(_QWORD *)(a1 + 2360) = 0;
  }
}

void sub_1016C9EE4(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  _DWORD v28[2];
  int v29;
  int v30;
  int v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = *((_DWORD *)a2 + 9);
    v7 = *((_DWORD *)a2 + 10);
    v8 = *((_DWORD *)a2 + 1);
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = *((unsigned __int8 *)a2 + 10);
    v11 = *((_DWORD *)a2 + 6);
    v12 = *((unsigned __int8 *)a2 + 30);
    *(_DWORD *)buf = 67111168;
    v34 = v5;
    v35 = 1024;
    v36 = v5;
    v37 = 1024;
    v38 = v6;
    v39 = 1024;
    v40 = v7;
    v41 = 1024;
    v42 = v8;
    v43 = 1024;
    v44 = v9;
    v45 = 1024;
    v46 = v10;
    v47 = 1024;
    v48 = v11;
    v49 = 1024;
    v50 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,posProtocol,%d,sessionId,%d,method,%d,responseTime,%d,accuracy,%d,assistanceAvailability,%d,locCordinateTypeAllowed,%d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v20 = *(_DWORD *)(a1 + 880);
    v21 = *((_DWORD *)a2 + 9);
    v22 = *((_DWORD *)a2 + 10);
    v23 = *((_WORD *)a2 + 4);
    v24 = *((unsigned __int8 *)a2 + 10);
    v25 = *((_DWORD *)a2 + 6);
    LOWORD(v29) = 1024;
    HIWORD(v29) = v20;
    LOWORD(v30) = HIWORD(v22);
    HIWORD(v30) = 1024;
    LOWORD(v31) = 1024;
    HIWORD(v31) = v23;
    LOWORD(v32) = HIWORD(v25);
    HIWORD(v32) = 1024;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,posProtocol,%d,sessionId,%d,method,%d,responseTime,%d,accuracy,%d,assistanceAvailability,%d,locCordinateTypeAllowed,%d", v28, 56, 67111168, v29, v21, v30, v31, v24, v32);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionRequest(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v34 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring position request due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v15 = *(_DWORD *)(a1 + 880);
      v28[0] = 67109120;
      v28[1] = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning NilrCPlane,ignoring position request due to NILR lock out", v28);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionRequest(const gnss::Emergency::Cplane::PositionRequest &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    v18 = *a2;
    v19 = a2[1];
    *(_OWORD *)(a1 + 2248) = *(__int128 *)((char *)a2 + 28);
    *(_OWORD *)(a1 + 2220) = v18;
    *(_OWORD *)(a1 + 2236) = v19;
    if (sub_10075BDC4())
      *(_DWORD *)(a1 + 2232) = 0;
    sub_1016C1014(a1 + 8, 10);
  }
}

uint64_t sub_1016CA2D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t result;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v7 = *(_DWORD *)(a1 + 880);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,CPlane", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_SessionAbort(const gnss::Emergency::Cplane::GnssAbortReqParams &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_QWORD *)(a1 + 2368) = a2;
  result = sub_1016C1014(a1 + 8, 11);
  *(_QWORD *)(a1 + 2368) = 0;
  return result;
}

uint64_t sub_1016CA49C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  int v53;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  const char *v61;
  uint8_t *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[32];
  __int16 v68;
  _BYTE v69[32];
  uint64_t v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  _BYTE v80[10];
  uint64_t v81;
  _BYTE v82[10];
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[16];
    *(_DWORD *)buf = 67110912;
    v72 = v5;
    v73 = 1024;
    v74 = v5;
    v75 = 1024;
    v76 = v6;
    v77 = 1024;
    v78 = v7;
    v79 = 1024;
    *(_DWORD *)v80 = v8;
    *(_WORD *)&v80[4] = 1024;
    *(_DWORD *)&v80[6] = v9;
    LOWORD(v81) = 1024;
    *(_DWORD *)((char *)&v81 + 2) = v10;
    HIWORD(v81) = 1024;
    *(_DWORD *)v82 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,result,%d,responseType,%d,shapeType,%d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v55 = *(_DWORD *)(a1 + 880);
    v56 = a2[2];
    v57 = a2[3];
    v58 = *a2;
    v59 = a2[1];
    v60 = a2[16];
    LOWORD(v66) = 1024;
    WORD1(v66) = v55;
    *(_WORD *)&v67[8] = HIWORD(v57);
    *(_WORD *)&v67[10] = 1024;
    *(_WORD *)&v67[16] = 1024;
    *(_WORD *)&v67[18] = v58;
    v68 = HIWORD(v60);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,result,%d,responseType,%d,shapeType,%d", &v65, 50, 67110912, v66, v56, *(_DWORD *)&v67[8], *(_DWORD *)&v67[16], v59);
    v62 = (uint8_t *)v61;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v61);
    if (v62 != buf)
      free(v62);
  }
  v12 = a2[16];
  *(_BYTE *)(a1 + 304) = v12;
  if (v12 == 3)
  {
    *(double *)(a1 + 312) = sub_1016E13F0(a2[20]);
    *(double *)(a1 + 320) = sub_1016E1414(a2[21]);
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(long double *)(a1 + 344) = sub_1016E138C(*((unsigned __int8 *)a2 + 88));
    *(long double *)(a1 + 352) = sub_1016E138C(*((unsigned __int8 *)a2 + 89));
    *(_DWORD *)(a1 + 368) = *((unsigned __int8 *)a2 + 91);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v35 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *(_DWORD *)(a1 + 880);
      v37 = a2[20];
      v38 = a2[21];
      v39 = *(_QWORD *)(a1 + 312);
      v40 = *(_QWORD *)(a1 + 320);
      v41 = *(_QWORD *)(a1 + 344);
      v42 = *(_QWORD *)(a1 + 352);
      v43 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 67111169;
      v72 = v36;
      v73 = 1026;
      v74 = v36;
      v75 = 1025;
      v76 = v37;
      v77 = 1025;
      v78 = v38;
      v79 = 2049;
      *(_QWORD *)v80 = v39;
      *(_WORD *)&v80[8] = 2049;
      v81 = v40;
      *(_WORD *)v82 = 2050;
      *(_QWORD *)&v82[2] = v41;
      v83 = 2050;
      v84 = v42;
      v85 = 1026;
      LODWORD(v86) = v43;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,pointUncertainEllipse,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,conf,%{public}d", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v44 = *(_DWORD *)(a1 + 880);
      v45 = a2[20];
      v46 = a2[21];
      v47 = *(_QWORD *)(a1 + 312);
      v48 = *(_QWORD *)(a1 + 320);
      v49 = *(_QWORD *)(a1 + 344);
      v50 = *(_QWORD *)(a1 + 352);
      v51 = *(_DWORD *)(a1 + 368);
      LODWORD(v65) = 67111169;
      HIDWORD(v65) = v44;
      LOWORD(v66) = 1026;
      *(_DWORD *)((char *)&v66 + 2) = v44;
      HIWORD(v66) = 1025;
      *(_DWORD *)v67 = v45;
      *(_WORD *)&v67[4] = 1025;
      *(_DWORD *)&v67[6] = v46;
      *(_WORD *)&v67[10] = 2049;
      *(_QWORD *)&v67[12] = v47;
      *(_WORD *)&v67[20] = 2049;
      *(_QWORD *)&v67[22] = v48;
      *(_WORD *)&v67[30] = 2050;
      *(_WORD *)v69 = 2050;
      *(_QWORD *)&v69[2] = v50;
      *(_WORD *)&v69[10] = 1026;
      *(_DWORD *)&v69[12] = v51;
      LODWORD(v64) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,pointUncertainEllipse,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,conf,%{public}d", &v65, v64, v65, v66, *(_OWORD *)v67, *(_OWORD *)&v67[16], v49, *(_OWORD *)v69, *(_OWORD *)&v69[16], v70);
      goto LABEL_37;
    }
  }
  else if (v12 == 9)
  {
    *(double *)(a1 + 312) = sub_1016E13F0(a2[23]);
    *(double *)(a1 + 320) = sub_1016E1414(a2[24]);
    *(double *)(a1 + 328) = sub_1016E1370(*((_WORD *)a2 + 50));
    *(long double *)(a1 + 360) = sub_1016E13BC(*((unsigned __int8 *)a2 + 105));
    *(long double *)(a1 + 344) = sub_1016E138C(*((unsigned __int8 *)a2 + 102));
    *(long double *)(a1 + 352) = sub_1016E138C(*((unsigned __int8 *)a2 + 103));
    *(_DWORD *)(a1 + 368) = *((unsigned __int8 *)a2 + 106);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(a1 + 880);
      v15 = a2[23];
      v16 = a2[24];
      v17 = *(_QWORD *)(a1 + 312);
      v18 = *(_QWORD *)(a1 + 320);
      v19 = *(_QWORD *)(a1 + 328);
      v21 = *(_QWORD *)(a1 + 352);
      v20 = *(_QWORD *)(a1 + 360);
      v22 = *(_QWORD *)(a1 + 344);
      v23 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 67111681;
      v72 = v14;
      v73 = 1026;
      v74 = v14;
      v75 = 1025;
      v76 = v15;
      v77 = 1025;
      v78 = v16;
      v79 = 2049;
      *(_QWORD *)v80 = v17;
      *(_WORD *)&v80[8] = 2049;
      v81 = v18;
      *(_WORD *)v82 = 2049;
      *(_QWORD *)&v82[2] = v19;
      v83 = 2050;
      v84 = v20;
      v85 = 2050;
      v86 = v22;
      v87 = 2050;
      v88 = v21;
      v89 = 1026;
      v90 = v23;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,pointAltitudeUncertainEllipsoid,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,confidence,%{public}d", buf, 0x5Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v24 = *(_DWORD *)(a1 + 880);
      v25 = a2[23];
      v26 = a2[24];
      v27 = *(_QWORD *)(a1 + 312);
      v28 = *(_QWORD *)(a1 + 320);
      v29 = *(_QWORD *)(a1 + 328);
      v31 = *(_QWORD *)(a1 + 352);
      v30 = *(_QWORD *)(a1 + 360);
      v32 = *(_QWORD *)(a1 + 344);
      v33 = *(_DWORD *)(a1 + 368);
      LODWORD(v65) = 67111681;
      HIDWORD(v65) = v24;
      LOWORD(v66) = 1026;
      *(_DWORD *)((char *)&v66 + 2) = v24;
      HIWORD(v66) = 1025;
      *(_DWORD *)v67 = v25;
      *(_WORD *)&v67[4] = 1025;
      *(_DWORD *)&v67[6] = v26;
      *(_WORD *)&v67[10] = 2049;
      *(_QWORD *)&v67[12] = v27;
      *(_WORD *)&v67[20] = 2049;
      *(_QWORD *)&v67[22] = v28;
      *(_WORD *)&v67[30] = 2049;
      *(_WORD *)v69 = 2050;
      *(_QWORD *)&v69[2] = v30;
      *(_WORD *)&v69[10] = 2050;
      *(_QWORD *)&v69[12] = v32;
      *(_WORD *)&v69[20] = 2050;
      *(_QWORD *)&v69[22] = v31;
      *(_WORD *)&v69[30] = 1026;
      LODWORD(v70) = v33;
      LODWORD(v64) = 92;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,pointAltitudeUncertainEllipsoid,instance,%{public}d,lat3gpp,%{private}d,lon3gpp,%{private}d,lat,%{private}.8f,lon,%{private}.8f,alt,%{private}.3f,uncAlt,%{public}.3f,uncSemiMajor,%{public}.3f,uncSemiMinor,%{public}.3f,confidence,%{public}d", &v65, v64, v65, v66, *(_OWORD *)v67, *(_OWORD *)&v67[16], v29, *(_OWORD *)v69, *(_OWORD *)&v69[16],
        v70);
LABEL_37:
      v63 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v34);
      if (v63 != buf)
        free(v63);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_DWORD *)(a1 + 368) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v52 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v53 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v72 = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning FIREDBG:Unsupported", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning FIREDBG:Unsupported", &v65);
      goto LABEL_37;
    }
  }
  return sub_1016C1014(a1 + 8, 14);
}

uint64_t sub_1016CAC8C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(_DWORD *)(a2 + 12);
    v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)buf = 67110144;
    v23 = v5;
    v24 = 1024;
    v25 = v5;
    v26 = 1024;
    v27 = v6;
    v28 = 1024;
    v29 = v7;
    v30 = 1024;
    v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane received measurement response,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = *(_DWORD *)(a1 + 880);
    v12 = *(_DWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a2 + 12);
    v14 = *(_DWORD *)(a2 + 16);
    LOWORD(v18) = 1024;
    HIWORD(v18) = v11;
    HIWORD(v19) = HIWORD(v13);
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane received measurement response,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u", &v17, 32, 67110144, v18, v12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_MeasurementResponse(const gnss::Emergency::Cplane::MeasurementReport &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v9 = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 452) = v9;
  *(_BYTE *)(a1 + 724) = v9;
  return sub_1016C1014(a1 + 8, 16);
}

uint64_t sub_1016CAEB0(uint64_t a1, int *a2, double a3)
{
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v57;
  int v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  _BYTE v67[32];
  uint8_t buf[4];
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;

  v5 = *a2;
  if (*a2 == -9)
  {
    v6 = 4;
  }
  else if (v5)
  {
    if (v5 == -4)
      v6 = 3;
    else
      v6 = 11;
  }
  else
  {
    v6 = 1;
  }
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 453) = 1;
  LODWORD(a3) = a2[119];
  v7 = (double)*(unint64_t *)&a3 * 0.00000536441803;
  *(double *)(a1 + 312) = v7;
  LODWORD(v7) = a2[120];
  *(double *)(a1 + 320) = (double)*(unint64_t *)&v7 * 0.00000536441803 + -360.0;
  v8 = sub_1016E1454(*((unsigned __int8 *)a2 + 485));
  v9 = sub_1016E1454(*((unsigned __int8 *)a2 + 486));
  if (v8 > 0.0 && v9 > 0.0)
    *(double *)(a1 + 336) = sqrt(v9 * v9 + v8 * v8);
  if (*((_BYTE *)a2 + 512))
  {
    v10 = sub_1016E1358(*((_WORD *)a2 + 257));
    *(double *)(a1 + 328) = v10;
    LOBYTE(v10) = *((_BYTE *)a2 + 516);
    *(double *)(a1 + 360) = (double)*(unint64_t *)&v10;
  }
  *(_BYTE *)(a1 + 452) = *((_BYTE *)a2 + 27);
  memcpy((void *)(a1 + 512), (const void *)(a1 + 240), 0x110uLL);
  if (a2[122] == -1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v47 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v48 = *(_DWORD *)(a1 + 880);
      v49 = *a2;
      v50 = *((unsigned __int8 *)a2 + 4);
      v51 = a2[2];
      v52 = a2[3];
      v53 = a2[4];
      v54 = a2[122];
      v55 = *((unsigned __int8 *)a2 + 27);
      *(_DWORD *)buf = 67110912;
      v69 = v48;
      v70 = 1024;
      v71 = v49;
      v72 = 1024;
      v73 = v50;
      v74 = 1024;
      v75 = v51;
      v76 = 1024;
      v77 = v52;
      v78 = 1024;
      v79 = v53;
      v80 = 1024;
      v81 = v54;
      v82 = 1024;
      v83 = v55;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%d,responseType,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,locationIndication,fixtype,%d,gpsMeasurements,nrOfSats,%d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v57 = *(_DWORD *)(a1 + 880);
      v58 = *a2;
      LODWORD(v60) = 67110912;
      HIDWORD(v60) = v57;
      LOWORD(v61) = 1024;
      *(_DWORD *)((char *)&v61 + 2) = v58;
      HIWORD(v61) = 1024;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%d,responseType,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%u,locationIndication,fixtype,%d,gpsMeasurements,nrOfSats,%d", &v60, 50, v60, v61);
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(a1 + 880);
      v13 = *a2;
      v14 = *((unsigned __int8 *)a2 + 4);
      v15 = a2[2];
      v16 = a2[3];
      v17 = a2[4];
      v18 = a2[119];
      v19 = a2[120];
      v20 = *((unsigned __int8 *)a2 + 484);
      v21 = *((unsigned __int8 *)a2 + 485);
      v22 = *((unsigned __int8 *)a2 + 486);
      v23 = a2[122];
      v24 = *((unsigned __int8 *)a2 + 27);
      v25 = *(_QWORD *)(a1 + 312);
      v26 = *(_QWORD *)(a1 + 320);
      v28 = *(_QWORD *)(a1 + 328);
      v27 = *(_QWORD *)(a1 + 336);
      *(_DWORD *)buf = 67113217;
      v69 = v12;
      v70 = 1026;
      v71 = v13;
      v72 = 1026;
      v73 = v14;
      v74 = 1026;
      v75 = v15;
      v76 = 1026;
      v77 = v16;
      v78 = 1026;
      v79 = v17;
      v80 = 1025;
      v81 = v18;
      v82 = 1025;
      v83 = v19;
      v84 = 1026;
      v85 = v20;
      v86 = 1026;
      v87 = v21;
      v88 = 1026;
      v89 = v22;
      v90 = 1026;
      v91 = v23;
      v92 = 1026;
      v93 = v24;
      v94 = 2049;
      v95 = v25;
      v96 = 2049;
      v97 = v26;
      v98 = 2050;
      v99 = v27;
      v100 = 2049;
      v101 = v28;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%{public}d,responseType,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}u,locationIndication,lat,%{private}d,lon,%{private}d,locUncAng,%{public}d,locUncA,%{public}d,locUncP,%{public}d,fixtype,%{public}d,gpsMeasurements,nrOfSats,%{public}d,lat(m),%{private}f,lon(m),%{private}f,acc,%{public}f,alt,%{private}f", buf, 0x78u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v29 = *(_DWORD *)(a1 + 880);
      v30 = *a2;
      v31 = *((unsigned __int8 *)a2 + 4);
      v32 = a2[2];
      v33 = a2[3];
      v34 = a2[4];
      v35 = a2[119];
      v36 = a2[120];
      v37 = *((unsigned __int8 *)a2 + 484);
      v38 = *((unsigned __int8 *)a2 + 485);
      v39 = *((unsigned __int8 *)a2 + 486);
      v40 = a2[122];
      v41 = *((unsigned __int8 *)a2 + 27);
      v42 = *(_QWORD *)(a1 + 312);
      v43 = *(_QWORD *)(a1 + 320);
      v45 = *(_QWORD *)(a1 + 328);
      v44 = *(_QWORD *)(a1 + 336);
      LODWORD(v60) = 67113217;
      HIDWORD(v60) = v29;
      LOWORD(v61) = 1026;
      *(_DWORD *)((char *)&v61 + 2) = v30;
      HIWORD(v61) = 1026;
      LODWORD(v62) = v31;
      WORD2(v62) = 1026;
      *(_DWORD *)((char *)&v62 + 6) = v32;
      WORD5(v62) = 1026;
      HIDWORD(v62) = v33;
      LOWORD(v63) = 1026;
      *(_DWORD *)((char *)&v63 + 2) = v34;
      HIWORD(v63) = 1025;
      LODWORD(v64) = v35;
      WORD2(v64) = 1025;
      *(_DWORD *)((char *)&v64 + 6) = v36;
      WORD5(v64) = 1026;
      HIDWORD(v64) = v37;
      LOWORD(v65) = 1026;
      *(_DWORD *)((char *)&v65 + 2) = v38;
      HIWORD(v65) = 1026;
      LODWORD(v66) = v39;
      WORD2(v66) = 1026;
      *(_DWORD *)((char *)&v66 + 6) = v40;
      WORD5(v66) = 1026;
      HIDWORD(v66) = v41;
      *(_WORD *)v67 = 2049;
      *(_QWORD *)&v67[2] = v42;
      *(_WORD *)&v67[10] = 2049;
      *(_QWORD *)&v67[12] = v43;
      *(_WORD *)&v67[20] = 2050;
      *(_QWORD *)&v67[22] = v44;
      *(_WORD *)&v67[30] = 2049;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#dbh,process_MeasurementReportWithEstimateResponse,result,%{public}d,responseType,%{public}d,sessionProtocol,%{public}d,posProtocol,%{public}d,sessionId,%{public}u,locationIndication,lat,%{private}d,lon,%{private}d,locUncAng,%{public}d,locUncA,%{public}d,locUncP,%{public}d,fixtype,%{public}d,gpsMeasurements,nrOfSats,%{public}d,lat(m),%{private}f,lon(m),%{private}f,acc,%{public}f,alt,%{private}f", &v60, 120, v60, v61, v62, v63, v64, v65,
        v66,
        *(_OWORD *)v67,
        *(_OWORD *)&v67[16],
        v45);
LABEL_31:
      v59 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_MeasurementReportWithEstimateResponse(const gnss::Emergency::Cplane::MeasurementReportWithEstimate &)", "%s\n", v46);
      if (v59 != buf)
        free(v59);
    }
  }
  return sub_1016C1014(a1 + 8, 29);
}

uint64_t sub_1016CB488(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,CPlane", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v5 = *(_DWORD *)(a1 + 880);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,CPlane", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_OTADelete(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_1016C1014(a1 + 8, 12);
}

uint64_t sub_1016CB644(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109632;
    v17 = v5;
    v18 = 1024;
    v19 = v5;
    v20 = 1024;
    v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,CPlane,instance,%d,isPowered,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(a1 + 880);
    v12 = 1024;
    v13 = v8;
    v14 = 1024;
    v15 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,CPlane,instance,%d,isPowered,%d", &v11, 20, 67109632);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_BasebandPowerStatus(BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (a2)
  {
    sub_1016C073C(a1, (_DWORD *)(a1 + 888));
    v6 = 19;
  }
  else
  {
    v6 = 20;
  }
  return sub_1016C1014(a1 + 8, v6);
}

void sub_1016CB844(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*(_DWORD *)(a2 + 20) == 1)
  {
    *(_QWORD *)(a1 + 2376) = a2;
    sub_1016C1014(a1 + 8, 21);
    *(_QWORD *)(a1 + 2376) = 0;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v4 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#ins%d,#nilr,#cp,Only session end indication is handled in Control plane state machine", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v5 = *(_DWORD *)(a1 + 880);
      v8[0] = 67109120;
      v8[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ins%d,#nilr,#cp,Only session end indication is handled in Control plane state machine", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLNilrCplane::process_BasebandSessionInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1016CBA18(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  void **block;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v4 = (std::__shared_weak_count *)operator new(0x780uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8D98;
  memcpy(&v4[1], a2, 0x768uLL);
  v33 = &v4[1].__vftable;
  v34 = v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    *(_DWORD *)buf = 67110144;
    v45 = v7;
    v46 = 1024;
    v47 = v7;
    v48 = 1024;
    v49 = v8;
    v50 = 1024;
    v51 = v9;
    v52 = 1024;
    v53 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = *(_DWORD *)(a1 + 880);
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[4];
    v35[0] = 67110144;
    v35[1] = v19;
    v36 = 1024;
    v37 = v19;
    v38 = 1024;
    v39 = v20;
    v40 = 1024;
    v41 = v21;
    v42 = 1024;
    v43 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", v35, 32, v25, (_DWORD)block, v27);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_AssistanceDataNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v11 = *(NSObject **)a1;
  block = _NSConcreteStackBlock;
  v27 = 3321888768;
  v28 = sub_1016CBD4C;
  v29 = &unk_1021C7C58;
  v30 = a1;
  v31 = &v4[1].__vftable;
  v32 = v4;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  dispatch_async(v11, &block);
  v13 = v32;
  if (v32)
  {
    v14 = (unint64_t *)&v32->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1016CBD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CBD4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100349198((_QWORD *)(v1 + 2264), (uint64_t *)(a1 + 40));
  v3 = *(_QWORD *)(v1 + 2264);
  if (v3)
    return sub_1016C8F04(v1, v3);
  v5 = sub_1016DE8CC(v2);
  return sub_1016CBD84(v5, v6);
}

uint64_t sub_1016CBD84(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1016CBDA8(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_1016CBDB0(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  unint64_t *v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  _QWORD block[6];
  std::__shared_weak_count *v23;
  char *v24;
  std::__shared_weak_count *v25;
  _DWORD v26[2];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v5 = v4 + 1;
  v4[2] = 0;
  *((_DWORD *)v4 + 6) = *a2;
  *v4 = off_1021C8DE8;
  v24 = (char *)(v4 + 3);
  v25 = (std::__shared_weak_count *)v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = *a2;
    *(_DWORD *)buf = 67109632;
    v32 = v7;
    v33 = 1024;
    v34 = v7;
    v35 = 1024;
    v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v17 = *(_DWORD *)(a1 + 880);
    v18 = *a2;
    v26[0] = 67109632;
    v26[1] = v17;
    v27 = 1024;
    v28 = v17;
    v29 = 1024;
    v30 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,networkType,%d", v26, 20, v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_FT1xAssistanceDataNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v9 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016CC0B4;
  block[3] = &unk_1021C7C88;
  block[4] = a1;
  block[5] = v4 + 3;
  v23 = (std::__shared_weak_count *)v4;
  do
    v10 = __ldxr(v5);
  while (__stxr(v10 + 1, v5));
  dispatch_async(v9, block);
  v11 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1016CC09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CC0B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100349198((_QWORD *)(v1 + 2280), (uint64_t *)(a1 + 40));
  v3 = *(int **)(v1 + 2280);
  if (v3)
    return sub_1016C9194(v1, v3);
  v5 = sub_1016DEA2C(v2);
  return sub_1016CC0EC(v5, v6);
}

uint64_t sub_1016CC0EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1016CC110(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_1016CC118(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  void **block;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v6 = (std::__shared_weak_count *)operator new(0x150uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E38;
  memcpy(&v6[1], a2, 0x138uLL);
  v35 = &v6[1].__vftable;
  v36 = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(a1 + 880);
    v10 = a2[2];
    v11 = a2[3];
    v12 = a2[4];
    *(_DWORD *)buf = 67110144;
    v47 = v9;
    v48 = 1024;
    v49 = v9;
    v50 = 1024;
    v51 = v10;
    v52 = 1024;
    v53 = v11;
    v54 = 1024;
    v55 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v21 = *(_DWORD *)(a1 + 880);
    v22 = a2[2];
    v23 = a2[3];
    v24 = a2[4];
    v37[0] = 67110144;
    v37[1] = v21;
    v38 = 1024;
    v39 = v21;
    v40 = 1024;
    v41 = v22;
    v42 = 1024;
    v43 = v23;
    v44 = 1024;
    v45 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", v37, 32, (_DWORD)block, v28, (_DWORD)v29);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_PositionResponse(const gnss::Emergency::Cplane::PositionReport &, const gnss::Fix &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  v13 = *(NSObject **)a1;
  block = _NSConcreteStackBlock;
  v28 = 3321888768;
  v29 = sub_1016CC454;
  v30 = &unk_1021C7CB8;
  v31 = a1;
  v32 = &v6[1].__vftable;
  v33 = v6;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v34 = a3;
  dispatch_async(v13, &block);
  v15 = v33;
  if (v33)
  {
    v16 = (unint64_t *)&v33->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v36;
  if (v36)
  {
    v19 = (unint64_t *)&v36->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1016CC43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CC454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (sub_10075BDC4())
  {
    v3 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(v3 + 4) &= ~4u;
    *(_DWORD *)(v3 + 272) = 255;
  }
  v4 = sub_100349198((_QWORD *)(v2 + 2296), (uint64_t *)(a1 + 40));
  v5 = *(int **)(v2 + 2296);
  if (v5)
    return sub_1016CA49C(v2, v5);
  v7 = sub_1016DEB8C(v4);
  return sub_1016CC4B0(v7, v8);
}

uint64_t sub_1016CC4B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1016CC4D4(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_1016CC4DC(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  void **block;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v4 = (std::__shared_weak_count *)operator new(0x590uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E88;
  memcpy(&v4[1], a2, 0x578uLL);
  v33 = &v4[1].__vftable;
  v34 = v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    *(_DWORD *)buf = 67110144;
    v45 = v7;
    v46 = 1024;
    v47 = v7;
    v48 = 1024;
    v49 = v8;
    v50 = 1024;
    v51 = v9;
    v52 = 1024;
    v53 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = *(_DWORD *)(a1 + 880);
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[4];
    v35[0] = 67110144;
    v35[1] = v19;
    v36 = 1024;
    v37 = v19;
    v38 = 1024;
    v39 = v20;
    v40 = 1024;
    v41 = v21;
    v42 = 1024;
    v43 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Dispatch,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", v35, 32, v25, (_DWORD)block, v27);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_MeasurementResponse(const gnss::Emergency::Cplane::MeasurementReport &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v11 = *(NSObject **)a1;
  block = _NSConcreteStackBlock;
  v27 = 3321888768;
  v28 = sub_1016CC810;
  v29 = &unk_1021C7CE8;
  v30 = a1;
  v31 = &v4[1].__vftable;
  v32 = v4;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  dispatch_async(v11, &block);
  v13 = v32;
  if (v32)
  {
    v14 = (unint64_t *)&v32->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1016CC7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CC810(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100349198((_QWORD *)(v1 + 2312), (uint64_t *)(a1 + 40));
  v3 = *(_QWORD *)(v1 + 2312);
  if (v3)
    return sub_1016CAC8C(v1, v3);
  v5 = sub_1016DECEC(v2);
  return sub_1016CC848(v5, v6);
}

uint64_t sub_1016CC848(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1016CC86C(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_1016CC874(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  void **block;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v4 = (std::__shared_weak_count *)operator new(0x228uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8ED8;
  memcpy(&v4[1], a2, 0x210uLL);
  v33 = &v4[1].__vftable;
  v34 = v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 880);
    v8 = a2[2];
    v9 = a2[3];
    v10 = a2[4];
    *(_DWORD *)buf = 67110144;
    v45 = v7;
    v46 = 1024;
    v47 = v7;
    v48 = 1024;
    v49 = v8;
    v50 = 1024;
    v51 = v9;
    v52 = 1024;
    v53 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#dbh,NilrCPlane,Dispatch,MeasurementReportWithEstimateResponse,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = *(_DWORD *)(a1 + 880);
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[4];
    v35[0] = 67110144;
    v35[1] = v19;
    v36 = 1024;
    v37 = v19;
    v38 = 1024;
    v39 = v20;
    v40 = 1024;
    v41 = v21;
    v42 = 1024;
    v43 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#dbh,NilrCPlane,Dispatch,MeasurementReportWithEstimateResponse,instance,%d,sessionProtocol,%d,posProtocol,%d,sessionId,%d", v35, 32, v25, (_DWORD)block, v27);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::dispatch_MeasurementReportWithEstimateResponse(const gnss::Emergency::Cplane::MeasurementReportWithEstimate &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v11 = *(NSObject **)a1;
  block = _NSConcreteStackBlock;
  v27 = 3321888768;
  v28 = sub_1016CCBA8;
  v29 = &unk_1021C7D18;
  v30 = a1;
  v31 = &v4[1].__vftable;
  v32 = v4;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  dispatch_async(v11, &block);
  v13 = v32;
  if (v32)
  {
    v14 = (unint64_t *)&v32->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1016CCB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CCBA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  double v3;
  int *v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100349198((_QWORD *)(v1 + 2328), (uint64_t *)(a1 + 40));
  v4 = *(int **)(v1 + 2328);
  if (v4)
    return sub_1016CAEB0(v1, v4, v3);
  v6 = sub_1016DEE4C(v2);
  return sub_1016CCBE0(v6, v7);
}

uint64_t sub_1016CCBE0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1016CCC04(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

uint64_t sub_1016CCC0C(_DWORD *a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 10) != a1[232] || *((_DWORD *)a2 + 12) != a1[234] || *((_DWORD *)a2 + 13) != a1[235])
    sub_1016C073C((uint64_t)a1, a2);
  return sub_10084B628((uint64_t)(a1 + 222), a2);
}

void *sub_1016CCC70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 512), 0x110uLL);
}

void sub_1016CCC80(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  __int128 v13;
  unsigned int v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    v6 = *a2;
    v7 = *((unsigned __int16 *)a2 + 8);
    *(_DWORD *)buf = 67109632;
    v25 = v5;
    v26 = 1024;
    v27 = v6;
    v28 = 1024;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,process_CplaneWlanRequest,nInstance,%d,responseTime,%d,", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v15 = *a2;
    v16 = *((unsigned __int16 *)a2 + 8);
    v20 = 1024;
    v21 = v15;
    v22 = 1024;
    v23 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,process_CplaneWlanRequest,nInstance,%d,responseTime,%d,", v19, 20, 67109632);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(_BYTE *)(a1 + 138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(a1 + 880);
      *(_DWORD *)buf = 67109120;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#Warning,#wlan,#nilr,#cplane,process_CplaneWlanRequest,ignoring wlan request due to NILR lock out", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = *(_DWORD *)(a1 + 880);
      v19[0] = 67109120;
      v19[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#Warning,#wlan,#nilr,#cplane,process_CplaneWlanRequest,ignoring wlan request due to NILR lock out", v19);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v13 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 2423) = *(int *)((char *)a2 + 15);
    *(_OWORD *)(a1 + 2408) = v13;
    v14 = *((unsigned __int16 *)a2 + 8);
    *(double *)(a1 + 3240) = (double)v14 + -2.0;
    *(_WORD *)(a1 + 822) = v14;
    *(CFAbsoluteTime *)(a1 + 800) = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)(a1 + 792) = 6;
    sub_1016C1014(a1 + 8, 25);
  }
}

uint64_t sub_1016CD00C(uint64_t a1)
{
  return sub_101837358(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2400), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 928), *(_DWORD *)(*(_QWORD *)(a1 + 32) + 936), (int)*(double *)(*(_QWORD *)(a1 + 32) + 3240));
}

uint64_t sub_1016CD028(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 880);
    *(_DWORD *)buf = 67109120;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,#wlan,wlanMeasurementHandler", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v17 = *(_DWORD *)(a1 + 880);
    v20[0] = 67109120;
    v20[1] = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,#wlan,wlanMeasurementHandler", v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLNilrCplane::wlanMeasurementHandler(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_DWORD *)(a1 + 2444) = *(_DWORD *)(a1 + 2420);
  *(_QWORD *)(a1 + 2436) = *(_QWORD *)(a1 + 2412);
  if (*(_DWORD *)a2 == 1)
  {
    *(_DWORD *)(a1 + 788) = 1;
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 2448) = -85 * ((v6 - v7) >> 2);
    *(_DWORD *)(a1 + 2432) = 0;
    if (v6 != v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = *(unsigned __int8 *)(a1 + 819);
      do
      {
        for (i = 0; i != 6; ++i)
          *(_BYTE *)(a1 + 2450 + v8 + i) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + v8 + i);
        v12 = *(_QWORD *)(a2 + 8);
        v13 = v12 + 12 * v9;
        v14 = *(unsigned __int8 *)(v13 + 6);
        v15 = a1 + 12 * v9;
        *(_BYTE *)(v15 + 2456) = v14;
        v10 |= v14;
        *(_BYTE *)(a1 + 819) = v10;
        *(_BYTE *)(v15 + 2457) = *(_BYTE *)(v13 + 7);
        *(_DWORD *)(v15 + 2458) = *(_DWORD *)(v13 + 8);
        ++v9;
        v8 += 12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 16) - v12) >> 2) > v9);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 2432) = -2;
    *(_BYTE *)(a1 + 3228) = 1;
    *(_DWORD *)(a1 + 3232) = 2;
    *(_DWORD *)(a1 + 788) = 4;
  }
  *(CFAbsoluteTime *)(a1 + 808) = CFAbsoluteTimeGetCurrent();
  return sub_1016C1014(a1 + 8, 26);
}

void sub_1016CD2F4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1016CD320(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1016CD350(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1016CD378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1016CD3B8(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;
  size_t v9;
  __int128 *v10;
  const void *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
      goto LABEL_6;
LABEL_21:
    sub_1016DEFAC();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  sub_100259584((uint64_t)&v12, v9 + 1);
  if (v13 >= 0)
    v10 = &v12;
  else
    v10 = (__int128 *)v12;
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)v10 + v9) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v12;
  *(_QWORD *)(a1 + 112) = v13;
}

void sub_1016CD53C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1016CD57C(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_1016D7364(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1016CD5E8()
{
  operator delete();
}

_QWORD *sub_1016CD5FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1016CD630(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7DF8;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1016CD64C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  result = *(_QWORD **)(a2 + 32);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6[0] = off_1021C7EF8;
    v7 = v6;
    sub_1016CD77C((uint64_t)result, 52, v4, 38, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

void sub_1016CD6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016CD734(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016CD770()
{
}

_QWORD *sub_1016CD77C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  _BYTE v13[24];
  _BYTE *v14;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  sub_1017A0EFC(a3, v11);
  sub_100270E34((uint64_t)v13, a5);
  sub_1016CD888(a1, a2, (char *)v11, a4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v10 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016CD848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016CD888(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[6];

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016CEA08;
    block[3] = &unk_1021C7EB8;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_1017589D4((AriMsg *)v28, a3))
  {
    memset(&v44[1], 255, 12);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v44[2]) = 1024;
    *(_DWORD *)((char *)&v44[2] + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016CDE30;
  v35[3] = &unk_1021C7E88;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016CDDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016CDE30(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  unsigned int v58;
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  int v62;
  uint8_t buf[4];
  int v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unsigned int v70;
  __int16 v71;
  unsigned int v72;
  __int16 v73;
  int v74;

  v4 = *(NSObject ***)(a1 + 32);
  *(_QWORD *)((char *)&v45 + 4) = -1;
  HIDWORD(v45) = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v64 = Gmid;
    v65 = 1024;
    v66 = v7;
    v67 = 1024;
    v68 = (v8 >> 15) & 0x3FF;
    v69 = 1024;
    v70 = v9;
    v71 = 1024;
    v72 = v9 >> 26;
    v73 = 1024;
    v74 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v51 = 67110400;
    v52 = v27;
    v53 = 1024;
    v54 = v28 >> 26;
    v55 = 1024;
    v56 = (v29 >> 15) & 0x3FF;
    v57 = 1024;
    v58 = v30;
    v59 = 1024;
    v60 = v30 >> 26;
    v61 = 1024;
    v62 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v51, 38, v43, (_DWORD)v45, DWORD2(v45), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v64 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v51 = 67109120;
      v52 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v51);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v51) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v51, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_101759B84(a2, &v45))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v51) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v51, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v51) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v51, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016CE944;
  block[3] = &unk_1021C7E58;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v45;
  dispatch_async(v20, block);
  v44 = 0;
  if (AriMsg::extractCtx(a2, &v44) || v44 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v64 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v51 = 67240192;
      v52 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v51, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v64 = v44;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v51 = 67109120;
      v52 = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v51);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016CE8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016CE944(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016CE988(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016CE994(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016CE9C8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016CE9D4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016CEA08(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[4];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpGnssAbortCnfParams, TResp = gnss::Emergency::Cplane::GnssAbortCnfAckCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016CEBF4()
{
  operator delete();
}

_QWORD *sub_1016CEC08()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C7EF8;
  return result;
}

void sub_1016CEC2C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C7EF8;
}

uint64_t sub_1016CEC48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016CEC84()
{
}

void sub_1016CEC94()
{
  operator delete();
}

_QWORD *sub_1016CECA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C7F98;
  result[1] = v3;
  return result;
}

uint64_t sub_1016CECDC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C7F98;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1016CECF8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  result = *(_QWORD **)(a2 + 32);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6[0] = off_1021C8098;
    v7 = v6;
    sub_1016CEE28((uint64_t)result, 51, v4, 37, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

void sub_1016CEDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016CEDE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016CEE1C()
{
}

_QWORD *sub_1016CEE28(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _OWORD v11[232];
  _BYTE v12[24];
  _BYTE *v13;

  memset(v11, 0, 512);
  sub_1017A0D20(a3, (uint64_t)v11);
  sub_100270E34((uint64_t)v12, a5);
  sub_1016CEF78(a1, a2, (char *)v11, a4, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016CEF38(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016CEF78(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  uint64_t v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016D00F4;
    block[3] = &unk_1021C8058;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_1017588B8((AriMsg *)v28, a3))
  {
    v45 = -1;
    v46 = -1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016CF514;
  v35[3] = &unk_1021C8028;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016CF4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016CF514(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  v4 = *(NSObject ***)(a1 + 32);
  *((_QWORD *)&v44 + 1) = -1;
  v45 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v65 = Gmid;
    v66 = 1024;
    v67 = v7;
    v68 = 1024;
    v69 = (v8 >> 15) & 0x3FF;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v9 >> 26;
    v74 = 1024;
    v75 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v52 = 67110400;
    v53 = v27;
    v54 = 1024;
    v55 = v28 >> 26;
    v56 = 1024;
    v57 = (v29 >> 15) & 0x3FF;
    v58 = 1024;
    v59 = v30;
    v60 = 1024;
    v61 = v30 >> 26;
    v62 = 1024;
    v63 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v52, 38, v43, DWORD1(v44), HIDWORD(v44), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v65 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v52 = 67109120;
      v53 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v52);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v52, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_101759C0C(a2, &v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v52, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v52, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016D0030;
  block[3] = &unk_1021C7FF8;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v44;
  v51 = v45;
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67240192;
      v53 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v52, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67109120;
      v53 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v52);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016CFFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D0030(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016D0074(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016D0080(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D00B4(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016D00C0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D00F4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionMeasurementsRspShortParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsRspAckCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016D02E0()
{
  operator delete();
}

_QWORD *sub_1016D02F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8098;
  return result;
}

void sub_1016D0318(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8098;
}

uint64_t sub_1016D0334(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D0370()
{
}

void sub_1016D0380()
{
  operator delete();
}

_QWORD *sub_1016D0394(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8138;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D03C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8138;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1016D03E4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _DWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  result = *(_QWORD **)(a2 + 32);
  if (result)
  {
    v4 = *(_DWORD **)(a1 + 8);
    v6[0] = off_1021C8238;
    v7 = v6;
    sub_1016D0514((uint64_t)result, 49, v4, 35, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  return result;
}

void sub_1016D0490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D04CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D0508()
{
}

_QWORD *sub_1016D0514(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _OWORD v11[29];
  _BYTE v12[24];
  _BYTE *v13;

  memset(v11, 0, 460);
  sub_1017A0C80(a3, (uint64_t)v11);
  sub_100270E34((uint64_t)v12, a5);
  sub_1016D0668(a1, a2, v11, a4, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016D0628(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016D0668(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  uint64_t v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016D17E4;
    block[3] = &unk_1021C81F8;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_1017585BC((AriMsg *)v28, a3))
  {
    v45 = -1;
    v46 = -1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016D0C04;
  v35[3] = &unk_1021C81C8;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016D0B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016D0C04(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  v4 = *(NSObject ***)(a1 + 32);
  *((_QWORD *)&v44 + 1) = -1;
  v45 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v65 = Gmid;
    v66 = 1024;
    v67 = v7;
    v68 = 1024;
    v69 = (v8 >> 15) & 0x3FF;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v9 >> 26;
    v74 = 1024;
    v75 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v52 = 67110400;
    v53 = v27;
    v54 = 1024;
    v55 = v28 >> 26;
    v56 = 1024;
    v57 = (v29 >> 15) & 0x3FF;
    v58 = 1024;
    v59 = v30;
    v60 = 1024;
    v61 = v30 >> 26;
    v62 = 1024;
    v63 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v52, 38, v43, DWORD1(v44), HIDWORD(v44), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v65 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v52 = 67109120;
      v53 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v52);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v52, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_101759CB8(a2, &v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v52, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v52, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016D1720;
  block[3] = &unk_1021C8198;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v44;
  v51 = v45;
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67240192;
      v53 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v52, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67109120;
      v53 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v52);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016D16D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D1720(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016D1764(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016D1770(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D17A4(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016D17B0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D17E4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionLocationInfoRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionLocationInfoRspAckCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016D19D0()
{
  operator delete();
}

_QWORD *sub_1016D19E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8238;
  return result;
}

void sub_1016D1A08(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8238;
}

uint64_t sub_1016D1A24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D1A60()
{
}

void sub_1016D1A70()
{
  operator delete();
}

_QWORD *sub_1016D1A84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C82D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D1AB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C82D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1016D1AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    v6 = *(_DWORD *)(v3 + 856);
    *(_DWORD *)buf = 67109632;
    v18 = v5;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,stopPositionRequest(instance,%d,fSessionId,%d)", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v3 + 880);
    v9 = *(_DWORD *)(v3 + 856);
    v13 = 1024;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,stopPositionRequest(instance,%d,fSessionId,%d)", &v12, 20, 67109632);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::endRildSession()::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return sub_101804CB0(a2, *(_DWORD *)(v3 + 856));
}

uint64_t sub_1016D1CC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D1D00()
{
}

void sub_1016D1D10()
{
  operator delete();
}

__n128 sub_1016D1D24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D1D5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1016D1D7C(uint64_t a1, uint64_t a2)
{
  sub_10180488C(a2, *(unsigned __int16 **)(a1 + 8), *(unsigned __int8 **)(a1 + 16));
}

uint64_t sub_1016D1D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D1DC8()
{
}

uint64_t sub_1016D1DD4(uint64_t a1)
{
  return sub_1016C1014(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1016D1DE8()
{
  operator delete();
}

__n128 sub_1016D1DFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C83D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D1E34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C83D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***sub_1016D1E54(uint64_t a1, uint64_t a2))()
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t (***result)();
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint8_t buf[4];
  _QWORD v28[237];
  int v29;
  uint64_t (**v30)();
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[10];

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v4 + 880);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 8);
    v10 = v7 + 12;
    LODWORD(v7) = *(_DWORD *)(v7 + 12);
    v9 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)buf = 67110144;
    LODWORD(v28[0]) = v6;
    WORD2(v28[0]) = 1024;
    *(_DWORD *)((char *)v28 + 6) = v6;
    WORD1(v28[1]) = 1024;
    HIDWORD(v28[1]) = v9;
    LOWORD(v28[2]) = 1024;
    *(_DWORD *)((char *)&v28[2] + 2) = v8;
    HIWORD(v28[2]) = 1024;
    LODWORD(v28[3]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildAssistanceDataNeeded,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v20 = *(_DWORD *)(v4 + 880);
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(v21 + 8);
    v24 = v21 + 12;
    LODWORD(v21) = *(_DWORD *)(v21 + 12);
    v23 = *(_DWORD *)(v24 + 4);
    LODWORD(v30) = 67110144;
    HIDWORD(v30) = v20;
    v31 = 1024;
    v32 = v20;
    v33 = 1024;
    v34 = v23;
    v35 = 1024;
    *(_DWORD *)v36 = v22;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,RildAssistanceDataNeeded,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d", &v30, 32);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handleAssistanceNeeded(const gnss::Emergency::Cplane::AssistanceNeededReport &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  LODWORD(v28[0]) = 0;
  BYTE4(v28[0]) = 0;
  v28[1] = -1;
  LODWORD(v28[2]) = -1;
  WORD2(v28[2]) = 0;
  *(_DWORD *)((char *)&v28[2] + 6) = -1;
  BYTE2(v28[3]) = -1;
  *(_QWORD *)((char *)&v28[3] + 3) = 0;
  *(_QWORD *)((char *)&v28[4] + 1) = 0;
  BYTE1(v28[5]) = -1;
  *(_QWORD *)((char *)&v28[5] + 2) = 0;
  v11 = (int *)&v28[13];
  v28[6] = 0;
  v12 = 116;
  LOBYTE(v28[7]) = -1;
  v13 = 266;
  BYTE4(v28[7]) = 0;
  do
  {
    *v11 = 5;
    *((_WORD *)v11 + 2) = 0;
    v14 = v12;
    *((_BYTE *)v11 + 6) = -1;
    do
    {
      v15 = &buf[v14];
      *v15 = -1;
      *((_DWORD *)v15 + 1) = -1;
      v14 += 8;
    }
    while (v15 + 8 != (uint8_t *)(v11 + 32));
    v11[32] = -1;
    *((_WORD *)v11 + 66) = -1;
    *(int *)((char *)v11 + 134) = -256;
    *(_QWORD *)((char *)v11 + 138) = 0;
    *((_QWORD *)v11 + 18) = 0;
    v11[38] = -1;
    v16 = v13;
    *((_BYTE *)v11 + 156) = -1;
    do
    {
      v17 = &buf[v16];
      *v17 = -1;
      *((_WORD *)v17 + 1) = -1;
      v16 += 4;
    }
    while (v17 + 4 != (uint8_t *)((char *)v11 + 218));
    *(int *)((char *)v11 + 218) = -1;
    v11 += 56;
    v12 += 224;
    v13 += 224;
  }
  while (v11 != &v29);
  *(_DWORD *)buf = *(_DWORD *)(v4 + 880) != 0;
  memcpy(v28, *(const void **)(a1 + 16), sizeof(v28));
  sub_100197040();
  if ((sub_10075BBF4() & 1) != 0
    || (sub_100197040(), result = (uint64_t (***)())sub_10075B95C(), (_DWORD)result))
  {
    result = *(uint64_t (****)())(a2 + 32);
    if (result)
    {
      v30 = off_1021C84D8;
      *(_QWORD *)&v36[2] = &v30;
      sub_1016D2280((uint64_t)result, 48, (uint64_t)buf, 34, (uint64_t)&v30);
      result = *(uint64_t (****)())&v36[2];
      if (*(uint64_t (****)())&v36[2] == &v30)
      {
        v19 = 4;
        result = &v30;
      }
      else
      {
        if (!*(_QWORD *)&v36[2])
          return result;
        v19 = 5;
      }
      return (uint64_t (***)())(*result)[v19]();
    }
  }
  return result;
}

void sub_1016D21F8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 88);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 112);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D2238(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D2274()
{
}

_QWORD *sub_1016D2280(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  _OWORD v13[119];

  memset(v13, 0, 512);
  sub_1017A0DA4(a3, (uint64_t)v13);
  sub_100270E34((uint64_t)v11, a5);
  sub_1016D23D0(a1, a2, (char *)v13, a4, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016D2390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016D23D0(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  uint64_t v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016D354C;
    block[3] = &unk_1021C8498;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758A8C((AriMsg *)v28, a3))
  {
    v45 = -1;
    v46 = -1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016D296C;
  v35[3] = &unk_1021C8468;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016D2900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016D296C(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  v4 = *(NSObject ***)(a1 + 32);
  *((_QWORD *)&v44 + 1) = -1;
  v45 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v65 = Gmid;
    v66 = 1024;
    v67 = v7;
    v68 = 1024;
    v69 = (v8 >> 15) & 0x3FF;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v9 >> 26;
    v74 = 1024;
    v75 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v52 = 67110400;
    v53 = v27;
    v54 = 1024;
    v55 = v28 >> 26;
    v56 = 1024;
    v57 = (v29 >> 15) & 0x3FF;
    v58 = 1024;
    v59 = v30;
    v60 = 1024;
    v61 = v30 >> 26;
    v62 = 1024;
    v63 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v52, 38, v43, DWORD1(v44), HIDWORD(v44), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v65 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v52 = 67109120;
      v53 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v52);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v52, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_101759D64(a2, &v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v52, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v52, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016D3488;
  block[3] = &unk_1021C8438;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v44;
  v51 = v45;
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67240192;
      v53 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v52, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67109120;
      v53 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v52);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016D343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D3488(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016D34CC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016D34D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D350C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016D3518(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D354C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBILpMeasurePositionAssistanceRequestRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionAssistanceRequestRspAckCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016D3738()
{
  operator delete();
}

_QWORD *sub_1016D374C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C84D8;
  return result;
}

void sub_1016D3770(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C84D8;
}

uint64_t sub_1016D378C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D37C8()
{
}

void sub_1016D37D8()
{
  operator delete();
}

__n128 sub_1016D37EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D3824(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_1016D3844(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  _QWORD *result;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  unsigned int v16[2];
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[8];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t *v27;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  v16[0] = *(_DWORD *)(v5 + 880) != 0;
  v16[1] = *v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(v5 + 880);
    v8 = **(_DWORD **)(a1 + 16);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v7;
    v23 = 1024;
    v24 = v7;
    v25 = 1024;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,Fta1xAssistanceNeeded,instance,%d,networkType,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v11 = *(_DWORD *)(v5 + 880);
    v12 = **(_DWORD **)(a1 + 16);
    v17[0] = 67109632;
    v17[1] = v11;
    v18 = 1024;
    v19 = v11;
    v20 = 1024;
    v21 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,Fta1xAssistanceNeeded,instance,%d,networkType,%d", v17, 20, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handleFta1xAssistanceNeeded(const gnss::Emergency::Cplane::CellFTAssistanceRequest &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  sub_100197040();
  result = (_QWORD *)sub_10075BBF4();
  if ((_DWORD)result)
  {
    result = *(_QWORD **)(a2 + 32);
    if (result)
    {
      *(_QWORD *)buf = off_1021C8678;
      v27 = buf;
      sub_1016D3B44((uint64_t)result, 58, v16, 44, (uint64_t)buf);
      result = v27;
      if (v27 == buf)
      {
        v10 = 4;
        result = buf;
      }
      else
      {
        if (!v27)
          return result;
        v10 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
    }
  }
  return result;
}

void sub_1016D3ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D3AFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D3B38()
{
}

_QWORD *sub_1016D3B44(uint64_t a1, int a2, unsigned int *a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;

  v11 = sub_1017A10CC(a3);
  sub_100270E34((uint64_t)v12, a5);
  sub_1016D3C48(a1, a2, (char *)&v11, a4, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v10))(result);
}

void sub_1016D3C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016D3C48(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[72];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  _DWORD v43[4];
  uint8_t buf[8];
  __int16 v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016D4DBC;
    block[3] = &unk_1021C8638;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758C68((AriMsg *)v28, a3))
  {
    v40 = 0x7FFFFFFFFFFFFFFFLL;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v43[0] = 67240192;
      v43[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v43, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, buf, &v40);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v45 = 1024;
    v46 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    LODWORD(v40) = 67109376;
    HIDWORD(v40) = v24 >> 26;
    v41 = 1024;
    v42 = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", &v40, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016D41E8;
  v35[3] = &unk_1021C8608;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016D417C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016D41E8(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  void **block;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  _BYTE v50[24];
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  int v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  int v77;

  v4 = *(NSObject ***)(a1 + 32);
  v45 = 0x7FFFFFFFFFFFFFFFLL;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v67 = Gmid;
    v68 = 1024;
    v69 = v7;
    v70 = 1024;
    v71 = (v8 >> 15) & 0x3FF;
    v72 = 1024;
    v73 = v9;
    v74 = 1024;
    v75 = v9 >> 26;
    v76 = 1024;
    v77 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v54 = 67110400;
    v55 = v27;
    v56 = 1024;
    v57 = v28 >> 26;
    v58 = 1024;
    v59 = (v29 >> 15) & 0x3FF;
    v60 = 1024;
    v61 = v30;
    v62 = 1024;
    v63 = v30 >> 26;
    v64 = 1024;
    v65 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v54, 38, v43, v45, (_DWORD)block, v47);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v67 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v54 = 67109120;
      v55 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v54);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v54, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_10175A410(a2, &v45))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v54, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v54) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v54, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block = _NSConcreteStackBlock;
  v47 = 3321888768;
  v48 = sub_1016D4CF8;
  v49 = &unk_1021C85D8;
  v21 = v50;
  sub_100270E34((uint64_t)v50, a1 + 40);
  v52 = v17;
  v53 = v45;
  dispatch_async(v20, &block);
  v44 = 0;
  if (AriMsg::extractCtx(a2, &v44) || v44 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v67 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v54 = 67240192;
      v55 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v54, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v67 = v44;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v54 = 67109120;
      v55 = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v54);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v51 == v50)
  {
    v25 = 4;
  }
  else
  {
    if (!v51)
      return;
    v25 = 5;
    v21 = v51;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016D4CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  _QWORD *v20;
  uint64_t v22;

  if (a20 == v20)
  {
    v22 = 4;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v22 = 5;
    v20 = a20;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D4CF8(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016D4D3C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016D4D48(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D4D7C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016D4D88(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D4DBC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v10[0] = 67109120;
    v10[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v10);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsCellTimeStampReqParam, TResp = gnss::Emergency::Cplane::CellFTAssistanceRequestAckCb]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, buf, &v9);
}

void sub_1016D4FA4()
{
  operator delete();
}

_QWORD *sub_1016D4FB8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8678;
  return result;
}

void sub_1016D4FDC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8678;
}

uint64_t sub_1016D4FF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D5034()
{
}

void sub_1016D5044()
{
  operator delete();
}

_QWORD *sub_1016D5058(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8718;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D508C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8718;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_1016D50A8(uint64_t a1, uint64_t a2))()
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t (***result)();
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t (**v19)();
  int v20;
  uint64_t (***v21)();
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  _DWORD v26[78];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    v6 = *(_DWORD **)(v3 + 2296);
    v8 = v6[3];
    v7 = v6[4];
    v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)buf = 67110400;
    v25 = v5;
    LOWORD(v26[0]) = 1024;
    *(_DWORD *)((char *)v26 + 2) = v5;
    HIWORD(v26[1]) = 1024;
    v26[2] = v7;
    LOWORD(v26[3]) = 1024;
    *(_DWORD *)((char *)&v26[3] + 2) = v9;
    HIWORD(v26[4]) = 1024;
    v26[5] = v8;
    LOWORD(v26[6]) = 1024;
    *(_DWORD *)((char *)&v26[6] + 2) = (_DWORD)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v13 = *(_DWORD *)(v3 + 880);
    v14 = *(_DWORD **)(v3 + 2296);
    v15 = v14[4];
    v16 = v14[2];
    LODWORD(v14) = *v14;
    LOWORD(v20) = 1024;
    HIWORD(v20) = v13;
    LOWORD(v21) = HIWORD(v16);
    WORD1(v21) = 1024;
    v22 = 1024;
    v23 = (int)v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", &v19, 38, 67110400, v20, v15, (_DWORD)v21);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  *(_DWORD *)buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v26, *(const void **)(v3 + 2296), sizeof(v26));
  sub_100197040();
  if (((sub_10075BBF4() & 1) != 0 || (sub_100197040(), sub_10075B95C()))
    && (v10 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v19 = off_1021C8788;
    v21 = &v19;
    sub_1016D0514(v10, 49, buf, 35, (uint64_t)&v19);
    result = v21;
    if (v21 == &v19)
    {
      v12 = 4;
      result = &v19;
    }
    else
    {
      if (!v21)
        return result;
      v12 = 5;
    }
    return (uint64_t (***)())(*result)[v12]();
  }
  else
  {
    sub_100197040();
    result = (uint64_t (***)())sub_10075BE08();
    if ((_DWORD)result)
    {
      result = *(uint64_t (****)())(a2 + 40);
      if (result)
        return (uint64_t (***)())sub_101690094((uint64_t)result, buf);
    }
  }
  return result;
}

void sub_1016D538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D53CC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D5408()
{
}

void sub_1016D5418()
{
  operator delete();
}

_QWORD *sub_1016D542C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8788;
  return result;
}

void sub_1016D5450(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8788;
}

uint64_t sub_1016D546C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D54A8()
{
}

void sub_1016D54B8()
{
  operator delete();
}

_QWORD *sub_1016D54CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8818;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D5500(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8818;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_1016D551C(uint64_t a1, uint64_t a2))()
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t (***result)();
  uint64_t v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  _DWORD *v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint64_t (**v27)();
  int v28;
  uint64_t (***v29)();
  __int16 v30;
  int v31;
  uint8_t buf[4];
  int v33;
  _QWORD v34[204];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    *(_DWORD *)buf = 67109120;
    v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = *(_DWORD *)(v3 + 880);
    LODWORD(v27) = 67109120;
    HIDWORD(v27) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", &v27);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(v3 + 880);
    v8 = *(_DWORD **)(v3 + 2312);
    v10 = v8[3];
    v9 = v8[4];
    v11 = v8[2];
    LODWORD(v8) = *v8;
    *(_DWORD *)buf = 67110400;
    v33 = v7;
    LOWORD(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 2) = v7;
    HIWORD(v34[0]) = 1024;
    LODWORD(v34[1]) = v9;
    WORD2(v34[1]) = 1024;
    *(_DWORD *)((char *)&v34[1] + 6) = v11;
    WORD1(v34[2]) = 1024;
    HIDWORD(v34[2]) = v10;
    LOWORD(v34[3]) = 1024;
    *(_DWORD *)((char *)&v34[3] + 2) = (_DWORD)v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v21 = *(_DWORD *)(v3 + 880);
    v22 = *(_DWORD **)(v3 + 2312);
    v23 = v22[4];
    v24 = v22[2];
    LODWORD(v22) = *v22;
    LOWORD(v28) = 1024;
    HIWORD(v28) = v21;
    LOWORD(v29) = HIWORD(v24);
    WORD1(v29) = 1024;
    v30 = 1024;
    v31 = (int)v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", &v27, 38, 67110400, v28, v23, (_DWORD)v29);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_Session(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  LODWORD(v34[0]) = 0;
  memset(&v34[1], 255, 20);
  v12 = 36;
  BYTE4(v34[0]) = 0;
  do
  {
    v13 = &buf[v12];
    *(_WORD *)v13 = 0x7FFF;
    *(_DWORD *)(v13 + 2) = -1;
    *(_DWORD *)(v13 + 5) = -1;
    *(_QWORD *)(v13 + 12) = 0xFFFFFFFF00000004;
    v13[20] = -1;
    v12 += 24;
  }
  while (v13 + 24 != (uint8_t *)((char *)&v34[51] + 4));
  HIDWORD(v34[51]) = 0;
  v34[52] = -1;
  LODWORD(v34[53]) = 33619967;
  WORD2(v34[53]) = -1;
  HIDWORD(v34[56]) = -1;
  LOBYTE(v34[57]) = -1;
  memset(&v34[54], 255, 17);
  BYTE4(v34[57]) = -1;
  *(_DWORD *)((char *)&v34[58] + 7) = -1;
  v34[58] = -1;
  LODWORD(v34[60]) = 4;
  *(_QWORD *)((char *)&v34[60] + 4) = -1;
  LODWORD(v34[62]) = 0;
  HIDWORD(v34[65]) = -1;
  v34[66] = -1;
  memset(&v34[63], 255, 18);
  LOBYTE(v34[67]) = -1;
  HIDWORD(v34[68]) = -1;
  v34[69] = -1;
  *(_QWORD *)((char *)&v34[67] + 2) = -1;
  LOWORD(v34[70]) = -1;
  HIDWORD(v34[70]) = -1;
  LOWORD(v34[71]) = -1;
  LODWORD(v34[74]) = -1;
  *(_QWORD *)((char *)&v34[71] + 4) = -1;
  *(_QWORD *)((char *)&v34[72] + 4) = -1;
  WORD2(v34[73]) = -1;
  WORD2(v34[74]) = -129;
  LODWORD(v34[75]) = -1;
  LOBYTE(v34[76]) = -1;
  HIDWORD(v34[76]) = 5;
  LOWORD(v34[77]) = -1;
  BYTE2(v34[77]) = -1;
  v14 = 628;
  do
  {
    v15 = &buf[v14];
    *(_DWORD *)v15 = -32769;
    v15[4] = -1;
    *((_QWORD *)v15 + 1) = 0xFF00000004;
    *((_WORD *)v15 + 8) = -1;
    *((_DWORD *)v15 + 5) = -1;
    v14 += 24;
  }
  while (v15 + 24 != (uint8_t *)((char *)&v34[173] + 4));
  LODWORD(v34[174]) = -1;
  BYTE4(v34[174]) = 0;
  *(_DWORD *)buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v34, *(const void **)(v3 + 2312), 0x575uLL);
  sub_100197040();
  result = (uint64_t (***)())sub_10075BBF4();
  if ((_DWORD)result)
  {
    result = *(uint64_t (****)())(a2 + 32);
    if (result)
    {
      v27 = off_1021C8888;
      v29 = &v27;
      sub_1016CEE28((uint64_t)result, 51, (uint64_t)buf, 37, (uint64_t)&v27);
      result = v29;
      if (v29 == &v27)
      {
        v17 = 4;
        result = &v27;
      }
      else
      {
        if (!v29)
          return result;
        v17 = 5;
      }
      return (uint64_t (***)())(*result)[v17]();
    }
  }
  return result;
}

void sub_1016D5A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D5ACC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D5B08()
{
}

void sub_1016D5B18()
{
  operator delete();
}

_QWORD *sub_1016D5B2C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8888;
  return result;
}

void sub_1016D5B50(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8888;
}

uint64_t sub_1016D5B6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D5BA8()
{
}

void sub_1016D5BB8()
{
  operator delete();
}

_QWORD *sub_1016D5BCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8918;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D5C00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8918;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_1016D5C1C(uint64_t a1, uint64_t a2))()
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  uint64_t (***result)();
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  uint64_t (**v18)();
  int v19;
  uint64_t (***v20)();
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  _DWORD v25[78];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    v6 = *(_DWORD **)(v3 + 2296);
    v8 = v6[3];
    v7 = v6[4];
    v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)buf = 67110400;
    v24 = v5;
    LOWORD(v25[0]) = 1024;
    *(_DWORD *)((char *)v25 + 2) = v5;
    HIWORD(v25[1]) = 1024;
    v25[2] = v7;
    LOWORD(v25[3]) = 1024;
    *(_DWORD *)((char *)&v25[3] + 2) = v9;
    HIWORD(v25[4]) = 1024;
    v25[5] = v8;
    LOWORD(v25[6]) = 1024;
    *(_DWORD *)((char *)&v25[6] + 2) = (_DWORD)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v12 = *(_DWORD *)(v3 + 880);
    v13 = *(_DWORD **)(v3 + 2296);
    v14 = v13[4];
    v15 = v13[2];
    LODWORD(v13) = *v13;
    LOWORD(v19) = 1024;
    HIWORD(v19) = v12;
    LOWORD(v20) = HIWORD(v15);
    WORD1(v20) = 1024;
    v21 = 1024;
    v22 = (int)v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,RildPositionResponse,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", &v18, 38, 67110400, v19, v14, (_DWORD)v20);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_DWORD *)buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v25, *(const void **)(v3 + 2296), sizeof(v25));
  sub_100197040();
  if ((sub_10075BBF4() & 1) != 0
    || (sub_100197040(), result = (uint64_t (***)())sub_10075B95C(), (_DWORD)result))
  {
    result = *(uint64_t (****)())(a2 + 32);
    if (result)
    {
      v18 = off_1021C8988;
      v20 = &v18;
      sub_1016D0514((uint64_t)result, 49, buf, 35, (uint64_t)&v18);
      result = v20;
      if (v20 == &v18)
      {
        v11 = 4;
        result = &v18;
      }
      else
      {
        if (!v20)
          return result;
        v11 = 5;
      }
      return (uint64_t (***)())(*result)[v11]();
    }
  }
  return result;
}

void sub_1016D5EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D5F20(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D5F5C()
{
}

void sub_1016D5F6C()
{
  operator delete();
}

_QWORD *sub_1016D5F80()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8988;
  return result;
}

void sub_1016D5FA4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8988;
}

uint64_t sub_1016D5FC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D5FFC()
{
}

void sub_1016D600C()
{
  operator delete();
}

_QWORD *sub_1016D6020(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8A18;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D6054(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8A18;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1016D6070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t *v9;
  _QWORD *result;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint8_t buf[4];
  int v18;
  _QWORD v19[204];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    *(_DWORD *)buf = 67109120;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v12 = *(_DWORD *)(v3 + 880);
    LODWORD(v15[0]) = 67109120;
    HIDWORD(v15[0]) = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane, Measurement report to ICE", v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::handler_RILD_SessionPeriodic(CLNilrCplane::Event)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  LODWORD(v19[0]) = 0;
  memset(&v19[1], 255, 20);
  v6 = 36;
  BYTE4(v19[0]) = 0;
  do
  {
    v7 = &buf[v6];
    *(_WORD *)v7 = 0x7FFF;
    *(_DWORD *)(v7 + 2) = -1;
    *(_DWORD *)(v7 + 5) = -1;
    *(_QWORD *)(v7 + 12) = 0xFFFFFFFF00000004;
    v7[20] = -1;
    v6 += 24;
  }
  while (v7 + 24 != (uint8_t *)((char *)&v19[51] + 4));
  HIDWORD(v19[51]) = 0;
  v19[52] = -1;
  LODWORD(v19[53]) = 33619967;
  WORD2(v19[53]) = -1;
  HIDWORD(v19[56]) = -1;
  LOBYTE(v19[57]) = -1;
  memset(&v19[54], 255, 17);
  BYTE4(v19[57]) = -1;
  *(_DWORD *)((char *)&v19[58] + 7) = -1;
  v19[58] = -1;
  LODWORD(v19[60]) = 4;
  *(_QWORD *)((char *)&v19[60] + 4) = -1;
  LODWORD(v19[62]) = 0;
  HIDWORD(v19[65]) = -1;
  v19[66] = -1;
  memset(&v19[63], 255, 18);
  LOBYTE(v19[67]) = -1;
  HIDWORD(v19[68]) = -1;
  v19[69] = -1;
  *(_QWORD *)((char *)&v19[67] + 2) = -1;
  LOWORD(v19[70]) = -1;
  HIDWORD(v19[70]) = -1;
  LOWORD(v19[71]) = -1;
  LODWORD(v19[74]) = -1;
  *(_QWORD *)((char *)&v19[71] + 4) = -1;
  *(_QWORD *)((char *)&v19[72] + 4) = -1;
  WORD2(v19[73]) = -1;
  WORD2(v19[74]) = -129;
  LODWORD(v19[75]) = -1;
  LOBYTE(v19[76]) = -1;
  HIDWORD(v19[76]) = 5;
  LOWORD(v19[77]) = -1;
  BYTE2(v19[77]) = -1;
  v8 = 628;
  do
  {
    v9 = &buf[v8];
    *(_DWORD *)v9 = -32769;
    v9[4] = -1;
    *((_QWORD *)v9 + 1) = 0xFF00000004;
    *((_WORD *)v9 + 8) = -1;
    *((_DWORD *)v9 + 5) = -1;
    v8 += 24;
  }
  while (v9 + 24 != (uint8_t *)((char *)&v19[173] + 4));
  LODWORD(v19[174]) = -1;
  BYTE4(v19[174]) = 0;
  *(_DWORD *)buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v19, *(const void **)(v3 + 2312), 0x575uLL);
  sub_100197040();
  result = (_QWORD *)sub_10075BBF4();
  if ((_DWORD)result)
  {
    result = *(_QWORD **)(a2 + 32);
    if (result)
    {
      v15[0] = off_1021C8A88;
      v16 = v15;
      sub_1016CEE28((uint64_t)result, 51, (uint64_t)buf, 37, (uint64_t)v15);
      result = v16;
      if (v16 == v15)
      {
        v11 = 4;
        result = v15;
      }
      else
      {
        if (!v16)
          return result;
        v11 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
    }
  }
  return result;
}

void sub_1016D6418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D6458(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D6494()
{
}

void sub_1016D64A4()
{
  operator delete();
}

_QWORD *sub_1016D64B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C8A88;
  return result;
}

void sub_1016D64DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C8A88;
}

uint64_t sub_1016D64F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D6534()
{
}

void sub_1016D6544()
{
  operator delete();
}

__n128 sub_1016D6558(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8B18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D6590(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8B18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1016D65B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v4 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModel &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_101805304(a2, *(_DWORD **)(a1 + 16));
}

uint64_t sub_1016D677C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D67B8()
{
}

void sub_1016D67C8()
{
  operator delete();
}

__n128 sub_1016D67DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8B98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D6814(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8B98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1016D6834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v4 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceReferenceTime(const gnss::Emergency::Cplane::GpsReferenceTime &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_101804E84(a2, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1016D6A00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D6A3C()
{
}

void sub_1016D6A4C()
{
  operator delete();
}

__n128 sub_1016D6A60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D6A98(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1016D6AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v4 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceReferenceLocation(const gnss::Emergency::Cplane::ReferenceLocation &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_1018050C4(a2, *(unsigned __int8 **)(a1 + 16));
}

uint64_t sub_1016D6C84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D6CC0()
{
}

void sub_1016D6CD0()
{
  operator delete();
}

__n128 sub_1016D6CE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D6D1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1016D6D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v4 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,device.setAssistance()", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistance &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_101805544(a2, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1016D6F08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D6F44()
{
}

void sub_1016D6F54()
{
  operator delete();
}

__n128 sub_1016D6F68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8D18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D6FA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8D18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1016D6FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v4 + 880);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,device.injectFt1xAssistance()", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v8 = *(_DWORD *)(v4 + 880);
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,device.injectFt1xAssistance()", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::inject_AssistanceFTA1x(const gnss::Emergency::Cplane::CellFTAssistance &)::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_101805784(a2, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1016D718C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D71C8()
{
}

void sub_1016D71D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1016D71E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1016D7224(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1016D7238(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1016D7274(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1016D7288(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1016D72C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1016D72D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1016D7314(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1016D7328(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021C8ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1016D7364(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1016C2ABC(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1016D73E4()
{
  operator delete();
}

_QWORD *sub_1016D73F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C8F28;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D742C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C8F28;
  a2[1] = v2;
  return result;
}

void sub_1016D7448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100197040();
  if ((sub_10075BBF4() & 1) != 0 || (sub_100197040(), sub_10075B95C()))
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
      sub_10183B874(v4, **(_DWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40) != 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48) != 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 52) != 0);
  }
}

uint64_t sub_1016D74BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D74F8()
{
}

void sub_1016D7508()
{
  operator delete();
}

__n128 sub_1016D751C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021C8FA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1016D7554(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C8FA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_1016D7574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[8];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[10];
  __int16 v35;
  int v36;

  v4 = *(_QWORD *)(a1 + 16);
  **(_DWORD **)(a1 + 8) = *(_DWORD *)(v4 + 880) != 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v4 + 880);
    v7 = *(int **)(a1 + 8);
    v9 = v7[3];
    v8 = v7[4];
    v10 = *v7;
    v12 = v7 + 1;
    LODWORD(v7) = v7[1];
    v11 = v12[1];
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v6;
    v29 = 1024;
    v30 = v10;
    v31 = 1024;
    v32 = v8;
    v33 = 1024;
    *(_DWORD *)v34 = v11;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = v9;
    v35 = 1024;
    v36 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,NilrCPlane,reportWlanMeasurementsToModem,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = *(int **)(a1 + 8);
    v17 = v16[4];
    v18 = *v16;
    v20 = v16 + 1;
    LODWORD(v16) = v16[1];
    v19 = v20[1];
    LOWORD(v24) = 1024;
    HIWORD(v24) = v18;
    LOWORD(v25) = HIWORD(v19);
    HIWORD(v25) = 1024;
    v26 = 1024;
    v27 = (int)v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,NilrCPlane,reportWlanMeasurementsToModem,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", &v23, 38, 67110400, v24, v17, v25);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::reportWlanMeasurements(gnss::Emergency::Cplane::WlanMeasReport &)::(anonymous class)::operator()(CLModemController &) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  sub_100197040();
  result = (_QWORD *)sub_10075BBF4();
  if ((_DWORD)result)
  {
    result = *(_QWORD **)(a2 + 32);
    if (result)
    {
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)buf = off_1021C90A8;
      *(_QWORD *)&v34[2] = buf;
      sub_1016D78AC((uint64_t)result, 60, v14, 46, (uint64_t)buf);
      result = *(_QWORD **)&v34[2];
      if (*(uint8_t **)&v34[2] == buf)
      {
        v15 = 4;
        result = buf;
      }
      else
      {
        if (!*(_QWORD *)&v34[2])
          return result;
        v15 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
    }
  }
  return result;
}

void sub_1016D7824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D7864(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D78A0()
{
}

_QWORD *sub_1016D78AC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _OWORD v11[67];
  _BYTE v12[24];
  _BYTE *v13;

  memset(v11, 0, 512);
  sub_1017A4014(a3, v11);
  sub_100270E34((uint64_t)v12, a5);
  sub_1016D79FC(a1, a2, v11, a4, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016D79BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016D79FC(uint64_t a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  uint64_t v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016D8B78;
    block[3] = &unk_1021C9068;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758CC0((AriMsg *)v28, a3))
  {
    v45 = -1;
    v46 = -1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016D7F98;
  v35[3] = &unk_1021C9038;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016D7F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016D7F98(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  v4 = *(NSObject ***)(a1 + 32);
  *((_QWORD *)&v44 + 1) = -1;
  v45 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v65 = Gmid;
    v66 = 1024;
    v67 = v7;
    v68 = 1024;
    v69 = (v8 >> 15) & 0x3FF;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v9 >> 26;
    v74 = 1024;
    v75 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v52 = 67110400;
    v53 = v27;
    v54 = 1024;
    v55 = v28 >> 26;
    v56 = 1024;
    v57 = (v29 >> 15) & 0x3FF;
    v58 = 1024;
    v59 = v30;
    v60 = 1024;
    v61 = v30 >> 26;
    v62 = 1024;
    v63 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v52, 38, v43, DWORD1(v44), HIDWORD(v44), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v65 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v52 = 67109120;
      v53 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v52);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v52, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_10175A9A8(a2, (uint64_t)&v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v52, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v52, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016D8AB4;
  block[3] = &unk_1021C9008;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v44;
  v51 = v45;
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67240192;
      v53 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v52, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67109120;
      v53 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v52);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016D8A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D8AB4(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016D8AF8(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016D8B04(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D8B38(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016D8B44(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016D8B78(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpWlanMeasurementRspParam, TResp = gnss::Emergency::Cplane::WlanMeasRspAckCbParam]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016D8D64()
{
  operator delete();
}

_QWORD *sub_1016D8D78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C90A8;
  return result;
}

void sub_1016D8D9C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C90A8;
}

uint64_t sub_1016D8DB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016D8DF4()
{
}

void sub_1016D8E04()
{
  operator delete();
}

_QWORD *sub_1016D8E18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9148;
  result[1] = v3;
  return result;
}

uint64_t sub_1016D8E4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9148;
  a2[1] = v2;
  return result;
}

uint64_t (***sub_1016D8E68(uint64_t a1, uint64_t a2))()
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t (***result)();
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t (**v20)();
  int v21;
  uint64_t (***v22)();
  __int16 v23;
  int v24;
  uint8_t buf[4];
  _QWORD v26[204];

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(v3 + 880);
    v6 = *(_DWORD **)(v3 + 2328);
    v8 = v6[3];
    v7 = v6[4];
    v9 = v6[2];
    LODWORD(v6) = *v6;
    *(_DWORD *)buf = 67110400;
    LODWORD(v26[0]) = v5;
    WORD2(v26[0]) = 1024;
    *(_DWORD *)((char *)v26 + 6) = v5;
    WORD1(v26[1]) = 1024;
    HIDWORD(v26[1]) = v7;
    LOWORD(v26[2]) = 1024;
    *(_DWORD *)((char *)&v26[2] + 2) = v9;
    HIWORD(v26[2]) = 1024;
    LODWORD(v26[3]) = v8;
    WORD2(v26[3]) = 1024;
    *(_DWORD *)((char *)&v26[3] + 6) = (_DWORD)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#cp,reportMeasurementsWithEstimate,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v14 = *(_DWORD *)(v3 + 880);
    v15 = *(_DWORD **)(v3 + 2328);
    v16 = v15[4];
    v17 = v15[2];
    LODWORD(v15) = *v15;
    LOWORD(v21) = 1024;
    HIWORD(v21) = v14;
    LOWORD(v22) = HIWORD(v17);
    WORD1(v22) = 1024;
    v23 = 1024;
    v24 = (int)v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ins%d,#nilr,#cp,reportMeasurementsWithEstimate,instance,%d,sessionId,%d,sessionProtocol,%d,posProtocol,%d,result,%d", &v20, 38, 67110400, v21, v16, (_DWORD)v22);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "auto CLNilrCplane::reportMeasurementsWithEstimate()::(anonymous class)::operator()(CLModemController &) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  LODWORD(v26[0]) = 0;
  memset(&v26[1], 255, 20);
  v10 = 32;
  BYTE4(v26[0]) = 0;
  do
  {
    v11 = &buf[v10];
    *(_WORD *)v11 = 0x7FFF;
    *(_DWORD *)(v11 + 2) = -1;
    *(_DWORD *)(v11 + 5) = -1;
    *(_QWORD *)(v11 + 12) = 0xFFFFFFFF00000004;
    v11[20] = -1;
    v10 += 24;
  }
  while (v11 + 24 != (uint8_t *)((char *)&v26[51] + 4));
  *(_QWORD *)((char *)&v26[51] + 4) = 0xFFFFFFFF00000000;
  *(_QWORD *)((char *)&v26[52] + 4) = 0x200FFFFFFFFFFFFLL;
  WORD2(v26[53]) = -1;
  HIDWORD(v26[56]) = -1;
  LOBYTE(v26[57]) = -1;
  memset(&v26[54], 255, 17);
  BYTE4(v26[57]) = -1;
  v26[58] = -1;
  *(_DWORD *)((char *)&v26[58] + 7) = -1;
  LODWORD(v26[61]) = -1;
  *(_DWORD *)((char *)&v26[60] + 3) = -1;
  *(_QWORD *)((char *)&v26[59] + 4) = -1;
  BYTE4(v26[61]) = 0;
  *(_DWORD *)((char *)&v26[61] + 6) = -1;
  BYTE2(v26[62]) = -1;
  BYTE4(v26[62]) = 0;
  LODWORD(v26[63]) = -1;
  WORD2(v26[63]) = -1;
  LOBYTE(v26[64]) = 0;
  WORD1(v26[64]) = -1;
  BYTE4(v26[64]) = -1;
  LODWORD(v26[65]) = 0;
  BYTE4(v26[65]) = 0;
  *(_DWORD *)buf = *(_DWORD *)(v3 + 880) != 0;
  memcpy(v26, *(const void **)(v3 + 2328), 0x20DuLL);
  sub_100197040();
  result = (uint64_t (***)())sub_10075BBF4();
  if ((_DWORD)result)
  {
    result = *(uint64_t (****)())(a2 + 32);
    if (result)
    {
      v20 = off_1021C9248;
      v22 = &v20;
      sub_1016D9290((uint64_t)result, 61, (uint64_t)buf, 47, (uint64_t)&v20);
      result = v22;
      if (v22 == &v20)
      {
        v13 = 4;
        result = &v20;
      }
      else
      {
        if (!v22)
          return result;
        v13 = 5;
      }
      return (uint64_t (***)())(*result)[v13]();
    }
  }
  return result;
}

void sub_1016D9208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016D9248(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1016D9284()
{
}

_QWORD *sub_1016D9290(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v10;
  _OWORD v11[34];
  _BYTE v12[24];
  _BYTE *v13;

  memset(v11, 0, 512);
  sub_1017A44D4(a3, (uint64_t)v11);
  sub_100270E34((uint64_t)v12, a5);
  sub_1016D93E0(a1, a2, (uint64_t)v11, a4, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016D93A0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016D93E0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v9;
  uint64_t *v10;
  NSObject *v11;
  unsigned int Gmid;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint8_t *v27;
  _BYTE v28[3];
  int v29;
  int v30;
  _QWORD block[4];
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  _QWORD v35[5];
  _BYTE v36[24];
  _BYTE *v37;
  int v38;
  int v39;
  _DWORD v40[4];
  uint8_t buf[8];
  __int16 v42;
  int v43;
  _DWORD v44[2];
  uint64_t v45;
  int v46;

  v29 = a4;
  v30 = a2;
  if (!sub_10183C77C(a1, a2, a4))
  {
    v16 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1016DA55C;
    block[3] = &unk_1021C9208;
    v34 = a2;
    sub_100270E34((uint64_t)v32, a5);
    dispatch_async(v16, block);
    v17 = v33;
    if (v33 == v32)
    {
      v18 = 4;
      v17 = v32;
    }
    else
    {
      if (!v33)
        return;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    return;
  }
  *(_QWORD *)buf = &v29;
  v9 = *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8);
  *(_QWORD *)buf = &v30;
  v10 = sub_100136FD4((uint64_t **)(a1 + 184), &v30, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
  AriMsg::AriMsg((AriMsg *)v28, *((_DWORD *)v10 + 8));
  if (!sub_101758F40((AriMsg *)v28, a3))
  {
    v45 = -1;
    v46 = -1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v40[0] = 67240192;
      v40[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v40, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    *(_DWORD *)buf = 3;
    v20 = *(_QWORD *)(a5 + 24);
    if (!v20)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint8_t *, _DWORD *))(*(_QWORD *)v20 + 48))(v20, buf, v44);
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid((AriMsg *)v28);
    v13 = AriMsg::getGmid((AriMsg *)v28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Gmid >> 26;
    v42 = 1024;
    v43 = (v13 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v23 = qword_1022A0078;
    v24 = AriMsg::getGmid((AriMsg *)v28);
    v25 = AriMsg::getGmid((AriMsg *)v28);
    v44[0] = 67109376;
    v44[1] = v24 >> 26;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = (v25 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", v44, 14);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3321888768;
  v35[2] = sub_1016D997C;
  v35[3] = &unk_1021C91D8;
  v35[4] = a1;
  v38 = v9;
  v39 = v29;
  v14 = v36;
  sub_100270E34((uint64_t)v36, a5);
  sub_101713A2C(*(_QWORD **)(a1 + 144), (uint64_t)v28, (uint64_t)v35);
  if (v37 == v36)
  {
    v15 = 4;
    goto LABEL_24;
  }
  if (v37)
  {
    v15 = 5;
    v14 = v37;
LABEL_24:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
LABEL_25:
  AriMsg::~AriMsg((AriMsg *)v28);
}

void sub_1016D9910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_1016D997C(uint64_t a1, AriMsg *a2)
{
  NSObject **v4;
  NSObject *v5;
  int Gmid;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  NSObject *v22;
  BOOL v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  int v45;
  _QWORD block[4];
  _BYTE v47[24];
  _BYTE *v48;
  int v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  int v75;

  v4 = *(NSObject ***)(a1 + 32);
  *((_QWORD *)&v44 + 1) = -1;
  v45 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    Gmid = AriMsg::getGmid(a2);
    v7 = AriMsg::getGmid(a2) >> 26;
    v8 = AriMsg::getGmid(a2);
    v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110400;
    v65 = Gmid;
    v66 = 1024;
    v67 = v7;
    v68 = 1024;
    v69 = (v8 >> 15) & 0x3FF;
    v70 = 1024;
    v71 = v9;
    v72 = 1024;
    v73 = v9 >> 26;
    v74 = 1024;
    v75 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v26 = qword_1022A0078;
    v27 = AriMsg::getGmid(a2);
    v28 = AriMsg::getGmid(a2);
    v29 = AriMsg::getGmid(a2);
    v30 = *(_DWORD *)(a1 + 72);
    v52 = 67110400;
    v53 = v27;
    v54 = 1024;
    v55 = v28 >> 26;
    v56 = 1024;
    v57 = (v29 >> 15) & 0x3FF;
    v58 = 1024;
    v59 = v30;
    v60 = 1024;
    v61 = v30 >> 26;
    v62 = 1024;
    v63 = (v30 >> 15) & 0x3FF;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", &v52, 38, v43, DWORD1(v44), HIDWORD(v44), LODWORD(block[0]));
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  if (AriMsg::isValid(a2, *(_DWORD *)(a1 + 72)))
  {
    if (AriMsg::isValid(a2, 0x4078000u))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v11 = AriMsg::getGmid(a2);
        *(_DWORD *)buf = 67109120;
        v65 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v12 = qword_1022A0078;
      v13 = AriMsg::getGmid(a2);
      v52 = 67109120;
      v53 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "#Warning NilrDbg,Unexpected response %x", &v52);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v14);
LABEL_77:
      if (v15 != buf)
        free(v15);
LABEL_34:
      v17 = 3;
      goto LABEL_35;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Nack received", &v52, v42);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v17 = 2;
  }
  else
  {
    if (!sub_10175AA54(a2, &v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "NilrDbg,Could not unpack response", &v52, v42);
      v15 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v41);
      goto LABEL_77;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      LOWORD(v52) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "NilrDbg,Valid response", &v52, v42);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v17 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  v20 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1016DA498;
  block[3] = &unk_1021C91A8;
  v21 = v47;
  sub_100270E34((uint64_t)v47, a1 + 40);
  v49 = v17;
  v50 = v44;
  v51 = v45;
  dispatch_async(v20, block);
  v43 = 0;
  if (AriMsg::extractCtx(a2, &v43) || v43 == 0x8000)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v65 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67240192;
      v53 = v17;
      LODWORD(v42) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid context id for response %{public}d", &v52, v42);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v65 = v43;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7D48);
      v52 = 67109120;
      v53 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Free response context 0x%08x", &v52);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    AriHost::ExitTrx(a2, 0, v23);
  }
  if (v48 == v47)
  {
    v25 = 4;
  }
  else
  {
    if (!v48)
      return;
    v25 = 5;
    v21 = v48;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
}

void sub_1016DA44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016DA498(uint64_t a1)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a1 + 68);
}

uint64_t sub_1016DA4DC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 32, a2 + 32);
}

_QWORD *sub_1016DA4E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016DA51C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1016DA528(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t sub_1016DA55C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v10 = -1;
  v11 = -1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
    v6 = *(_DWORD *)(a1 + 64);
    v12[0] = 67109120;
    v12[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams, TResp = gnss::Emergency::Cplane::MeasurePositionMeasurementsAndEstimateRspAckCbParams]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = 3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *))(*(_QWORD *)v4 + 48))(v4, buf, v9);
}

void sub_1016DA748()
{
  operator delete();
}

_QWORD *sub_1016DA75C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021C9248;
  return result;
}

void sub_1016DA780(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021C9248;
}

uint64_t sub_1016DA79C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1016DA7D8()
{
}

void sub_1016DA7F8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

#error "1016DA9C0: call analysis failed (funcsize=74)"

#error "1016DAB30: call analysis failed (funcsize=71)"

#error "1016DAC98: call analysis failed (funcsize=71)"

#error "1016DAE00: call analysis failed (funcsize=71)"

#error "1016DAF68: call analysis failed (funcsize=71)"

#error "1016DB0D4: call analysis failed (funcsize=74)"

#error "1016DB244: call analysis failed (funcsize=71)"

#error "1016DB3AC: call analysis failed (funcsize=71)"

#error "1016DB514: call analysis failed (funcsize=71)"

#error "1016DB67C: call analysis failed (funcsize=71)"

#error "1016DB7E4: call analysis failed (funcsize=71)"

#error "1016DB94C: call analysis failed (funcsize=71)"

#error "1016DBAB4: call analysis failed (funcsize=71)"

#error "1016DBC20: call analysis failed (funcsize=74)"

#error "1016DBD90: call analysis failed (funcsize=71)"

#error "1016DBEF8: call analysis failed (funcsize=71)"

#error "1016DC060: call analysis failed (funcsize=71)"

#error "1016DC1C8: call analysis failed (funcsize=71)"

#error "1016DC330: call analysis failed (funcsize=71)"

#error "1016DC498: call analysis failed (funcsize=71)"

#error "1016DC600: call analysis failed (funcsize=71)"

#error "1016DC768: call analysis failed (funcsize=71)"

#error "1016DC8D0: call analysis failed (funcsize=71)"

#error "1016DCA38: call analysis failed (funcsize=71)"

#error "1016DCBA0: call analysis failed (funcsize=71)"

#error "1016DCD08: call analysis failed (funcsize=71)"

#error "1016DCE70: call analysis failed (funcsize=71)"

#error "1016DCFD8: call analysis failed (funcsize=71)"

#error "1016DD140: call analysis failed (funcsize=71)"

#error "1016DD2A8: call analysis failed (funcsize=71)"

#error "1016DD410: call analysis failed (funcsize=71)"

#error "1016DD578: call analysis failed (funcsize=71)"

#error "1016DD6E0: call analysis failed (funcsize=71)"

#error "1016DD848: call analysis failed (funcsize=71)"

#error "1016DD9B0: call analysis failed (funcsize=71)"

#error "1016DDB18: call analysis failed (funcsize=71)"

#error "1016DDC84: call analysis failed (funcsize=74)"

#error "1016DDDF4: call analysis failed (funcsize=71)"

#error "1016DDF5C: call analysis failed (funcsize=71)"

#error "1016DE0C8: call analysis failed (funcsize=74)"

#error "1016DE238: call analysis failed (funcsize=71)"

#error "1016DE3A0: call analysis failed (funcsize=71)"

#error "1016DE508: call analysis failed (funcsize=71)"

#error "1016DE670: call analysis failed (funcsize=71)"

#error "1016DE7D8: call analysis failed (funcsize=71)"

#error "1016DE940: call analysis failed (funcsize=70)"

#error "1016DEAA0: call analysis failed (funcsize=70)"

#error "1016DEC00: call analysis failed (funcsize=70)"

#error "1016DED60: call analysis failed (funcsize=70)"

#error "1016DEEC0: call analysis failed (funcsize=70)"

void sub_1016DEFAC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_10085FC2C();
  if (!v1)
    dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C7D48);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

uint64_t sub_1016DF0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v21;
  const char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  _OWORD buf[102];
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;

  sub_100270E34((uint64_t)v29, a3);
  sub_100270E34((uint64_t)v27, a4);
  sub_1016DF550((_QWORD *)a1, (uint64_t)v29, (uint64_t)v27);
  v9 = v28;
  if (v28 == v27)
  {
    v10 = 4;
    v9 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v30;
  if (v30 == v29)
  {
    v12 = 4;
    v11 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  *(_QWORD *)a1 = off_1021C93F8;
  *(_QWORD *)(a1 + 80) = a2;
  sub_100270E34(a1 + 96, a5);
  *(_QWORD *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 1018212795;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 7;
  *(_WORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 850045863;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 88) = dispatch_queue_create("com.apple.gpsd.sendq", 0);
  sub_1001E4804(buf);
  v24 = 0;
  v13 = sub_1001E4B84(*(uint64_t *)&buf[0], "GpsdResponseTimeout", &v24);
  v14 = v24;
  if (!v13)
    v14 = 20000;
  *(_QWORD *)(a1 + 256) = v14;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_1016DF5E8(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 256);
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#gpsdClient,Constructor,ResponseTimeoutMs,%lld", (uint8_t *)buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v21 = *(_QWORD *)(a1 + 256);
    v24 = 134217984;
    v25 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsdClient,Constructor,ResponseTimeoutMs,%lld", &v24);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "CLGpsdClient::CLGpsdClient(dispatch_queue_t, ResponseCallback_t, IndicationCallback_t, ShutdownCallback_t)", "%s\n", v22);
    if (v23 != (char *)buf)
      free(v23);
  }
  return a1;
}

void sub_1016DF464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  _QWORD *v14;
  std::mutex *v15;
  std::condition_variable *v16;
  std::mutex *v17;
  _QWORD *v19;
  uint64_t v20;

  std::mutex::~mutex(v17);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex(v15);
  v19 = (_QWORD *)v13[15];
  if (v19 == v14)
  {
    v20 = 4;
    v19 = v14;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  sub_1016DF7E4(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1016DF550(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = &off_1021C9478;
  v5 = (uint64_t)(a1 + 5);
  sub_100270E34((uint64_t)(a1 + 1), a2);
  sub_100270E34(v5, a3);
  return a1;
}

void sub_1016DF5A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 32);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016DF5E8(uint64_t a1)
{
  NSObject *v2;
  _xpc_connection_s *mach_service;
  char *v4;
  _QWORD handler[5];
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsdClient,initXPCConnection", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v6[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,initXPCConnection", v6, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::initXPCConnection()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 265));
  mach_service = xpc_connection_create_mach_service("com.apple.gpsd", *(dispatch_queue_t *)(a1 + 80), 0);
  *(_QWORD *)(a1 + 72) = mach_service;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1002075E4;
  handler[3] = &unk_102154A38;
  handler[4] = a1;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 72));
  sub_1016DF878(a1);
}

_QWORD *sub_1016DF7E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1021C9478;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1016DF878(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  v2 = sub_1001047C0();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsdClient,sendGpsdConnectionMessage,%{public}llu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v6 = 134349056;
    v7 = v2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,sendGpsdConnectionMessage,%{public}llu", &v6, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::sendGpsdConnectionMessage()", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "connection_ns", v2);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), v4);
  xpc_release(v4);
}

void sub_1016DFA60()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXPCConnectionTermination", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v2[0] = 0;
    v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsdClient,handleXPCConnectionTermination", v2, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleXPCConnectionTermination()", "%s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_1016DFBE4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXPCConnectionInterrupted", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v6[0] = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsdClient,handleXPCConnectionInterrupted", v6, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleXPCConnectionInterrupted()", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  sub_1016DF878(a1);
  v3 = *(_QWORD *)(a1 + 120);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
}

void sub_1016DFD94(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsdClient,handleXpcConnectionInvalid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsdClient,handleXpcConnectionInvalid", v4, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGpsdClient::handleXpcConnectionInvalid()", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 265));
}

void sub_1016DFF2C(uint64_t a1)
{
  std::mutex *v2;
  unsigned __int8 v3;
  std::mutex *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v2 = (std::mutex *)(a1 + 272);
  std::mutex::lock((std::mutex *)(a1 + 272));
  v3 = *(_BYTE *)(a1 + 264) + 1;
  *(_BYTE *)(a1 + 264) = v3;
  std::mutex::unlock(v2);
  v4 = (std::mutex *)(a1 + 128);
  std::mutex::lock((std::mutex *)(a1 + 128));
  *(_DWORD *)(a1 + 240) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 192));
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9498);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsdClient,cancelPendingGpsdRequests,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9498);
    v8[0] = 67240192;
    v8[1] = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsdClient,cancelPendingGpsdRequests,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGpsdClient::cancelPendingGpsdRequests()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  std::mutex::unlock(v4);
}

void sub_1016E0120(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1016E013C(uint64_t a1)
{
  sub_1016E018C(a1);
  operator delete();
}

void sub_1016E0160(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

_QWORD *sub_1016E018C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1021C93F8;
  std::mutex::~mutex((std::mutex *)(a1 + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return sub_1016DF7E4((_QWORD *)a1);
}

#error "1016E0278: call analysis failed (funcsize=73)"

#error "1016E03E8: call analysis failed (funcsize=73)"

#error "1016E0558: call analysis failed (funcsize=73)"

#error "1016E06D0: call analysis failed (funcsize=77)"

_QWORD *sub_1016E07D0@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 3)
    v2 = "StatusUnknown";
  else
    v2 = (&off_1021C9640)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1016E07FC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x19)
    v2 = "ResultUnknown";
  else
    v2 = (&off_1021C94D8)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1016E0828@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 8)
    v2 = "WlanResultUnknown";
  else
    v2 = (&off_1021C95A8)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1016E0854@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 + 1) > 5)
    v2 = "ProtocolUnknown";
  else
    v2 = (&off_1021C95F0)[a1 + 1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_1016E0884@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 + 1) > 3)
    v2 = "MethodUnknown";
  else
    v2 = (&off_1021C9620)[a1 + 1];
  return sub_1015A2E04(a2, v2);
}

void sub_1016E08B4(int *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  void **v9;
  unsigned int v10;
  char *v11;
  int v12;
  void **v13;
  void **v14;
  int v15;
  void **v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void **v39;
  int v40;
  void **v41;
  int v42;
  void **v43;
  void **v44;
  int v45;
  void **v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  double v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  void *v70[2];
  char v71;
  void *__p[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  _BYTE v78[12];
  __int16 v79;
  void **v80;
  __int16 v81;
  int v82;
  __int16 v83;
  void **v84;
  __int16 v85;
  void **v86;
  __int16 v87;
  void **v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  int v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  int v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  int v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  uint8_t buf[4];
  uint64_t v136;
  __int16 v137;
  _BYTE *v138;
  __int16 v139;
  int v140;
  __int16 v141;
  void **v142;
  __int16 v143;
  void **v144;
  __int16 v145;
  void **v146;
  __int16 v147;
  int v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  int v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  int v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  int v192;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C94B8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a1;
    if (v5 > 3)
      v6 = "StatusUnknown";
    else
      v6 = (&off_1021C9640)[v5];
    sub_1015A2E04(v78, v6);
    if (v81 >= 0)
      v7 = v78;
    else
      v7 = *(_BYTE **)v78;
    v8 = a1[10];
    sub_1016E0854(a1[11], v76);
    if (v77 >= 0)
      v9 = v76;
    else
      v9 = (void **)v76[0];
    v10 = a1[34] + 1;
    if (v10 > 3)
      v11 = "MethodUnknown";
    else
      v11 = (&off_1021C9620)[v10];
    sub_1015A2E04(v74, v11);
    v12 = v75;
    v13 = (void **)v74[0];
    sub_1016E07FC(a1[1], __p);
    if (v12 >= 0)
      v14 = v74;
    else
      v14 = v13;
    v15 = *((unsigned __int8 *)a1 + 160);
    if (v73 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    v17 = *((_QWORD *)a1 + 7);
    v18 = *((unsigned __int8 *)a1 + 152);
    v19 = a1[39];
    v20 = a1[42];
    v21 = a1[43];
    v22 = *((double *)a1 + 22);
    v23 = *((double *)a1 + 23);
    if (v22 == 1.79769313e308)
      v22 = -1.0;
    if (v23 == 1.79769313e308)
      v23 = -1.0;
    v24 = a1[51];
    v26 = *((_QWORD *)a1 + 1);
    v25 = *((_QWORD *)a1 + 2);
    v27 = a1[41];
    v28 = *((double *)a1 + 3);
    v29 = *((double *)a1 + 4);
    v30 = *((unsigned __int8 *)a1 + 64);
    v31 = *((double *)a1 + 9);
    v32 = *((double *)a1 + 10);
    if (v31 == 1.79769313e308)
      v31 = -1.0;
    if (v32 == 1.79769313e308)
      v32 = -1.0;
    if (*((double *)a1 + 11) == 1.79769313e308)
      v33 = -1.0;
    else
      v33 = *((double *)a1 + 11);
    v35 = *((_QWORD *)a1 + 13);
    v34 = *((_QWORD *)a1 + 14);
    v36 = *((_QWORD *)a1 + 15);
    v37 = a1[32];
    *(_DWORD *)buf = 136322307;
    v136 = a2;
    v137 = 2080;
    v138 = v7;
    v139 = 1024;
    v140 = v8;
    v141 = 2080;
    v142 = v9;
    v143 = 2080;
    v144 = v14;
    v145 = 2080;
    v146 = v16;
    v147 = 1024;
    v148 = v15;
    v149 = 2048;
    v150 = v17;
    v151 = 1024;
    v152 = v18;
    v153 = 1024;
    v154 = v19;
    v155 = 1024;
    v156 = v20;
    v157 = 1024;
    v158 = v21;
    v159 = 2049;
    v160 = v22;
    v161 = 2049;
    v162 = v23;
    v163 = 1024;
    v164 = v24;
    v165 = 2048;
    v166 = v25;
    v167 = 2048;
    v168 = v26;
    v169 = 1024;
    v170 = v27;
    v171 = 2048;
    v172 = v28;
    v173 = 2048;
    v174 = v29;
    v175 = 2048;
    v176 = v29 - v28;
    v177 = 1024;
    v178 = v30;
    v179 = 2049;
    v180 = v31;
    v181 = 2049;
    v182 = v32;
    v183 = 2048;
    v184 = v33;
    v185 = 2048;
    v186 = v35;
    v187 = 2048;
    v188 = v34;
    v189 = 2048;
    v190 = v36;
    v191 = 1024;
    v192 = v37;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,NilrDbg,%s,%s,sessionId,%u,proto,%s,method,%s,result,%s,locType,%x,reqAcc,%.2f,reqConf,%d,asstAvail,%d,refWeek,%d,refTow,%d,refLat,%{private}.8f,refLon,%{private}.8f,ephSvs,%d,timeout,%.1f,timeoutUsed,%.1f,interval,%u,start,%.2f,end,%.2f,ttff,%.1f,rspType,%d,lat,%{private}.8f,lon,%{private}.8f,alt,%.2f,uncSmj,%.2f,uncSmn,%.2f,uncAlt,%.2f,conf,%d", buf, 0xFCu);
    if (v73 < 0)
      operator delete(__p[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)v78);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C94B8);
    v38 = qword_1022A0078;
    sub_1016E07D0(*a1, v76);
    if (v77 >= 0)
      v39 = v76;
    else
      v39 = (void **)v76[0];
    v40 = a1[10];
    v41 = v74;
    sub_1016E0854(a1[11], v74);
    if (v75 < 0)
      v41 = (void **)v74[0];
    sub_1016E0884(a1[34], __p);
    v42 = v73;
    v43 = (void **)__p[0];
    sub_1016E07FC(a1[1], v70);
    if (v42 >= 0)
      v44 = __p;
    else
      v44 = v43;
    v45 = *((unsigned __int8 *)a1 + 160);
    if (v71 >= 0)
      v46 = v70;
    else
      v46 = (void **)v70[0];
    v47 = *((_QWORD *)a1 + 7);
    v48 = *((unsigned __int8 *)a1 + 152);
    v49 = a1[39];
    v50 = a1[42];
    v51 = a1[43];
    v52 = *((double *)a1 + 22);
    v53 = *((double *)a1 + 23);
    if (v52 == 1.79769313e308)
      v52 = -1.0;
    if (v53 == 1.79769313e308)
      v53 = -1.0;
    v54 = a1[51];
    v56 = *((_QWORD *)a1 + 1);
    v55 = *((_QWORD *)a1 + 2);
    v57 = a1[41];
    v58 = *((double *)a1 + 3);
    v59 = *((double *)a1 + 4);
    v60 = *((unsigned __int8 *)a1 + 64);
    v61 = *((double *)a1 + 9);
    v62 = *((double *)a1 + 10);
    if (v61 == 1.79769313e308)
      v61 = -1.0;
    if (v62 == 1.79769313e308)
      v62 = -1.0;
    if (*((double *)a1 + 11) == 1.79769313e308)
      v63 = -1.0;
    else
      v63 = *((double *)a1 + 11);
    v65 = *((_QWORD *)a1 + 13);
    v64 = *((_QWORD *)a1 + 14);
    v66 = *((_QWORD *)a1 + 15);
    v67 = a1[32];
    *(_DWORD *)v78 = 136322307;
    *(_QWORD *)&v78[4] = a2;
    v79 = 2080;
    v80 = v39;
    v81 = 1024;
    v82 = v40;
    v83 = 2080;
    v84 = v41;
    v85 = 2080;
    v86 = v44;
    v87 = 2080;
    v88 = v46;
    v89 = 1024;
    v90 = v45;
    v91 = 2048;
    v92 = v47;
    v93 = 1024;
    v94 = v48;
    v95 = 1024;
    v96 = v49;
    v97 = 1024;
    v98 = v50;
    v99 = 1024;
    v100 = v51;
    v101 = 2049;
    v102 = v52;
    v103 = 2049;
    v104 = v53;
    v105 = 1024;
    v106 = v54;
    v107 = 2048;
    v108 = v55;
    v109 = 2048;
    v110 = v56;
    v111 = 1024;
    v112 = v57;
    v113 = 2048;
    v114 = v58;
    v115 = 2048;
    v116 = v59;
    v117 = 2048;
    v118 = v59 - v58;
    v119 = 1024;
    v120 = v60;
    v121 = 2049;
    v122 = v61;
    v123 = 2049;
    v124 = v62;
    v125 = 2048;
    v126 = v63;
    v127 = 2048;
    v128 = v65;
    v129 = 2048;
    v130 = v64;
    v131 = 2048;
    v132 = v66;
    v133 = 1024;
    v134 = v67;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 0, "#nilr,NilrDbg,%s,%s,sessionId,%u,proto,%s,method,%s,result,%s,locType,%x,reqAcc,%.2f,reqConf,%d,asstAvail,%d,refWeek,%d,refTow,%d,refLat,%{private}.8f,refLon,%{private}.8f,ephSvs,%d,timeout,%.1f,timeoutUsed,%.1f,interval,%u,start,%.2f,end,%.2f,ttff,%.1f,rspType,%d,lat,%{private}.8f,lon,%{private}.8f,alt,%.2f,uncSmj,%.2f,uncSmn,%.2f,uncAlt,%.2f,conf,%d", v78, 252);
    v69 = v68;
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(__p[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrTypes::SessionStatus::log(const char *) const", "%s\n", v69);
    if (v69 != (char *)buf)
      free(v69);
  }
}

void sub_1016E0F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_1016E0FAC(double *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  void *p_p;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  uint64_t v17;
  int v18;
  void **v19;
  void **v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  double v27;
  char *v28;
  char *v29;
  void *v30;
  int v31;
  int v32;
  char v33;
  void *__p;
  int v35;
  int v36;
  char v37;
  _BYTE v38[12];
  __int16 v39;
  void **v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  _BYTE *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C94B8);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(int *)a1;
    if (v5 > 3)
      v6 = "StatusUnknown";
    else
      v6 = (&off_1021C9640)[v5];
    sub_1015A2E04(v38, v6);
    v7 = SHIBYTE(v41);
    v8 = *(_BYTE **)v38;
    sub_1016E0828(*((_DWORD *)a1 + 1), &__p);
    v9 = v38;
    p_p = __p;
    if (v7 < 0)
      v9 = v8;
    v11 = *((unsigned __int8 *)a1 + 32);
    if (v37 >= 0)
      p_p = &__p;
    v12 = *((unsigned __int8 *)a1 + 33);
    v13 = *((unsigned __int8 *)a1 + 34);
    v14 = *((unsigned __int8 *)a1 + 35);
    v15 = *((unsigned __int16 *)a1 + 19);
    v16 = a1[3] - a1[2];
    *(_DWORD *)buf = 136317186;
    v56 = a2;
    v57 = 2080;
    v58 = v9;
    v59 = 2080;
    v60 = p_p;
    v61 = 1024;
    v62 = v11;
    v63 = 1024;
    v64 = v12;
    v65 = 1024;
    v66 = v13;
    v67 = 1024;
    v68 = v14;
    v69 = 1024;
    v70 = v15;
    v71 = 2048;
    v72 = v16;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#wlan,NilrDbg,%s,%s,result,%s,isWlanFeatureEnabled,%d,isRssiReportingEnabled,%d,isRssiRequested,%d,wasServingApSent,%d,timeout,%d,ttff,%f", buf, 0x48u);
    if (v37 < 0)
      operator delete(__p);
    if (SHIBYTE(v41) < 0)
      operator delete(*(void **)v38);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C94B8);
    v17 = qword_1022A0078;
    sub_1016E07D0(*(_DWORD *)a1, &__p);
    v18 = v37;
    v19 = (void **)__p;
    sub_1016E0828(*((_DWORD *)a1 + 1), &v30);
    v20 = &__p;
    if (v18 < 0)
      v20 = v19;
    if (v33 >= 0)
      v21 = &v30;
    else
      v21 = v30;
    v22 = *((unsigned __int8 *)a1 + 32);
    v23 = *((unsigned __int8 *)a1 + 33);
    v24 = *((unsigned __int8 *)a1 + 34);
    v25 = *((unsigned __int8 *)a1 + 35);
    v26 = *((unsigned __int16 *)a1 + 19);
    v27 = a1[3] - a1[2];
    *(_DWORD *)v38 = 136317186;
    *(_QWORD *)&v38[4] = a2;
    v39 = 2080;
    v40 = v20;
    v41 = 2080;
    v42 = v21;
    v43 = 1024;
    v44 = v22;
    v45 = 1024;
    v46 = v23;
    v47 = 1024;
    v48 = v24;
    v49 = 1024;
    v50 = v25;
    v51 = 1024;
    v52 = v26;
    v53 = 2048;
    v54 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#nilr,#wlan,NilrDbg,%s,%s,result,%s,isWlanFeatureEnabled,%d,isRssiReportingEnabled,%d,isRssiRequested,%d,wasServingApSent,%d,timeout,%d,ttff,%f", v38, 72, (const char *)v30, v31, v32, (_DWORD)__p, v35, v36);
    v29 = v28;
    if (v33 < 0)
      operator delete(v30);
    if (v37 < 0)
      operator delete(__p);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrTypes::WlanSessionStatus::log(const char *) const", "%s\n", v29);
    if (v29 != (char *)buf)
      free(v29);
  }
}

void sub_1016E1320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1016E1358(__int16 a1)
{
  return (double)(a1 & 0x3FFF) + -500.0;
}

double sub_1016E1370(__int16 a1)
{
  double result;

  result = (double)(a1 & 0x7FFF);
  if (a1 < 0)
    return -(double)(a1 & 0x7FFF);
  return result;
}

long double sub_1016E138C(unsigned int a1)
{
  return (pow(1.1, (double)a1) + -1.0) * 10.0;
}

long double sub_1016E13BC(unsigned int a1)
{
  return (pow(1.025, (double)a1) + -1.0) * 45.0;
}

double sub_1016E13F0(int a1)
{
  double result;

  result = -((double)(a1 & 0x7FFFFF) * 0.0000107288373);
  if ((a1 & 0x800000) == 0)
    return (double)(a1 & 0x7FFFFF) * 0.0000107288373;
  return result;
}

double sub_1016E1414(int a1)
{
  return (double)a1 * 0.0000107288373 + (double)a1 * 0.0000107288373;
}

double sub_1016E142C(int a1)
{
  return (double)a1 / 0.0000107288373;
}

double sub_1016E1440(int a1)
{
  return (double)a1 / 0.0000214576747;
}

long double sub_1016E1454(unsigned int a1)
{
  char v2;
  unsigned int v3;
  double v4;

  if (a1 > 0x1F)
    return -1.0;
  v2 = a1;
  v3 = a1 >> 1;
  v4 = ldexp(1.0, (a1 >> 1) - 1);
  return v4 + (double)(v2 & 1) * ldexp(1.0, v3 - 2);
}

uint64_t sub_1016E14B4(unsigned int a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = 127;
  if (a1)
  {
    v2 = (int)(log((double)a1 / 10.0 + 1.0) / 0.0953101798);
    if (v2 >= 0x7F)
      return 127;
    else
      return v2;
  }
  return v1;
}

void sub_1016E1508(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

BOOL sub_1016E1534(uint64_t a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  _BOOL4 v9;
  double v10;
  double v11;
  _BOOL4 v12;
  NSObject *v13;
  _BOOL4 v14;
  double v15;
  double v16;
  double v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  double v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  _BOOL4 v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  double v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  double v40;

  v6 = *(double *)(a1 + 20);
  if (*(double *)(a1 + 60) < 0.0 || (v7 = *(double *)(a1 + 68), v7 <= 0.0))
  {
    v9 = 0;
  }
  else
  {
    sub_1016E1804();
    v9 = v7 < v8;
  }
  if (*(double *)(a1 + 44) < 0.0 || (v10 = *(double *)(a1 + 52), v10 <= 0.0))
  {
    v12 = 0;
  }
  else
  {
    sub_1016E18B4();
    v12 = v10 < v11;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021C9660);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134350080;
    v32 = a3;
    v33 = 1026;
    v34 = v6 <= a3;
    v35 = 1026;
    v36 = v12;
    v37 = 1026;
    v38 = v9;
    v39 = 2050;
    v40 = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLRhythmicGnssHelper,desiredAccuracy met,%{public}.3lf,huncValid,%{public}d,speedValid,%{public}d,courseValid,%{public}d,sessionTime,%{public}.1lf", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021C9660);
    v21 = 134350080;
    v22 = a3;
    v23 = 1026;
    v24 = v6 <= a3;
    v25 = 1026;
    v26 = v12;
    v27 = 1026;
    v28 = v9;
    v29 = 2050;
    v30 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLRhythmicGnssHelper,desiredAccuracy met,%{public}.3lf,huncValid,%{public}d,speedValid,%{public}d,courseValid,%{public}d,sessionTime,%{public}.1lf", &v21, 40);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRhythmicGnssHelper::isFixQualified(const CLDaemonLocation &, double, double)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v14 = v6 <= a3 && v12;
  if (v14 && v9)
  {
    sub_1016E1960();
    if (v15 <= a2)
      return 1;
  }
  if (v14)
  {
    sub_1016E1A0C();
    if (v16 <= a2)
      return 1;
    goto LABEL_23;
  }
  if (v6 <= a3)
  {
LABEL_23:
    sub_1016E1A0C();
    return v18 <= a2;
  }
  return 0;
}

void sub_1016E1804()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  sub_1001E4804(&v3);
  v5 = 0;
  sub_1001FD98C(v3, "CourseAccuracyThresholdDeg", &v5);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1016E18A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1016E18B4()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  sub_1001E4804(&v3);
  v5 = 0;
  sub_1001FD98C(v3, "SpeedAccuracyThresholdMps", &v5);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1016E194C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1016E1960()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  sub_1001E4804(&v3);
  v5 = 0;
  sub_1001FD98C(v3, "MinSessionTime", &v5);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1016E19F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1016E1A0C()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  sub_1001E4804(&v3);
  v5 = 0;
  sub_1001FD98C(v3, "MinSessionTimeWithCourseInvalid", &v5);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1016E1AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016E1AB8(unsigned int a1)
{
  return (a1 < 5) & (0x19u >> a1);
}

BOOL sub_1016E1AD0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)a2 == 1)
    return *(_BYTE *)(a2 + 24) && *(_DWORD *)(a2 + 8) == 1;
  return result;
}

uint64_t sub_1016E1AF4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) & 1;
}

uint64_t sub_1016E1B00(int a1, int a2)
{
  return a1 & ~a2;
}

void sub_1016E1B08(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1016E1B34(uint64_t a1)
{
  uint64_t i;
  void *v3;
  uint64_t j;
  void *v5;

  for (i = 0; i != -120; i -= 24)
  {
    v3 = *(void **)(a1 + i + 216);
    if (v3)
    {
      *(_QWORD *)(a1 + i + 224) = v3;
      operator delete(v3);
    }
  }
  for (j = 0; j != -120; j -= 24)
  {
    v5 = *(void **)(a1 + j + 96);
    if (v5)
    {
      *(_QWORD *)(a1 + j + 104) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_1016E1B9C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _BYTE v57[24];
  _BYTE *v58;

  sub_100270E34((uint64_t)v57, a4);
  sub_100270E34((uint64_t)v55, a5);
  v54 = 0;
  sub_100270E34((uint64_t)v51, a7);
  sub_100270E34((uint64_t)v49, a8);
  sub_100270E34((uint64_t)v47, a9);
  sub_100270E34((uint64_t)v45, a10);
  sub_100270E34((uint64_t)v43, a11);
  sub_1017DD414(a1, a3, (uint64_t)v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43, a12, a13);
  v19 = v44;
  if (v44 == v43)
  {
    v20 = 4;
    v19 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = v46;
  if (v46 == v45)
  {
    v22 = 4;
    v21 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  v23 = v48;
  if (v48 == v47)
  {
    v24 = 4;
    v23 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  v25 = v50;
  if (v50 == v49)
  {
    v26 = 4;
    v25 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_21;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_21:
  v27 = v52;
  if (v52 == v51)
  {
    v28 = 4;
    v27 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_26;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_26:
  v29 = v54;
  if (v54 == v53)
  {
    v30 = 4;
    v29 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_31;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_31:
  v31 = v56;
  if (v56 == v55)
  {
    v32 = 4;
    v31 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_36;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_36:
  v33 = v58;
  if (v58 == v57)
  {
    v34 = 4;
    v33 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_41;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_41:
  *(_QWORD *)a1 = off_1021C9690;
  *(_QWORD *)(a1 + 1672) = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithUnderlyingQueue:", a2));
  *(_DWORD *)(a1 + 1680) = 255;
  *(_BYTE *)(a1 + 1684) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1696) = 0;
  v41[0] = off_1021C9D30;
  v41[1] = a1;
  v42 = v41;
  sub_10178E690(a1 + 1704);
  v35 = v42;
  if (v42 == v41)
  {
    v36 = 4;
    v35 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_46:
  *(_BYTE *)(a1 + 2016) = 0;
  *(_QWORD *)(a1 + 2024) = 0;
  *(_QWORD *)(a1 + 2032) = dispatch_queue_create("com.apple.locationd.telephony_timemark", 0);
  *(_BYTE *)(a1 + 2040) = 0;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 2064) = 0;
  *(_BYTE *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2144) = 0x500000014000;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_BYTE *)(a1 + 2184) = a13;
  *(_BYTE *)(a1 + 2185) = a12;
  v39[0] = off_1021C9DB0;
  v39[1] = a1;
  v40 = v39;
  sub_101763CCC((_QWORD *)(a1 + 2192), a2, (uint64_t)v39);
  v37 = v40;
  if (v40 == v39)
  {
    v38 = 4;
    v37 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_51;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_51:
  *(_QWORD *)(a1 + 2232) = 0;
  sub_1017021E8((_QWORD *)(a1 + 2248));
}

void sub_1016E3060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, qmi::Client **a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  a42 = (void **)(v42 + 4104);
  sub_10087B4F8(&a42);
  sub_101716A24(a12);
  sub_100261F44(a17);
  v45 = *a13;
  *a13 = 0;
  if (v45)
    sub_101699B48((uint64_t)a13, v45);
  sub_100067A50(v42 + 3472);
  sub_1016E7900((uint64_t *)(v42 + 3192), 0);
  sub_10169A0B0(a18, 0);
  sub_10178081C(a14);
  if (*(char *)(v42 + 2951) < 0)
    operator delete(*(void **)(v42 + 2928));
  sub_1016E1B34(a15);
  sub_100261F44(a19);
  sub_100261F44(a22);
  sub_100261F44(a20);
  sub_100067A50(v42 + 2568);
  v46 = *(_QWORD *)(v42 + 2248);
  *(_QWORD *)(v42 + 2248) = 0;
  if (v46)
    sub_101701F68(a23, v46);
  sub_1017022A4(a21, 0);
  v47 = *(_QWORD **)(v42 + 2224);
  if (v47 == (_QWORD *)(v42 + 2200))
  {
    v48 = 4;
    v47 = (_QWORD *)(v42 + 2200);
  }
  else
  {
    if (!v47)
      goto LABEL_12;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_12:
  if (*(char *)(v42 + 2175) < 0)
    operator delete(*a16);
  sub_1016F5840((const void **)(v42 + 2024), 0);
  *(_QWORD *)(v42 + 1704) = off_1021C6818;
  sub_100261F44(v42 + 1968);
  sub_101788F60(v43);
  sub_1017DD94C(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_1016E37F8(_QWORD *a1, int a2)
{
  uint64_t v5;

  if (!a2 || a2 == 1 && (sub_1001DC538() & 1) != 0)
    return *a1 + 8 * (a2 != 0);
  v5 = sub_10171232C();
  return sub_1016E3840(v5);
}

void sub_1016E3840(uint64_t a1)
{
  sub_1016E3848(*(_QWORD *)(a1 + 32));
}

void sub_1016E3848(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2016);
    v4 = *(unsigned __int8 *)(a1 + 2264);
    v5 = *(_DWORD *)(a1 + 2260);
    v6 = *(_DWORD *)(a1 + 2256);
    *(_DWORD *)buf = 68290050;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    v32 = v3;
    v33 = 1026;
    v34 = v4;
    v35 = 1026;
    v36 = v5;
    v37 = 1026;
    v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,triggered\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
  }
  if (*(_BYTE *)(a1 + 2016))
  {
    ++*(_DWORD *)(a1 + 2260);
    v25[0] = off_1021CCEE8;
    v25[1] = a1;
    v26 = v25;
    sub_10178EA00(a1 + 1704, (uint64_t)v25);
    v7 = v26;
    if (v26 == v25)
    {
      v8 = 4;
      v7 = v25;
    }
    else
    {
      if (!v26)
        goto LABEL_18;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
    v19 = *(_DWORD *)(a1 + 2260);
    if (v19 < 8)
    {
      if (v19 >= 2)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v20 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(unsigned __int8 *)(a1 + 2016);
          v22 = *(unsigned __int8 *)(a1 + 2264);
          v23 = *(_DWORD *)(a1 + 2260);
          v24 = *(_DWORD *)(a1 + 2256);
          *(_DWORD *)buf = 68290050;
          v28 = 0;
          v29 = 2082;
          v30 = "";
          v31 = 1026;
          v32 = v21;
          v33 = 1026;
          v34 = v22;
          v35 = 1026;
          v36 = v23;
          v37 = 1026;
          v38 = v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,missed response\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
        }
      }
    }
    else
    {
      sub_1016FE96C(a1, "locationd,bbNoResponse");
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v10 = *(unsigned __int8 *)(a1 + 2016);
    v11 = *(unsigned __int8 *)(a1 + 2264);
    v12 = *(_DWORD *)(a1 + 2260);
    v13 = *(_DWORD *)(a1 + 2256);
    *(_DWORD *)buf = 68290050;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    v32 = v10;
    v33 = 1026;
    v34 = v11;
    v35 = 1026;
    v36 = v12;
    v37 = 1026;
    v38 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,skipped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  v14 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v15 = *(unsigned __int8 *)(a1 + 2016);
    v16 = *(unsigned __int8 *)(a1 + 2264);
    v17 = *(_DWORD *)(a1 + 2260);
    v18 = *(_DWORD *)(a1 + 2256);
    *(_DWORD *)buf = 68290050;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    v32 = v15;
    v33 = 1026;
    v34 = v16;
    v35 = 1026;
    v36 = v17;
    v37 = 1026;
    v38 = v18;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,skipped", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,skipped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", buf, 0x2Au);
  }
}

void sub_1016E3C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

void sub_1016E3C54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1016E3C8C(v1);
  v2 = (_QWORD *)(v1 + 2928);
  if (*(char *)(v1 + 2951) < 0)
    v2 = (_QWORD *)*v2;
  sub_1016E3D7C(v1, (uint64_t)v2);
}

id sub_1016E3C8C(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,clearQmiPdsErrorRecovery\"}", (uint8_t *)v4, 0x12u);
  }
  *(_BYTE *)(a1 + 2290) = 0;
  *(_WORD *)(a1 + 2288) = 0;
  return objc_msgSend(*(id *)(a1 + 2920), "setNextFireDelay:", 1.79769313e308);
}

void sub_1016E3D7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (sub_100CD5700(a1 + 2268))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,Cannot reset during emergency, scheduling reinit at end of call\"}", (uint8_t *)&v7, 0x12u);
    }
    *(_BYTE *)(a1 + 2288) = 1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    }
    v6 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,Reset device", "{\"msg%{public}.0s\":\"#bb.e,Reset device\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
    sub_10178CF38(a1 + 1704);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1672), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "resetModemWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  }
}

id sub_1016E3FD4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,reset timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,reset timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLEurekaController::CLEurekaController(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = objc_msgSend(*(id *)(v1 + 1688), "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(v1 + 1684) = 0;
  return result;
}

void sub_1016E4178(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  sub_1016E1B9C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_1016E419C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  void *v8;
  uint64_t m;
  void *v10;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  void *v14;
  uint64_t kk;
  void *v16;
  _DWORD *v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  char v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  char v35;
  char v36;
  char v37;
  int v38;
  NSObject *v39;
  uint64_t mm;
  void *v41;
  uint64_t nn;
  void *v43;
  uint64_t i1;
  void *v45;
  uint64_t i2;
  void *v47;
  uint64_t v48;
  int v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  uint64_t v55;
  _DWORD v56[4];
  _DWORD v57[2];
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[48];
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  _QWORD v67[3];
  _OWORD v68[15];
  uint8_t buf[4];
  int v70;
  __int16 v71;
  int v72;
  _BYTE v73[1544];

  if (*(_BYTE *)(a1 + 2184) || *(_BYTE *)(a1 + 2185))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(unsigned __int8 *)(a1 + 2184);
      v4 = *(unsigned __int8 *)(a1 + 2185);
      *(_DWORD *)buf = 67240448;
      v70 = v3;
      v71 = 1026;
      v72 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#rti,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v49 = *(unsigned __int8 *)(a1 + 2184);
      v50 = *(unsigned __int8 *)(a1 + 2185);
      LODWORD(v68[0]) = 67240448;
      DWORD1(v68[0]) = v49;
      WORD4(v68[0]) = 1026;
      *(_DWORD *)((char *)v68 + 10) = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", v68, 14);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
  }
  else
  {
    ++*(_QWORD *)(a1 + 616);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 168))(&v55, a1);
    sub_100067B0C(a1 + 8, (const char *)(v55 + 24), 1, 3, 0);
    if (!*(_BYTE *)(a1 + 2016))
      sub_1016E4AC4(a1);
    if (v55)
      sub_101766C54(a1 + 2192, v55 + 24);
    sub_1018625B4(v68);
    if ((sub_1016E4BA8() & 1) == 0)
    {
      sub_1016E4C18(*(_DWORD *)(a1 + 1284), a1 + 2680, (uint64_t)buf);
      for (i = 0; i != 120; i += 24)
        sub_100006898((uint64_t)v68 + i, (__n128 *)&buf[i]);
      for (j = 120; j != 240; j += 24)
        sub_100006898((uint64_t)v68 + j, (__n128 *)&buf[j]);
      for (k = 0; k != -120; k -= 24)
      {
        v8 = *(void **)&v73[k + 120];
        if (v8)
        {
          *(_QWORD *)&v73[k + 128] = v8;
          operator delete(v8);
        }
      }
      for (m = 0; m != -120; m -= 24)
      {
        v10 = *(void **)&v73[m];
        if (v10)
        {
          *(_QWORD *)&v73[m + 8] = v10;
          operator delete(v10);
        }
      }
    }
    if ((*(_BYTE *)(a1 + 1284) & 1) != 0)
    {
      sub_1016E4C18(1, (uint64_t)v68, (uint64_t)buf);
      for (n = 0; n != 120; n += 24)
        sub_100006898((uint64_t)v68 + n, (__n128 *)&buf[n]);
      for (ii = 120; ii != 240; ii += 24)
        sub_100006898((uint64_t)v68 + ii, (__n128 *)&buf[ii]);
      for (jj = 0; jj != -120; jj -= 24)
      {
        v14 = *(void **)&v73[jj + 120];
        if (v14)
        {
          *(_QWORD *)&v73[jj + 128] = v14;
          operator delete(v14);
        }
      }
      for (kk = 0; kk != -120; kk -= 24)
      {
        v16 = *(void **)&v73[kk];
        if (v16)
        {
          *(_QWORD *)&v73[kk + 8] = v16;
          operator delete(v16);
        }
      }
    }
    if (sub_100CD5700(a1 + 2268))
    {
      v17 = *(_DWORD **)(a1 + 3528);
      sub_101701FF8((uint64_t)v57, (uint64_t)v68);
      if (v17[5])
        v18 = v17[17] == 0;
      else
        v18 = 1;
      v19 = v18;
      if (v17[6])
        v20 = v17[18] == 0;
      else
        v20 = 1;
      v21 = v20;
      if (v17[7])
        v22 = v17[19] == 0;
      else
        v22 = 1;
      v23 = v22;
      if (v17[9])
        v24 = v17[21] == 0;
      else
        v24 = 1;
      v25 = v24;
      if (sub_1001DC538())
      {
        v26 = (_DWORD *)sub_1016911FC((_QWORD *)(a1 + 3528), 1);
        v27 = (_DWORD *)sub_1016911FC((_QWORD *)(a1 + 3528), 1);
        if (v27[5])
          v28 = v19;
        else
          v28 = 1;
        v19 = (v28 & 1) != 0 || v26[17] == 0;
        if (v27[6])
          v35 = v21;
        else
          v35 = 1;
        v21 = (v35 & 1) != 0 || v26[18] == 0;
        if (v27[7])
          v36 = v23;
        else
          v36 = 1;
        v23 = (v36 & 1) != 0 || v26[19] == 0;
        if (v27[9])
          v37 = v25;
        else
          v37 = 1;
        v25 = (v37 & 1) != 0 || v26[21] == 0;
      }
      sub_1016E4EC8(v19, (uint64_t)&v60, v64);
      sub_1016E4EC8(v21, (uint64_t)v63, v67);
      sub_1016E4EC8(v23, (uint64_t)&v61, v65);
      sub_1016E4EC8(v25, (uint64_t)&v62, v66);
      sub_1018629C0((uint64_t)v57);
      v38 = sub_1016E4DF0(a1, (uint64_t)v57);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v70 = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#rti,injectedBlockList in emergency,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v56[0] = 67240192;
        v56[1] = v38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti,injectedBlockList in emergency,%{public}d", v56, 8);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      for (mm = 0; mm != -15; mm -= 3)
      {
        v41 = (void *)v67[mm];
        if (v41)
        {
          v67[mm + 1] = v41;
          operator delete(v41);
        }
      }
      for (nn = 0; nn != -120; nn -= 24)
      {
        v43 = *(void **)&v63[nn];
        if (v43)
        {
          *(_QWORD *)&v63[nn + 8] = v43;
          operator delete(v43);
        }
      }
    }
    else
    {
      v29 = sub_1016E4DF0(a1, (uint64_t)v68);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v30 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(_DWORD *)(a1 + 1284);
        *(_DWORD *)buf = 67240448;
        v70 = v29;
        v71 = 1026;
        v72 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#rti,injectedBlockList,%{public}d,blockedcons,0x%{public}x", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v32 = *(_DWORD *)(a1 + 1284);
        v57[0] = 67240448;
        v57[1] = v29;
        v58 = 1026;
        v59 = v32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti,injectedBlockList,%{public}d,blockedcons,0x%{public}x", v57, 14);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::injectAllFormsOfRti()", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
    if (!*(_BYTE *)(a1 + 2016))
      sub_1016E5000(a1);
    for (i1 = 0; i1 != -120; i1 -= 24)
    {
      v45 = *(void **)((char *)&v68[13] + i1 + 8);
      if (v45)
      {
        *(_QWORD *)((char *)&v68[14] + i1) = v45;
        operator delete(v45);
      }
    }
    for (i2 = 0; i2 != -120; i2 -= 24)
    {
      v47 = *(void **)((char *)&v68[6] + i2);
      if (v47)
      {
        *(_QWORD *)((char *)&v68[6] + i2 + 8) = v47;
        operator delete(v47);
      }
    }
    v48 = v55;
    v55 = 0;
    if (v48)
      sub_10085B928((uint64_t)&v55, v48);
  }
}

void sub_1016E4A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v46;

  sub_1016E1B34((uint64_t)&a15);
  sub_1016E1B34((uint64_t)&a45);
  v46 = a12;
  a12 = 0;
  if (v46)
    sub_10085B928((uint64_t)&a12, v46);
  _Unwind_Resume(a1);
}

_QWORD *sub_1016E4AC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v1 = 3;
  if (!*(_BYTE *)(a1 + 2184))
    v1 = 1;
  v4[0] = off_1021CAB70;
  v4[1] = v1;
  v5 = v4;
  sub_10178EA00(a1 + 1704, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1016E4B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016E4BA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_10230F9B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10230F9B8))
  {
    byte_10230F9B0 = sub_1001937D8();
    __cxa_guard_release(&qword_10230F9B8);
  }
  return byte_10230F9B0;
}

void sub_1016E4C00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F9B8);
  _Unwind_Resume(a1);
}

void sub_1016E4C18(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 v10;
  void *__p[3];

  sub_101701FF8(a3, a2);
  if (a1)
  {
    if ((a1 & 4) != 0)
    {
      v5 = sub_101862500(3);
      v10 = 1;
      sub_100B8FCC8(__p, v5, &v10);
      sub_1018626E0(a3, 3, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
    }
    if ((a1 & 8) != 0)
    {
      v6 = sub_101862500(4);
      v10 = 1;
      sub_100B8FCC8(__p, v6, &v10);
      sub_1018626E0(a3, 4, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
    }
    if ((a1 & 2) != 0)
    {
      v7 = sub_101862500(1);
      v10 = 1;
      sub_100B8FCC8(__p, v7, &v10);
      sub_1018626E0(a3, 1, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
    }
    if ((a1 & 1) != 0)
    {
      v8 = sub_101862500(0);
      v10 = 1;
      sub_100B8FCC8(__p, v8, &v10);
      sub_1018626E0(a3, 0, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
    }
    if ((a1 & 0x10) != 0)
    {
      v9 = sub_101862500(2);
      v10 = 1;
      sub_100B8FCC8(__p, v9, &v10);
      sub_1018626E0(a3, 2, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
    }
  }
}

void sub_1016E4D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  sub_1016E1B34(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1016E4DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  v6[0] = off_1021CA850;
  v6[1] = a2;
  v7 = v6;
  v2 = sub_10178EA00(a1 + 1704, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1016E4E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016E4EC8(int a1, uint64_t a2, _QWORD *a3)
{
  _WORD *v5;
  _WORD *v6;
  _QWORD *v7;
  _WORD *v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;

  if (a1)
  {
    sub_101702100((void **)a2, ((uint64_t)(a3[1] - *a3) >> 1) + ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1));
    v5 = (_WORD *)*a3;
    v6 = (_WORD *)a3[1];
    if ((_WORD *)*a3 != v6)
    {
      v7 = (_QWORD *)(a2 + 16);
      v8 = *(_WORD **)(a2 + 8);
      do
      {
        if ((unint64_t)v8 >= *v7)
        {
          v10 = *(_WORD **)a2;
          v11 = (uint64_t)v8 - *(_QWORD *)a2;
          if (v11 <= -3)
            sub_100259694();
          v12 = v11 >> 1;
          v13 = *v7 - (_QWORD)v10;
          if (v13 <= (v11 >> 1) + 1)
            v14 = v12 + 1;
          else
            v14 = *v7 - (_QWORD)v10;
          if (v13 >= 0x7FFFFFFFFFFFFFFELL)
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
          {
            v16 = (char *)sub_100BFCCD8(a2 + 16, v15);
            v10 = *(_WORD **)a2;
            v8 = *(_WORD **)(a2 + 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[2 * v12];
          *(_WORD *)v17 = *v5;
          v9 = v17 + 2;
          while (v8 != v10)
          {
            v18 = *--v8;
            *((_WORD *)v17 - 1) = v18;
            v17 -= 2;
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 8) = v9;
          *(_QWORD *)(a2 + 16) = &v16[2 * v15];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v8 = *v5;
          v9 = v8 + 1;
        }
        *(_QWORD *)(a2 + 8) = v9;
        ++v5;
        v8 = v9;
      }
      while (v5 != v6);
      v5 = (_WORD *)*a3;
    }
    a3[1] = v5;
  }
}

_QWORD *sub_1016E5000(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v1 = 2 * *(unsigned __int8 *)(a1 + 2184);
  v4[0] = off_1021CAAD0;
  v4[1] = v1;
  v5 = v4;
  sub_10178EA00(a1 + 1704, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1016E50A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016E50DC(uint64_t a1))()
{
  uint64_t (***result)();
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  uint64_t (**v8)();
  int v9;
  uint64_t (***v10)();
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  sub_10023A6F8(a1);
  result = (uint64_t (***)())sub_1016E4BA8();
  if ((_DWORD)result)
  {
    v3 = (*(_DWORD *)(a1 + 1284) & 0x26 | (16 * ((*(_DWORD *)(a1 + 1284) >> 3) & 1)) | (*(_DWORD *)(a1 + 1284) >> 1) & 8) ^ 0x3F;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#bb,constellationControl,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v11[0] = 67240192;
      v11[1] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#bb,constellationControl,0x%{public}x", v11, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendPermanentConstellationConfig()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v8 = off_1021CA8F0;
    v9 = v3;
    v10 = &v8;
    sub_10178EA00(a1 + 1704, (uint64_t)&v8);
    result = v10;
    if (v10 == &v8)
    {
      v5 = 4;
      result = &v8;
    }
    else
    {
      if (!v10)
        return result;
      v5 = 5;
    }
    return (uint64_t (***)())(*result)[v5]();
  }
  return result;
}

void sub_1016E5304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016E5344(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v2 = *(unsigned __int8 *)(a1 + 2264);
  *(_BYTE *)(a1 + 2264) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 2264);
    v7[0] = 68289794;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "onConnected";
    v12 = 1026;
    v13 = v2 ^ 1;
    v14 = 1026;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"wasDisconnected\":%{public}hhd, \"fConnected\":%{public}hhd}", (uint8_t *)v7, 0x28u);
  }
  if (!v2)
  {
    sub_1016E54BC(a1);
    sub_1017EB060(**(_QWORD **)(a1 + 2248));
    if (sub_1001DC538())
    {
      v5 = (uint64_t *)sub_1016E37F8((_QWORD *)(a1 + 2248), 1);
      sub_1017EB060(*v5);
    }
  }
  sub_1017DDC10(a1, 1);
  sub_1016E3C8C(a1);
  sub_101756664(*(_QWORD *)(a1 + 2648), 1);
  return sub_1017190D8(a1 + 3792, 1);
}

uint64_t (***sub_1016E54BC(uint64_t a1))()
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (***result)();
  unsigned __int16 v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  sub_1016F2CB4(a1);
  sub_1016F2E64(a1);
  sub_1017ED004(**(_QWORD **)(a1 + 2248));
  if (sub_1001DC538())
  {
    v2 = (uint64_t *)sub_1016E37F8((_QWORD *)(a1 + 2248), 1);
    sub_1017ED004(*v2);
  }
  sub_1016F3030(a1);
  sub_1016F3108(a1);
  sub_1016F31E8(a1);
  sub_1016F32BC(a1);
  sub_1016EA4F8(a1);
  sub_1016E7E24(a1, 1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2081;
    v20 = "sendSetGnssEngineMonitorConfig";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v13[0] = off_1021CBF60;
  v14 = v13;
  sub_10178EA00(a1 + 1704, (uint64_t)v13);
  v4 = v14;
  if (v14 == v13)
  {
    v5 = 4;
    v4 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_12;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
  v10 = sub_100762694();
  if (v10 < 0x100u)
    goto LABEL_22;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289283;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2081;
    v20 = "sendSetWwanAntTuneL5BlankingControl";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v11[0] = off_1021CC000;
  v11[1] = &v10;
  v12 = v11;
  sub_10178EA00(a1 + 1704, (uint64_t)v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_22:
  result = sub_1016E50DC(a1);
  if (*(_BYTE *)(a1 + 2184))
    return (uint64_t (***)())sub_1016E5000(a1);
  return result;
}

void sub_1016E5780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a14;
  if (a14 == v18)
  {
    v21 = 4;
    v20 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016E57DC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2264);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = "onDisConnected";
    v10 = 1026;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"fConnected\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  *(_BYTE *)(a1 + 2264) = 0;
  sub_1017DDC10(a1, 0);
  sub_1016E3C8C(a1);
  sub_101756664(*(_QWORD *)(a1 + 2648), 0);
  return sub_1017190D8(a1 + 3792, 0);
}

uint64_t sub_1016E5904(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t j;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;

  *(_QWORD *)a1 = off_1021C9690;
  v2 = a1 + 1704;
  v24 = 0;
  sub_10178908C(a1 + 1704, 1, (uint64_t)v23);
  v3 = v24;
  if (v24 == v23)
  {
    v4 = 4;
    v3 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v22 = 0;
  sub_10178908C(v2, 0, (uint64_t)v21);
  v5 = v22;
  if (v22 == v21)
  {
    v6 = 4;
    v5 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v20 = 0;
  sub_101789184(v2, (uint64_t)v19);
  v7 = v20;
  if (v20 == v19)
  {
    v8 = 4;
    v7 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  dispatch_release(*(dispatch_object_t *)(a1 + 2032));

  *(_QWORD *)(a1 + 1672) = 0;
  v18 = (void **)(a1 + 4104);
  sub_10087B4F8(&v18);
  sub_101716A24(a1 + 3792);
  sub_100261F44(a1 + 3536);
  v9 = *(_QWORD *)(a1 + 3528);
  *(_QWORD *)(a1 + 3528) = 0;
  if (v9)
    sub_101699B48(a1 + 3528, v9);
  sub_100067A50(a1 + 3472);
  sub_1016E7900((uint64_t *)(a1 + 3192), 0);
  sub_10169A0B0((qmi::Client **)(a1 + 3184), 0);
  sub_10178081C(a1 + 2952);
  if (*(char *)(a1 + 2951) < 0)
    operator delete(*(void **)(a1 + 2928));
  for (i = 0; i != -120; i -= 24)
  {
    v11 = *(void **)(a1 + i + 2896);
    if (v11)
    {
      *(_QWORD *)(a1 + i + 2904) = v11;
      operator delete(v11);
    }
  }
  for (j = 0; j != -120; j -= 24)
  {
    v13 = *(void **)(a1 + j + 2776);
    if (v13)
    {
      *(_QWORD *)(a1 + j + 2784) = v13;
      operator delete(v13);
    }
  }
  sub_100261F44(a1 + 2664);
  sub_100261F44(a1 + 2648);
  sub_100261F44(a1 + 2632);
  sub_100067A50(a1 + 2568);
  v14 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v14)
    sub_101701F68(a1 + 2248, v14);
  sub_1017022A4((uint64_t *)(a1 + 2232), 0);
  v15 = *(_QWORD **)(a1 + 2224);
  if (v15 == (_QWORD *)(a1 + 2200))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 2200);
  }
  else
  {
    if (!v15)
      goto LABEL_35;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_35:
  if (*(char *)(a1 + 2175) < 0)
    operator delete(*(void **)(a1 + 2152));
  sub_1016F5840((const void **)(a1 + 2024), 0);
  *(_QWORD *)(a1 + 1704) = off_1021C6818;
  sub_100261F44(a1 + 1968);
  sub_101788F60(v2);
  sub_1017DD94C(a1);
  return a1;
}

void sub_1016E5BB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1016E5BC8(uint64_t a1)
{
  sub_1016E5904(a1);
  operator delete();
}

uint64_t sub_1016E5BEC(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(a1 + 3560) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 3556) = v2;
  return sub_101718A9C(a1 + 3792, 0, 1);
}

uint64_t sub_1016E5C0C(uint64_t a1)
{
  return sub_101718E34((_QWORD *)(a1 + 3792), 0);
}

void sub_1016E5C18(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,onGnssStartComplete,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssAssertion,onGnssStartComplete,%d", v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::onGnssStartComplete(BOOL)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_1016E5DC0(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,onGnssStopComplete,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssAssertion,onGnssStopComplete,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::onGnssStopComplete(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 3788))
  {
    *(_BYTE *)(a1 + 3788) = 0;
    if (a2)
      v5 = 7;
    else
      v5 = 8;
    sub_1017DDC10(a1, v5);
  }
}

uint64_t sub_1016E5F8C(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnss,setBasebandCausesL1InterferenceAssertion,state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12[0] = 67240192;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnss,setBasebandCausesL1InterferenceAssertion,state,%{public}d", v12, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = sub_1001936CC();
  if ((_DWORD)result)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnss,concurrency", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v12[0]) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnss,concurrency", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    return (uint64_t)sub_1017DDC10(a1, 7);
  }
  else if (*(unsigned __int8 *)(a1 + 3789) != a2)
  {
    *(_BYTE *)(a1 + 3789) = a2;
    if (a2)
    {
      *(_BYTE *)(a1 + 3788) = 1;
      return sub_101718A9C(a1 + 3792, 1, 0);
    }
    else
    {
      return sub_101718E34((_QWORD *)(a1 + 3792), 1);
    }
  }
  return result;
}

BOOL sub_1016E62BC(_DWORD *a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  int v28;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[2];
  uint8_t buf[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  __int128 v50;
  _BYTE v51[32];
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  __int128 v56;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,startInternal()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v39[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssAssertion,startInternal()", v39, 2);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v5 = *((unsigned __int8 *)a1 + 2016);
  if (*((_BYTE *)a1 + 2016))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,Early return, already started", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v39[0]) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,Early return, already started", v39, v36);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v7);
LABEL_52:
      if (v8 != buf)
        free(v8);
      return v5 != 0;
    }
    return v5 != 0;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 1, Eureka", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
    LOWORD(v39[0]) = 0;
    LODWORD(v36) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps, state, 1, Eureka", v39, v36);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  if (sub_100241564())
  {
    v39[0] = objc_msgSend(objc_msgSend(*((id *)a1 + 209), "silo"), "queue");
    sub_1016E6AB4();
  }
  *((_BYTE *)a1 + 2016) = 1;
  v10 = *a2;
  *((_WORD *)a1 + 1780) = *((_WORD *)a2 + 2);
  a1[889] = v10;
  *((_BYTE *)a1 + 2291) = 0;
  *((double *)a1 + 11) = sub_1001FCBB4();
  ++a1[310];
  if (*((_BYTE *)a1 + 2056))
    *((_BYTE *)a1 + 2056) = 0;
  if (*((_BYTE *)a1 + 2136))
    *((_BYTE *)a1 + 2136) = 0;
  sub_1016E4AC4((uint64_t)a1);
  sub_1016E50DC((uint64_t)a1);
  if (*((_BYTE *)a1 + 2294))
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 272))(a1, 1);
  v37[0] = off_1021CA990;
  v37[1] = a1;
  v38 = v37;
  sub_10178EA00((uint64_t)(a1 + 426), (uint64_t)v37);
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_33;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_33:
  *((_BYTE *)a1 + 1666) = 1;
  *(_QWORD *)v51 = 0;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)&v49[16] = 0u;
  *(_QWORD *)v49 = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)buf = 0u;
  v41 = 0u;
  DWORD2(v45) = 1;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v49[8] = _Q1;
  v50 = _Q1;
  *(_OWORD *)&v51[8] = _Q1;
  v52 = 0u;
  memset(v53, 0, sizeof(v53));
  v54 = 0;
  v55 = 1065353216;
  v56 = 0x100000005uLL;
  *((_OWORD *)a1 + 148) = 0u;
  *((_OWORD *)a1 + 147) = 0u;
  *((_OWORD *)a1 + 146) = 0u;
  *((_OWORD *)a1 + 145) = 0u;
  v18 = v44;
  v19 = v45;
  v20 = v46;
  *((_OWORD *)a1 + 152) = v47;
  *((_OWORD *)a1 + 151) = v20;
  *((_OWORD *)a1 + 150) = v19;
  *((_OWORD *)a1 + 149) = v18;
  v21 = v48;
  v22 = *(_OWORD *)v49;
  v23 = *(_OWORD *)&v49[16];
  *((_OWORD *)a1 + 156) = v50;
  *((_OWORD *)a1 + 155) = v23;
  *((_OWORD *)a1 + 154) = v22;
  *((_OWORD *)a1 + 153) = v21;
  v24 = *(_OWORD *)v51;
  v25 = *(_OWORD *)&v51[16];
  v26 = v52;
  *((_QWORD *)a1 + 320) = *(_QWORD *)&v53[0];
  *((_OWORD *)a1 + 159) = v26;
  *((_OWORD *)a1 + 158) = v25;
  *((_OWORD *)a1 + 157) = v24;
  sub_10020B514((uint64_t)(a1 + 642), (uint64_t *)v53 + 1);
  *((_OWORD *)a1 + 163) = v56;
  sub_100067A50((uint64_t)v53 + 8);
  sub_1016E6C78((uint64_t)a1);
  if (*((_QWORD *)a1 + 399))
    *(_WORD *)((char *)a1 + 2297) = 0;
  sub_1016E419C((uint64_t)a1);
  sub_1016E6DB4((uint64_t)a1, a1[536]);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 192))(a1);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 208))(a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v27 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v28 = a1[1024];
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "XOCalibState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v34 = a1[1024];
    LODWORD(v39[0]) = 67240192;
    HIDWORD(v39[0]) = v34;
    LODWORD(v36) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "XOCalibState,%{public}d", v39, v36);
    v8 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::startInternal(const DeviceOperatingContext_t &)", "%s\n", v35);
    goto LABEL_52;
  }
  return v5 != 0;
}

void sub_1016E6A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016E6AB4()
{
  operator new();
}

void sub_1016E6BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == v17)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  operator delete();
}

void sub_1016E6C78(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  *(_QWORD *)(a1 + 2256) = 0;
  v2 = *(_QWORD *)(a1 + 3536);
  if (v2)
    sub_10184C1B8(v2);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 2240), 0, 0xEE6B2800uLL, 0x1DCD6500uLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 2016);
    v5 = *(unsigned __int8 *)(a1 + 2264);
    v6 = *(_DWORD *)(a1 + 2260);
    v7 = *(_DWORD *)(a1 + 2256);
    v8[0] = 68290050;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v4;
    v13 = 1026;
    v14 = v5;
    v15 = 1026;
    v16 = v6;
    v17 = 1026;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,started\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)v8, 0x2Au);
  }
}

void sub_1016E6DB4(uint64_t a1, unsigned int a2)
{
  const char *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  double v18;
  unsigned __int8 v19;
  uint8_t buf[4];
  _BYTE v21[14];
  __int16 v22;
  const char *v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  _BYTE v32[12];
  uint64_t v33;
  uint64_t v34;

  v4 = (const char *)(a1 + 2152);
  v5 = *(char *)(a1 + 2175);
  if (v5 < 0)
  {
    if (!*(_QWORD *)(a1 + 2160))
      goto LABEL_20;
    v6 = *(const char **)v4;
  }
  else
  {
    v6 = (const char *)(a1 + 2152);
    if (!v5)
    {
LABEL_20:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "#ee,empty filename", v32, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v32, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        *(_WORD *)buf = 0;
        _os_log_send_and_compose_impl(2, 0, v32, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ee,empty filename", buf, 2);
        v14 = (char *)v13;
        sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::injectXtra(uint32_t)", "%s\n", v13);
LABEL_41:
        if (v14 != v32)
          free(v14);
        return;
      }
      return;
    }
  }
  if (sub_1000B78B0(v6))
  {
    v7 = (uint64_t)v4;
    if (*(char *)(a1 + 2175) < 0)
      v7 = *(_QWORD *)v4;
    sub_100838A88((void (__cdecl ***)(std::ifstream *__hidden))v32, v7, 12);
    *(_DWORD *)&v32[*(_QWORD *)(*(_QWORD *)v32 - 24) + 8] &= ~0x1000u;
    *(_QWORD *)(a1 + 2176) = sub_100B2BB9C(v32);
    v19 = 0;
    v8 = sub_100214380(a1 + 3200, &v19) + (double)*(unint64_t *)(a1 + 2176) * -0.000000001;
    v18 = v8;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v4;
      if (*(char *)(a1 + 2175) < 0)
        v10 = *(const char **)v4;
      v11 = *(_QWORD *)(a1 + 2176);
      *(_DWORD *)buf = 68290307;
      *(_DWORD *)v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(_QWORD *)&v21[6] = "";
      v22 = 2081;
      v23 = v10;
      v24 = 1026;
      v25 = a2;
      v26 = 2050;
      v27 = v11;
      v28 = 2050;
      v29 = v8;
      v30 = 1026;
      v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ee,feeding assistance\", \"file\":%{private, location:escape_only}s, \"maxSize\":%{public}d, \"header GPS ns\":%{public}llu, \"ageSeconds\":\"%{public}f\", \"isAgeReliable\":%{public}hhd}", buf, 0x3Cu);
    }
    ++*(_QWORD *)(a1 + 624);
    sub_100067B0C(a1 + 8, v4, 1, 2, &v18);
    if (!*(_BYTE *)(a1 + 2016))
      sub_1016E4AC4(a1);
    sub_101763CF8((uint64_t *)(a1 + 2192), v4, a2, *(unsigned __int8 *)(a1 + 2185));
    if (!*(_BYTE *)(a1 + 2016))
      sub_1016E5000(a1);
    std::filebuf::~filebuf(&v33);
    std::ios::~ios(&v34);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v16 = v4;
      if (*(char *)(a1 + 2175) < 0)
        v16 = *(const char **)v4;
      *(_DWORD *)v32 = 136380675;
      *(_QWORD *)&v32[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ee,file does not exist,%{private}s", v32, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v32, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      if (*(char *)(a1 + 2175) < 0)
        v4 = *(const char **)v4;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)v21 = v4;
      _os_log_send_and_compose_impl(2, 0, v32, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ee,file does not exist,%{private}s", buf, 12);
      v14 = (char *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::injectXtra(uint32_t)", "%s\n", v17);
      goto LABEL_41;
    }
  }
}

void sub_1016E72A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100838B94((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016E72CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2664);
  if (result)
    return sub_10176B690(result);
  return result;
}

uint64_t sub_1016E72DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2664);
  if (result)
    return sub_10176C3E8(result);
  return result;
}

BOOL sub_1016E72EC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _WORD v16[8];
  _QWORD v17[3];
  _QWORD *v18;
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,stopInternal()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssAssertion,stopInternal()", v16, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v3 = *(unsigned __int8 *)(a1 + 2016);
  if (*(_BYTE *)(a1 + 2016))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 0, Eureka", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
      v16[0] = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps, state, 0, Eureka", v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_1016E77D0(a1);
    v17[0] = off_1021CAA50;
    v17[1] = a1;
    v18 = v17;
    sub_10178EA00(a1 + 1704, (uint64_t)v17);
    v5 = v18;
    if (v18 == v17)
    {
      v6 = 4;
      v5 = v17;
    }
    else
    {
      if (!v18)
      {
LABEL_26:
        *(_WORD *)(a1 + 2297) = 0;
        if (*(_BYTE *)(a1 + 2056))
          *(_BYTE *)(a1 + 2056) = 0;
        if (*(_BYTE *)(a1 + 2136))
          *(_BYTE *)(a1 + 2136) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
        sub_1016E5000(a1);
        *(_BYTE *)(a1 + 2016) = 0;
        sub_1016E7900((uint64_t *)(a1 + 3192), 0);
        *(double *)(a1 + 2304) = sub_1001FCBB4();
        *(_BYTE *)(a1 + 2312) = 1;
        return v3 == 0;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_26;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Early return, was not started, hence not stopping", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v16[0] = 0;
    LODWORD(v15) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Early return, was not started, hence not stopping", v16, v15);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLEurekaController::stopInternal()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v3 == 0;
}

void sub_1016E7790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016E77D0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 3536);
  if (v2)
    sub_10184C220(v2);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 2240), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 2016);
    v5 = *(unsigned __int8 *)(a1 + 2264);
    v6 = *(_DWORD *)(a1 + 2260);
    v7 = *(_DWORD *)(a1 + 2256);
    v8[0] = 68290050;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v4;
    v13 = 1026;
    v14 = v5;
    v15 = 1026;
    v16 = v6;
    v17 = 1026;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,stopped\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)v8, 0x2Au);
  }
}

uint64_t sub_1016E7900(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10170546C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1016E793C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@ClxGps, shutdown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps, shutdown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::shutdown()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return sub_10178E904(a1 + 1704);
}

_QWORD *sub_1016E7AE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_1021CAC10;
  v5[1] = a2;
  v5[2] = a3;
  v6 = v5;
  sub_10178EA00(a1 + 1704, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1016E7B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016E7BBC(uint64_t a1, int a2))()
{
  NSObject *v4;
  uint64_t (***result)();
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  uint64_t (**v10)();
  int v11;
  uint64_t (***v12)();
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  _BOOL4 v17;
  __int16 v18;
  int v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v17 = sub_100CD5700(a1 + 2268);
    v18 = 1026;
    v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SignalEnvConfig,inEmergency,%{public}d,fSignalEnvironment,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    v13[0] = 67240448;
    v13[1] = sub_100CD5700(a1 + 2268);
    v14 = 1026;
    v15 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "SignalEnvConfig,inEmergency,%{public}d,fSignalEnvironment,%{public}d", v13, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectAssistanceSignalEnv(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v10 = off_1021CACB0;
  v11 = a2;
  v12 = &v10;
  sub_10178EA00(a1 + 1704, (uint64_t)&v10);
  result = v12;
  if (v12 == &v10)
  {
    v6 = 4;
    result = &v10;
  }
  else
  {
    if (!v12)
      return result;
    v6 = 5;
  }
  return (uint64_t (***)())(*result)[v6]();
}

void sub_1016E7DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016E7E24(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[3];
  _QWORD *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v4 = sub_1001DC538();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 3528) + 5);
  if (!v4)
    goto LABEL_4;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3528) + 5))
  {
    v5 = *(unsigned __int8 *)(sub_1016911FC((_QWORD *)(a1 + 3528), 1) + 5);
LABEL_4:
    v6 = v5 != 0;
    goto LABEL_5;
  }
  v6 = 0;
LABEL_5:
  if (sub_100CD5700(a1 + 2268))
  {
    *(_BYTE *)(a1 + 2296) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,NotAllowed,InEmergency,isEnabled,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v21 = 67109120;
      v22 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "earlyReturnConfig,NotAllowed,InEmergency,isEnabled,%d", &v21);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::updateEarlyReturnConfig(BOOL)", "%s\n", v8);
LABEL_14:
      if (v9 != buf)
        free(v9);
    }
  }
  else if ((a2 & 1) != 0 || *(unsigned __int8 *)(a1 + 2295) != v6)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(unsigned __int8 *)(a1 + 2295);
      *(_DWORD *)buf = 67109632;
      v28 = a2;
      v29 = 1024;
      v30 = v13;
      v31 = 1024;
      v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,Allowed,isForcedUpdate,%d,fIsEarlyReturnEnabled,%d,isEnabled,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v16 = *(unsigned __int8 *)(a1 + 2295);
      v21 = 67109632;
      v22 = a2;
      v23 = 1024;
      v24 = v16;
      v25 = 1024;
      v26 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "earlyReturnConfig,Allowed,isForcedUpdate,%d,fIsEarlyReturnEnabled,%d,isEnabled,%d", &v21, 20, LODWORD(v19[0]));
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::updateEarlyReturnConfig(BOOL)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_BYTE *)(a1 + 2295) = v6;
    v19[0] = off_1021CAD50;
    v19[1] = a1;
    v20 = v19;
    sub_10178EA00(a1 + 1704, (uint64_t)v19);
    v14 = v20;
    if (v20 == v19)
    {
      v15 = 4;
      v14 = v19;
    }
    else
    {
      if (!v20)
        return;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "earlyReturnConfig,NotNeeded,isEnabled,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v21 = 67109120;
      v22 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "earlyReturnConfig,NotNeeded,isEnabled,%d", &v21);
      v9 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::updateEarlyReturnConfig(BOOL)", "%s\n", v11);
      goto LABEL_14;
    }
  }
}

void sub_1016E8330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016E8370(uint64_t a1)
{
  char v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  char v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int16 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int16 v96;
  char v97;
  _BYTE v98[24];
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int16 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[2];
  __int128 v120;
  _BYTE v121[32];
  uint64_t v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  _OWORD v131[2];
  __int128 v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  uint64_t v136;
  _OWORD v137[2];
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  _BYTE v149[24];
  _BYTE *v150;

  sub_100F8CA40((uint64_t)&v50, *(uint64_t **)(a1 + 3528));
  v148 = *(_BYTE *)(a1 + 2292);
  v2 = v148;
  v150 = 0;
  v3 = (char *)operator new(0x540uLL);
  *(_QWORD *)v3 = off_1021CADF0;
  v3[16] = v51;
  *((_QWORD *)v3 + 1) = v50;
  v4 = v54;
  *(_OWORD *)(v3 + 72) = v55;
  v5 = v57;
  *(_OWORD *)(v3 + 88) = v56;
  *(_OWORD *)(v3 + 104) = v5;
  *((_QWORD *)v3 + 15) = v58;
  v6 = v53;
  *(_OWORD *)(v3 + 24) = v52;
  *(_OWORD *)(v3 + 40) = v6;
  *(_OWORD *)(v3 + 56) = v4;
  v7 = v61;
  *((_QWORD *)v3 + 18) = v60;
  *((_QWORD *)v3 + 19) = v7;
  *((_QWORD *)v3 + 22) = v63;
  v8 = v69;
  *((_QWORD *)v3 + 29) = v67;
  *((_OWORD *)v3 + 8) = v59;
  v59 = 0u;
  *((_OWORD *)v3 + 10) = v62;
  v62 = 0u;
  v60 = 0;
  v63 = 0;
  v9 = v65;
  *(_OWORD *)(v3 + 184) = v64;
  *(_OWORD *)(v3 + 200) = v9;
  *(_OWORD *)(v3 + 216) = v66;
  v66 = 0u;
  *((_OWORD *)v3 + 15) = v68;
  *((_QWORD *)v3 + 32) = v8;
  v68 = 0u;
  v67 = 0;
  v69 = 0;
  *((_DWORD *)v3 + 66) = v70;
  v10 = v71;
  v3[274] = v72;
  *((_WORD *)v3 + 136) = v10;
  v11 = v73;
  v12 = v76;
  *((_QWORD *)v3 + 37) = v74;
  *(_OWORD *)(v3 + 280) = v11;
  v73 = 0u;
  v13 = v75;
  *((_QWORD *)v3 + 40) = v12;
  *((_OWORD *)v3 + 19) = v13;
  v75 = 0u;
  v74 = 0;
  v76 = 0;
  v14 = v77;
  v15 = v80;
  *((_QWORD *)v3 + 43) = v78;
  *(_OWORD *)(v3 + 328) = v14;
  v78 = 0;
  v77 = 0u;
  v16 = v79;
  *((_QWORD *)v3 + 46) = v15;
  *((_OWORD *)v3 + 22) = v16;
  v17 = v81;
  *((_QWORD *)v3 + 49) = v82;
  *(_OWORD *)(v3 + 376) = v17;
  v82 = 0;
  v81 = 0u;
  *((_WORD *)v3 + 200) = v83;
  *(_OWORD *)(v3 + 408) = v84;
  *((_QWORD *)v3 + 53) = v85;
  v84 = 0u;
  v18 = v87;
  *((_OWORD *)v3 + 27) = v86;
  *((_OWORD *)v3 + 28) = v18;
  v19 = v88;
  v20 = v89;
  v21 = v91;
  *((_OWORD *)v3 + 31) = v90;
  *((_OWORD *)v3 + 32) = v21;
  *((_OWORD *)v3 + 29) = v19;
  *((_OWORD *)v3 + 30) = v20;
  v22 = v92;
  v23 = v93;
  *(_OWORD *)(v3 + 588) = *(_OWORD *)((char *)v95 + 12);
  v24 = v95[0];
  *((_OWORD *)v3 + 35) = v94;
  *((_OWORD *)v3 + 36) = v24;
  *((_OWORD *)v3 + 33) = v22;
  *((_OWORD *)v3 + 34) = v23;
  *((_WORD *)v3 + 304) = v96;
  v3[610] = v97;
  *(_OWORD *)(v3 + 616) = *(_OWORD *)v98;
  *((_QWORD *)v3 + 79) = *(_QWORD *)&v98[16];
  v85 = 0;
  *(_QWORD *)v98 = 0;
  *((_OWORD *)v3 + 40) = v99;
  *((_QWORD *)v3 + 82) = v100;
  *(_OWORD *)&v98[8] = 0u;
  v99 = 0u;
  v100 = 0;
  v25 = v101;
  *((_QWORD *)v3 + 85) = v102;
  *(_OWORD *)(v3 + 664) = v25;
  v102 = 0;
  v101 = 0u;
  v26 = v103;
  *((_QWORD *)v3 + 88) = v104;
  *((_OWORD *)v3 + 43) = v26;
  v27 = v105;
  *((_QWORD *)v3 + 91) = v106;
  *(_OWORD *)(v3 + 712) = v27;
  v106 = 0;
  v105 = 0u;
  *((_WORD *)v3 + 368) = v107;
  *(_OWORD *)(v3 + 744) = v108;
  *((_QWORD *)v3 + 95) = v109;
  v108 = 0u;
  v109 = 0;
  v28 = v111;
  *((_OWORD *)v3 + 48) = v110;
  *((_OWORD *)v3 + 49) = v28;
  v29 = v112;
  v30 = v113;
  v31 = v115;
  *((_OWORD *)v3 + 52) = v114;
  *((_OWORD *)v3 + 53) = v31;
  *((_OWORD *)v3 + 50) = v29;
  *((_OWORD *)v3 + 51) = v30;
  v32 = v116;
  v33 = v117;
  *(_OWORD *)(v3 + 924) = *(_OWORD *)((char *)v119 + 12);
  v34 = v119[0];
  *((_OWORD *)v3 + 56) = v118;
  *((_OWORD *)v3 + 57) = v34;
  *((_OWORD *)v3 + 54) = v32;
  *((_OWORD *)v3 + 55) = v33;
  *((_OWORD *)v3 + 59) = v120;
  *((_QWORD *)v3 + 120) = *(_QWORD *)v121;
  v35 = *(_OWORD *)&v121[8];
  v120 = 0u;
  *(_OWORD *)v121 = 0u;
  *(_OWORD *)(v3 + 968) = v35;
  *((_QWORD *)v3 + 123) = *(_QWORD *)&v121[24];
  *(_OWORD *)&v121[16] = 0u;
  *((_QWORD *)v3 + 124) = v122;
  *((_DWORD *)v3 + 250) = v123;
  v36 = v124;
  v37 = v125;
  v38 = v126;
  *((_QWORD *)v3 + 132) = v127;
  *((_OWORD *)v3 + 65) = v38;
  *((_OWORD *)v3 + 63) = v36;
  *((_OWORD *)v3 + 64) = v37;
  v3[1064] = v128;
  v39 = v129;
  *((_QWORD *)v3 + 136) = v130;
  *((_OWORD *)v3 + 67) = v39;
  v129 = 0u;
  v130 = 0;
  v40 = v131[0];
  *(_OWORD *)(v3 + 1108) = *(_OWORD *)((char *)v131 + 12);
  *(_OWORD *)(v3 + 1096) = v40;
  *(_OWORD *)(v3 + 1128) = v132;
  *((_QWORD *)v3 + 143) = v133;
  v132 = 0u;
  v133 = 0;
  v3[1152] = v134;
  v41 = v135;
  *((_QWORD *)v3 + 147) = v136;
  *(_OWORD *)(v3 + 1160) = v41;
  v136 = 0;
  v135 = 0u;
  v42 = v137[0];
  *(_OWORD *)(v3 + 1196) = *(_OWORD *)((char *)v137 + 12);
  *((_OWORD *)v3 + 74) = v42;
  *((_OWORD *)v3 + 76) = v138;
  *((_QWORD *)v3 + 154) = v139;
  v138 = 0u;
  v139 = 0;
  v43 = v140;
  *((_QWORD *)v3 + 157) = v141;
  *(_OWORD *)(v3 + 1240) = v43;
  v141 = 0;
  v140 = 0u;
  v44 = v142;
  *((_QWORD *)v3 + 160) = v143;
  *((_OWORD *)v3 + 79) = v44;
  v142 = 0u;
  v143 = 0;
  v45 = v144;
  *((_QWORD *)v3 + 163) = v145;
  *(_OWORD *)(v3 + 1288) = v45;
  v145 = 0;
  v144 = 0u;
  v46 = v146;
  *((_QWORD *)v3 + 166) = v147;
  *((_OWORD *)v3 + 82) = v46;
  v146 = 0u;
  v147 = 0;
  v3[1336] = v2;
  v150 = v3;
  sub_10178EA00(a1 + 1704, (uint64_t)v149);
  v47 = v150;
  if (v150 == v149)
  {
    v48 = 4;
    v47 = v149;
    goto LABEL_5;
  }
  if (v150)
  {
    v48 = 5;
LABEL_5:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  return sub_100857FD0((uint64_t)&v50);
}

void sub_1016E8824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_100857FD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1016E8874(uint64_t a1)
{
  NSObject *v2;
  id v3;
  const char *v5;
  uint8_t *v6;
  _QWORD v7[5];
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "fetchUmtsApn", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "fetchUmtsApn", v8, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfig()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1672), "vendor"), "proxyForService:forClient:", CFSTR("CLTelephonyService"), CFSTR("CLGnssProvider"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1016E8A58;
  v7[3] = &unk_1021C9800;
  v7[4] = a1;
  return objc_msgSend(v3, "fetchUmtsApnWithReply:", v7);
}

void sub_1016E8A58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  __int128 *p_src;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;
  __int128 __src;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  int v24;
  __int128 *v25;
  uint8_t buf[4];
  __int128 *v27;

  v3 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v3 + 1672), "silo");
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v19, a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v21 < 0)
      p_src = (__int128 *)__src;
    *(_DWORD *)buf = 136315138;
    v27 = p_src;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SUPL: UMTS apn:%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v13 = &__src;
    if (v21 < 0)
      v13 = (__int128 *)__src;
    v24 = 136315138;
    v25 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "SUPL: UMTS apn:%s", (const char *)&v24);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfig()_block_invoke", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v6 = HIBYTE(v21);
  if (v21 < 0)
    v6 = *((_QWORD *)&__src + 1);
  if (v6)
  {
    v16 = v19;
    if (SHIBYTE(v21) < 0)
    {
      sub_100115CE4(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      __p = __src;
      v18 = v21;
    }
    v23 = 0;
    v10 = operator new(0x28uLL);
    *v10 = off_1021CAEF0;
    v10[1] = v16;
    *((_OWORD *)v10 + 1) = __p;
    v10[4] = v18;
    __p = 0uLL;
    v18 = 0;
    v23 = v10;
    sub_10178EA00(v3 + 1704, (uint64_t)v22);
    v11 = v23;
    if (v23 == v22)
    {
      v12 = 4;
      v11 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_28;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
    goto LABEL_30;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SUPL: can't find usable APN", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v24) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "SUPL: can't find usable APN", &v24, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::sendSuplApnConfig()_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
LABEL_30:
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__src);
}

void sub_1016E8E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1016E8ED4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  const char *v7;
  uint8_t *v8;
  _QWORD v9[5];
  int v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "fetchUmtsApn,instance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v11[0] = 67109120;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "fetchUmtsApn,instance,%d", v11);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1672), "vendor"), "proxyForService:forClient:", CFSTR("CLTelephonyService"), CFSTR("CLGnssProvider"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1016E90DC;
  v9[3] = &unk_1021C67C8;
  v9[4] = a1;
  v10 = a2;
  return objc_msgSend(v5, "fetchUmtsApnForInstance:WithReply:", a2, v9);
}

void sub_1016E90DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  __int128 *p_src;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 __src;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  int v30;
  __int128 *v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  __int128 *v35;
  __int16 v36;
  int v37;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v4 + 1672), "silo");
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v25, a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    p_src = &__src;
    if (v27 < 0)
      p_src = (__int128 *)__src;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315394;
    v35 = p_src;
    v36 = 1024;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "SUPL: UMTS apn:%s,instance,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v16 = &__src;
    if (v27 < 0)
      v16 = (__int128 *)__src;
    v17 = *(_DWORD *)(a1 + 40);
    v30 = 136315394;
    v31 = v16;
    v32 = 1024;
    v33 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "SUPL: UMTS apn:%s,instance,%d", (const char *)&v30, 18);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v8 = HIBYTE(v27);
  if (v27 < 0)
    v8 = *((_QWORD *)&__src + 1);
  if (v8)
  {
    v21 = v25;
    if (SHIBYTE(v27) < 0)
    {
      sub_100115CE4(&__p, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      __p = __src;
      v23 = v27;
    }
    v12 = *(_DWORD *)(a1 + 40);
    v24 = v12;
    v29 = 0;
    v13 = operator new(0x30uLL);
    *v13 = off_1021CAF90;
    v13[1] = v21;
    *((_OWORD *)v13 + 1) = __p;
    v13[4] = v23;
    __p = 0uLL;
    v23 = 0;
    *((_DWORD *)v13 + 10) = v12;
    v29 = v13;
    sub_10178EA00(v4 + 1704, (uint64_t)v28);
    v14 = v29;
    if (v29 == v28)
    {
      v15 = 4;
      v14 = v28;
    }
    else
    {
      if (!v29)
        goto LABEL_28;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
    goto LABEL_30;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SUPL: can't find usable APN", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v30) = 0;
    LODWORD(v20) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "SUPL: can't find usable APN", &v30, v20);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
LABEL_30:
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__src);
}

void sub_1016E951C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1016E9594(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    *(_DWORD *)buf = 67109376;
    v23 = a2;
    v24 = 1024;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#supl,sendInjectSuplCertReq,index,%d,len,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v11 = *(_DWORD *)(a3 + 8) - *(_DWORD *)a3;
    v19[0] = 67109376;
    v19[1] = a2;
    v20 = 1024;
    v21 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#supl,sendInjectSuplCertReq,index,%d,len,%d", v19, 14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v15 = 0;
  v16 = 0;
  __p = 0;
  sub_1007855D8(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v18 = 0;
  v8 = operator new(0x28uLL);
  *(_QWORD *)v8 = off_1021CB010;
  v8[8] = a2;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  sub_1007855D8((_QWORD *)v8 + 2, __p, (uint64_t)v15, v15 - (_BYTE *)__p);
  v18 = v8;
  sub_10178EA00(a1 + 1704, (uint64_t)v17);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1016E9824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016E988C(uint64_t a1, int a2))()
{
  NSObject *v4;
  uint64_t (***result)();
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendDeleteSuplCert,index,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "sendDeleteSuplCert,index,%d", v12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v9 = off_1021CB090;
  v10 = a2;
  v11 = &v9;
  sub_10178EA00(a1 + 1704, (uint64_t)&v9);
  result = v11;
  if (v11 == &v9)
  {
    v6 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (uint64_t (***)())(*result)[v6]();
}

void sub_1016E9A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016E9AC8(uint64_t a1, int a2))()
{
  uint64_t (***result)();
  uint64_t v3;
  uint64_t (**v4)();
  int v5;
  uint64_t (***v6)();

  v4 = off_1021CB110;
  v5 = a2;
  v6 = &v4;
  sub_10178EA00(a1 + 1704, (uint64_t)&v4);
  result = v6;
  if (v6 == &v4)
  {
    v3 = 4;
    result = &v4;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (uint64_t (***)())(*result)[v3]();
}

void sub_1016E9B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016E9BA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;

  v3[0] = off_1021CB1B0;
  v4 = v3;
  sub_10178EA00(a1 + 1704, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_1016E9C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1016E9C74(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onNilrBegin", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "onNilrBegin", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::onNilrBegin()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 2293) = 1;
  return sub_1017DDC10(a1, 4);
}

uint64_t *sub_1016E9E18(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onNilrEnd", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "onNilrEnd", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::onNilrEnd()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 2293) = 0;
  return sub_1017DDC10(a1, 5);
}

BOOL sub_1016E9FB8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != *a3;
}

void sub_1016E9FCC()
{
  std::string *v0;
  void *v1;
  char v2;
  std::__shared_weak_count *size;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  std::string __p;
  std::string v8;
  std::string __str;
  void *v10;
  __int128 v11;
  std::string v12;
  _QWORD v13[2];

  memset(&v12, 0, sizeof(v12));
  v10 = 0;
  v11 = 0uLL;
  if (sub_10075FA90())
  {
    sub_1015A2E04(&__str, "https://iphone-ld.apple.com/xtra/xtra3Mgrbeji.bin");
    std::string::operator=(&v12, &__str);
    sub_1000BE558((uint64_t)&v8);
    v0 = std::string::append(&v8, "xtra3Mgrbeji.bin");
  }
  else
  {
    sub_1015A2E04(&__str, "https://iphone-ld.apple.com/xtra/xtra3Mgrbej.bin");
    std::string::operator=(&v12, &__str);
    sub_1000BE558((uint64_t)&v8);
    v0 = std::string::append(&v8, "xtra3Mgrbej.bin");
  }
  v1 = (void *)v0->__r_.__value_.__r.__words[0];
  v13[0] = v0->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v0->__r_.__value_.__r.__words[1] + 7);
  v2 = HIBYTE(v0->__r_.__value_.__r.__words[2]);
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v11 + 7) = *(_QWORD *)((char *)v13 + 7);
  v10 = v1;
  *(_QWORD *)&v11 = v13[0];
  HIBYTE(v11) = v2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_1001E4804(&v8);
  memset(&__p, 0, sizeof(__p));
  sub_1005F0F40((uint64_t)v8.__r_.__value_.__l.__data_, "GpsAssistanceUrl", &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v8.__r_.__value_.__l.__size_;
  if (v8.__r_.__value_.__l.__size_)
  {
    v4 = (unint64_t *)(v8.__r_.__value_.__l.__size_ + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = __str.__r_.__value_.__l.__size_;
  if (v6)
    std::string::operator=(&v12, &__str);
  operator new();
}

void sub_1016EA1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  _Unwind_Resume(exception_object);
}

void sub_1016EA2B0(uint64_t a1, const std::string *a2)
{
  const std::string *v2;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8[8];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const std::string *v14;

  v2 = a2;
  std::string::operator=((std::string *)(a1 + 2152), a2);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68289283;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ee,injectAssistanceFile\", \"file\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 2264))
  {
    sub_1016EA4F8(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#ee,InjectAssistanceFile,BB not ready", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ee,InjectAssistanceFile,BB not ready", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectAssistanceFile(std::string)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1016EA4F8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  _WORD v14[8];
  _QWORD v15[3];
  _QWORD *v16;
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ee,force BB to request,enter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ee,force BB to request,enter", v14, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v15[0] = off_1021CCF68;
  v15[1] = a1;
  v16 = v15;
  v3 = sub_10178EA00(a1 + 1704, (uint64_t)v15);
  v4 = v16;
  if (v16 == v15)
  {
    v5 = 4;
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (v3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ee,force BB to request,sent", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ee,force BB to request,sent", v14, v13);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v7);
LABEL_33:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ee,force BB to request,send failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ee,force BB to request,send failed", v14, v13);
      v8 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::forceBbToRequestXtra()", "%s\n", v12);
      goto LABEL_33;
    }
  }
}

void sub_1016EA914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016EA954()
{
  std::string *v0;
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type size;
  std::string __p;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::string __str;
  void *v10[2];
  std::string::size_type v11;
  std::string v12;

  sub_1015A2E04(&v12, "https://iphone-ld.apple.com/xtra/xtra3Mint.bin");
  sub_1000BE558((uint64_t)&__str);
  v0 = std::string::append(&__str, "xtra3Mint.bin");
  v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v11 = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)v10 = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_1001E4804(&v7);
  memset(&__p, 0, sizeof(__p));
  sub_1005F0F40(v7, "GpsRtiUrl", &__p, (uint64_t)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
    std::string::operator=(&v12, &__str);
  sub_1016EAB28();
}

void sub_1016EAAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1016EAB28()
{
  operator new();
}

void sub_1016EABFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1016EAC50(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 2264))
  {
    sub_1016E419C(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v1 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#ee,injectRtiFile,BB not ready", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ee,injectRtiFile,BB not ready", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectRtiFile(std::string)", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
}

uint64_t sub_1016EAE08@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  std::string *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string::size_type size;
  std::string __p;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::string __str;
  void *v13[2];
  std::string::size_type v14;
  std::string v15;

  result = sub_10075F990();
  if ((result & 1) != 0)
  {
    sub_1015A2E04(&v15, "https://iphone-ld.apple.com/xtra/xtra3Mapc.bin");
    sub_1000BE558((uint64_t)&__str);
    v3 = std::string::append(&__str, "xtra3Mapc.bin");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v14 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)v13 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_1001E4804(&v10);
    memset(&__p, 0, sizeof(__p));
    sub_1005F0F40(v10, "GnssApcUrl", &__p, (uint64_t)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
      std::string::operator=(&v15, &__str);
    operator new();
  }
  *a1 = 0;
  return result;
}

void sub_1016EAF7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  operator delete();
}

uint64_t sub_1016EB01C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  std::string *v3;
  void *v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string::size_type size;
  std::string __p;
  std::string __str;
  void *v12;
  __int128 v13;
  std::string v14;
  __int128 v15;

  result = sub_10075F990();
  if ((result & 1) != 0)
  {
    memset(&v14, 0, sizeof(v14));
    v12 = 0;
    v13 = 0uLL;
    if (sub_10075FA90())
    {
      std::string::assign(&v14, "https://iphone-ld.apple.com/xtra/xtra3Mgrbeji_eph.bin");
      sub_1000BE558((uint64_t)&__str);
      v3 = std::string::append(&__str, "xtra3Mgrbeji_eph.bin");
    }
    else
    {
      std::string::assign(&v14, "https://iphone-ld.apple.com/xtra/xtra3Mgrbej_eph.bin");
      sub_1000BE558((uint64_t)&__str);
      v3 = std::string::append(&__str, "xtra3Mgrbej_eph.bin");
    }
    v4 = (void *)v3->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v15 = v3->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v15 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)((char *)&v13 + 7) = *(_QWORD *)((char *)&v15 + 7);
    v12 = v4;
    *(_QWORD *)&v13 = v15;
    HIBYTE(v13) = v5;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_1001E4804(&v15);
    memset(&__p, 0, sizeof(__p));
    sub_1005F0F40(v15, "GnssBroadcastEphemerisUrl", &__p, (uint64_t)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
      std::string::operator=(&v14, &__str);
    operator new();
  }
  *a1 = 0;
  return result;
}

void sub_1016EB218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void sub_1016EB2C4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[10];
  uint8_t buf[4];
  _BYTE v28[14];
  __int16 v29;
  _QWORD *v30;

  if (!sub_10075F990())
    return;
  if (!*(_BYTE *)(a1 + 2264))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#apc,injectApcFile,BB not ready", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v25) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#apc,injectApcFile,BB not ready", &v25, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v10);
      goto LABEL_62;
    }
    return;
  }
  if (*(_QWORD *)(a1 + 3192))
  {
    if (*(_BYTE *)(a1 + 2184) || *(_BYTE *)(a1 + 2185))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(unsigned __int8 *)(a1 + 2184);
        v4 = *(unsigned __int8 *)(a1 + 2185);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v28 = v3;
        *(_WORD *)&v28[4] = 1026;
        *(_DWORD *)&v28[6] = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#apc,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v5 = *(unsigned __int8 *)(a1 + 2184);
        v6 = *(unsigned __int8 *)(a1 + 2185);
        v25 = 67240448;
        *(_DWORD *)v26 = v5;
        *(_WORD *)&v26[4] = 1026;
        *(_DWORD *)&v26[6] = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#apc,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", &v25, 14);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectApcFile()", "%s\n", v7);
LABEL_62:
        if (v8 != buf)
          free(v8);
        return;
      }
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 184))(&v24, a1);
    if (v24)
    {
      v12 = (const char *)(v24 + 24);
      if (*(char *)(v24 + 47) < 0)
        v12 = *(const char **)v12;
      if (sub_1000B78B0(v12))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v14 = (_QWORD *)(v24 + 24);
          if (*(char *)(v24 + 47) < 0)
            v14 = (_QWORD *)*v14;
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)v28 = 0;
          *(_WORD *)&v28[4] = 2082;
          *(_QWORD *)&v28[6] = "";
          v29 = 2081;
          v30 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#apc,feeding assistance\", \"file\":%{private, location:escape_only}s}", buf, 0x1Cu);
        }
        if (!*(_BYTE *)(a1 + 2016))
          sub_1016E4AC4(a1);
        sub_101766F9C(a1 + 2192, v24 + 24);
        if (!*(_BYTE *)(a1 + 2016))
          sub_1016E5000(a1);
LABEL_57:
        v20 = v24;
        v24 = 0;
        if (v20)
          sub_10085B928((uint64_t)&v24, v20);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v19 = (_QWORD *)(v24 + 24);
        if (*(char *)(v24 + 47) < 0)
          v19 = (_QWORD *)*v19;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#apc,file does not exist,%{private}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v22 = (_QWORD *)(v24 + 24);
      if (*(char *)(v24 + 47) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136380675;
      *(_QWORD *)v26 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#apc,file does not exist,%{private}s", &v25, 12);
      v17 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v23);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#apc,empty filename", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v25) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#apc,empty filename", &v25, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v16);
    }
    if (v17 != buf)
      free(v17);
    goto LABEL_57;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#apc,measurement processor not ready", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#apc,measurement processor not ready", &v25, 2);
    v8 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectApcFile()", "%s\n", v21);
    goto LABEL_62;
  }
}

void sub_1016EBAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    sub_10085B928((uint64_t)&a12, v13);
  _Unwind_Resume(exception_object);
}

void sub_1016EBAD8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  _QWORD *v22;
  const char *v23;
  double v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint8_t v27[4];
  _BYTE v28[14];
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;
  _BYTE buf[1638];

  if (!sub_10075F990())
    return;
  if (*(_BYTE *)(a1 + 2264))
  {
    if (*(_BYTE *)(a1 + 2184) || *(_BYTE *)(a1 + 2185))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(unsigned __int8 *)(a1 + 2184);
        v4 = *(unsigned __int8 *)(a1 + 2185);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v3;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v4;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#eph,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v5 = *(unsigned __int8 *)(a1 + 2184);
        v6 = *(unsigned __int8 *)(a1 + 2185);
        *(_DWORD *)v27 = 67240448;
        *(_DWORD *)v28 = v5;
        *(_WORD *)&v28[4] = 1026;
        *(_DWORD *)&v28[6] = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#eph,ignoring,isConformanceMode,%{public}d,isSimulatorMode,%{public}d", v27, 14);
        v8 = (char *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v7);
LABEL_56:
        if (v8 != buf)
          free(v8);
        return;
      }
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 200))(&v26, a1);
    if (v26)
    {
      v10 = (const char *)(v26 + 24);
      if (*(char *)(v26 + 47) < 0)
        v10 = *(const char **)v10;
      if (sub_1000B78B0(v10))
      {
        v11 = (_QWORD *)(v26 + 24);
        if (*(char *)(v26 + 47) < 0)
          v11 = (_QWORD *)*v11;
        sub_100838A88((void (__cdecl ***)(std::ifstream *__hidden))buf, (uint64_t)v11, 12);
        *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24) + 8] &= ~0x1000u;
        v12 = sub_100B2D938(buf);
        v25 = 0;
        v24 = sub_100214380(a1 + 3200, &v25) + (double)(unint64_t)v12 * -0.000000001;
        sub_100067B0C(a1 + 8, (const char *)(v26 + 24), 1, 1, &v24);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v14 = (_QWORD *)(v26 + 24);
          if (*(char *)(v26 + 47) < 0)
            v14 = (_QWORD *)*v14;
          *(_DWORD *)v27 = 68290051;
          *(_DWORD *)v28 = 0;
          *(_WORD *)&v28[4] = 2082;
          *(_QWORD *)&v28[6] = "";
          v29 = 2081;
          v30 = v14;
          v31 = 2050;
          v32 = v12;
          v33 = 2050;
          v34 = v24;
          v35 = 1026;
          v36 = v25;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#eph,feeding assistance\", \"file\":%{private, location:escape_only}s, \"header GPS ns\":%{public}llu, \"ageSeconds\":\"%{public}f\", \"isAgeReliable\":%{public}hhd}", v27, 0x36u);
        }
        if (!*(_BYTE *)(a1 + 2016))
          sub_1016E4AC4(a1);
        sub_1017672E4(a1 + 2192, v26 + 24, *(_DWORD *)(a1 + 2148));
        if (!*(_BYTE *)(a1 + 2016))
          sub_1016E5000(a1);
        sub_100838B94(buf);
LABEL_51:
        v20 = v26;
        v26 = 0;
        if (v20)
          sub_10085B928((uint64_t)&v26, v20);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v19 = (_QWORD *)(v26 + 24);
        if (*(char *)(v26 + 47) < 0)
          v19 = (_QWORD *)*v19;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#eph,file does not exist,%{private}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_51;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v22 = (_QWORD *)(v26 + 24);
      if (*(char *)(v26 + 47) < 0)
        v22 = (_QWORD *)*v22;
      *(_DWORD *)v27 = 136380675;
      *(_QWORD *)v28 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,file does not exist,%{private}s", v27, 12);
      v17 = (char *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v23);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#eph,empty filename", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_51;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      *(_WORD *)v27 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#eph,empty filename", v27, 2);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v16);
    }
    if (v17 != buf)
      free(v17);
    goto LABEL_51;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#eph,injectBroadcastEphemerisFile,BB not ready", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    *(_WORD *)v27 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#eph,injectBroadcastEphemerisFile,BB not ready", v27, 2);
    v8 = (char *)v21;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::injectBroadcastEphemerisFile()", "%s\n", v21);
    goto LABEL_56;
  }
}

void sub_1016EC25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v24;

  v24 = a14;
  a14 = 0;
  if (v24)
    sub_10085B928((uint64_t)&a14, v24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EC2A8(uint64_t a1, qmi::Client *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t buf;
  __int16 v75;
  const char *v76;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v75 = 2082;
    v76 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,Register PDS\"}", (uint8_t *)&buf, 0x12u);
  }
  *(_BYTE *)(a1 + 2290) = 0;
  v72[0] = off_1021CB250;
  v72[1] = a1;
  v73 = v72;
  sub_1016ECAFC(a1, (uint64_t)a2, (uint64_t)v72);
  v5 = v73;
  if (v73 == v72)
  {
    v6 = 4;
    v5 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v70[0] = off_1021CB2D0;
  v70[1] = a1;
  v71 = v70;
  sub_1016ECC44(a1, (uint64_t)a2, (uint64_t)v70);
  v7 = v71;
  if (v71 == v70)
  {
    v8 = 4;
    v7 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v68[0] = off_1021CB380;
  v68[1] = a1;
  v69 = v68;
  sub_1016ECD8C(a1, (uint64_t)a2, (uint64_t)v68);
  v9 = v69;
  if (v69 == v68)
  {
    v10 = 4;
    v9 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  v66[0] = off_1021CB440;
  v66[1] = a1;
  v67 = v66;
  sub_1016ECED4(a1, (uint64_t)a2, (uint64_t)v66);
  v11 = v67;
  if (v67 == v66)
  {
    v12 = 4;
    v11 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
  v64[0] = off_1021CB500;
  v64[1] = a1;
  v65 = v64;
  sub_1016ED01C(a1, (uint64_t)a2, (uint64_t)v64);
  v13 = v65;
  if (v65 == v64)
  {
    v14 = 4;
    v13 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_30;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_30:
  v62[0] = off_1021CB5C0;
  v62[1] = a1;
  v63 = v62;
  sub_1016ED164(a1, (uint64_t)a2, (uint64_t)v62);
  v15 = v63;
  if (v63 == v62)
  {
    v16 = 4;
    v15 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_35;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_35:
  v60[0] = off_1021CB680;
  v60[1] = a1;
  v61 = v60;
  sub_1016ED2AC(a1, (uint64_t)a2, (uint64_t)v60);
  v17 = v61;
  if (v61 == v60)
  {
    v18 = 4;
    v17 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_40;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_40:
  v58[0] = off_1021CB740;
  v58[1] = a1;
  v59 = v58;
  sub_1016ED3F4(a1, (uint64_t)a2, (uint64_t)v58);
  v19 = v59;
  if (v59 == v58)
  {
    v20 = 4;
    v19 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_45;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_45:
  v56[0] = off_1021CB800;
  v56[1] = a1;
  v57 = v56;
  sub_1016ED53C(a1, (uint64_t)a2, (uint64_t)v56);
  v21 = v57;
  if (v57 == v56)
  {
    v22 = 4;
    v21 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_50;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_50:
  v54[0] = off_1021CB8C0;
  v54[1] = a1;
  v55 = v54;
  sub_1016ED684(a1, (uint64_t)a2, (uint64_t)v54);
  v23 = v55;
  if (v55 == v54)
  {
    v24 = 4;
    v23 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_55;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_55:
  v52[0] = off_1021CB980;
  v52[1] = a1;
  v53 = v52;
  sub_1016ED7CC(a1, (uint64_t)a2, (uint64_t)v52);
  v25 = v53;
  if (v53 == v52)
  {
    v26 = 4;
    v25 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_60;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_60:
  v50[0] = off_1021CBA40;
  v50[1] = a1;
  v51 = v50;
  sub_1016ED914(a1, (uint64_t)a2, (uint64_t)v50);
  v27 = v51;
  if (v51 == v50)
  {
    v28 = 4;
    v27 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_65;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_65:
  v48[0] = off_1021CBB00;
  v48[1] = a1;
  v49 = v48;
  sub_1016EDA5C(a1, (uint64_t)a2, (uint64_t)v48);
  v29 = v49;
  if (v49 == v48)
  {
    v30 = 4;
    v29 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_70;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_70:
  v46[0] = off_1021CBBC0;
  v46[1] = a1;
  v47 = v46;
  sub_1016EDBA4(a1, (uint64_t)a2, (uint64_t)v46);
  v31 = v47;
  if (v47 == v46)
  {
    v32 = 4;
    v31 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_75;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_75:
  v44[0] = off_1021CBC80;
  v44[1] = a1;
  v45 = v44;
  sub_1016EDCEC(a1, (uint64_t)a2, (uint64_t)v44);
  v33 = v45;
  if (v45 == v44)
  {
    v34 = 4;
    v33 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_80;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_80:
  v42[0] = off_1021CBD40;
  v42[1] = a1;
  v43 = v42;
  sub_1016EDE34(a1, (uint64_t)a2, (uint64_t)v42);
  v35 = v43;
  if (v43 == v42)
  {
    v36 = 4;
    v35 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_85;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_85:
  v40[0] = off_1021CBDD0;
  v40[1] = a1;
  v41 = v40;
  sub_1016EDF7C(a1, (uint64_t)a2, (uint64_t)v40);
  v37 = v41;
  if (v41 == v40)
  {
    v38 = 4;
    v37 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_90;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_90:
  sub_100197040();
  result = sub_10075D338();
  if ((_DWORD)result)
    return qmi::Client::setIndShouldWake(a2, 1u, 1);
  return result;
}

void sub_1016EC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t *v52;
  uint64_t *v54;
  uint64_t v55;

  v54 = a12;
  if (a12 == v52)
  {
    v55 = 4;
    v54 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016ECAF4()
{
  JUMPOUT(0x1016ECAECLL);
}

uint64_t sub_1016ECAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101707BA4;
  v8[3] = &unk_1021C6CB0;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101707C20;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 1, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ECC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ECC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101707D34;
  v8[3] = &unk_1021C6D98;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101707DB0;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 32, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ECD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ECD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101707EC4;
  v8[3] = &unk_1021CB340;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101707F80;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 21848, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ECE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ECED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1017081B4;
  v8[3] = &unk_1021CB400;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101708270;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 133, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ECFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1017084A4;
  v8[3] = &unk_1021CB4C0;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101708560;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 134, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101708794;
  v8[3] = &unk_1021CB580;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101708850;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 159, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101708A84;
  v8[3] = &unk_1021CB640;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101708B40;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 161, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101708D70;
  v8[3] = &unk_1021CB700;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101708E2C;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 145, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709060;
  v8[3] = &unk_1021CB7C0;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10170911C;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 172, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709350;
  v8[3] = &unk_1021CB880;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10170940C;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 167, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709640;
  v8[3] = &unk_1021CB940;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1017096FC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 171, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016ED8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016ED914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709930;
  v8[3] = &unk_1021CBA00;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1017099EC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 177, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EDA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EDA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709C20;
  v8[3] = &unk_1021CBAC0;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101709CDC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 152, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EDB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EDBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_101709F10;
  v8[3] = &unk_1021CBB80;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101709FCC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 184, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EDCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EDCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10170A200;
  v8[3] = &unk_1021CBC40;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10170A2BC;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 185, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EDDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EDE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10170A4EC;
  v8[3] = &unk_1021CBD00;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10170A5A8;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 186, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EDF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016EDF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE *v10;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10170A7DC;
  v8[3] = &unk_1021C7098;
  v8[4] = a1;
  v4 = v9;
  sub_100270E34((uint64_t)v9, a3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10170A858;
  v7[3] = &unk_1021C6CE8;
  v7[4] = v8;
  result = qmi::Client::setIndHandler(a2, 178, v7);
  if (v10 == v9)
  {
    v6 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
    v4 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
}

void sub_1016EE080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016EE0C4(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[8];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1016EE248;
  v5[3] = &unk_1021C9828;
  v5[4] = &v6;
  *(_QWORD *)buf = v5;
  sub_10169B8BC(a2, 16, (uint64_t)buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = v7[3];
    *(_QWORD *)buf = 68289282;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"SpoofingDetected\", \"detectedInconsistency\":%{public, location:qmi::pds::SpoofDetectionEvent}lld}", buf, 0x1Cu);
  }
  *(_BYTE *)(a1 + 2291) = v7[3] != 0;
  _Block_object_dispose(&v6, 8);
}

void sub_1016EE230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1016EE248(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_1016EE25C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ec,#imag,device report,0x%x", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = *a2;
    v19[0] = 67109120;
    v19[1] = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ec,#imag,device report,0x%x", v19);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_BYTE *)(a1 + 2291) = 0;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,pos", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,#imag,device flag,pos", v19, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if ((*(_BYTE *)a2 & 2) != 0)
  {
    *(_BYTE *)(a1 + 2291) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v19[0]) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,#imag,device flag,time", v19, v18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    *(_BYTE *)(a1 + 2291) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ec,#imag,device flag,nav", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v19[0]) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,#imag,device flag,nav", v19, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handleSpoofingReportTlv(const pds::tlv::SpoofingReport &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1016EE7BC(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD v18[4];
  uint8_t buf[8];

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1016EEC54;
  v13[3] = &unk_1021C9850;
  v13[4] = &v14;
  *(_QWORD *)buf = v13;
  sub_10169B8BC(a2, 16, (uint64_t)buf);
  v2 = v15[3];
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "EngineMonitorStatus,%{public}u", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v18[0] = 67240192;
    v18[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "EngineMonitorStatus,%{public}u", v18, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if ((v2 & 1) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,EngineMonitorStatus,meas report unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v18[0]) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,EngineMonitorStatus,meas report unavailable", v18, v12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if ((v2 & 2) != 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,EngineMonitorStatus,pos report unavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v18[0]) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,EngineMonitorStatus,pos report unavailable", v18, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssEngineMonitorStatus(const pds::gnssEngineMonitorIndication::Indication &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  _Block_object_dispose(&v14, 8);
}

void sub_1016EEC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1016EEC54(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_1016EEC68(_QWORD *a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  uint8_t *v29;
  uint8_t buf[24];
  uint8_t *v31;

  v3 = a1[399];
  if (v3)
  {
    if (sub_10176E498(v3, a2, (uint64_t)(a1 + 321), (uint64_t)(a1 + 54)) && !sub_10177BE28(a1[399] + 640))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,enabling session", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        LOWORD(v24[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,GNSS meas RX sync pulse,enabling session", v24, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      if (a1[191])
      {
        sub_100270E34((uint64_t)v28, (uint64_t)(a1 + 184));
        sub_100270E34((uint64_t)v26, (uint64_t)(a1 + 188));
        (*(void (**)(_QWORD *, _BYTE *, _BYTE *))(*a1 + 224))(a1, v28, v26);
        v5 = v27;
        if (v27 == v26)
        {
          v6 = 4;
          v5 = v26;
        }
        else
        {
          if (!v27)
            goto LABEL_27;
          v6 = 5;
        }
        (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_27:
        v12 = v29;
        if (v29 == v28)
        {
          v13 = 4;
          v12 = v28;
LABEL_45:
          (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
          return;
        }
        goto LABEL_42;
      }
      *(_QWORD *)buf = off_1021CBE50;
      v31 = buf;
      v25 = v24;
      v23 = v22;
      v24[0] = off_1021CBED0;
      v21 = v20;
      v22[0] = off_1021CBE50;
      v20[0] = off_1021CBED0;
      (*(void (**)(_QWORD *, _QWORD *, _QWORD *))(*a1 + 224))(a1, v22, v20);
      v10 = v21;
      if (v21 == v20)
      {
        v11 = 4;
        v10 = v20;
      }
      else
      {
        if (!v21)
          goto LABEL_31;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_31:
      v14 = v23;
      if (v23 == v22)
      {
        v15 = 4;
        v14 = v22;
      }
      else
      {
        if (!v23)
          goto LABEL_36;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_36:
      v16 = v25;
      if (v25 == v24)
      {
        v17 = 4;
        v16 = v24;
      }
      else
      {
        if (!v25)
          goto LABEL_41;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_41:
      v12 = v31;
      if (v31 == buf)
      {
        v13 = 4;
        v12 = buf;
        goto LABEL_45;
      }
LABEL_42:
      if (!v12)
        return;
      v13 = 5;
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gnssmeas,meas indication without processor to handle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,meas indication without processor to handle", v24, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_1016EF0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  char *v34;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  v36 = a14;
  if (a14 == v34)
  {
    v37 = 4;
    v36 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  v38 = a18;
  if (a18 == &a15)
  {
    v39 = 4;
    v38 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_11:
  v40 = a22;
  if (a22 == &a19)
  {
    v41 = 4;
    v40 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_16:
  v42 = a34;
  if (a34 == &a31)
  {
    v43 = 4;
    v42 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_21;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_21:
  _Unwind_Resume(exception_object);
}

void sub_1016EF204(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 3192))
  {
    sub_101775B7C(*(_QWORD *)(a1 + 3192), a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssmeas,poly indication without processor to handle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,poly indication without processor to handle", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1016EF3C8(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 3192);
  if (v2)
  {
    sub_101778490(v2, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gnssmeas,time conv indication without processor to handle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,time conv indication without processor to handle", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1016EF580(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,klobuchar,indication", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,klobuchar,indication", v12, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(_QWORD *)(a1 + 3192);
  if (v5)
  {
    sub_10177A770(v5, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,klobuchar indication without processor to handle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,klobuchar indication without processor to handle", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1016EF858(uint64_t a1, qmi::MessageBase *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  double v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  CFAbsoluteTime v36;
  _BYTE buf[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  CFAbsoluteTime v43;

  v25 = 0;
  v26 = (float *)&v25;
  v27 = 0x2020000000;
  v28 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1016EFBF0;
  v16[3] = &unk_1021C9878;
  v16[4] = &v25;
  *(_QWORD *)buf = v16;
  sub_10170AE0C(a2, 16, (uint64_t)buf);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1016EFC04;
  v15[3] = &unk_1021C98A0;
  v15[4] = &v21;
  *(_QWORD *)buf = v15;
  sub_10169CCF8(a2, 17, (uint64_t)buf);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1016EFC28;
  v14[3] = &unk_1021C98C8;
  v14[4] = &v17;
  *(_QWORD *)buf = v14;
  sub_10169CCF8(a2, 18, (uint64_t)buf);
  v4 = v26[6];
  v5 = v22[3];
  v6 = v18[3];
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v8 = v4;
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = v8;
    v38 = 2050;
    v39 = v5;
    v40 = 2050;
    v41 = v6;
    v42 = 2050;
    v43 = Current;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "PwrMeas,avgMw,%{public}.3f,durationSeconds,%{public}.3f,activeSeconds,%{public}.3f,time,%{public}.3f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v29 = 134349824;
    v30 = v8;
    v31 = 2050;
    v32 = v5;
    v33 = 2050;
    v34 = v6;
    v35 = 2050;
    v36 = Current;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "PwrMeas,avgMw,%{public}.3f,durationSeconds,%{public}.3f,activeSeconds,%{public}.3f,time,%{public}.3f", &v29, 42);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsPwrConsumptionReport(const pds::GnssPowerConsumptionIndication::Indication &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v10 = *(_QWORD *)(a1 + 1560);
  if (v10)
  {
    *(CFAbsoluteTime *)v13 = Current;
    v13[1] = v5;
    v13[2] = v6;
    *(double *)&v13[3] = v8;
    v13[4] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v10, v13);
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
}

void sub_1016EFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

float sub_1016EFBF0(uint64_t a1, float *a2)
{
  float result;

  result = *a2;
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return result;
}

double sub_1016EFC04(uint64_t a1, _DWORD *a2, double a3)
{
  double result;

  LODWORD(a3) = *a2;
  result = (double)*(unint64_t *)&a3 * 0.001;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

double sub_1016EFC28(uint64_t a1, _DWORD *a2, double a3)
{
  double result;

  LODWORD(a3) = *a2;
  result = (double)*(unint64_t *)&a3 * 0.001;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1016EFC4C(uint64_t a1, qmi::MessageBase *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  _BYTE v11[4];
  int v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v11[0] = 0;
  sub_100014D50(a2, 1u, (uint64_t)v11);
  if (v11[0])
  {
    v3 = v12;
    *(_DWORD *)(a1 + 4096) = v12;
    *(_DWORD *)(a1 + 1116) = v3;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(a1 + 4096);
      *(_DWORD *)buf = 67240192;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "XOCalibState,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v6 = *(_DWORD *)(a1 + 4096);
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "XOCalibState,%{public}d", v13, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsXOCalibrationState(const pds::XOCalibrationStateIndication::Indication &)", "%s\n", v7);
LABEL_19:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "XOCalibState err", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "XOCalibState err", v13, 2);
      v8 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handlePdsXOCalibrationState(const pds::XOCalibrationStateIndication::Indication &)", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

void sub_1016EFF48(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc,indication", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssmeas,apc,indication", v12, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(_QWORD **)(a1 + 3192);
  if (v5)
  {
    sub_10177AC0C(v5, a2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,apc,indication measurement processor not ready", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,apc,indication measurement processor not ready", v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1016F0220(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1016F0454;
  v8[3] = &unk_1021C65D0;
  v8[5] = &v13;
  v8[6] = a1;
  v8[4] = &v17;
  *(_QWORD *)buf = v8;
  sub_10169B82C(a2, 1, (uint64_t)buf);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1016F05A4;
  v7[3] = &unk_1021C65F8;
  v7[4] = &v9;
  *(_QWORD *)buf = v7;
  sub_10169B8BC(a2, 16, (uint64_t)buf);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *((unsigned __int8 *)v18 + 24);
    v5 = *((unsigned __int8 *)v14 + 24);
    v6 = v10[3];
    *(_QWORD *)buf = 68289794;
    v22 = 2082;
    v23 = "";
    v24 = 1026;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 1026;
    v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PdsServiceState\", \"unlock\":%{public}hhd, \"trackingState\":%{public}d, \"allowedServices\":%{public}d}", buf, 0x24u);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1016F0420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1016F0454(_QWORD *a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v2 = a1[6];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *a2;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a2[1];
  if (*(_BYTE *)(v2 + 2016)
    && (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) != 2))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
      v7[0] = 68289538;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = v5;
      v12 = 1026;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,service state indication hints tracking state mismatch\", \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)v7, 0x1Eu);
    }
  }
}

uint64_t sub_1016F05A4(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_1016F05B8(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[6];
  _QWORD v25[5];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  int v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  _BYTE buf[24];
  _BYTE v49[6];
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;

  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1016F0BEC;
  v25[3] = &unk_1021C98F0;
  v25[4] = &v38;
  *(_QWORD *)buf = v25;
  sub_10170AE9C(a2, 1, (uint64_t)buf);
  if (qmi::MessageBase::findTlvValue(a2, 0x10u))
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1016F0C00;
    v24[3] = &unk_1021C9918;
    v24[4] = &v34;
    v24[5] = &v30;
    *(_QWORD *)buf = v24;
    sub_10170AF2C(a2, 16, (uint64_t)buf);
  }
  if (qmi::MessageBase::findTlvValue(a2, 0x11u))
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1016F0C24;
    v23[3] = &unk_1021C9940;
    v23[4] = &v26;
    *(_QWORD *)buf = v23;
    sub_10169B8BC(a2, 17, (uint64_t)buf);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((unsigned __int8 *)v39 + 24);
    v6 = *((unsigned __int16 *)v35 + 12);
    v7 = *((_DWORD *)v31 + 6);
    v8 = v27[3];
    *(_DWORD *)buf = 68290050;
    *(_WORD *)&buf[8] = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v5;
    *(_WORD *)v49 = 1026;
    *(_DWORD *)&v49[2] = v6;
    v50 = 1026;
    v51 = v7;
    v52 = 2050;
    v53 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"handlePdsDpoState\", \"engaged\":%{public}d, \"gps_week\":%{public}d, \"gps_tow_ms\":%{public}d, \"disengage_mask\":%{public, location:qmi::pds::QmiDpoDisengageFlags}lld}", buf, 0x2Eu);
  }
  if (*((_BYTE *)v39 + 24))
  {
    v9 = 2;
  }
  else
  {
    v10 = v27[3];
    if (v10)
    {
      if ((v10 & 0x303) != 0)
        v9 = 1;
      else
        v9 = 2;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Unknown DPO disengagement state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unknown DPO disengagement state", &v42, 2);
        v21 = (char *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsDpoState(const pds::DpoStateIndication::Indication &)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v9 = 0;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)v39 + 24))
      v13 = "ENGAGED";
    else
      v13 = "DISENGAGED";
    v14 = v27[3];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v49 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DPO: %s,0x%08llx,sigqual:, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    if (*((_BYTE *)v39 + 24))
      v16 = "ENGAGED";
    else
      v16 = "DISENGAGED";
    v17 = v27[3];
    v42 = 136315650;
    v43 = v16;
    v44 = 2048;
    v45 = v17;
    v46 = 1024;
    v47 = v9;
    LODWORD(v22) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DPO: %s,0x%08llx,sigqual:, %d", (const char *)&v42, v22, LODWORD(v23[0]));
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsDpoState(const pds::DpoStateIndication::Indication &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v15 = *(_QWORD *)(a1 + 1624);
  if (v15)
  {
    *(_DWORD *)buf = v9;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 48))(v15, buf);
  }
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
}

void sub_1016F0B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1016F0BEC(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t sub_1016F0C00(uint64_t result, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_WORD *)a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t sub_1016F0C24(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_1016F0C38(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v3 = sub_100512544();
  sub_1005125F0(*(unsigned __int8 *)(a2 + 14));
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 15);
    v6[0] = 68289794;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2050;
    v10 = v5;
    v11 = 1026;
    v12 = v3;
    v13 = 1026;
    v14 = sub_100512544();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#gpsUtcLeapSecondUpdate\", \"UtcTimestampMs\":%{public}llu, \"OldGpsUtcLeapSec\":%{public}d, \"NewGpsUtcLeapSec\":%{public}d}", (uint8_t *)v6, 0x28u);
  }
}

void sub_1016F0D50(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  char v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  _DWORD v31[2];
  __int16 v32;
  int v33;
  uint8_t buf[8];
  __int16 v35;
  int v36;

  if (qmi::MessageBase::findTlvValue(this, 1u))
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x2020000000;
    v30 = 0;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1016F1544;
    v26[3] = &unk_1021C9968;
    v26[4] = &v27;
    *(_QWORD *)buf = v26;
    sub_10170AE9C(this, 1, (uint64_t)buf);
    v4 = *(_QWORD *)(a1 + 3192);
    if (v4 && !sub_10177BE28(v4 + 640))
    {
      if (*((_BYTE *)v28 + 24))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,sending", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          LOWORD(v31[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,GNSS meas RX sync pulse,sending", v31, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 240))(a1, 0);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#tt,GNSS meas RX sync pulse,not ready", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          LOWORD(v31[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,GNSS meas RX sync pulse,not ready", v31, 2);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
    }
    if (*(_BYTE *)(a1 + 2185) && *(_BYTE *)(a1 + 2298))
    {
      if (*((_BYTE *)v28 + 24))
      {
        v8 = 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#tt,simulator mode pulse config,not ready for pulse", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          LOWORD(v31[0]) = 0;
          LODWORD(v25) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,simulator mode pulse config,not ready for pulse", v31, v25);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        v8 = 0;
        *(_BYTE *)(a1 + 2298) = 0;
      }
      *(_BYTE *)(a1 + 2297) = v8;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v11 = *((unsigned __int8 *)v28 + 24);
        v12 = *(unsigned __int8 *)(a1 + 2297);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v11;
        v35 = 1024;
        v36 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#tt,simulator mode isReadyForPulse,%hhu,fSimulatorModeTimeTransferActive,%hhu", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v15 = *((unsigned __int8 *)v28 + 24);
        v16 = *(unsigned __int8 *)(a1 + 2297);
        v31[0] = 67109376;
        v31[1] = v15;
        v32 = 1024;
        v33 = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,simulator mode isReadyForPulse,%hhu,fSimulatorModeTimeTransferActive,%hhu", v31, 14);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
    sub_10023A554(a1, *((_BYTE *)v28 + 24));
    if (qmi::MessageBase::findTlvValue(this, 0x10u))
    {
      *(_QWORD *)buf = &stru_1021C99A8;
      sub_10170AFC4(this, 16, (uint64_t)buf);
    }
    _Block_object_dispose(&v27, 8);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#error, #tt, mandatory ready tlv not received in time transfer status indication", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v27) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#error, #tt, mandatory ready tlv not received in time transfer status indication", &v27, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handlePdsTimeTransfer(const pds::TimeTransferIndication::Indication &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_10023A554(a1, 0);
  }
}

void sub_1016F150C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1016F1544(uint64_t result, _BYTE *a2)
{
  if (*a2 == 1)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1016F1564(id a1, const timeTransferData *a2)
{
  NSObject *v3;
  int var0;
  unsigned int var1;
  double var2;
  double var3;
  int var4;
  int var5;
  int var6;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    var0 = a2->var0;
    var1 = a2->var1;
    var2 = a2->var2;
    var3 = a2->var3;
    var4 = a2->var4;
    var5 = a2->var5;
    var6 = a2->var6;
    v11[0] = 68290818;
    v12 = 2082;
    v11[1] = 0;
    v13 = "";
    v14 = 1026;
    v15 = var0;
    v16 = 1026;
    v17 = var1;
    v18 = 2050;
    v19 = var2;
    v20 = 2050;
    v21 = var3;
    v22 = 1026;
    v23 = var4;
    v24 = 1026;
    v25 = var5;
    v26 = 1026;
    v27 = var6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, time info\", \"week\":%{public}u, \"ms\":%{public}u, \"bias\":\"%{public}f\", \"uncertainty\":\"%{public}f\", \"source\":%{public}hhd, \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)v11, 0x44u);
  }
}

void sub_1016F169C(_DWORD *a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE v9[4];
  int v10;
  _BYTE v11[4];
  int v12;
  _BYTE v13[4];
  int v14;
  _BYTE v15[4];
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v15[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v15);
  v13[0] = 0;
  sub_100014D50(a2, 0x11u, (uint64_t)v13);
  v11[0] = 0;
  sub_100014D50(a2, 0x12u, (uint64_t)v11);
  v9[0] = 0;
  sub_100014D50(a2, 0x13u, (uint64_t)v9);
  if (v15[0])
    a1[275] += v16;
  if (v13[0])
    a1[276] += v14;
  if (v11[0])
    a1[277] += v12;
  if (v9[0])
    a1[278] += v10;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (v15[0])
      v5 = v16;
    else
      v5 = -1;
    if (v13[0])
      v6 = v14;
    else
      v6 = -1;
    if (v11[0])
      v7 = v12;
    else
      v7 = -1;
    if (v9[0])
      v8 = v10;
    else
      v8 = -1;
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#wwanAntTuneL5Blanking,report\", \"L5BestDurationMsec\":%{public}d, \"L5OtherDurationMsec\":%{public}d, \"L5WorstDurationMsec\":%{public}d, \"wwanAntTuneL5BlankingDurationMsec\":%{public}d}", buf, 0x2Au);
  }
}

void sub_1016F1890(uint64_t a1, qmi::MessageBase *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];
  unsigned __int8 v9[8];
  _QWORD v10[3];

  sub_1016F1A98(a2, v9);
  if (v9[0])
  {
    v2 = (unsigned __int8 *)v10[0];
    v3 = (unsigned __int8 *)v10[1];
    while (v2 != v3)
    {
      sub_100CC1EA4(v2);
      v2 += 24;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "consolidated NMEA without payload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "consolidated NMEA without payload", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handleConsolidatedNmea(const pds::ConsolidatedNmeaIndication::Indication &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  if (v9[0])
  {
    *(_QWORD *)buf = v10;
    sub_100259608((void ***)buf);
  }
}

void sub_1016F1A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (*(_BYTE *)(v13 - 72))
  {
    a13 = v13 - 64;
    sub_100259608((void ***)&a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1016F1A98(qmi::MessageBase *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  *a2 = 0;
  sub_10170B1A8(a1, 1u, a2);
}

void sub_1016F1ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  _BYTE *v10;

  if (*v10)
  {
    a10 = v10 + 8;
    sub_100259608((void ***)&a10);
    *v10 = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_1016F1AF4(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  NSObject *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  double v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint8_t *v25;
  _QWORD v26[5];
  _BYTE v27[4];
  float v28;
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[5];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint8_t v36[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  double v50;
  uint8_t buf[8];
  __int128 v52;
  __n128 (*v53)(uint64_t, uint64_t);
  uint64_t (*v54)();
  void *v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  if (qmi::MessageBase::findTlvValue(this, 1u) && qmi::MessageBase::findTlvValue(this, 2u))
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x2020000000;
    v35 = 0;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1016F221C;
    v31[3] = &unk_1021C99D0;
    v31[4] = &v32;
    *(_QWORD *)buf = v31;
    sub_10170AE9C(this, 1, (uint64_t)buf);
    if (*((_BYTE *)v33 + 24))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&v52 = buf;
      *((_QWORD *)&v52 + 1) = 0x7812000000;
      v53 = sub_1002074D8;
      v54 = nullsub_60;
      v55 = &unk_102080316;
      v56 = 0;
      v57 = -1082130432;
      v58 = 0;
      v59 = 0;
      v60 = xmmword_101CD0FE0;
      v62 = 0;
      v63 = 0;
      v61 = 0;
      v64 = 0;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1016F2238;
      v30[3] = &unk_1021C99F8;
      v30[4] = buf;
      v30[5] = a1;
      *(_QWORD *)v36 = v30;
      sub_10170AFC4(this, 2, (uint64_t)v36);
      if (qmi::MessageBase::findTlvValue(this, 0x10u))
      {
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1016F26DC;
        v29[3] = &unk_1021C9A20;
        v29[4] = buf;
        v29[5] = a1;
        *(_QWORD *)v36 = v29;
        sub_10170B67C(this, 16, v36);
      }
      else if (qmi::MessageBase::findTlvValue(this, 0x14u))
      {
        v27[0] = 0;
        sub_10170B710(this, 0x15u, (uint64_t)v27);
        if (v27[0])
          v14 = v28;
        else
          v14 = -1.0;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_1016F2964;
        v26[3] = &unk_1021C9A48;
        v26[4] = buf;
        *(_QWORD *)v36 = v26;
        sub_10169B8BC(this, 20, (uint64_t)v36);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v16 = (unint64_t)((double)*(unint64_t *)(v52 + 72) * 0.000001);
          if (*(_BYTE *)(a1 + 2056))
          {
            v17 = *(_QWORD *)(a1 + 2040);
            v18 = *(_QWORD *)(a1 + 2048);
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v22 = *(_QWORD *)(v52 + 48);
          v23 = *(float *)(v52 + 56);
          *(_DWORD *)v36 = 68290562;
          *(_DWORD *)&v36[4] = 0;
          v37 = 2082;
          v38 = "";
          v39 = 2050;
          v40 = v16;
          v41 = 2050;
          v42 = v14;
          v43 = 2050;
          v44 = v17;
          v45 = 2050;
          v46 = v18;
          v47 = 2050;
          v48 = v22;
          v49 = 2050;
          v50 = v23;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rxClockConv,pulse\", \"rxRtcMs\":%{public}llu, \"rxRtcUncMs\":\"%{public}.3f\", \"machAbsTicksBefore\":%{public}llu, \"machAbsTicksAfter\":%{public}llu, \"gpsNs\":%{public}llu, \"gpsUncNs\":\"%{public}.3f\"}", v36, 0x4Eu);
        }
      }
      v4 = v52 + 48;
      v5 = (_OWORD *)(a1 + 2064);
      if (*(_BYTE *)(a1 + 2136))
      {
        *v5 = *(_OWORD *)v4;
        v6 = *(_OWORD *)(v4 + 16);
        v7 = *(_OWORD *)(v4 + 32);
        v8 = *(_OWORD *)(v4 + 48);
        *(_DWORD *)(a1 + 2128) = *(_DWORD *)(v4 + 64);
        *(_OWORD *)(a1 + 2096) = v7;
        *(_OWORD *)(a1 + 2112) = v8;
        *(_OWORD *)(a1 + 2080) = v6;
      }
      else
      {
        *v5 = *(_OWORD *)v4;
        v19 = *(_OWORD *)(v4 + 16);
        v20 = *(_OWORD *)(v4 + 32);
        v21 = *(_OWORD *)(v4 + 48);
        *(_QWORD *)(a1 + 2128) = *(_QWORD *)(v4 + 64);
        *(_OWORD *)(a1 + 2096) = v20;
        *(_OWORD *)(a1 + 2112) = v21;
        *(_OWORD *)(a1 + 2080) = v19;
        *(_BYTE *)(a1 + 2136) = 1;
      }
      sub_1016F298C(a1);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#tt, pulse not valid", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        *(_WORD *)v36 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt, pulse not valid", v36, 2);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransferPulse(const pds::TimeTransferPulseIndication::Indication &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      if (*(_BYTE *)(a1 + 2056))
        *(_BYTE *)(a1 + 2056) = 0;
      if (*(_BYTE *)(a1 + 2136))
        *(_BYTE *)(a1 + 2136) = 0;
    }
    _Block_object_dispose(&v32, 8);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v52) = 2082;
      *(_QWORD *)((char *)&v52 + 2) = "";
      WORD5(v52) = 1026;
      HIDWORD(v52) = qmi::MessageBase::findTlvValue(this, 1u) != 0;
      LOWORD(v53) = 1026;
      *(_DWORD *)((char *)&v53 + 2) = qmi::MessageBase::findTlvValue(this, 2u) != 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#tt pulse indication is not valid\", \"validity tlv\":%{public}hhd, \"time tlv\":%{public}hhd}", buf, 0x1Eu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    }
    v10 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v11 = qmi::MessageBase::findTlvValue(this, 1u) != 0;
      v12 = qmi::MessageBase::findTlvValue(this, 2u) != 0;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      LOWORD(v52) = 2082;
      *(_QWORD *)((char *)&v52 + 2) = "";
      WORD5(v52) = 1026;
      HIDWORD(v52) = v11;
      LOWORD(v53) = 1026;
      *(_DWORD *)((char *)&v53 + 2) = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tt pulse indication is not valid", "{\"msg%{public}.0s\":\"#tt pulse indication is not valid\", \"validity tlv\":%{public}hhd, \"time tlv\":%{public}hhd}", buf, 0x1Eu);
    }
    if (*(_BYTE *)(a1 + 2056))
      *(_BYTE *)(a1 + 2056) = 0;
    if (*(_BYTE *)(a1 + 2136))
      *(_BYTE *)(a1 + 2136) = 0;
  }
}

void sub_1016F21D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1016F221C(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2 == 1;
  return result;
}

void sub_1016F2238(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  unsigned int v4;
  float v5;
  BOOL v6;
  int v7;
  NSObject *v8;
  int v9;
  double v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *((_DWORD *)a2 + 1);
  if (v4 <= 0x240C83FF
    && ((v5 = *((float *)a2 + 2), v5 >= -0.5) ? (v6 = v5 <= 0.5) : (v6 = 0),
        v6 && (v7 = *((unsigned __int8 *)a2 + 17), *((_BYTE *)a2 + 17))))
  {
    if (!*((_BYTE *)a2 + 18))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 604800000000000 * *a2 + 1000000 * v4;
      *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56) = *((float *)a2 + 3) * 1000000.0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 60) = 1;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 64) = v7;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) = (uint64_t)(float)(v5 * 1000000.0);
      LOBYTE(v18) = *((_BYTE *)a2 + 16);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112) = sub_1016F2528(v3, &v18, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 48));
      return;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v9 = *((_DWORD *)a2 + 1);
      v10 = *((float *)a2 + 2);
      v11 = *((unsigned __int8 *)a2 + 17);
      v12 = *((unsigned __int8 *)a2 + 18);
      v18 = 68290050;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v9;
      v24 = 2050;
      v25 = v10;
      v26 = 1026;
      v27 = v11;
      v28 = 1026;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#tt invalid data\", \"millseconds\":%{public}u, \"bias\":\"%{public}f\", \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)&v18, 0x2Eu);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    }
    v13 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      v14 = *((_DWORD *)a2 + 1);
      v15 = *((float *)a2 + 2);
      v16 = *((unsigned __int8 *)a2 + 17);
      v17 = *((unsigned __int8 *)a2 + 18);
      v18 = 68290050;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 1026;
      v23 = v14;
      v24 = 2050;
      v25 = v15;
      v26 = 1026;
      v27 = v16;
      v28 = 1026;
      v29 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#tt invalid data", "{\"msg%{public}.0s\":\"#tt invalid data\", \"millseconds\":%{public}u, \"bias\":\"%{public}f\", \"leap seconds\":%{public}hd, \"leap second uncertainty\":%{public}hd}", (uint8_t *)&v18, 0x2Eu);
    }
  }
  if (*(_BYTE *)(v3 + 2056))
    *(_BYTE *)(v3 + 2056) = 0;
  if (*(_BYTE *)(v3 + 2136))
    *(_BYTE *)(v3 + 2136) = 0;
}

uint64_t sub_1016F2528(uint64_t a1, _BYTE *a2, float *a3)
{
  uint64_t result;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;

  result = 3;
  switch(*a2)
  {
    case 1:
    case 0xC:
    case 0xD:
      return result;
    case 2:
    case 0xF:
    case 0x10:
      result = 4;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      result = sub_100D021C8((uint64_t *)(a1 + 2320), a3);
      break;
    case 9:
    case 0xA:
    case 0xB:
      LODWORD(result) = sub_100D021C8((uint64_t *)(a1 + 2320), a3);
      if ((_DWORD)result == 2)
        result = 1;
      else
        result = result;
      break;
    default:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v6 = qword_1022A0078;
      v7 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v7)
      {
        v8 = (char)*a2;
        v9[0] = 68289282;
        v9[1] = 0;
        v10 = 2082;
        v11 = "";
        v12 = 1026;
        v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt, unexpected time source\", \"source\":%{public}d}", (uint8_t *)v9, 0x18u);
        result = 0;
      }
      break;
  }
  return result;
}

void sub_1016F26DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  unint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  uint8_t buf[4];
  unint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;

  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) = (unint64_t)((double)*(unint64_t *)a2
                                                                                 * 1000000.0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_DWORD *)(a2 + 8);
    v8 = *(_QWORD *)(v4 + 2040);
    v9 = *(_QWORD *)(v4 + 2048);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(_QWORD *)(v10 + 48);
    v12 = *(float *)(v10 + 56);
    *(_DWORD *)buf = 134350336;
    v35 = v6;
    v36 = 1026;
    v37 = v7;
    v38 = 2050;
    v39 = v8;
    v40 = 2050;
    v41 = v9;
    v42 = 2048;
    v43 = v11;
    v44 = 2050;
    v45 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#rxClockConv,pulse,rxRtcMs,%{public}llu,rxRtcUnc,%{public}u,machAbsTicks,%{public}llu,%{public}llu,gpsNs,%llu,gpsUncNs,%{public}.3f", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v13 = *(_QWORD *)a2;
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_QWORD *)(v4 + 2040);
    v16 = *(_QWORD *)(v4 + 2048);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v18 = *(_QWORD *)(v17 + 48);
    v19 = *(float *)(v17 + 56);
    v22 = 134350336;
    v23 = v13;
    v24 = 1026;
    v25 = v14;
    v26 = 2050;
    v27 = v15;
    v28 = 2050;
    v29 = v16;
    v30 = 2048;
    v31 = v18;
    v32 = 2050;
    v33 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#rxClockConv,pulse,rxRtcMs,%{public}llu,rxRtcUnc,%{public}u,machAbsTicks,%{public}llu,%{public}llu,gpsNs,%llu,gpsUncNs,%{public}.3f", &v22, 58);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsTimeTransferPulse(const pds::TimeTransferPulseIndication::Indication &)_block_invoke", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

double sub_1016F2964(uint64_t a1, unint64_t *a2)
{
  double result;

  result = (double)*a2 * 1000000.0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 72) = (unint64_t)result;
  return result;
}

void sub_1016F298C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _OWORD v12[4];
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2056);
    v4 = *(unsigned __int8 *)(a1 + 2136);
    *(_DWORD *)buf = 67109376;
    v18 = v3;
    v19 = 1024;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt,check for async device data,mark,%d,ind,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = *(unsigned __int8 *)(a1 + 2056);
    v9 = *(unsigned __int8 *)(a1 + 2136);
    v14[0] = 67109376;
    v14[1] = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,check for async device data,mark,%d,ind,%d", v14, 14);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::checkForAllTimeTransferDataCompletion()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(_BYTE *)(a1 + 2136) && *(_BYTE *)(a1 + 2056))
  {
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a1 + 2040);
    *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a1 + 2176);
    v5 = *(_QWORD *)(a1 + 3192);
    if (!v5 || (sub_101779E40(v5, a1 + 2064), *(_BYTE *)(a1 + 2136)))
    {
      if (!sub_1016F2BF0(a1 + 2064))
      {
LABEL_13:
        if (*(_BYTE *)(a1 + 2056))
          *(_BYTE *)(a1 + 2056) = 0;
        if (*(_BYTE *)(a1 + 2136))
          *(_BYTE *)(a1 + 2136) = 0;
        return;
      }
      if (*(_BYTE *)(a1 + 2136))
      {
        v6 = *(_OWORD *)(a1 + 2112);
        v12[2] = *(_OWORD *)(a1 + 2096);
        v12[3] = v6;
        v13 = *(_QWORD *)(a1 + 2128);
        v7 = *(_OWORD *)(a1 + 2080);
        v12[0] = *(_OWORD *)(a1 + 2064);
        v12[1] = v7;
        sub_1017DDD1C(a1, (uint64_t)v12);
        goto LABEL_13;
      }
    }
    sub_10028DF3C();
  }
}

BOOL sub_1016F2BF0(uint64_t a1)
{
  float v1;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v1 = *(float *)(a1 + 8);
  if (v1 >= 1.0e11)
  {
    if (v1 <= 0.0)
      return 0;
  }
  else if (v1 <= 0.0 || *(_QWORD *)a1 == 0)
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 24) == -1)
    return 0;
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return v3;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = v4 > v3;
  v6 = v4 - v3;
  if (!v5
    || *(_QWORD *)(a1 + 32) == 0x8000000000000000
    || 604800000000000 * (unint64_t)dword_102311530 >= *(_QWORD *)a1)
  {
    return 0;
  }
  v3 = 0;
  if (*(_BYTE *)(a1 + 12) && v6 <= 0xF4240)
    return *(_DWORD *)(a1 + 64) != 0;
  return v3;
}

_QWORD *sub_1016F2CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  BOOL v16;
  _QWORD v17[3];
  _QWORD *v18;

  if (sub_100241564())
    v2 = 0x2000;
  else
    v2 = 0;
  if (sub_100241564())
    v3 = v2 | 5;
  else
    v3 = v2;
  if (sub_10075FA4C())
  {
    v16 = 0;
    sub_1001E4804(&v14);
    v4 = sub_1001E4874(v14, "gpsEnableVerboseBdsNmea", &v16);
    if (v16)
      v5 = v4;
    else
      v5 = 0;
    v6 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = 1280;
    if (v5)
      v9 = 5888;
    v3 |= v9;
  }
  v10 = sub_10075FA90();
  v11 = v3 | 0x8000;
  if (!v10)
    v11 = v3;
  v17[0] = off_1021CC0A0;
  v17[1] = 0;
  v17[2] = v11 | 0x4000;
  v18 = v17;
  sub_10178EA00(a1 + 1704, (uint64_t)v17);
  result = v18;
  if (v18 == v17)
  {
    v13 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_1016F2E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1016F2E64(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  int v22;
  _QWORD v23[3];
  _QWORD *v24;

  v13 = 0x3727C5AC3D800000;
  v14 = 20;
  v15 = 0;
  v16 = 0xE41C80000;
  v17 = 0;
  v18 = xmmword_101CD0FF0;
  v20 = 2562;
  v21 = 0;
  v22 = 120;
  v19 = 0x2800000000;
  v12 = 1;
  sub_1001E4804(&v10);
  v2 = sub_1001E4874(v10, "GpsUseHighRateInertialAiding", (BOOL *)&v12);
  v3 = v2;
  v4 = v11;
  if (!v11)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v3)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v2)
    {
LABEL_6:
      v7 = v12;
      goto LABEL_9;
    }
  }
  v7 = 1;
  v12 = 1;
LABEL_9:
  v17 = v7;
  v23[0] = off_1021CC1C0;
  v23[1] = &v13;
  v24 = v23;
  sub_10178EA00(a1 + 1704, (uint64_t)v23);
  result = v24;
  if (v24 == v23)
  {
    v9 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1016F2FE0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016F3030(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;

  v3[0] = off_1021CC140;
  v3[1] = a1;
  v4 = v3;
  sub_10178EA00(a1 + 1704, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_1016F30CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016F3108(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  result = (_QWORD *)sub_100241564();
  if ((_DWORD)result)
  {
    v4[0] = off_1021CC260;
    v4[1] = a1;
    v5 = v4;
    sub_10178EA00(a1 + 1704, (uint64_t)v4);
    result = v5;
    if (v5 == v4)
    {
      v3 = 4;
      result = v4;
    }
    else
    {
      if (!v5)
        return result;
      v3 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
  }
  return result;
}

void sub_1016F31AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016F31E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;

  v3[0] = off_1021CC2E0;
  v4 = v3;
  sub_10178EA00(a1 + 1704, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_1016F3280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F32BC(uint64_t a1)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int128 v9;
  int v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint8_t buf[1640];

  v9 = 0uLL;
  v10 = 0;
  if ((sub_10075EDEC((uint64_t)&v9) & 1) != 0)
  {
    v2 = (char *)operator new(0x20uLL);
    *(_QWORD *)v2 = off_1021CC380;
    *(_OWORD *)(v2 + 8) = v9;
    *((_DWORD *)v2 + 6) = v10;
    v12 = v2;
    sub_10178EA00(a1 + 1704, (uint64_t)v11);
    v3 = v12;
    if (v12 == v11)
    {
      v4 = 4;
      v3 = v11;
    }
    else
    {
      if (!v12)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "expected L1 rf params to be known for this platform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v8 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "expected L1 rf params to be known for this platform", &v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::sendL1RfConfig()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1016F34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

float64_t sub_1016F3504(uint64_t a1, __int128 *a2, float64x2_t a3)
{
  _QWORD *v5;
  double v6;
  double v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;

  switch(*((_DWORD *)a2 + 205))
  {
    case 0:
      v5 = (_QWORD *)(a1 + 504);
      goto LABEL_4;
    case 1:
      v5 = (_QWORD *)(a1 + 512);
LABEL_4:
      ++*v5;
      if (sub_100CD597C(a1 + 2268))
      {
        v6 = *(double *)((char *)a2 + 36);
        if (v6 > 0.0)
        {
          v7 = *(double *)(a1 + 3668);
          if (v7 <= 0.0 || v6 < v7)
          {
            v9 = *a2;
            *(_OWORD *)(a1 + 3648) = a2[1];
            *(_OWORD *)(a1 + 3632) = v9;
            v10 = a2[2];
            v11 = a2[3];
            v12 = a2[4];
            *(_OWORD *)(a1 + 3712) = a2[5];
            *(_OWORD *)(a1 + 3696) = v12;
            *(_OWORD *)(a1 + 3680) = v11;
            *(_OWORD *)(a1 + 3664) = v10;
            v13 = a2[6];
            v14 = a2[7];
            v15 = a2[8];
            *(_OWORD *)(a1 + 3772) = *(__int128 *)((char *)a2 + 140);
            *(_OWORD *)(a1 + 3760) = v15;
            *(_OWORD *)(a1 + 3744) = v14;
            *(_OWORD *)(a1 + 3728) = v13;
          }
        }
      }
      v33[0] = off_1021CC420;
      v33[1] = a1;
      v33[2] = a2;
      v34 = v33;
      sub_10178EA00(a1 + 1704, (uint64_t)v33);
      v16 = v34;
      if (v34 == v33)
      {
        v17 = 4;
        v16 = v33;
      }
      else
      {
        if (!v34)
          goto LABEL_35;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_35:
      v27 = *(_QWORD *)(a1 + 3192);
      if (v27)
      {
        a3.f64[0] = *(float64_t *)((char *)a2 + 4);
        a3.f64[0] = sub_10177A730(v27, a3, *(float64_t *)((char *)a2 + 12), *(double *)((char *)a2 + 28));
      }
      return a3.f64[0];
    case 2:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)((char *)a2 + 76);
        *(_DWORD *)buf = 134217984;
        v32 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "EurekaController,%.1lf,TEPA suppressed", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return a3.f64[0];
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v20 = *(_QWORD *)((char *)a2 + 76);
      v29 = 134217984;
      v30 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "EurekaController,%.1lf,TEPA suppressed", COERCE_DOUBLE(&v29));
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v21);
      goto LABEL_31;
    case 3:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_QWORD *)((char *)a2 + 76);
        *(_DWORD *)buf = 134217984;
        v32 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#Warning,EurekaController,%.1lf,Unknown position assistance type", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return a3.f64[0];
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v25 = *(_QWORD *)((char *)a2 + 76);
      v29 = 134217984;
      v30 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,EurekaController,%.1lf,Unknown position assistance type", COERCE_DOUBLE(&v29));
      v22 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v26);
LABEL_31:
      if (v22 != buf)
        free(v22);
      return a3.f64[0];
    default:
      return a3.f64[0];
  }
}

void sub_1016F3908(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F3958(uint64_t a1, double a2, double a3, double a4)
{
  NSObject *v8;
  unsigned int v9;
  double v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;

  if (a2 > 0.0 && a3 > 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss feeding assistance time\"}", buf, 0x12u);
    }
    *(_BYTE *)(a1 + 648) = 1;
    ++*(_QWORD *)(a1 + 592);
    if (sub_10075CC24())
      v9 = 100;
    else
      v9 = 1000;
    v10 = a3 * 1000.0;
    v11 = (double)v9;
    if (v10 <= (double)v9)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289538;
        v21 = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2050;
        v25 = v10;
        v26 = 1026;
        LODWORD(v27) = v9;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss time injection \", \"tunc(ms)\":\"%{public}f\", \"flooring,tuncNew(ms)\":%{public}u}", buf, 0x22u);
      }
    }
    else
    {
      v11 = v10;
    }
    v18[0] = off_1021CC4C0;
    *(double *)&v18[1] = a2;
    *(double *)&v18[2] = v11;
    v19 = v18;
    sub_10178EA00(a1 + 1704, (uint64_t)v18);
    v15 = v19;
    if (v19 == v18)
    {
      v16 = 4;
      v15 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_28;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_28:
    v17 = *(_QWORD *)(a1 + 3192);
    if (v17)
      sub_101779C4C(v17, a2, a4);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289538;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2050;
    v25 = a2;
    v26 = 2050;
    v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#gnss Invalid time assistance\", \"time\":\"%{public}f\", \"timeUncertainty_s\":\"%{public}.09f\"}", buf, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  v13 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    *(_DWORD *)buf = 68289538;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2050;
    v25 = a2;
    v26 = 2050;
    v27 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gnss Invalid time assistance", "{\"msg%{public}.0s\":\"#gnss Invalid time assistance\", \"time\":\"%{public}f\", \"timeUncertainty_s\":\"%{public}.09f\"}", buf, 0x26u);
  }
}

void sub_1016F3CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F3D2C(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t (***v8)();
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t (***v20)();
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;

  if (*(_BYTE *)(a1 + 2264))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v25 = a2;
      v26 = 1024;
      v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ec,multiband mode,L1,%d,L5,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v21[0] = 67109376;
      v21[1] = a2;
      v22 = 1024;
      v23 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ec,multiband mode,L1,%d,L5,%d", v21, 14);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if ((a2 & 1) == 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ec,multiband mode,cannot disable primary", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        LOWORD(v21[0]) = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,multiband mode,cannot disable primary", v21, v17);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    v18 = off_1021CC560;
    v19 = a3;
    v20 = &v18;
    sub_10178EA00(a1 + 1704, (uint64_t)&v18);
    v8 = v20;
    if (v20 == &v18)
    {
      v9 = 4;
      v8 = &v18;
    }
    else
    {
      if (!v20)
        return;
      v9 = 5;
    }
    (*v8)[v9]();
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#ec,device not in connected state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v21[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,device not in connected state", v21, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::setRfBandEnable(BOOL, BOOL)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_1016F41A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F41E8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 3192);
  if (v1)
    sub_101777E24(v1);
}

void sub_1016F41F8(uint64_t a1, int a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#ec,unexpected enable of duty cycling", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,unexpected enable of duty cycling", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_1016F4380(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  float v9;
  float v10;
  char v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  v8 = (unint64_t)((*a2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  v2 = a2[6];
  v3 = a2[7];
  v9 = v2;
  v10 = v3;
  v11 = 3;
  if (v2 < 0.0 || v3 <= 0.01)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"DOT,invalid assistance\"}", buf, 0x12u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    }
    v7 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "DOT,invalid assistance", "{\"msg%{public}.0s\":\"DOT,invalid assistance\"}", buf, 0x12u);
    }
  }
  else
  {
    v12[0] = off_1021CC5E0;
    v12[1] = &v8;
    v13 = v12;
    sub_10178EA00(a1 + 1704, (uint64_t)v12);
    v4 = v13;
    if (v13 == v12)
    {
      v5 = 4;
      v4 = v12;
    }
    else
    {
      if (!v13)
        return;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
}

void sub_1016F4598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016F45D0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v4[0] = off_1021CC680;
  v4[1] = a2;
  v5 = v4;
  sub_10178EA00(a1 + 1704, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1016F4668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1016F46A4(_QWORD *result, int *a2)
{
  _QWORD *v2;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  __int128 v13;
  int v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;

  if (*((_BYTE *)result + 2294))
    return result;
  v2 = result;
  if (!*((_BYTE *)result + 2016))
    return result;
  v13 = 0uLL;
  v14 = -65536;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 68289282;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistanceMotion\", \"type\":%{public}d}", buf, 0x18u);
  }
  v6 = 0;
  v7 = *a2;
  if (*a2 <= 40)
  {
    switch(v7)
    {
      case 1:
        HIDWORD(v13) = 1120402145;
        *(_QWORD *)&v13 = 1;
        v6 = 0x300000000;
        break;
      case 2:
        v11 = 95.0;
        if (a2[1] == 2)
          v11 = 99.9;
        *((float *)&v13 + 3) = v11;
        *(_QWORD *)&v13 = 1;
        v6 = (uint64_t)&_mh_execute_header;
        break;
      case 3:
      case 7:
      case 9:
        goto LABEL_14;
      case 4:
        HIDWORD(v13) = 1119092736;
        LODWORD(v13) = 2;
        v6 = 0x200000002;
        if ((a2[1] - 1) <= 1)
        {
          HIDWORD(v13) = 1120272384;
          *(_QWORD *)((char *)&v13 + 4) = 0x100000001;
        }
        break;
      case 5:
        goto LABEL_18;
      case 6:
        HIDWORD(v13) = 1119092736;
        LODWORD(v13) = 2;
        v6 = 0x200000004;
        break;
      case 8:
        *(_QWORD *)&v13 = 0x100000002;
        *((_QWORD *)&v13 + 1) = 0x42C7CCCD00000002;
        v6 = 0x200000005;
        break;
      case 10:
        HIDWORD(v13) = 1120402145;
        *(_QWORD *)&v13 = 0x200000001;
        v6 = 0x300000003;
        break;
      case 11:
        v12 = 95.0;
        if (a2[1] == 2)
          v12 = 99.9;
        *((float *)&v13 + 3) = v12;
        *(_QWORD *)&v13 = 0x200000001;
        v6 = 0x100000003;
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v7 > 55)
  {
    if (v7 != 56)
    {
      if (v7 == 18240)
      {
        *(_QWORD *)&v13 = 0x300000002;
        *((_QWORD *)&v13 + 1) = 0x42C7CCCD00000000;
        v6 = 0x200000006;
      }
      goto LABEL_23;
    }
LABEL_18:
    HIDWORD(v13) = 1119092736;
    LODWORD(v13) = 2;
    if ((a2[1] - 1) <= 1)
    {
      v8 = 99.0;
      if (a2[3] == 1)
        v8 = 99.9;
      *((float *)&v13 + 3) = v8;
      DWORD1(v13) = 2;
      v6 = 0x200000003;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v7 != 41)
  {
    if (v7 != 52)
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_14:
  HIDWORD(v13) = 1119092736;
  LODWORD(v13) = 2;
LABEL_22:
  v6 = 0x200000001;
LABEL_23:
  v2[43] = v6;
  if (a2[3] == 1)
    v9 = 1;
  else
    v9 = 2;
  *((_DWORD *)v2 + 88) = v9;
  ++v2[73];
  ++v2[80];
  v15[0] = off_1021CC720;
  v15[1] = &v13;
  v16 = v15;
  sub_10178EA00((uint64_t)(v2 + 213), (uint64_t)v15);
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1016F4A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1016F4ABC(uint64_t a1, char a2))()
{
  uint64_t (***result)();
  uint64_t v3;
  uint64_t (**v4)();
  char v5;
  uint64_t (***v6)();

  *(_BYTE *)(a1 + 2294) = a2;
  v4 = off_1021CC7C0;
  v5 = a2;
  v6 = &v4;
  sub_10178EA00(a1 + 1704, (uint64_t)&v4);
  result = v6;
  if (v6 == &v4)
  {
    v3 = 4;
    result = &v4;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (uint64_t (***)())(*result)[v3]();
}

void sub_1016F4B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F4B98(uint64_t a1, double *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((_QWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 3);
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2050;
    v18 = v5;
    v19 = 2050;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistancePedometerSpeed\", \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\"}", buf, 0x26u);
  }
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v10 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid validity time\"}";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    return;
  }
  if (((_QWORD)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v10 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid speed\"}";
    goto LABEL_26;
  }
  if (((_QWORD)a2[3] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[3] <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v10 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeed,invalid estimated speed error\"}";
    goto LABEL_26;
  }
  v11[0] = off_1021CC860;
  v11[1] = a2;
  v12 = v11;
  sub_10178EA00(a1 + 1704, (uint64_t)v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_29;
  }
  if (v12)
  {
    v8 = 5;
LABEL_29:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
}

void sub_1016F4EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F4EDC(uint64_t a1, double *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *((_QWORD *)a2 + 4);
    *(_DWORD *)buf = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2050;
    v19 = v5;
    v20 = 2050;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"injectAssistancePedometerSpeedConstraint\", \"min\":\"%{public}f\", \"max\":\"%{public}f\"}", buf, 0x26u);
  }
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v11 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid validity time\"}";
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
    return;
  }
  if (((_QWORD)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v11 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid duration\"}";
    goto LABEL_32;
  }
  v7 = a2[3];
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v7 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v11 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid minimum speed bound\"}";
    goto LABEL_32;
  }
  if (((_QWORD)a2[4] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[4] < v7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 68289026;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v11 = "{\"msg%{public}.0s\":\"#Warning,injectAssistancePedometerSpeedConstraint,invalid maximum speed bound\"}";
    goto LABEL_32;
  }
  v12[0] = off_1021CC900;
  v12[1] = a2;
  v13 = v12;
  sub_10178EA00(a1 + 1704, (uint64_t)v12);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_35;
  }
  if (v13)
  {
    v9 = 5;
LABEL_35:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void sub_1016F5274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F52AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _WORD v14[8];
  _QWORD v15[3];
  _QWORD *v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 2264))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#tt,device not in connected state", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt,device not in connected state", v14, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return;
  }
  sub_100270E34((uint64_t)v19, a2);
  sub_100270E34((uint64_t)v17, a3);
  sub_10023A71C(a1, (uint64_t)v19, (uint64_t)v17);
  v5 = v18;
  if (v18 == v17)
  {
    v6 = 4;
    v5 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
    goto LABEL_20;
  }
  if (v20)
  {
    v11 = 5;
LABEL_20:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v15[0] = off_1021CC9A0;
  v15[1] = a1;
  v16 = v15;
  sub_10178EA00(a1 + 1704, (uint64_t)v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
  }
  else
  {
    if (!v16)
      return;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
}

void sub_1016F5510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char *v24;
  char *v26;
  uint64_t v27;

  v26 = a16;
  if (a16 == v24)
  {
    v27 = 4;
    v26 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F55A4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  _QWORD block[5];
  _QWORD v10[3];
  _QWORD *v11;
  uint8_t buf[1640];

  v2 = *(NSObject **)(a1 + 2032);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1016F5830;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
  if (*(_BYTE *)(a1 + 2264))
  {
    v10[0] = off_1021CCA48;
    v11 = v10;
    sub_10178EA00(a1 + 1704, (uint64_t)v10);
    v3 = v11;
    if (v11 == v10)
    {
      v4 = 4;
      v3 = v10;
    }
    else
    {
      if (!v11)
      {
LABEL_16:
        sub_1017DDB70(a1);
        return;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_16;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#tt,device not in connected state", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt,device not in connected state", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::stopTimeTransfer()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *(_WORD *)(a1 + 2297) = 0;
  if (*(_BYTE *)(a1 + 2056))
    *(_BYTE *)(a1 + 2056) = 0;
  if (*(_BYTE *)(a1 + 2136))
    *(_BYTE *)(a1 + 2136) = 0;
}

void sub_1016F57F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F5830(uint64_t a1)
{
  sub_1016F5840((const void **)(*(_QWORD *)(a1 + 32) + 2024), 0);
}

void sub_1016F5840(const void **a1, const void *a2)
{
  const void *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    CFRelease(v3);
}

void sub_1016F5868(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD block[6];
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  if (*(_BYTE *)(a1 + 2056) || *(_BYTE *)(a1 + 2136))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v3 = *(unsigned __int8 *)(a1 + 2056);
      v4 = *(unsigned __int8 *)(a1 + 2136);
      *(_DWORD *)buf = 67240448;
      v20 = v3;
      v21 = 1026;
      v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#tt,states not cleared,mark,%{public}d,ind,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v8 = *(unsigned __int8 *)(a1 + 2056);
      v9 = *(unsigned __int8 *)(a1 + 2136);
      v16[0] = 67240448;
      v16[1] = v8;
      v17 = 1026;
      v18 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt,states not cleared,mark,%{public}d,ind,%{public}d", v16, 14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::timeTransferPulse(const BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  if (*(_BYTE *)(a1 + 2056))
    *(_BYTE *)(a1 + 2056) = 0;
  if (*(_BYTE *)(a1 + 2136))
    *(_BYTE *)(a1 + 2136) = 0;
  if (*(_QWORD *)(a1 + 2032))
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1672), "silo"), "queue");
    v6 = *(NSObject **)(a1 + 2032);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1016F5BE0;
    block[3] = &unk_102131360;
    block[4] = v5;
    block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#tt,no timemark queue", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v16[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt,no timemark queue", v16, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::timeTransferPulse(const BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_1016F5BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 2024);
  if (v3)
  {
    sub_1016F5D98(v2, v3, *(NSObject **)(a1 + 32));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#warning, #tt, tried to send pulse without telephony bb ref", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#warning, #tt, tried to send pulse without telephony bb ref", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::timeTransferPulse(const BOOL)_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_1016F5D98(uint64_t a1, uint64_t a2, NSObject *a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD block[5];
  __int128 v21;
  __int128 v22;
  int v23;
  double v24;
  uint8_t buf[4];
  double v26;

  if (a2)
  {
    v3 = a3;
    if (a3)
    {
      v5 = a2;
      v4 = a1;
      v22 = 0uLL;
      v6 = &qword_1022A0000;
      if (qword_1022A0070 == -1)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else
  {
    sub_1017124B0();
  }
  sub_101712634();
LABEL_24:
  dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
LABEL_4:
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tt,trigger pulse to BB", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v6[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v23) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,trigger pulse to BB", &v23, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v8 = sub_1001FCBB4();
  if ((TelephonyBasebandAPTimeSync(v5, &v22) & 1) != 0)
  {
    v9 = sub_1001FCBB4();
    if (v6[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = v9 - v8;
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#tt,completed pulse to BB,delay_sec,%.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v6[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v23 = 134217984;
      v24 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,completed pulse to BB,delay_sec,%.3f", COERCE_DOUBLE(&v23));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (v10 > 30.0)
      sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)(v4 + 1672), "silo"), "queue"), (uint64_t)"timemark", (uint64_t)"sync_api_slow", 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1016F6258;
    block[3] = &unk_102143548;
    block[4] = v4;
    v21 = v22;
    dispatch_async(v3, block);
  }
  else
  {
    if (v6[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#warning, #tt, pulse failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v6[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v23) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#warning, #tt, pulse failed", &v23, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::wrapBasebandTimemarkPulse(TelephonyBasebandControllerRef, dispatch_queue_t)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

void sub_1016F6258(uint64_t a1)
{
  sub_1016F6268(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1016F6268(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v6;
  int v7;
  NSObject *v8;
  double v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  __int16 v19[8];
  _QWORD v20[3];
  _QWORD *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (*(_BYTE *)(a1 + 2056))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt, previous time bounds not consumed before end of new pulse", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, previous time bounds not consumed before end of new pulse", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::onTimeTransferPulseCompletion(TelephonyBasebandAPTimeSyncOutput)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v7 = *(unsigned __int8 *)(a1 + 2056);
    *(_QWORD *)(a1 + 2040) = a2;
    *(_QWORD *)(a1 + 2048) = a3;
    if (v7)
    {
      if (!a2)
        goto LABEL_13;
LABEL_12:
      if (a3 < a2)
        goto LABEL_13;
      v11 = sub_100127828(a2 + ((a3 - a2) >> 1));
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_QWORD *)(a1 + 2040);
        v14 = *(_QWORD *)(a1 + 2048);
        *(_DWORD *)buf = 68289794;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2050;
        v27 = v11;
        v28 = 2050;
        v29 = v13;
        v30 = 2050;
        v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt\", \"apMachPulseTime\":\"%{public}f\", \"timeMarkBefore\":%{public}llu, \"timeMarkAfter\":%{public}llu}", buf, 0x30u);
      }
      v20[0] = off_1021CCAE8;
      v20[1] = (unint64_t)(v11 * 1000000000.0);
      v21 = v20;
      sub_10178EA00(a1 + 1704, (uint64_t)v20);
      v15 = v21;
      if (v21 == v20)
      {
        v16 = 4;
        v15 = v20;
      }
      else
      {
        if (!v21)
        {
LABEL_26:
          sub_1016F298C(a1);
          return;
        }
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
      goto LABEL_26;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2040) = a2;
    *(_QWORD *)(a1 + 2048) = a3;
  }
  *(_BYTE *)(a1 + 2056) = 1;
  if (a2)
    goto LABEL_12;
LABEL_13:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(double *)(a1 + 2040);
    v10 = *(_QWORD *)(a1 + 2048);
    *(_DWORD *)buf = 68289538;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2050;
    v27 = v9;
    v28 = 2050;
    v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: #tt received unexpected or invalid data\", \"timeMarkBefore\":%{public}llu, \"timeMarkAfter\":%{public}llu}", buf, 0x26u);
  }
}

void sub_1016F6600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F6640(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  double v6;
  double v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  NSObject *v11;
  unint64_t v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  uint64_t v26;

  v4 = atomic_load((unsigned __int8 *)&qword_10230F9A8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10230F9A8))
  {
    *(double *)&qword_10230F9A0 = (double)sub_1005154D0() * 604800.0;
    __cxa_guard_release(&qword_10230F9A8);
  }
  if (*a2 > 0x2260FF928FFFFLL)
  {
    v10 = (double)*a2 * 0.000000001;
    if (v10 - *(double *)&qword_10230F9A0 < -1209600.0)
    {
      a2[37] |= 1uLL;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        v24 = v10;
        v25 = 2050;
        v26 = qword_10230F9A0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#imag,Warning,build time detection,%{public}.1f,build,%{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v19 = 134349312;
        v20 = v10;
        v21 = 2050;
        v22 = qword_10230F9A0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,Warning,build time detection,%{public}.1f,build,%{public}.1f", &v19, 22);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    v12 = *(_QWORD *)(a1 + 2176);
    if (v12)
    {
      v13 = (double)v12 * 0.000000001;
      if (v10 - v13 < -2.0 || v10 - v13 > 1209600.0)
      {
        a2[37] |= 2uLL;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349312;
          v24 = v10;
          v25 = 2050;
          v26 = *(_QWORD *)&v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#imag,EE time,detection,fix,%{public}.1f,ee,%{public}.1f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          v19 = 134349312;
          v20 = v10;
          v21 = 2050;
          v22 = *(_QWORD *)&v13;
          LODWORD(v18) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,EE time,detection,fix,%{public}.1f,ee,%{public}.1f", &v19, v18);
          v9 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v17);
          goto LABEL_33;
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v6 = (double)*a2 * 0.000000001;
      *(_DWORD *)buf = 134217984;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#imag,fix is in week 0,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = (double)*a2 * 0.000000001;
      v19 = 134217984;
      v20 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#imag,fix is in week 0,%f", COERCE_DOUBLE(&v19));
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::performSpoofingChecks(GNSS::PerEpochData &)", "%s\n", v8);
LABEL_33:
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_1016F6BB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F9A8);
  _Unwind_Resume(a1);
}

void sub_1016F6BD4(uint64_t a1, int a2, uint64_t a3, int a4, double a5)
{
  double v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _WORD v15[8];
  double v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint8_t buf[1640];

  v17 = a2;
  v16 = a5;
  if (sub_100CD597C(a1 + 2268)
    && a4
    && (v8 = *(double *)(a1 + 3668), v8 < 10.0)
    && v8 > 0.0
    && *(double *)(a3 + 544) > 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Not feeding DEM assistance, DEM Deweight area, suitably accurate vertical assistance already provided", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Not feeding DEM assistance, DEM Deweight area, suitably accurate vertical assistance already provided", v15, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else if ((*(_DWORD *)(a3 + 96) | 8) == 9 && *(double *)(a3 + 36) < 100.0)
  {
    ++*(_QWORD *)(a1 + 536);
    v12 = operator new(0x20uLL);
    *v12 = off_1021CCB88;
    v12[1] = &v17;
    v12[2] = a3;
    v12[3] = &v16;
    v19 = v12;
    sub_10178EA00(a1 + 1704, (uint64_t)v18);
    v13 = v19;
    if (v19 == v18)
    {
      v14 = 4;
      v13 = v18;
    }
    else
    {
      if (!v19)
        return;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
}

void sub_1016F6E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016F6E78(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t *v8;
  int v9;
  int v10;
  char v11;
  char v13;
  int v14;
  NSObject *v15;
  void **v16;
  unsigned int v17;
  uint64_t *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  NSObject *v45;
  const char *v46;
  void **v47;
  uint64_t v48;
  uint64_t *v49;
  double v50;
  double v51;
  double v52;
  __int128 *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  double v57;
  double v58;
  double v59;
  _QWORD *v60;
  uint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  _QWORD v66[7];
  _QWORD v67[6];
  int v68;
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[5];
  _QWORD v72[5];
  _QWORD v73[5];
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  __n128 (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t);
  void *v79;
  int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  __int16 v95;
  void *v96;
  void *v97;
  uint64_t v98;
  char v99;
  void *v100;
  void *v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  uint64_t v105;
  _QWORD v106[5];
  _QWORD v107[5];
  _QWORD v108[5];
  _QWORD v109[5];
  _QWORD v110[5];
  _QWORD v111[5];
  _QWORD v112[5];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[5];
  _QWORD v118[5];
  _QWORD v119[5];
  _QWORD v120[5];
  _QWORD v121[9];
  _QWORD v122[5];
  _QWORD v123[5];
  _QWORD v124[5];
  _QWORD v125[5];
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  __n128 (*v145)(uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t);
  void *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  __int128 v152;
  __int128 v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  __int128 v159;
  char v160;
  __int128 v161;
  char v162;
  __int128 v163;
  char v164;
  __int128 v165;
  _BYTE v166[32];
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE buf[12];
  char v172;
  int v173;
  _BYTE *v174;
  void *__p[2];
  char v176;

  v142 = 0;
  v143 = &v142;
  v144 = 0x16012000000;
  v145 = sub_1016F7F50;
  v146 = sub_1016F7FCC;
  v147 = &unk_102080316;
  v152 = 0u;
  v153 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v154 = 1;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v159 = _Q1;
  v160 = 0;
  v161 = _Q1;
  v162 = 0;
  v163 = _Q1;
  v164 = 0;
  v167 = 0;
  memset(v166, 0, sizeof(v166));
  v165 = 0u;
  v168 = 1065353216;
  v169 = 0x100000005;
  v170 = 0;
  v138 = 0;
  v139 = &v138;
  v140 = 0x2020000000;
  v141 = 9;
  v134 = 0;
  v135 = &v134;
  v136 = 0x2020000000;
  v137 = 0;
  v130 = 0;
  v131 = &v130;
  v132 = 0x2020000000;
  v133 = 0;
  v126 = 0;
  v127 = &v126;
  v128 = 0x2020000000;
  v129 = 0;
  v151 = 0;
  v125[0] = _NSConcreteStackBlock;
  v125[1] = 3221225472;
  v125[2] = sub_1016F7FD4;
  v125[3] = &unk_1021C9A68;
  v125[4] = a1;
  __p[0] = v125;
  sub_10169CCF8(a2, 31, (uint64_t)__p);
  v124[0] = _NSConcreteStackBlock;
  v124[1] = 3221225472;
  v124[2] = sub_1016F8218;
  v124[3] = &unk_1021380A8;
  v124[4] = a1;
  __p[0] = v124;
  sub_10170F654(a2, 16, (uint64_t)__p);
  v123[0] = _NSConcreteStackBlock;
  v123[1] = 3221225472;
  v123[2] = sub_1016F8284;
  v123[3] = &unk_1021380A8;
  v123[4] = a1;
  __p[0] = v123;
  sub_10170F8B8(a2, 17, (uint64_t)__p);
  v122[0] = _NSConcreteStackBlock;
  v122[1] = 3221225472;
  v122[2] = sub_1016F8308;
  v122[3] = &unk_1021C9A90;
  v122[4] = &v138;
  __p[0] = v122;
  sub_10170FA4C(a2, 18, (uint64_t)__p);
  v121[0] = _NSConcreteStackBlock;
  v121[1] = 3221225472;
  v121[2] = sub_1016F831C;
  v121[3] = &unk_1021C9AB8;
  v121[8] = a1;
  v121[4] = &v126;
  v121[5] = &v142;
  v121[6] = &v134;
  v121[7] = &v130;
  __p[0] = v121;
  sub_10169CD88(a2, 19, __p);
  v120[0] = _NSConcreteStackBlock;
  v120[1] = 3221225472;
  v120[2] = sub_1016F8AF8;
  v120[3] = &unk_1021C9AD8;
  v120[4] = a1;
  __p[0] = v120;
  sub_10170FADC(a2, 20, (uint64_t)__p);
  v119[0] = _NSConcreteStackBlock;
  v119[1] = 3221225472;
  v119[2] = sub_1016F8C38;
  v119[3] = &unk_1021380A8;
  v119[4] = a1;
  __p[0] = v119;
  sub_10170FB6C(a2, 23, (uint64_t)__p);
  v118[0] = _NSConcreteStackBlock;
  v118[1] = 3221225472;
  v118[2] = sub_1016F9054;
  v118[3] = &unk_1021380A8;
  v118[4] = a1;
  __p[0] = v118;
  sub_10169C930(a2, 26, (uint64_t)__p);
  v117[0] = _NSConcreteStackBlock;
  v117[1] = 3221225472;
  v117[2] = sub_1016F91DC;
  v117[3] = &unk_1021C6618;
  v117[4] = a1;
  __p[0] = v117;
  sub_10169B82C(a2, 27, (uint64_t)__p);
  v116[0] = _NSConcreteStackBlock;
  v116[1] = 3221225472;
  v116[2] = sub_1016F9384;
  v116[3] = &unk_1021C9B00;
  v116[5] = a1;
  v116[4] = &v142;
  __p[0] = v116;
  sub_10169CCF8(a2, 28, (uint64_t)__p);
  v115[0] = _NSConcreteStackBlock;
  v115[1] = 3221225472;
  v115[2] = sub_1016F9598;
  v115[3] = &unk_1021C9B28;
  v115[5] = a1;
  v115[4] = &v142;
  __p[0] = v115;
  sub_10169B82C(a2, 32, (uint64_t)__p);
  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v114[2] = sub_1016F9780;
  v114[3] = &unk_1021C9B50;
  v114[5] = a1;
  v114[4] = &v142;
  __p[0] = v114;
  sub_101710080(a2, 34, (uint64_t)__p);
  v113[0] = _NSConcreteStackBlock;
  v113[1] = 3221225472;
  v113[2] = sub_1016F99FC;
  v113[3] = &unk_1021C9B78;
  v113[5] = a1;
  v113[4] = &v142;
  __p[0] = v113;
  sub_10171023C(a2, 36, (uint64_t)__p);
  v112[0] = _NSConcreteStackBlock;
  v112[1] = 3221225472;
  v112[2] = sub_1016F9A3C;
  v112[3] = &unk_1021380A8;
  v112[4] = a1;
  __p[0] = v112;
  sub_10170F654(a2, 37, (uint64_t)__p);
  v111[0] = _NSConcreteStackBlock;
  v111[1] = 3221225472;
  v111[2] = sub_1016F9AA8;
  v111[3] = &unk_1021C9B98;
  v111[4] = a1;
  __p[0] = v111;
  sub_1017103CC(a2, 38, (uint64_t)__p);
  v110[0] = _NSConcreteStackBlock;
  v110[1] = 3221225472;
  v110[2] = sub_1016F9BE8;
  v110[3] = &unk_1021C6638;
  v110[4] = a1;
  __p[0] = v110;
  sub_10169CCF8(a2, 39, (uint64_t)__p);
  v109[0] = _NSConcreteStackBlock;
  v109[1] = 3221225472;
  v109[2] = sub_1016F9D9C;
  v109[3] = &unk_1021C6658;
  v109[4] = a1;
  __p[0] = v109;
  sub_10169CCF8(a2, 40, (uint64_t)__p);
  v108[0] = _NSConcreteStackBlock;
  v108[1] = 3221225472;
  v108[2] = sub_1016F9F50;
  v108[3] = &unk_1021C9BB8;
  v108[4] = a1;
  __p[0] = v108;
  sub_10169CCF8(a2, 48, (uint64_t)__p);
  v107[0] = _NSConcreteStackBlock;
  v107[1] = 3221225472;
  v107[2] = sub_1016FA104;
  v107[3] = &unk_1021C6678;
  v107[4] = a1;
  __p[0] = v107;
  sub_10169CCF8(a2, 50, (uint64_t)__p);
  v106[0] = _NSConcreteStackBlock;
  v106[1] = 3221225472;
  v106[2] = sub_1016FA3A0;
  v106[3] = &unk_1021C9BD8;
  v106[4] = a1;
  __p[0] = v106;
  sub_10169B8BC(a2, 53, (uint64_t)__p);
  v74 = 0;
  v75 = &v74;
  v76 = 0x11012000000;
  v77 = sub_1016FA3A8;
  v78 = sub_1016FA49C;
  v79 = &unk_102080316;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v85 = 0;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  v89 = 9;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v90 = 0;
  v91 = 0;
  v95 = -1;
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v99 = -1;
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  v104 = 255;
  v105 = 0;
  v84 = 0xFFFFFFFFLL;
  v80 = 0;
  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472;
  v73[2] = sub_1016FA510;
  v73[3] = &unk_1021C66C0;
  v73[4] = &v74;
  __p[0] = v73;
  sub_10169CCF8(a2, 43, (uint64_t)__p);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_1016FA620;
  v72[3] = &unk_1021C66E8;
  v72[4] = &v74;
  __p[0] = v72;
  sub_10169CCF8(a2, 41, (uint64_t)__p);
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472;
  v71[2] = sub_1016FA730;
  v71[3] = &unk_1021C6710;
  v71[4] = &v74;
  __p[0] = v71;
  sub_10169CE40(a2, 42, (uint64_t)__p);
  v8 = v75;
  *((_WORD *)v75 + 130) = 255;
  *((_DWORD *)v8 + 64) = 255;
  v8[33] = 0;
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472;
  v70[2] = sub_1016FA848;
  v70[3] = &unk_1021C9C00;
  v70[4] = &v74;
  __p[0] = v70;
  sub_10169CCF8(a2, 55, (uint64_t)__p);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472;
  v69[2] = sub_1016FA85C;
  v69[3] = &unk_1021C6760;
  v69[4] = &v74;
  __p[0] = v69;
  sub_10169B8BC(a2, 54, (uint64_t)__p);
  v9 = *((_DWORD *)v75 + 64);
  if (v9 == 1)
    v10 = 1;
  else
    v10 = 255;
  if (v9 == 1)
    v11 = 1;
  else
    v11 = -1;
  _ZF = v9 == 0;
  if (v9)
    v13 = v11;
  else
    v13 = 0;
  *((_BYTE *)v75 + 260) = v13;
  if (_ZF)
    v14 = 0;
  else
    v14 = v10;
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  v67[2] = sub_1016FA898;
  v67[3] = &unk_1021C6788;
  v67[4] = &v74;
  v67[5] = a1;
  v68 = v14;
  __p[0] = v67;
  sub_10169CF8C(a2, 25, (uint64_t)__p);
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472;
  v66[2] = sub_1016FB044;
  v66[3] = &unk_1021C9C28;
  v66[4] = &v138;
  v66[5] = &v130;
  v66[6] = a1;
  __p[0] = v66;
  sub_10169CCF8(a2, 49, (uint64_t)__p);
  if (sub_100014ADC())
  {
    if (*((_DWORD *)v139 + 6) != 9)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        sub_101863204(*((_DWORD *)v139 + 6), __p);
        v16 = v176 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sessionFixStatus,%s", buf, 0xCu);
        if (v176 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v62 = qword_1022A0078;
        sub_101863204(*((_DWORD *)v139 + 6), buf);
        if (v172 >= 0)
          v63 = buf;
        else
          v63 = *(_BYTE **)buf;
        v173 = 136315138;
        v174 = v63;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v62, 2, "sessionFixStatus,%s", (const char *)&v173);
        v65 = v64;
        if (v172 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)", "%s\n", v65);
        if (v65 != (char *)__p)
          free(v65);
      }
    }
    if (sub_100CD5700(a1 + 2268) && *((_DWORD *)v139 + 6) == 8)
      sub_1016FB2D4(a1, "locationd,E911InProgress");
    if (*((_BYTE *)v127 + 24))
    {
      v17 = *((unsigned __int8 *)v131 + 24);
      if (v17 > 2)
      {
        if (v17 == 3 || v17 == 255)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          v45 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v17;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "InvalidFixMode,%d", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v17;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 16, "InvalidFixMode,%d", buf);
            v47 = (void **)v46;
            sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)", "%s\n", v46);
            if (v47 != __p)
              free(v47);
          }
        }
      }
      else
      {
        if (v17 - 1 < 2)
        {
          sub_1016FB4D4(a1, (uint64_t)(v143 + 6), (int *)v139 + 6, *((unsigned __int8 *)v131 + 24));
          v18 = v143;
          v19 = v143 + 6;
          v20 = *((_OWORD *)v143 + 6);
          v22 = *((_OWORD *)v143 + 3);
          v21 = *((_OWORD *)v143 + 4);
          *(_OWORD *)(a1 + 3256) = *((_OWORD *)v143 + 5);
          *(_OWORD *)(a1 + 3272) = v20;
          *(_OWORD *)(a1 + 3224) = v22;
          *(_OWORD *)(a1 + 3240) = v21;
          v23 = *((_OWORD *)v18 + 10);
          v25 = *((_OWORD *)v18 + 7);
          v24 = *((_OWORD *)v18 + 8);
          *(_OWORD *)(a1 + 3320) = *((_OWORD *)v18 + 9);
          *(_OWORD *)(a1 + 3336) = v23;
          *(_OWORD *)(a1 + 3288) = v25;
          *(_OWORD *)(a1 + 3304) = v24;
          v26 = *((_OWORD *)v18 + 14);
          v28 = *((_OWORD *)v18 + 11);
          v27 = *((_OWORD *)v18 + 12);
          *(_OWORD *)(a1 + 3384) = *((_OWORD *)v18 + 13);
          *(_OWORD *)(a1 + 3400) = v26;
          *(_OWORD *)(a1 + 3352) = v28;
          *(_OWORD *)(a1 + 3368) = v27;
          v30 = *((_OWORD *)v18 + 16);
          v29 = *((_OWORD *)v18 + 17);
          v31 = *((_OWORD *)v18 + 15);
          *(_QWORD *)(a1 + 3464) = v18[36];
          *(_OWORD *)(a1 + 3432) = v30;
          *(_OWORD *)(a1 + 3448) = v29;
          *(_OWORD *)(a1 + 3416) = v31;
          if ((_QWORD *)(a1 + 3224) == v19)
          {
LABEL_38:
            *(_OWORD *)(a1 + 3512) = *((_OWORD *)v18 + 21);
            goto LABEL_66;
          }
LABEL_37:
          *(_DWORD *)(a1 + 3504) = *((_DWORD *)v18 + 82);
          sub_100858F3C((_QWORD *)(a1 + 3472), (uint64_t *)v18[39], 0);
          goto LABEL_38;
        }
        if (!*((_BYTE *)v131 + 24))
        {
          v48 = (uint64_t)(v143 + 6);
          *((_DWORD *)v143 + 85) = 2 * *(unsigned __int8 *)(a1 + 2291);
          sub_1016FB6B4(a1, v48);
          sub_1016FB8D4(a1, *((unsigned __int8 *)v135 + 24), (uint64_t)(v143 + 6));
          v49 = v143;
          v50 = sub_1001FCBB4();
          v51 = *(double *)(a1 + 2624);
          if (v51 <= 0.0 || (v52 = v50 - v51, v52 < 0.0) || v52 > 0.5)
            *((_DWORD *)v49 + 47) = 0;
          v53 = (__int128 *)v143;
          if (v143 + 6 != (uint64_t *)(a1 + 2320))
          {
            v54 = v143 + 37;
            *((_DWORD *)v143 + 82) = *(_DWORD *)(a1 + 2600);
            sub_100858F3C(v54, *(uint64_t **)(a1 + 2584), 0);
            v53 = (__int128 *)v143;
          }
LABEL_65:
          sub_1016FB974(a1, *((_DWORD *)v139 + 6), v53 + 3, *((unsigned __int8 *)v131 + 24));
        }
      }
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 2016) || sub_100CD5700(a1 + 2268) || *(_BYTE *)(a1 + 2184))
    {
      if (!*((_BYTE *)v127 + 24))
        goto LABEL_66;
      sub_1016FB4D4(a1, (uint64_t)(v143 + 6), (int *)v139 + 6, *((unsigned __int8 *)v131 + 24));
      sub_1016FC41C(a1, *((_DWORD *)v139 + 6), (uint64_t)(v143 + 6), *((unsigned __int8 *)v131 + 24));
      v18 = v143;
      v32 = v143 + 6;
      v33 = *((_OWORD *)v143 + 6);
      v35 = *((_OWORD *)v143 + 3);
      v34 = *((_OWORD *)v143 + 4);
      *(_OWORD *)(a1 + 3256) = *((_OWORD *)v143 + 5);
      *(_OWORD *)(a1 + 3272) = v33;
      *(_OWORD *)(a1 + 3224) = v35;
      *(_OWORD *)(a1 + 3240) = v34;
      v36 = *((_OWORD *)v18 + 10);
      v38 = *((_OWORD *)v18 + 7);
      v37 = *((_OWORD *)v18 + 8);
      *(_OWORD *)(a1 + 3320) = *((_OWORD *)v18 + 9);
      *(_OWORD *)(a1 + 3336) = v36;
      *(_OWORD *)(a1 + 3288) = v38;
      *(_OWORD *)(a1 + 3304) = v37;
      v39 = *((_OWORD *)v18 + 14);
      v41 = *((_OWORD *)v18 + 11);
      v40 = *((_OWORD *)v18 + 12);
      *(_OWORD *)(a1 + 3384) = *((_OWORD *)v18 + 13);
      *(_OWORD *)(a1 + 3400) = v39;
      *(_OWORD *)(a1 + 3352) = v41;
      *(_OWORD *)(a1 + 3368) = v40;
      v43 = *((_OWORD *)v18 + 16);
      v42 = *((_OWORD *)v18 + 17);
      v44 = *((_OWORD *)v18 + 15);
      *(_QWORD *)(a1 + 3464) = v18[36];
      *(_OWORD *)(a1 + 3432) = v43;
      *(_OWORD *)(a1 + 3448) = v42;
      *(_OWORD *)(a1 + 3416) = v44;
      if ((_QWORD *)(a1 + 3224) == v32)
        goto LABEL_38;
      goto LABEL_37;
    }
    if (*((_BYTE *)v127 + 24))
    {
      v55 = (uint64_t)(v143 + 6);
      *((_DWORD *)v143 + 85) = 2 * *(unsigned __int8 *)(a1 + 2291);
      sub_1016FB6B4(a1, v55);
      sub_1016FB8D4(a1, *((unsigned __int8 *)v135 + 24), (uint64_t)(v143 + 6));
      v56 = v143;
      v57 = sub_1001FCBB4();
      v58 = *(double *)(a1 + 2624);
      if (v58 <= 0.0 || (v59 = v57 - v58, v59 < 0.0) || v59 > 0.5)
        *((_DWORD *)v56 + 47) = 0;
      v53 = (__int128 *)v143;
      if (v143 + 6 != (uint64_t *)(a1 + 2320))
      {
        v60 = v143 + 37;
        *((_DWORD *)v143 + 82) = *(_DWORD *)(a1 + 2600);
        sub_100858F3C(v60, *(uint64_t **)(a1 + 2584), 0);
        v53 = (__int128 *)v143;
      }
      goto LABEL_65;
    }
  }
LABEL_66:
  _Block_object_dispose(&v74, 8);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (SHIBYTE(v83) < 0)
    operator delete(v81);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v138, 8);
  _Block_object_dispose(&v142, 8);
  return sub_100067A50((uint64_t)&v166[8]);
}

void sub_1016F7E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a51, 8);
  sub_101692D70(v51 + 48);
  _Block_object_dispose(&STACK[0x5C0], 8);
  _Block_object_dispose(&STACK[0x5E0], 8);
  _Block_object_dispose(&STACK[0x600], 8);
  _Block_object_dispose(&STACK[0x620], 8);
  _Block_object_dispose(&STACK[0x640], 8);
  sub_100067A50((uint64_t)&STACK[0x768]);
  _Unwind_Resume(a1);
}

__n128 sub_1016F7F50(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  v13 = *(_OWORD *)(a2 + 240);
  v14 = *(_OWORD *)(a2 + 256);
  v15 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(_OWORD *)(a1 + 240) = v13;
  sub_10012D080(a1 + 296, (uint64_t *)(a2 + 296));
  result = *(__n128 *)(a2 + 336);
  *(__n128 *)(a1 + 336) = result;
  return result;
}

uint64_t sub_1016F7FCC(uint64_t a1)
{
  return sub_100067A50(a1 + 296);
}

_QWORD *sub_1016F7FD4(uint64_t a1, uint64_t a2)
{
  return sub_1016F7FDC(*(_QWORD *)(a1 + 32), a2);
}

_QWORD *sub_1016F7FDC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  _QWORD v10[3];
  _QWORD *v11;
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::referenceCounter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Recvd pds::tlv::referenceCounter", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleReferenceCounter(const pds::tlv::referenceCounter &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_DWORD *)buf = (sub_100078B88() * 1000.0);
  v10[0] = off_1021CCD28;
  v10[1] = a2;
  v10[2] = buf;
  v11 = v10;
  sub_10178EA00(a1 + 1704, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v6 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1016F81D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1016F821C(uint64_t a1, char **a2)
{
  void *__p[2];
  char v3;

  sub_1015E6AC4(__p, *a2, a2[1], a2[1] - *a2);
  sub_100CC1EA4((unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1016F8268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1016F8288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  void *__p[2];
  char v7;

  v4 = *(char **)(a2 + 8);
  v2 = a2 + 8;
  v3 = v4;
  if (*(char *)(v2 + 23) < 0)
  {
    v5 = *(_QWORD *)(v2 + 8);
  }
  else
  {
    v3 = (char *)v2;
    v5 = *(unsigned __int8 *)(v2 + 23);
  }
  sub_1015E6AC4(__p, v3, &v3[v5], v5);
  sub_100CC1EA4((unsigned __int8 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1016F82EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016F8308(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void sub_1016F831C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1[8];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  sub_1016F8398(v4, (int *)a2, *(_QWORD *)(a1[5] + 8) + 48, (_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24));
  sub_1016F6640(v4, (unint64_t *)(*(_QWORD *)(a1[5] + 8) + 48));
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = *(_BYTE *)(a2 + 104);
}

void sub_1016F8398(uint64_t a1, int *a2, uint64_t a3, _BYTE *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  double v23;
  unint64_t v24;
  NSObject *v25;
  double v26;
  int v27;
  double v28;
  NSObject *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  double v34;
  const char *v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[10];
  __int16 v49;
  int v50;
  _BYTE buf[20];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)((char *)a2 + 15);
    v10 = *a2;
    v11 = *(_QWORD *)((char *)a2 + 27);
    v12 = *(_QWORD *)((char *)a2 + 35);
    v13 = *(float *)((char *)a2 + 43);
    v14 = *(float *)((char *)a2 + 63);
    v15 = *(float *)((char *)a2 + 67);
    v16 = *(float *)((char *)a2 + 71);
    v17 = *(float *)((char *)a2 + 51);
    v18 = *(float *)((char *)a2 + 83);
    v19 = *((unsigned __int8 *)a2 + 91);
    v20 = *((unsigned __int8 *)a2 + 104);
    *(_DWORD *)buf = 68292099;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    v52 = v9;
    v53 = 2049;
    v54 = v10;
    v55 = 2049;
    v56 = v11;
    v57 = 2049;
    v58 = v12;
    v59 = 2049;
    v60 = v13;
    v61 = 2049;
    v62 = v14;
    v63 = 2049;
    v64 = v15;
    v65 = 2049;
    v66 = v16;
    v67 = 2049;
    v68 = v17;
    v69 = 2049;
    v70 = v18;
    v71 = 1025;
    v72 = v19;
    v73 = 1025;
    v74 = v20;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PositionDataEvent\", \"utc\":%{private}lld, \"valid\":%{private}ld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"horAcc\":\"%{private}f\", \"uncMaj\":\"%{private}f\", \"uncMinor\":\"%{private}f\", \"horzSpeed\":\"%{private}f\", \"horzSpeedUnc\":\"%{private}f\", \"horzConf\":%{private}d, \"fixMode\":%{private}d}", buf, 0x82u);
  }
  sub_10010F434((uint64_t)&v45);
  *(_QWORD *)(a3 + 8) = v46;
  v21 = sub_100512544();
  *(_DWORD *)(a3 + 40) = v21;
  if ((~*a2 & 0x4F8FF) == 0)
  {
    v22 = *((unsigned __int8 *)a2 + 14);
    if ((_DWORD)v21 != v22 && *(unsigned int *)((char *)a2 + 23) <= 0xF9)
    {
      *(_DWORD *)(a3 + 40) = v22;
      sub_1016F0C38(v21, (uint64_t)a2);
    }
  }
  v23 = -(kCFAbsoluteTimeIntervalSince1970 - (double)*(unint64_t *)((char *)a2 + 15) * 0.001);
  *(double *)(a3 + 16) = v23;
  *(int8x16_t *)(a3 + 24) = vextq_s8(v45, v45, 8uLL);
  *(float *)(a3 + 44) = (float)*(unsigned int *)((char *)a2 + 23);
  v44 = 0;
  sub_100073658((int *)&v44 + 1, &v44, v23);
  LODWORD(v24) = v44;
  *(_QWORD *)a3 = (unint64_t)((double)v24 * 1000000.0
                                   + (double)(604800 * HIDWORD(v44)) * 1000000000.0);
  *(_BYTE *)(a3 + 168) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v25 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v26 = *(double *)(a3 + 8) - *(double *)(a3 + 16);
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#ec,pedApparentCfTimeErr,%{public}.4f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v34 = *(double *)(a3 + 8) - *(double *)(a3 + 16);
    v47 = 134349056;
    *(double *)v48 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ec,pedApparentCfTimeErr,%{public}.4f", &v47, 12);
    v36 = (char *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleParsedPositionData(const pds::tlv::parsedPositionData &, GNSS::PerEpochData &, uint8_t &)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  if ((*(_BYTE *)a2 & 0x30) != 0 && !sub_10011CE64(*(double *)((char *)a2 + 27), *(double *)((char *)a2 + 35)))
  {
    *(_BYTE *)(a3 + 48) = 1;
    *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)a2 + 27);
    *(double *)(a3 + 72) = *(float *)((char *)a2 + 43);
  }
  v27 = *a2;
  if ((*a2 & 0x40) != 0)
  {
    v28 = *(float *)((char *)a2 + 43);
    *(double *)(a3 + 72) = v28;
    if ((v27 & 0x80) != 0)
      *(double *)(a3 + 80) = v28 - *(float *)((char *)a2 + 47);
  }
  if ((v27 & 0x800) != 0)
  {
    *(double *)(a3 + 96) = *(float *)((char *)a2 + 63);
    if ((v27 & 0x1000) == 0)
    {
LABEL_22:
      if ((v27 & 0x2000) == 0)
        goto LABEL_23;
      goto LABEL_46;
    }
  }
  else if ((v27 & 0x1000) == 0)
  {
    goto LABEL_22;
  }
  *(double *)(a3 + 112) = *(float *)((char *)a2 + 67);
  if ((v27 & 0x2000) == 0)
  {
LABEL_23:
    if ((v27 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  *(double *)(a3 + 120) = *(float *)((char *)a2 + 71);
  if ((v27 & 0x4000) == 0)
  {
LABEL_24:
    if ((v27 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  *(double *)(a3 + 128) = *(float *)((char *)a2 + 75);
  if ((v27 & 0x8000) == 0)
  {
LABEL_25:
    if ((v27 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_49;
  }
LABEL_48:
  *(double *)(a3 + 104) = *(float *)((char *)a2 + 79);
  if ((v27 & 0x100) == 0)
  {
LABEL_26:
    if ((v27 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_49:
  *(_BYTE *)(a3 + 144) = 1;
  *(double *)(a3 + 152) = *(float *)((char *)a2 + 51);
  *(double *)(a3 + 160) = *(float *)((char *)a2 + 83);
  if ((v27 & 0x400) != 0)
  {
LABEL_27:
    *(_BYTE *)(a3 + 168) = 1;
    *(double *)(a3 + 176) = *(float *)((char *)a2 + 59);
  }
LABEL_28:
  *a4 = 0;
  if ((*((_BYTE *)a2 + 2) & 4) != 0)
    *a4 = *((_BYTE *)a2 + 91);
  if (*(_BYTE *)(a3 + 48)
    && ((sub_1001DF9C4() & 1) != 0 || sub_1001DC9E0() && *(_BYTE *)(a1 + 1290))
    && *(double *)(a3 + 112) <= *(float *)(a1 + 1292)
    && *(_BYTE *)(a1 + 1696)
    && !*(_BYTE *)(a1 + 1684))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v29 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(unsigned __int8 *)(a3 + 48);
      v31 = *(unsigned __int8 *)(a1 + 1290);
      v32 = *(unsigned __int8 *)(a1 + 1696);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#timingadvance,GNSS is active,query timing advance,isGnssValid,%{public}d,isTimingAdvanceEnabled,%{public}d,isDeviceInRRCState,%{public}d ", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v37 = *(unsigned __int8 *)(a3 + 48);
      v38 = *(unsigned __int8 *)(a1 + 1290);
      v39 = *(unsigned __int8 *)(a1 + 1696);
      v47 = 67240704;
      *(_DWORD *)v48 = v37;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v38;
      v49 = 1026;
      v50 = v39;
      LODWORD(v42) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,GNSS is active,query timing advance,isGnssValid,%{public}d,isTimingAdvanceEnabled,%{public}d,isDeviceInRRCState,%{public}d ", &v47, v42);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleParsedPositionData(const pds::tlv::parsedPositionData &, GNSS::PerEpochData &, uint8_t &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    objc_msgSend(*(id *)(a1 + 1688), "setNextFireDelay:", *(float *)(a1 + 1296));
    v33 = *(_DWORD *)(a1 + 1680);
    memset(v43, 0, sizeof(v43));
    sub_100D97524(v43, *(_QWORD *)(a1 + 4104), *(_QWORD *)(a1 + 4112), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(_QWORD *)(a1 + 4112) - *(_QWORD *)(a1 + 4104)) >> 3));
    sub_101878030(v33, v43, a1 + 1704, *(_QWORD *)(a1 + 1672));
    *(_QWORD *)buf = v43;
    sub_10087B4F8((void ***)buf);
    *(_BYTE *)(a1 + 1684) = 1;
  }
}

void sub_1016F8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10087B4F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1016F8AF8(uint64_t a1, unsigned __int16 *a2)
{
  return sub_1016F8B00(*(unsigned int **)(a1 + 32), a2);
}

uint64_t sub_1016F8B00(unsigned int *a1, unsigned __int16 *a2)
{
  NSObject *v3;
  unsigned int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  unsigned int v12;

  a1[536] = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = a1[536];
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = "handleExternalXtraDataBaseRequest";
    v11 = 1026;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,bbRequest\", \"request\":%{private, location:escape_only}s, \"maxSize\":%{public}d}", (uint8_t *)v6, 0x22u);
  }
  sub_1016E419C((uint64_t)a1);
  sub_1016E6DB4((uint64_t)a1, a1[536]);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 192))(a1);
  return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 208))(a1);
}

void sub_1016F8C3C(uint64_t a1, int *a2)
{
  NSObject *v3;
  float v4;
  __int128 v5;
  float *v6;
  int *v7;
  NSObject *v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  float v29;
  const char *v30;
  uint8_t *v31;
  __int128 v32;
  _DWORD v33[2];
  int v34;
  int v35;
  int v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  float v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(float *)a2;
    *(_DWORD *)buf = 67109120;
    v43 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "satelliteInfo,validMask,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v29 = *(float *)a2;
    v33[0] = 67109120;
    *(float *)&v33[1] = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "satelliteInfo,validMask,%d", v33);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleSatelliteInfo(const pds::tlv::satelliteInfo &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v6 = (float *)*((_QWORD *)a2 + 1);
  v7 = (int *)*((_QWORD *)a2 + 2);
  if (v6 != (float *)v7)
  {
    *(_QWORD *)&v5 = 67111424;
    v32 = v5;
    do
    {
      if (*(_DWORD *)v6)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v8 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v9 = *v6;
          v10 = *((unsigned __int8 *)v6 + 4);
          v11 = *((unsigned __int8 *)v6 + 5);
          v12 = *((unsigned __int8 *)v6 + 6);
          v13 = *((unsigned __int8 *)v6 + 7);
          v14 = *((unsigned __int8 *)v6 + 8);
          v15 = *((unsigned __int8 *)v6 + 9);
          v16 = (int)v6[3];
          v17 = *((unsigned __int16 *)v6 + 8);
          v18 = *((unsigned __int16 *)v6 + 9);
          *(_DWORD *)buf = v32;
          v43 = v9;
          v44 = 1024;
          v45 = v10;
          v46 = 1024;
          v47 = v11;
          v48 = 1024;
          v49 = v12;
          v50 = 1024;
          v51 = v13;
          v52 = 1024;
          v53 = v14;
          v54 = 1024;
          v55 = v15;
          v56 = 1024;
          v57 = v16;
          v58 = 1024;
          v59 = v17;
          v60 = 1024;
          v61 = v18;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "valid,%d,system,%d,prn,%d,health,%d,processingStatus,%d,ephemerisAvailable,%d,almanacAvailable,%d,elevation,%d,azimuth,%d,cno,%d", buf, 0x3Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          v19 = *((unsigned __int8 *)v6 + 4);
          v20 = *((unsigned __int8 *)v6 + 5);
          v21 = *((unsigned __int8 *)v6 + 6);
          v22 = *((unsigned __int8 *)v6 + 8);
          v23 = *((unsigned __int8 *)v6 + 9);
          v24 = (int)v6[3];
          v25 = *((unsigned __int16 *)v6 + 8);
          v26 = *((unsigned __int16 *)v6 + 9);
          LOWORD(v34) = 1024;
          HIWORD(v34) = v19;
          LOWORD(v35) = HIWORD(v21);
          HIWORD(v35) = 1024;
          LOWORD(v36) = 1024;
          HIWORD(v36) = v22;
          HIWORD(v37) = HIWORD(v24);
          v38 = 1024;
          v39 = v25;
          v40 = 1024;
          v41 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "valid,%d,system,%d,prn,%d,health,%d,processingStatus,%d,ephemerisAvailable,%d,almanacAvailable,%d,elevation,%d,azimuth,%d,cno,%d", v33, 62, (_DWORD)v32, DWORD2(v32), (_DWORD)v32, v34, v20, v35, v36, v23);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleSatelliteInfo(const pds::tlv::satelliteInfo &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
      }
      v6 += 5;
    }
    while (v6 != (float *)v7);
  }
}

void sub_1016F9058()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Recvd pds::tlv::umtsCpNetworkPrompt", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Recvd pds::tlv::umtsCpNetworkPrompt", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleUmtsCpNetworkPrompt(const pds::tlv::umtsCpNetworkPrompt &)", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
}

void sub_1016F91DC(uint64_t a1, char *a2)
{
  sub_1016F91E4(*(_QWORD *)(a1 + 32), a2);
}

void sub_1016F91E4(uint64_t a1, char *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Recvd pds::tlv::commEvent", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Recvd pds::tlv::commEvent", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleCommEvent(const pds::tlv::commEvent &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101810568(*(_QWORD *)(a1 + 2232), a2);
}

void sub_1016F9384(uint64_t a1, int *a2)
{
  sub_1016F9394(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void sub_1016F9394(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  *(_DWORD *)(a3 + 136) = *a2 & 0x101 | (*a2 >> 1) & 2 | (*a2 >> 3) & 4 | (*a2 >> 2) & 0x10 | (*a2 >> 4) & 8 | (32 * ((*a2 >> 4) & 1)) & 0xFFFFFFBF | (((*a2 >> 3) & 1) << 6) | (*a2 << 6) & 0x80;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::positionSource,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = *a2;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Recvd pds::tlv::positionSource,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionSource(const pds::tlv::positionSource &, GNSS::PerEpochData &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_1016F9598(uint64_t a1, _BYTE *a2)
{
  sub_1016F95AC(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void sub_1016F95AC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::positionReliability", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Recvd pds::tlv::positionReliability", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionReliability(const pds::tlv::positionReliability &, GNSS::PerEpochData &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(double *)(a1 + 2624) = sub_1001FCBB4();
  *(_DWORD *)(a3 + 140) = 0;
  if ((*a2 - 1) <= 3u)
    *(_DWORD *)(a3 + 140) = dword_101CD1020[(char)(*a2 - 1)];
}

void sub_1016F9780(uint64_t a1, uint64_t a2)
{
  sub_1016F9790(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void sub_1016F9790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  NSObject *v7;
  int v8;
  double v9;
  int v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int8x16_t v19;
  uint64_t v20;
  _DWORD v21[2];
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  sub_10010F434((uint64_t)&v19);
  v5 = *(unsigned __int16 *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a3 = (unint64_t)((double)v6 * 1000000.0 + (double)(604800 * v5) * 1000000000.0);
  *(_QWORD *)(a3 + 8) = v20;
  *(double *)(a3 + 16) = sub_100515558(v5, v6);
  *(int8x16_t *)(a3 + 24) = vextq_s8(v19, v19, 8uLL);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(char *)(a2 + 1);
    v9 = *(float *)(a2 + 4);
    v10 = *(unsigned __int16 *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)buf = 67109888;
    v29 = v8;
    v30 = 2048;
    v31 = v9;
    v32 = 1024;
    v33 = v10;
    v34 = 1024;
    v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Recvd pds::tlv::timeSource,source,%d,unc,%.2f,week,%d,tow,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v12 = *(char *)(a2 + 1);
    v13 = *(float *)(a2 + 4);
    v14 = *(unsigned __int16 *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    v21[0] = 67109888;
    v21[1] = v12;
    v22 = 2048;
    v23 = v13;
    v24 = 1024;
    v25 = v14;
    v26 = 1024;
    v27 = v15;
    LODWORD(v18) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Recvd pds::tlv::timeSource,source,%d,unc,%.2f,week,%d,tow,%d", v21, v18, v19.i32[0], v19.i32[2]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleTimeSource(const pds::tlv::timeSource &, GNSS::PerEpochData &)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_1016F99FC(uint64_t a1, float *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*a2 <= 0.0)
    *(_BYTE *)(v2 + 216) = 0;
  else
    *(double *)(v2 + 232) = sub_100512A90(*a2);
}

void sub_1016F9A40(uint64_t a1, char **a2)
{
  void *__p[2];
  char v3;

  sub_1015E6AC4(__p, *a2, a2[1], a2[1] - *a2);
  sub_100CC1EA4((unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1016F9A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016F9AA8(uint64_t a1, unsigned int *a2)
{
  return sub_1016F9AB0(*(unsigned int **)(a1 + 32), a2);
}

uint64_t sub_1016F9AB0(unsigned int *a1, unsigned int *a2)
{
  NSObject *v3;
  unsigned int v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  unsigned int v12;

  a1[536] = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = a1[536];
    v6[0] = 68289539;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = "handleExtendedExternalXtraDataBaseRequest";
    v11 = 1026;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,bbRequest\", \"request\":%{private, location:escape_only}s, \"maxSize\":%{public}d}", (uint8_t *)v6, 0x22u);
  }
  sub_1016E419C((uint64_t)a1);
  sub_1016E6DB4((uint64_t)a1, a1[536]);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 192))(a1);
  return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 208))(a1);
}

void sub_1016F9BEC(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::resetState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Recvd tlv::resetState,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleResetState(const pds::tlv::resetState &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1016F9DA0(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::sessionEndReason,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Recvd tlv::sessionEndReason,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleSessionEndReason(const pds::tlv::sessionEndReason &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1016F9F54(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recvd tlv::CdmaCpNiFailureReason,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = *a2;
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Recvd tlv::CdmaCpNiFailureReason,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleCdmaCpNiFailureReason(const pds::tlv::CdmaCpNiFailureReason &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

void sub_1016FA104(uint64_t a1, int *a2)
{
  sub_1016FA10C(*(_QWORD *)(a1 + 32), a2);
}

void sub_1016FA10C(uint64_t a1, int *a2)
{
  NSObject *v4;
  void **v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_101862E2C(*a2, __p);
    v5 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@EmergencyGps Emergency Event ,EmergencyEvent,%{public}s", buf, 0xCu);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
    v8 = qword_1022A0088;
    sub_101862E2C(*a2, buf);
    if (v13 >= 0)
      v9 = buf;
    else
      v9 = *(_BYTE **)buf;
    v14 = 136446210;
    v15 = v9;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 0, "@EmergencyGps Emergency Event ,EmergencyEvent,%{public}s", &v14, 12);
    v11 = v10;
    if (v13 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handleEmergencyEvent(const pds::tlv::emergencyEvent &)", "%s\n", v11);
    if (v11 != (char *)__p)
      free(v11);
  }
  if (sub_100014ADC() && *(_BYTE *)(a1 + 2016) && (*a2 == 7 || !*a2))
    sub_1016FC614(a1);
  sub_101811350(*(_QWORD *)(a1 + 2232), *a2);
  if (!sub_1001DC538())
  {
    v6 = 0;
    goto LABEL_19;
  }
  v6 = *(_DWORD *)(a1 + 3552);
  if (v6 <= 1)
  {
LABEL_19:
    v7 = (uint64_t *)sub_1016E37F8((_QWORD *)(a1 + 2248), v6);
    sub_1017EDA1C(*v7, *a2);
  }
  if (*a2 == 9)
    *(_DWORD *)(a1 + 3552) = 255;
}

void sub_1016FA3A0(uint64_t a1, uint64_t *a2)
{
  sub_1016EE25C(*(_QWORD *)(a1 + 32), a2);
}

__n128 sub_1016FA3A8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v4 = *(_OWORD *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  return result;
}

void sub_1016FA49C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(_QWORD *)(a1 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void sub_1016FA510(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 49) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) = *a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInitSource\", \"suplinitsource\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_1016FA620(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 50) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84) = *a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 84);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplTriggerType\", \"supltriggertype\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_1016FA730(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  _QWORD *v10;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 1;
  std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56), a2);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v3 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)(v4 + 56);
    if (*(char *)(v4 + 79) < 0)
      v5 = (_QWORD *)*v5;
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEmergencyNotification\", \"suplemergencynotification\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

uint64_t sub_1016FA848(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 256) = *a2;
  return result;
}

uint64_t sub_1016FA85C(uint64_t result, _QWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 261) = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 264) = *a2;
  return result;
}

uint64_t sub_1016FA880(int a1)
{
  unsigned __int8 v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = -1;
  if (!a1)
    return 0;
  return v1;
}

void sub_1016FA898(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  char v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  size_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  unint64_t v60;
  size_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  _BYTE *v78;
  _BYTE *v79;
  char v80;
  unint64_t v81;
  NSObject *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint8_t buf[4];
  int v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;

  v3 = a1;
  v4 = 0;
  v104 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 51) = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 88) = *(_DWORD *)a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 92) = *(_BYTE *)(a2 + 4);
  do
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
    v6 = *(_QWORD *)(a2 + 8) >> (8 * v4);
    v8 = (_BYTE *)v5[13];
    v7 = v5[14];
    if ((unint64_t)v8 >= v7)
    {
      v10 = v5[12];
      v11 = &v8[-v10];
      v12 = (uint64_t)&v8[-v10 + 1];
      if (v12 < 0)
LABEL_117:
        sub_100259694();
      v13 = v7 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)operator new(v14);
      else
        v15 = 0;
      v16 = &v11[(_QWORD)v15];
      v11[(_QWORD)v15] = v6;
      v9 = (uint64_t)&v11[(_QWORD)v15 + 1];
      if (v8 != (_BYTE *)v10)
      {
        v17 = &v8[~v10];
        do
        {
          v18 = *--v8;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v8 != (_BYTE *)v10);
        v8 = (_BYTE *)v5[12];
        v16 = v15;
      }
      v5[12] = v16;
      v5[13] = v9;
      v5[14] = &v15[v14];
      v3 = a1;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = (uint64_t)(v8 + 1);
    }
    v5[13] = v9;
    ++v4;
  }
  while (v4 != 8);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 120) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 124) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 128) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 132) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 136) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 140) = *(_OWORD *)(a2 + 36);
  if (*(char *)(a2 + 79) >= 0)
    v19 = *(unsigned __int8 *)(a2 + 79);
  else
    v19 = *(_QWORD *)(a2 + 64);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 160), v19);
  v20 = *(char *)(a2 + 79) < 0;
  v21 = *(unsigned __int8 *)(a2 + 79);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a2 + 64);
  if (v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v20)
        v24 = *(_QWORD *)(a2 + 56);
      else
        v24 = a2 + 56;
      v25 = *(_BYTE *)(v24 + v22);
      v27 = (_BYTE *)v23[21];
      v26 = v23[22];
      if ((unint64_t)v27 >= v26)
      {
        v29 = v23[20];
        v30 = &v27[-v29];
        v31 = (uint64_t)&v27[-v29 + 1];
        if (v31 < 0)
          goto LABEL_117;
        v32 = v26 - v29;
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
          v33 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)operator new(v33);
        else
          v34 = 0;
        v35 = &v30[(_QWORD)v34];
        v36 = &v30[(_QWORD)v34];
        *v36 = v25;
        v28 = v36 + 1;
        if (v27 != (_BYTE *)v29)
        {
          v37 = &v27[~v29];
          do
          {
            v38 = *--v27;
            (v37--)[(_QWORD)v34] = v38;
          }
          while (v27 != (_BYTE *)v29);
          v27 = (_BYTE *)v23[20];
          v35 = v34;
        }
        v23[20] = v35;
        v23[21] = v28;
        v23[22] = &v34[v33];
        v3 = a1;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v27 = v25;
        v28 = v27 + 1;
      }
      v23[21] = v28;
      ++v22;
      v20 = *(char *)(a2 + 79) < 0;
      v39 = *(unsigned __int8 *)(a2 + 79);
      if ((v39 & 0x80u) != 0)
        v39 = *(_QWORD *)(a2 + 64);
    }
    while (v39 > v22);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 184) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 185) = *(_BYTE *)(a2 + 81);
  if (*(char *)(a2 + 111) >= 0)
    v40 = *(unsigned __int8 *)(a2 + 111);
  else
    v40 = *(_QWORD *)(a2 + 96);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 192), v40);
  v41 = *(char *)(a2 + 111) < 0;
  v42 = *(unsigned __int8 *)(a2 + 111);
  if ((v42 & 0x80u) != 0)
    v42 = *(_QWORD *)(a2 + 96);
  if (v42)
  {
    v43 = 0;
    do
    {
      v44 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v41)
        v45 = *(_QWORD *)(a2 + 88);
      else
        v45 = a2 + 88;
      v46 = *(_BYTE *)(v45 + v43);
      v48 = (_BYTE *)v44[25];
      v47 = v44[26];
      if ((unint64_t)v48 >= v47)
      {
        v50 = v44[24];
        v51 = &v48[-v50];
        v52 = (uint64_t)&v48[-v50 + 1];
        if (v52 < 0)
          goto LABEL_117;
        v53 = v47 - v50;
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
          v54 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
          v55 = (char *)operator new(v54);
        else
          v55 = 0;
        v56 = &v51[(_QWORD)v55];
        v57 = &v51[(_QWORD)v55];
        *v57 = v46;
        v49 = v57 + 1;
        if (v48 != (_BYTE *)v50)
        {
          v58 = &v48[~v50];
          do
          {
            v59 = *--v48;
            (v58--)[(_QWORD)v55] = v59;
          }
          while (v48 != (_BYTE *)v50);
          v48 = (_BYTE *)v44[24];
          v56 = v55;
        }
        v44[24] = v56;
        v44[25] = v49;
        v44[26] = &v55[v54];
        v3 = a1;
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v48 = v46;
        v49 = v48 + 1;
      }
      v44[25] = v49;
      ++v43;
      v41 = *(char *)(a2 + 111) < 0;
      v60 = *(unsigned __int8 *)(a2 + 111);
      if ((v60 & 0x80u) != 0)
        v60 = *(_QWORD *)(a2 + 96);
    }
    while (v60 > v43);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 216) = *(_BYTE *)(a2 + 112);
  if (*(char *)(a2 + 143) >= 0)
    v61 = *(unsigned __int8 *)(a2 + 143);
  else
    v61 = *(_QWORD *)(a2 + 128);
  sub_100054CE0((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 224), v61);
  v62 = *(char *)(a2 + 143) < 0;
  v63 = *(unsigned __int8 *)(a2 + 143);
  if ((v63 & 0x80u) != 0)
    v63 = *(_QWORD *)(a2 + 128);
  if (v63)
  {
    v64 = 0;
    do
    {
      v65 = *(_QWORD **)(*(_QWORD *)(v3 + 32) + 8);
      if (v62)
        v66 = *(_QWORD *)(a2 + 120);
      else
        v66 = a2 + 120;
      v67 = *(_BYTE *)(v66 + v64);
      v69 = (_BYTE *)v65[29];
      v68 = v65[30];
      if ((unint64_t)v69 >= v68)
      {
        v71 = v65[28];
        v72 = &v69[-v71];
        v73 = (uint64_t)&v69[-v71 + 1];
        if (v73 < 0)
          goto LABEL_117;
        v74 = v68 - v71;
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x3FFFFFFFFFFFFFFFLL)
          v75 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
          v76 = (char *)operator new(v75);
        else
          v76 = 0;
        v77 = &v72[(_QWORD)v76];
        v78 = &v72[(_QWORD)v76];
        *v78 = v67;
        v70 = v78 + 1;
        if (v69 != (_BYTE *)v71)
        {
          v79 = &v69[~v71];
          do
          {
            v80 = *--v69;
            (v79--)[(_QWORD)v76] = v80;
          }
          while (v69 != (_BYTE *)v71);
          v69 = (_BYTE *)v65[28];
          v77 = v76;
        }
        v65[28] = v77;
        v65[29] = v70;
        v65[30] = &v76[v75];
        v3 = a1;
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v69 = v67;
        v70 = v69 + 1;
      }
      v65[29] = v70;
      ++v64;
      v62 = *(char *)(a2 + 143) < 0;
      v81 = *(unsigned __int8 *)(a2 + 143);
      if ((v81 & 0x80u) != 0)
        v81 = *(_QWORD *)(a2 + 128);
    }
    while (v81 > v64);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 248) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 249) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 250) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 251) = *(_BYTE *)(a2 + 147);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v82 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v83 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
    v84 = *(_DWORD *)(v83 + 88);
    v85 = *(unsigned __int8 *)(v83 + 92);
    v86 = *(unsigned __int8 *)(v83 + 120);
    v87 = *(_DWORD *)(v83 + 124);
    v88 = *(_DWORD *)(v83 + 128);
    v89 = *(_DWORD *)(v83 + 132);
    v90 = *(_DWORD *)(v83 + 136);
    v91 = *(unsigned __int8 *)(v83 + 184);
    v92 = *(unsigned __int8 *)(v83 + 185);
    v93 = *(unsigned __int8 *)(v83 + 216);
    v94 = *(unsigned __int8 *)(v83 + 248);
    v95 = *(unsigned __int8 *)(v83 + 249);
    v96 = *(unsigned __int8 *)(v83 + 250);
    v97 = *(unsigned __int8 *)(v83 + 251);
    v98 = *(_DWORD *)(v83 + 256);
    v99 = *(unsigned __int8 *)(v83 + 260);
    v100 = *(unsigned __int8 *)(v83 + 261);
    v101 = *(_QWORD *)(v83 + 264);
    *(_DWORD *)buf = 68293634;
    v107 = 0;
    v108 = 2082;
    v109 = "";
    v110 = 1026;
    v111 = v84;
    v112 = 1026;
    v113 = v85;
    v114 = 1026;
    v115 = v86;
    v116 = 1026;
    v117 = v87;
    v118 = 1026;
    v119 = v88;
    v120 = 1026;
    v121 = v89;
    v122 = 1026;
    v123 = v90;
    v124 = 1026;
    v125 = v91;
    v126 = 1026;
    v127 = v92;
    v128 = 1026;
    v129 = v93;
    v130 = 1026;
    v131 = v94;
    v132 = 1026;
    v133 = v95;
    v134 = 1026;
    v135 = v96;
    v136 = 1026;
    v137 = v97;
    v138 = 1026;
    v139 = v98;
    v140 = 1026;
    v141 = v99;
    v142 = 1026;
    v143 = v100;
    v144 = 2050;
    v145 = v101;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,SuplInit\", \"validmask\":%{public}d, \"privacy\":%{public}d, \"mode\":%{public}d, \"sessionid\":%{public}d, \"slpserveripv4port\":%{public}d, \"slpserveripv4addr\":%{public}d, \"slpserveripv6port\":%{public}d, \"dcs\":%{public}d, \"requestoriddcs\":%{public}d, \"clientnamedcs\":%{public}d, \"qophorizacc\":%{public}d, \"qopvertzacc\":%{public}d, \"qopmaxlocage\":%{public}d, \"qopdelay\":%{public}d, \"instance\":%{public}d, \"certIndex\":%{public}d, \"isMaskPresent\":%{public}hhd, \"mask\":%{public}llu}", buf, 0x82u);
  }
  v102 = *(_DWORD *)(v3 + 48);
  if (v102 != 255)
  {
    v103 = (uint64_t *)sub_1016E37F8((_QWORD *)(v104 + 2248), v102);
    sub_1017EC77C(*v103, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 48);
  }
}

void sub_1016FB044(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(v3 + 3552);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = v6;
    v19 = 1026;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#supl,suplEndReason\", \"suplendreason\":%{public}d, \"instance\":%{public}d}", buf, 0x1Eu);
  }
  if (v4 > 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "NonMatchingSuplEnd", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "NonMatchingSuplEnd", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLEurekaController::handlePdsEventReport(const pds::eventReportInd::Indication &)_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    v7 = (uint64_t *)sub_1016E37F8((_QWORD *)(v3 + 2248), v4);
    sub_1017EC884(*v7, a2);
    v8 = (uint64_t *)sub_1016E37F8((_QWORD *)(v3 + 2248), v4);
    sub_1017ED014(*v8, v3 + 3224);
  }
}

void sub_1016FB2D4(uint64_t a1, char *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int8 *)(a1 + 2016);
    v6 = *(unsigned __int8 *)(a1 + 2264);
    v7 = *(_DWORD *)(a1 + 2260);
    v8 = *(_DWORD *)(a1 + 2256);
    v14 = 68290306;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = a2;
    v20 = 1026;
    v21 = v5;
    v22 = 1026;
    v23 = v6;
    v24 = 1026;
    v25 = v7;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  v9 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v10 = *(unsigned __int8 *)(a1 + 2016);
    v11 = *(unsigned __int8 *)(a1 + 2264);
    v12 = *(_DWORD *)(a1 + 2260);
    v13 = *(_DWORD *)(a1 + 2256);
    v14 = 68290306;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = a2;
    v20 = 1026;
    v21 = v10;
    v22 = 1026;
    v23 = v11;
    v24 = 1026;
    v25 = v12;
    v26 = 1026;
    v27 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,error", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
  }
  sub_1016FEE2C(a1, a2, 1);
}

void sub_1016FB4D4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void **v37;
  __int16 v38;
  int v39;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v8 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    v10 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 104);
    v17 = *(_DWORD *)(a2 + 136);
    sub_101863204(*a3, __p);
    v14 = __p;
    if (v19 < 0)
      v14 = (void **)__p[0];
    *(_DWORD *)buf = 68291075;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 1026;
    v25 = v9;
    v26 = 2049;
    v27 = v10;
    v28 = 2049;
    v29 = v11;
    v30 = 2049;
    v31 = v13;
    v32 = 2049;
    v33 = v12;
    v34 = 1025;
    v35 = v17;
    v36 = 2082;
    v37 = v14;
    v38 = 1026;
    v39 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NILR Session Status\", \"session status\":%{public}d, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"hunc\":\"%{private}f\", \"vunc\":\"%{private}f\", \"position_source\":%{private}d, \"sessionFixStatus\":%{public, location:escape_only}s, \"mode\":%{public}d}", buf, 0x56u);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  sub_1018117C4(*(_QWORD *)(a1 + 2232), a2, (unsigned int *)a3, a4);
  if (!sub_1001DC538())
  {
    v15 = 0;
    goto LABEL_12;
  }
  v15 = *(_DWORD *)(a1 + 3552);
  if (v15 <= 1)
  {
LABEL_12:
    v16 = (uint64_t *)sub_1016E37F8((_QWORD *)(a1 + 2248), v15);
    sub_1017ED894(*v16, a4);
  }
}

void sub_1016FB6B4(uint64_t a1, uint64_t a2)
{
  double v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (!*(_BYTE *)(a2 + 144))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "InvalidSpeed";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reject Speed/Course\", \"reason\":%{public, location:escape_only}s}", (uint8_t *)&v12, 0x1Cu);
    }
    goto LABEL_15;
  }
  v3 = *(double *)(a2 + 160);
  if (v3 < 0.0 || v3 > 12.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 152);
      v7 = *(_QWORD *)(a2 + 160);
      v8 = *(_QWORD *)(a2 + 176);
      v9 = *(_QWORD *)(a2 + 184);
      v12 = 68290306;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "OutOfRangeSpeedUnc";
      v18 = 2050;
      v19 = v6;
      v20 = 2050;
      v21 = v7;
      v22 = 2050;
      v23 = v8;
      v24 = 2050;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reject Speed/Course\", \"reason\":%{public, location:escape_only}s, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\"}", (uint8_t *)&v12, 0x44u);
    }
    *(_BYTE *)(a2 + 144) = 0;
LABEL_15:
    *(_BYTE *)(a2 + 168) = 0;
    return;
  }
  if (*(double *)(a2 + 152) < 0.1)
  {
    if (*(_BYTE *)(a1 + 2368))
    {
      if (*(_BYTE *)(a1 + 2464))
      {
        v11 = *(double *)(a1 + 2480);
        if (v11 > 0.0 && v3 < v11 && *(double *)(a1 + 2472) > 0.1)
          *(double *)(a2 + 160) = v11;
      }
    }
  }
}

BOOL sub_1016FB8D4(_BOOL8 result, int a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  double v7;

  if (*(_BYTE *)(a3 + 48))
  {
    v4 = *(double *)(a3 + 112);
    if (v4 > 0.0)
    {
      v5 = *(double *)(a3 + 120);
      if (v5 > 0.0)
      {
        if (a2 == 95)
        {
          v6 = sqrt(v5 * v5 + v4 * v4) * 0.408163265;
          *(double *)(a3 + 96) = v6;
        }
        else
        {
          v6 = *(double *)(a3 + 96);
        }
        v7 = *(double *)(a3 + 104);
        if (v7 > 1200.0)
          v7 = 1200.0;
        *(double *)(a3 + 104) = v7;
        if (v6 > 400.0)
        {
          result = sub_1001133B0(result + 2268);
          if (!result)
            *(_BYTE *)(a3 + 48) = 0;
        }
      }
    }
  }
  return result;
}

__n128 sub_1016FB974(uint64_t a1, int a2, __int128 *a3, int a4)
{
  NSObject *v8;
  _BYTE *v9;
  __n128 result;
  uint64_t v11;
  float64x2_t v12;
  NSObject *v13;
  NSObject *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  const char *v50;
  char *v51;
  const char *v52;
  char *v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _BYTE buf[12];
  __int16 v62;
  const char *v63;
  char v64;
  _BYTE *v65;
  int v66;
  _BYTE *v67;
  __int16 v68;
  int v69;
  _BYTE __p[32];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _BYTE v85[56];
  char v86;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_101863204(a2, __p);
    v9 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    v62 = 1024;
    LODWORD(v63) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "handlePositionData,sessionFixStatus,%s,mode,%d", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v46 = qword_1022A0078;
    sub_101863204(a2, buf);
    if (v64 >= 0)
      v47 = buf;
    else
      v47 = *(_BYTE **)buf;
    v66 = 136315394;
    v67 = v47;
    v68 = 1024;
    v69 = a4;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 2, "handlePositionData,sessionFixStatus,%s,mode,%d", (const char *)&v66, 18);
    v49 = v48;
    if (v64 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v49);
    if (v49 != __p)
      free(v49);
  }
  if (!a2 && *((_BYTE *)a3 + 48))
  {
    v11 = *(_QWORD *)(a1 + 2664);
    if (v11)
      sub_10176C3E0(v11);
    if (!*(_QWORD *)(a1 + 1368))
      goto LABEL_69;
    if (sub_10011CE64(*((double *)a3 + 7), *((double *)a3 + 8)))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
      v13 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136380931;
        *(_QWORD *)&__p[4] = "gps, null";
        *(_WORD *)&__p[12] = 2081;
        *(_QWORD *)&__p[14] = "eureka";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __p, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = "gps, null";
        v62 = 2081;
        v63 = "eureka";
        LODWORD(v56) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", buf, v56);
        v51 = (char *)v50;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v50);
        if (v51 != __p)
          free(v51);
      }
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), &stru_1021C9C48);
    }
    if (*((double *)a3 + 7) == -1.0 && *((double *)a3 + 8) == -1.0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
      v14 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 136380931;
        *(_QWORD *)&__p[4] = "gps, sentinel";
        *(_WORD *)&__p[12] = 2081;
        *(_QWORD *)&__p[14] = "eureka";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __p, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021C9CD0);
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = "gps, sentinel";
        v62 = 2081;
        v63 = "eureka";
        LODWORD(v56) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", buf, v56);
        v53 = (char *)v52;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v52);
        if (v53 != __p)
          free(v53);
      }
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), &stru_1021C9C68);
    }
    if (*(_QWORD *)(a1 + 1368))
    {
      v15 = a3[13];
      v81 = a3[12];
      v82 = v15;
      v83 = a3[14];
      v84 = *((_QWORD *)a3 + 30);
      v16 = a3[9];
      v77 = a3[8];
      v78 = v16;
      v17 = a3[11];
      v79 = a3[10];
      v80 = v17;
      v18 = a3[5];
      v73 = a3[4];
      v74 = v18;
      v19 = a3[7];
      v75 = a3[6];
      v76 = v19;
      v20 = a3[1];
      *(_OWORD *)__p = *a3;
      *(_OWORD *)&__p[16] = v20;
      v21 = a3[3];
      v71 = a3[2];
      v72 = v21;
      sub_100A0F6E4((uint64_t)v85, (uint64_t)a3 + 248);
      *(_OWORD *)&v85[40] = a3[18];
      v86 = 1;
      v22 = *(_QWORD *)(a1 + 1368);
      if (!v22)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 48))(v22, __p);
      if (v86)
        sub_100067A50((uint64_t)v85);
    }
    v23 = *(_QWORD *)(a1 + 3192);
    if (v23)
    {
      v12.f64[0] = *((float64_t *)a3 + 7);
      sub_10177A730(v23, v12, *((float64_t *)a3 + 8), *((double *)a3 + 9));
    }
    if (!*(_BYTE *)(a1 + 2185) || !*(_QWORD *)(a1 + 3192))
      goto LABEL_69;
    if (*(_BYTE *)(a1 + 2297))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#tt,simulator mode pulse,sending", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        *(_WORD *)buf = 0;
        LODWORD(v56) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,simulator mode pulse,sending", buf, v56);
        v55 = (char *)v54;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)", "%s\n", v54);
        if (v55 != __p)
          free(v55);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 240))(a1, 0);
      goto LABEL_69;
    }
    if (*(_BYTE *)(a1 + 2298))
      goto LABEL_69;
    *(_QWORD *)__p = off_1021CCC28;
    *(_QWORD *)&__p[24] = __p;
    v65 = buf;
    v60 = v59;
    *(_QWORD *)buf = off_1021CCCA8;
    v58 = v57;
    v59[0] = off_1021CCC28;
    v57[0] = off_1021CCCA8;
    (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v59, v57);
    v26 = v58;
    if (v58 == v57)
    {
      v27 = 4;
      v26 = v57;
    }
    else
    {
      if (!v58)
        goto LABEL_54;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_54:
    v28 = v60;
    if (v60 == v59)
    {
      v29 = 4;
      v28 = v59;
    }
    else
    {
      if (!v60)
        goto LABEL_59;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_59:
    *(_BYTE *)(a1 + 2298) = 1;
    v30 = v65;
    if (v65 == buf)
    {
      v31 = 4;
      v30 = buf;
    }
    else
    {
      if (!v65)
      {
LABEL_64:
        v32 = *(_QWORD **)&__p[24];
        if (*(_BYTE **)&__p[24] == __p)
        {
          v33 = 4;
          v32 = __p;
          goto LABEL_68;
        }
        if (*(_QWORD *)&__p[24])
        {
          v33 = 5;
LABEL_68:
          (*(void (**)(void))(*v32 + 8 * v33))();
        }
LABEL_69:
        v34 = *a3;
        v35 = a3[1];
        v36 = a3[2];
        *(_OWORD *)(a1 + 2368) = a3[3];
        *(_OWORD *)(a1 + 2352) = v36;
        *(_OWORD *)(a1 + 2336) = v35;
        *(_OWORD *)(a1 + 2320) = v34;
        v37 = a3[4];
        v38 = a3[5];
        v39 = a3[6];
        *(_OWORD *)(a1 + 2432) = a3[7];
        *(_OWORD *)(a1 + 2416) = v39;
        *(_OWORD *)(a1 + 2400) = v38;
        *(_OWORD *)(a1 + 2384) = v37;
        v40 = a3[8];
        v41 = a3[9];
        v42 = a3[10];
        *(_OWORD *)(a1 + 2496) = a3[11];
        *(_OWORD *)(a1 + 2480) = v42;
        *(_OWORD *)(a1 + 2464) = v41;
        *(_OWORD *)(a1 + 2448) = v40;
        v43 = a3[12];
        v44 = a3[13];
        v45 = a3[14];
        *(_QWORD *)(a1 + 2560) = *((_QWORD *)a3 + 30);
        *(_OWORD *)(a1 + 2544) = v45;
        *(_OWORD *)(a1 + 2528) = v44;
        *(_OWORD *)(a1 + 2512) = v43;
        if ((__int128 *)(a1 + 2320) != a3)
        {
          *(_DWORD *)(a1 + 2600) = *((_DWORD *)a3 + 70);
          sub_100858F3C((_QWORD *)(a1 + 2568), *((uint64_t **)a3 + 33), 0);
        }
        result = (__n128)a3[18];
        *(__n128 *)(a1 + 2608) = result;
        return result;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_64;
  }
  v25 = *(_QWORD *)(a1 + 1368);
  if (v25)
  {
    __p[0] = 0;
    v86 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 48))(v25, __p);
    if (v86)
      sub_100067A50((uint64_t)v85);
  }
  return result;
}

void sub_1016FC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v32 = (_QWORD *)a14;
  if (a14 == v30)
  {
    v33 = 4;
    v32 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  v34 = (_QWORD *)a18;
  if ((char *)a18 == &a15)
  {
    v35 = 4;
    v34 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_11:
  v36 = (_QWORD *)a22;
  if ((char *)a22 == &a19)
  {
    v37 = 4;
    v36 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_16:
  v38 = (_QWORD *)a30;
  if ((char *)a30 == &a27)
  {
    v39 = 4;
    v38 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_21;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_21:
  _Unwind_Resume(a1);
}

void sub_1016FC41C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[15];
  uint64_t v21;
  _BYTE v22[56];
  char v23;
  BOOL v24;

  if (!a2 && *(_BYTE *)(a3 + 48) && !*(_BYTE *)(a1 + 2185) && a4 != 2 && !*(_BYTE *)(a1 + 2184))
  {
    v24 = 0;
    sub_1001E4804(v20);
    v6 = sub_1001E4874(*(uint64_t *)&v20[0], "GpsForceMSBFixAsGnss", &v24);
    if (v24)
      v7 = v6;
    else
      v7 = 0;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
    if (*((_QWORD *)&v20[0] + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (*(_DWORD *)(a3 + 136) & 0x101 | (*(_DWORD *)(a3 + 136) >> 1) & 2 | (*(_DWORD *)(a3 + 136) >> 3) & 4 | (*(_DWORD *)(a3 + 136) >> 2) & 0x10 | (*(_DWORD *)(a3 + 136) >> 4) & 8)
      v11 = 1;
    else
      v11 = v7;
    if ((v11 & 1) != 0 && *(_QWORD *)(a1 + 1368))
    {
      v12 = *(_OWORD *)(a3 + 208);
      v20[12] = *(_OWORD *)(a3 + 192);
      v20[13] = v12;
      v20[14] = *(_OWORD *)(a3 + 224);
      v21 = *(_QWORD *)(a3 + 240);
      v13 = *(_OWORD *)(a3 + 144);
      v20[8] = *(_OWORD *)(a3 + 128);
      v20[9] = v13;
      v14 = *(_OWORD *)(a3 + 176);
      v20[10] = *(_OWORD *)(a3 + 160);
      v20[11] = v14;
      v15 = *(_OWORD *)(a3 + 80);
      v20[4] = *(_OWORD *)(a3 + 64);
      v20[5] = v15;
      v16 = *(_OWORD *)(a3 + 112);
      v20[6] = *(_OWORD *)(a3 + 96);
      v20[7] = v16;
      v17 = *(_OWORD *)(a3 + 16);
      v20[0] = *(_OWORD *)a3;
      v20[1] = v17;
      v18 = *(_OWORD *)(a3 + 48);
      v20[2] = *(_OWORD *)(a3 + 32);
      v20[3] = v18;
      sub_100A0F6E4((uint64_t)v22, a3 + 248);
      *(_OWORD *)&v22[40] = *(_OWORD *)(a3 + 288);
      v23 = 1;
      v19 = *(_QWORD *)(a1 + 1368);
      if (!v19)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v19 + 48))(v19, v20);
      if (v23)
        sub_100067A50((uint64_t)v22);
    }
  }
}

void sub_1016FC5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (a47)
    sub_100067A50(v47);
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_1016FC5FC(id a1)
{
  return (NSDictionary *)&off_102220218;
}

NSDictionary *__cdecl sub_1016FC608(id a1)
{
  return (NSDictionary *)&off_102220240;
}

_QWORD *sub_1016FC614(uint64_t a1)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  _QWORD v8[3];
  _QWORD *v9;
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#bb.e,#trkstate,checkConcurrency", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,#trkstate,checkConcurrency", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::checkConcurrency()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v8[0] = off_1021CCE68;
  v8[1] = a1;
  v9 = v8;
  sub_10178EA00(a1 + 1704, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v4 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1016FC7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016FC830(uint64_t a1)
{
  return sub_101757590(*(_QWORD *)(a1 + 2648), 1);
}

uint64_t sub_1016FC83C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;

  v5[0] = off_1021CCDC8;
  v6 = v5;
  sub_10178EA00(a1 + 1704, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return sub_101757590(*(_QWORD *)(a1 + 2648), 0);
}

void sub_1016FC8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1016FC924(uint64_t a1, int *a2, void **a3)
{
  NSObject *v6;
  const __CFString *v7;
  uint8_t *v8;
  uint64_t result;
  const void *v10;
  const void *v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  const void *v18;
  BOOL *v19;
  NSObject *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  int v29;
  NSObject *v30;
  int v31;
  int v32;
  NSObject *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  _DWORD *v40[3];
  int v41;
  int v42;
  uint8_t *v43;
  uint8_t buf[8];
  __int16 v45;
  const char *v46;
  __int16 v47;
  _BYTE v48[10];
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  uint8_t v53[16];
  __int128 v54;
  int v55;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v7 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v7, (uint64_t)v53);
    v8 = (SBYTE7(v54) & 0x80u) == 0 ? v53 : *(uint8_t **)v53;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v45 = 2082;
    v46 = "";
    v47 = 2082;
    *(_QWORD *)v48 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onTelephonyNotification\", \"ontelephonynotification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SBYTE7(v54) < 0)
      operator delete(*(void **)v53);
  }
  if ((sub_1001DF9C4() & 1) != 0 || (result = sub_1001DC9E0(), (_DWORD)result))
  {
    v10 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(v10, CFSTR("kCellInfoNotification")))
    {
      *(_OWORD *)v53 = 0u;
      v54 = 0u;
      v55 = 1065353216;
      if (sub_1001DBC88(*a3, (uint64_t)v53))
      {
        sub_1016FD3A4(a1, 0, (uint64_t)v53);
        if (sub_1001DC538())
          sub_1016FD3A4(a1, 1, (uint64_t)v53);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#timingadvance,kCellInfoNotification,error fetching cell info", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          LOWORD(v40[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#timingadvance,kCellInfoNotification,error fetching cell info", v40, 2);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
      }
      return sub_1001DBC50((uint64_t)v53);
    }
    v11 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(v11, CFSTR("kSubscriptionChangeNotification")))
    {
      result = (uint64_t)*a3;
      if (*a3)
      {
        *(_OWORD *)v53 = 0u;
        v54 = 0u;
        v55 = 1065353216;
        if (sub_1012621F4((void *)result, (uint64_t)v53))
        {
          v42 = 0;
          *(_QWORD *)buf = &v42;
          v12 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v42, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
          *(_QWORD *)buf = &v42;
          v13 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v42, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 22);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v15 = v42;
            v40[0] = &v42;
            v16 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v42, (uint64_t)&unk_101B9EB60, v40) + 21);
            *(_DWORD *)buf = 68290050;
            *(_DWORD *)&buf[4] = 0;
            v45 = 2082;
            v46 = "";
            v47 = 1026;
            *(_DWORD *)v48 = v15;
            *(_WORD *)&v48[4] = 1026;
            *(_DWORD *)&v48[6] = v12;
            v49 = 1026;
            v50 = v16;
            v51 = 1026;
            v52 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim1\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
          }
          if (v12 && v13)
          {
            *(_DWORD *)(a1 + 1680) = 0;
          }
          else if (sub_1001DC538())
          {
            v41 = 1;
            *(_QWORD *)buf = &v41;
            v28 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
            *(_QWORD *)buf = &v41;
            v29 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 22);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
            v30 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v31 = v41;
              v40[0] = &v41;
              v32 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)v53, &v41, (uint64_t)&unk_101B9EB60, v40) + 21);
              *(_DWORD *)buf = 68290050;
              *(_DWORD *)&buf[4] = 0;
              v45 = 2082;
              v46 = "";
              v47 = 1026;
              *(_DWORD *)v48 = v31;
              *(_WORD *)&v48[4] = 1026;
              *(_DWORD *)&v48[6] = v28;
              v49 = 1026;
              v50 = v32;
              v51 = 1026;
              v52 = v29;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ta,kSubscriptionChangeNotification for sim2\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", buf, 0x2Au);
            }
            if (v28 && v29)
              *(_DWORD *)(a1 + 1680) = 1;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          v25 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#timingadvance,kSubscriptionChangeNotification,error fetching context", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
            LOWORD(v40[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#timingadvance,kSubscriptionChangeNotification,error fetching context", v40, 2);
            v27 = (uint8_t *)v26;
            sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
            if (v27 != buf)
              free(v27);
          }
        }
        return sub_100067AC4((uint64_t)v53);
      }
      return result;
    }
    v18 = (const void *)sub_1001DEC98(a2);
    result = CFEqual(v18, CFSTR("kCLCellularTransmitStateNotification"));
    if (!(_DWORD)result || !*a3)
      return result;
    sub_1001C1D6C((int)v40, (CFDictionaryRef)*a3);
    v19 = (BOOL *)(a1 + 1696);
    if ((sub_1001E48E4((uint64_t)v40, (uint64_t)CFSTR("kCLCellularTransmitStateNotification"), v19) & 1) != 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v21 = *v19;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#timingadvance,kTransmitStateNotification, %d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return sub_10011A5A8(v40);
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v22 = *v19;
      *(_DWORD *)v53 = 67109120;
      *(_DWORD *)&v53[4] = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,kTransmitStateNotification, %d", v53);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
      if (v24 == buf)
        return sub_10011A5A8(v40);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)buf);
        v34 = v48[3] >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v53 = 136446210;
        *(_QWORD *)&v53[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning,#timingadvance,key,%{public}s,notExist", v53, 0xCu);
        if ((v48[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        return sub_10011A5A8(v40);
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v37 = qword_1022A0078;
      sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)v53);
      if ((SBYTE7(v54) & 0x80u) == 0)
        v38 = v53;
      else
        v38 = *(uint8_t **)v53;
      v42 = 136446210;
      v43 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#Warning,#timingadvance,key,%{public}s,notExist", &v42, 12);
      v24 = v39;
      if (SBYTE7(v54) < 0)
        operator delete(*(void **)v53);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", (const char *)v24);
      if (v24 == buf)
        return sub_10011A5A8(v40);
    }
    free(v24);
    return sub_10011A5A8(v40);
  }
  return result;
}

void sub_1016FD338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1016FD3A4(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint8_t buf[8];
  int *v13;

  v11 = a2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v13 = &v11;
  if (*((_QWORD *)sub_1001C1FBC(a3, &v11, (uint64_t)&unk_101B9EB60, &v13) + 3))
  {
    sub_1001C1F5C(v11, a3, &v8);
    if ((uint64_t *)(a1 + 4104) != &v8)
      sub_10169AB5C(a1 + 4104, v8, v9, 0x66FD0EB66FD0EB67 * ((v9 - v8) >> 3));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#timingadvance,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LODWORD(v13) = 67109120;
      HIDWORD(v13) = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,kCellInfoNotification,received nil CellInfo from CT for sim %d", &v13);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  *(_QWORD *)buf = &v8;
  sub_10087B4F8((void ***)buf);
}

void sub_1016FD5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_10087B4F8(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1016FD604(uint64_t a1, _DWORD *a2)
{
  _OWORD *v4;
  _BOOL4 v5;
  int v6;
  NSObject *v7;
  std::string *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  std::string *p_buf;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  std::string buf;
  int v28;
  std::string *v29;
  std::string __p[68];

  v4 = (_OWORD *)(a1 + 2268);
  v5 = sub_100CD5700(a1 + 2268);
  v6 = a2[4];
  *v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 2284) = v6;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_100CD5278(a2, __p);
    v8 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "EMERGENCY: state,%s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v15 = qword_1022A0078;
    sub_100CD5278(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v28 = 136315138;
    v29 = p_buf;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 2, "EMERGENCY: state,%s", (const char *)&v28);
    v18 = v17;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v18);
    if (v18 != __p)
      free(v18);
  }
  v9 = sub_100CD5700((uint64_t)a2);
  v10 = *(_QWORD *)(a1 + 2232);
  v25 = *(_OWORD *)a2;
  v26 = a2[4];
  sub_10180F658(v10, (unsigned int *)&v25);
  if (!v5 || v9)
  {
    if (!v5 && v9)
      sub_1016FDC7C(a1);
  }
  else
  {
    sub_1016FD90C((_BYTE *)a1);
  }
  v11 = *(_QWORD *)(a1 + 2232);
  v23 = *(_OWORD *)a2;
  v24 = a2[4];
  sub_10180F684(v11, (uint64_t)&v23);
  v12 = **(_QWORD **)(a1 + 2248);
  v21 = *(_OWORD *)a2;
  v22 = a2[4];
  sub_1017EC508(v12, &v21);
  result = sub_1001DC538();
  if ((_DWORD)result)
  {
    v14 = *(_QWORD *)sub_1016E37F8((_QWORD *)(a1 + 2248), 1);
    v19 = *(_OWORD *)a2;
    v20 = a2[4];
    return sub_1017EC508(v14, &v19);
  }
  return result;
}

void sub_1016FD90C(_BYTE *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  _BOOL4 v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;

  *((_QWORD *)a1 + 511) = 0xBFF0000000000000;
  if (a1[2289])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Restart GPS at end of emergency mode\"}", buf, 0x12u);
    }
    sub_1016E3C8C((uint64_t)a1);
    if (a1[2016])
    {
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, a1 + 3556);
    }
  }
  else if (a1[2288])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Restart QMI connection to enable reinitialization\"}", buf, 0x12u);
    }
    sub_1016E3C8C((uint64_t)a1);
    sub_10178E694((uint64_t)(a1 + 1704));
  }
  else
  {
    sub_1016E419C((uint64_t)a1);
  }
  if (a1[2296])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[2295];
      v6 = sub_1001133B0((uint64_t)(a1 + 2268));
      *(_DWORD *)buf = 67109376;
      v15 = v5;
      v16 = 1024;
      LODWORD(v17) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EarlyReturnConfig,fIsEarlyReturnEnabled,%d,inEmergency,%d,config@exitEmergency", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = qword_1022A0078;
      v8 = a1[2295];
      v11[0] = 67109376;
      v11[1] = v8;
      v12 = 1024;
      v13 = sub_1001133B0((uint64_t)(a1 + 2268));
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "EarlyReturnConfig,fIsEarlyReturnEnabled,%d,inEmergency,%d,config@exitEmergency", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::onEmergencyExit()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_1016E7E24((uint64_t)a1, 1);
    a1[2296] = 0;
  }
  if (!a1[2292])
    sub_1016E9E18((uint64_t)a1);
}

void sub_1016FDC7C(uint64_t a1)
{
  *(_OWORD *)(a1 + 3728) = xmmword_101C174D8;
  *(_OWORD *)(a1 + 3744) = xmmword_101C174E8;
  *(_OWORD *)(a1 + 3760) = xmmword_101C174F8;
  *(_OWORD *)(a1 + 3772) = *(__int128 *)((char *)&xmmword_101C174F8 + 12);
  *(_OWORD *)(a1 + 3664) = xmmword_101C17498;
  *(_OWORD *)(a1 + 3680) = xmmword_101C174A8;
  *(_OWORD *)(a1 + 3696) = xmmword_101C174B8;
  *(_OWORD *)(a1 + 3712) = xmmword_101C174C8;
  *(_OWORD *)(a1 + 3632) = xmmword_101C17478;
  *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3648) = xmmword_101C17488;
  if (!*(_BYTE *)(a1 + 2292))
    sub_1016E9C74(a1);
  sub_1016E419C(a1);
  sub_1016EA4F8(a1);
}

void sub_1016FDD08(uint64_t *a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  void **v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void **v22;
  __int16 v23;
  int v24;
  void *v25[2];
  char v26;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    sub_100F790BC(a3, v25);
    v7 = v26 >= 0 ? v25 : (void **)v25[0];
    v8 = *(_DWORD *)a2;
    *(_DWORD *)buf = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = v7;
    v23 = 1026;
    v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"emergency settings changed\", \"reason\":%{public, location:escape_only}s, \"instance\":%{public}d}", buf, 0x22u);
    if (v26 < 0)
      operator delete(v25[0]);
  }
  v9 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    goto LABEL_13;
  if (v9 == 1 && sub_1001DC538())
  {
    v9 = *(_DWORD *)a2;
LABEL_13:
    v10 = sub_1016911FC(a1 + 441, v9);
    sub_10084B628(v10, a2);
    sub_101812510(a1[279], a2);
    v11 = (uint64_t *)sub_1016E37F8(a1 + 281, *(_DWORD *)a2);
    sub_1017EC110(*v11, a2, a3);
    sub_1016E7E24((uint64_t)a1, 0);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67109120;
    v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "InvalidArgs for handleEmergencySettingsChange,instance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v14 = *(_DWORD *)a2;
    LODWORD(v25[0]) = 67109120;
    HIDWORD(v25[0]) = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "InvalidArgs for handleEmergencySettingsChange,instance,%d", v25);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLEurekaController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

uint64_t sub_1016FDFF8(uint64_t a1, int a2)
{
  uint64_t result;

  result = sub_100014ADC();
  if ((result & 1) == 0)
  {
    *(_BYTE *)(a1 + 2292) = a2;
    if (a2)
    {
      if (*(_BYTE *)(a1 + 2293))
        sub_1016E9E18(a1);
    }
    else if (!*(_BYTE *)(a1 + 2293) && sub_100CD5700(a1 + 2268))
    {
      sub_1016E9C74(a1);
    }
    return sub_1016E8370(a1);
  }
  return result;
}

double sub_1016FE064(uint64_t a1)
{
  NSObject *v2;
  double result;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Resetting control plane status", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Resetting control plane status", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLEurekaController::resetControlPlaneStatus()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3568) = _Q0;
  *(_QWORD *)(a1 + 3584) = 0;
  *(_QWORD *)(a1 + 3600) = 0;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_QWORD *)(a1 + 3608) = 0xBFF0000000000000;
  result = NAN;
  *(_QWORD *)(a1 + 3616) = -1;
  *(_DWORD *)(a1 + 3624) = 0;
  return result;
}

uint64_t sub_1016FE21C(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 3568);
    v6 = *(_QWORD *)(a1 + 3576);
    v7 = *(_QWORD *)(a1 + 3584);
    v8 = *(_QWORD *)(a1 + 3592);
    v9 = *(_QWORD *)(a1 + 3600);
    v10 = *(_QWORD *)(a1 + 3608);
    v11 = *(_DWORD *)(a1 + 3624);
    *(_DWORD *)buf = 134350593;
    v40 = v5;
    v41 = 2050;
    v42 = v6;
    v43 = 2049;
    v44 = v7;
    v45 = 2049;
    v46 = v8;
    v47 = 2050;
    v48 = v9;
    v49 = 2050;
    v50 = v10;
    v51 = 1026;
    v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getControlPlaneStatusReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v16 = *(_QWORD *)(a1 + 3568);
    v17 = *(_QWORD *)(a1 + 3576);
    v18 = *(_QWORD *)(a1 + 3584);
    v19 = *(_QWORD *)(a1 + 3592);
    v20 = *(_QWORD *)(a1 + 3600);
    v21 = *(_QWORD *)(a1 + 3608);
    v22 = *(_DWORD *)(a1 + 3624);
    v25 = 134350593;
    v26 = v16;
    v27 = 2050;
    v28 = v17;
    v29 = 2049;
    v30 = v18;
    v31 = 2049;
    v32 = v19;
    v33 = 2050;
    v34 = v20;
    v35 = 2050;
    v36 = v21;
    v37 = 1026;
    v38 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "getControlPlaneStatusReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", &v25, 68);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLEurekaController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v12 = *(_OWORD *)(a1 + 3568);
  v13 = *(_OWORD *)(a1 + 3584);
  v14 = *(_OWORD *)(a1 + 3600);
  *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)(a1 + 3612);
  a2[1] = v13;
  a2[2] = v14;
  *a2 = v12;
  return 1;
}

__n128 sub_1016FE49C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    v8 = *(_QWORD *)(a1 + 3592);
    v9 = a2[4];
    v10 = a2[5];
    v11 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134350593;
    v39 = v5;
    v40 = 2050;
    v41 = v6;
    v42 = 2049;
    v43 = v7;
    v44 = 2049;
    v45 = v8;
    v46 = 2050;
    v47 = v9;
    v48 = 2050;
    v49 = v10;
    v50 = 1026;
    v51 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processCplaneReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v15 = *a2;
    v16 = a2[1];
    v17 = a2[2];
    v18 = *(_QWORD *)(a1 + 3592);
    v19 = a2[4];
    v20 = a2[5];
    v21 = *((_DWORD *)a2 + 14);
    v24 = 134350593;
    v25 = v15;
    v26 = 2050;
    v27 = v16;
    v28 = 2049;
    v29 = v17;
    v30 = 2049;
    v31 = v18;
    v32 = 2050;
    v33 = v19;
    v34 = 2050;
    v35 = v20;
    v36 = 1026;
    v37 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "processCplaneReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", &v24, 68);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::processCplaneReport(const CLGnssControlPlaneStatusReport &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  result = *(__n128 *)a2;
  v13 = *((_OWORD *)a2 + 1);
  v14 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3612) = *(_OWORD *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 3600) = v14;
  *(_OWORD *)(a1 + 3584) = v13;
  *(__n128 *)(a1 + 3568) = result;
  return result;
}

__n128 sub_1016FE708(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[3];
    v9 = a2[4];
    v10 = a2[5];
    v11 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134350593;
    v39 = v5;
    v40 = 2050;
    v41 = v6;
    v42 = 2049;
    v43 = v7;
    v44 = 2049;
    v45 = v8;
    v46 = 2050;
    v47 = v9;
    v48 = 2050;
    v49 = v10;
    v50 = 1026;
    v51 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "processSuplReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v15 = *a2;
    v16 = a2[1];
    v17 = a2[2];
    v18 = a2[3];
    v19 = a2[4];
    v20 = a2[5];
    v21 = *((_DWORD *)a2 + 14);
    v24 = 134350593;
    v25 = v15;
    v26 = 2050;
    v27 = v16;
    v28 = 2049;
    v29 = v17;
    v30 = 2049;
    v31 = v18;
    v32 = 2050;
    v33 = v19;
    v34 = 2050;
    v35 = v20;
    v36 = 1026;
    v37 = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "processSuplReport,startTime,%{public}0.2f,endTime,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{public}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", &v24, 68);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::processSuplReport(const CLGnssControlPlaneStatusReport &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  result = *(__n128 *)a2;
  v13 = *((_OWORD *)a2 + 1);
  v14 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 3612) = *(_OWORD *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 3600) = v14;
  *(_OWORD *)(a1 + 3584) = v13;
  *(__n128 *)(a1 + 3568) = result;
  return result;
}

void sub_1016FE96C(uint64_t a1, char *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int8 *)(a1 + 2016);
    v6 = *(unsigned __int8 *)(a1 + 2264);
    v7 = *(_DWORD *)(a1 + 2260);
    v8 = *(_DWORD *)(a1 + 2256);
    v14 = 68290306;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = a2;
    v20 = 1026;
    v21 = v5;
    v22 = 1026;
    v23 = v6;
    v24 = 1026;
    v25 = v7;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  v9 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    v10 = *(unsigned __int8 *)(a1 + 2016);
    v11 = *(unsigned __int8 *)(a1 + 2264);
    v12 = *(_DWORD *)(a1 + 2260);
    v13 = *(_DWORD *)(a1 + 2256);
    v14 = 68290306;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = a2;
    v20 = 1026;
    v21 = v10;
    v22 = 1026;
    v23 = v11;
    v24 = 1026;
    v25 = v12;
    v26 = 1026;
    v27 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,#trkstate,error", "{\"msg%{public}.0s\":\"#bb.e,#trkstate,error\", \"error\":%{public, location:escape_only}s, \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d}", (uint8_t *)&v14, 0x34u);
  }
  sub_1016FEE2C(a1, a2, 2);
}

void sub_1016FEB6C(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a1 + 2016);
    v8 = *(unsigned __int8 *)(a1 + 2264);
    v9 = *(_DWORD *)(a1 + 2260);
    v10 = *(_DWORD *)(a1 + 2256);
    v17 = 68290562;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 1026;
    v22 = v7;
    v23 = 1026;
    v24 = v8;
    v25 = 1026;
    v26 = v9;
    v27 = 1026;
    v28 = v10;
    v29 = 1026;
    v30 = a2;
    v31 = 1026;
    v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,acceptibility check\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d, \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)&v17, 0x36u);
  }
  if (*(_BYTE *)(a1 + 2016))
  {
    if (a3 == 2 && (a2 & 1) != 0)
    {
      *(_DWORD *)(a1 + 2256) = 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 2256);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int8 *)(a1 + 2016);
        v14 = *(unsigned __int8 *)(a1 + 2264);
        v15 = *(_DWORD *)(a1 + 2260);
        v16 = *(_DWORD *)(a1 + 2256);
        v17 = 68290562;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 1026;
        v22 = v13;
        v23 = 1026;
        v24 = v14;
        v25 = 1026;
        v26 = v15;
        v27 = 1026;
        v28 = v16;
        v29 = 1026;
        v30 = a2;
        v31 = 1026;
        v32 = a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,mismatch\", \"fIsStarted\":%{public}hhd, \"fConnected\":%{public}hhd, \"fErrorCountResponsePending\":%{public}d, \"fErrorCountTrackingStateMismatch\":%{public}d, \"isEnabled\":%{public}hhd, \"trackingState\":%{public}d}", (uint8_t *)&v17, 0x36u);
      }
      if (*(int *)(a1 + 2256) >= 8)
        sub_1016FE96C(a1, "locationd,trackStateMismatch");
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 68289026;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,acceptibility check skipped\"}", (uint8_t *)&v17, 0x12u);
    }
  }
}

void sub_1016FEE2C(uint64_t a1, char *a2, int a3)
{
  NSObject *v3;
  NSObject *v7;
  void **v8;
  NSObject *v9;
  NSObject *v10;
  _BYTE v11[24];

  if (*(_BYTE *)(a1 + 2290))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v11 = 68289026;
      *(_WORD *)&v11[8] = 2082;
      *(_QWORD *)&v11[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,ErrorHandlingInProgress\"}", v11, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 2290) = 1;
    if (sub_100CD5700(a1 + 2268))
    {
      if (a3 == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v11 = 68289026;
          *(_WORD *)&v11[8] = 2082;
          *(_QWORD *)&v11[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InEmergency,restart@OnEmergencyExit\"}", v11, 0x12u);
        }
        *(_BYTE *)(a1 + 2289) = 1;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v11 = 68289026;
          *(_WORD *)&v11[8] = 2082;
          *(_QWORD *)&v11[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InEmergency,reinit@OnEmergencyExit\"}", v11, 0x12u);
        }
        *(_BYTE *)(a1 + 2288) = 1;
      }
    }
    else
    {
      sub_1015A2E04(v11, a2);
      v8 = (void **)(a1 + 2928);
      if (*(char *)(a1 + 2951) < 0)
        operator delete(*v8);
      *(_OWORD *)v8 = *(_OWORD *)v11;
      *(_QWORD *)(a1 + 2944) = *(_QWORD *)&v11[16];
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v11 = 68289282;
        *(_WORD *)&v11[8] = 2082;
        *(_QWORD *)&v11[10] = "";
        *(_WORD *)&v11[18] = 1026;
        *(_DWORD *)&v11[20] = 18;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,NotInEmergency,deferring Reset\", \"delay\":%{public}d}", v11, 0x18u);
      }
      objc_msgSend(*(id *)(a1 + 2920), "setNextFireDelay:", 18.0);
    }
  }
}

void sub_1016FF134(uint64_t a1, char *a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  char *v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,InitError\", \"error\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  sub_1016FEE2C(a1, a2, 0);
}

void sub_1016FF230(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#supl,setSuplSessionStatus,instance,%d,inSession,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9[0] = 67109376;
    v9[1] = a2;
    v10 = 1024;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#supl,setSuplSessionStatus,instance,%d,inSession,%d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::setSuplSessionStatus(CLTelephonyService_Type::SimInstance, BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (a3)
    *(_DWORD *)(a1 + 3552) = a2;
}

uint64_t sub_1016FF408(char a1)
{
  unsigned int v1;

  if (a1)
    v1 = 0;
  else
    v1 = 3;
  if (a1 == 1)
    v1 = 2;
  if (a1 == 2)
    return 1;
  else
    return v1;
}

std::string *sub_1016FF42C(std::string *a1, uint64_t a2)
{
  int v4;

  sub_1001DC538();
  a1[42].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a2 + 7);
  a1[42].__r_.__value_.__s.__data_[9] = *(_BYTE *)(a2 + 56);
  a1[44].__r_.__value_.__s.__data_[12] = (*(_DWORD *)(a2 + 40) | *(_DWORD *)(a2 + 88)) != 0;
  v4 = *(_DWORD *)(a2 + 48);
  a1[44].__r_.__value_.__s.__data_[13] = (*(_DWORD *)(a2 + 52) | *(_DWORD *)(a2 + 100)) != 0;
  a1[44].__r_.__value_.__s.__data_[14] = (v4 | *(_DWORD *)(a2 + 96)) != 0;
  std::string::operator=(a1 + 40, (const std::string *)(a2 + 1232));
  return std::string::operator=(a1 + 41, (const std::string *)(a2 + 1256));
}

void sub_1016FF4B8(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  const std::string::value_type *v12;
  std::string::size_type v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  char *v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  NSObject *v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  NSObject *v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  NSObject *v85;
  NSObject *v86;
  const char *v87;
  char *v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  uint64_t v91;
  NSObject *v92;
  _BYTE *v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  std::string::size_type size;
  NSObject *v99;
  std::string *v100;
  NSObject *v101;
  _BYTE *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  const char *v110;
  char *v111;
  const char *v112;
  char *v113;
  const char *v114;
  char *v115;
  std::string *v116;
  const char *v117;
  char *v118;
  uint64_t v119;
  _BYTE *v120;
  char *v121;
  char *v122;
  __int128 v123[15];
  uint64_t v124;
  __int128 v125[15];
  uint64_t v126;
  _BYTE v127[2];
  _BYTE v128[4];
  int v129;
  _BYTE v130[4];
  int v131;
  _BYTE v132[2];
  _BYTE v133[4];
  int v134;
  _BYTE v135[4];
  int v136;
  _BYTE v137[2];
  __int16 v138;
  char v139;
  __int16 v140;
  _BYTE v141[2];
  _BYTE v142[4];
  int v143;
  _BYTE v144[2];
  _BYTE v145[2];
  _BYTE v146[4];
  int v147;
  _BYTE v148[4];
  int v149;
  _BYTE v150[4];
  int v151;
  _BYTE v152[4];
  int v153;
  _BYTE v154[2];
  _BYTE v155[2];
  _BYTE v156[2];
  _BYTE v157[4];
  float v158;
  _BYTE v159[4];
  int v160;
  _BYTE v161[2];
  _BYTE v162[4];
  float v163;
  _BYTE v164[4];
  float v165;
  _BYTE v166[4];
  float v167;
  _BYTE v168[4];
  float v169;
  _BYTE v170[4];
  float v171;
  std::string v172;
  __int128 v173;
  int64x2_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[32];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  _BYTE v189[12];
  _BYTE v190[12];
  char v191;
  _BYTE v192[8];
  uint64_t v193;
  _BYTE v194[8];
  uint64_t v195;
  _BYTE v196[8];
  uint64_t v197;
  char v198[4];
  uint64_t v199;
  int v200;
  char v201[4];
  uint64_t v202;
  int v203;
  _BYTE v204[8];
  uint64_t v205;
  _BYTE v206[8];
  uint64_t v207;
  _BYTE v208[8];
  uint64_t v209;
  _BYTE v210[8];
  uint64_t v211;
  _BYTE v212[8];
  uint64_t v213;
  _BYTE buf[18];
  __int16 v215;
  _BYTE *v216;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,enter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v173) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "handlePdsSessionStatisticsReport,enter", &v173, 2);
    v109 = (char *)v108;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v108);
    if (v109 != buf)
      free(v109);
  }
  *(_QWORD *)&v173 = 0xBFF0000000000000;
  DWORD2(v173) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v174 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v175 = _Q1;
  v176 = _Q1;
  v177 = _Q1;
  LOBYTE(v178) = 0;
  DWORD1(v178) = 0;
  *((_QWORD *)&v178 + 1) = 0xBFF0000000000000;
  LOWORD(v179) = 0;
  *((_QWORD *)&v179 + 1) = -1;
  __asm { FMOV            V1.4S, #-1.0 }
  v180 = (__int128)v174;
  v181 = _Q1;
  *(_WORD *)v182 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)&v182[24] = _D0;
  LODWORD(v183) = -1082130432;
  WORD2(v183) = 0;
  *((_QWORD *)&v183 + 1) = 0xBF80000000000000;
  LOBYTE(v185) = 0;
  DWORD2(v185) = 0;
  *((_QWORD *)&v186 + 1) = 0;
  LOBYTE(v187) = 0;
  memset(&v172, 0, sizeof(v172));
  v212[0] = 0;
  sub_101711680(a2, 0x10u, (uint64_t)v212);
  if (v212[0])
  {
    v174.i64[0] = v213;
  }
  else
  {
    sub_1015A2E04(buf, "refLat,");
    if (SBYTE3(v216) >= 0)
      v12 = buf;
    else
      v12 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v13 = BYTE3(v216);
    else
      v13 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v12, v13);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v210[0] = 0;
  sub_101711680(a2, 0x11u, (uint64_t)v210);
  if (v210[0])
  {
    v174.i64[1] = v211;
  }
  else
  {
    sub_1015A2E04(buf, "refLong,");
    if (SBYTE3(v216) >= 0)
      v14 = buf;
    else
      v14 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v15 = BYTE3(v216);
    else
      v15 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v14, v15);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v170[0] = 0;
  sub_10170B710(a2, 0x12u, (uint64_t)v170);
  if (v170[0])
  {
    *(double *)&v175 = v171;
  }
  else
  {
    sub_1015A2E04(buf, "refAlt,");
    if (SBYTE3(v216) >= 0)
      v16 = buf;
    else
      v16 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v17 = BYTE3(v216);
    else
      v17 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v16, v17);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v168[0] = 0;
  sub_10170B710(a2, 0x13u, (uint64_t)v168);
  if (v168[0])
  {
    *((double *)&v175 + 1) = v169;
  }
  else
  {
    sub_1015A2E04(buf, "refAltUnc,");
    if (SBYTE3(v216) >= 0)
      v18 = buf;
    else
      v18 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v19 = BYTE3(v216);
    else
      v19 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v18, v19);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v166[0] = 0;
  sub_10170B710(a2, 0x14u, (uint64_t)v166);
  if (v166[0])
  {
    *(double *)&v176 = v167;
  }
  else
  {
    sub_1015A2E04(buf, "refUncSemiMaj,");
    if (SBYTE3(v216) >= 0)
      v20 = buf;
    else
      v20 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v21 = BYTE3(v216);
    else
      v21 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v20, v21);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v164[0] = 0;
  sub_10170B710(a2, 0x15u, (uint64_t)v164);
  if (v164[0])
  {
    *((double *)&v176 + 1) = v165;
  }
  else
  {
    sub_1015A2E04(buf, "refUncSemMin,");
    if (SBYTE3(v216) >= 0)
      v22 = buf;
    else
      v22 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v23 = BYTE3(v216);
    else
      v23 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v22, v23);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v162[0] = 0;
  sub_10170B710(a2, 0x16u, (uint64_t)v162);
  if (v162[0])
  {
    *((double *)&v177 + 1) = v163;
  }
  else
  {
    sub_1015A2E04(buf, "refUncAngle,");
    if (SBYTE3(v216) >= 0)
      v24 = buf;
    else
      v24 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v25 = BYTE3(v216);
    else
      v25 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v24, v25);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v161[0] = 0;
  sub_10169DDA0(a2, 0x17u, v161);
  if (v161[0])
  {
    LOBYTE(v178) = v161[1];
  }
  else
  {
    sub_1015A2E04(buf, "refConf,");
    if (SBYTE3(v216) >= 0)
      v26 = buf;
    else
      v26 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v27 = BYTE3(v216);
    else
      v27 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v26, v27);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v159[0] = 0;
  sub_100014D50(a2, 0x18u, (uint64_t)v159);
  if (v159[0])
  {
    DWORD1(v178) = v160;
  }
  else
  {
    sub_1015A2E04(buf, "nwTimeOut,");
    if (SBYTE3(v216) >= 0)
      v28 = buf;
    else
      v28 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v29 = BYTE3(v216);
    else
      v29 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v28, v29);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v157[0] = 0;
  sub_10170B710(a2, 0x19u, (uint64_t)v157);
  if (v157[0])
  {
    *((double *)&v178 + 1) = v158;
  }
  else
  {
    sub_1015A2E04(buf, "nwHorzAcc,");
    if (SBYTE3(v216) >= 0)
      v30 = buf;
    else
      v30 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v31 = BYTE3(v216);
    else
      v31 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v30, v31);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v156[0] = 0;
  v32 = sub_10169DDA0(a2, 0x1Au, v156);
  if (v156[0])
  {
    DWORD2(v173) = sub_1017015C8((uint64_t)v32, v156[1]);
  }
  else
  {
    sub_1015A2E04(buf, "endReason,");
    if (SBYTE3(v216) >= 0)
      v33 = buf;
    else
      v33 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v34 = BYTE3(v216);
    else
      v34 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v33, v34);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v155[0] = 0;
  sub_10169DDA0(a2, 0x1Bu, v155);
  if (v155[0])
  {
    LOBYTE(v179) = v155[1];
  }
  else
  {
    sub_1015A2E04(buf, "cpiAccepted,");
    if (SBYTE3(v216) >= 0)
      v35 = buf;
    else
      v35 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v36 = BYTE3(v216);
    else
      v36 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v35, v36);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v154[0] = 0;
  sub_10169DDA0(a2, 0x1Cu, v154);
  if (v154[0])
  {
    BYTE1(v179) = v154[1];
  }
  else
  {
    sub_1015A2E04(buf, "cpiFusedWithGNSS,");
    if (SBYTE3(v216) >= 0)
      v37 = buf;
    else
      v37 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v38 = BYTE3(v216);
    else
      v38 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v37, v38);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v208[0] = 0;
  sub_10169DD40(a2, 0x1Du, (uint64_t)v208);
  if (v208[0])
  {
    *((_QWORD *)&v179 + 1) = v209;
  }
  else
  {
    sub_1015A2E04(buf, "cpiTimestamp,");
    if (SBYTE3(v216) >= 0)
      v39 = buf;
    else
      v39 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v40 = BYTE3(v216);
    else
      v40 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v39, v40);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v206[0] = 0;
  sub_101711680(a2, 0x1Eu, (uint64_t)v206);
  if (v206[0])
  {
    *(_QWORD *)&v180 = v207;
  }
  else
  {
    sub_1015A2E04(buf, "cpiLatitude,");
    if (SBYTE3(v216) >= 0)
      v41 = buf;
    else
      v41 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v42 = BYTE3(v216);
    else
      v42 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v41, v42);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v204[0] = 0;
  sub_101711680(a2, 0x1Fu, (uint64_t)v204);
  if (v204[0])
  {
    *((_QWORD *)&v180 + 1) = v205;
  }
  else
  {
    sub_1015A2E04(buf, "cpiLongitude,");
    if (SBYTE3(v216) >= 0)
      v43 = buf;
    else
      v43 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v44 = BYTE3(v216);
    else
      v44 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v43, v44);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v152[0] = 0;
  sub_10170B710(a2, 0x20u, (uint64_t)v152);
  if (v152[0])
  {
    LODWORD(v181) = v153;
  }
  else
  {
    sub_1015A2E04(buf, "cpiEllipsoidAltitude,");
    if (SBYTE3(v216) >= 0)
      v45 = buf;
    else
      v45 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v46 = BYTE3(v216);
    else
      v46 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v45, v46);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v150[0] = 0;
  sub_10170B710(a2, 0x21u, (uint64_t)v150);
  if (v150[0])
  {
    DWORD1(v181) = v151;
  }
  else
  {
    sub_1015A2E04(buf, "cpiMSLAltitude,");
    if (SBYTE3(v216) >= 0)
      v47 = buf;
    else
      v47 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v48 = BYTE3(v216);
    else
      v48 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v47, v48);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v148[0] = 0;
  sub_10170B710(a2, 0x22u, (uint64_t)v148);
  if (v148[0])
  {
    DWORD2(v181) = v149;
  }
  else
  {
    sub_1015A2E04(buf, "cpiHorizontalUncertaintyCircular,");
    if (SBYTE3(v216) >= 0)
      v49 = buf;
    else
      v49 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v50 = BYTE3(v216);
    else
      v50 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v49, v50);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v146[0] = 0;
  sub_10170B710(a2, 0x23u, (uint64_t)v146);
  if (v146[0])
  {
    HIDWORD(v181) = v147;
  }
  else
  {
    sub_1015A2E04(buf, "cpiVerticalUncertaintyCircular,");
    if (SBYTE3(v216) >= 0)
      v51 = buf;
    else
      v51 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v52 = BYTE3(v216);
    else
      v52 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v51, v52);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v145[0] = 0;
  sub_10169DDA0(a2, 0x24u, v145);
  if (v145[0])
  {
    v182[0] = v145[1];
  }
  else
  {
    sub_1015A2E04(buf, "cpiHorizontalConfidence,");
    if (SBYTE3(v216) >= 0)
      v53 = buf;
    else
      v53 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v54 = BYTE3(v216);
    else
      v54 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v53, v54);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v144[0] = 0;
  sub_10169DDA0(a2, 0x25u, v144);
  if (v144[0])
  {
    v182[1] = v144[1];
  }
  else
  {
    sub_1015A2E04(buf, "cpiVerticalConfidence,");
    if (SBYTE3(v216) >= 0)
      v55 = buf;
    else
      v55 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v56 = BYTE3(v216);
    else
      v56 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v55, v56);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v142[0] = 0;
  sub_1017116D8(a2, 0x26u, (uint64_t)v142);
  if (v142[0])
  {
    *(_DWORD *)&v182[4] = v143;
  }
  else
  {
    sub_1015A2E04(buf, "cpiPosSource,");
    if (SBYTE3(v216) >= 0)
      v57 = buf;
    else
      v57 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v58 = BYTE3(v216);
    else
      v58 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v57, v58);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v141[0] = 0;
  sub_10169DDA0(a2, 0x27u, v141);
  if (v141[0])
  {
    v182[8] = v141[1];
  }
  else
  {
    sub_1015A2E04(buf, "cpiTimeType,");
    if (SBYTE3(v216) >= 0)
      v59 = buf;
    else
      v59 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v60 = BYTE3(v216);
    else
      v60 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v59, v60);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v139 = 0;
  sub_101710E84(a2, 0x28u, (uint64_t)&v139);
  if (v139)
  {
    *(_WORD *)&v182[9] = v140;
  }
  else
  {
    sub_1015A2E04(buf, "cpiReliability,");
    if (SBYTE3(v216) >= 0)
      v61 = buf;
    else
      v61 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v62 = BYTE3(v216);
    else
      v62 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v61, v62);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v201[0] = 0;
  sub_101711738(a2, 0x29u, v201);
  if (v201[0])
  {
    *(_QWORD *)&v182[12] = v202;
    *(_DWORD *)&v182[20] = v203;
  }
  else
  {
    sub_1015A2E04(buf, "cpiAltitudeInfo,");
    if (SBYTE3(v216) >= 0)
      v63 = buf;
    else
      v63 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v64 = BYTE3(v216);
    else
      v64 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v63, v64);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v198[0] = 0;
  sub_1017117D0(a2, 0x2Au, v198);
  if (v198[0])
  {
    *(_QWORD *)&v182[24] = v199;
    LODWORD(v183) = v200;
  }
  else
  {
    sub_1015A2E04(buf, "cpiHorizontalUncEllipsoid,");
    if (SBYTE3(v216) >= 0)
      v65 = buf;
    else
      v65 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v66 = BYTE3(v216);
    else
      v66 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v65, v66);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v137[0] = 0;
  sub_101711850(a2, 0x2Bu, (uint64_t)v137);
  if (v137[0])
  {
    WORD2(v183) = v138;
  }
  else
  {
    sub_1015A2E04(buf, "nwGpsWeek,");
    if (SBYTE3(v216) >= 0)
      v67 = buf;
    else
      v67 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v68 = BYTE3(v216);
    else
      v68 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v67, v68);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v135[0] = 0;
  sub_100014D50(a2, 0x2Cu, (uint64_t)v135);
  if (v135[0])
  {
    DWORD2(v183) = v136;
  }
  else
  {
    sub_1015A2E04(buf, "nwGpsMsec,");
    if (SBYTE3(v216) >= 0)
      v69 = buf;
    else
      v69 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v70 = BYTE3(v216);
    else
      v70 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v69, v70);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v133[0] = 0;
  sub_10170B710(a2, 0x2Du, (uint64_t)v133);
  if (v133[0])
  {
    HIDWORD(v183) = v134;
  }
  else
  {
    sub_1015A2E04(buf, "nwRefTimeUncertainty,");
    if (SBYTE3(v216) >= 0)
      v71 = buf;
    else
      v71 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v72 = BYTE3(v216);
    else
      v72 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v71, v72);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v196[0] = 0;
  sub_10169DD40(a2, 0x2Eu, (uint64_t)v196);
  if (v196[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v73 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!v196[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v197;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#ca,nwAssistanceReceived,0x%x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      if (!v196[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)v190 = 67109120;
      *(_DWORD *)&v190[4] = v197;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ca,nwAssistanceReceived,0x%x", v190);
      v111 = (char *)v110;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v110);
      if (v111 != buf)
        free(v111);
    }
    if (!v196[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    *(_QWORD *)&v184 = v197;
  }
  else
  {
    sub_1015A2E04(buf, "nwAssistanceReceived,");
    if (SBYTE3(v216) >= 0)
      v74 = buf;
    else
      v74 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v75 = BYTE3(v216);
    else
      v75 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v74, v75);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v194[0] = 0;
  sub_10169DD40(a2, 0x2Fu, (uint64_t)v194);
  if (v194[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v76 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!v194[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v195;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "#ca,nwAssistanceDropped,0x%x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      if (!v194[0])
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      *(_DWORD *)v190 = 67109120;
      *(_DWORD *)&v190[4] = v195;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ca,nwAssistanceDropped,0x%x", v190);
      v113 = (char *)v112;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v112);
      if (v113 != buf)
        free(v113);
    }
    if (!v194[0])
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    *((_QWORD *)&v184 + 1) = v195;
  }
  else
  {
    sub_1015A2E04(buf, "nwAssistanceDropped,");
    if (SBYTE3(v216) >= 0)
      v77 = buf;
    else
      v77 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v78 = BYTE3(v216);
    else
      v78 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v77, v78);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v132[0] = 0;
  sub_10169DDA0(a2, 0x30u, v132);
  if (v132[0])
  {
    LOBYTE(v185) = v132[1];
  }
  else
  {
    sub_1015A2E04(buf, "networkSpecifiedHorConfidence,");
    if (SBYTE3(v216) >= 0)
      v79 = buf;
    else
      v79 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v80 = BYTE3(v216);
    else
      v80 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v79, v80);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v130[0] = 0;
  sub_100014D50(a2, 0x31u, (uint64_t)v130);
  if (v130[0])
  {
    DWORD1(v185) = v131;
  }
  else
  {
    sub_1015A2E04(buf, "subId,");
    if (SBYTE3(v216) >= 0)
      v81 = buf;
    else
      v81 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v82 = BYTE3(v216);
    else
      v82 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v81, v82);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v128[0] = 0;
  sub_100014D50(a2, 0x32u, (uint64_t)v128);
  if (v128[0])
  {
    DWORD2(v185) = v129;
  }
  else
  {
    sub_1015A2E04(buf, "numSvsEphemerisAssistance,");
    if (SBYTE3(v216) >= 0)
      v83 = buf;
    else
      v83 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v84 = BYTE3(v216);
    else
      v84 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v83, v84);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v192[0] = 0;
  sub_10169DD40(a2, 0x33u, (uint64_t)v192);
  if (v192[0])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v85 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      if (!v192[0])
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v193;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "#ca,nilrRequestTypeMask,0x%x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      if (!v192[0])
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      *(_DWORD *)v190 = 67109120;
      *(_DWORD *)&v190[4] = v193;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ca,nilrRequestTypeMask,0x%x", v190);
      v115 = (char *)v114;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v114);
      if (v115 != buf)
        free(v115);
    }
    if (!v192[0])
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    if ((v193 & 1) != 0)
    {
      v91 = 1;
    }
    else if ((v193 & 2) != 0)
    {
      v91 = 2;
    }
    else if ((v193 & 4) != 0)
    {
      v91 = 4;
    }
    else
    {
      if ((v193 & 8) == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v86 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v186;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#ca,unexpected request type,%llu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
          *(_DWORD *)v190 = 134217984;
          *(_QWORD *)&v190[4] = v186;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ca,unexpected request type,%llu", v190);
          v88 = (char *)v87;
          sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v87);
          if (v88 != buf)
            free(v88);
        }
        goto LABEL_404;
      }
      v91 = 8;
    }
    *(_QWORD *)&v186 = v91;
LABEL_404:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v92 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      sub_1018637E0(v186, buf);
      v93 = SBYTE3(v216) >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v190 = 136315138;
      *(_QWORD *)&v190[4] = v93;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "#ca,nilrRequestType,%s", v190, 0xCu);
      if (SBYTE3(v216) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v119 = qword_1022A0078;
      sub_1018637E0(v186, v190);
      if (v191 >= 0)
        v120 = v190;
      else
        v120 = *(_BYTE **)v190;
      v188 = 136315138;
      *(_QWORD *)v189 = v120;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v119, 2, "#ca,nilrRequestType,%s", (const char *)&v188);
      v122 = v121;
      if (v191 < 0)
        operator delete(*(void **)v190);
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v122);
      if (v122 != buf)
        free(v122);
    }
    goto LABEL_413;
  }
  sub_1015A2E04(buf, "nilrRequestType,");
  if (SBYTE3(v216) >= 0)
    v89 = buf;
  else
    v89 = *(const std::string::value_type **)buf;
  if (SBYTE3(v216) >= 0)
    v90 = BYTE3(v216);
  else
    v90 = *(_QWORD *)&buf[8];
  std::string::append(&v172, v89, v90);
  if (SBYTE3(v216) < 0)
    operator delete(*(void **)buf);
LABEL_413:
  LOBYTE(v188) = 0;
  sub_10169DD40(a2, 0x34u, (uint64_t)&v188);
  if ((_BYTE)v188)
  {
    *((_QWORD *)&v186 + 1) = *(_QWORD *)&v189[4];
  }
  else
  {
    sub_1015A2E04(buf, "rawTimeTick,");
    if (SBYTE3(v216) >= 0)
      v94 = buf;
    else
      v94 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v95 = BYTE3(v216);
    else
      v95 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v94, v95);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  v127[0] = 0;
  sub_10169DDA0(a2, 0x35u, v127);
  if (v127[0])
  {
    LOBYTE(v187) = v127[1];
  }
  else
  {
    sub_1015A2E04(buf, "ecidCellReportCount,");
    if (SBYTE3(v216) >= 0)
      v96 = buf;
    else
      v96 = *(const std::string::value_type **)buf;
    if (SBYTE3(v216) >= 0)
      v97 = BYTE3(v216);
    else
      v97 = *(_QWORD *)&buf[8];
    std::string::append(&v172, v96, v97);
    if (SBYTE3(v216) < 0)
      operator delete(*(void **)buf);
  }
  size = HIBYTE(v172.__r_.__value_.__r.__words[2]);
  if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v172.__r_.__value_.__l.__size_;
  if (size)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v99 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v100 = &v172;
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v100 = (std::string *)v172.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v100;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "handlePdsSessionStatisticsReport,missingTlvList,%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v116 = &v172;
      if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v116 = (std::string *)v172.__r_.__value_.__r.__words[0];
      *(_DWORD *)v190 = 136315138;
      *(_QWORD *)&v190[4] = v116;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "handlePdsSessionStatisticsReport,missingTlvList,%s", v190);
      v118 = (char *)v117;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaController::handlePdsSessionStatisticsReport(const pds::GnssPdsSessionStatistics::Indication &)", "%s\n", v117);
      if (v118 != buf)
        free(v118);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v101 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_1017015EC((uint64_t)&v173, v190);
    v102 = v191 >= 0 ? v190 : *(_BYTE **)v190;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v215 = 2081;
    v216 = v102;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"QMI_PDS_SESSION_STATISTICS_REPORT\", \"SummaryReport,\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v191 < 0)
      operator delete(*(void **)v190);
  }
  *(_QWORD *)buf = 0;
  v103 = (const char *)(a1 + 2152);
  if (*(char *)(a1 + 2175) < 0)
  {
    if (!*(_QWORD *)(a1 + 2160))
      goto LABEL_458;
    v103 = *(const char **)v103;
  }
  else if (!*(_BYTE *)(a1 + 2175))
  {
    goto LABEL_458;
  }
  if (sub_10000840C(v103, (double *)buf))
  {
    v104 = (unint64_t)(CFAbsoluteTimeGetCurrent() - *(double *)buf);
    goto LABEL_459;
  }
LABEL_458:
  v104 = -1;
LABEL_459:
  v105 = *(_QWORD *)(a1 + 2232);
  v125[12] = v184;
  v125[13] = v185;
  v125[14] = v186;
  v126 = v187;
  v125[8] = v181;
  v125[9] = *(_OWORD *)v182;
  v125[10] = *(_OWORD *)&v182[16];
  v125[11] = v183;
  v125[4] = v177;
  v125[5] = v178;
  v125[6] = v179;
  v125[7] = v180;
  v125[0] = v173;
  v125[1] = (__int128)v174;
  v125[2] = v175;
  v125[3] = v176;
  sub_101811CEC(v105, v125, v104);
  v106 = *(_DWORD *)(a1 + 3552);
  if (v106 <= 1)
  {
    v107 = *(_QWORD *)sub_1016E37F8((_QWORD *)(a1 + 2248), v106);
    v123[12] = v184;
    v123[13] = v185;
    v123[14] = v186;
    v124 = v187;
    v123[8] = v181;
    v123[9] = *(_OWORD *)v182;
    v123[10] = *(_OWORD *)&v182[16];
    v123[11] = v183;
    v123[4] = v177;
    v123[5] = v178;
    v123[6] = v179;
    v123[7] = v180;
    v123[0] = v173;
    v123[1] = (__int128)v174;
    v123[2] = v175;
    v123[3] = v176;
    sub_1017ED598(v107, v123, v104);
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v172.__r_.__value_.__l.__data_);
}

void sub_10170137C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1017015C8(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1A)
    return 0;
  else
    return dword_101CDA2E0[(char)a2];
}

uint64_t sub_1017015EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string v30;
  _QWORD v31[3];
  _QWORD v32[10];
  char v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[10];
  char v38;
  uint64_t v39;

  sub_100263E50((uint64_t)v35);
  sub_100263E50((uint64_t)v31);
  sub_100263F7C(&v36, (uint64_t)"sessionStatisticsReport", 23);
  v4 = sub_100263F7C(&v36, (uint64_t)",refLat,", 8);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 12;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v4, *(double *)(a1 + 16));
  v6 = sub_100263F7C(&v36, (uint64_t)",refLon,", 8);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 12;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v6, *(double *)(a1 + 24));
  sub_100263F7C(&v36, (uint64_t)",refAlt,", 8);
  v8 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v8 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 32));
  sub_100263F7C(&v36, (uint64_t)",refAltUnc,", 11);
  v9 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v9 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 40));
  sub_100263F7C(&v36, (uint64_t)",refUncSemiMaj,", 15);
  v10 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v10 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 48));
  sub_100263F7C(&v36, (uint64_t)",refUncSemMin,", 14);
  v11 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v11 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 56));
  sub_100263F7C(&v36, (uint64_t)",refUncAngle,", 13);
  v12 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v12 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 72));
  sub_100263F7C(&v36, (uint64_t)",refConf,", 9);
  std::to_string(&v30, *(unsigned __int8 *)(a1 + 80));
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v30;
  else
    v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v13, size);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",nwTimeOut,", 11);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 84));
  sub_100263F7C(&v36, (uint64_t)",nwReqHorAcc,", 13);
  v15 = v35[0];
  *(_QWORD *)((char *)&v35[2] + *(_QWORD *)(v35[0] - 24)) = 2;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v15 - 24)) |= 4u;
  std::ostream::operator<<(&v36, *(double *)(a1 + 88));
  sub_100263F7C(&v36, (uint64_t)",nwRefTimeUncertainty,", 22);
  std::ostream::operator<<(&v36, *(float *)(a1 + 188));
  sub_100263F7C(&v36, (uint64_t)",nwAssistanceReceived,", 22);
  std::ostream::operator<<(&v36, *(_QWORD *)(a1 + 192));
  sub_100263F7C(&v36, (uint64_t)",nwAssistanceDropped,", 21);
  std::ostream::operator<<(&v36, *(_QWORD *)(a1 + 200));
  sub_100263F7C(&v36, (uint64_t)",networkSpecifiedHorConfidence,", 31);
  v30.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 208);
  sub_100263F7C(&v36, (uint64_t)&v30, 1);
  sub_100263F7C(&v36, (uint64_t)",subId,", 7);
  sub_101863A88(*(_DWORD *)(a1 + 212), &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v30;
  else
    v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v17 = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v16, v17);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",numSvsEphemerisAssistance,", 27);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 216));
  sub_100263F7C(&v36, (uint64_t)",nilrRequestType,", 17);
  sub_1018637E0(*(_QWORD *)(a1 + 224), &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v30;
  else
    v18 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v19 = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v18, v19);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",rawTimeTick,", 13);
  std::ostream::operator<<(&v36, *(_QWORD *)(a1 + 232));
  sub_100263F7C(&v36, (uint64_t)",ecidCellReportCount,", 21);
  v30.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 240);
  sub_100263F7C(&v36, (uint64_t)&v30, 1);
  sub_100263F7C(&v36, (uint64_t)",cpiAccepted,", 13);
  std::ostream::operator<<(&v36, *(unsigned __int8 *)(a1 + 96));
  sub_100263F7C(&v36, (uint64_t)",cpiFusedWithGNSS,", 18);
  std::ostream::operator<<(&v36, *(unsigned __int8 *)(a1 + 97));
  sub_100263F7C(&v36, (uint64_t)",cpiTimestamp,", 14);
  std::ostream::operator<<(&v36, *(_QWORD *)(a1 + 104));
  sub_100263F7C(&v36, (uint64_t)",cpiLatitude,", 13);
  std::ostream::operator<<(&v36, *(double *)(a1 + 112));
  sub_100263F7C(&v36, (uint64_t)",cpiLongitude,", 14);
  std::ostream::operator<<(&v36, *(double *)(a1 + 120));
  sub_100263F7C(&v36, (uint64_t)",cpiEllipsoidAltitude,", 22);
  std::ostream::operator<<(&v36, *(float *)(a1 + 136));
  sub_100263F7C(&v36, (uint64_t)",cpiHorizontalUncertaintyCircular,", 34);
  std::ostream::operator<<(&v36, *(float *)(a1 + 140));
  sub_100263F7C(&v36, (uint64_t)",cpiHorizontalConfidence,", 25);
  v30.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 144);
  sub_100263F7C(&v36, (uint64_t)&v30, 1);
  sub_100263F7C(&v36, (uint64_t)",cpiVerticalConfidence,", 23);
  v30.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 145);
  sub_100263F7C(&v36, (uint64_t)&v30, 1);
  sub_100263F7C(&v36, (uint64_t)",cpiPosSource,", 14);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 148));
  sub_100263F7C(&v36, (uint64_t)",cpiTimeType,", 13);
  sub_10186358C(*(unsigned __int8 *)(a1 + 152), &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v30;
  else
    v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v21 = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v20, v21);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",horizontalReliability,", 23);
  sub_101863D4C(*(unsigned __int8 *)(a1 + 153), &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v30;
  else
    v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v23 = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v22, v23);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",verticalReliability,", 21);
  sub_101863D4C(*(unsigned __int8 *)(a1 + 154), &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v30;
  else
    v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v25 = v30.__r_.__value_.__l.__size_;
  sub_100263F7C(&v36, (uint64_t)v24, v25);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  sub_100263F7C(&v36, (uint64_t)",altSource,", 11);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 156));
  sub_100263F7C(&v36, (uint64_t)",altSourceLinkage,", 18);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 160));
  sub_100263F7C(&v36, (uint64_t)",altUncertaintyCoverage,", 24);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 164));
  sub_100263F7C(&v36, (uint64_t)",huncSemimajor,", 15);
  std::ostream::operator<<(&v36, *(float *)(a1 + 168));
  sub_100263F7C(&v36, (uint64_t)",huncSemiminor,", 15);
  std::ostream::operator<<(&v36, *(float *)(a1 + 172));
  sub_100263F7C(&v36, (uint64_t)",huncAzimuth,", 13);
  std::ostream::operator<<(&v36, *(float *)(a1 + 176));
  sub_100263F7C(&v36, (uint64_t)",nwGpsWeek,", 11);
  std::ostream::operator<<(&v36, *(unsigned __int16 *)(a1 + 180));
  sub_100263F7C(&v36, (uint64_t)",nwGpsMsec,", 11);
  std::ostream::operator<<(&v36, *(unsigned int *)(a1 + 184));
  std::stringbuf::str(a2, v37);
  *(_QWORD *)((char *)v31
  v31[2] = v28;
  if (v33 < 0)
    operator delete((void *)v32[8]);
  std::streambuf::~streambuf(v32);
  std::ios::~ios(&v34);
  v35[0] = v26;
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v26 - 24)) = v27;
  v36 = v28;
  if (v38 < 0)
    operator delete((void *)v37[8]);
  std::streambuf::~streambuf(v37);
  return std::ios::~ios(&v39);
}

void sub_101701EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a16);
  sub_1018B38B4((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_101701F68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = a2 - 8;
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v4 = 8 * v2;
      do
      {
        sub_101703904((uint64_t *)(v3 + v4), 0);
        v4 -= 8;
      }
      while (v4);
    }
    operator delete[]();
  }
}

void sub_101701FCC(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101701FF8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t j;
  _QWORD *v7;

  for (i = 0; i != 120; i += 24)
  {
    v5 = (_QWORD *)(a1 + i);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    sub_100BFCC24((_QWORD *)(a1 + i), *(const void **)(a2 + i), *(_QWORD *)(a2 + i + 8), (uint64_t)(*(_QWORD *)(a2 + i + 8) - *(_QWORD *)(a2 + i)) >> 1);
  }
  for (j = 0; j != 120; j += 24)
  {
    v7 = (_QWORD *)(a1 + 120 + j);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    sub_100BFCC24(v7, *(const void **)(a2 + j + 120), *(_QWORD *)(a2 + j + 128), (uint64_t)(*(_QWORD *)(a2 + j + 128) - *(_QWORD *)(a2 + j + 120)) >> 1);
  }
  return a1;
}

void sub_101702088(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;

  for (; v2; v2 -= 24)
  {
    v4 = *(void **)(v1 + v2 + 96);
    if (v4)
    {
      *(_QWORD *)(v1 + v2 + 104) = v4;
      operator delete(v4);
    }
  }
  v5 = 0;
  while (1)
  {
    v6 = *(void **)(v1 + v5 + 96);
    if (v6)
    {
      *(_QWORD *)(v1 + v5 + 104) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -120)
      _Unwind_Resume(exception_object);
  }
}

void sub_101702100(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_100259694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_100BFCCD8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_101702190(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1017021BC(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1017021E8(_QWORD *a1)
{
  *a1 = 0;
  if (sub_1001DC538())
    operator new[]();
  operator new[]();
}

void sub_10170227C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_101701F68((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017022A4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10180DC38();
    operator delete();
  }
  return result;
}

void sub_1017022E4()
{
  operator delete();
}

_QWORD *sub_1017022F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9D30;
  result[1] = v3;
  return result;
}

uint64_t sub_10170232C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9D30;
  a2[1] = v2;
  return result;
}

uint64_t sub_101702348(uint64_t a1, qmi::Client *a2)
{
  return sub_1016EC2A8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101702350(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170238C()
{
}

void sub_10170239C()
{
  operator delete();
}

_QWORD *sub_1017023B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9DB0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017023E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9DB0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_101702400(uint64_t a1, char *a2, int *a3, uint64_t a4, char *a5)
{
  int v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  int v12;
  char v13;
  _BYTE v14[24];
  _BYTE *v15;

  v6 = *a3;
  v7 = *a5;
  v13 = *a2;
  v12 = v6;
  v8 = *(_QWORD *)(a1 + 8) + 1704;
  v9 = operator new(0x28uLL);
  *v9 = off_1021C9E20;
  v9[1] = &v13;
  v9[2] = &v12;
  v9[3] = a4;
  *((_BYTE *)v9 + 32) = v7;
  v15 = v9;
  sub_10178EA00(v8, (uint64_t)v14);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v11))(result);
}

void sub_1017024D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101702514(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702550()
{
}

void sub_101702560()
{
  operator delete();
}

__n128 sub_101702574(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021C9E20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1017025B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021C9E20;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1017025DC(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  char **v5;
  _QWORD v6[4];
  char v7;

  v3 = **(unsigned __int8 **)(a1 + 8);
  v4 = **(_DWORD **)(a1 + 16);
  v5 = *(char ***)(a1 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_101702690;
  v6[3] = &unk_1021C7308;
  v7 = *(_BYTE *)(a1 + 32);
  sub_1017229F4(a2, v3, v4, v5, (uint64_t)v6);
}

uint64_t sub_101702648(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702684()
{
}

void sub_101702690(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a2 + 4);
    v6 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)buf = 68289538;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v5;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ee,Inject\", \"response\":%{public}d, \"isLast\":%{public}hhd}", buf, 0x1Eu);
  }
  if (*(_BYTE *)(a1 + 32) && !*(_DWORD *)(a2 + 4))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Xtra download - ok", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Xtra download - ok", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::CLEurekaController(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)::(anonymous class)::operator()(uint8_t, uint32_t, const std::vector<uint8_t> &, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_1017028D4()
{
  operator delete();
}

_QWORD *sub_1017028E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9EB0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170291C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9EB0;
  a2[1] = v2;
  return result;
}

BOOL sub_101702938(uint64_t a1)
{
  return sub_1016E62BC(*(_DWORD **)(a1 + 8), (int *)(*(_QWORD *)(a1 + 8) + 3556));
}

uint64_t sub_101702944(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702980()
{
}

void sub_101702990()
{
  operator delete();
}

_QWORD *sub_1017029A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9F30;
  result[1] = v3;
  return result;
}

uint64_t sub_1017029D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9F30;
  a2[1] = v2;
  return result;
}

BOOL sub_1017029F4(uint64_t a1)
{
  return sub_1016E72EC(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1017029FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702A38()
{
}

void sub_101702A48()
{
  operator delete();
}

_QWORD *sub_101702A5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021C9FB0;
  result[1] = v3;
  return result;
}

uint64_t sub_101702A90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021C9FB0;
  a2[1] = v2;
  return result;
}

void sub_101702AAC(uint64_t a1, unsigned __int8 *a2)
{
  sub_1016E5C18(a1, *a2);
}

uint64_t sub_101702AB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702AF0()
{
}

void sub_101702B00()
{
  operator delete();
}

_QWORD *sub_101702B14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA030;
  result[1] = v3;
  return result;
}

uint64_t sub_101702B48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA030;
  a2[1] = v2;
  return result;
}

void sub_101702B64(uint64_t a1, unsigned __int8 *a2)
{
  sub_1016E5DC0(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_101702B70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702BAC()
{
}

void sub_101702BBC()
{
  operator delete();
}

_QWORD *sub_101702BD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA0B0;
  result[1] = v3;
  return result;
}

uint64_t sub_101702C04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA0B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_101702C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 2664);
  if (v2)
    sub_10176C3F0(v2);
  return sub_1016E57DC(v1);
}

uint64_t sub_101702C4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702C88()
{
}

void sub_101702C98()
{
  operator delete();
}

_QWORD *sub_101702CAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA130;
  result[1] = v3;
  return result;
}

uint64_t sub_101702CE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA130;
  a2[1] = v2;
  return result;
}

uint64_t sub_101702CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 2664);
  if (v2)
    sub_10176C3F8(v2);
  return sub_1016E5344(v1);
}

uint64_t sub_101702D28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702D64()
{
}

void sub_101702D74()
{
  operator delete();
}

_QWORD *sub_101702D88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA1B0;
  result[1] = v3;
  return result;
}

uint64_t sub_101702DBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA1B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_101702DD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;

  sub_101702F08((uint64_t)v6, a2);
  if (!v7)
    sub_10025FD1C();
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)(a1 + 8));
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_6;
  }
  if (v7)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return 1;
}

void sub_101702E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101702EC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101702EFC()
{
}

uint64_t sub_101702F08(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_101702F70()
{
  operator delete();
}

_QWORD *sub_101702F84(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA240;
  result[1] = v3;
  return result;
}

uint64_t sub_101702FB8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA240;
  a2[1] = v2;
  return result;
}

void sub_101702FD4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  _QWORD __dst[120];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[960];
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  double v39;

  memcpy(__dst, (const void *)a2, sizeof(__dst));
  v11 = *(_OWORD *)(a2 + 960);
  v12 = *(_QWORD *)(a2 + 976);
  *(_OWORD *)(a2 + 960) = 0u;
  *(_QWORD *)(a2 + 976) = 0;
  v13 = *(_OWORD *)(a2 + 984);
  v14 = *(_QWORD *)(a2 + 1000);
  *(_OWORD *)(a2 + 984) = 0u;
  *(_QWORD *)(a2 + 1000) = 0;
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a2 + 1132);
  v22[0] = *(_OWORD *)(a2 + 1120);
  v21 = *(_OWORD *)(a2 + 1104);
  v20 = *(_OWORD *)(a2 + 1088);
  v19 = *(_OWORD *)(a2 + 1072);
  v18 = *(_OWORD *)(a2 + 1056);
  v17 = *(_OWORD *)(a2 + 1040);
  v4 = *(_OWORD *)(a2 + 1008);
  v16 = *(_OWORD *)(a2 + 1024);
  v15 = v4;
  v23 = *(_OWORD *)(a2 + 1152);
  v24 = *(_QWORD *)(a2 + 1168);
  *(_OWORD *)(a2 + 1152) = 0u;
  v5 = *(_OWORD *)(a2 + 1176);
  *(_QWORD *)(a2 + 1176) = 0;
  *(_QWORD *)(a2 + 1168) = 0;
  v25 = v5;
  v26 = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a2 + 1184) = 0;
  *(_QWORD *)(a2 + 1192) = 0;
  v27 = *(_OWORD *)(a2 + 1200);
  v28 = *(_OWORD *)(a2 + 1216);
  v29 = *(_QWORD *)(a2 + 1232);
  v6 = *(_QWORD *)(a1 + 8);
  v39 = 0.0;
  v7 = (const char *)(v6 + 2152);
  if (*(char *)(v6 + 2175) < 0)
  {
    if (!*(_QWORD *)(v6 + 2160))
      goto LABEL_8;
    v7 = *(const char **)v7;
  }
  else if (!*(_BYTE *)(v6 + 2175))
  {
    goto LABEL_8;
  }
  if (sub_10000840C(v7, &v39))
  {
    BYTE2(__dst[21]) = 1;
    __dst[22] = (unint64_t)(CFAbsoluteTimeGetCurrent() - v39);
  }
LABEL_8:
  BYTE4(__dst[30]) = 1;
  LODWORD(__dst[117]) = 0;
  if (sub_100CD595C(v6 + 2268))
  {
    v8 = 1;
  }
  else
  {
    if (!sub_100CD596C(v6 + 2268))
      goto LABEL_13;
    v8 = 2;
  }
  LODWORD(__dst[117]) = v8;
LABEL_13:
  if (*(_QWORD *)(v6 + 1592))
  {
    sub_101703314((uint64_t)v30, (uint64_t)__dst);
    v9 = *(_QWORD *)(v6 + 1592);
    if (!v9)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v30);
    if (v38 < 0)
      operator delete(__p);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
  }
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_10170325C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x98F]) < 0)
    operator delete((void *)STACK[0x978]);
  sub_1017127B8((uint64_t)&STACK[0x4E0]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1017032CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703308()
{
}

uint64_t sub_101703314(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  memcpy((void *)a1, (const void *)a2, 0x3C0uLL);
  if (*(char *)(a2 + 983) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 960), *(void **)(a2 + 960), *(_QWORD *)(a2 + 968));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 960);
    *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 960) = v4;
  }
  if (*(char *)(a2 + 1007) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 984), *(void **)(a2 + 984), *(_QWORD *)(a2 + 992));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 984);
    *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
    *(_OWORD *)(a1 + 984) = v5;
  }
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  v6 = *(_OWORD *)(a2 + 1024);
  v7 = *(_OWORD *)(a2 + 1040);
  v8 = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1056) = v8;
  *(_OWORD *)(a1 + 1040) = v7;
  *(_OWORD *)(a1 + 1024) = v6;
  v9 = *(_OWORD *)(a2 + 1088);
  v10 = *(_OWORD *)(a2 + 1104);
  v11 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)(a2 + 1132);
  *(_OWORD *)(a1 + 1120) = v11;
  *(_OWORD *)(a1 + 1104) = v10;
  *(_OWORD *)(a1 + 1088) = v9;
  if (*(char *)(a2 + 1175) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 1152), *(void **)(a2 + 1152), *(_QWORD *)(a2 + 1160));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 1152);
    *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
    *(_OWORD *)(a1 + 1152) = v12;
  }
  v13 = (_BYTE *)(a1 + 1176);
  if (*(char *)(a2 + 1199) < 0)
  {
    sub_100115CE4(v13, *(void **)(a2 + 1176), *(_QWORD *)(a2 + 1184));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 1176);
    *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
    *(_OWORD *)v13 = v14;
  }
  v15 = *(_OWORD *)(a2 + 1200);
  v16 = *(_OWORD *)(a2 + 1216);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1216) = v16;
  *(_OWORD *)(a1 + 1200) = v15;
  return a1;
}

void sub_101703484(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[1175] < 0)
    operator delete(*v4);
  if (v1[1007] < 0)
    operator delete(*v3);
  if (v1[983] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1017034D4()
{
  operator delete();
}

_QWORD *sub_1017034E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA2C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170351C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA2C0;
  a2[1] = v2;
  return result;
}

double sub_101703538(uint64_t a1, uint64_t *a2)
{
  double result;

  *(_QWORD *)&result = sub_1016FE49C(*(_QWORD *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_101703540(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170357C()
{
}

void sub_10170358C()
{
  operator delete();
}

_QWORD *sub_1017035A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA350;
  result[1] = v3;
  return result;
}

uint64_t sub_1017035D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA350;
  a2[1] = v2;
  return result;
}

void sub_1017035F0(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 2664);
  if (v5)
    sub_10176C3F0(v5);
  v13 = v3;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1017DDC64(v4, &v13);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v2)
  {
    v11 = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1017036C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101703744(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703780()
{
}

void sub_101703790()
{
  operator delete();
}

_QWORD *sub_1017037A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA3D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017037D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA3D0;
  a2[1] = v2;
  return result;
}

void sub_1017037F4(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  sub_1016FF230(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_101703804(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703840()
{
}

void sub_101703850()
{
  operator delete();
}

_QWORD *sub_101703864(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA460;
  result[1] = v3;
  return result;
}

uint64_t sub_101703898(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA460;
  a2[1] = v2;
  return result;
}

double sub_1017038B4(uint64_t a1, uint64_t *a2)
{
  double result;

  *(_QWORD *)&result = sub_1016FE708(*(_QWORD *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_1017038BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017038F8()
{
}

uint64_t sub_101703904(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1017E8A28();
    operator delete();
  }
  return result;
}

void sub_101703944()
{
  operator delete();
}

_QWORD *sub_101703958(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA4E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170398C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA4E0;
  a2[1] = v2;
  return result;
}

double sub_1017039A8(uint64_t a1, uint64_t *a2)
{
  double result;

  *(_QWORD *)&result = sub_1016FE708(*(_QWORD *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_1017039B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017039EC()
{
}

void sub_1017039FC()
{
  operator delete();
}

_QWORD *sub_101703A10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA560;
  result[1] = v3;
  return result;
}

uint64_t sub_101703A44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA560;
  a2[1] = v2;
  return result;
}

void sub_101703A60(uint64_t a1)
{
  sub_10178E694(*(_QWORD *)(a1 + 8) + 1704);
}

uint64_t sub_101703A6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703AA8()
{
}

void sub_101703AB8()
{
  operator delete();
}

_QWORD *sub_101703ACC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA5E0;
  result[1] = v3;
  return result;
}

uint64_t sub_101703B00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA5E0;
  a2[1] = v2;
  return result;
}

void sub_101703B1C(uint64_t a1)
{
  sub_1016FF134(*(_QWORD *)(a1 + 8), "locationd,bbInitFailed");
}

uint64_t sub_101703B2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703B68()
{
}

_QWORD *sub_101703B74@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_101703BCC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101703BB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_101703BCC(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021CA660;
  sub_10176D388(a1 + 3, *a2);
  return a1;
}

void sub_101703C08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101703C1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101703C30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

const char **sub_101703C64(uint64_t a1)
{
  return sub_10176D38C((const char **)(a1 + 24));
}

void sub_101703C70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101703C84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_101703CB8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  sub_1017040D8(a1 + 56);
  result = *(_QWORD **)(a1 + 48);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_101703D1C()
{
  operator delete();
}

_QWORD *sub_101703D30(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA700;
  result[1] = v3;
  return result;
}

uint64_t sub_101703D64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA700;
  a2[1] = v2;
  return result;
}

_QWORD *sub_101703D80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 8);
  v4[0] = off_1021CA770;
  v4[1] = v1;
  v5 = v4;
  sub_10178EA00(v1 + 1704, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101703E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101703E58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703E94()
{
}

void sub_101703EA4()
{
  operator delete();
}

_QWORD *sub_101703EB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA770;
  result[1] = v3;
  return result;
}

uint64_t sub_101703EEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA770;
  a2[1] = v2;
  return result;
}

void sub_101703F08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101703FD4;
  v3[3] = &unk_1021380A8;
  v3[4] = v2;
  sub_101722408(a2, 2039807, 2, 127, 255, 127, 127, 511, 63, 511, (uint64_t)v3);
}

uint64_t sub_101703F8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101703FC8()
{
}

uint64_t sub_101703FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = qmi::asString(*(unsigned int *)(a2 + 4));
    v7[0] = 68289283;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2081;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,bbResponse\", \"errorStr\":%{private, location:escape_only}s}", (uint8_t *)v7, 0x1Cu);
  }
  return sub_101757694(*(_QWORD *)(v3 + 2648), *(_DWORD *)(a2 + 4));
}

uint64_t sub_1017040D8(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_101704140(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_101704140(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1017041BC(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1017041BC(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_101755B68(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_101755B68(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::cancelTimeoutEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_101755B68(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_101755B68(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

_QWORD *sub_10170464C@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xF8uLL);
  result = sub_1017046A4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101704690(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1017046A4(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021CA800;
  sub_10184BFB4(a1 + 3, *a2);
  return a1;
}

void sub_1017046E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1017046F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101704708(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021CA800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10170473C(uint64_t a1)
{
  return sub_10184C008(a1 + 24);
}

void sub_10170474C()
{
  operator delete();
}

_QWORD *sub_101704760(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA850;
  result[1] = v3;
  return result;
}

uint64_t sub_101704794(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA850;
  a2[1] = v2;
  return result;
}

void sub_1017047B0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rti sendSetBlockList,send", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#rti sendSetBlockList,send", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::injectBlocklist(const qmi::pds::BlockListSv &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101728A20(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021CA8B0);
}

uint64_t sub_101704958(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101704994()
{
}

void sub_1017049A0(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_DWORD *)a2 + 1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#rti sendSetBlockList\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_101704A8C()
{
  operator delete();
}

_DWORD *sub_101704AA0(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CA8F0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_101704AD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CA8F0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_101704AF8(uint64_t a1, uint64_t *a2)
{
  sub_10172A07C(a2, *(_DWORD *)(a1 + 8), (uint64_t)&stru_1021CA950);
}

uint64_t sub_101704B10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101704B4C()
{
}

void sub_101704B58(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((unsigned int *)a2 + 1);
    v6[0] = 68289795;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = v4;
    v11 = 1026;
    v12 = v5;
    v13 = 2081;
    v14 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb,constellationControl response\", \"msgId\":%{public}d, \"errorCode\":%{public}d, \"errorString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x28u);
  }
}

void sub_101704C6C()
{
  operator delete();
}

_QWORD *sub_101704C80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CA990;
  result[1] = v3;
  return result;
}

uint64_t sub_101704CB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CA990;
  a2[1] = v2;
  return result;
}

void sub_101704CD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint8_t buf[8];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = 0;
    v15 = 0x402000000FF0402;
    LODWORD(v16) = 400;
    WORD2(v16) = 1026;
    *(_DWORD *)((char *)&v16 + 6) = 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ec,sendSetDefaultTrackingSession,mode,%{public}d,timeout,%{public}d,accuracy,%{public}d,period,%{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7[0] = 67240960;
    v7[1] = 0;
    v8 = 1026;
    v9 = 255;
    v10 = 1026;
    v11 = 400;
    v12 = 1026;
    v13 = 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,sendSetDefaultTrackingSession,mode,%{public}d,timeout,%{public}d,accuracy,%{public}d,period,%{public}d", v7, 26);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::startInternal(const DeviceOperatingContext_t &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_101721C44(a2, 0, 255, 1, 400, (uint64_t)&stru_1021CA9F0);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v15 = 3221225472;
  *(_QWORD *)&v16 = sub_101704F8C;
  *((_QWORD *)&v16 + 1) = &unk_1021380A8;
  v17 = v3;
  sub_101721F20(a2, 1, (uint64_t)buf);
  sub_1017239F8(a2, 1, (uint64_t)&stru_1021CAA10);
}

uint64_t sub_101704F40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101704F7C()
{
}

uint64_t sub_101704F8C(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v4;

  v2 = *(_DWORD *)(a2 + 4);
  v4 = v2 == 26 || v2 == 0;
  return sub_1017190C4(*(_QWORD *)(a1 + 32) + 3792, v4);
}

void sub_101704FB0()
{
  operator delete();
}

_QWORD *sub_101704FC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CAA50;
  result[1] = v3;
  return result;
}

uint64_t sub_101704FF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CAA50;
  a2[1] = v2;
  return result;
}

void sub_101705014(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1017050B8;
  v3[3] = &unk_1021380A8;
  v3[4] = v2;
  sub_101721F20(a2, 0, (uint64_t)v3);
}

uint64_t sub_101705070(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017050AC()
{
}

void sub_1017050B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  BOOL v14;
  dispatch_time_t v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  _QWORD block[5];
  BOOL v20;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 4);
  if (v3 == 26 || v3 == 0)
  {
    sub_1001E4804(buf);
    v21[0] = 0;
    if (sub_1001E4B84(*(uint64_t *)buf, "GpsAssertionStopFailure", v21))
      v5 = v21[0];
    else
      v5 = 0;
    v6 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_1001E4804(buf);
    v21[0] = 0;
    if (sub_1001E4B84(*(uint64_t *)buf, "GpsAssertionStopDelay", v21))
      v9 = v21[0];
    else
      v9 = 0;
    v10 = v25;
    if (v25)
    {
      v11 = (unint64_t *)&v25->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v5 | v9)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v5;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gnssAssertion,#warning,testCodeRunWith,sendFailure,%d,sendDelay,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v21[0] = 67109376;
        v21[1] = v5;
        v22 = 1024;
        v23 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssAssertion,#warning,testCodeRunWith,sendFailure,%d,sendDelay,%d", v21, 14);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::stopInternal()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v14 = v5 == 0;
      if (v9)
      {
        v15 = dispatch_time(0, 1000000000 * v9);
        v16 = objc_msgSend(objc_msgSend(*(id *)(v2 + 1672), "silo"), "queue");
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_101705458;
        block[3] = &unk_1021468D0;
        block[4] = v2;
        v20 = v14;
        dispatch_after(v15, v16, block);
      }
      else
      {
        sub_1017190B0(v2 + 3792, v5 == 0);
      }
    }
    else
    {
      sub_1017190B0(v2 + 3792, 1);
    }
  }
  else
  {
    sub_1017190B0(v2 + 3792, 0);
  }
}

void sub_101705438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101705458(uint64_t a1)
{
  return sub_1017190B0(*(_QWORD *)(a1 + 32) + 3792, *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10170546C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_100067A50(a1 + 736);
  sub_100008848(a1 + 688, *(_QWORD **)(a1 + 696));
  sub_1017055C4((uint64_t *)(a1 + 680), 0);
  v2 = *(void **)(a1 + 600);
  if (v2)
  {
    *(_QWORD *)(a1 + 608) = v2;
    operator delete(v2);
  }
  sub_100109508(a1 + 112);
  v3 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    operator delete();
  v4 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v4)
    operator delete();
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v5)
    operator delete();
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
    operator delete();
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
    operator delete();
  v8 = *(_QWORD **)(a1 + 64);
  if (v8 == (_QWORD *)(a1 + 40))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_18:
  v10 = *(_QWORD **)(a1 + 32);
  if (v10 == (_QWORD *)(a1 + 8))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 8);
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
LABEL_22:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

uint64_t *sub_1017055C4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_100067AC4(v2 + 88);
    sub_101705614(v2);
    operator delete();
  }
  return result;
}

uint64_t sub_101705614(uint64_t a1)
{
  void *v2;

  sub_10170564C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10170564C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_101705688(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_101705688(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    operator delete();
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

void sub_1017056F0()
{
  operator delete();
}

_QWORD *sub_101705704(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CAAD0;
  result[1] = v3;
  return result;
}

uint64_t sub_101705738(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CAAD0;
  a2[1] = v2;
  return result;
}

void sub_101705754(uint64_t a1, uint64_t *a2)
{
  sub_1017219C0(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021CAB30);
}

uint64_t sub_10170576C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017057A8()
{
}

void sub_1017057BC()
{
  operator delete();
}

_QWORD *sub_1017057D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CAB70;
  result[1] = v3;
  return result;
}

uint64_t sub_101705804(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CAB70;
  a2[1] = v2;
  return result;
}

void sub_101705820(uint64_t a1, uint64_t *a2)
{
  sub_1017219C0(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021CABD0);
}

uint64_t sub_101705838(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101705874()
{
}

void sub_101705888()
{
  operator delete();
}

__n128 sub_10170589C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CAC10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1017058D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CAC10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1017058F4(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendNiResponse,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = *(unsigned __int8 *)(a1 + 8);
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "sendNiResponse,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_101725FC8(a2, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 **)(a1 + 16), (uint64_t)&stru_1021CAC70);
}

uint64_t sub_101705AC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101705AFC()
{
}

void sub_101705B08(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240707;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    v20 = 2081;
    v21 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    v7 = *(unsigned __int16 *)a2;
    v8 = *((unsigned int *)a2 + 1);
    v11[0] = 67240707;
    v11[1] = v7;
    v12 = 1026;
    v13 = v8;
    v14 = 2081;
    v15 = qmi::asString(v8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#supl,sendNiResponse,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", v11, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendNiResponse(BOOL, const CLEurekaNilrTypes::SuplInit &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_101705D10()
{
  operator delete();
}

_DWORD *sub_101705D24(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CACB0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_101705D5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CACB0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_101705D7C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a1 + 8);
  if ((v3 - 1) < 4)
    v4 = v3 + 1;
  else
    v4 = 0;
  sub_101727A24(a2, v4, (uint64_t)&stru_1021CAD10);
}

uint64_t sub_101705DA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101705DDC()
{
}

void sub_101705DF0()
{
  operator delete();
}

_QWORD *sub_101705E04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CAD50;
  result[1] = v3;
  return result;
}

uint64_t sub_101705E38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CAD50;
  a2[1] = v2;
  return result;
}

void sub_101705E54(uint64_t a1, uint64_t *a2)
{
  sub_1017274F8(a2, 1, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 2295), (uint64_t)&stru_1021CADB0);
}

uint64_t sub_101705E70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101705EAC()
{
}

_QWORD *sub_101705EBC(_QWORD *a1)
{
  *a1 = off_1021CADF0;
  sub_100857FD0((uint64_t)(a1 + 1));
  return a1;
}

void sub_101705EEC(_QWORD *a1)
{
  *a1 = off_1021CADF0;
  sub_100857FD0((uint64_t)(a1 + 1));
  operator delete();
}

_BYTE *sub_101705F2C(uint64_t a1)
{
  uint64_t *v2;
  _BYTE *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = operator new(0x540uLL);
  *(_QWORD *)v3 = off_1021CADF0;
  sub_100F8CA40((uint64_t)(v3 + 8), v2);
  v3[1336] = *(_BYTE *)(a1 + 1336);
  return v3;
}

void sub_101705F80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101705F94(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021CADF0;
  result = sub_100F8CA40(a2 + 8, (uint64_t *)(a1 + 8));
  *(_BYTE *)(a2 + 1336) = *(_BYTE *)(a1 + 1336);
  return result;
}

uint64_t sub_101705FD4(uint64_t a1)
{
  return sub_100857FD0(a1 + 8);
}

void sub_101705FDC(void *a1)
{
  sub_100857FD0((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_101706004(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v4 = a1 + 8;
  sub_1017274F8(a2, a1[12], a1[13], (uint64_t)&stru_1021CAE50);
  sub_101727798(a2, 0, (uint64_t)&stru_1021CAE70);
  sub_101769710(&v8, v4);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
  v5 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290050;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = v8;
    v18 = 1026;
    v19 = v9;
    v20 = 1026;
    v21 = v10;
    v22 = 1026;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#emergency,setUserPlanePositionModes\", \"userplanemodemask\":%{public}d, \"controlplanemodemask\":%{public}d, \"commonmodesmask\":%{public}d, \"gsmuserplanenetworkmeasurementreportsupport\":%{public}d}", buf, 0x2Au);
  }
  sub_101727F0C(a2, v8, v9, v10, v11, (uint64_t)&stru_1021CAE90);
  if (sub_10075CBF8())
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C9CF0);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v7 = a1[1336];
      *(_DWORD *)buf = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1026;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"E911 override config\", \"lockout\":%{public}hhd}", buf, 0x18u);
    }
    sub_101728778(a2, a1[1336], 0, (uint64_t)&stru_1021CAEB0);
  }
}

uint64_t sub_101706228(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101706264()
{
}

uint64_t sub_101706280(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CAEF0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1017062BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CAEF0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

_QWORD *sub_101706308(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_1021CAEF0;
  v2[1] = v3;
  v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_10170636C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_101706380(char *result, _QWORD *a2)
{
  _BYTE *v2;
  __int128 v3;

  *a2 = off_1021CAEF0;
  a2[1] = *((_QWORD *)result + 1);
  v2 = a2 + 2;
  if (result[39] < 0)
    return (char *)sub_100115CE4(v2, *((void **)result + 2), *((_QWORD *)result + 3));
  v3 = *((_OWORD *)result + 1);
  a2[4] = *((_QWORD *)result + 4);
  *(_OWORD *)v2 = v3;
  return result;
}

void sub_1017063C4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_1017063D8(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void sub_101706408(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[16];
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 2080;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setApnProfilesReq,apn,%d,pdnType,%d,apnName,%s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v10 = a1 + 16;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v10 = *(_QWORD *)(a1 + 16);
    LODWORD(v15) = 67109634;
    HIDWORD(v15) = v11;
    v16 = 1024;
    v17 = v12;
    v18 = 2080;
    v19 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "setApnProfilesReq,apn,%d,pdnType,%d,apnName,%s", &v15, 24, v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(buf, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 32);
  }
  sub_101726974(a2, v8, v9, (uint64_t *)buf, (uint64_t *)&stru_1021CAF50);
  if (SHIBYTE(v21) < 0)
    operator delete(*(void **)buf);
}

void sub_101706670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101706694(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CAF70))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017066D0()
{
  return &off_1021CAF70;
}

void sub_1017066DC(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109634;
    v17 = v4;
    v18 = 1024;
    v19 = v5;
    v20 = 2080;
    v21 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#supl,setApnProfilesRsp,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    v7 = *(unsigned __int16 *)a2;
    v8 = *((unsigned int *)a2 + 1);
    LODWORD(v11) = 67109634;
    HIDWORD(v11) = v7;
    v12 = 1024;
    v13 = v8;
    v14 = 2080;
    v15 = qmi::asString(v8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "#supl,setApnProfilesRsp,msgId,%d,eCode,%d,eCodeStr,%s", &v11, 24, v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

uint64_t sub_1017068E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CAF90;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10170691C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021CAF90;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

_QWORD *sub_101706968(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_1021CAF90;
  sub_10169F94C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1017069A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1017069BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CAF90;
  return sub_10169F94C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1017069D8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_1017069EC(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void sub_101706A1C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  void *__p[2];
  _QWORD v19[2];
  uint8_t buf[8];
  uint64_t v21;
  __int128 v22;
  unsigned int v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_DWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = v7;
    HIWORD(v21) = 1024;
    LODWORD(v22) = v8;
    WORD2(v22) = 2080;
    *(_QWORD *)((char *)&v22 + 6) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setApnProfilesReq,instance,%d,apn,%d,pdnType,%d,apnName,%s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v13 = a1 + 16;
    v14 = *(_DWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 12);
    if (*(char *)(a1 + 39) < 0)
      v13 = *(_QWORD *)(a1 + 16);
    LOWORD(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 2) = v14;
    HIWORD(__p[1]) = 1024;
    LODWORD(v19[0]) = v15;
    WORD2(v19[0]) = 2080;
    *(_QWORD *)((char *)v19 + 6) = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "setApnProfilesReq,instance,%d,apn,%d,pdnType,%d,apnName,%s", __p, 30, 67109890, (const char *)__p[1]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v9 = *(_DWORD *)(a1 + 40);
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    v12 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 16);
    v19[0] = *(_QWORD *)(a1 + 32);
    v12 = v9;
  }
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v21 = 3221225472;
  *(_QWORD *)&v22 = sub_101706D44;
  *((_QWORD *)&v22 + 1) = &unk_1021C7268;
  v23 = v12;
  sub_101726CA0(a2, v9, v10, v11, (uint64_t *)__p, (uint64_t)buf);
  if (SHIBYTE(v19[0]) < 0)
    operator delete(__p[0]);
}

void sub_101706CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101706CFC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CAFF0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101706D38()
{
  return &off_1021CAFF0;
}

void sub_101706D44(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109890;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    v24 = 2080;
    v25 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,setApnProfilesRsp,instance,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    v9 = *a2;
    v10 = *((unsigned int *)a2 + 1);
    LOWORD(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 2) = v9;
    HIWORD(v14) = 1024;
    v15 = v10;
    v16 = 2080;
    v17 = qmi::asString(v10);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#supl,setApnProfilesRsp,instance,%d,msgId,%d,eCode,%d,eCodeStr,%s", &v13, 30, 67109890, v14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplApnConfigForInstance(CLTelephonyService_Type::SimInstance)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

_QWORD *sub_101706F6C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CB010;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101706FA8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021CB010;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

_BYTE *sub_101706FF4(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x28uLL);
  *(_QWORD *)v2 = off_1021CB010;
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  sub_1007855D8((_QWORD *)v2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_101707048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10170705C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CB010;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_1007855D8((_QWORD *)(a2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
}

void sub_10170708C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_1017070A4(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_1017070D4(uint64_t a1, uint64_t *a2)
{
  int v3;
  _QWORD v4[4];
  char v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10170717C;
  v4[3] = &unk_1021C7308;
  v5 = v3;
  sub_101729320(a2, v3, a1 + 16, (uint64_t)v4);
}

uint64_t sub_101707134(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101707170()
{
}

void sub_10170717C(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109890;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    v24 = 2080;
    v25 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,sendInjectSuplCertRsp,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    v9 = *a2;
    v10 = *((unsigned int *)a2 + 1);
    LOWORD(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 2) = v9;
    HIWORD(v14) = 1024;
    v15 = v10;
    v16 = 2080;
    v17 = qmi::asString(v10);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#supl,sendInjectSuplCertRsp,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", &v13, 30, 67109890, v14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendInjectSuplCert(qmi::pds::SuplCertIndex, const std::vector<uint8_t> &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_1017073A8()
{
  operator delete();
}

_BYTE *sub_1017073BC(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CB090;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1017073F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CB090;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_101707414(uint64_t a1, uint64_t *a2)
{
  int v3;
  _QWORD v4[4];
  char v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1017074B8;
  v4[3] = &unk_1021C7308;
  v5 = v3;
  sub_1017295AC(a2, v3, (uint64_t)v4);
}

uint64_t sub_101707470(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017074AC()
{
}

void sub_1017074B8(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109890;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    v22 = 1024;
    v23 = v7;
    v24 = 2080;
    v25 = qmi::asString(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#supl,sendDeleteSuplCert,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v8 = qword_1022A0078;
    v9 = *a2;
    v10 = *((unsigned int *)a2 + 1);
    LOWORD(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 2) = v9;
    HIWORD(v14) = 1024;
    v15 = v10;
    v16 = 2080;
    v17 = qmi::asString(v10);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 0, "#supl,sendDeleteSuplCert,index,%d,msgId,%d,eCode,%d,eCodeStr,%s", &v13, 30, 67109890, v14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendDeleteSuplCert(qmi::pds::SuplCertIndex)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_1017076E4()
{
  operator delete();
}

_DWORD *sub_1017076F8(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CB110;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_101707730(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CB110;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_101707750(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setSuplUdpPortConfig,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = *(_DWORD *)(a1 + 8);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "setSuplUdpPortConfig,%d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendSuplUdpPortConfig(uint32_t)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_101726FE8(a2, *(_DWORD *)(a1 + 8), (uint64_t)&stru_1021CB170);
}

uint64_t sub_101707918(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101707954()
{
}

void sub_101707968()
{
  operator delete();
}

_QWORD *sub_10170797C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CB1B0;
  return result;
}

void sub_1017079A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CB1B0;
}

void sub_1017079B8(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "cancelOngoingSession", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "cancelOngoingSession", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::cancelOngoingSession()::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_101727CAC(a2, (uint64_t)&stru_1021CB210);
}

uint64_t sub_101707B58(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101707B94()
{
}

void sub_101707BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_101707C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169BA64(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101707C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101707C80()
{
  operator delete();
}

_QWORD *sub_101707C94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB250;
  result[1] = v3;
  return result;
}

uint64_t sub_101707CC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB250;
  a2[1] = v2;
  return result;
}

uint64_t sub_101707CE4(uint64_t a1, qmi::MessageBase *a2)
{
  return sub_1016F6E78(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101707CEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101707D28()
{
}

void sub_101707D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_101707DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169BD54(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101707DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101707E10()
{
  operator delete();
}

_QWORD *sub_101707E24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB2D0;
  result[1] = v3;
  return result;
}

uint64_t sub_101707E58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB2D0;
  a2[1] = v2;
  return result;
}

void sub_101707E74(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016F0220(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101707E7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101707EB8()
{
}

void sub_101707EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101707F40(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101707F4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101707F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101707FDC(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101707FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101707FDC(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017080BC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170807C((uint64_t)a2);
  }
}

void sub_101708060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170807C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x5558u);
  return a1;
}

void sub_1017080A8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017080BC(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x5558u);
  return a1;
}

void sub_1017080E8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101708100()
{
  operator delete();
}

_QWORD *sub_101708114(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB380;
  result[1] = v3;
  return result;
}

uint64_t sub_101708148(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB380;
  a2[1] = v2;
  return result;
}

void sub_101708164(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016F05B8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10170816C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017081A8()
{
}

void sub_1017081B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101708230(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10170823C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101708270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1017082CC(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017082B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017082CC(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_1017083AC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170836C((uint64_t)a2);
  }
}

void sub_101708350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170836C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x85u);
  return a1;
}

void sub_101708398(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1017083AC(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x85u);
  return a1;
}

void sub_1017083D8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017083F0()
{
  operator delete();
}

_QWORD *sub_101708404(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB440;
  result[1] = v3;
  return result;
}

uint64_t sub_101708438(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB440;
  a2[1] = v2;
  return result;
}

void sub_101708454(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016F0D50(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10170845C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101708498()
{
}

void sub_1017084A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101708520(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10170852C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101708560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1017085BC(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1017085A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017085BC(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10170869C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170865C((uint64_t)a2);
  }
}

void sub_101708640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170865C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x86u);
  return a1;
}

void sub_101708688(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10170869C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x86u);
  return a1;
}

void sub_1017086C8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017086E0()
{
  operator delete();
}

_QWORD *sub_1017086F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB500;
  result[1] = v3;
  return result;
}

uint64_t sub_101708728(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB500;
  a2[1] = v2;
  return result;
}

void sub_101708744(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016F1AF4(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10170874C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101708788()
{
}

void sub_101708794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101708810(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10170881C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101708850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1017088AC(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101708898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017088AC(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10170898C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170894C((uint64_t)a2);
  }
}

void sub_101708930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170894C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x9Fu);
  return a1;
}

void sub_101708978(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10170898C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x9Fu);
  return a1;
}

void sub_1017089B8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1017089D0()
{
  operator delete();
}

_QWORD *sub_1017089E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB5C0;
  result[1] = v3;
  return result;
}

uint64_t sub_101708A18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB5C0;
  a2[1] = v2;
  return result;
}

void sub_101708A34(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EE0C4(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101708A3C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101708A78()
{
}

void sub_101708A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101708B00(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101708B0C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101708B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101708B9C(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101708B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101708B9C(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101708C7C(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101708C3C((uint64_t)a2);
  }
}

void sub_101708C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101708C3C(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA1u);
  return a1;
}

void sub_101708C68(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101708C7C(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA1u);
  return a1;
}

void sub_101708CA8(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101708CC0()
{
  operator delete();
}

_QWORD *sub_101708CD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB680;
  result[1] = v3;
  return result;
}

uint64_t sub_101708D08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB680;
  a2[1] = v2;
  return result;
}

uint64_t sub_101708D28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101708D64()
{
}

void sub_101708D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101708DEC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101708DF8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101708E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101708E88(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101708E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101708E88(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101708F68(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101708F28((uint64_t)a2);
  }
}

void sub_101708F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101708F28(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x91u);
  return a1;
}

void sub_101708F54(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101708F68(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x91u);
  return a1;
}

void sub_101708F94(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101708FAC()
{
  operator delete();
}

_QWORD *sub_101708FC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB740;
  result[1] = v3;
  return result;
}

uint64_t sub_101708FF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB740;
  a2[1] = v2;
  return result;
}

void sub_101709010(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EEC68(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_101709018(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709054()
{
}

void sub_101709060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_1017090DC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1017090E8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10170911C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101709178(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101709164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101709178(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101709258(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101709218((uint64_t)a2);
  }
}

void sub_1017091FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101709218(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xACu);
  return a1;
}

void sub_101709244(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101709258(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xACu);
  return a1;
}

void sub_101709284(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170929C()
{
  operator delete();
}

_QWORD *sub_1017092B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB800;
  result[1] = v3;
  return result;
}

uint64_t sub_1017092E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB800;
  a2[1] = v2;
  return result;
}

void sub_101709300(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EF204(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101709308(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709344()
{
}

void sub_101709350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_1017093CC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1017093D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10170940C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101709468(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101709454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101709468(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101709548(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101709508((uint64_t)a2);
  }
}

void sub_1017094EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101709508(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xA7u);
  return a1;
}

void sub_101709534(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101709548(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xA7u);
  return a1;
}

void sub_101709574(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170958C()
{
  operator delete();
}

_QWORD *sub_1017095A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB8C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1017095D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB8C0;
  a2[1] = v2;
  return result;
}

void sub_1017095F0(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EF3C8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1017095F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709634()
{
}

void sub_101709640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_1017096BC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1017096C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1017096FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101709758(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101709744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101709758(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101709838(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017097F8((uint64_t)a2);
  }
}

void sub_1017097DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017097F8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xABu);
  return a1;
}

void sub_101709824(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101709838(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xABu);
  return a1;
}

void sub_101709864(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170987C()
{
  operator delete();
}

_QWORD *sub_101709890(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CB980;
  result[1] = v3;
  return result;
}

uint64_t sub_1017098C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CB980;
  a2[1] = v2;
  return result;
}

void sub_1017098E0(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EF580(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1017098E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709924()
{
}

void sub_101709930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_1017099AC(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_1017099B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1017099EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101709A48(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101709A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101709A48(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101709B28(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101709AE8((uint64_t)a2);
  }
}

void sub_101709ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101709AE8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB1u);
  return a1;
}

void sub_101709B14(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101709B28(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB1u);
  return a1;
}

void sub_101709B54(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101709B6C()
{
  operator delete();
}

_QWORD *sub_101709B80(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBA40;
  result[1] = v3;
  return result;
}

uint64_t sub_101709BB4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBA40;
  a2[1] = v2;
  return result;
}

void sub_101709BD0(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EF858(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101709BD8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709C14()
{
}

void sub_101709C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101709C9C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101709CA8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101709CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_101709D38(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_101709D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101709D38(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_101709E18(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_101709DD8((uint64_t)a2);
  }
}

void sub_101709DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101709DD8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x98u);
  return a1;
}

void sub_101709E04(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_101709E18(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x98u);
  return a1;
}

void sub_101709E44(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_101709E5C()
{
  operator delete();
}

_QWORD *sub_101709E70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBB00;
  result[1] = v3;
  return result;
}

uint64_t sub_101709EA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBB00;
  a2[1] = v2;
  return result;
}

void sub_101709EC0(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EFC4C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_101709EC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101709F04()
{
}

void sub_101709F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_101709F8C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_101709F98(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101709FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10170A028(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10170A014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10170A028(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10170A108(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170A0C8((uint64_t)a2);
  }
}

void sub_10170A0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170A0C8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB8u);
  return a1;
}

void sub_10170A0F4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10170A108(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB8u);
  return a1;
}

void sub_10170A134(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170A14C()
{
  operator delete();
}

_QWORD *sub_10170A160(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBBC0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170A194(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBBC0;
  a2[1] = v2;
  return result;
}

void sub_10170A1B0(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016F169C(*(_DWORD **)(a1 + 8), a2);
}

uint64_t sub_10170A1B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170A1F4()
{
}

void sub_10170A200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10170A27C(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10170A288(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10170A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10170A318(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10170A304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10170A318(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10170A3F8(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170A3B8((uint64_t)a2);
  }
}

void sub_10170A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170A3B8(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xB9u);
  return a1;
}

void sub_10170A3E4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10170A3F8(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xB9u);
  return a1;
}

void sub_10170A424(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170A43C()
{
  operator delete();
}

_QWORD *sub_10170A450(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBC80;
  result[1] = v3;
  return result;
}

uint64_t sub_10170A484(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBC80;
  a2[1] = v2;
  return result;
}

uint64_t sub_10170A4A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170A4E0()
{
}

void sub_10170A4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

uint64_t sub_10170A568(uint64_t a1, uint64_t a2)
{
  return sub_100270E34(a1 + 40, a2 + 40);
}

_QWORD *sub_10170A574(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10170A5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10170A604(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10170A5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10170A604(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_10170A6E4(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10170A6A4((uint64_t)a2);
  }
}

void sub_10170A688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170A6A4(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0xBAu);
  return a1;
}

void sub_10170A6D0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_10170A6E4(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xBAu);
  return a1;
}

void sub_10170A710(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_10170A728()
{
  operator delete();
}

_QWORD *sub_10170A73C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBD40;
  result[1] = v3;
  return result;
}

uint64_t sub_10170A770(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBD40;
  a2[1] = v2;
  return result;
}

void sub_10170A78C(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016EFF48(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10170A794(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170A7D0()
{
}

void sub_10170A7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 3536);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 3536));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_10170A858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_10169C758(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10170A8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10170A8B8()
{
  operator delete();
}

_QWORD *sub_10170A8CC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CBDD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170A900(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CBDD0;
  a2[1] = v2;
  return result;
}

void sub_10170A91C(uint64_t a1, qmi::MessageBase *a2)
{
  sub_1016FF4B8(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10170A924(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170A960()
{
}

void sub_10170A970()
{
  operator delete();
}

_QWORD *sub_10170A984()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CBE50;
  return result;
}

void sub_10170A9A8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CBE50;
}

void sub_10170A9C0(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v2 = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,GNSS meas RX sync pulse,state callback,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 67240192;
    v6[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#tt,GNSS meas RX sync pulse,state callback,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

uint64_t sub_10170AB68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170ABA4()
{
}

void sub_10170ABB4()
{
  operator delete();
}

_QWORD *sub_10170ABC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CBED0;
  return result;
}

void sub_10170ABEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CBED0;
}

void sub_10170AC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    v12 = v3;
    v13 = 2050;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#tt,GNSS meas RX sync pulse,data callback,mach_before,%{public}llu,mach_after,%{public}llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = 134349312;
    v8 = v3;
    v9 = 2050;
    v10 = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#tt,GNSS meas RX sync pulse,data callback,mach_before,%{public}llu,mach_after,%{public}llu", &v7, 22);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::handlePdsGnssMeasurementReport(const pds::gnssMeasurementIndication::Indication &)::(anonymous class)::operator()(GNSS::TimeTransferPulseTime) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

uint64_t sub_10170ADC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170AE00()
{
}

uint64_t sub_10170AE0C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 4)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10170AE9C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10170AF2C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 6)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10170AFC4(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10170B054((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10170B054(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t *v9;

  v8 = a2;
  v6 = 0;
  v7[0] = 0;
  *(_QWORD *)((char *)v7 + 7) = 0;
  v9 = &v8;
  if (sub_10170B0CC((_WORD ***)&v9, a3, (uint64_t)&v6) || !v8)
    return 0;
  (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return 1;
}

uint64_t sub_10170B0CC(_WORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;

  if (a2 >= 2)
  {
    v3 = *a1;
    *(_WORD *)a3 = ***a1;
    v4 = (_DWORD *)(*v3 + 2);
    *v3 = v4;
    if (a2 >= 6)
    {
      *(_DWORD *)(a3 + 4) = *v4;
      v5 = (_DWORD *)(*v3 + 4);
      *v3 = v5;
      if ((a2 - 10) <= 0xFFFFFFF7)
      {
        *(_DWORD *)(a3 + 8) = *v5;
        v6 = (_DWORD *)(*v3 + 4);
        *v3 = v6;
        if ((a2 - 6) >= 8)
        {
          *(_DWORD *)(a3 + 12) = *v6;
          v7 = (_BYTE *)(*v3 + 4);
          *v3 = v7;
          if (a2 != 14)
          {
            *(_BYTE *)(a3 + 16) = *v7;
            v8 = (_BYTE *)(*v3 + 1);
            *v3 = v8;
            if (a2 != 15)
            {
              *(_BYTE *)(a3 + 17) = *v8;
              v9 = (_BYTE *)(*v3 + 1);
              *v3 = v9;
              if (a2 != 16)
              {
                *(_BYTE *)(a3 + 18) = *v9;
                ++*v3;
              }
            }
          }
        }
      }
    }
  }
  return (a2 - 17);
}

void sub_10170B1A8(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  std::string::value_type *v4;
  __n128 v5;
  uint64_t v6;
  std::string::value_type *v7[2];
  __n128 *v8;

  v7[0] = (std::string::value_type *)qmi::MessageBase::findTlvValue(a1, a2);
  v7[1] = v4;
  if (v7[0])
  {
    v5 = 0uLL;
    v6 = 0;
    if (sub_10170B254(v7, (int)v4, (uint64_t *)&v5))
      v7[0] = 0;
    sub_10170B60C(a3, &v5);
    v8 = &v5;
    sub_100259608((void ***)&v8);
    if (!v7[0])
    {
      if (*a3)
      {
        v5.n128_u64[0] = (unint64_t)(a3 + 8);
        sub_100259608((void ***)&v5);
        *a3 = 0;
      }
    }
  }
}

void sub_10170B238(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_100259608((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10170B254(std::string::value_type **a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string *v8;
  char v10;

  v5 = (a2 - 1);
  if (a2 < 1)
    v6 = 0;
  else
    v6 = *(*a1)++;
  sub_10170B2D8(a3, v6);
  v7 = (std::string *)*a3;
  v8 = (std::string *)a3[1];
  while (v7 != v8)
    v5 = sub_10169CC84((int)&v10, a1, v5, v7++);
  return v5;
}

void sub_10170B2D8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_10170B364(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    a1[1] = v7;
  }
}

void sub_10170B364(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1002596A8(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_10170B4C8(a1, &v15);
    sub_100074DB8((uint64_t)&v15);
  }
}

void sub_10170B4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100074DB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10170B4C8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10170B53C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10170B53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_10170B5D8((uint64_t)v12);
  return a6;
}

uint64_t sub_10170B5D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1002597BC(a1);
  return a1;
}

__n128 sub_10170B60C(unsigned __int8 *a1, __n128 *a2)
{
  uint64_t *v4;
  int v5;
  __n128 result;

  v5 = *a1;
  v4 = (uint64_t *)(a1 + 8);
  if (v5)
  {
    sub_100385A64(v4);
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((_QWORD *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((_QWORD *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

uint64_t sub_10170B67C(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  _QWORD v9[2];

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 12)
    {
      v8 = *(unsigned int *)(result + 8);
      v9[0] = *(_QWORD *)result;
      v9[1] = v8;
      (*(void (**)(_QWORD, _QWORD *))(*a3 + 16))(*a3, v9);
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

int *sub_10170B710(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  int *result;
  int v5;
  int v6;
  int v7;

  result = (int *)qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v6 = 0;
    if (v5 < 4 || (v7 = *result, ++result, v6 = v7, v5 != 4))
      result = 0;
    if (!*(_BYTE *)a3)
      *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v6;
    if (!result)
      *(_BYTE *)a3 = 0;
  }
  return result;
}

void sub_10170B76C()
{
  operator delete();
}

_QWORD *sub_10170B780()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CBF60;
  return result;
}

void sub_10170B7A4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CBF60;
}

void sub_10170B7BC(uint64_t a1, uint64_t *a2)
{
  sub_1017284F0(a2, 1, (uint64_t)&stru_1021CBFC0);
}

uint64_t sub_10170B7D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170B80C()
{
}

void sub_10170B818(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((unsigned int *)a2 + 1);
    v6[0] = 68290051;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = "sendSetGnssEngineMonitorConfig";
    v11 = 1026;
    v12 = v4;
    v13 = 1026;
    v14 = v5;
    v15 = 2081;
    v16 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x32u);
  }
}

void sub_10170B93C()
{
  operator delete();
}

_QWORD *sub_10170B950(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC000;
  result[1] = v3;
  return result;
}

uint64_t sub_10170B984(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC000;
  a2[1] = v2;
  return result;
}

void sub_10170B9A0(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 8);
  if (!v2[1])
    sub_10028DF3C();
  sub_101729DF4(a2, *v2, (uint64_t)&stru_1021CC060);
}

uint64_t sub_10170B9D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170BA10()
{
}

void sub_10170BA1C(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)a2;
    v5 = *((unsigned int *)a2 + 1);
    v6[0] = 68290051;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = "sendSetWwanAntTuneL5BlankingControl";
    v11 = 1026;
    v12 = v4;
    v13 = 1026;
    v14 = v5;
    v15 = 2081;
    v16 = qmi::asString(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"errorCode\":%{public}d, \"errorString\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x32u);
  }
}

void sub_10170BB40()
{
  operator delete();
}

__n128 sub_10170BB54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CC0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10170BB8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CC0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10170BBAC(uint64_t a1, uint64_t *a2)
{
  sub_101725A48(a2, 239, *(unsigned __int16 *)(a1 + 8), 1, *(_QWORD *)(a1 + 16), (uint64_t)&stru_1021CC100);
}

uint64_t sub_10170BBCC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170BC08()
{
}

void sub_10170BC14(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)buf = 67240192;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ec,sendSetNmeaConfig,nack,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v5 = *((_DWORD *)a2 + 1);
      v12[0] = 67240192;
      v12[1] = v5;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ec,sendSetNmeaConfig,nack,0x%{public}x", v12, 8);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::initNmeaConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
LABEL_19:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ec,sendSetNmeaConfig,ack", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v12[0]) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,sendSetNmeaConfig,ack", v12, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::initNmeaConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

void sub_10170BEE4()
{
  operator delete();
}

_QWORD *sub_10170BEF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC140;
  result[1] = v3;
  return result;
}

uint64_t sub_10170BF2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC140;
  a2[1] = v2;
  return result;
}

void sub_10170BF48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10170BFEC;
  v3[3] = &unk_1021380A8;
  v3[4] = v2;
  sub_101725D40(a2, 0, (uint64_t)v3);
}

uint64_t sub_10170BFA4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170BFE0()
{
}

void sub_10170BFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#ec,initDpoConfig,nack,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = *(_DWORD *)(a2 + 4);
      v12[0] = 67240192;
      v12[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#ec,initDpoConfig,nack,0x%{public}x", v12, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::initDpoConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)(v3 + 1672), "silo"), "queue"), (uint64_t)"dpo_config", (uint64_t)"config_fail", 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ec,initDpoConfig,ack", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v12[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,initDpoConfig,ack", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::initDpoConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_10170C2FC()
{
  operator delete();
}

_QWORD *sub_10170C310(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC1C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170C344(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC1C0;
  a2[1] = v2;
  return result;
}

void sub_10170C360(uint64_t a1, uint64_t *a2)
{
  sub_1017241CC(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021CC220);
}

uint64_t sub_10170C378(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170C3B4()
{
}

void sub_10170C3C8()
{
  operator delete();
}

_QWORD *sub_10170C3DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC260;
  result[1] = v3;
  return result;
}

uint64_t sub_10170C410(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC260;
  a2[1] = v2;
  return result;
}

void sub_10170C42C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v6 = 107;
  if ((unsigned __int16)sub_100762694() >= 0x100u)
  {
    v6 = 235;
    v4 = 491;
  }
  else
  {
    v4 = 363;
  }
  if (sub_10075F990())
    v6 = v4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10170C51C;
  v5[3] = &unk_1021380A8;
  v5[4] = v3;
  sub_101723C90(a2, &v6, (uint64_t)v5);
}

uint64_t sub_10170C4D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170C510()
{
}

void sub_10170C51C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  uint64_t v19;

  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 67240451;
      v17 = v5;
      v18 = 2081;
      v19 = qmi::asString(v5);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gnssmeas,sendGnssReportingConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = qword_1022A0078;
      v8 = *(unsigned int *)(a2 + 4);
      v13[0] = 67240451;
      v13[1] = v8;
      v14 = 2081;
      v15 = qmi::asString(v8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 17, "#gnssmeas,sendGnssReportingConfig,nack,0x%{public}x,%{private}s", v13, 18);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::sendGnssMeasurementConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)(v3 + 1672), "silo"), "queue"), (uint64_t)"meas_config", (uint64_t)"config_fail", 0);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,sendGnssReportingConfig,ack", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssmeas,sendGnssReportingConfig,ack", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendGnssMeasurementConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_10170C860()
{
  operator delete();
}

_QWORD *sub_10170C874()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CC2E0;
  return result;
}

void sub_10170C898(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CC2E0;
}

void sub_10170C8B0(uint64_t a1, uint64_t *a2)
{
  sub_101729834(a2, 1, (uint64_t)&stru_1021CC340);
}

uint64_t sub_10170C8C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170C900()
{
}

void sub_10170C90C(id a1, const void *a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  uint64_t v17;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)buf = 67240451;
      v15 = v4;
      v16 = 2081;
      v17 = qmi::asString(v4);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "sendXOCalibrationStateConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    v6 = *((unsigned int *)a2 + 1);
    v11[0] = 67240451;
    v11[1] = v6;
    v12 = 2081;
    v13 = qmi::asString(v6);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "sendXOCalibrationStateConfig,nack,0x%{public}x,%{private}s", v11, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::sendXOCalibrationStateConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v7);
    if (v8 == buf)
      return;
LABEL_20:
    free(v8);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sendXOCalibrationStateConfig,ack", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "sendXOCalibrationStateConfig,ack", v11, 2);
    v8 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendXOCalibrationStateConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v10);
    if (v8 != buf)
      goto LABEL_20;
  }
}

void sub_10170CC14()
{
  operator delete();
}

__n128 sub_10170CC28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021CC380;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 sub_10170CC68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CC380;
  result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10170CC90(uint64_t a1, uint64_t *a2)
{
  sub_101729ABC(a2, (float *)(a1 + 8), (uint64_t)&stru_1021CC3E0);
}

uint64_t sub_10170CCA8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170CCE4()
{
}

void sub_10170CCF0(id a1, const void *a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  uint64_t v17;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)buf = 67240451;
      v15 = v4;
      v16 = 2081;
      v17 = qmi::asString(v4);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ec,L1RfConfig,nack,0x%{public}x,%{private}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    v6 = *((unsigned int *)a2 + 1);
    v11[0] = 67240451;
    v11[1] = v6;
    v12 = 2081;
    v13 = qmi::asString(v6);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "#ec,L1RfConfig,nack,0x%{public}x,%{private}s", v11, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::sendL1RfConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v7);
    if (v8 == buf)
      return;
LABEL_20:
    free(v8);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#ec,L1RfConfig,ack", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ec,L1RfConfig,ack", v11, 2);
    v8 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::sendL1RfConfig()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v10);
    if (v8 != buf)
      goto LABEL_20;
  }
}

void sub_10170CFF8()
{
  operator delete();
}

__n128 sub_10170D00C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CC420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10170D044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CC420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10170D064(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  unsigned int v20;
  const char *v21;
  uint8_t *v22;
  float v23;
  float v24;
  float v25;
  unsigned __int8 v26;
  unsigned int v27;
  double v28;
  NSObject *v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  unint64_t v46;
  uint8_t buf[4];
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(double *)(v5 + 504);
  v7 = (unint64_t)((*(double *)(v5 + 76) + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  v36 = 0.0;
  sub_101740728(v4 + 3200, &v36, v6);
  v8 = v36 + 315964800.0;
  v9 = v8 - (double)(int)sub_100512544();
  if (v9 <= 315964800.0)
    v10 = 0;
  else
    v10 = (unint64_t)(v9 * 1000.0);
  if (v9 <= 315964800.0)
    v11 = 0;
  else
    v11 = (unint64_t)(v9 * 1000.0) - v7;
  if (v9 <= 315964800.0)
    v12 = v7;
  else
    v12 = (unint64_t)(v9 * 1000.0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v14 = sub_1001FCBB4();
    *(_DWORD *)buf = 134350080;
    v48 = v6;
    v49 = 2050;
    v50 = v14 - v6;
    v51 = 2050;
    v52 = v7;
    v53 = 2050;
    v54 = v10;
    v55 = 2050;
    v56 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#ec,position assistance time,mct,%{public}.3f,age,%{public}.3f,from cf,%{public}llu,from mct,%{public}llu,diff,%{public}lld", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v30 = qword_1022A0078;
    v31 = sub_1001FCBB4();
    v37 = 134350080;
    v38 = v6;
    v39 = 2050;
    v40 = v31 - v6;
    v41 = 2050;
    v42 = v7;
    v43 = 2050;
    v44 = v10;
    v45 = 2050;
    v46 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 1, "#ec,position assistance time,mct,%{public}.3f,age,%{public}.3f,from cf,%{public}llu,from mct,%{public}llu,diff,%{public}lld", &v37, 52);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 800);
  if (!sub_100CD5700(v4 + 2268))
    goto LABEL_30;
  v16 = sub_1001FCBB4();
  v17 = v16;
  v18 = *(double *)(v4 + 4088);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 816) || v15 < 3)
  {
    if (v15 < 3)
    {
      v20 = v15;
      goto LABEL_43;
    }
    *(double *)(v4 + 4088) = v16;
LABEL_30:
    v20 = v15;
    goto LABEL_31;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v48) = v15;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ec,cappedNonTCPRelabilityToLow,prev,%d", buf, 8u);
  }
  v20 = 2;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v37 = 67109120;
    LODWORD(v38) = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,cappedNonTCPRelabilityToLow,prev,%d", &v37);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
    v20 = 2;
  }
LABEL_43:
  if (*(double *)(v4 + 4088) != -1.0)
  {
    v28 = v17 - v18;
    if (v28 < 1.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v29 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v48 = v28;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#ec,ignoreLowFollowingRecentHighMid,timeSinceLastCpi,%.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
        v37 = 134217984;
        v38 = v28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,ignoreLowFollowingRecentHighMid,timeSinceLastCpi,%.1f", COERCE_DOUBLE(&v37));
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::injectPositionAssistance(const CLGnssPositionAssistanceData &)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      return;
    }
  }
LABEL_31:
  if (v20 >= 5)
    v26 = 0;
  else
    v26 = v20;
  v27 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 804);
  if (v27 >= 5)
    LOBYTE(v27) = 0;
  v23 = *(double *)(v5 + 28);
  v24 = *(double *)(v5 + 20);
  v25 = *(double *)(v5 + 36);
  sub_101724F54(a2, v12, v26, v27, 7, 9, 1, 1, *(double *)(v5 + 4), *(double *)(v5 + 12), v23, v24, v25, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_1021CC480);
  sub_1017DDED4(v4, v5);
  if (*(_BYTE *)(v4 + 1216))
  {
    if ((*(_DWORD *)(v4 + 208) & 0x80000000) != 0)
    {
      *(_DWORD *)(v4 + 1136) = v20;
      *(_QWORD *)(v4 + 1144) = *(_QWORD *)(v5 + 20);
      *(_DWORD *)(v4 + 1152) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 820);
      *(_OWORD *)(v4 + 1200) = *(_OWORD *)(v5 + 4);
    }
    *(_BYTE *)(v4 + 1216) = 0;
  }
  if (*(_DWORD *)(v5 + 96) == 4)
    *(_BYTE *)(v4 + 1156) = 1;
}

uint64_t sub_10170D6DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170D718()
{
}

void sub_10170D724(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectPositionDataError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10170D818()
{
  operator delete();
}

__n128 sub_10170D82C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CC4C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10170D864(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CC4C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10170D884(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;

  sub_101722CB4(a2, (unint64_t)((*(double *)(a1 + 8) + kCFAbsoluteTimeIntervalSince1970) * 1000.0), *(double *)(a1 + 16), 1, 0, (uint64_t)&stru_1021CC520);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(double *)(a1 + 16);
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2050;
    v10 = v4;
    v11 = 1026;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#injectTimeAssistance\", \"time\":\"%{public}f\", \"uncMs\":%{public}u}", (uint8_t *)v6, 0x22u);
  }
}

uint64_t sub_10170D9C4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170DA00()
{
}

void sub_10170DA0C(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,injectTimeAssistanceError\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10170DB00()
{
  operator delete();
}

_BYTE *sub_10170DB14(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CC560;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_10170DB4C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CC560;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_10170DB6C(uint64_t a1, uint64_t *a2)
{
  int v3;
  _QWORD v4[4];
  char v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10170DC10;
  v4[3] = &unk_1021C7308;
  v5 = v3;
  sub_101723F34(a2, v3, (uint64_t)v4);
}

uint64_t sub_10170DBC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170DC04()
{
}

void sub_10170DC10(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v14;
  int v15;
  int v16;
  double v17;
  uint8_t *v18;
  int v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  uint64_t v30;

  if (*(_DWORD *)(a2 + 4))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v5 = *(unsigned __int8 *)(a1 + 32);
      v6 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 67240707;
      v26 = v5;
      v27 = 1026;
      v28 = v6;
      v29 = 2081;
      v30 = qmi::asString(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#ec,multiband mode,%{public}d,nack,0x%{public}x,%{private}s", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v7 = qword_1022A0078;
      v8 = *(unsigned __int8 *)(a1 + 32);
      v9 = *(_DWORD *)(a2 + 4);
      v10 = qmi::asString(v9);
      v19 = 67240707;
      v20 = v8;
      v21 = 1026;
      v22 = v9;
      v23 = 2081;
      v24 = v10;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 16, "#ec,multiband mode,%{public}d,nack,0x%{public}x,%{private}s", &v19, 24);
      v13 = v12;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::setRfBandEnable(BOOL, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
LABEL_19:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)buf = 67240192;
      v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ec,multiband mode,%{public}d,ack", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v16 = *(unsigned __int8 *)(a1 + 32);
      v19 = 67240192;
      v20 = v16;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,multiband mode,%{public}d,ack", &v19, 8);
      v13 = v18;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::setRfBandEnable(BOOL, BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v17);
      goto LABEL_19;
    }
  }
}

void sub_10170DF58()
{
  operator delete();
}

_QWORD *sub_10170DF6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC5E0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170DFA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC5E0;
  a2[1] = v2;
  return result;
}

void sub_10170DFBC(uint64_t a1, uint64_t *a2)
{
  sub_1017281E4(a2, 0, **(_QWORD **)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16), (uint64_t)&stru_1021CC640, *(float *)(*(_QWORD *)(a1 + 8) + 8), *(float *)(*(_QWORD *)(a1 + 8) + 12));
}

uint64_t sub_10170DFE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170E01C()
{
}

void sub_10170E030()
{
  operator delete();
}

_QWORD *sub_10170E044(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC680;
  result[1] = v3;
  return result;
}

uint64_t sub_10170E078(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC680;
  a2[1] = v2;
  return result;
}

void sub_10170E094(uint64_t a1, uint64_t *a2)
{
  double *v2;
  double v3;
  double v4;
  float v5;
  float v6;
  float v7;

  v2 = *(double **)(a1 + 8);
  v3 = v2[4];
  v4 = v2[3];
  v5 = sqrt(v3 * v3 + v4 * v4) / 2.45;
  *(float *)&v4 = v4;
  v6 = v3;
  v7 = v2[5];
  sub_101724F54(a2, (unint64_t)((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), 3, 0, 7, 9, 0, 0, v2[1], v2[2], 0.0, v5, 3000.0, *(float *)&v4, v6, v7, 0x5Fu, 0x44u, (uint64_t)&stru_1021CC6E0);
}

uint64_t sub_10170E148(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170E184()
{
}

void sub_10170E190(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = *((_DWORD *)a2 + 1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#mmp injectMapMatchedPosition\", \"response\":%{public}d}", (uint8_t *)v5, 0x18u);
  }
}

void sub_10170E27C()
{
  operator delete();
}

_QWORD *sub_10170E290(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC720;
  result[1] = v3;
  return result;
}

uint64_t sub_10170E2C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC720;
  a2[1] = v2;
  return result;
}

void sub_10170E2E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  sub_101726654(a2, *(_DWORD *)v2, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), *(unsigned __int16 *)(v2 + 16), *(unsigned __int16 *)(v2 + 18), (uint64_t)&stru_1021CC780, *(float *)(v2 + 12));
}

uint64_t sub_10170E30C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170E348()
{
}

void sub_10170E35C()
{
  operator delete();
}

_BYTE *sub_10170E370(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CC7C0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_10170E3A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CC7C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_10170E3C8(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  int v4;
  float v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ec,airborne,enter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,airborne,enter", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v4 = 4;
    v5 = 100.0;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ec,airborne,exit", buf, 2u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,airborne,exit", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v4 = 0;
  }
  sub_101726654(a2, 0, v4, 0, 0, 0xFFFF, (uint64_t)&stru_1021CC820, v5);
}

uint64_t sub_10170E6C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170E704()
{
}

void sub_10170E710(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)buf = 67240192;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ec,airborne,nack,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v5 = *((_DWORD *)a2 + 1);
      LODWORD(v9[0]) = 67240192;
      HIDWORD(v9[0]) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,airborne,nack,0x%{public}x", v9, 8, v9[0]);
LABEL_19:
      v8 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::feedAirborneActivity(BOOL)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ec,airborne,ack", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ec,airborne,ack", v9, 2, v9[0]);
      goto LABEL_19;
    }
  }
}

void sub_10170E998()
{
  operator delete();
}

_QWORD *sub_10170E9AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC860;
  result[1] = v3;
  return result;
}

uint64_t sub_10170E9E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC860;
  a2[1] = v2;
  return result;
}

float sub_10170E9FC(uint64_t a1, uint64_t *a2)
{
  double *v2;
  uint64_t v3;
  double v4;
  float v5;
  float v6;
  float result;

  v2 = *(double **)(a1 + 8);
  v3 = vcvtad_u64_f64((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0);
  v4 = 0.001;
  if (v2[3] * 1.95996398 >= 0.001)
    v4 = v2[3] * 1.95996398;
  v5 = v4;
  v6 = v2[2];
  sub_101724974(a2, 0, v3, (uint64_t)&stru_1021CC8C0, v6, v5);
  return result;
}

uint64_t sub_10170EA60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170EA9C()
{
}

void sub_10170EAB0()
{
  operator delete();
}

_QWORD *sub_10170EAC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC900;
  result[1] = v3;
  return result;
}

uint64_t sub_10170EAF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC900;
  a2[1] = v2;
  return result;
}

float sub_10170EB14(uint64_t a1, uint64_t *a2)
{
  double *v2;
  float v3;
  float v4;
  float result;

  v2 = *(double **)(a1 + 8);
  v3 = v2[3];
  v4 = v2[4];
  sub_101724C48(a2, 0, vcvtad_u64_f64((*v2 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), vcvtad_u64_f64(v2[2] * 1000.0), (uint64_t)&stru_1021CC960, v3, v4);
  return result;
}

uint64_t sub_10170EB68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170EBA4()
{
}

void sub_10170EBB8()
{
  operator delete();
}

_QWORD *sub_10170EBCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CC9A0;
  result[1] = v3;
  return result;
}

uint64_t sub_10170EC00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CC9A0;
  a2[1] = v2;
  return result;
}

void sub_10170EC1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  _QWORD v5[6];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = objc_msgSend(objc_msgSend(*(id *)(v3 + 1672), "silo"), "queue");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10170ECD8;
  v5[3] = &unk_1021CCA08;
  v5[4] = v4;
  v5[5] = v3;
  sub_1017234E8(a2, 1, (uint64_t)v5);
}

uint64_t sub_10170EC90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170ECCC()
{
}

void sub_10170ECD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v4;
  int v5;
  NSObject *v6;
  _QWORD v7[6];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a2 + 4))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt failed to enter time transfer\", \"error\":%{public}d}", buf, 0x18u);
    }
    sub_10023A554(v2, 0);
  }
  else
  {
    v6 = *(NSObject **)(v2 + 2032);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10170EE28;
    v7[3] = &unk_102131360;
    v7[4] = *(_QWORD *)(a1 + 32);
    v7[5] = v2;
    dispatch_async(v6, v7);
  }
}

void sub_10170EE28(uint64_t a1)
{
  uint64_t v2;
  const void *Controller;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _QWORD block[5];
  _WORD v9[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 40);
  Controller = (const void *)TelephonyBasebandCreateController(kCFAllocatorDefault);
  sub_1016F5840((const void **)(v2 + 2024), Controller);
  if (!*(_QWORD *)(v2 + 2024))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, Could not get reference to baseband!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, Could not get reference to baseband!", v9, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10170F020;
    block[3] = &unk_10212ECA0;
    block[4] = v2;
    dispatch_async(v5, block);
  }
}

void sub_10170F020(uint64_t a1)
{
  sub_10023A554(*(_QWORD *)(a1 + 32), 0);
}

void sub_10170F030()
{
  operator delete();
}

_QWORD *sub_10170F044()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CCA48;
  return result;
}

void sub_10170F068(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CCA48;
}

void sub_10170F080(uint64_t a1, uint64_t *a2)
{
  sub_1017234E8(a2, 0, (uint64_t)&stru_1021CCAA8);
}

uint64_t sub_10170F094(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10170F0D0()
{
}

void sub_10170F0DC(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt failed to exit timetransfer\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10170F1D0()
{
  operator delete();
}

_QWORD *sub_10170F1E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CCAE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10170F218(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CCAE8;
  a2[1] = v2;
  return result;
}

void sub_10170F234(uint64_t a1, uint64_t *a2)
{
  sub_101723770(a2, *(_QWORD *)(a1 + 8), (uint64_t)&stru_1021CCB48);
}

uint64_t sub_10170F24C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170F288()
{
}

void sub_10170F294(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, #tt, failed to send client pulse time\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_10170F388()
{
  operator delete();
}

__n128 sub_10170F39C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021CCB88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10170F3DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CCB88;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10170F404(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(double *)(v4 + 76);
  v6 = *(double *)(v4 + 536);
  v7 = **(double **)(a1 + 24);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v8 = v6 + v7;
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = (int)**(double **)(a1 + 24);
    *(_DWORD *)buf = 68291075;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 1040;
    v26 = 800;
    v27 = 2097;
    v28 = v10;
    v29 = 1026;
    v30 = 1;
    v31 = 1026;
    v32 = 9;
    v33 = 1026;
    v34 = 2;
    v35 = 1026;
    v36 = 2;
    v37 = 1026;
    v38 = v11;
    v39 = 1025;
    v40 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnss feeding DEM assistance location\", \"location\":%{private, location:CLClientLocation}.*P, \"posSrc\":%{public}d, \"altSrc\":%{public}d, \"altLinkage\":%{public}d, \"altUncCov\":%{public}d, \"undulation parameter\":%{public}d, \"ellipsoidal altitide\":%{private}d}", buf, 0x46u);
  }
  v12 = *(double **)(a1 + 16);
  v13 = *(double *)((char *)v12 + 4);
  v14 = *(double *)((char *)v12 + 12);
  v15 = *(double *)((char *)v12 + 20);
  v16 = v12[68];
  v17 = **(_DWORD **)(a1 + 8);
  if (v17 >= 5)
    LOBYTE(v17) = 0;
  v18 = v16;
  v19 = v15;
  v20 = v8;
  sub_101724F54(a2, (unint64_t)((v5 + kCFAbsoluteTimeIntervalSince1970) * 1000.0), 0, v17, 1, 9, 2, 2, v13, v14, v20, v19, v18, -1.0, -1.0, 0.0, 0x44u, 0x44u, (uint64_t)&stru_1021CCBE8);
}

uint64_t sub_10170F608(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10170F644()
{
}

uint64_t sub_10170F654(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10170F6E4((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10170F6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = a2;
  __p = 0;
  v8 = 0;
  if (sub_10170F78C(&v10, a3, (unint64_t *)&__p))
  {
    v5 = 0;
    v10 = 0;
  }
  else if (v10)
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_10170F76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170F78C(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  BOOL v19;

  v3 = a2;
  if ((int)a2 >= 1)
  {
    do
    {
      v7 = (_BYTE *)a3[1];
      v6 = a3[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = *a3;
        v10 = &v7[-*a3];
        v11 = (unint64_t)(v10 + 1);
        if ((uint64_t)(v10 + 1) < 0)
          sub_100259694();
        v12 = v6 - v9;
        if (2 * v12 > v11)
          v11 = 2 * v12;
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v14 = (char *)operator new(v13);
        else
          v14 = 0;
        v15 = &v10[(_QWORD)v14];
        v16 = &v10[(_QWORD)v14];
        *v16 = 0;
        v8 = v16 + 1;
        if (v7 != (_BYTE *)v9)
        {
          v17 = &v7[~v9];
          do
          {
            v18 = *--v7;
            (v17--)[(_QWORD)v14] = v18;
          }
          while (v7 != (_BYTE *)v9);
          v7 = (_BYTE *)*a3;
          v15 = v14;
        }
        *a3 = (unint64_t)v15;
        a3[1] = (unint64_t)v8;
        a3[2] = (unint64_t)&v14[v13];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = 0;
        v8 = v7 + 1;
      }
      a3[1] = (unint64_t)v8;
      *(v8 - 1) = *(_BYTE *)(*a1)++;
      v19 = __OFSUB__((_DWORD)v3, 1);
      LODWORD(v3) = v3 - 1;
    }
    while (!(((int)v3 < 0) ^ v19 | ((_DWORD)v3 == 0)));
    return 0;
  }
  return v3;
}

uint64_t sub_10170F8B8(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10170F948((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10170F948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE v7[8];
  void *__p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type **v12;

  v10 = 0;
  v11 = a2;
  v7[0] = 0;
  __p = 0;
  v9 = 0;
  v12 = (std::string::value_type **)&v11;
  if (sub_10170F9FC(&v12, a3, (uint64_t)v7))
  {
    v5 = 0;
    v11 = 0;
  }
  else if (v11)
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  return v5;
}

void sub_10170F9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170F9FC(std::string::value_type ***a1, int a2, uint64_t a3)
{
  std::string::value_type **v4;
  BOOL v5;
  int v6;
  char v8;

  v4 = *a1;
  v5 = __OFSUB__(a2, 1);
  v6 = a2 - 1;
  if (v6 < 0 == v5)
    *(_BYTE *)a3 = *(*v4)++;
  return sub_10169CC84((int)&v8, v4, v6, (std::string *)(a3 + 8));
}

uint64_t sub_10170FA4C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
    else
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
  }
  return result;
}

uint64_t sub_10170FADC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 < 2)
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
  }
  return result;
}

uint64_t sub_10170FB6C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_10170FBFC((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_10170FBFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v7;
  char v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v11 = 0;
  v12 = a2;
  v7 = 0;
  v8 = 0;
  __p = 0;
  v10 = 0;
  v13 = &v12;
  if (sub_10170FCB4((_DWORD ***)&v13, a3, (uint64_t)&v7))
  {
    v5 = 0;
    v12 = 0;
  }
  else if (v12)
  {
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_10170FC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10170FCB4(_DWORD ***a1, int a2, uint64_t a3)
{
  _DWORD **v3;
  _BYTE *v4;

  v3 = *a1;
  if (a2 >= 4)
  {
    *(_DWORD *)a3 = **v3;
    v4 = *v3 + 1;
    *v3 = v4;
    if (a2 != 4)
    {
      *(_BYTE *)(a3 + 4) = *v4;
      *v3 = (_DWORD *)((char *)*v3 + 1);
    }
  }
  return sub_10170FD00(v3, a2 - 5, (uint64_t *)(a3 + 8));
}

uint64_t sub_10170FD00(_DWORD **a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v9;

  v9 = a1;
  v4 = (a2 - 1);
  if (a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)*a1;
    *a1 = (_DWORD *)((char *)*a1 + 1);
  }
  sub_10170FD80((uint64_t)a3, v5);
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    v4 = sub_10170FDBC(&v9, v4, v6);
    v6 += 20;
  }
  return v4;
}

void sub_10170FD80(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10170FF20((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

uint64_t sub_10170FDBC(_DWORD ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  _BYTE *v4;
  int v5;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _DWORD *v12;
  _WORD *v13;
  _WORD *v14;

  if (a2 <= 3)
  {
    v5 = a2 - 5;
  }
  else
  {
    v3 = *a1;
    *(_DWORD *)a3 = ***a1;
    v4 = (_BYTE *)(*v3 + 4);
    *v3 = v4;
    if (a2 == 4)
    {
      v5 = -1;
    }
    else
    {
      *(_BYTE *)(a3 + 4) = *v4;
      v7 = (_BYTE *)(*v3 + 1);
      *v3 = v7;
      if (a2 < 6)
      {
        v5 = 0;
      }
      else
      {
        v5 = a2 - 5;
        *(_BYTE *)(a3 + 5) = *v7;
        v8 = (_BYTE *)(*v3 + 1);
        *v3 = v8;
        if (a2 != 6)
        {
          *(_BYTE *)(a3 + 6) = *v8;
          v9 = (_BYTE *)(*v3 + 1);
          *v3 = v9;
          if (a2 != 7)
          {
            *(_BYTE *)(a3 + 7) = *v9;
            v10 = (_BYTE *)(*v3 + 1);
            *v3 = v10;
            if (a2 == 8)
            {
              v5 = 3;
            }
            else
            {
              *(_BYTE *)(a3 + 8) = *v10;
              v11 = (_BYTE *)(*v3 + 1);
              *v3 = v11;
              if (a2 == 9)
              {
                v5 = 4;
              }
              else
              {
                *(_BYTE *)(a3 + 9) = *v11;
                v12 = (_DWORD *)(*v3 + 1);
                *v3 = v12;
                if ((a2 - 14) <= 0xFFFFFFFA)
                {
                  *(_DWORD *)(a3 + 12) = *v12;
                  v13 = (_WORD *)(*v3 + 4);
                  *v3 = v13;
                  if ((a2 - 10) >= 6)
                  {
                    *(_WORD *)(a3 + 16) = *v13;
                    v14 = (_WORD *)(*v3 + 2);
                    *v3 = v14;
                    if (((a2 - 10) & 0xFFFFFFFC) != 4)
                    {
                      *(_WORD *)(a3 + 18) = *v14;
                      *v3 += 2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (v5 - 13);
}

void sub_10170FF20(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[20 * a2];
      do
      {
        *((_WORD *)v7 + 4) = 0;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 12) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      sub_100259694();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1002F5388(v4, v11);
    else
      v12 = 0;
    v14 = &v12[20 * v8];
    v15 = &v14[20 * a2];
    v16 = v14;
    do
    {
      *((_WORD *)v16 + 4) = 0;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 12) = 0;
      v16 += 20;
    }
    while (v16 != v15);
    v17 = &v12[20 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t sub_101710080(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_101710110((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_101710110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;

  v10 = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v10;
  if (sub_10171018C((_BYTE ***)&v11, a3, (uint64_t)&v6) || !v10)
    return 0;
  (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return 1;
}

uint64_t sub_10171018C(_BYTE ***a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _WORD *v6;
  _DWORD *v7;
  uint64_t result;

  if (a2 < 1)
    return 0xFFFFFFFFLL;
  v3 = *a1;
  *(_BYTE *)a3 = ***a1;
  v4 = (*v3)++;
  if (a2 == 1)
    return 0xFFFFFFFFLL;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(v4 + 1);
  v5 = (_DWORD *)(v4 + 2);
  *v3 = v5;
  if ((a2 - 6) > 0xFFFFFFFA)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a3 + 4) = *v5;
  v6 = (_WORD *)(*v3 + 4);
  *v3 = v6;
  if ((a2 - 8) > 0xFFFFFFF9)
    return 0xFFFFFFFFLL;
  *(_WORD *)(a3 + 8) = *v6;
  v7 = (_DWORD *)(*v3 + 2);
  *v3 = v7;
  if ((a2 - 12) > 0xFFFFFFF9)
    return 0xFFFFFFFFLL;
  result = 0;
  *(_DWORD *)(a3 + 12) = *v7;
  *v3 += (a2 - 12) + 4;
  return result;
}

uint64_t sub_10171023C(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if ((sub_1017102CC((uint64_t)a1, result, v7, a3) & 1) != 0)
      return 1;
    else
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t sub_1017102CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;

  v8 = 0uLL;
  v6 = a2;
  v7 = &v6;
  if (sub_101710340((_DWORD ***)&v7, a3, &v8) || !v6)
    return 0;
  (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return 1;
}

uint64_t sub_101710340(_DWORD ***a1, int a2, _DWORD *a3)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t result;

  if (a2 < 4)
    return (a2 - 16);
  v3 = *a1;
  *a3 = ***a1;
  v4 = (_DWORD *)(*v3 + 4);
  *v3 = v4;
  if (a2 < 8)
    return (a2 - 16);
  a3[1] = *v4;
  v5 = (_DWORD *)(*v3 + 4);
  *v3 = v5;
  if ((a2 - 12) >= 0xFFFFFFF8)
    return (a2 - 16);
  a3[2] = *v5;
  v6 = (_DWORD *)(*v3 + 4);
  *v3 = v6;
  result = (a2 - 16);
  if ((a2 - 16) <= 0xFFFFFFF7)
  {
    a3[3] = *v6;
    *v3 += 4;
  }
  return result;
}

uint64_t sub_1017103CC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    if (v7 < 4)
    {
      return qmi::MessageBase::sParsingErrorHandler(*(unsigned __int16 *)a1, a2, result, v7);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)a3 + 16))();
      return 1;
    }
  }
  return result;
}

void sub_101710460()
{
  operator delete();
}

_QWORD *sub_101710474()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CCC28;
  return result;
}

void sub_101710498(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CCC28;
}

void sub_1017104B0(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  v2 = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,sim mode pulse,state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6[0] = 67240192;
    v6[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#tt,sim mode pulse,state,%{public}d", v6, 8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

uint64_t sub_101710658(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101710694()
{
}

void sub_1017106A4()
{
  operator delete();
}

_QWORD *sub_1017106B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CCCA8;
  return result;
}

void sub_1017106DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CCCA8;
}

void sub_1017106F4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)buf = 134349312;
    v15 = v4;
    v16 = 2050;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tt,sim mode pulse,data,mach_before,%{public}llu,mach_after,%{public}llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    v10 = 134349312;
    v11 = v6;
    v12 = 2050;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#tt,sim mode pulse,data,mach_before,%{public}llu,mach_after,%{public}llu", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::handlePositionData(qmi::pds::SessionFixStatus, const GNSS::PerEpochData &, uint8_t)::(anonymous class)::operator()(const GNSS::TimeTransferPulseTime &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

uint64_t sub_1017108BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017108F8()
{
}

void sub_101710908()
{
  operator delete();
}

__n128 sub_10171091C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CCD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101710954(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CCD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101710974(uint64_t a1, uint64_t *a2)
{
  sub_101723228(a2, **(_DWORD **)(a1 + 8), **(_DWORD **)(a1 + 16), **(_DWORD **)(a1 + 16), (uint64_t)&stru_1021CCD88);
}

uint64_t sub_101710998(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1017109D4()
{
}

void sub_1017109E0(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_DWORD *)a2 + 1);
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 1026;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning, time sync failed to sync time\", \"error\":%{public}d}", (uint8_t *)v5, 0x18u);
    }
  }
}

void sub_101710AD4()
{
  operator delete();
}

_QWORD *sub_101710AE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CCDC8;
  return result;
}

void sub_101710B0C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CCDC8;
}

void sub_101710B24(uint64_t a1, uint64_t *a2)
{
  sub_10172276C(a2, 0, (uint64_t)&stru_1021CCE28);
}

uint64_t sub_101710B38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101710B74()
{
}

void sub_101710B88()
{
  operator delete();
}

_QWORD *sub_101710B9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CCE68;
  result[1] = v3;
  return result;
}

uint64_t sub_101710BD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CCE68;
  a2[1] = v2;
  return result;
}

void sub_101710BEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101710C90;
  v3[3] = &unk_1021380A8;
  v3[4] = v2;
  sub_101721760(a2, (uint64_t)v3);
}

uint64_t sub_101710C48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101710C84()
{
}

void sub_101710C90(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *((_DWORD *)a2 + 1);
  if (*(_BYTE *)(v2 + 2016))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
    if (v3)
    {
      sub_1016FB2D4(v2, "locationd,concurrencyCheckResponseFailed");
      return;
    }
    LOBYTE(v8) = 0;
    sub_101710E84(a2, 1u, (uint64_t)&v8);
    if (!(_BYTE)v8)
    {
      v7 = "locationd,concurrencyCheckParseError";
LABEL_17:
      sub_1016FB2D4(v2, v7);
      return;
    }
    v7 = "locationd,concurrencyCheckStateError";
    if (!BYTE1(v8) || BYTE2(v8) != 2)
      goto LABEL_17;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,spurious,received after we stopped\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
  }
}

unsigned __int8 *sub_101710E84(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int8 *result;
  int v5;
  __int16 v6;
  __int16 v7;
  unsigned __int8 *v8;
  __int16 v9;

  result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 1)
  {
    v7 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v6 = *result;
  if (v5 == 1)
  {
    v7 = 0;
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v7 = result[1];
  if (v5 != 2)
    goto LABEL_8;
  v8 = result + 2;
LABEL_9:
  v9 = v6 | (v7 << 8);
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_WORD *)(a3 + 1) = v9;
  if (!v8)
    *(_BYTE *)a3 = 0;
  return result;
}

void sub_101710F0C()
{
  operator delete();
}

_QWORD *sub_101710F20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CCEE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101710F54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CCEE8;
  a2[1] = v2;
  return result;
}

void sub_101710F70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101711014;
  v3[3] = &unk_1021380A8;
  v3[4] = v2;
  sub_101721760(a2, (uint64_t)v3);
}

uint64_t sub_101710FCC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101711008()
{
}

void sub_101711014(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1026;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#trkstate,response\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  *(_DWORD *)(v3 + 2260) = 0;
  if (*(_BYTE *)(v3 + 2016))
  {
    if (v4)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 68289282;
        v9 = 0;
        v10 = 2082;
        v11 = "";
        v12 = 1026;
        v13 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,error response\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
      }
      sub_1016FE96C(v3, "locationd,errorResponse");
    }
    else
    {
      LOBYTE(v8) = 0;
      sub_101710E84(a2, 1u, (uint64_t)&v8);
      if ((_BYTE)v8)
        sub_1016FEB6C(v3, BYTE1(v8), BYTE2(v8));
      else
        sub_1016FE96C(v3, "locationd,decodeFailed");
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1026;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#trkstate,spurious,received after we stopped\", \"eCode\":%{public}d}", (uint8_t *)&v8, 0x18u);
    }
  }
}

void sub_101711298()
{
  operator delete();
}

_QWORD *sub_1017112AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CCF68;
  result[1] = v3;
  return result;
}

uint64_t sub_1017112E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CCF68;
  a2[1] = v2;
  return result;
}

void sub_1017112FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 2016) && !sub_100CD5700(v3 + 2268))
    sub_1016E4AC4(v3);
  sub_1017221A4(a2, (uint64_t)&stru_1021CCFC8);
  if (!*(_BYTE *)(v3 + 2016) && !sub_100CD5700(v3 + 2268))
    sub_1016E5000(v3);
}

uint64_t sub_10171136C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1017113A8()
{
}

void sub_1017113B4(id a1, const void *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v4 = *((_DWORD *)a2 + 1);
      *(_DWORD *)buf = 67240192;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#ee,force BB to request,nack,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      v5 = *((_DWORD *)a2 + 1);
      v12[0] = 67240192;
      v12[1] = v5;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ee,force BB to request,nack,%{public}d", v12, 8);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaController::forceBbToRequestXtra()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v6);
LABEL_19:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ee,force BB to request,ack", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
      LOWORD(v12[0]) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ee,force BB to request,ack", v12, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaController::forceBbToRequestXtra()::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

uint64_t *sub_101711680(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t *result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t *)qmi::MessageBase::findTlvValue(a1, a2);
  if (result)
  {
    v6 = 0;
    if (v5 < 8 || (v7 = *result, ++result, v6 = v7, v5 != 8))
      result = 0;
    if (!*(_BYTE *)a3)
      *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v6;
    if (!result)
      *(_BYTE *)a3 = 0;
  }
  return result;
}

unsigned __int8 *sub_1017116D8(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int8 *result;
  int v5;
  int v6;
  int v7;

  result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 1)
  {
    v6 = 0;
  }
  else
  {
    v7 = *result++;
    v6 = v7;
    if (v5 == 1)
      goto LABEL_7;
  }
  result = 0;
LABEL_7:
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v6;
  if (!result)
    *(_BYTE *)a3 = 0;
  return result;
}

unsigned __int8 *sub_101711738(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  unsigned __int8 *result;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;

  result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 1)
  {
    v7 = 0;
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *result;
  if (v5 == 1)
  {
    v7 = 0;
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = result[1];
  if (v5 == 2)
  {
    v7 = 0;
  }
  else
  {
    v7 = result[2];
    if (v5 == 3)
    {
      v9 = 1;
      goto LABEL_8;
    }
  }
LABEL_7:
  v9 = 0;
LABEL_8:
  v10 = *a3;
  *(_QWORD *)(a3 + 4) = v6 | (unint64_t)(v8 << 32);
  *((_DWORD *)a3 + 3) = v7;
  if (!v10 || (v9 & 1) == 0)
    *a3 = v9;
  return result;
}

int *sub_1017117D0(qmi::MessageBase *a1, unsigned __int16 a2, char *a3)
{
  int *result;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;

  result = (int *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  v6 = 0;
  if (v5 < 4)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v7 = *result;
  if (v5 < 8)
  {
LABEL_8:
    v8 = 0;
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v8 = result[1];
  if ((v5 - 12) > 0xFFFFFFF7)
    goto LABEL_9;
  v6 = result[2];
  if (v5 != 12)
    goto LABEL_9;
  v9 = 1;
LABEL_10:
  v10 = *a3;
  *((_DWORD *)a3 + 1) = v7;
  *((_DWORD *)a3 + 2) = v8;
  *((_DWORD *)a3 + 3) = v6;
  if (!v10 || (v9 & 1) == 0)
    *a3 = v9;
  return result;
}

__int16 *sub_101711850(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  __int16 *result;
  int v5;
  __int16 v6;
  __int16 v7;

  result = (__int16 *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 2)
  {
    v6 = 0;
  }
  else
  {
    v7 = *result++;
    v6 = v7;
    if (v5 == 2)
      goto LABEL_7;
  }
  result = 0;
LABEL_7:
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_WORD *)(a3 + 2) = v6;
  if (!result)
    *(_BYTE *)a3 = 0;
  return result;
}

void sub_1017118B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v27, v28, "assert because of Control plane", "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021C9CB0);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"assert because of Control plane\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101711A88: call analysis failed (funcsize=67)"

#error "101711BD4: call analysis failed (funcsize=67)"

#error "101711D20: call analysis failed (funcsize=67)"

#error "101711E6C: call analysis failed (funcsize=67)"

#error "101711FB8: call analysis failed (funcsize=67)"

#error "101712104: call analysis failed (funcsize=67)"

#error "101712250: call analysis failed (funcsize=67)"

#error "101712464: call analysis failed (funcsize=79)"

#error "1017125E8: call analysis failed (funcsize=79)"

#error "10171276C: call analysis failed (funcsize=79)"

void sub_1017127B8(uint64_t a1)
{
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*(void **)(a1 + 1152));
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
}

void sub_101712804()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1017128A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1017128B8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_101712944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_10171295C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CD1054;
      v1[3] = unk_101CD1064;
      v1[4] = xmmword_101CD1074;
      v1[0] = xmmword_101CD1034;
      v1[1] = unk_101CD1044;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101712A30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_101712A48(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(sub_100270E34(a1, a2) + 24))
  {
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101712D30(qword_1022A0070 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLLTEBand13Handler.mm", 22, "CLLTEBand13Handler");
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CCFF8);
LABEL_3:
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssInterference, CLLTEBand13Handler construction", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CCFF8);
    v8[0] = 0;
    LODWORD(v7) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GnssInterference, CLLTEBand13Handler construction", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLLTEBand13Handler::CLLTEBand13Handler(CLLTEBand13HandlerCallBack)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_101712C1C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101712C68(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_1001D56DC(a1, 0, 1);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t sub_101712CC4(uint64_t a1)
{
  return sub_1001D56DC(a1, 0, 1);
}

uint64_t sub_101712CD4(uint64_t a1, float a2)
{
  char v2;

  v2 = (float)(unk_1023008C8 + *(float *)&dword_1023008C4) >= a2
    && (float)(*(float *)&dword_1023008C0 - unk_1023008C8) <= a2;
  return sub_1001D56DC(a1, v2, 0);
}

void sub_101712D04(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101712D30(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_1021CCFF8);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CCFF8);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CCFF8);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

unsigned int sub_101712EEC(unint64_t *a1)
{
  return vcvtmd_u64_f64((double)*a1 / 1000000000.0 / 604800.0);
}

double sub_101712F14(unint64_t *a1)
{
  return fmod((double)*a1 / 1000000000.0, 604800.0);
}

_QWORD *sub_101712F34(_QWORD *a1, NSObject **a2, void (*a3)(unsigned int, const char *))
{
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  dispatch_object_t object;
  __int128 v11;

  *a1 = 0;
  a1[1] = 0;
  Ari::LogConfig((Ari *)0x1FF, sub_10171300C, a3);
  v5 = *a2;
  a1[2] = *a2;
  object = v5;
  ice::Client::create(&v11, &object, "com.apple.locationd.iceClient");
  sub_1002B7674((uint64_t)a1, &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (object)
    dispatch_release(object);
  return a1;
}

void sub_101712FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;

  if (object)
    dispatch_release(object);
  sub_100261F44(v10);
  _Unwind_Resume(a1);
}

void sub_10171300C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
    v6 = 136315138;
    v7 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "%s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "static void CLIceClientProxy::CLIceClientProxy(const CLIceController &)::LocationdLogRedirect::clLog(unsigned int, const char *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_1017131B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (*a1)
  {
    v2 = *(_QWORD *)(a2 + 24);
    if (!v2)
      sub_10025FD1C();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "ICE client is not created", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "ICE client is not created", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLIceClientProxy::executeIfCreated(std::function<void ()>)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

_QWORD *sub_101713384(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[5];
  _QWORD v5[3];
  _QWORD *v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_1017134AC;
  v4[3] = &unk_1021CD018;
  v4[4] = a1;
  v5[0] = off_1021CD100;
  v5[1] = _Block_copy(v4);
  v6 = v5;
  sub_1017131B8(a1, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_101713468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1017134AC(uint64_t a1)
{
  ice::Client **v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(ice::Client ***)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting ICE client", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD0D0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Starting ICE client", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLIceClientProxy::start()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return ice::Client::start(*v1);
}

_QWORD *sub_101713644(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[6];
  int v7;
  _QWORD v8[3];
  _QWORD *v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_101713770;
  v6[3] = &unk_1021CD040;
  v7 = a2;
  v6[4] = a3;
  v6[5] = a1;
  v8[0] = off_1021CD100;
  v8[1] = _Block_copy(v6);
  v9 = v8;
  sub_1017131B8(a1, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_10171372C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101713770(uint64_t a1)
{
  sub_101713788(**(_QWORD **)(a1 + 40), *(unsigned int *)(a1 + 48), (uint64_t *)(a1 + 32));
}

void sub_101713788(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  void *aBlock;

  sub_101713D9C(*a3, &aBlock);
  v5 = aBlock;
  if (aBlock)
    v5 = _Block_copy(aBlock);
  v6 = v5;
  ice::Client::regEventHandlerInternal(a1, a2, &v6);
  if (v6)
    _Block_release(v6);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_101713800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10171382C(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[6];
  int v7;
  _QWORD v8[3];
  _QWORD *v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_101713958;
  v6[3] = &unk_1021CD068;
  v7 = a2;
  v6[4] = a3;
  v6[5] = a1;
  v8[0] = off_1021CD100;
  v8[1] = _Block_copy(v6);
  v9 = v8;
  sub_1017131B8(a1, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_101713914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101713958(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 40);
  sub_101713994(*v2, *(unsigned int *)(a1 + 48), (uint64_t *)(a1 + 32));
  return ice::Client::setIndShouldWake((ice::Client *)*v2, *(_DWORD *)(a1 + 48), 1);
}

void sub_101713994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *aBlock;
  void *v6;

  sub_101713E20(*a3, &v6);
  aBlock = v6;
  v6 = 0;
  ice::Client::regIndicationInternal(a1, a2, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
}

void sub_101713A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_101713A2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[7];
  _QWORD v7[3];
  _QWORD *v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_101713B58;
  v6[3] = &unk_1021CD090;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = a3;
  v7[0] = off_1021CD100;
  v7[1] = _Block_copy(v6);
  v8 = v7;
  sub_1017131B8(a1, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_101713B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101713B58(uint64_t a1)
{
  _BYTE v1[40];

  sub_101713B90(**(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 48), (uint64_t *)(a1 + 32), (uint64_t)v1);
  ice::SendProxy::~SendProxy((ice::SendProxy *)v1);
}

void sub_101713B90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *aBlock;

  sub_101713E20(*a3, &aBlock);
  sub_1007208BC(&v12, (_QWORD *)(a1 + 8));
  ice::SendProxy::SendProxy(a4, &v12, a2);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = aBlock;
  if (aBlock)
    v10 = _Block_copy(aBlock);
  v11 = v10;
  ice::SendProxy::callback(a4, &v11);
  if (v11)
    _Block_release(v11);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_101713C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, uint64_t a11, void *a12)
{
  ice::SendProxy *v12;

  if (aBlock)
    _Block_release(aBlock);
  ice::SendProxy::~SendProxy(v12);
  if (a12)
    _Block_release(a12);
  _Unwind_Resume(a1);
}

void sub_101713CB0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_101713CDC(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = off_1021CD100;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void sub_101713D18(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_101713D48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_101713D54(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CD160))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101713D90()
{
  return &off_1021CD160;
}

void *sub_101713D9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_101713E00;
  aBlock[3] = &unk_1021CD178;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_101713E00(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

void *sub_101713E20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_101713E84;
  aBlock[3] = &unk_1021CD1A0;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t sub_101713E84(uint64_t a1, const unsigned __int8 *a2, unsigned int a3)
{
  _BYTE v5[72];

  AriMsg::AriMsg((AriMsg *)v5, a2, a3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  AriMsg::~AriMsg((AriMsg *)v5);
  return 0;
}

void sub_101713ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_101713EE0(_QWORD *a1@<X8>)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  v10 = 0;
  sub_1001E4804(buf);
  v2 = sub_1001E4B84(*(uint64_t *)buf, "ImdCoexEnable", &v10);
  v3 = v2;
  v4 = v13;
  if (!v13)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    if (!v2)
      goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "ImdCoexEnable,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v11[0] = 67109120;
    v11[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "ImdCoexEnable,%d", v11);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssInterference> CLGnssInterference::createObject(id<CLIntersiloUniverse>, CLLTEBand13Handler::CLLTEBand13HandlerCallBack)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v10)
LABEL_14:
    operator new();
  *a1 = 0;
}

void sub_101714184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == v14)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  operator delete();
}

void sub_1017141F4(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 20) = _D0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  objc_msgSend(a2, "silo");
  if (sub_1000FDB0C())
    operator new();
  operator new();
}

void sub_101714474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  uint64_t v14;

  v13 = a13;
  if (a13 == &a10)
  {
    v14 = 4;
    v13 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_6:
  operator delete();
}

uint64_t *sub_10171456C(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  unsigned int buf[410];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Destruction", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Destruction", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLGnssInterference::~CLGnssInterference()", "%s\n", v7);
    if (v8 != (uint8_t *)buf)
      free(v8);
  }

  a1[8] = 0;
  v3 = *a1;
  if (*a1)
  {
    sub_10013F950(buf, CFSTR("kUplinkFreqBwNotification"));
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), sub_1001CFE7C(buf));
    v4 = *a1;
    sub_10013F950(buf, CFSTR("kCellInfoNotification"));
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), sub_1001CFE7C(buf));
  }
  sub_101714D6C(a1 + 7, 0);
  sub_101714D30(a1 + 6, 0);
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1017147A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1017147B8(uint64_t a1, CFDictionaryRef *a2)
{
  _BYTE *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v19;
  __int16 v20;
  float v21;
  float v22;
  uint8_t v23[16];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  double v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;

  sub_1001C1D6C((int)v23, *a2);
  v21 = -1.0;
  v22 = -1.0;
  *(_BYTE *)(a1 + 28) = 0;
  v3 = (_BYTE *)(a1 + 28);
  v4 = sub_1001E48E4((uint64_t)v23, (uint64_t)CFSTR("kUplinkFreqBwValid"), (BOOL *)(a1 + 28));
  sub_10052688C((uint64_t)v23, (uint64_t)CFSTR("kUplinkFreqKey"), &v22);
  v6 = v5;
  sub_10052688C((uint64_t)v23, (uint64_t)CFSTR("kUplinkBwKey"), &v21);
  v8 = v7;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *v3;
    *(_DWORD *)buf = 68290562;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    v28 = 1026;
    *(_DWORD *)v29 = v4;
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = v10;
    LOWORD(v30) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = v6;
    HIWORD(v30) = 2050;
    v31 = v22;
    v32 = 1026;
    v33 = v8;
    v34 = 2050;
    v35 = v21;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#imd,gnss,onTelephonyNotification\", \"valid\":%{public}d, \"isCacheValid\":%{public}d, \"gotUplinkFreq\":%{public}d, \"uplinkFreq(Hz)\":\"%{public}f\", \"gotUplinkBw\":%{public}d, \"uplinkBw(Hz)\":\"%{public}f\"}", buf, 0x3Eu);
  }
  if ((v4 & v6 & v8) != 1)
  {
    *v3 = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#error,#imd, cannot get uplink freq/bw from notification", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return sub_10011A5A8(v23);
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v20 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#error,#imd, cannot get uplink freq/bw from notification", &v20, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssInterference::setCachedFreqBw(const CLTelephonyService_Type::NotificationData &)", "%s\n", v15);
LABEL_28:
    if (v16 != buf)
      free(v16);
    return sub_10011A5A8(v23);
  }
  if (*v3)
  {
    *(float32x2_t *)(a1 + 20) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v21), LODWORD(v22))), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(float *)(a1 + 20);
      v13 = *(float *)(a1 + 24);
      *(_DWORD *)buf = 68289538;
      v25 = 0;
      v26 = 2082;
      v27 = "";
      v28 = 2050;
      *(double *)v29 = v12;
      *(_WORD *)&v29[8] = 2050;
      v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#imd,Received notification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x26u);
    }
    return sub_10011A5A8(v23);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v17 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#imd,gnss,onTelephonyNotification,!isValid,clearing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v20 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imd,gnss,onTelephonyNotification,!isValid,clearing", &v20, 2);
    v16 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssInterference::setCachedFreqBw(const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
    goto LABEL_28;
  }
  return sub_10011A5A8(v23);
}

void sub_101714CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_101714CD8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101714D04(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101714D30(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101712CD0();
    operator delete();
  }
  return result;
}

uint64_t *sub_101714D6C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (v3 == (_QWORD *)(v2 + 8))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    operator delete();
  }
  return result;
}

void sub_101714DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  void *__p;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_100270E34(a1 + 40, a3);
  sub_100270E34(a1 + 72, a4);
  sub_100270E34(a1 + 104, a5);
  sub_100270E34(a1 + 136, a6);
  sub_1015A2E04(&__p, "#gnssAssertion,sm");
  v10 = a1;
  operator new();
}

void sub_101715070()
{
  __cxa_end_catch();
  JUMPOUT(0x101715078);
}

void sub_101715090(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v7 = (_QWORD *)v1[20];
  if (v7 == v5)
  {
    v8 = 4;
    v7 = v5;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = (_QWORD *)v1[16];
  if (v9 == v4)
  {
    v10 = 4;
    v9 = v4;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = (_QWORD *)v1[12];
  if (v11 == v3)
  {
    v12 = 4;
    v11 = v3;
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  v13 = (_QWORD *)v1[8];
  if (v13 == v2)
  {
    v14 = 4;
    v13 = v2;
  }
  else
  {
    if (!v13)
      goto LABEL_21;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_21:
  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_101715098()
{
  JUMPOUT(0x1017150F0);
}

void sub_1017150A0()
{
  JUMPOUT(0x10171511CLL);
}

void sub_1017150A8()
{
  JUMPOUT(0x101715148);
}

void sub_1017150B0()
{
  JUMPOUT(0x101715174);
}

void sub_1017150B8()
{
  uint64_t v0;

  sub_1017193A0(v0);
  JUMPOUT(0x1017150C4);
}

uint64_t **sub_101715184(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t **result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  int v21;
  _BYTE __p[12];
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  void **v26;
  _BYTE buf[12];
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  _BYTE *v31;

  v21 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = a2;
    v6 = a1;
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101719A58(qword_1022A0070 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CD200);
LABEL_3:
  v8 = qword_1022A0078;
  v9 = *(_BYTE *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v9))
  {
    v10 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v10 = (_QWORD *)*v10;
    sub_101719118(v7, __p);
    if (SBYTE3(v26) >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v10;
    v28 = 1024;
    v29 = v7;
    v30 = 2080;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v13 = (_QWORD *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = qword_1022A0078;
    v15 = *(unsigned __int8 *)(v6 + 120);
    sub_101719118(v7, v19);
    if (v20 >= 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v13;
    v23 = 1024;
    v24 = v7;
    v25 = 2080;
    v26 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, v15, "%sstate,%d,%s", __p, 28, (const char *)v19[0]);
    v18 = v17;
    if (v20 < 0)
      operator delete(v19[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::setStateHandler(State, StateHandler) [T = CLEurekaGnssAssertion]", "%s\n", v18);
    if (v18 != buf)
      free(v18);
  }
  *(_QWORD *)buf = &v21;
  result = sub_1000610B4((uint64_t **)(v6 + 8), &v21, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101715450(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a2 == 3)
  {
    buf[0] = 1;
    v7 = a1[20];
    if (!v7)
      goto LABEL_20;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v7 + 48))(v7, buf);
    return 4;
  }
  if (a2 != 2)
    return 4;
  v3 = a1[8];
  if (!v3)
    goto LABEL_20;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if ((_DWORD)result)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,startTriggeredWhileAlreadyStarted", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopped(CLEurekaGnssAssertion::Event)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    buf[0] = 1;
    v6 = a1[16];
    if (v6)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
      return 1;
    }
LABEL_20:
    sub_10025FD1C();
  }
  return result;
}

uint64_t sub_101715658(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD v15[2];
  uint8_t buf[1640];

  result = 3;
  switch(a2)
  {
    case 0:
      sub_101716A28((uint64_t)(a1 + 21), 8, 10.0);
      return 3;
    case 1:
      sub_1017174F8((uint64_t)(a1 + 21), 8);
      return 3;
    case 2:
      v5 = a1[8];
      if (!v5)
        goto LABEL_38;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      if (!(_DWORD)result)
        return result;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD200);
        LOWORD(v15[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,startTriggeredWhileAlreadyStarted", v15, 2);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      buf[0] = 1;
      v7 = a1[16];
      if (!v7)
        goto LABEL_38;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v7 + 48))(v7, buf);
      result = 1;
      break;
    case 6:
    case 9:
      buf[0] = 1;
      v4 = a1[20];
      if (!v4)
        goto LABEL_38;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
      return 4;
    case 7:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopFailed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_28;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_32;
      goto LABEL_39;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopFailed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_28;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_32;
LABEL_39:
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
LABEL_32:
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,stopFailed", v15, 2, v15[0]);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
LABEL_28:
      buf[0] = 0;
      v10 = a1[20];
      if (!v10)
LABEL_38:
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(v10, buf);
      result = 5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101715AF0(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a2 == 9)
    return 4;
  if (a2 == 3)
  {
    buf[0] = 0;
    v7 = a1[20];
    if (!v7)
      goto LABEL_22;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v7 + 48))(v7, buf);
    return 5;
  }
  if (a2 != 2)
    return 5;
  v3 = a1[8];
  if (!v3)
    goto LABEL_22;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if ((_DWORD)result)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssAssertion,startTriggeredWhileAlreadyStarted", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,startTriggeredWhileAlreadyStarted", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStopFailed(CLEurekaGnssAssertion::Event)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    buf[0] = 1;
    v6 = a1[16];
    if (v6)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
      return 1;
    }
LABEL_22:
    sub_10025FD1C();
  }
  return result;
}

uint64_t sub_101715D04(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a2 == 9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStarted(CLEurekaGnssAssertion::Event)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    buf[0] = 0;
LABEL_11:
    v4 = *(_QWORD *)(a1 + 128);
    if (v4)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
      return 1;
    }
LABEL_31:
    sub_10025FD1C();
  }
  if (a2 != 3)
  {
    if (a2 != 2)
      return 1;
    buf[0] = 1;
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 96);
  if (!v6)
    goto LABEL_31;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
    return 3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStarted(CLEurekaGnssAssertion::Event)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 4;
}

uint64_t sub_101716034(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  _QWORD v18[2];
  uint8_t buf[1640];

  result = 0;
  switch(a2)
  {
    case 0:
      sub_101716A28(a1 + 168, 8, 10.0);
      goto LABEL_35;
    case 1:
      sub_1017174F8(a1 + 168, 8);
      goto LABEL_35;
    case 3:
      v4 = *(_QWORD *)(a1 + 96);
      if (!v4)
        goto LABEL_48;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
        return 3;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD200);
        LOWORD(v18[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", v18, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      return 4;
    case 4:
      buf[0] = 1;
      v6 = *(_QWORD *)(a1 + 128);
      if (!v6)
        goto LABEL_48;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(v6, buf);
      sub_1017174F8(a1 + 168, 8);
      return 1;
    case 5:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,startFailed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_38;
      goto LABEL_49;
    case 8:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gnssAssertion,startFailed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_26;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_38;
LABEL_49:
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
LABEL_38:
      LOWORD(v18[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,startFailed", v18, 2, v18[0]);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
LABEL_26:
      buf[0] = 0;
      v9 = *(_QWORD *)(a1 + 128);
      if (!v9)
LABEL_48:
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
      result = 2;
      break;
    case 9:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD200);
        LOWORD(v18[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", v18, 2);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartInProgress(CLEurekaGnssAssertion::Event)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
      buf[0] = 0;
      v11 = *(_QWORD *)(a1 + 128);
      if (!v11)
        goto LABEL_48;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
LABEL_35:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101716610(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (a2 == 9)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "gnssAssertion,unexpectedDisconnect,expectedStopPriorToDisconnect", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartFailed(CLEurekaGnssAssertion::Event)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    goto LABEL_10;
  }
  if (a2 != 3)
  {
    if (a2 != 2)
      return 2;
LABEL_10:
    buf[0] = 0;
    v4 = *(_QWORD *)(a1 + 128);
    if (v4)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 48))(v4, buf);
      return 2;
    }
LABEL_30:
    sub_10025FD1C();
  }
  v6 = *(_QWORD *)(a1 + 96);
  if (!v6)
    goto LABEL_30;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
    return 3;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssAssertion,stopTriggeredWhileAlreadyStopped", v12, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "CLEurekaGnssAssertion::State CLEurekaGnssAssertion::handler_kStartFailed(CLEurekaGnssAssertion::Event)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  return 4;
}

uint64_t sub_10171693C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  sub_1017193A0((uint64_t)(a1 + 21));
  v2 = (_QWORD *)a1[20];
  if (v2 == a1 + 17)
  {
    v3 = 4;
    v2 = a1 + 17;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (_QWORD *)a1[16];
  if (v4 == a1 + 13)
  {
    v5 = 4;
    v4 = a1 + 13;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = (_QWORD *)a1[12];
  if (v6 == a1 + 9)
  {
    v7 = 4;
    v6 = a1 + 9;
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = (_QWORD *)a1[8];
  if (v8 == a1 + 5)
  {
    v9 = 4;
    v8 = a1 + 5;
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return sub_100067AC4((uint64_t)a1);
}

void sub_101716A28(uint64_t a1, signed int a2, double a3)
{
  NSObject *v4;
  NSObject *v7;
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  BOOL v18;
  uint64_t *v19;
  NSObject *v20;
  uint64_t *v21;
  dispatch_time_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  _QWORD *v33;
  _BYTE *v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  NSObject *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD *v44;
  const char *v45;
  char *v46;
  double v47;
  _QWORD handler[5];
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[12];
  __int16 v52;
  _BYTE *v53;
  char v54;
  _BYTE __p[12];
  __int16 v56;
  _BYTE *v57;
  __int16 v58;
  double v59;
  _BYTE buf[1634];

  v50 = a2;
  v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v40 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v40 = (_QWORD *)*v40;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v44 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v44 = (_QWORD *)*v44;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sInvoking timers without callback queue set", __p);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
    }
    v42 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
    }
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 173, "setTimeoutEvent");
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      sub_1017190EC(a2, __p);
      if (v58 >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v10 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v10 = (_QWORD *)*v10;
      v11 = qword_1022A0078;
      sub_1017190EC(a2, v51);
      if (v54 >= 0)
        v12 = v51;
      else
        v12 = *(_BYTE **)v51;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v10;
      v56 = 2082;
      v57 = v12;
      v58 = 2050;
      v59 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", __p, 32);
      v14 = v13;
      if (v54 < 0)
        operator delete(*(void **)v51);
LABEL_79:
      sub_100512490("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v14);
LABEL_80:
      if (v14 != buf)
        free(v14);
      return;
    }
    return;
  }
  v15 = *(_QWORD *)(a1 + 64);
  if (v15)
  {
    v16 = a1 + 64;
    do
    {
      v17 = *(_DWORD *)(v15 + 32);
      v18 = v17 < a2;
      if (v17 >= a2)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (!v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 64 && *(_DWORD *)(v16 + 32) <= a2)
    {
      v20 = *(NSObject **)(v16 + 40);
      if (v20)
      {
LABEL_37:
        v22 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v20, v22, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD200);
        v23 = qword_1022A0078;
        v24 = *(_BYTE *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1022A0078, v24))
        {
          v25 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v25 = (_QWORD *)*v25;
          sub_1017190EC(v50, __p);
          if (v58 >= 0)
            v26 = __p;
          else
            v26 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v58) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CD200);
          v27 = (_QWORD *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0)
            v27 = (_QWORD *)*v27;
          v28 = qword_1022A0078;
          v29 = *(unsigned __int8 *)(a1 + 120);
          sub_1017190EC(v50, v51);
          if (v54 >= 0)
            v30 = v51;
          else
            v30 = *(_BYTE **)v51;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v27;
          v56 = 2080;
          v57 = v30;
          v58 = 2048;
          v59 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, v29, "%sevent,%s,timeout,%.2f", __p, 32, v47);
          v14 = v31;
          if (v54 < 0)
            operator delete(*(void **)v51);
          sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::setTimeoutEvent(Event, double) [T = CLEurekaGnssAssertion]", "%s\n", v14);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  v21 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v21)
  {
    v20 = v21;
    *(_QWORD *)buf = &v50;
    sub_100041CE0((uint64_t **)(a1 + 56), (int *)&v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v21;
    dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101719484;
    handler[3] = &unk_10213D6C0;
    handler[4] = a1;
    v49 = v50;
    dispatch_source_set_event_handler(v20, handler);
    dispatch_resume(v20);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    v33 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v33 = (_QWORD *)*v33;
    sub_1017190EC(a2, buf);
    if (buf[23] >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v33;
    v56 = 2082;
    v57 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v35 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v35 = (_QWORD *)*v35;
    v36 = qword_1022A0078;
    sub_1017190EC(a2, __p);
    if (v58 >= 0)
      v37 = __p;
    else
      v37 = *(_BYTE **)__p;
    *(_DWORD *)v51 = 136315394;
    *(_QWORD *)&v51[4] = v35;
    v52 = 2082;
    v53 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 17, "%scannot create timer, event, %{public}s", v51, 22);
    v14 = v38;
    if (SHIBYTE(v58) < 0)
      operator delete(*(void **)__p);
    goto LABEL_79;
  }
}

void sub_1017174F8(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_1017190EC(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_1017190EC(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssAssertion>::cancelTimeoutEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_1017190EC(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_1017190EC(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

uint64_t sub_101717988(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v11;
  _QWORD v12[2];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 24))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,noEntries,Event::kGnssStopRequest", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssAssertion,evaluateAssertion,noEntries,Event::kGnssStopRequest", v12, 2, v12[0]);
LABEL_33:
    v11 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::evaluateAssertion()", "%s\n", v8);
    if (v11 != buf)
      free(v11);
LABEL_28:
    v4 = 3;
    return sub_101717D54(a1 + 168, v4);
  }
  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    while (*((_DWORD *)v2 + 5))
    {
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_5;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,someDisabled,Event::kGnssStopRequest", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_28;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssAssertion,evaluateAssertion,someDisabled,Event::kGnssStopRequest", v12, 2, v12[0]);
    goto LABEL_33;
  }
LABEL_5:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gnssAssertion,evaluateAssertion,allEnable,Event::kGnssStartRequest", buf, 2u);
  }
  v4 = 2;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    LOWORD(v12[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssAssertion,evaluateAssertion,allEnable,Event::kGnssStartRequest", v12, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::evaluateAssertion()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    v4 = 2;
  }
  return sub_101717D54(a1 + 168, v4);
}

uint64_t sub_101717D54(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  _BYTE *v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD *v32;
  uint64_t *v33;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  _QWORD *v46;
  uint64_t *v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  _BYTE *v63;
  void **v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  const char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  void **v92;
  char *v93;
  char *v94;
  const char *v95;
  const char *v96;
  int v97;
  void *v98[2];
  char v99;
  unsigned int v100;
  _BYTE __p[12];
  __int16 v102;
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE buf[12];
  __int16 v107;
  _BYTE *v108;
  __int16 v109;
  _BYTE *v110;
  _BYTE v111[12];
  __int16 v112;
  _BYTE *v113;
  char v114;

  ++*(_DWORD *)(a1 + 88);
  v100 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_101719BD8();
    goto LABEL_157;
  }
  v3 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_101719D4C(qword_1022A0070 == -1);
    goto LABEL_157;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v5 = qword_1022A0078;
  v6 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v6))
  {
    v7 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v7 = (_QWORD *)*v7;
    sub_101719118(*(_DWORD *)(a1 + 4), __p);
    v8 = SHIBYTE(v104);
    v9 = *(_BYTE **)__p;
    sub_1017190EC(a2, v111);
    v10 = __p;
    if (v8 < 0)
      v10 = v9;
    if (v114 >= 0)
      v11 = v111;
    else
      v11 = *(_BYTE **)v111;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v7;
    v107 = 2080;
    v108 = v10;
    v109 = 2080;
    v110 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v114 < 0)
      operator delete(*(void **)v111);
    v3 = &qword_1022A0000;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v58 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v58 = (_QWORD *)*v58;
    v59 = qword_1022A0078;
    v60 = *(unsigned __int8 *)(a1 + 120);
    sub_101719118(*(_DWORD *)(a1 + 4), v111);
    v61 = v114;
    v62 = *(_BYTE **)v111;
    sub_1017190EC(a2, v98);
    v63 = v111;
    if (v61 < 0)
      v63 = v62;
    if (v99 >= 0)
      v64 = v98;
    else
      v64 = (void **)v98[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v58;
    v102 = 2080;
    v103 = v63;
    v104 = 2080;
    v105 = v64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, v60, "%scurrent_state,%s,event,%s", __p, 32, v96);
    v66 = v65;
    if (v99 < 0)
      operator delete(v98[0]);
    v3 = &qword_1022A0000;
    if (v114 < 0)
      operator delete(*(void **)v111);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v66);
    if (v66 != buf)
      free(v66);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_28;
  v13 = (uint64_t **)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 4);
  v15 = a1 + 16;
  do
  {
    v16 = *(_DWORD *)(v12 + 32);
    v17 = v16 < v14;
    if (v16 >= v14)
      v18 = (uint64_t *)v12;
    else
      v18 = (uint64_t *)(v12 + 8);
    if (!v17)
      v15 = v12;
    v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101719ECC();
    goto LABEL_157;
  }
  v20 = *(uint64_t (**)(_QWORD *, uint64_t))(v15 + 40);
  v19 = *(_QWORD *)(v15 + 48);
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 32) + (v19 >> 1));
  if ((v19 & 1) != 0)
    v20 = *(uint64_t (**)(_QWORD *, uint64_t))(*v21 + v20);
  v22 = v20(v21, a2);
  v23 = v22;
  v97 = v22;
  if (a2 <= 1 && (_DWORD)v22 != v100)
  {
    sub_10171A328();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v25 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v73 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v73 = (_QWORD *)*v73;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v73;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      v75 = (char *)v74;
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
  }
  if (v3[14] != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v26 = qword_1022A0078;
  v27 = *(_BYTE *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v27))
  {
    v28 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v28 = (_QWORD *)*v28;
    sub_101719118(v23, buf);
    if (v109 >= 0)
      v29 = buf;
    else
      v29 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v28;
    v102 = 2080;
    v103 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v67 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v67 = (_QWORD *)*v67;
    v68 = qword_1022A0078;
    v69 = *(unsigned __int8 *)(a1 + 120);
    sub_101719118(v23, __p);
    if (v104 >= 0)
      v70 = __p;
    else
      v70 = *(_BYTE **)__p;
    *(_DWORD *)v111 = 136315394;
    *(_QWORD *)&v111[4] = v67;
    v112 = 2080;
    v113 = v70;
    LODWORD(v95) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, v69, "%snewState,%s", v111, v95);
    v72 = v71;
    if (SHIBYTE(v104) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if ((_DWORD)v23 != v100)
  {
    if (v3[14] != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v30 = qword_1022A0078;
    v31 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v31))
    {
      v32 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v32 = (_QWORD *)*v32;
      sub_101719118(v100, __p);
      v33 = v3;
      v34 = SHIBYTE(v104);
      v35 = *(_BYTE **)__p;
      sub_1015A2E04(v111, "Exit");
      v36 = __p;
      if (v34 < 0)
        v36 = v35;
      if (v114 >= 0)
        v37 = v111;
      else
        v37 = *(_BYTE **)v111;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v32;
      v107 = 2080;
      v108 = v36;
      v109 = 2080;
      v110 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v114 < 0)
        operator delete(*(void **)v111);
      v3 = v33;
      if (SHIBYTE(v104) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v76 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v76 = (_QWORD *)*v76;
      v77 = qword_1022A0078;
      v78 = *(unsigned __int8 *)(a1 + 120);
      sub_101719118(v100, v111);
      v79 = v3;
      v80 = v114;
      v81 = *(_BYTE **)v111;
      sub_1015A2E04(v98, "Exit");
      v82 = v111;
      if (v80 < 0)
        v82 = v81;
      if (v99 >= 0)
        v83 = v98;
      else
        v83 = (void **)v98[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v76;
      v102 = 2080;
      v103 = v82;
      v104 = 2080;
      v105 = v83;
      LODWORD(v95) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, v78, "%soldState,%s,event,%s", __p, v95, (const char *)(a1 + 8));
      v85 = v84;
      if (v99 < 0)
        operator delete(v98[0]);
      v3 = v79;
      v13 = (uint64_t **)v96;
      if (v114 < 0)
        operator delete(*(void **)v111);
      sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    v38 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = &v100;
    v39 = sub_1000610B4(v13, (int *)&v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    v40 = v39[5];
    v41 = (uint64_t)v39[6];
    v42 = (_QWORD *)(v38 + (v41 >> 1));
    if ((v41 & 1) != 0)
      v40 = *(uint64_t **)(*v42 + v40);
    v43 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v42, 1);
    if (v43 == v100)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD200);
      v44 = qword_1022A0078;
      v45 = *(_BYTE *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1022A0078, v45))
      {
        v46 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v46 = (_QWORD *)*v46;
        sub_101719118(v23, __p);
        v47 = v3;
        v48 = SHIBYTE(v104);
        v49 = *(_BYTE **)__p;
        sub_1015A2E04(v111, "Enter");
        v50 = __p;
        if (v48 < 0)
          v50 = v49;
        if (v114 >= 0)
          v51 = v111;
        else
          v51 = *(_BYTE **)v111;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v46;
        v107 = 2080;
        v108 = v50;
        v109 = 2080;
        v110 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v114 < 0)
          operator delete(*(void **)v111);
        v3 = v47;
        if (SHIBYTE(v104) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD200);
        v86 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v86 = (_QWORD *)*v86;
        v87 = qword_1022A0078;
        v88 = *(unsigned __int8 *)(a1 + 120);
        sub_101719118(v23, v111);
        v89 = v114;
        v90 = *(_BYTE **)v111;
        sub_1015A2E04(v98, "Enter");
        v91 = v111;
        if (v89 < 0)
          v91 = v90;
        if (v99 >= 0)
          v92 = v98;
        else
          v92 = (void **)v98[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v86;
        v102 = 2080;
        v103 = v91;
        v104 = 2080;
        v105 = v92;
        LODWORD(v95) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, v88, "%snewState,%s,event,%s", __p, v95, v96);
        v94 = v93;
        if (v99 < 0)
          operator delete(v98[0]);
        if (v114 < 0)
          operator delete(*(void **)v111);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssAssertion>::handleEvent(Event) [T = CLEurekaGnssAssertion]", "%s\n", v94);
        if (v94 != buf)
          free(v94);
      }
      v52 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)buf = &v97;
      v53 = sub_1000610B4(v13, &v97, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v54 = v53[5];
      v55 = (uint64_t)v53[6];
      v56 = (_QWORD *)(v52 + (v55 >> 1));
      if ((v55 & 1) != 0)
        v54 = *(uint64_t **)(*v56 + v54);
      v23 = ((uint64_t (*)(_QWORD *, _QWORD))v54)(v56, 0);
      if ((_DWORD)v23 == v97)
        goto LABEL_89;
      sub_10171A040();
    }
    else
    {
      sub_10171A1B4();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_101718A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_101718A9C(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  int v9;
  void **v10;
  const char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v16;
  const char *v17;
  char *v18;
  int v19;
  void **v20;
  const char *v21;
  char *v22;
  void **v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  void *__p[2];
  char v28;
  int v29;
  _BYTE buf[12];
  __int16 v31;
  void **v32;
  char v33;
  int v34;
  void **v35;
  __int16 v36;
  _BYTE *v37;
  void *v38[2];
  char v39;

  v29 = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = "AssertionClientUnknown";
    if (a2 == 1)
      v7 = "kCLGDA";
    if (a2)
      v8 = (char *)v7;
    else
      v8 = "kGnssClient";
    sub_1015A2E04(v38, v8);
    v9 = v39;
    v10 = (void **)v38[0];
    v11 = "AssertionLevelUnknown";
    if (a3 == 1)
      v11 = "kGnssOn";
    if (a3)
      v12 = (char *)v11;
    else
      v12 = "kGnssOff";
    sub_1015A2E04(__p, v12);
    v13 = v38;
    if (v9 < 0)
      v13 = v10;
    if (v28 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v13;
    v31 = 2080;
    v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssAssertion,setAssertion,client,%s,level,%s", buf, 0x16u);
    if (v28 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v38, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v16 = qword_1022A0078;
    v17 = "AssertionClientUnknown";
    if (a2 == 1)
      v17 = "kCLGDA";
    if (a2)
      v18 = (char *)v17;
    else
      v18 = "kGnssClient";
    sub_1015A2E04(__p, v18);
    v19 = v28;
    v20 = (void **)__p[0];
    v21 = "AssertionLevelUnknown";
    if (a3 == 1)
      v21 = "kGnssOn";
    if (a3)
      v22 = (char *)v21;
    else
      v22 = "kGnssOff";
    sub_1015A2E04(buf, v22);
    v23 = __p;
    if (v19 < 0)
      v23 = v20;
    if (v33 >= 0)
      v24 = buf;
    else
      v24 = *(_BYTE **)buf;
    v34 = 136315394;
    v35 = v23;
    v36 = 2080;
    v37 = v24;
    _os_log_send_and_compose_impl(2, 0, v38, 1628, &_mh_execute_header, v16, 2, "#gnssAssertion,setAssertion,client,%s,level,%s", (const char *)&v34, 22);
    v26 = v25;
    if (v33 < 0)
      operator delete(*(void **)buf);
    if (v28 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::setAssertion(CLEurekaGnssAssertionClient, CLEurekaGnssAssertionLevel)", "%s\n", v26);
    if (v26 != (char *)v38)
      free(v26);
  }
  v38[0] = &v29;
  *((_DWORD *)sub_10006A62C(a1, &v29, (uint64_t)&unk_101B9EB60, (_DWORD **)v38) + 5) = a3;
  return sub_101717988(a1);
}

void sub_101718DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_101718E34(_QWORD *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  void **v7;
  uint64_t v9;
  const char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE buf[12];
  char v17;
  int v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  v15 = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = "AssertionClientUnknown";
    if (a2 == 1)
      v5 = "kCLGDA";
    if (a2)
      v6 = (char *)v5;
    else
      v6 = "kGnssClient";
    sub_1015A2E04(__p, v6);
    if (v21 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssAssertion,clearAssertion,client,%s", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
    v9 = qword_1022A0078;
    v10 = "AssertionClientUnknown";
    if (a2 == 1)
      v10 = "kCLGDA";
    if (a2)
      v11 = (char *)v10;
    else
      v11 = "kGnssClient";
    sub_1015A2E04(buf, v11);
    if (v17 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    v18 = 136315138;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "#gnssAssertion,clearAssertion,client,%s", (const char *)&v18);
    v14 = v13;
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEurekaGnssAssertion::clearAssertion(CLEurekaGnssAssertionClient)", "%s\n", v14);
    if (v14 != (char *)__p)
      free(v14);
  }
  sub_101719494(a1, &v15);
  return sub_101717988((uint64_t)a1);
}

uint64_t sub_1017190B0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 168;
  if (a2)
    v3 = 6;
  else
    v3 = 7;
  return sub_101717D54(v2, v3);
}

uint64_t sub_1017190C4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 168;
  if (a2)
    v3 = 4;
  else
    v3 = 5;
  return sub_101717D54(v2, v3);
}

uint64_t sub_1017190D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 168;
  if (a2)
    v3 = 10;
  else
    v3 = 9;
  return sub_101717D54(v2, v3);
}

_QWORD *sub_1017190EC@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xA)
    v2 = "EventUnknown";
  else
    v2 = (&off_1021CD280)[a1];
  return sub_1015A2E04(a2, v2);
}

_QWORD *sub_101719118@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 5)
    v2 = "StateUnknown";
  else
    v2 = (&off_1021CD2D8)[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_101719144(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101719174(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10171919C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1017191DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  size_t v14;
  __int128 *v15;
  const void *v16;
  uint8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a3;
  v10 = a3[1];
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_6;
LABEL_21:
    sub_10171A49C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v23, v24, v25, v26,
      v27,
      v28,
      v29,
      v30,
      v31);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLStateMachine.h", 60, "CLStateMachine");
    __break(1u);
    return;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_21;
LABEL_6:
  if (*(char *)(a2 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  sub_100259584((uint64_t)&v21, v14 + 1);
  if (v22 >= 0)
    v15 = &v21;
  else
    v15 = (__int128 *)v21;
  if (v14)
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const void *)a2;
    else
      v16 = *(const void **)a2;
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)v15 + v14) = 44;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v21;
  *(_QWORD *)(a1 + 112) = v22;
}

void sub_101719360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  void **v6;
  _QWORD **v7;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_100008848(v4, *v7);
  sub_100261F44(v3);
  sub_100008848(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1017193A0(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 56;
  sub_101719408(*(_QWORD **)(a1 + 56), (_QWORD *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100008848(v2, *(_QWORD **)(a1 + 64));
  sub_100261F44(a1 + 32);
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_101719408(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1017174F8(a3, *((_DWORD *)v5 + 8));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_101719484(uint64_t a1)
{
  return sub_101717D54(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t *sub_101719494(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = sub_1001F8DEC(a1, a2);
  if (result)
  {
    sub_1002123D8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void sub_1017194C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC18();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "fStart cannot be null", "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  v31 = *(NSObject **)(v25 + 120);
  if (sub_100299F70(v31))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fStart cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(26);
  sub_100299FDC();
}

void sub_10171962C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC18();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "fOnGnssStopCompleteCb cannot be null", "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  v31 = *(NSObject **)(v25 + 120);
  if (sub_100299F70(v31))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fOnGnssStopCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(29);
  sub_100299FDC();
}

void sub_101719790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC18();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "fOnGnssStartCompleteCb cannot be null", "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  v31 = *(NSObject **)(v25 + 120);
  if (sub_100299F70(v31))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fOnGnssStartCompleteCb cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(28);
  sub_100299FDC();
}

void sub_1017198F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC18();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v29, v30, "fStop cannot be null", "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_101256420();
    if (!v28)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  v31 = *(NSObject **)(v25 + 120);
  if (sub_100299F70(v31))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fStop cannot be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(27);
  sub_100299FDC();
}

#error "101719AD0: call analysis failed (funcsize=77)"

#error "101719C50: call analysis failed (funcsize=74)"

#error "101719DC4: call analysis failed (funcsize=77)"

#error "101719F44: call analysis failed (funcsize=74)"

#error "10171A0B8: call analysis failed (funcsize=74)"

#error "10171A22C: call analysis failed (funcsize=74)"

#error "10171A3A0: call analysis failed (funcsize=74)"

void sub_10171A49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD200);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v27, v28, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD200);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10171A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 96) = _D0;
  *(_QWORD *)(a1 + 104) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 112) = -1082130432;
  *(_QWORD *)(a1 + 120) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1082130432;
  *(_WORD *)(a1 + 144) = 0x8000;
  *(_BYTE *)(a1 + 146) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0x8000;
  sub_100270E34(a1 + 168, a4);
  operator new();
}

void sub_10171A7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == v21)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  operator delete();
}

void sub_10171A8E4(_QWORD *a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#GnssTTPCIe,pcieDoorbellErrorCallback,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
      v6[0] = 67240192;
      v6[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssTTPCIe,pcieDoorbellErrorCallback,%{public}d", v6, 8);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellErrorCallback(const int32_t)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10171AA94(_QWORD *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240448;
      v13 = a2;
      v14 = 2050;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssTTPCIe,pcieDoorbellModemToMachTimeTransferCallback,seq,%{public}u,tick,%{public}llu", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
      v9[0] = 67240448;
      v9[1] = a2;
      v10 = 2050;
      v11 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssTTPCIe,pcieDoorbellModemToMachTimeTransferCallback,seq,%{public}u,tick,%{public}llu", v9, 18);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellModemToMachTimeTransferCallback(const uint32_t, const uint64_t)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_10171AC7C((uint64_t)a1, a2, a3);
  }
}

void sub_10171AC7C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD308);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    v13 = a2;
    v14 = 2050;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#GnssTTPCIe,handleModemToMachTimeTransferCallback,seq,%{public}u,tickCount,%{public}llu", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v9[0] = 67240448;
    v9[1] = a2;
    v10 = 2050;
    v11 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssTTPCIe,handleModemToMachTimeTransferCallback,seq,%{public}u,tickCount,%{public}llu", v9, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::handleModemToMachTimeTransferCallback(const uint32_t, const uint64_t)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  *(_QWORD *)(a1 + 32) = a3;
  if (*(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == a2)
  {
    *(_BYTE *)(a1 + 40) = 1;
    sub_10171B364(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 12) = 1;
  }
}

void sub_10171AE88(_QWORD *a1, int a2, unsigned int a3, unint64_t a4, unint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67241728;
      v28 = a2;
      v29 = 1026;
      v30 = a3;
      v31 = 2050;
      v32 = a4;
      v33 = 2050;
      v34 = a5;
      v35 = 2050;
      v36 = sub_100127828(a3);
      v37 = 2050;
      v38 = sub_100127828(a4);
      v39 = 2050;
      v40 = sub_100127828(a5);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssTTPCIe,pcieDoorbellPulseMeasurementCallback,seq,%{public}u,dur,%{public}u,begAbs,%{public}llu,begCont,%{public}llu,durSec,%{public}f,begAbsSec,%{public}f,begContSec,%{public}f", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
      v11 = qword_1022A0078;
      v14[0] = 67241728;
      v14[1] = a2;
      v15 = 1026;
      v16 = a3;
      v17 = 2050;
      v18 = a4;
      v19 = 2050;
      v20 = a5;
      v21 = 2050;
      v22 = sub_100127828(a3);
      v23 = 2050;
      v24 = sub_100127828(a4);
      v25 = 2050;
      v26 = sub_100127828(a5);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 1, "#GnssTTPCIe,pcieDoorbellPulseMeasurementCallback,seq,%{public}u,dur,%{public}u,begAbs,%{public}llu,begCont,%{public}llu,durSec,%{public}f,begAbsSec,%{public}f,begContSec,%{public}f", v14, 64);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::pcieDoorbellModemTimeReadMeasurementCallback(uint32_t, uint32_t, uint64_t, uint64_t)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    sub_10171B128((uint64_t)a1, a2, a3, a4);
  }
}

void sub_10171B128(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD308);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    v17 = a2;
    v18 = 1026;
    v19 = a3;
    v20 = 2050;
    v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#GnssTTPCIe,ttSetTickTimeMeas,seq,%{public}u,measDur,%{public}u,measBeginMach,%{public}llu", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v11[0] = 67240704;
    v11[1] = a2;
    v12 = 1026;
    v13 = a3;
    v14 = 2050;
    v15 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssTTPCIe,ttSetTickTimeMeas,seq,%{public}u,measDur,%{public}u,measBeginMach,%{public}llu", v11, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::handleModemTimeReadMeasurementCallback(const uint32_t, const uint32_t, const uint64_t, const uint64_t)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a3;
  if (*(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == a2)
  {
    *(_BYTE *)(a1 + 40) = 1;
    sub_10171B364(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 12) = 1;
  }
}

uint64_t sub_10171B354(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_1009FA1EC(result);
  return result;
}

void sub_10171B364(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  double v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  NSObject *v27;
  uint8_t *v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  double v34;
  uint8_t *v35;
  uint8_t *v36;
  double v37;
  float v43;
  float v44;
  unint64_t v45;
  NSObject *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  double v54;
  int v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  const char *v59;
  uint8_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  double __y;
  int v69;
  _BYTE v70[34];
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  double v88;
  uint8_t buf[4];
  _BYTE v90[34];
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  double v108;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && *(_DWORD *)(a1 + 24)
    && *(_QWORD *)(a1 + 32)
    && *(_BYTE *)(a1 + 12)
    && *(_BYTE *)(a1 + 40)
    && (v3 = *(_QWORD *)(a1 + 48)) != 0
    && *(_QWORD *)(a1 + 56) > v3
    && *(_QWORD *)(a1 + 64)
    && *(float *)(a1 + 72) > 0.0)
  {
    v4 = sub_100127828(v2);
    v5 = sub_100127828(*(unsigned int *)(a1 + 24));
    v6 = sub_100127828(*(_QWORD *)(a1 + 48));
    v7 = sub_100127828(*(_QWORD *)(a1 + 56));
    v8 = vabdd_f64(v4, v6);
    if (v8 > 2.0 || v5 > 0.0001 || v7 - v6 > 0.0001)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
      v33 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)v90 = v8;
        *(_WORD *)&v90[8] = 2050;
        *(double *)&v90[10] = v5;
        *(_WORD *)&v90[18] = 2050;
        *(double *)&v90[20] = v7 - v6;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#GnssTTPCIe,diffModemGpsTimeTransferStartSec,%{public}f,modeTimeReadDurationSec,%{public}f,readDurationGpsTimeSec,%{public}f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD308);
        v69 = 134349568;
        *(double *)v70 = v8;
        *(_WORD *)&v70[8] = 2050;
        *(double *)&v70[10] = v5;
        *(_WORD *)&v70[18] = 2050;
        *(double *)&v70[20] = v7 - v6;
        v34 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssTTPCIe,diffModemGpsTimeTransferStartSec,%{public}f,modeTimeReadDurationSec,%{public}f,readDurationGpsTimeSec,%{public}f", &v69, 32);
        v36 = v35;
        sub_100512490("Generic", 1, 0, 0, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v34);
        goto LABEL_83;
      }
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 48) + ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(unsigned int *)(a1 + 24);
      v12 = v10 + (v11 >> 1);
      if (v9 <= v12)
        v13 = v10 + (v11 >> 1);
      else
        v13 = *(_QWORD *)(a1 + 48) + ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
      if (v12 >= v9)
        v14 = *(_QWORD *)(a1 + 48) + ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1);
      else
        v14 = v12;
      v15 = v13 - v14;
      v16 = sub_100127828(v13 - v14);
      v17 = (double)*(unint64_t *)(a1 + 32) / 19200000.0;
      if (qword_1022A0070 != -1)
      {
        v54 = v16;
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
        v16 = v54;
      }
      v18 = v16 * 1000.0;
      v19 = v17 * 1000.0;
      v20 = qword_1022A0078;
      v21 = v7 - v6;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(_DWORD *)(a1 + 8);
        v23 = *(_QWORD *)(a1 + 64);
        v24 = *(float *)(a1 + 72);
        v25 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 67243264;
        *(_DWORD *)v90 = v22;
        *(_WORD *)&v90[4] = 2050;
        *(_QWORD *)&v90[6] = v15;
        *(_WORD *)&v90[14] = 2050;
        *(double *)&v90[16] = v18;
        *(_WORD *)&v90[24] = 2050;
        *(double *)&v90[26] = v6;
        v91 = 2050;
        v92 = v7;
        v93 = 2050;
        v94 = v7 - v6;
        v95 = 2050;
        v96 = v23;
        v97 = 2050;
        v98 = v24;
        v99 = 2050;
        v100 = v4;
        v101 = 2050;
        v102 = v5;
        v103 = 2050;
        v104 = v8;
        v105 = 2050;
        v106 = v25;
        v107 = 2050;
        v108 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,AP-GPS-Modem timings,seq,%{public}d,machTickDiffGpsModem,%{public}llu,machDiffGpsModemMsec,%{public}f,machTimeGpsTTStart,%{public}f,machTimeGpsTTEnd,%{public}f,readDurationGPSTimeSec,%{public}f,gpsTime_Ns,%{public}llu,gpsUnc,%{public}.2lf,machTimeModemTTStart,%{public}f,readDurationModemTimeSec,%{public}f,diffModemGpsTimeTransferStartSec,%{public}f,modemClockTicks,%{public}llu,modemClockMsec,%{public}f", buf, 0x80u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD308);
        v55 = *(_DWORD *)(a1 + 8);
        v56 = *(_QWORD *)(a1 + 64);
        v57 = *(float *)(a1 + 72);
        v58 = *(_QWORD *)(a1 + 32);
        v69 = 67243264;
        *(_DWORD *)v70 = v55;
        *(_WORD *)&v70[4] = 2050;
        *(_QWORD *)&v70[6] = v15;
        *(_WORD *)&v70[14] = 2050;
        *(double *)&v70[16] = v18;
        *(_WORD *)&v70[24] = 2050;
        *(double *)&v70[26] = v6;
        v71 = 2050;
        v72 = v7;
        v73 = 2050;
        v74 = v7 - v6;
        v75 = 2050;
        v76 = v56;
        v77 = 2050;
        v78 = v57;
        v79 = 2050;
        v80 = v4;
        v81 = 2050;
        v82 = v5;
        v83 = 2050;
        v84 = v8;
        v85 = 2050;
        v86 = v58;
        v87 = 2050;
        v88 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssTTPCIe,AP-GPS-Modem timings,seq,%{public}d,machTickDiffGpsModem,%{public}llu,machDiffGpsModemMsec,%{public}f,machTimeGpsTTStart,%{public}f,machTimeGpsTTEnd,%{public}f,readDurationGPSTimeSec,%{public}f,gpsTime_Ns,%{public}llu,gpsUnc,%{public}.2lf,machTimeModemTTStart,%{public}f,readDurationModemTimeSec,%{public}f,diffModemGpsTimeTransferStartSec,%{public}f,modemClockTicks,%{public}llu,modemClockMsec,%{public}f", &v69, 128);
        v60 = (uint8_t *)v59;
        sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v59);
        if (v60 != buf)
          free(v60);
        v21 = v7 - v6;
      }
      v26 = -v18;
      if (v12 < v9)
        v26 = v18;
      if (v18 <= 5.0)
      {
        v37 = v19 + v26;
        __y = 0.0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        __asm { FMOV            V10.2S, #-1.0 }
        *(_QWORD *)(a1 + 96) = _D10;
        *(_QWORD *)(a1 + 104) = 0x7FF8000000000000;
        *(_QWORD *)(a1 + 112) = 3212836864;
        *(_QWORD *)(a1 + 120) = 0x7FF8000000000000;
        *(_QWORD *)(a1 + 128) = 0;
        *(_QWORD *)(a1 + 136) = 3212836864;
        *(_WORD *)(a1 + 144) = 0x8000;
        *(_QWORD *)(a1 + 146) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_WORD *)(a1 + 160) = 0x8000;
        *(_DWORD *)(a1 + 162) = 0;
        *(_WORD *)(a1 + 166) = 0;
        *(double *)(a1 + 80) = sub_1001FCBB4();
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 64);
        *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 72);
        *(_WORD *)(a1 + 144) = sub_100512544();
        v43 = (v5 + v21) * 500.0;
        *(float *)(a1 + 100) = v43;
        v44 = modf(v37, &__y);
        v45 = (unint64_t)__y;
        *(float *)(a1 + 96) = v44;
        *(_QWORD *)(a1 + 88) = v45;
        if (v43 < 0.1)
          *(_DWORD *)(a1 + 100) = 1036831949;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD308);
        v46 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v47 = *(_DWORD *)(a1 + 8);
          v48 = *(_QWORD *)(a1 + 64);
          v49 = *(_QWORD *)(a1 + 88);
          v50 = *(float *)(a1 + 96);
          *(_DWORD *)buf = 67241216;
          *(_DWORD *)v90 = v47;
          *(_WORD *)&v90[4] = 2050;
          *(double *)&v90[6] = v37;
          *(_WORD *)&v90[14] = 2050;
          *(_QWORD *)&v90[16] = v48;
          *(_WORD *)&v90[24] = 2050;
          *(_QWORD *)&v90[26] = v49;
          v91 = 2050;
          v92 = v50;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,timeTransferNotification,final,seq,%{public}d,rtcMsec,%{public}.3lf,gnssNsec,%{public}llu,rtcIntMsec,%{public}llu,rtcSubMsec,%{public}.3lf", buf, 0x30u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CD308);
          v61 = *(_DWORD *)(a1 + 8);
          v62 = *(_QWORD *)(a1 + 64);
          v63 = *(_QWORD *)(a1 + 88);
          v64 = *(float *)(a1 + 96);
          v69 = 67241216;
          *(_DWORD *)v70 = v61;
          *(_WORD *)&v70[4] = 2050;
          *(double *)&v70[6] = v37;
          *(_WORD *)&v70[14] = 2050;
          *(_QWORD *)&v70[16] = v62;
          *(_WORD *)&v70[24] = 2050;
          *(_QWORD *)&v70[26] = v63;
          v71 = 2050;
          v72 = v64;
          LODWORD(v67) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssTTPCIe,timeTransferNotification,final,seq,%{public}d,rtcMsec,%{public}.3lf,gnssNsec,%{public}llu,rtcIntMsec,%{public}llu,rtcSubMsec,%{public}.3lf", &v69, v67);
          v66 = (uint8_t *)v65;
          sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v65);
          if (v66 != buf)
            free(v66);
        }
        v51 = *(_QWORD *)(a1 + 192);
        if (v51)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 48))(v51, a1 + 80);
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = _D10;
          *(_QWORD *)(a1 + 104) = 0x7FF8000000000000;
          *(_QWORD *)(a1 + 112) = 3212836864;
          *(_QWORD *)(a1 + 120) = 0x7FF8000000000000;
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 136) = 3212836864;
          *(_WORD *)(a1 + 144) = 0x8000;
          *(_QWORD *)(a1 + 146) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          *(_WORD *)(a1 + 160) = 0x8000;
          *(_DWORD *)(a1 + 162) = 0;
          *(_WORD *)(a1 + 166) = 0;
        }
        *(_QWORD *)(a1 + 72) = 0;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_OWORD *)(a1 + 8) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD308);
        v27 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,drop,absMachDiffBetweenGpsAndModemTimeMSec>5.0", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CD308);
          LOWORD(v69) = 0;
          LODWORD(v67) = 2;
          v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssTTPCIe,drop,absMachDiffBetweenGpsAndModemTimeMSec>5.0", &v69, v67);
LABEL_82:
          v36 = v28;
          sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::timeTransferNotification()", "%s\n", v29);
LABEL_83:
          if (v36 != buf)
            free(v36);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v30 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 16);
      if (v31)
      {
        LODWORD(v31) = *(_DWORD *)(a1 + 24);
        if ((_DWORD)v31)
        {
          v31 = *(_QWORD *)(a1 + 32);
          if (v31)
          {
            LODWORD(v31) = *(unsigned __int8 *)(a1 + 12);
            if (*(_BYTE *)(a1 + 12))
              LODWORD(v31) = *(unsigned __int8 *)(a1 + 40);
          }
        }
      }
      v32 = *(_QWORD *)(a1 + 48);
      if (v32)
      {
        if (*(_QWORD *)(a1 + 56) <= v32)
        {
          LODWORD(v32) = 0;
        }
        else
        {
          v32 = *(_QWORD *)(a1 + 64);
          if (v32)
            LODWORD(v32) = *(float *)(a1 + 72) > 0.0;
        }
      }
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v90 = v31;
      *(_WORD *)&v90[4] = 1026;
      *(_DWORD *)&v90[6] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#GnssTTPCIe,timeTransferNotification,modemTimeToMachTimeValid,%{public}d,gpsTimeToMachTimeValid,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD308);
      v52 = *(_QWORD *)(a1 + 16);
      if (v52)
      {
        LODWORD(v52) = *(_DWORD *)(a1 + 24);
        if ((_DWORD)v52)
        {
          v52 = *(_QWORD *)(a1 + 32);
          if (v52)
          {
            LODWORD(v52) = *(unsigned __int8 *)(a1 + 12);
            if (*(_BYTE *)(a1 + 12))
              LODWORD(v52) = *(unsigned __int8 *)(a1 + 40);
          }
        }
      }
      v53 = *(_QWORD *)(a1 + 48);
      if (v53)
      {
        if (*(_QWORD *)(a1 + 56) <= v53)
        {
          LODWORD(v53) = 0;
        }
        else
        {
          v53 = *(_QWORD *)(a1 + 64);
          if (v53)
            LODWORD(v53) = *(float *)(a1 + 72) > 0.0;
        }
      }
      v69 = 67240448;
      *(_DWORD *)v70 = v52;
      *(_WORD *)&v70[4] = 1026;
      *(_DWORD *)&v70[6] = v53;
      v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssTTPCIe,timeTransferNotification,modemTimeToMachTimeValid,%{public}d,gpsTimeToMachTimeValid,%{public}d", &v69, 14);
      goto LABEL_82;
    }
  }
}

void sub_10171BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD308);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    v18 = a2;
    v19 = 2050;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssTTPCIe,feedMachTimeToGPSTimeTransferNew,gpsTimeNs,%{public}llu,measBeginMach,%{public}llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD308);
    v13 = 134349312;
    v14 = a2;
    v15 = 2050;
    v16 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#GnssTTPCIe,feedMachTimeToGPSTimeTransferNew,gpsTimeNs,%{public}llu,measBeginMach,%{public}llu", &v13, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLDiscreteGPSToCellularModemTimeTransferViaMachTime::feedMachTimeToGPSTimeTransfer(const uint64_t, const float, const uint64_t, const uint64_t)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a2;
  *(float *)(a1 + 72) = a5;
  sub_10171B364(a1);
}

void sub_10171C05C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10171C088(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1009F97E8(result);
    operator delete();
  }
  return result;
}

void sub_10171C0C8()
{
  operator delete();
}

_QWORD *sub_10171C0DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD338;
  result[1] = v3;
  return result;
}

uint64_t sub_10171C110(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD338;
  a2[1] = v2;
  return result;
}

void sub_10171C12C(uint64_t a1, int *a2, uint64_t *a3)
{
  sub_10171AA94(*(_QWORD **)(a1 + 8), *a2, *a3);
}

uint64_t sub_10171C13C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10171C178()
{
}

void sub_10171C188()
{
  operator delete();
}

_QWORD *sub_10171C19C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD3C8;
  result[1] = v3;
  return result;
}

uint64_t sub_10171C1D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD3C8;
  a2[1] = v2;
  return result;
}

void sub_10171C1EC(uint64_t a1, int *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5)
{
  sub_10171AE88(*(_QWORD **)(a1 + 8), *a2, *a3, *a4, *a5);
}

uint64_t sub_10171C204(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10171C240()
{
}

void sub_10171C250()
{
  operator delete();
}

_QWORD *sub_10171C264(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD458;
  result[1] = v3;
  return result;
}

uint64_t sub_10171C298(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD458;
  a2[1] = v2;
  return result;
}

void sub_10171C2B4(uint64_t a1, int *a2)
{
  sub_10171A8E4(*(_QWORD **)(a1 + 8), *a2);
}

uint64_t sub_10171C2C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10171C2FC()
{
}

void sub_10171C308(_QWORD *a1@<X8>)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[4];
  uint8_t buf[8];
  std::__shared_weak_count *v16;

  if ((sub_10075CC24() & 1) != 0)
  {
    HIDWORD(v13) = 0;
    sub_1001E4804(buf);
    v2 = sub_1001E4B84(*(uint64_t *)buf, "GPSTTAllowed", (_DWORD *)&v13 + 1);
    v3 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (HIDWORD(v13) == 1)
      v6 = 1;
    else
      v6 = v2 ^ 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#tt,create,isGpsTTAllowed,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v14[0] = 67109120;
      v14[1] = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,create,isGpsTTAllowed,%d", v14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssTimeTransfer> CLGnssTimeTransfer::create(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (v6)
      operator new();
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#warning,#tt,NotSupportByPlatform", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      LOWORD(v14[0]) = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#warning,#tt,NotSupportByPlatform", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssTimeTransfer> CLGnssTimeTransfer::create(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  *a1 = 0;
}

void sub_10171C6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == v14)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  operator delete();
}

void sub_10171C750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  double v37;
  int v38;
  int v39;
  uint64_t v40;
  _OWORD buf[102];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 2143289344;
  *(_BYTE *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 56) = 10;
  *(_OWORD *)(a1 + 64) = xmmword_101CDAB00;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  v4 = sub_100270E34(a1 + 96, a3);
  if (sub_10075EC64(v4))
    *(_QWORD *)(a1 + 72) = 0x405E000000000000;
  v38 = 0;
  sub_1001E4804(buf);
  v5 = sub_1001E4B84(*(uint64_t *)&buf[0], "GPSTTNumPulses", &v38);
  v6 = v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_7;
  v8 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_7:
    if (!v5)
      goto LABEL_11;
  }
  v10 = v38;
  if (v38 <= 5)
    v10 = 5;
  *(_DWORD *)(a1 + 56) = v10;
LABEL_11:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_DWORD *)(a1 + 56);
    LODWORD(buf[0]) = 67109120;
    DWORD1(buf[0]) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#tt, GPSTTNumPulses,%d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v28 = *(_DWORD *)(a1 + 56);
    v39 = 67109120;
    LODWORD(v40) = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, GPSTTNumPulses,%d", &v39);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v29);
    if (v30 != (char *)buf)
      free(v30);
  }
  v38 = 0;
  sub_1001E4804(buf);
  v13 = sub_1001E4B84(*(uint64_t *)&buf[0], "GPSTTRepeatInterval", &v38);
  if (v38 > 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (!*((_QWORD *)&buf[0] + 1))
    goto LABEL_23;
  v16 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v14)
    {
LABEL_25:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)(a1 + 72);
        LODWORD(buf[0]) = 134217984;
        *(_QWORD *)((char *)buf + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#tt, GPSTTRepeatInterval,%.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD660);
        v31 = *(_QWORD *)(a1 + 72);
        v39 = 134217984;
        v40 = v31;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, GPSTTRepeatInterval,%.1lf", COERCE_DOUBLE(&v39));
        v33 = (char *)v32;
        sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v32);
        if (v33 != (char *)buf)
          free(v33);
      }
      v37 = 0.0;
      sub_1001E4804(buf);
      v20 = sub_1001FD98C(*(uint64_t *)&buf[0], "GPSTTInterval", &v37);
      v21 = v20;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
      if (!*((_QWORD *)&buf[0] + 1))
        goto LABEL_34;
      v23 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (v21)
          goto LABEL_35;
      }
      else
      {
LABEL_34:
        if (v20)
        {
LABEL_35:
          v25 = v37;
          *(double *)(a1 + 64) = v37;
          goto LABEL_42;
        }
      }
      v25 = *(double *)(a1 + 64);
LABEL_42:
      if (v25 < 1.0)
        *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_QWORD *)(a1 + 64);
        LODWORD(buf[0]) = 134217984;
        *(_QWORD *)((char *)buf + 4) = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#tt, GPSTTInterval,%.3lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD660);
        v34 = *(_QWORD *)(a1 + 64);
        v39 = 134217984;
        v40 = v34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, GPSTTInterval,%.3lf", COERCE_DOUBLE(&v39));
        v36 = (char *)v35;
        sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::CLGnssTimeTransfer(id<CLIntersiloUniverse>, CLSetCommandToExecute)", "%s\n", v35);
        if (v36 != (char *)buf)
          free(v36);
      }
      operator new();
    }
  }
  else
  {
LABEL_23:
    if (!v14)
      goto LABEL_25;
  }
  *(double *)(a1 + 72) = (double)v38;
  goto LABEL_25;
}

void sub_10171CE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v24 = (_QWORD *)v21[15];
  if (v24 == v22)
  {
    v25 = 4;
    v24 = v22;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:
  v26 = *v21;
  *v21 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

BOOL sub_10171CEA4(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;

  v1 = **(_QWORD ****)(a1 + 32);
  v2 = ((uint64_t (*)(_QWORD **))(*v1)[4])(v1);
  return sub_10002A7F0(v1[1], v2);
}

uint64_t *sub_10171CEDC(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, invalidating timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, invalidating timer", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::~CLGnssTimeTransfer()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  objc_msgSend((id)a1[6], "invalidate");

  a1[6] = 0;
  v3 = (uint64_t *)a1[15];
  if (v3 == a1 + 12)
  {
    v4 = 4;
    v3 = a1 + 12;
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_10171D0CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10171D0DC(uint64_t *a1)
{
  uint64_t v1;
  _UNKNOWN **v2;

  v1 = *a1;
  v2 = sub_10171D108(*a1);
  return sub_10002A7F0(*(_QWORD **)(v1 + 8), (uint64_t)v2);
}

_UNKNOWN **sub_10171D108(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, stop event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
}

void sub_10171D200(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  float v11;
  double v12;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  int v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;

  v4 = *a1;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
  sub_10002A7F0(*(_QWORD **)(v4 + 8), v5);
  *((_BYTE *)a1 + 40) = *(_DWORD *)(a2 + 292) != 0;
  if (a1[2] != 0x8000000000000000 && *((double *)a1 + 3) != 0.0 && *((float *)a1 + 8) > 0.0)
  {
    v6 = sub_100078B88();
    v7 = *((double *)a1 + 3);
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (double)(a1[2] - (uint64_t)(v7 * 1000000000.0)) * 0.000000001;
    v10 = 0.0;
    if (v6 - v7 > 0.0 && v6 - v7 < 1200.0)
    {
      v11 = *((float *)a1 + 8);
      if (v11 > 0.0 && v11 < 2000000.0)
      {
        v12 = *(double *)(a2 + 16) - v9;
        if (v12 > 0.0 && v12 < v6)
        {
          v10 = v6 - v12;
          if (v6 - v12 >= 10.0)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CD660);
            v15 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              v57 = v6 - v12;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Warning,#tt,excessive mach time delay,%{public}.4lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CD660);
              v36 = 134349056;
              v37 = v6 - v12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Warning,#tt,excessive mach time delay,%{public}.4lf", &v36, 12);
              v34 = (uint8_t *)v33;
              sub_100512490("Generic", 1, 0, 0, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v33);
              if (v34 != buf)
                free(v34);
            }
          }
          else
          {
            *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent() - v10;
            *(double *)(a2 + 24) = v12;
            *(double *)(a2 + 32) = sub_1001FCBB4() - v10;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CD660);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            v57 = v12;
            v58 = 2048;
            v59 = v6;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning, #tt out of bounds estimatedMachTimeOfFix,%.4lf,machNow,%.4lf,possible bb time adjusted", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CD660);
            v36 = 134218240;
            v37 = v12;
            v38 = 2048;
            v39 = v6;
            LODWORD(v35) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning, #tt out of bounds estimatedMachTimeOfFix,%.4lf,machNow,%.4lf,possible bb time adjusted", COERCE_DOUBLE(&v36), v35);
            v32 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v31);
            if (v32 != buf)
              free(v32);
          }
          a1[2] = 0x8000000000000000;
          a1[3] = 0;
          *((_DWORD *)a1 + 8) = 2143289344;
        }
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a2 + 8);
      v18 = *(_QWORD *)(a2 + 16);
      v19 = (uint64_t)*((float *)a1 + 8);
      v20 = *(double *)(a2 + 24);
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *((unsigned __int8 *)a1 + 40);
      *(_DWORD *)buf = 134220288;
      v57 = v20;
      v58 = 2048;
      v59 = v6;
      v60 = 2048;
      v61 = v10;
      v62 = 2048;
      v63 = v8;
      v64 = 2048;
      v65 = v17;
      v66 = 2048;
      v67 = v18;
      v68 = 2048;
      v69 = v9;
      v70 = 2048;
      v71 = v19;
      v72 = 2048;
      v73 = v21;
      v74 = 1024;
      v75 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#tt,TimestampAdjust,machTimeOfFix,%.4lf,machNow,%.4lf,delay,%.9lf,priorCfTime,%.4lf,adjustedCfTime,%.4lf,locationTimestampGps,%.4lf,bbTimeMinusMachtime,%.9lf,bbTimeUnc_ns,%lld,machContinuousTimeOfFix,%.4lf,imag,%d", buf, 0x62u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(_QWORD *)(a2 + 16);
      v25 = (uint64_t)*((float *)a1 + 8);
      v26 = *(double *)(a2 + 24);
      v27 = *(_QWORD *)(a2 + 32);
      v28 = *((unsigned __int8 *)a1 + 40);
      v36 = 134220288;
      v37 = v26;
      v38 = 2048;
      v39 = v6;
      v40 = 2048;
      v41 = v10;
      v42 = 2048;
      v43 = v8;
      v44 = 2048;
      v45 = v23;
      v46 = 2048;
      v47 = v24;
      v48 = 2048;
      v49 = v9;
      v50 = 2048;
      v51 = v25;
      v52 = 2048;
      v53 = v27;
      v54 = 1024;
      v55 = v28;
      LODWORD(v35) = 98;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,TimestampAdjust,machTimeOfFix,%.4lf,machNow,%.4lf,delay,%.9lf,priorCfTime,%.4lf,adjustedCfTime,%.4lf,locationTimestampGps,%.4lf,bbTimeMinusMachtime,%.9lf,bbTimeUnc_ns,%lld,machContinuousTimeOfFix,%.4lf,imag,%d", COERCE_DOUBLE(&v36), v35);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssTimeTransfer::adjustLocationTimestamps(GNSS::PerEpochData &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

void sub_10171D854(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10171D8BC;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_10171D8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];
  _QWORD v11[3];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 32);
  v11[0] = off_1021CD690;
  v12 = v11;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    sub_10025FD1C();
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v11);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  if ((v3 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt, failed to send command to stop time transfer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, failed to send command to stop time transfer", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssTimeTransfer::stopTimeTransfer()_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_10171DAB0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10171DAF4(uint64_t a1, uint64_t a2)
{
  double v4;

  *(_QWORD *)a1 = 0x8000000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 2143289344;
  if (sub_1016F2BF0(a2) && *(_BYTE *)(a2 + 12) && (*(_QWORD *)a2 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2 - *(_QWORD *)(a2 + 32) - 1000000000 * *(int *)(a2 + 16) - 662342400000000000;
    v4 = sub_100127828(*(_QWORD *)(a2 + 48));
    *(double *)(a1 + 8) = v4 + sub_100127828(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) * 0.5;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t sub_10171DBA8(_QWORD ***a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = ((uint64_t (*)(_QWORD ***))(*a1)[2])(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tt, spurious start event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return *(_QWORD *)(**a1[1] - 8);
}

uint64_t sub_10171DCA8(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, spurious timer event\", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1[1] + 48), "setNextFireDelay:", 1.79769313e308);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt, diable timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, diable timer", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::State::timer()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return *(_QWORD *)(**(_QWORD **)a1[1] - 8);
}

uint64_t sub_10171DEF4(uint64_t *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    v12 = 1026;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, device state\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  if (a2)
    sub_10171D854(a1[1]);
  return *(_QWORD *)(**(_QWORD **)a1[1] - 8);
}

uint64_t sub_10171E018(_QWORD ***a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = ((uint64_t (*)(_QWORD ***))(*a1)[2])(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, dropped data\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return *(_QWORD *)(**a1[1] - 8);
}

uint64_t sub_10171E118(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v1 + 80);
  return *(_QWORD *)(**(_QWORD **)v1 - 8);
}

_QWORD *sub_10171E138(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *a1 = off_1021CD4D8;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, disable timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, disable timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CLGnssTimeTransfer::IdleState::~IdleState()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(a1[1] + 48), "setNextFireDelay:", 1.79769313e308);
  return a1;
}

void sub_10171E2EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10171E2FC(_QWORD *a1)
{
  sub_10171E138(a1);
  operator delete();
}

uint64_t sub_10171E320(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2082;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, timer event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 80) = 0;
  sub_100239D2C(a1);
  return *(_QWORD *)(***(_QWORD ***)(a1 + 8) - 8);
}

uint64_t sub_10171E438(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 84))
    v2 = 1;
  else
    v2 = 6;
  v3 = *(_DWORD *)(v1 + 80) + 1;
  *(_DWORD *)(v1 + 80) = v3;
  if (v3 <= v2 || v3 % 0x64 == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_DWORD *)(v7 + 80);
      LODWORD(v7) = *(unsigned __int8 *)(v7 + 84);
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1026;
      v19 = v8;
      v20 = 1026;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, onFix\", \"NumFixesFromStart\":%{public}u, \"ContinuousMode\":%{public}d}", buf, 0x1Eu);
    }
    v1 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v1 + 80) == v2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#tt, onFix, enabling", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD660);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, onFix, enabling", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::IdleState::onFix()", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      *(_BYTE *)(a1 + 17) = 1;
      sub_100239D2C(a1);
      v1 = *(_QWORD *)(a1 + 8);
    }
  }
  return *(_QWORD *)(**(_QWORD **)v1 - 8);
}

id sub_10171E6DC(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t (***v6)();
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  double v12;
  char *v13;
  char *v14;
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;
  uint64_t (**v19)();
  char v20;
  uint64_t (***v21)();

  ++*(_DWORD *)(a1 + 20);
  *(_BYTE *)(a1 + 16) = 1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(v2 + 84);
  v19 = off_1021CD8A0;
  v20 = v3;
  v21 = &v19;
  v4 = *(_QWORD *)(v2 + 120);
  if (!v4)
    sub_10025FD1C();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v4 + 48))(v4, &v19);
  v6 = v21;
  if (v21 == &v19)
  {
    v7 = 4;
    v6 = &v19;
  }
  else
  {
    if (!v21)
      goto LABEL_7;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_7:
  if ((v5 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#tt, failed to send command to pulse", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      LOWORD(v15) = 0;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, failed to send command to pulse", &v15, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLGnssTimeTransfer::ActiveState::pulse()", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(double *)(*(_QWORD *)(a1 + 8) + 64) + 0.5;
    *(_DWORD *)buf = 134217984;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v12 = *(double *)(*(_QWORD *)(a1 + 8) + 64) + 0.5;
    v15 = 134217984;
    v16 = v12;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, timer setNextFireDelay, %f", COERCE_DOUBLE(&v15));
    sub_100512490("Generic", 1, 0, 2, "void CLGnssTimeTransfer::ActiveState::pulse()", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 48), "setNextFireDelay:", *(double *)(*(_QWORD *)(a1 + 8) + 64) + 0.5);
}

void sub_10171EA70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 64);
  if (v3 == (_QWORD *)(v1 - 88))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10171EAB4(_QWORD *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *a1 = off_1021CD528;
  objc_msgSend(*(id *)(a1[1] + 48), "setNextFireDelay:", 1.79769313e308);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tt, disable timer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, disable timer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual CLGnssTimeTransfer::ActiveState::~ActiveState()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return a1;
}

void sub_10171EC68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10171EC78(_QWORD *a1)
{
  sub_10171EAB4(a1);
  operator delete();
}

_UNKNOWN **sub_10171EC9C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, timer event\", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#tt, did not receive a response to the previous pulse.  Stopping.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, did not receive a response to the previous pulse.  Stopping.", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual std::type_index CLGnssTimeTransfer::ActiveState::timer()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_10171D854(*(_QWORD *)(a1 + 8));
  }
  else
  {
    sub_10171E6DC(a1);
    return *(_UNKNOWN ***)(***(_QWORD ***)(a1 + 8) - 8);
  }
}

_UNKNOWN **sub_10171EEF8(_QWORD ***a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = ((uint64_t (*)(_QWORD ***))(*a1)[2])(a1);
    *(_DWORD *)buf = 68289538;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = v5;
    v17 = 1026;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, state event\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", buf, 0x22u);
  }
  if ((a2 & 1) != 0)
    return *(_UNKNOWN ***)(**a1[1] - 8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#tt disabled", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt disabled", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::deviceTTState(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

_UNKNOWN **sub_10171F150(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  _QWORD *v11;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  NSString *v26;
  NSObject *v27;
  unint64_t v28;
  NSObject *v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  double v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  const char *v45;
  char *v46;
  const char *v47;
  unint64_t v48;
  const char *v49;
  char *v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  __int128 v54;
  double v55;
  _BYTE buf[48];
  _BYTE v57[32];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  _BOOL4 v61;
  __int16 v62;
  int v63;

  if (!*(_BYTE *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#tt, received data when not expecting.  Stopping", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      LOWORD(v54) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, received data when not expecting.  Stopping", &v54, 2);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    sub_10171D854(*(_QWORD *)(a1 + 8));
    v11 = **(_QWORD ***)(a1 + 8);
    return *(_UNKNOWN ***)(*v11 - 8);
  }
  *(_BYTE *)(a1 + 16) = 0;
  if (!sub_1016F2BF0(a2))
    goto LABEL_45;
  v4 = *(_QWORD *)a2 / 0x2260FF9290000uLL;
  v5 = *(_QWORD *)a2 % 0x2260FF9290000uLL / 0xF4240;
  if (sub_10051550C(v4, v5))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v5;
      *(_WORD *)&buf[14] = 2050;
      *(_QWORD *)&buf[16] = sub_100515444();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,imag,1,NotSettingTime,Gpsweek,%{public}d,GpsTowMs,%{public}d,BuildDate,%{public}.0lf", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v7 = qword_1022A0078;
      LODWORD(v54) = 67240704;
      DWORD1(v54) = v4;
      WORD4(v54) = 1026;
      *(_DWORD *)((char *)&v54 + 10) = v5;
      HIWORD(v54) = 2050;
      v55 = sub_100515444();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#Warning,#tt,imag,1,NotSettingTime,Gpsweek,%{public}d,GpsTowMs,%{public}d,BuildDate,%{public}.0lf", &v54, 24);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v8);
LABEL_85:
      if (v9 != buf)
        free(v9);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  v12 = *(_QWORD *)(a2 + 40);
  if (v12 && (*(_QWORD *)a2 < v12 || *(_QWORD *)a2 > v12 + 604800000000000))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *(_QWORD *)(a2 + 40) / 0x2260FF9290000uLL;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,NotSettingTime,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v51 = *(_QWORD *)(a2 + 40) / 0x2260FF9290000uLL;
      LODWORD(v54) = 67240448;
      DWORD1(v54) = v4;
      WORD4(v54) = 1026;
      *(_DWORD *)((char *)&v54 + 10) = v51;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#tt,NotSettingTime,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", &v54, 14);
      v9 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v52);
      goto LABEL_85;
    }
LABEL_45:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 40))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v29 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#tt,#warning,#imag,ignoring TT pulse", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_59;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      LOWORD(v54) = 0;
      LODWORD(v53) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,#warning,#imag,ignoring TT pulse", &v54, v53);
      v31 = (char *)v30;
      sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v30);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#tt,#warning,not sending TT to TM.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_59;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      LOWORD(v54) = 0;
      LODWORD(v53) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,#warning,not sending TT to TM.", &v54, v53);
      v31 = (char *)v47;
      sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v47);
    }
    if (v31 != buf)
      free(v31);
LABEL_59:
    v18 = 0;
    goto LABEL_60;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_QWORD *)(a2 + 40) / 0x2260FF9290000uLL;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#tt,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v48 = *(_QWORD *)(a2 + 40) / 0x2260FF9290000uLL;
    LODWORD(v54) = 67240448;
    DWORD1(v54) = v4;
    WORD4(v54) = 1026;
    *(_DWORD *)((char *)&v54 + 10) = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,GpsWeek,%{public}d,ExtEphGpsWeek,%{public}d", &v54, 14);
    v50 = (char *)v49;
    sub_100512490("Generic", 1, 0, 2, "virtual std::type_index CLGnssTimeTransfer::ActiveState::pulseTime(GNSS::TimeTransferPulseTime)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v15 + 40) || *(_BYTE *)(v15 + 84))
    goto LABEL_45;
  sub_10171DAF4((uint64_t)&v54, a2);
  v17 = *((double *)&v54 + 1) != 0.0 && (_QWORD)v54 != 0x8000000000000000;
  v18 = *(float *)&v55 > 0.0 && v17;
  if (v18)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_10230F9D8);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_10230F9D8))
    {
      *(_OWORD *)&buf[32] = unk_1021CD5B0;
      *(_OWORD *)v57 = unk_1021CD5C0;
      *(_OWORD *)&v57[16] = unk_1021CD5D0;
      *(_OWORD *)buf = unk_1021CD590;
      *(_OWORD *)&buf[16] = unk_1021CD5A0;
      sub_10171FFF4((uint64_t)&unk_10230F9C0, (int *)buf, 5);
      __cxa_atexit((void (*)(void *))sub_10171FCBC, &unk_10230F9C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10230F9D8);
    }
    v20 = *(_QWORD *)(a1 + 8);
    v21 = LODWORD(v55);
    *(_OWORD *)(v20 + 16) = v54;
    *(_DWORD *)(v20 + 32) = v21;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = *(_QWORD *)(a2 + 56);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
    v25 = *(float *)(a2 + 8);
    v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *sub_1000B5C9C((uint64_t)&unk_10230F9C0, (int *)(a2 + 64)));
    TMProvideBBTime(v22, v23, v24, (uint64_t)v25 + 1000000, v26);
  }
LABEL_60:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v33 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_QWORD *)a2;
    v35 = *(float *)(a2 + 8);
    v36 = *(unsigned __int8 *)(a2 + 12);
    v37 = *(_DWORD *)(a2 + 16);
    v39 = *(_QWORD *)(a2 + 24);
    v38 = *(_QWORD *)(a2 + 32);
    v40 = *(_QWORD *)(a2 + 48);
    v41 = *(_QWORD *)(a2 + 56);
    v42 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 84);
    *(_DWORD *)buf = 68291586;
    *(_WORD *)&buf[8] = 2082;
    *(_DWORD *)&buf[4] = 0;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v34;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = v38;
    *(_WORD *)&buf[38] = 2050;
    *(double *)&buf[40] = v35;
    *(_WORD *)v57 = 1026;
    *(_DWORD *)&v57[2] = v36;
    *(_WORD *)&v57[6] = 1026;
    *(_DWORD *)&v57[8] = v37;
    *(_WORD *)&v57[12] = 2050;
    *(_QWORD *)&v57[14] = v39;
    *(_WORD *)&v57[22] = 2050;
    *(_QWORD *)&v57[24] = v40;
    v58 = 2050;
    v59 = v41;
    v60 = 1026;
    v61 = v18;
    v62 = 1026;
    v63 = v42;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt,bbPulseTime\", \"gps time ns\":%{public}llu, \"bias ns\":%{public}lld, \"uncertainty\":\"%{public}f\", \"leap seconds valid\":%{public}hhd, \"leap seconds\":%{public}d, \"receiver clock\":%{public}llu, \"time before pulse\":%{public}llu, \"time after pulse\":%{public}llu, \"sent to timed\":%{public}hhd, \"continuousMode\":%{public}d}", buf, 0x66u);
  }
  v43 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v43 + 84) || *(_DWORD *)(a1 + 20) < *(_DWORD *)(v43 + 56))
  {
    v11 = *(_QWORD **)v43;
    return *(_UNKNOWN ***)(*v11 - 8);
  }
  sub_10171D854(v43);
}

void sub_10171FC9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230F9D8);
  _Unwind_Resume(a1);
}

uint64_t sub_10171FCBC(uint64_t a1)
{
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

const char *sub_10171FCE4()
{
  return "ActiveState";
}

void sub_10171FCF0(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10171FD20()
{
  operator delete();
}

_QWORD *sub_10171FD34()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021CD690;
  return result;
}

void sub_10171FD58(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021CD690;
}

uint64_t sub_10171FD70(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
}

uint64_t sub_10171FD80(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CD700))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10171FDBC()
{
  return &off_1021CD700;
}

void sub_10171FDCC()
{
  operator delete();
}

__n128 sub_10171FDE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1021CD720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

uint64_t sub_10171FE1C(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CD880))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10171FE58()
{
  return &off_1021CD880;
}

void sub_10171FE68()
{
  operator delete();
}

_QWORD *sub_10171FE7C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD790;
  result[1] = v3;
  return result;
}

uint64_t sub_10171FEB4(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CD7F0))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10171FEF0()
{
  return &off_1021CD7F0;
}

void sub_10171FF00()
{
  operator delete();
}

_QWORD *sub_10171FF14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD810;
  result[1] = v3;
  return result;
}

BOOL sub_10171FF4C(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t (*v3)(_QWORD **, _OWORD *);
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[4];
  uint64_t v9;

  v2 = **(_QWORD ****)(a1 + 8);
  v3 = (uint64_t (*)(_QWORD **, _OWORD *))(*v2)[6];
  v4 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v4;
  v9 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  v6 = v3(v2, v8);
  return sub_10002A7F0(v2[1], v6);
}

uint64_t sub_10171FFAC(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_1021CD870))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10171FFE8()
{
  return &off_1021CD870;
}

uint64_t sub_10171FFF4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_100342508((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_101720058(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_101720074()
{
  operator delete();
}

_BYTE *sub_101720088(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = off_1021CD8A0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1017200C0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = off_1021CD8A0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1017200E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 240))(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1017200F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_101720134()
{
}

_QWORD *sub_101720140(_QWORD *a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *a1 = 0xC11FA40000000000;
  sub_100270E34((uint64_t)(a1 + 1), a2);
  if (a1[4])
  {
    if (qword_1022A0070 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10172039C(qword_1022A0070 == -1);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLLTEBand13Band14Handler.mm", 18, "CLLTEBand13Band14Handler");
    __break(1u);
  }
  dispatch_once(&qword_1022A0070, &stru_1021CD910);
LABEL_3:
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssInterference, CLLTEBand13Band14Handler construction", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD910);
    v8[0] = 0;
    LODWORD(v7) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GnssInterference, CLLTEBand13Band14Handler construction", v8, v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLLTEBand13Band14Handler::CLLTEBand13Band14Handler(CLLTEHandlerCallBack)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_101720328(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_101720370(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10172039C(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_1021CD910);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD910);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD910);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

uint64_t sub_101720558(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSObject *v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[8];
  uint64_t v16;
  uint8_t *v17;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 49) = a4;
  sub_100197040();
  if ((sub_10075BBF4() & 1) != 0 || (sub_100197040(), sub_10075B95C()))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD930);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Constructing CLIceController", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD930);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Constructing CLIceController", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "CLModemController::CLModemController(dispatch_queue_t, BOOL, BOOL)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    operator new();
  }
  if (sub_10075BE08())
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD930);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Constructing CLEurekaModemController", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD930);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "Constructing CLEurekaModemController", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "CLModemController::CLModemController(dispatch_queue_t, BOOL, BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    operator new();
  }
  *(_QWORD *)buf = off_1021CD960;
  v16 = a1;
  v17 = buf;
  sub_101720C78(buf, (_QWORD *)a1);
  v7 = v17;
  if (v17 == buf)
  {
    v8 = 4;
    v7 = buf;
    goto LABEL_20;
  }
  if (v17)
  {
    v8 = 5;
LABEL_20:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  return a1;
}

void sub_101720928(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;

  sub_101720A40(v3, 0);
  sub_101720A04(v2, 0);
  v5 = (_QWORD *)v1[3];
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1017209CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100270E34(a2, a1);
}

void sub_1017209D8(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101720A04(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10183B820();
    operator delete();
  }
  return result;
}

uint64_t sub_101720A40(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10168FFA4(result);
    operator delete();
  }
  return result;
}

void sub_101720A80()
{
  operator delete();
}

_QWORD *sub_101720A94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021CD960;
  result[1] = v3;
  return result;
}

uint64_t sub_101720AC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD960;
  a2[1] = v2;
  return result;
}

uint64_t sub_101720AE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;

  sub_101720C14((uint64_t)v6, a2);
  if (!v7)
    sub_10025FD1C();
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)(a1 + 8));
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_6;
  }
  if (v7)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return 1;
}

void sub_101720B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_101720BCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101720C08()
{
}

uint64_t sub_101720C14(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_101720C78(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101720DE0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_101720DEC(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  const qmi::MutableMessageBase *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  _BYTE v11[32];
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  uint8_t buf[8];
  __int128 v16;
  void *v17;
  uint64_t v18;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v16) = 2080;
    *(_QWORD *)((char *)&v16 + 2) = "QMI_PDS_RESET";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v12[0] = 67109378;
    v12[1] = 0;
    v13 = 2080;
    v14 = "QMI_PDS_RESET";
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,\n", v12, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendReset(void (^)(const pds::reset::Response &)) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v6 = *a1;
  v7 = QMIServiceMsg::create((QMIServiceMsg *)v11, v5);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v16 = 3221225472;
  *((_QWORD *)&v16 + 1) = sub_10172A60C;
  v17 = &unk_1021C6CE8;
  v18 = a2;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v6 + 16))(v6, v7, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_101721028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101721048(_QWORD *a1, unsigned __int8 **a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  NSObject *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  const char *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  const char *v17;
  char *v18;
  const char *v19;
  ATCSCounted *v20;
  __int16 v21;
  const char *v22;
  uint64_t buf;
  __int16 v24;
  const char *v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    buf = 0x104000202;
    v24 = 2080;
    v25 = "QMI_PDS_SET_EVENT_REPORT";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", (uint8_t *)&buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v20 = (ATCSCounted *)0x104000202;
    v21 = 2080;
    v22 = "QMI_PDS_SET_EVENT_REPORT";
    LODWORD(v19) = 18;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,\n", &v20, v19);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const", "%s\n", v17);
    if (v18 != (char *)&buf)
      free(v18);
  }
  v6 = a2 + 1;
  v5 = a2[1];
  v7 = 126 - 2 * __clz((v5 - *a2) >> 1);
  if (v5 == *a2)
    v8 = 0;
  else
    v8 = v7;
  sub_10172A9C4(*a2, v5, v8, 1);
  v9 = sub_10172B4B0(*a2, *v6);
  if (*v6 == v9)
  {
    sub_10172A5D0(&v20, (QMIServiceMsg *)1);
    v16 = *a2;
    v15 = a2[1];
    while (v16 != v15)
    {
      QMIServiceMsg::createTlv(&buf, v20, *v16, 1u);
      Tlv::Writer::putByte((Tlv::Writer *)&buf, v16[1]);
      v16 += 2;
    }
    (*(void (**)(_QWORD, ATCSCounted *, Block_layout *))(*(_QWORD *)*a1 + 16))(*a1, v20, &stru_1021CD9E0);
    ATCSCounted::decRef(v20);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v11 = *v9;
      LODWORD(buf) = 16908544;
      BYTE4(buf) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "At least one duplicate tlv %{public}hhu", (uint8_t *)&buf, 5u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v12 = *v9;
      LODWORD(v20) = 16908544;
      BYTE4(v20) = v12;
      LODWORD(v19) = 5;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "At least one duplicate tlv %{public}hhu", &v20, v19);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const", "%s\n", v13);
      if (v14 != (char *)&buf)
        free(v14);
    }
  }
}

void sub_101721428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, ATCSCounted *a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_101721460(id a1, const void *a2)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Recvd,QMI", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    LOWORD(v14[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Recvd,QMI", v14, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*((_WORD *)a2 + 22))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v5 = *((unsigned __int16 *)a2 + 6);
      v6 = *((unsigned __int16 *)a2 + 22);
      *(_DWORD *)buf = 67240448;
      v18 = v5;
      v19 = 1026;
      v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "QMI response=0x%{public}02x,code:0x%{public}02x", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDA00);
      v9 = *((unsigned __int16 *)a2 + 6);
      v10 = *((unsigned __int16 *)a2 + 22);
      v14[0] = 67240448;
      v14[1] = v9;
      v15 = 1026;
      v16 = v10;
      LODWORD(v13) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "QMI response=0x%{public}02x,code:0x%{public}02x", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLQmiPdsMessenger::sendSetEventReport(std::vector<std::pair<SetEventReport, BOOL>>) const_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_101721760(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  const qmi::MutableMessageBase *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint8_t buf[8];
  __int128 v15;
  void *v16;
  uint64_t v17;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 32;
    LOWORD(v15) = 2080;
    *(_QWORD *)((char *)&v15 + 2) = "QMI_PDS_GET_GPS_SERVICE_STATE";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v11[0] = 67109378;
    v11[1] = 32;
    v12 = 2080;
    v13 = "QMI_PDS_GET_GPS_SERVICE_STATE";
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,\n", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendGetServiceState(void (^)(const pds::getServiceState::Response &)) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0x20u);
  v5 = *a1;
  v7 = QMIServiceMsg::create((QMIServiceMsg *)v11, v6);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v15 = 3221225472;
  *((_QWORD *)&v15 + 1) = sub_10172B544;
  v16 = &unk_1021C6CE8;
  v17 = a2;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v5 + 16))(v5, v7, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1017219A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1017219C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const qmi::MutableMessageBase *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[8];
  _BYTE v19[24];
  uint64_t v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 33;
    *(_WORD *)v19 = 2080;
    *(_QWORD *)&v19[2] = "QMI_PDS_SET_GPS_SERVICE_STATE";
    *(_WORD *)&v19[10] = 2048;
    *(_QWORD *)&v19[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,allowedServices, 0x%08llX\n", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14 = 2080;
    v15 = "QMI_PDS_SET_GPS_SERVICE_STATE";
    v16 = 2048;
    v17 = a2;
    LODWORD(v12) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,allowedServices, 0x%08llX\n", &v13, v12, 0x2104000302);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetServiceState(std::underlying_type<qmi::pds::ServiceState>::type, void (^)(const pds::setServiceState::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10186400C(a2, (qmi::MutableMessageBase *)&v13);
  v7 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)&v13, v8);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v19 = 3221225472;
  *(_QWORD *)&v19[8] = sub_10172B7DC;
  *(_QWORD *)&v19[16] = &unk_1021C6CE8;
  v20 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v7 + 16))(v7, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v13);
}

void sub_101721C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101721C44(uint64_t *a1, char a2, int a3, int a4, int a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  const qmi::MutableMessageBase *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  int v19;
  _BYTE v20[12];
  _BYTE v21[5];
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[8];
  _BYTE v26[32];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)&buf[4] = 42;
    *(_WORD *)v26 = 2080;
    *(_DWORD *)buf = 67110402;
    *(_QWORD *)&v26[2] = "QMI_PDS_SET_DEFAULT_TRACKING_SESSION";
    *(_WORD *)&v26[10] = 256;
    v26[12] = a2;
    *(_WORD *)&v26[13] = 1024;
    *(_DWORD *)&v26[15] = a3;
    *(_WORD *)&v26[19] = 1024;
    *(_DWORD *)&v26[21] = a4;
    *(_WORD *)&v26[25] = 1024;
    *(_DWORD *)&v26[27] = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mode, %hhu, timeout, %hhu, interval,%u, accuracy, %u", buf, 0x27u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    *(_WORD *)v20 = 2080;
    *(_QWORD *)&v20[2] = "QMI_PDS_SET_DEFAULT_TRACKING_SESSION";
    *(_WORD *)&v20[10] = 256;
    *(_DWORD *)v21 = a3;
    v21[4] = 0;
    HIBYTE(v22) = HIBYTE(a4);
    v23 = 1024;
    v24 = a5;
    LODWORD(v18) = 39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,mode, %hhu, timeout, %hhu, interval,%u, accuracy, %u", &v19, v18, 67110402, *(_DWORD *)v20, *(_DWORD *)&v20[8], *(_DWORD *)&v21[1]);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetDefaultTrackingSession(qmi::pds::SessionOperatingMode_t, uint8_t, uint32_t, uint32_t, void (^)(const pds::setDefaultTrackingSession::Response &)) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_101864318(a2, a3, a4, a5, (qmi::MutableMessageBase *)&v19);
  v13 = *a1;
  v15 = QMIServiceMsg::create((QMIServiceMsg *)&v19, v14);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v26 = 3221225472;
  *(_QWORD *)&v26[8] = sub_10172BB94;
  *(_QWORD *)&v26[16] = &unk_1021C6CE8;
  *(_QWORD *)&v26[24] = a6;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, v15, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v19);
}

void sub_101721F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101721F20(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const qmi::MutableMessageBase *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint8_t buf[8];
  __int128 v19;
  void *v20;
  uint64_t v21;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 49;
    LOWORD(v19) = 2080;
    *(_QWORD *)((char *)&v19 + 2) = "QMI_PDS_SET_AUTO_TRACKING_STATE";
    WORD5(v19) = 1024;
    HIDWORD(v19) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,enable, %d\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14 = 2080;
    v15 = "QMI_PDS_SET_AUTO_TRACKING_STATE";
    v16 = 1024;
    v17 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,enable, %d\n", &v13, v12, 67109634);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetAutoTrackingState(BOOL, void (^)(const pds::setAutoTrackingState::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  sub_10186438C(a2, (qmi::MutableMessageBase *)&v13);
  v7 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)&v13, v8);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v19 = 3221225472;
  *((_QWORD *)&v19 + 1) = sub_10172BF4C;
  v20 = &unk_1021C6CE8;
  v21 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v7 + 16))(v7, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v13);
}

void sub_101722188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1017221A4(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  const qmi::MutableMessageBase *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  _BYTE v11[32];
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  uint8_t buf[8];
  __int128 v16;
  void *v17;
  uint64_t v18;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11, 0x2Du);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = 45;
    LOWORD(v16) = 2080;
    *(_QWORD *)((char *)&v16 + 2) = "QMI_PDS_FORCE_XTRA_DOWNLOAD";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,\n", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v12[0] = 67109378;
    v12[1] = 45;
    v13 = 2080;
    v14 = "QMI_PDS_FORCE_XTRA_DOWNLOAD";
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,\n", v12, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendForceXTRADownload(void (^)(const pds::forceXTRADownload::Response &)) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v6 = *a1;
  v7 = QMIServiceMsg::create((QMIServiceMsg *)v11, v5);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v16 = 3221225472;
  *((_QWORD *)&v16 + 1) = sub_10172C304;
  v17 = &unk_1021C6CE8;
  v18 = a2;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v6 + 16))(v6, v7, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1017223E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101722408(uint64_t *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11)
{
  NSObject *v18;
  const qmi::MutableMessageBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  _DWORD v26[8];
  int v27;
  _BYTE v28[12];
  int v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[8];
  __int128 v42;
  void *v43;
  _BYTE v44[10];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;

  HIDWORD(v25) = a8;
  sub_10186407C(a3, a4, a5, a6, a7, a8, a9, (qmi::MutableMessageBase *)v26, a10);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67111682;
    *(_DWORD *)&buf[4] = 52;
    LOWORD(v42) = 2080;
    *(_QWORD *)((char *)&v42 + 2) = "QMI_PDS_RESET_GPS_SERVICE_DATA";
    WORD5(v42) = 1024;
    HIDWORD(v42) = a2;
    LOWORD(v43) = 1024;
    *(_DWORD *)((char *)&v43 + 2) = a3;
    HIWORD(v43) = 1024;
    *(_DWORD *)v44 = a4;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)&v44[6] = a5;
    v45 = 1024;
    v46 = a6;
    v47 = 1024;
    v48 = a7;
    v49 = 1024;
    v50 = HIDWORD(v25);
    v51 = 1024;
    v52 = a9;
    v53 = 1024;
    v54 = a10;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,resetGpsServiceData,gpsDataMask,%x,cell,%x,common,%x,gps,%x,glo,%x,bds,%x,qzss,%x,gal,%x,nic,%x", buf, 0x48u);
  }
  v20 = a1;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    *(_WORD *)v28 = 2080;
    *(_QWORD *)&v28[2] = "QMI_PDS_RESET_GPS_SERVICE_DATA";
    *(_WORD *)&v28[10] = 1024;
    LOWORD(v29) = 1024;
    HIWORD(v29) = a3;
    HIWORD(v30) = HIWORD(a5);
    v31 = 1024;
    v32 = a6;
    v33 = 1024;
    v34 = a7;
    v35 = 1024;
    v36 = HIDWORD(v25);
    v37 = 1024;
    v38 = a9;
    v39 = 1024;
    v40 = a10;
    LODWORD(v25) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,resetGpsServiceData,gpsDataMask,%x,cell,%x,common,%x,gps,%x,glo,%x,bds,%x,qzss,%x,gal,%x,nic,%x", &v27, v25, v26[0], v26[2], v26[4], v26[6], 67111682, *(_DWORD *)v28, *(_DWORD *)&v28[8], v29, a4);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendResetGpsServiceState(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, void (^)(const pds::resetGpsServiceData::Response &)) const", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v21 = *v20;
  v22 = QMIServiceMsg::create((QMIServiceMsg *)v26, v19);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v42 = 3221225472;
  *((_QWORD *)&v42 + 1) = sub_10172C6BC;
  v43 = &unk_1021C6CE8;
  *(_QWORD *)v44 = a11;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v21 + 16))(v21, v22, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v26);
}

void sub_10172274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_10172276C(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  sub_10186A0B0(a2, (qmi::MutableMessageBase *)v13);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 95;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_EXT_SET_CELLDB_CONTROL";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,mask,%x", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 95;
    v15 = 2080;
    v16 = "QMI_PDS_EXT_SET_CELLDB_CONTROL";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,mask,%x", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendSetCellDbControlMask(uint32_t, void (^)(const pds::setCellDbControlMask::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10172CA74;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1017229D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1017229F4(uint64_t *a1, int a2, int a3, char **a4, uint64_t a5)
{
  NSObject *v10;
  const qmi::MutableMessageBase *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  _DWORD v17[8];
  _DWORD v18[2];
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[8];
  __int128 v26;
  void *v27;
  uint64_t v28;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17, 0x37u);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = 55;
    LOWORD(v26) = 2080;
    *(_QWORD *)((char *)&v26 + 2) = "QMI_PDS_INJECT_XTRA_DATA";
    WORD5(v26) = 1024;
    HIDWORD(v26) = a2;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,seqNum,%d,totalLen,%d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v18[0] = 67109890;
    v18[1] = 55;
    v19 = 2080;
    v20 = "QMI_PDS_INJECT_XTRA_DATA";
    v21 = 1024;
    v22 = a2;
    v23 = 1024;
    v24 = a3;
    LODWORD(v16) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,seqNum,%d,totalLen,%d", v18, v16, v17[0], v17[2]);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectXTRAData(uint8_t, uint32_t, const std::vector<uint8_t> &, void (^)(const pds::injectXTRAData::Response &)) const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  if (sub_10186A8D0(a2, a3, a4, (uint64_t)v17))
  {
    v12 = *a1;
    v13 = QMIServiceMsg::create((QMIServiceMsg *)v17, v11);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v26 = 3221225472;
    *((_QWORD *)&v26 + 1) = sub_10172CE2C;
    v27 = &unk_1021C6CE8;
    v28 = a5;
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, v13, buf);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_101722C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_101722CB4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  const qmi::MutableMessageBase *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  _BYTE v20[12];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[8];
  _BYTE v27[32];
  __int16 v28;
  int v29;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)&buf[4] = 61;
    *(_WORD *)v27 = 2080;
    *(_DWORD *)buf = 67110402;
    *(_QWORD *)&v27[2] = "QMI_PDS_INJECT_ABSOLUTE_TIME_REF";
    *(_WORD *)&v27[10] = 2048;
    *(_QWORD *)&v27[12] = a2;
    *(_WORD *)&v27[20] = 1024;
    *(_DWORD *)&v27[22] = a3;
    *(_WORD *)&v27[26] = 1024;
    *(_DWORD *)&v27[28] = a4;
    v28 = 1024;
    v29 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,timeMs,%llu,timeUncMs,%u,timeBase,%u,forceFlag,%d\n", buf, 0x2Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    *(_WORD *)v20 = 2080;
    *(_QWORD *)&v20[2] = "QMI_PDS_INJECT_ABSOLUTE_TIME_REF";
    *(_WORD *)&v20[10] = 2048;
    HIWORD(v21) = HIWORD(a3);
    v22 = 1024;
    v23 = a4;
    v24 = 1024;
    v25 = a5;
    LODWORD(v18) = 46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,timeMs,%llu,timeUncMs,%u,timeBase,%u,forceFlag,%d\n", &v19, v18, 0x3D04000602, *(_DWORD *)v20, *(_DWORD *)&v20[8], HIDWORD(a2));
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendInjectAbsoluteTimeRef(uint64_t, uint32_t, qmi::pds::AbsoluteTimeBase, BOOL, void (^)(const pds::injectAbsTimeRef::Response &)) const", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_1018643DC(a2, a3, a4, a5, (qmi::MutableMessageBase *)&v19);
  v13 = *a1;
  v15 = QMIServiceMsg::create((QMIServiceMsg *)&v19, v14);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)v27 = 3221225472;
  *(_QWORD *)&v27[8] = sub_10172D1E4;
  *(_QWORD *)&v27[16] = &unk_1021C6CE8;
  *(_QWORD *)&v27[24] = a6;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, v15, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v19);
}

void sub_101722F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_101722F90(uint64_t *a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const qmi::MutableMessageBase *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  _DWORD v13[8];
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint8_t buf[8];
  __int128 v20;
  void *v21;
  uint64_t v22;

  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x49u);
  *sub_10172D59C((uint64_t)v13, 1) = a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDA00);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = 73;
    LOWORD(v20) = 2080;
    *(_QWORD *)((char *)&v20 + 2) = "QMI_PDS_SET_FORCE_RECEIVER_OFF";
    WORD5(v20) = 1024;
    HIDWORD(v20) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,QMI,0x%04X,%s,forceReceiverOff, %d\n", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDA00);
    v14[0] = 67109634;
    v14[1] = 73;
    v15 = 2080;
    v16 = "QMI_PDS_SET_FORCE_RECEIVER_OFF";
    v17 = 1024;
    v18 = a2;
    LODWORD(v12) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#bb.e,QMI,0x%04X,%s,forceReceiverOff, %d\n", v14, v12, v13[0]);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLQmiPdsMessenger::sendForceReceiverOff(BOOL, void (^)(const pds::forceReceiverOff::Response &)) const", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v8 = *a1;
  v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v7);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 3221225472;
  *((_QWORD *)&v20 + 1) = sub_10172D77C;
  v21 = &unk_1021C6CE8;
  v22 = a3;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v8 + 16))(v8, v9, buf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

