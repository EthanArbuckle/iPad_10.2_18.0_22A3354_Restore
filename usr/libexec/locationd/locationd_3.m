void sub_1001BAA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001BAA8C()
{
  operator new();
}

void sub_1001BAAFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_1001BAB40(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)buf = 138412802;
    v17 = v5;
    v18 = 1024;
    v19 = a2;
    v20 = 1024;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Background indicator enabled for %@ is now %d (was %d)", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(unsigned __int8 *)(a1 + 56);
    v10 = 138412802;
    v11 = v7;
    v12 = 1024;
    v13 = a2;
    v14 = 1024;
    v15 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Background indicator enabled for %@ is now %d (was %d)", &v10, 24);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::setBackgroundIndicatorEnabled(BOOL)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  if (*(unsigned __int8 *)(a1 + 56) != a2)
  {
    *(_BYTE *)(a1 + 56) = a2;
    sub_1001B40C8(a1);
  }
}

void sub_1001BAD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_1001CCF14(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1001BAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BAF64(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102196BA0);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102196BA0);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_1001BB14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1001BB168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100018F20(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1001BB368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1001BB390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_1001CD0F8(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1001BB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BB5B8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10219D1D0);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10219D1D0);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_1001BB7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_1001BB7BC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100F99624(a1 + 8, a2, a3);
}

void sub_1001BB7C4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_101070CF4(a1 + 8, a2, a3);
}

void sub_1001BB7CC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB9118(a1 + 8, a2, a3);
}

void sub_1001BB7D4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB6344(a1 + 8, a2, a3);
}

void sub_1001BB7DC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB219C(a1 + 8, a2, a3);
}

void sub_1001BB7E4(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  _UNKNOWN **v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_102196B00);
  v5 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v6;
    v26 = 1024;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MotionActivityUpdate request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v11 = *(_QWORD *)(a1 + 24);
    v21 = 138412546;
    v22 = v11;
    v23 = 1024;
    v24 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Received MotionActivityUpdate request,client,%@,subscribe,%d", &v21, 18);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionActivitySubscription::handleRequestMotionActivityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if ((sub_1001CD634() & 1) != 0)
  {
    if ((sub_1001BBC08(a1) & 1) != 0)
    {
      sub_1001A638C(a1);
      v7 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(v7 + 8);
      v8 = *(void **)(v7 + 16);
      if (a2)
        objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 1, 0);
      else
        objc_msgSend(v8, "unregister:forNotification:", v9, 1);
    }
    else
    {
      v17 = CMErrorMessage;
      v18 = &off_10221C470;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      sub_100F993E4(a1, buf);
    }
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v10 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Cannot subscribe to motion activity updates, motion activity is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102196B00);
      LOWORD(v21) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Cannot subscribe to motion activity updates, motion activity is not available", &v21, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionActivitySubscription::handleRequestMotionActivityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v19 = CMErrorMessage;
    v20 = &off_10221C458;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    sub_100F993E4(a1, buf);
  }

}

void sub_1001BBBC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001BBC08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32));
}

void sub_1001BBC18(uint64_t a1, int a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  unint64_t v23;
  const __CFString *v24;
  id v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  _DWORD buf[3];
  __int16 v31;
  uint64_t v32;

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  v23 = 0xBFF0000000000000;
  sub_1001FD98C(a3, "kCLConnectionMessageHeadingFilterKey", &v23);
  if (*(_BYTE *)(a1 + 56))
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 64) = v23;
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10219D130);
      v7 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 24);
        v9 = *(_QWORD *)(a1 + 64);
        buf[0] = 138412546;
        *(_QWORD *)&buf[1] = v8;
        v31 = 2048;
        v32 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to compass filter %.2f", (uint8_t *)buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10219D130);
        v16 = *(_QWORD *)(a1 + 24);
        v17 = *(_QWORD *)(a1 + 64);
        v26 = 138412546;
        v27 = v16;
        v28 = 2048;
        v29 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "client '%@' subscribing to compass filter %.2f", &v26, 22);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)", "%s\n", v18);
        if (v19 != (char *)buf)
          free(v19);
      }
      if (!*(_QWORD *)(a1 + 168))
      {
        v24 = CFSTR("ClientName");
        v25 = objc_msgSend(*(id *)(a1 + 24), "description");
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
        objc_msgSend(*(id *)(a1 + 8), "silo");
        operator new();
      }
      if (!*(_QWORD *)(a1 + 48))
        operator new();
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_10219D130);
      v10 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_QWORD *)(a1 + 24);
        buf[0] = 138412290;
        *(_QWORD *)&buf[1] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from compass", (uint8_t *)buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_10219D130);
        v20 = *(_QWORD *)(a1 + 24);
        v26 = 138412290;
        v27 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "client '%@' unsubscribing from compass", &v26, 12);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)", "%s\n", v21);
        if (v22 != (char *)buf)
          free(v22);
      }
      if (*(_QWORD *)(a1 + 168))
      {
        v12 = sub_1000A5944();
        sub_1000A4A6C(v12, 0, *(_QWORD *)(a1 + 168));
        v13 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      v14 = *(_QWORD *)(a1 + 48);
      if (v14)
      {
        sub_100EAE17C(v14);
        sub_100EAE908(*(_QWORD *)(a1 + 48));
        v15 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
  *(_OWORD *)(a1 + 104) = xmmword_101BB5688;
  *(_OWORD *)(a1 + 120) = unk_101BB5698;
  *(_OWORD *)(a1 + 136) = xmmword_101BB56A8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_101BB5668;
  *(_OWORD *)(a1 + 88) = unk_101BB5678;
  sub_1001A638C(a1);

}

void sub_1001BC140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_1001BC1D8(uint64_t a1, unsigned int a2, uint64_t a3, const std::string *a4, __int128 *a5, double a6, double a7, double a8)
{
  _BYTE *v8;
  uint64_t *v9;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  const char *v19;
  double v20;
  double v21;
  int v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  NSObject *v27;
  const char *v28;
  double v29;
  double v30;
  NSObject *v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  int v41;
  int v43;
  _QWORD *v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  _BYTE *v49;
  char v50;
  uint64_t v51;
  _BYTE *v52;
  __int128 v53;
  NSObject *v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  int v59;
  char v60;
  uint64_t v61;
  _BOOL4 v62;
  NSObject *v63;
  _BYTE *v64;
  NSObject *v65;
  _BYTE *v66;
  int v67;
  NSObject *v68;
  double v69;
  double v70;
  _BYTE *v71;
  uint64_t v72;
  double v73;
  double v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  BOOL v78;
  uint64_t v79;
  NSObject *v80;
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  unsigned int v85;
  _BYTE *v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  NSObject *v91;
  int v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  const char *v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  double v107;
  float32_t v108;
  NSObject *v109;
  int v110;
  int v111;
  _BYTE *v112;
  _QWORD *v113;
  _BOOL4 v114;
  unsigned int v115;
  _BOOL4 v116;
  int v117;
  BOOL v118;
  char v119;
  NSObject *v120;
  _BYTE *v121;
  _QWORD *v122;
  char v123;
  NSObject *v124;
  _BYTE *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  NSObject *v129;
  int v130;
  int v131;
  _BYTE *v132;
  uint64_t v133;
  int v134;
  int v135;
  _BYTE *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  const char *v141;
  double v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  _BYTE *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _BYTE *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  const char *v156;
  double v157;
  double v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  _BYTE *v162;
  char *v163;
  char *v164;
  void *v165;
  uint64_t v166;
  unsigned int v167;
  const char *v168;
  const char *v169;
  char *v170;
  uint64_t v171;
  unsigned int v172;
  const char *v173;
  double v174;
  double v175;
  int v176;
  _BYTE *v177;
  int v178;
  _BYTE *v179;
  _BYTE *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  const char *v184;
  double v185;
  double v186;
  const char *v187;
  char *v188;
  int v189;
  const char *v190;
  uint64_t v191;
  _BYTE *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  _BYTE *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  const char *v200;
  double v201;
  double v202;
  uint64_t v203;
  const char *v204;
  char *v205;
  uint64_t v206;
  int v207;
  _BYTE *v208;
  _BYTE *v209;
  _BYTE *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  _BYTE *v214;
  char *v215;
  int v216;
  const char *v217;
  char *v218;
  const char *v219;
  char *v220;
  uint64_t v221;
  int v222;
  _BYTE *v223;
  _BYTE *v224;
  _BYTE *v225;
  char *v226;
  char *v227;
  const char *v228;
  char *v229;
  const char *v230;
  uint64_t v231;
  const char *v232;
  int v233;
  int v234;
  double v235;
  int v236;
  const char *v237;
  uint64_t v238;
  int v239;
  const char *v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t **v249;
  uint64_t v250;
  _QWORD v251[6];
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  std::string v259;
  double v260;
  double v261;
  unsigned int v262;
  _BYTE __p[14];
  double v264;
  _BYTE v265[20];
  _BYTE v266[12];
  __int16 v267;
  _BYTE *v268;
  char v269;
  _BYTE v270[48];
  __int16 v271;
  int v272;
  __int16 v273;
  _BYTE *v274;
  _BYTE buf[48];
  __int16 v276;
  int v277;
  __int16 v278;
  _BYTE *v279;

  v262 = a2;
  v260 = a7;
  v261 = a6;
  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_1019373D0();
    __break(1u);
    goto LABEL_315;
  }
  sub_1000C1928((uint64_t)&v257, &v262);
  std::string::operator=(&v259, a4);
  v14 = a5[1];
  v254 = *a5;
  v255 = v14;
  v256 = *((_QWORD *)a5 + 4);
  v15 = sub_1001CDA64(a1, v257);
  v16 = v15;
  v8 = __p;
  if (!*(_BYTE *)v15)
  {
    v9 = &qword_1022A0000;
    if (qword_1022A0020 == -1)
    {
LABEL_33:
      v34 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v35 = v262;
        v36 = sub_1001CC818(v262);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v35;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)(v8 + 154) = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, type, %d, %s, not active", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v9[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v166 = qword_1022A0028;
        v167 = v262;
        v168 = sub_1001CC818(v262);
        *(_DWORD *)v270 = 67109378;
        *(_DWORD *)&v270[4] = v167;
        *(_WORD *)&v270[8] = 2080;
        *(_QWORD *)(v8 + 90) = v168;
        LODWORD(v230) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v166, 2, "TILE: requestDownload, type, %d, %s, not active", v270, v230);
        v170 = (char *)v169;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v169);
        if (v170 != buf)
          free(v170);
      }
      goto LABEL_36;
    }
LABEL_315:
    dispatch_once(&qword_1022A0020, &stru_102197858);
    goto LABEL_33;
  }
  sub_1001CB024((uint64_t)&v257, a3, v261, v260, *(double *)(v15 + 152), *(double *)(v15 + 160));
  if (!sub_1001C8DA8((unsigned int *)&v257))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134284545;
      *(double *)&buf[4] = v261;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v260;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v257;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = DWORD1(v257);
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = DWORD2(v257);
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_50;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    *(_DWORD *)v270 = 134284545;
    *(double *)&v270[4] = v261;
    *(_WORD *)&v270[12] = 2049;
    *(double *)&v270[14] = v260;
    *(_WORD *)&v270[22] = 1024;
    *(_DWORD *)&v270[24] = v257;
    *(_WORD *)&v270[28] = 1024;
    *(_DWORD *)&v270[30] = DWORD1(v257);
    *(_WORD *)&v270[34] = 1024;
    *(_DWORD *)&v270[36] = DWORD2(v257);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", v270, 40);
    v33 = (char *)v39;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v39);
    goto LABEL_340;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v17 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v18 = v262;
    v19 = sub_1001CC818(v262);
    v248 = a3;
    v20 = v260;
    v21 = v261;
    sub_100BCC240((unsigned int *)&v257, v270);
    v22 = v270[23];
    v23 = *(_BYTE **)v270;
    v24 = *(_DWORD *)(a1 + 424);
    sub_100FA4168((double *)a5, __p);
    v25 = v270;
    if (v22 < 0)
      v25 = v23;
    v26 = __p;
    if (v265[1] < 0)
      v26 = *(_BYTE **)__p;
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v19;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v21;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v20;
    *(_WORD *)&buf[38] = 2080;
    *(_QWORD *)&buf[40] = v25;
    v276 = 1024;
    v277 = v24;
    v278 = 2080;
    v279 = v26;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s", buf, 0x40u);
    if ((v265[1] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    a3 = v248;
    if ((v270[23] & 0x80000000) != 0)
      operator delete(*(void **)v270);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v171 = qword_1022A0028;
    v172 = v262;
    v173 = sub_1001CC818(v262);
    v247 = a1;
    v250 = a3;
    v174 = v260;
    v175 = v261;
    sub_100BCC240((unsigned int *)&v257, __p);
    v176 = v265[1];
    v177 = *(_BYTE **)__p;
    v178 = *(_DWORD *)(v247 + 424);
    sub_100FA4168((double *)a5, v266);
    v179 = __p;
    if (v176 < 0)
      v179 = v177;
    if (v269 >= 0)
      v180 = v266;
    else
      v180 = *(_BYTE **)v266;
    *(_DWORD *)v270 = 67110658;
    *(_DWORD *)&v270[4] = v172;
    *(_WORD *)&v270[8] = 2080;
    *(_QWORD *)&v270[10] = v173;
    *(_WORD *)&v270[18] = 2048;
    *(double *)&v270[20] = v175;
    *(_WORD *)&v270[28] = 2048;
    *(double *)&v270[30] = v174;
    *(_WORD *)&v270[38] = 2080;
    *(_QWORD *)&v270[40] = v179;
    v271 = 1024;
    v272 = v178;
    v273 = 2080;
    v274 = v180;
    LODWORD(v230) = 64;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v171, 2, "TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s", v270, v230, *(double *)&v232, v235, v237, v239, v240);
    v182 = v181;
    if (v269 < 0)
      operator delete(*(void **)v266);
    a1 = v247;
    a3 = v250;
    if ((v265[1] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v182);
    if (v182 != buf)
      free(v182);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v27 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v28 = sub_1001CC818(v257);
    v29 = sub_1001C087C((uint64_t)&v257);
    v30 = sub_1001C0858((uint64_t)&v257);
    *(_DWORD *)buf = 136446723;
    *(_QWORD *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2049;
    *(double *)&buf[24] = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v183 = qword_1022A0048;
    v184 = sub_1001CC818(v257);
    v185 = sub_1001C087C((uint64_t)&v257);
    v186 = sub_1001C0858((uint64_t)&v257);
    *(_DWORD *)v270 = 136446723;
    *(_QWORD *)&v270[4] = v184;
    *(_WORD *)&v270[12] = 2049;
    *(double *)&v270[14] = v185;
    *(_WORD *)&v270[22] = 2049;
    *(double *)&v270[24] = v186;
    LODWORD(v230) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v183, 1, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", v270, v230);
    v188 = (char *)v187;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v187);
    if (v188 != buf)
      free(v188);
  }
  if (!*(_BYTE *)(a1 + 201))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v40 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v41 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_50;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v189 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)v270 = 67109120;
    *(_DWORD *)&v270[4] = v189;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d", v270);
    v33 = (char *)v190;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v190);
    goto LABEL_340;
  }
  if (a3 != -1 || !*(_BYTE *)(v16 + 176))
  {
    v43 = *(int *)(a1 + 424) > 1 || *(_BYTE *)(a1 + 496) != 0;
    v249 = (uint64_t **)(a1 + 112);
    v44 = sub_1001C8840(a1 + 112, (uint64_t)&v257);
    v246 = v16 + 184;
    v45 = sub_1001C0618(v16 + 184, (unsigned int *)&v257);
    if (v45)
    {
      v46 = sub_1001C85FC(v246, (unsigned int *)&v257);
      v47 = sub_1001C9408(v46, *(_BYTE *)(a1 + 200)) ^ 1;
    }
    else
    {
      v47 = 0;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v245 = (_QWORD *)(a1 + 120);
    v48 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_100BCC240((unsigned int *)&v257, v270);
      v49 = v270[23] >= 0 ? v270 : *(_BYTE **)v270;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v49;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v45;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v245 != v44;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v47;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d", buf, 0x1Eu);
      if ((v270[23] & 0x80000000) != 0)
        operator delete(*(void **)v270);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v191 = qword_1022A0028;
      sub_100BCC240((unsigned int *)&v257, __p);
      if (v265[1] >= 0)
        v192 = __p;
      else
        v192 = *(_BYTE **)__p;
      *(_DWORD *)v270 = 136315906;
      *(_QWORD *)&v270[4] = v192;
      *(_WORD *)&v270[12] = 1024;
      *(_DWORD *)&v270[14] = v45;
      *(_WORD *)&v270[18] = 1024;
      *(_DWORD *)&v270[20] = v245 != v44;
      *(_WORD *)&v270[24] = 1024;
      *(_DWORD *)&v270[26] = v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v191, 2, "TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d", v270, 30, (_DWORD)v232, LODWORD(v235));
      v194 = v193;
      if ((v265[1] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v194);
      if (v194 != buf)
        free(v194);
    }
    v50 = !v45;
    if (((!v45 | v47) & 1) != 0)
    {
      if (v245 != v44)
      {
        v51 = v44[10];
        v52 = (_BYTE *)(v51 + 112);
        if (*(_BYTE *)(v51 + 114))
          BYTE2(v254) = 1;
        if (*v52)
          LOBYTE(v254) = 1;
        if (*(_BYTE *)(v51 + 113))
          BYTE1(v254) = 1;
        v53 = v255;
        *(_OWORD *)v52 = v254;
        *(_OWORD *)(v51 + 128) = v53;
        *(_WORD *)(v51 + 144) = v256;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v54 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v51 + 16))(buf, v51);
          v55 = buf[23];
          v56 = *(_BYTE **)buf;
          sub_100FA4168((double *)&v254, v270);
          v57 = buf;
          if (v55 < 0)
            v57 = v56;
          if (v270[23] >= 0)
            v58 = v270;
          else
            v58 = *(_BYTE **)v270;
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = v57;
          *(_WORD *)&__p[12] = 2080;
          v264 = *(double *)&v58;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, will be downloaded, details, %s", __p, 0x16u);
          if ((v270[23] & 0x80000000) != 0)
            operator delete(*(void **)v270);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v206 = qword_1022A0028;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v51 + 16))(v270, v51);
          v207 = v270[23];
          v208 = *(_BYTE **)v270;
          sub_100FA4168((double *)&v254, __p);
          v209 = v270;
          if (v207 < 0)
            v209 = v208;
          if (v265[1] >= 0)
            v210 = __p;
          else
            v210 = *(_BYTE **)__p;
          *(_DWORD *)v266 = 136315394;
          *(_QWORD *)&v266[4] = v209;
          v267 = 2080;
          v268 = v210;
          LODWORD(v230) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v206, 2, "TILE: requestDownload, tileid, %s, will be downloaded, details, %s", v266, v230);
          v212 = v211;
          if ((v265[1] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if ((v270[23] & 0x80000000) != 0)
            operator delete(*(void **)v270);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v212);
          if (v212 != buf)
            free(v212);
        }
        v59 = 0;
        v60 = 1;
        goto LABEL_159;
      }
      if (!*(_BYTE *)(a1 + 200))
        v50 = 1;
      if ((v50 & 1) == 0 && ((v47 ^ 1) & 1) == 0)
      {
        v67 = *(_DWORD *)(a1 + 424);
        if (v67 == 2)
        {
          v59 = 1;
        }
        else
        {
          v78 = v67 != 1 || BYTE2(v254) == 0;
          v59 = !v78;
        }
        v79 = sub_1001C85FC(v246, (unsigned int *)&v257);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v80 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v79 + 16))(v270, v79);
          v81 = v270[23];
          v82 = *(_BYTE **)v270;
          sub_100FA4168((double *)&v254, __p);
          v83 = v270;
          if (v81 < 0)
            v83 = v82;
          if (v265[1] >= 0)
            v84 = __p;
          else
            v84 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v83;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v84;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = BYTE2(v254);
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v59;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d", buf, 0x22u);
          if ((v265[1] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if ((v270[23] & 0x80000000) != 0)
            operator delete(*(void **)v270);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v221 = qword_1022A0028;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v79 + 16))(__p, v79);
          v222 = v265[1];
          v223 = *(_BYTE **)__p;
          sub_100FA4168((double *)&v254, v266);
          v224 = __p;
          if (v222 < 0)
            v224 = v223;
          if (v269 >= 0)
            v225 = v266;
          else
            v225 = *(_BYTE **)v266;
          *(_DWORD *)v270 = 136315906;
          *(_QWORD *)&v270[4] = v224;
          *(_WORD *)&v270[12] = 2080;
          *(_QWORD *)&v270[14] = v225;
          *(_WORD *)&v270[22] = 1024;
          *(_DWORD *)&v270[24] = BYTE2(v254);
          *(_WORD *)&v270[28] = 1024;
          *(_DWORD *)&v270[30] = v59;
          LODWORD(v230) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v221, 2, "TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d", v270, v230, (_DWORD)v232, LODWORD(v235));
          v227 = v226;
          if (v269 < 0)
            operator delete(*(void **)v266);
          if ((v265[1] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v227);
          if (v227 != buf)
            free(v227);
        }
        goto LABEL_158;
      }
      if (v45)
      {
        v59 = 0;
LABEL_158:
        v60 = 0;
        goto LABEL_159;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v68 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v69 = v260;
        v70 = v261;
        sub_100FA4168((double *)&v254, v270);
        v71 = v270[23] >= 0 ? v270 : *(_BYTE **)v270;
        *(_DWORD *)buf = 134218498;
        *(double *)&buf[4] = v70;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v69;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = v71;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", buf, 0x20u);
        if ((v270[23] & 0x80000000) != 0)
          operator delete(*(void **)v270);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_113:
        v60 = 0;
        v59 = 1;
LABEL_159:
        v85 = v262;
        if (v262 == 1)
        {
          sub_1001E4804(buf);
          v86 = (_BYTE *)(a1 + 448);
          v87 = sub_1001E4874(*(uint64_t *)buf, "ForceDownloadDEMTiles", (BOOL *)(a1 + 448));
          v88 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v89 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          if (v87)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102197878);
            v91 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v92 = *v86;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v92;
              _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "TILE: DEM,fForceDownloadDEMTiles, %d", buf, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102197878);
              v216 = *v86;
              *(_DWORD *)v270 = 67109120;
              *(_DWORD *)&v270[4] = v216;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "TILE: DEM,fForceDownloadDEMTiles, %d", v270);
              v218 = (char *)v217;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v217);
              if (v218 != buf)
                free(v218);
            }
          }
          if (!*v86 && !sub_1001C08A0(a1 + 528, &v261, &v260))
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v93 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_INFO, "TILE: DEM, skip, tile is not available based on availability file", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              *(_WORD *)v270 = 0;
              LODWORD(v230) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "TILE: DEM, skip, tile is not available based on availability file", v270, v230);
              v229 = (char *)v228;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v228);
              if (v229 != buf)
                free(v229);
            }
            v59 = 0;
          }
          v85 = v262;
        }
        if (v85 == 2 && !sub_1001C09B0(a1 + 624, &v261, &v260))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v102 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "TILE: HRSE, skip, tile is not available based on availability file", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            *(_WORD *)v270 = 0;
            LODWORD(v230) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "TILE: HRSE, skip, tile is not available based on availability file", v270, v230);
            v220 = (char *)v219;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v219);
            if (v220 != buf)
              free(v220);
          }
        }
        else if (v59)
        {
          sub_101191978(*(_DWORD *)(v16 + 4), __p);
          v94 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          v253 = v94;
          sub_100FB9938(a1, &v253, (uint64_t)&v257, &v254);
          v95 = v253;
          v253 = 0;
          if (v95)
            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v96 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v97 = sub_1001CC818(v257);
            v98 = sub_1001C087C((uint64_t)&v257);
            v99 = sub_1001C0858((uint64_t)&v257);
            v100 = *(_QWORD *)(a1 + 128);
            *(_DWORD *)buf = 136446979;
            *(_QWORD *)&buf[4] = v97;
            *(_WORD *)&buf[12] = 2049;
            *(double *)&buf[14] = v98;
            *(_WORD *)&buf[22] = 2049;
            *(double *)&buf[24] = v99;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = v100;
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102197838);
            v199 = qword_1022A0048;
            v200 = sub_1001CC818(v257);
            v201 = sub_1001C087C((uint64_t)&v257);
            v202 = sub_1001C0858((uint64_t)&v257);
            v203 = *(_QWORD *)(a1 + 128);
            *(_DWORD *)v270 = 136446979;
            *(_QWORD *)&v270[4] = v200;
            *(_WORD *)&v270[12] = 2049;
            *(double *)&v270[14] = v201;
            *(_WORD *)&v270[22] = 2049;
            *(double *)&v270[24] = v202;
            *(_WORD *)&v270[32] = 2050;
            *(_QWORD *)&v270[34] = v203;
            LODWORD(v230) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v199, 0, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", v270, v230);
            v205 = (char *)v204;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v204);
            if (v205 != buf)
              free(v205);
          }
          v101 = *(_QWORD *)__p;
          *(_QWORD *)__p = 0;
          if (v101)
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
          v60 = 1;
        }
        *(_OWORD *)v270 = v257;
        *(_QWORD *)&v270[16] = v258;
        if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
          sub_100115CE4(&v270[24], v259.__r_.__value_.__l.__data_, v259.__r_.__value_.__l.__size_);
        else
          *(std::string *)&v270[24] = v259;
        v241 = v60;
        if ((v255 & 0x80000000) == 0)
        {
          v103 = -(int)v255;
          v242 = a1 + 624;
          v243 = a1 + 528;
          v104 = a1;
          v236 = a1 + 472;
          v233 = (2 * v255) | 1;
          v238 = 136446979;
          v234 = -(int)v255;
          HIDWORD(v231) = v255;
          while (1)
          {
            v106 = v233;
            v105 = v234;
            do
            {
              if (!(v105 | v103))
                goto LABEL_275;
              *(_OWORD *)v270 = v257;
              *(_QWORD *)&v270[16] = v258;
              std::string::operator=((std::string *)&v270[24], &v259);
              v107 = *(double *)(v16 + 160);
              v108 = *(double *)(v16 + 152);
              *(float *)&v107 = v107;
              sub_1001C85C8((uint64_t)v270, v103, v105, v108, *(float32x2_t *)&v107);
              if (sub_1001C8DA8((unsigned int *)v270))
              {
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_102197858);
                v109 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                {
                  v110 = *(_DWORD *)&v270[8];
                  v111 = *(_DWORD *)&v270[4];
                  sub_100BCC240((unsigned int *)v270, __p);
                  v112 = __p;
                  if (v265[1] < 0)
                    v112 = *(_BYTE **)__p;
                  *(_DWORD *)buf = 67110146;
                  *(_DWORD *)&buf[4] = v103;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v105;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = v110;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&buf[22] = v111;
                  *(_WORD *)&buf[26] = 2080;
                  *(_QWORD *)&buf[28] = v112;
                  _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
                  if ((v265[1] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_102197858);
                  v145 = qword_1022A0028;
                  v146 = *(_DWORD *)&v270[8];
                  v147 = *(_DWORD *)&v270[4];
                  sub_100BCC240((unsigned int *)v270, v266);
                  v148 = v266;
                  if (v269 < 0)
                    v148 = *(_BYTE **)v266;
                  *(_DWORD *)__p = 67110146;
                  *(_DWORD *)&__p[4] = v103;
                  *(_WORD *)&__p[8] = 1024;
                  *(_DWORD *)&__p[10] = v105;
                  LOWORD(v264) = 1024;
                  *(_DWORD *)((char *)&v264 + 2) = v146;
                  HIWORD(v264) = 1024;
                  *(_DWORD *)v265 = v147;
                  *(_WORD *)&v265[4] = 2080;
                  *(_QWORD *)&v265[6] = v148;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v145, 2, "TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", __p, 36, v233, v236, (const char *)v238);
                  v150 = v149;
                  if (v269 < 0)
                    operator delete(*(void **)v266);
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v150);
                  if (v150 != buf)
                    free(v150);
                }
                v113 = sub_1001C8840((uint64_t)v249, (uint64_t)v270);
                v114 = sub_1001C0618(v246, (unsigned int *)v270);
                v115 = v262;
                if (v262 == 1)
                {
                  *(double *)buf = sub_1001C087C((uint64_t)v270) + *(double *)(v16 + 152) * 0.5;
                  *(double *)__p = sub_1001C0858((uint64_t)v270) + *(double *)(v16 + 160) * 0.5;
                  if (!sub_1001C08A0(v243, (double *)buf, (double *)__p))
                    goto LABEL_275;
                  v115 = v262;
                }
                if (v115 != 2
                  || (*(double *)buf = sub_1001C087C((uint64_t)v270) + *(double *)(v16 + 152) * 0.5,
                      *(double *)__p = sub_1001C0858((uint64_t)v270) + *(double *)(v16 + 160) * 0.5,
                      sub_1001C09B0(v242, (double *)buf, (double *)__p)))
                {
                  v116 = v245 == v113;
                  if (*(_BYTE *)(v104 + 200))
                    v117 = 1;
                  else
                    v117 = v114;
                  if (*(_BYTE *)a5)
                    v118 = *((_BYTE *)a5 + 1) == 0;
                  else
                    v118 = 1;
                  v119 = !v118;
                  if (!v118)
                    v116 = 1;
                  if (v117 != 1 && v116)
                  {
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_102197858);
                    v120 = qword_1022A0028;
                    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                    {
                      sub_100BCC240((unsigned int *)v270, buf);
                      v121 = buf;
                      if (buf[23] < 0)
                        v121 = *(_BYTE **)buf;
                      *(_DWORD *)__p = 136315138;
                      *(_QWORD *)&__p[4] = v121;
                      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, adding neighbour, %s", __p, 0xCu);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_102197858);
                      v151 = qword_1022A0028;
                      sub_100BCC240((unsigned int *)v270, __p);
                      v152 = __p;
                      if (v265[1] < 0)
                        v152 = *(_BYTE **)__p;
                      *(_DWORD *)v266 = 136315138;
                      *(_QWORD *)&v266[4] = v152;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v151, 2, "TILE: requestDownload, adding neighbour, %s", v266);
                      v154 = v153;
                      if ((v265[1] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v154);
                      if (v154 != buf)
                        free(v154);
                    }
                    v122 = sub_1001C8840((uint64_t)v249, (uint64_t)v270);
                    v123 = v119 ^ 1;
                    if (v245 == v122)
                      v123 = 1;
                    if ((v123 & 1) != 0)
                    {
                      sub_101191978(*(_DWORD *)(v16 + 4), &v252);
                      sub_100FB9938(v104, &v252, (uint64_t)v270, &v254);
                      v139 = v252;
                      v252 = 0;
                      if (v139)
                        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
                      v241 = 1;
                    }
                    else
                    {
                      if (qword_1022A0020 != -1)
                        dispatch_once(&qword_1022A0020, &stru_102197858);
                      v124 = qword_1022A0028;
                      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                      {
                        sub_100BCC240((unsigned int *)v270, buf);
                        v125 = buf;
                        if (buf[23] < 0)
                          v125 = *(_BYTE **)buf;
                        *(_DWORD *)__p = 136315138;
                        *(_QWORD *)&__p[4] = v125;
                        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, neighbour already in download queue updating to cellular download, %s", __p, 0xCu);
                        if ((buf[23] & 0x80000000) != 0)
                          operator delete(*(void **)buf);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_102197858);
                        v161 = qword_1022A0028;
                        sub_100BCC240((unsigned int *)v270, __p);
                        v162 = __p;
                        if (v265[1] < 0)
                          v162 = *(_BYTE **)__p;
                        *(_DWORD *)v266 = 136315138;
                        *(_QWORD *)&v266[4] = v162;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v161, 2, "TILE: requestDownload, neighbour already in download queue updating to cellular download, %s", v266);
                        v164 = v163;
                        if ((v265[1] & 0x80000000) != 0)
                          operator delete(*(void **)__p);
                        sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v164);
                        if (v164 != buf)
                          free(v164);
                      }
                      *(_QWORD *)buf = v270;
                      v126 = sub_1008B9D6C(v249, (uint64_t)v270, (uint64_t)&unk_101B9EB60, (_OWORD **)buf)[10];
                      v127 = *a5;
                      v128 = a5[1];
                      *(_WORD *)(v126 + 144) = *((_WORD *)a5 + 16);
                      *(_OWORD *)(v126 + 112) = v127;
                      *(_OWORD *)(v126 + 128) = v128;
                    }
                    if (qword_1022A0040 != -1)
                      dispatch_once(&qword_1022A0040, &stru_102197838);
                    v140 = qword_1022A0048;
                    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
                    {
                      v141 = sub_1001CC818(*(unsigned int *)v270);
                      v142 = sub_1001C087C((uint64_t)v270);
                      v143 = sub_1001C0858((uint64_t)v270);
                      v144 = *(_QWORD *)(v104 + 128);
                      *(_DWORD *)buf = v238;
                      *(_QWORD *)&buf[4] = v141;
                      *(_WORD *)&buf[12] = 2049;
                      *(double *)&buf[14] = v142;
                      *(_WORD *)&buf[22] = 2049;
                      *(double *)&buf[24] = v143;
                      *(_WORD *)&buf[32] = 2050;
                      *(_QWORD *)&buf[34] = v144;
                      _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x2Au);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0040 != -1)
                        dispatch_once(&qword_1022A0040, &stru_102197838);
                      v155 = qword_1022A0048;
                      v156 = sub_1001CC818(*(unsigned int *)v270);
                      v157 = sub_1001C087C((uint64_t)v270);
                      v158 = sub_1001C0858((uint64_t)v270);
                      v159 = *(_QWORD *)(v104 + 128);
                      *(_DWORD *)__p = v238;
                      *(_QWORD *)&__p[4] = v156;
                      *(_WORD *)&__p[12] = 2049;
                      v264 = v157;
                      *(_WORD *)v265 = 2049;
                      *(double *)&v265[2] = v158;
                      *(_WORD *)&v265[10] = 2050;
                      *(_QWORD *)&v265[12] = v159;
                      LODWORD(v231) = 42;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v155, 0, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", __p, v231);
                      v138 = (char *)v160;
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v160);
LABEL_296:
                      if (v138 != buf)
                        free(v138);
                    }
                  }
                }
              }
              else
              {
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_102197858);
                v129 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                {
                  v130 = *(_DWORD *)&v270[8];
                  v131 = *(_DWORD *)&v270[4];
                  sub_100BCC240((unsigned int *)v270, __p);
                  v132 = __p;
                  if (v265[1] < 0)
                    v132 = *(_BYTE **)__p;
                  *(_DWORD *)buf = 67110146;
                  *(_DWORD *)&buf[4] = v103;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v105;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = v130;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&buf[22] = v131;
                  *(_WORD *)&buf[26] = 2080;
                  *(_QWORD *)&buf[28] = v132;
                  _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", buf, 0x24u);
                  if ((v265[1] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_102197858);
                  v133 = qword_1022A0028;
                  v134 = *(_DWORD *)&v270[8];
                  v135 = *(_DWORD *)&v270[4];
                  sub_100BCC240((unsigned int *)v270, v266);
                  v136 = v266;
                  if (v269 < 0)
                    v136 = *(_BYTE **)v266;
                  *(_DWORD *)__p = 67110146;
                  *(_DWORD *)&__p[4] = v103;
                  *(_WORD *)&__p[8] = 1024;
                  *(_DWORD *)&__p[10] = v105;
                  LOWORD(v264) = 1024;
                  *(_DWORD *)((char *)&v264 + 2) = v134;
                  HIWORD(v264) = 1024;
                  *(_DWORD *)v265 = v135;
                  *(_WORD *)&v265[4] = 2080;
                  *(_QWORD *)&v265[6] = v136;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v133, 2, "TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s", __p, 36, v233, v236, (const char *)v238);
                  v138 = v137;
                  if (v269 < 0)
                    operator delete(*(void **)v266);
                  sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v138);
                  goto LABEL_296;
                }
              }
LABEL_275:
              ++v105;
              --v106;
            }
            while (v106);
            v78 = v103++ == HIDWORD(v231);
            if (v78)
              goto LABEL_310;
          }
        }
        v104 = a1;
LABEL_310:
        if ((v241 & 1) != 0)
        {
          v165 = *(void **)(v104 + 40);
          v251[0] = _NSConcreteStackBlock;
          v251[1] = 3221225472;
          v251[2] = sub_100FBC3DC;
          v251[3] = &unk_102143528;
          v251[4] = v104;
          *(double *)&v251[5] = a8;
          objc_msgSend(v165, "async:", v251);
        }
        if ((v270[47] & 0x80000000) != 0)
          operator delete(*(void **)&v270[24]);
LABEL_36:
        v37 = 1;
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v72 = qword_1022A0028;
      v73 = v260;
      v74 = v261;
      sub_100FA4168((double *)&v254, __p);
      if (v265[1] >= 0)
        v75 = __p;
      else
        v75 = *(_BYTE **)__p;
      *(_DWORD *)v270 = 134218498;
      *(double *)&v270[4] = v74;
      *(_WORD *)&v270[12] = 2048;
      *(double *)&v270[14] = v73;
      *(_WORD *)&v270[22] = 2080;
      *(_QWORD *)&v270[24] = v75;
      LODWORD(v230) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 2, "TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s", COERCE_DOUBLE(v270), *(double *)&v230, v232);
      v77 = v76;
      if ((v265[1] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v77);
    }
    else
    {
      v61 = sub_1001C85FC(v246, (unsigned int *)&v257);
      v62 = sub_100077820(v61, v43, *(float *)(v16 + 128), a8);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v63 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v61 + 16))(v270, v61);
        v64 = v270[23] >= 0 ? v270 : *(_BYTE **)v270;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v64;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = BYTE1(v256);
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v62;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v245 != v44;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", buf, 0x1Eu);
        if ((v270[23] & 0x80000000) != 0)
          operator delete(*(void **)v270);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v195 = qword_1022A0028;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v61 + 16))(__p, v61);
        if (v265[1] >= 0)
          v196 = __p;
        else
          v196 = *(_BYTE **)__p;
        *(_DWORD *)v270 = 136315906;
        *(_QWORD *)&v270[4] = v196;
        *(_WORD *)&v270[12] = 1024;
        *(_DWORD *)&v270[14] = BYTE1(v256);
        *(_WORD *)&v270[18] = 1024;
        *(_DWORD *)&v270[20] = v62;
        *(_WORD *)&v270[24] = 1024;
        *(_DWORD *)&v270[26] = v245 != v44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v195, 2, "TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d", v270, 30, (_DWORD)v232, LODWORD(v235));
        v198 = v197;
        if ((v265[1] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v198);
        if (v198 != buf)
          free(v198);
      }
      if (BYTE1(v256))
        sub_1001C9C90(v61, a8);
      v59 = 0;
      v60 = 0;
      if (!v62 || v245 != v44)
        goto LABEL_159;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v65 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v61 + 16))(buf, v61);
        v66 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v270 = 136315138;
        *(_QWORD *)&v270[4] = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, refresh download, %s", v270, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_113;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v213 = qword_1022A0028;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v61 + 16))(v270, v61);
      if (v270[23] >= 0)
        v214 = v270;
      else
        v214 = *(_BYTE **)v270;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v214;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v213, 2, "TILE: requestDownload, refresh download, %s", __p);
      v77 = v215;
      if ((v270[23] & 0x80000000) != 0)
        operator delete(*(void **)v270);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v77);
    }
    if (v77 != buf)
      free(v77);
    goto LABEL_113;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v31 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "TILE: requestDownload, ignoring request, no sec_key", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_50;
  bzero(buf, 0x65CuLL);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  *(_WORD *)v270 = 0;
  LODWORD(v230) = 2;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: requestDownload, ignoring request, no sec_key", v270, v230);
  v33 = (char *)v32;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)", "%s\n", v32);
LABEL_340:
  if (v33 != buf)
    free(v33);
LABEL_50:
  v37 = 0;
LABEL_51:
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  return v37;
}

void sub_1001BEEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1001BF114(const __CFString *a1, const __CFString *a2, char *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  _BYTE *v16;
  int v17;
  void *v18;
  CFTypeID v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  CFIndex i;
  CFIndex Count;
  _BYTE *v30;
  CFStringRef v31;
  const void *ValueAtIndex;
  CFTypeID v33;
  NSObject *v34;
  std::string *v35;
  std::string *v36;
  CFTypeID v37;
  NSObject *v38;
  std::string *v39;
  std::string *v40;
  char *v41;
  CFTypeID v42;
  NSObject *v43;
  int v44;
  std::string::size_type v45;
  int Value;
  std::string *v47;
  uint64_t v48;
  int v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  CFTypeID v53;
  NSObject *v54;
  int v55;
  std::string::size_type v56;
  double AbsoluteTime;
  std::string *v58;
  uint64_t v59;
  int v60;
  std::string::size_type v61;
  double v62;
  std::string *v63;
  NSObject *v64;
  std::string *v65;
  std::string *v66;
  NSObject *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  char *v72;
  const char *v73;
  const char *v74;
  void *__p;
  std::string::size_type v76;
  unsigned __int8 v77;
  std::string v78;
  std::string v79;
  std::string v80;
  _QWORD v81[3];
  _BYTE buf[24];
  _QWORD v83[202];

  memset(&v79, 0, sizeof(v79));
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    goto LABEL_28;
  sub_1001C0048(a1, &v79);
  v7 = CFGetTypeID(a2);
  if (v7 == CFDictionaryGetTypeID())
  {
    sub_1015A2E04(&v78, a3);
    sub_1015A2E04(&__p, "->");
    if ((v77 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v77 & 0x80u) == 0)
      v9 = v77;
    else
      v9 = v76;
    v10 = std::string::append(&v78, p_p, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v79;
    else
      v12 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      size = v79.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v80, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if ((char)v77 < 0)
      operator delete(__p);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (buf[23] >= 0)
      v16 = buf;
    else
      v16 = *(_BYTE **)buf;
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1001BF114, v16);
    v17 = buf[23];
LABEL_25:
    if ((v17 & 0x80000000) == 0)
      goto LABEL_28;
    v18 = *(void **)buf;
    goto LABEL_27;
  }
  v19 = CFGetTypeID(a2);
  if (v19 == CFArrayGetTypeID())
  {
    sub_1015A2E04(&v78, a3);
    sub_1015A2E04(&__p, "->");
    if ((v77 & 0x80u) == 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if ((v77 & 0x80u) == 0)
      v21 = v77;
    else
      v21 = v76;
    v22 = std::string::append(&v78, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v79;
    else
      v24 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v25 = v79.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v80, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if ((char)v77 < 0)
      operator delete(__p);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    for (i = 0; ; ++i)
    {
      Count = CFArrayGetCount((CFArrayRef)a2);
      v17 = buf[23];
      if (i >= Count)
        break;
      if (buf[23] >= 0)
        v30 = buf;
      else
        v30 = *(_BYTE **)buf;
      v31 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s.%ld"), v30, i);
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
      sub_1001BF114(v31, ValueAtIndex, a3);
      if (v31)
        CFRelease(v31);
    }
    goto LABEL_25;
  }
  v33 = CFGetTypeID(a2);
  if (v33 != CFStringGetTypeID())
  {
    v37 = CFGetTypeID(a2);
    if (v37 == CFNumberGetTypeID())
    {
      if (CFNumberIsFloatType((CFNumberRef)a2))
      {
        v78.__r_.__value_.__r.__words[0] = 0;
        sub_1001FDC34(a2, &v78);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v38 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v39 = &v79;
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v39 = (std::string *)v79.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2048;
          v83[0] = v78.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %.8lf", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_28;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v40 = &v79;
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = (std::string *)v79.__r_.__value_.__r.__words[0];
        LODWORD(v80.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v40;
        HIWORD(v80.__r_.__value_.__r.__words[2]) = 2048;
        v81[0] = v78.__r_.__value_.__r.__words[0];
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "dictionary, %s, key, %s, value, %.8lf", (const char *)&v80, 32, *(double *)&v74);
        sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
      else
      {
        LODWORD(v78.__r_.__value_.__l.__data_) = 0;
        sub_1001C13CC(a2, &v78);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v64 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v65 = &v79;
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v65 = (std::string *)v79.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v65;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v83[0]) = v78.__r_.__value_.__l.__data_;
          WORD2(v83[0]) = 1024;
          *(_DWORD *)((char *)v83 + 6) = v78.__r_.__value_.__l.__data_;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %d, 0x%08x", buf, 0x22u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_28;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v66 = &v79;
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = (std::string *)v79.__r_.__value_.__r.__words[0];
        LODWORD(v80.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v66;
        HIWORD(v80.__r_.__value_.__r.__words[2]) = 1024;
        LODWORD(v81[0]) = v78.__r_.__value_.__l.__data_;
        WORD2(v81[0]) = 1024;
        *(_DWORD *)((char *)v81 + 6) = v78.__r_.__value_.__l.__data_;
        LODWORD(v73) = 34;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "dictionary, %s, key, %s, value, %d, 0x%08x", (const char *)&v80, v73, (_DWORD)v74, (_DWORD)__p);
        sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
    }
    else
    {
      v42 = CFGetTypeID(a2);
      if (v42 == CFBooleanGetTypeID())
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v43 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v44 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
          v45 = v79.__r_.__value_.__r.__words[0];
          Value = CFBooleanGetValue((CFBooleanRef)a2);
          v47 = &v79;
          *(_DWORD *)buf = 136315650;
          if (v44 < 0)
            v47 = (std::string *)v45;
          *(_QWORD *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v47;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v83[0]) = Value;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %d, [CFBoolean]", buf, 0x1Cu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_28;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v48 = qword_1022A02D8;
        v49 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
        v50 = v79.__r_.__value_.__r.__words[0];
        v51 = CFBooleanGetValue((CFBooleanRef)a2);
        v52 = &v79;
        LODWORD(v80.__r_.__value_.__l.__data_) = 136315650;
        if (v49 < 0)
          v52 = (std::string *)v50;
        *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
        WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v52;
        HIWORD(v80.__r_.__value_.__r.__words[2]) = 1024;
        LODWORD(v81[0]) = v51;
        LODWORD(v73) = 28;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 2, "dictionary, %s, key, %s, value, %d, [CFBoolean]", (const char *)&v80, v73, (_DWORD)v74);
        sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
      }
      else
      {
        v53 = CFGetTypeID(a2);
        if (v53 == CFDateGetTypeID())
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141D18);
          v54 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v55 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
            v56 = v79.__r_.__value_.__r.__words[0];
            AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)a2);
            v58 = &v79;
            *(_DWORD *)buf = 136315650;
            if (v55 < 0)
              v58 = (std::string *)v56;
            *(_QWORD *)&buf[4] = a3;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v58;
            *(_WORD *)&buf[22] = 2048;
            *(double *)v83 = AbsoluteTime;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %.2lf, [CFDate]", buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_28;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141D18);
          v59 = qword_1022A02D8;
          v60 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
          v61 = v79.__r_.__value_.__r.__words[0];
          v62 = CFDateGetAbsoluteTime((CFDateRef)a2);
          v63 = &v79;
          LODWORD(v80.__r_.__value_.__l.__data_) = 136315650;
          if (v60 < 0)
            v63 = (std::string *)v61;
          *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
          WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
          HIWORD(v80.__r_.__value_.__r.__words[2]) = 2048;
          *(double *)v81 = v62;
          v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 2, "dictionary, %s, key, %s, value, %.2lf, [CFDate]", (const char *)&v80, 32, *(double *)&v74);
          sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
        }
        else
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141D18);
          v67 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            v68 = &v79;
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v68 = (std::string *)v79.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = a3;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v68;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, un-printable value", buf, 0x16u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_28;
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141D18);
          v69 = &v79;
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v69 = (std::string *)v79.__r_.__value_.__r.__words[0];
          LODWORD(v80.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
          WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v69;
          v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "dictionary, %s, key, %s, un-printable value", (const char *)&v80, 22);
          sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v41);
        }
      }
    }
    if (v41 != buf)
      free(v41);
    goto LABEL_28;
  }
  memset(&v78, 0, sizeof(v78));
  sub_1001C0048(a2, &v78);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v34 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v35 = &v79;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v79.__r_.__value_.__r.__words[0];
    v36 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v78.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = a3;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v35;
    *(_WORD *)&buf[22] = 2080;
    v83[0] = v36;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "dictionary, %s, key, %s, value, %s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v70 = &v79;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v70 = (std::string *)v79.__r_.__value_.__r.__words[0];
    v71 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v71 = (std::string *)v78.__r_.__value_.__r.__words[0];
    LODWORD(v80.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
    WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v70;
    HIWORD(v80.__r_.__value_.__r.__words[2]) = 2080;
    v81[0] = v71;
    v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "dictionary, %s, key, %s, value, %s", (const char *)&v80, 32, v74);
    sub_100512490("Generic", 1, 0, 2, "void _printCSV_logKeyValue(const void *, const void *, void *)", "%s\n", v72);
    if (v72 != buf)
      free(v72);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = (void *)v78.__r_.__value_.__r.__words[0];
LABEL_27:
    operator delete(v18);
  }
LABEL_28:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
}

void sub_1001BFEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001BFF7C(int a1, int a2)
{
  uint64_t v4;
  const char *v5;

  v4 = sub_1001BFFCC();
  if ((a1 - 116) > 3)
    v5 = "Generic";
  else
    v5 = off_102140FC8[a1 - 116];
  return sub_1001C000C(v4, (uint64_t)v5, a2);
}

uint64_t sub_1001BFFCC()
{
  if (qword_102306AA0 != -1)
    dispatch_once(&qword_102306AA0, &stru_102168888);
  return qword_1023111C8;
}

BOOL sub_1001C000C(uint64_t a1, uint64_t a2, int a3)
{
  return *(_DWORD *)(a1 + 168) >= a3
      || *(_DWORD *)(a1 + 172) >= a3
      || *(_DWORD *)(a1 + 176) >= a3
      || *(_BYTE *)(a1 + 160) != 0;
}

BOOL sub_1001C0048(const __CFString *cf, std::string *a2)
{
  CFTypeID v4;
  const char *CStringPtr;
  uint64_t v6;
  CFTypeID v7;
  const char *BytePtr;
  int Length;
  int v10;
  NSObject *v12;
  CFTypeID v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  CFTypeID v17;
  char *v18;
  _BYTE bufferSize[12];
  uint8_t buf[4];
  CFTypeID v21;
  CFRange v22;

  if (!cf)
    goto LABEL_8;
  v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
    if (!CStringPtr)
    {
      *(_QWORD *)bufferSize = 0;
      v22.length = CFStringGetLength(cf);
      v22.location = 0;
      CFStringGetBytes(cf, v22, 0x8000100u, 0, 0, 0, 0, (CFIndex *)bufferSize);
      ++*(_QWORD *)bufferSize;
      operator new[]();
    }
    std::string::assign(a2, CStringPtr);
    return 1;
  }
  v7 = CFGetTypeID(cf);
  if (v7 != CFDataGetTypeID())
  {
LABEL_8:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      if (cf)
        v13 = CFGetTypeID(cf);
      else
        v13 = -1;
      *(_DWORD *)buf = 134349056;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v16 = qword_1022A02D8;
      if (cf)
        v17 = CFGetTypeID(cf);
      else
        v17 = -1;
      *(_DWORD *)bufferSize = 134349056;
      *(_QWORD *)&bufferSize[4] = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#Warning type IDs do not match - %{public}lu", bufferSize, 12);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    std::string::assign(a2, "");
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  v10 = Length;
  if (BytePtr)
    return sub_100524B70(BytePtr, Length, (uint64_t)a2);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v14 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v21) = v10;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
  }
  v6 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    *(_DWORD *)bufferSize = 67240192;
    *(_DWORD *)&bufferSize[4] = v10;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "can't convert %{public}u data bytes", bufferSize, 8);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
    return 0;
  }
  return v6;
}

BOOL sub_1001C0618(uint64_t a1, unsigned int *a2)
{
  _BOOL8 result;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE buf[12];
  char v11;
  int v12;
  _BYTE *v13;
  void *__p[2];
  char v15;

  if (sub_1001C8DA8(a2))
    return a1 + 8 != (_QWORD)sub_1001C8840(a1, (uint64_t)a2);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215A600);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    sub_100BCC240(a2, __p);
    v6 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215A600);
    v7 = qword_1022A0048;
    sub_100BCC240(a2, buf);
    if (v11 >= 0)
      v8 = buf;
    else
      v8 = *(_BYTE **)buf;
    v12 = 136380675;
    v13 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 17, "Invalid tile ID: %{private}s, #CloneMe", &v12, 12);
    if (v11 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesMap::contains(const TileId &) const", "%s\n", v9);
    if (v9 != (char *)__p)
      free(v9);
    return 0;
  }
  return result;
}

double sub_1001C0858(uint64_t a1)
{
  return (double)*(int *)(a1 + 4) / 10000.0 + -180.0;
}

double sub_1001C087C(uint64_t a1)
{
  return (double)*(int *)(a1 + 8) / 10000.0 + -90.0;
}

BOOL sub_1001C08A0(uint64_t a1, double *a2, double *a3)
{
  long double v4;
  double v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 64) = 0;
  v4 = *a3;
  v5 = *a2;
  v6 = vcvtmd_s64_f64((*a2 + 90.0) * 10.0) + (int)(floor(*a3 * 10.0) * 100000.0);
  v7 = a1;
  if (*(_BYTE *)(a1 + 24))
  {
    v7 = a1;
    if (v6 == *(_DWORD *)(a1 + 28))
      return *(_BYTE *)(a1 + 32) != 0;
  }
  while (1)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == a1)
      break;
    if (v6 == *(_DWORD *)(v7 + 16))
      return 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v8 = sub_1001C47C0(a1, v5, v4);
  if ((_DWORD)v8)
  {
    v9 = operator new(0x18uLL);
    v9[4] = v6;
    v10 = *(_QWORD *)a1;
    *(_QWORD *)v9 = *(_QWORD *)a1;
    *((_QWORD *)v9 + 1) = a1;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)a1 = v9;
    ++*(_QWORD *)(a1 + 16);
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 28) = v6;
    *(_BYTE *)(a1 + 32) = v8;
  }
  return v8;
}

BOOL sub_1001C09B0(uint64_t a1, double *a2, double *a3)
{
  long double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 80) = 0;
  v4 = *a3;
  v5 = *a2;
  v6 = vcvtmd_s64_f64((*a2 + 90.0) * 20.0) + (int)(floor(*a3 * 20.0) * 100000.0);
  v7 = a1;
  if (*(_BYTE *)(a1 + 28) && (v7 = a1, (_DWORD)v6 == *(_DWORD *)(a1 + 24)))
  {
    v8 = *(unsigned __int8 *)(a1 + 29);
    return v8 != 0;
  }
  else
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == a1)
        break;
      if ((_DWORD)v6 == *(_DWORD *)(v7 + 16))
      {
        v8 = *(unsigned __int8 *)(v7 + 20);
        return v8 != 0;
      }
    }
    *(_DWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 28) = 0;
    v9 = sub_1004C735C(a1, v5, v4);
    v10 = operator new(0x18uLL);
    if ((_DWORD)v9)
      v10[2] = v6 | (unint64_t)&_mh_execute_header;
    else
      v10[2] = v6;
    v11 = *(_QWORD *)a1;
    *v10 = *(_QWORD *)a1;
    v10[1] = a1;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)a1 = v10;
    ++*(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(a1 + 80))
    {
      *(_BYTE *)(a1 + 28) = 1;
      *(_DWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 29) = v9;
    }
  }
  return v9;
}

BOOL sub_1001C0AD0(CFDictionaryRef *a1, uint64_t a2)
{
  int v3;
  int v4;
  NSObject *v5;
  _BYTE *v6;
  _BOOL8 v8;
  NSObject *v9;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  CFTypeRef cf1;
  uint8_t v17[16];
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  _BYTE __p[20];
  char v23;

  sub_1001C1D6C((int)v17, *a1);
  sub_1001C1D70((uint64_t)v17, "lteCellFromCellMonitorDict");
  *(_OWORD *)&__p[4] = 0uLL;
  *(_QWORD *)(a2 + 8) = -1;
  *(_QWORD *)(a2 + 16) = -1;
  *(_DWORD *)(a2 + 24) = -1;
  *(_QWORD *)a2 = -1;
  *(_OWORD *)(a2 + 28) = *(_OWORD *)__p;
  v3 = *(_DWORD *)&__p[16];
  *(_QWORD *)(a2 + 48) = -1;
  *(_QWORD *)(a2 + 56) = -1;
  *(_DWORD *)(a2 + 44) = v3;
  *(_DWORD *)(a2 + 64) = -1;
  *(_OWORD *)(a2 + 68) = xmmword_101BB6FC0;
  sub_1001C1194((uint64_t)v17, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_1001C1194((uint64_t)v17, kCTCellMonitorMNC, (_DWORD *)(a2 + 4));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorTAC, (_DWORD *)(a2 + 8));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorCellId, (_DWORD *)(a2 + 12));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorUARFCN, (_DWORD *)(a2 + 16));
  cf1 = 0;
  sub_1001C3D30((uint64_t)v17, kCTCellMonitorCellType, &cf1);
  if (CFEqual(cf1, kCTCellMonitorCellTypeServing))
    sub_1001C1194((uint64_t)v17, kCTCellMonitorPID, (_DWORD *)(a2 + 20));
  if (CFEqual(cf1, kCTCellMonitorCellTypeNeighbor))
    sub_1001C1194((uint64_t)v17, kCTCellMonitorPCI, (_DWORD *)(a2 + 20));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorRSRP, (_DWORD *)(a2 + 48));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorRSRQ, (_DWORD *)(a2 + 52));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorBandInfo, (_DWORD *)(a2 + 24));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorDeploymentType, (_DWORD *)(a2 + 56));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorBandwidth, (_DWORD *)(a2 + 60));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorNeighborType, (_DWORD *)(a2 + 80));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorPMax, (_DWORD *)(a2 + 64));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorThroughput, (_DWORD *)(a2 + 68));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorCsgId, (_DWORD *)(a2 + 76));
  sub_1001C1194((uint64_t)v17, kCTCellMonitorCSGIndication, (_DWORD *)(a2 + 72));
  v15 = 0;
  if (sub_1001C1194((uint64_t)v17, kCTCellMonitorSectorLat, (_DWORD *)&v15 + 1))
  {
    if (sub_1001C1194((uint64_t)v17, kCTCellMonitorSectorLong, &v15))
    {
      v4 = v15;
      if (v15)
      {
        *(double *)(a2 + 32) = (double)SHIDWORD(v15) * 0.0000694444444;
        *(double *)(a2 + 40) = (double)v4 * 0.0000694444444;
      }
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_10009643C((unsigned int *)a2, __p);
    v6 = v23 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "lteCell populated from CT: %s", buf, 0xCu);
    if (v23 < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    v11 = qword_1022A0048;
    sub_10009643C((unsigned int *)a2, buf);
    if (v19 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    v20 = 136315138;
    v21 = v12;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v11, 2, "lteCell populated from CT: %s", (const char *)&v20);
    if (v19 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::lteCellFromCellMonitorDict(const CFDictionaryRef &, LteCell &)", "%s\n", v13);
    if (v13 != __p)
      free(v13);
  }
  v8 = *(int *)a2 > 0 && *(int *)(a2 + 4) >= 0;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "lteCell is valid from CT: %d", __p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "lteCell is valid from CT: %d", buf);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::lteCellFromCellMonitorDict(const CFDictionaryRef &, LteCell &)", "%s\n", v14);
    if (v14 != __p)
      free(v14);
  }
  sub_10011A5A8(v17);
  return v8;
}

void sub_1001C1160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C1194(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_1001C13CC(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_1001C13CC(const void *a1, _DWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_1001E4B1C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2))
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v11[0] = 0;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get value", v11, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int &)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_1001C15CC(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  CFTypeID v8;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *v11;
  CFTypeID v12;
  _BYTE *v13;
  uint64_t v14;
  CFTypeID v15;
  void **v16;
  char *v17;
  NSObject *v18;
  int v19;
  _BYTE *v20;
  CFIndex Count;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  void **v25;
  CFIndex v26;
  void **v27;
  void *v28[2];
  char v29;
  CFTypeRef cf;
  _BYTE __p[18];
  __int16 v32;
  CFIndex v33;
  uint8_t buf[4];
  _BYTE v35[14];
  __int16 v36;
  _BYTE *v37;

  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    *a3 = 0;
    v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v18 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        sub_1001A486C(a2, (uint64_t)__p);
        v19 = SBYTE3(v33);
        v20 = *(_BYTE **)__p;
        Count = CFArrayGetCount((CFArrayRef)cf);
        v22 = __p;
        *(_DWORD *)buf = 136446722;
        if (v19 < 0)
          v22 = v20;
        *(_QWORD *)v35 = v22;
        *(_WORD *)&v35[8] = 1026;
        *(_DWORD *)&v35[10] = v9;
        v36 = 2050;
        v37 = (_BYTE *)Count;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v33) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v23 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)v28);
      v24 = v29;
      v25 = (void **)v28[0];
      v26 = CFArrayGetCount((CFArrayRef)cf);
      v27 = v28;
      *(_DWORD *)__p = 136446722;
      if (v24 < 0)
        v27 = v25;
      *(_QWORD *)&__p[4] = v27;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v9;
      v32 = 2050;
      v33 = v26;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 17, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", __p, 28);
      if (v29 < 0)
        operator delete(v28[0]);
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v12 = CFGetTypeID(cf);
        sub_1001A486C(a2, (uint64_t)__p);
        v13 = (v33 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v35 = a4;
        *(_WORD *)&v35[4] = 2050;
        *(_QWORD *)&v35[6] = v12;
        v36 = 2082;
        v37 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v33) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v14 = qword_1022A02D8;
      v15 = CFGetTypeID(cf);
      sub_1001A486C(a2, (uint64_t)v28);
      if (v29 >= 0)
        v16 = v28;
      else
        v16 = (void **)v28[0];
      *(_DWORD *)__p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(_QWORD *)&__p[10] = v15;
      v32 = 2082;
      v33 = (CFIndex)v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 17, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", __p, 28);
      if (v29 < 0)
        operator delete(v28[0]);
    }
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
LABEL_31:
    CFRelease(cf);
    result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_1001C1AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001C1AD8(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *Value;
  const void *v5;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  v5 = Value;
  *a3 = Value;
  if (Value)
    CFRetain(Value);
  return v5 != 0;
}

BOOL sub_1001C1B18(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  CFPropertyListRef v6;

  if (sub_1001C1AD8(a1 + 120, a2, a3))
    return 1;
  v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  *a3 = v6;
  return v6 || sub_1001C1AD8(a1 + 104, a2, a3);
}

_QWORD *sub_1001C1B90(_QWORD *a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;
  NSObject *v4;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *a1 = off_102141960;
  a1[1] = 0;
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create new mutable dictionary", v7, 2);
      sub_100512490("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(CFDictionaryRef)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1;
}

void sub_1001C1D70(uint64_t a1, void *context)
{
  const __CFDictionary *v3;
  NSObject *v4;
  char *v5;
  int v6;
  void *v7;
  uint8_t buf[4];
  void *v9;

  v3 = *(const __CFDictionary **)(a1 + 8);
  if (v3)
  {
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_1001BF114, context);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v9 = context;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "dictionary, %s, NULL", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v6 = 136315138;
      v7 = context;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "dictionary, %s, NULL", (const char *)&v6);
      sub_100512490("Generic", 1, 0, 2, "void CLNameValuePair::printCSV(const char *)", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

BOOL sub_1001C1F5C(int a1, uint64_t a2, uint64_t *a3)
{
  char *v4;
  int v6;
  int *v7;

  v6 = a1;
  v7 = &v6;
  v4 = sub_1001C1FBC(a2, &v6, (uint64_t)&unk_101B9EB60, &v7);
  return sub_1001C2218(a3, *((CFArrayRef *)v4 + 3), 1);
}

char *sub_1001C1FBC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  char **v10;
  char *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = *(char **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = (char *)(a1 + 16);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_QWORD *)v14 + 3) = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(char **)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(char **)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100970770(v24, 0);
  return i;
}

void sub_1001C2200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100970770((char **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_1001C2218(uint64_t *a1, CFArrayRef theArray, int a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFTypeID v10;
  NSObject *v11;
  NSObject *v12;
  CFTypeID TypeID;
  int v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  void **v24;
  char *v25;
  NSObject *v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  NSObject *v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  uint64_t v84;
  int v85;
  void **v86;
  void **v87;
  _BYTE *v88;
  char *v89;
  NSObject *v90;
  char *v92;
  char *v93;
  uint64_t v94;
  const __CFArray *v95;
  void *key;
  CFIndex Count;
  CFDictionaryRef v99;
  void *v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[12];
  __int16 v104;
  _BYTE *v105;
  char v106;
  _BYTE v107[12];
  __int16 v108;
  void **v109;
  __int16 v110;
  _BOOL4 v111;
  __int16 v112;
  _BOOL4 v113;
  _BYTE __p[12];
  __int16 v115;
  _BYTE *v116;
  char v117;
  void *v118[2];
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  int v122;
  void *v123;
  _BYTE *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _OWORD v136[2];
  __int128 __src;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  int v161;
  _BYTE buf[48];
  _OWORD v163[2];
  int v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[2];
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  int v203;

  v100 = 0;
  v101 = 0;
  v102 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    do
    {
      v6 -= 696;
      sub_1005A9904((uint64_t)(a1 + 2), v6);
    }
    while (v6 != v5);
  }
  a1[1] = v5;
  v95 = theArray;
  if (!theArray)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    v90 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "CellService, convert, empty CellList", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102146200);
      LOWORD(v118[0]) = 0;
      v93 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellService, convert, empty CellList", v118, 2);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v93);
      if (v93 != buf)
        free(v93);
    }
    goto LABEL_135;
  }
  Count = CFArrayGetCount(theArray);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102146200);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = Count;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CellService, convertCells, %{public}d, neighbors, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102146200);
    LODWORD(v118[0]) = 67240448;
    HIDWORD(v118[0]) = Count;
    LOWORD(v118[1]) = 1026;
    *(_DWORD *)((char *)&v118[1] + 2) = a3;
    v92 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellService, convertCells, %{public}d, neighbors, %{public}d", v118, 14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v92);
    if (v92 != buf)
      free(v92);
  }
  if (Count >= 1)
  {
    v8 = 0;
    key = (void *)kCTCellMonitorDerivedMCC;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
      v10 = CFGetTypeID(ValueAtIndex);
      if (v10 == CFDictionaryGetTypeID())
      {
        v99 = (CFDictionaryRef)ValueAtIndex;
        if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, key))
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102146180);
          v11 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CELL_LOC: derivedMCC dictionary", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102146180);
            LOWORD(v118[0]) = 0;
            LODWORD(v94) = 2;
            v68 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: derivedMCC dictionary", v118, v94);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v68);
            if (v68 != buf)
              free(v68);
          }
          sub_1005A0C80(&v99, (uint64_t)&v100);
        }
        else
        {
          sub_1001C4194((uint64_t)v118, &v99);
          if (HIDWORD(v118[0]) == 1)
            v14 = a3;
          else
            v14 = 0;
          if (!HIDWORD(v118[0]) || v14)
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102146200);
            v26 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              sub_1001C3454((uint64_t)v118, buf);
              v27 = buf[23];
              v28 = *(_BYTE **)buf;
              sub_1001C36E4((unsigned int *)v118, v107);
              v29 = buf;
              if (v27 < 0)
                v29 = v28;
              v30 = v107;
              if (v110 < 0)
                v30 = *(_BYTE **)v107;
              *(_DWORD *)__p = 136446467;
              *(_QWORD *)&__p[4] = v29;
              v115 = 2081;
              v116 = v30;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CellService, convert, add, %{public}s, %{private}s", __p, 0x16u);
              if (SHIBYTE(v110) < 0)
                operator delete(*(void **)v107);
              theArray = v95;
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102146200);
              v69 = qword_1022A0048;
              sub_1001C3454((uint64_t)v118, v107);
              v70 = SHIBYTE(v110);
              v71 = *(_BYTE **)v107;
              sub_1001C36E4((unsigned int *)v118, __p);
              v72 = v107;
              if (v70 < 0)
                v72 = v71;
              v73 = __p;
              if (v117 < 0)
                v73 = *(_BYTE **)__p;
              *(_DWORD *)v103 = 136446467;
              *(_QWORD *)&v103[4] = v72;
              v104 = 2081;
              v105 = v73;
              LODWORD(v94) = 22;
              v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v69, 0, "CellService, convert, add, %{public}s, %{private}s", v103, v94);
              if (v117 < 0)
                operator delete(*(void **)__p);
              theArray = v95;
              if (SHIBYTE(v110) < 0)
                operator delete(*(void **)v107);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v74);
              if (v74 != buf)
                free(v74);
            }
            v163[0] = v121[0];
            *(_OWORD *)((char *)v163 + 12) = *(_OWORD *)((char *)v121 + 12);
            *(_OWORD *)&buf[16] = v119;
            *(_OWORD *)&buf[32] = v120;
            *(_OWORD *)buf = *(_OWORD *)v118;
            v164 = v122;
            v166 = 0;
            v165 = 0uLL;
            sub_10027205C(&v165, v123, (uint64_t)v124, (v124 - (_BYTE *)v123) >> 2);
            v177 = v135;
            v178[0] = v136[0];
            *(_OWORD *)((char *)v178 + 12) = *(_OWORD *)((char *)v136 + 12);
            v173 = v131;
            v174 = v132;
            v175 = v133;
            v176 = v134;
            v169 = v127;
            v170 = v128;
            v171 = v129;
            v172 = v130;
            v167 = v125;
            v168 = v126;
            if (SHIBYTE(v138) < 0)
            {
              sub_100115CE4(&v179, (void *)__src, *((unint64_t *)&__src + 1));
            }
            else
            {
              v179 = __src;
              v180 = v138;
            }
            v189 = v147;
            v190 = v148;
            v191 = v149;
            v185 = v143;
            v186 = v144;
            v187 = v145;
            v188 = v146;
            v181 = v139;
            v182 = v140;
            v183 = v141;
            v184 = v142;
            v200 = v158;
            v201 = v159;
            v202 = v160;
            v203 = v161;
            v196 = v154;
            v197 = v155;
            v198 = v156;
            v199 = v157;
            v192 = v150;
            v193 = v151;
            v194 = v152;
            v195 = v153;
            v31 = a1[1];
            if (v31 >= a1[2])
            {
              v63 = sub_1005A9948(a1, (uint64_t)buf);
              v64 = SHIBYTE(v180);
              a1[1] = v63;
              if (v64 < 0)
                operator delete((void *)v179);
            }
            else
            {
              *(_OWORD *)v31 = *(_OWORD *)buf;
              v32 = *(_OWORD *)&buf[16];
              v33 = *(_OWORD *)&buf[32];
              v34 = v163[0];
              *(_OWORD *)(v31 + 60) = *(_OWORD *)((char *)v163 + 12);
              *(_OWORD *)(v31 + 32) = v33;
              *(_OWORD *)(v31 + 48) = v34;
              *(_OWORD *)(v31 + 16) = v32;
              *(_DWORD *)(v31 + 80) = v164;
              v35 = v31 + 80;
              *(_QWORD *)(v35 + 16) = 0;
              *(_QWORD *)(v35 + 24) = 0;
              *(_QWORD *)(v35 + 8) = 0;
              *(_OWORD *)(v35 + 8) = v165;
              *(_QWORD *)(v35 + 24) = v166;
              v165 = 0uLL;
              v166 = 0;
              *(_OWORD *)(v35 + 32) = v167;
              v36 = v168;
              v37 = v169;
              v38 = v171;
              *(_OWORD *)(v35 + 80) = v170;
              *(_OWORD *)(v35 + 96) = v38;
              *(_OWORD *)(v35 + 48) = v36;
              *(_OWORD *)(v35 + 64) = v37;
              v39 = v172;
              v40 = v173;
              v41 = v175;
              *(_OWORD *)(v35 + 144) = v174;
              *(_OWORD *)(v35 + 160) = v41;
              *(_OWORD *)(v35 + 112) = v39;
              *(_OWORD *)(v35 + 128) = v40;
              v42 = v176;
              v43 = v177;
              v44 = v178[0];
              *(_OWORD *)(v35 + 220) = *(_OWORD *)((char *)v178 + 12);
              *(_OWORD *)(v35 + 192) = v43;
              *(_OWORD *)(v35 + 208) = v44;
              *(_OWORD *)(v35 + 176) = v42;
              v45 = v179;
              *(_QWORD *)(v35 + 256) = v180;
              *(_OWORD *)(v35 + 240) = v45;
              v180 = 0;
              v179 = 0uLL;
              v47 = v182;
              v46 = v183;
              *(_OWORD *)(v35 + 264) = v181;
              *(_OWORD *)(v35 + 280) = v47;
              *(_OWORD *)(v35 + 296) = v46;
              v48 = v187;
              v50 = v184;
              v49 = v185;
              *(_OWORD *)(v35 + 344) = v186;
              *(_OWORD *)(v35 + 360) = v48;
              *(_OWORD *)(v35 + 312) = v50;
              *(_OWORD *)(v35 + 328) = v49;
              v52 = v189;
              v51 = v190;
              v53 = v188;
              *(_DWORD *)(v35 + 424) = v191;
              *(_OWORD *)(v35 + 392) = v52;
              *(_OWORD *)(v35 + 408) = v51;
              *(_OWORD *)(v35 + 376) = v53;
              v54 = v192;
              v55 = v193;
              v56 = v195;
              *(_OWORD *)(v35 + 464) = v194;
              *(_OWORD *)(v35 + 480) = v56;
              *(_OWORD *)(v35 + 432) = v54;
              *(_OWORD *)(v35 + 448) = v55;
              v57 = v196;
              v58 = v197;
              v59 = v199;
              *(_OWORD *)(v35 + 528) = v198;
              *(_OWORD *)(v35 + 544) = v59;
              *(_OWORD *)(v35 + 496) = v57;
              *(_OWORD *)(v35 + 512) = v58;
              v60 = v200;
              v61 = v201;
              v62 = v202;
              *(_DWORD *)(v35 + 608) = v203;
              *(_OWORD *)(v35 + 576) = v61;
              *(_OWORD *)(v35 + 592) = v62;
              *(_OWORD *)(v35 + 560) = v60;
              a1[1] = v35 + 616;
            }
            if ((_QWORD)v165)
            {
              *((_QWORD *)&v165 + 1) = v165;
              operator delete((void *)v165);
            }
          }
          else
          {
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102146200);
            v15 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
            {
              sub_1001C3454((uint64_t)v118, v107);
              v16 = SHIBYTE(v110);
              v17 = *(_BYTE **)v107;
              sub_1001C36E4((unsigned int *)v118, __p);
              v18 = v107;
              if (v16 < 0)
                v18 = v17;
              v19 = __p;
              if (v117 < 0)
                v19 = *(_BYTE **)__p;
              *(_DWORD *)buf = 136446979;
              *(_QWORD *)&buf[4] = v18;
              *(_WORD *)&buf[12] = 2081;
              *(_QWORD *)&buf[14] = v19;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = HIDWORD(v118[0]) == 0;
              *(_WORD *)&buf[28] = 1026;
              *(_DWORD *)&buf[30] = HIDWORD(v118[0]) == 1;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CellService, convert, ignore, %{public}s, %{private}s, serving, %{public}d, neighbor, %{public}d", buf, 0x22u);
              if (v117 < 0)
                operator delete(*(void **)__p);
              theArray = v95;
              if (SHIBYTE(v110) < 0)
                operator delete(*(void **)v107);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102146200);
              v20 = qword_1022A0048;
              sub_1001C3454((uint64_t)v118, __p);
              v21 = v117;
              v22 = *(_BYTE **)__p;
              sub_1001C36E4((unsigned int *)v118, v103);
              v23 = __p;
              if (v21 < 0)
                v23 = v22;
              v24 = (void **)v103;
              if (v106 < 0)
                v24 = *(void ***)v103;
              *(_DWORD *)v107 = 136446979;
              *(_QWORD *)&v107[4] = v23;
              v108 = 2081;
              v109 = v24;
              v110 = 1026;
              v111 = HIDWORD(v118[0]) == 0;
              v112 = 1026;
              v113 = HIDWORD(v118[0]) == 1;
              LODWORD(v94) = 34;
              v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "CellService, convert, ignore, %{public}s, %{private}s, serving, %{public}d, neighbor, %{public}d", v107, v94);
              if (v106 < 0)
                operator delete(*(void **)v103);
              theArray = v95;
              if (v117 < 0)
                operator delete(*(void **)__p);
              sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v25);
              if (v25 != buf)
                free(v25);
            }
          }
          if (SHIBYTE(v138) < 0)
            operator delete((void *)__src);
          if (v123)
          {
            v124 = v123;
            operator delete(v123);
          }
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102146200);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          TypeID = CFDictionaryGetTypeID();
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = TypeID;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CellService, convert, invalid, %{public}ld", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102146200);
          v65 = qword_1022A0048;
          v66 = (void *)CFDictionaryGetTypeID();
          LODWORD(v118[0]) = 134349056;
          *(void **)((char *)v118 + 4) = v66;
          LODWORD(v94) = 12;
          v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 16, "CellService, convert, invalid, %{public}ld", v118, v94);
          sub_100512490("Generic", 1, 0, 0, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v67);
          if (v67 != buf)
            free(v67);
        }
      }
      ++v8;
    }
    while (Count != v8);
  }
  v75 = v100;
  if (v101 != v100)
  {
    v76 = *a1;
    if (a1[1] != *a1)
    {
      v77 = 0;
      v78 = 0;
      do
      {
        if ((*(_DWORD *)(v76 + v77 + 8) - 3) <= 2)
        {
          sub_101348DA8(v76 + v77, (uint64_t)&v100);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102146200);
          v79 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            sub_1001C3454(*a1 + v77, buf);
            v80 = buf[23];
            v81 = *(_BYTE **)buf;
            sub_1001C36E4((unsigned int *)(*a1 + v77), v118);
            v82 = buf;
            if (v80 < 0)
              v82 = v81;
            v83 = v118;
            if (SBYTE7(v119) < 0)
              v83 = (void **)v118[0];
            *(_DWORD *)v107 = 136446467;
            *(_QWORD *)&v107[4] = v82;
            v108 = 2081;
            v109 = v83;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "CellService, convert, derive, %{public}s, %{private}s", v107, 0x16u);
            if (SBYTE7(v119) < 0)
              operator delete(v118[0]);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102146200);
            v84 = qword_1022A0048;
            sub_1001C3454(*a1 + v77, v118);
            v85 = SBYTE7(v119);
            v86 = (void **)v118[0];
            sub_1001C36E4((unsigned int *)(*a1 + v77), v107);
            v87 = v118;
            if (v85 < 0)
              v87 = v86;
            v88 = v107;
            if (v110 < 0)
              v88 = *(_BYTE **)v107;
            *(_DWORD *)__p = 136446467;
            *(_QWORD *)&__p[4] = v87;
            v115 = 2081;
            v116 = v88;
            LODWORD(v94) = 22;
            v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v84, 0, "CellService, convert, derive, %{public}s, %{private}s", __p, v94);
            if (SHIBYTE(v110) < 0)
              operator delete(*(void **)v107);
            if (SBYTE7(v119) < 0)
              operator delete(v118[0]);
            sub_100512490("Generic", 1, 0, 2, "static BOOL CLTelephonyService::convertCTCellsToClCells(std::vector<CLCell> &, CFArrayRef, BOOL)", "%s\n", v89);
            if (v89 != buf)
              free(v89);
          }
        }
        ++v78;
        v76 = *a1;
        v77 += 696;
      }
      while (v78 < 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3));
    }
LABEL_135:
    v75 = v100;
    theArray = v95;
  }
  if (v75)
  {
    v101 = v75;
    operator delete(v75);
  }
  return theArray != 0;
}

void sub_1001C3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C3454@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100263E50((uint64_t)v12);
  v4 = *(int *)(a1 + 8);
  if (v4 < 0xA && ((0x287u >> v4) & 1) != 0)
  {
    v5 = off_1021AFE38[v4];
    v6 = qword_101C9E4C8[v4];
  }
  else if ((v4 - 3) >= 3)
  {
    if ((_DWORD)v4 == 10)
    {
      v5 = "NR";
      v6 = 2;
    }
    else
    {
      if ((_DWORD)v4 == 6)
      {
        v7 = *(_DWORD *)(a1 + 568);
        if ((v7 & 4) == 0 || v7 < 1)
          v9 = "LTE";
        else
          v9 = "NSA";
        sub_100263F7C(&v13, (uint64_t)v9, 3);
        goto LABEL_18;
      }
      v5 = "Unknown";
      v6 = 7;
    }
  }
  else
  {
    v5 = "CDMA";
    v6 = 4;
  }
  sub_100263F7C(&v13, (uint64_t)v5, v6);
LABEL_18:
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_1001C35B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C35D0@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100263E50((uint64_t)v12);
  v4 = (_QWORD *)std::ostream::operator<<(&v13, *a1);
  v5 = sub_100263F7C(v4, (uint64_t)".", 1);
  v6 = (_QWORD *)std::ostream::operator<<(v5, a1[1]);
  v7 = sub_100263F7C(v6, (uint64_t)".", 1);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[2]);
  v9 = sub_100263F7C(v8, (uint64_t)".", 1);
  std::ostream::operator<<(v9, a1[3]);
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_1001C36D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001C36E4@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  unsigned int *v3;

  v2 = a1[2];
  if (v2 < 3)
    goto LABEL_4;
  if (v2 == 9)
  {
    v3 = a1 + 11;
    return (_QWORD *)sub_1001C35D0(v3, a2);
  }
  if (v2 == 7)
  {
LABEL_4:
    v3 = a1 + 3;
    return (_QWORD *)sub_1001C35D0(v3, a2);
  }
  if (v2 - 3 <= 2)
    return (_QWORD *)sub_100663EE0((uint64_t)(a1 + 20), a2);
  if (v2 == 10)
    return (_QWORD *)sub_10066537C(a1 + 150, a2);
  if (v2 == 6)
  {
    v3 = a1 + 128;
    return (_QWORD *)sub_1001C35D0(v3, a2);
  }
  return sub_1015A2E04(a2, "bad-key");
}

uint64_t sub_1001C3750(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1005A9BB0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_1001C37C4(void **a1)
{
  sub_1005A9DF8(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_1001C37F4(uint64_t a1, CFDictionaryRef *a2)
{
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  NSObject *v17;
  CFTypeRef v19;
  CFTypeRef v20;
  uint8_t v21[16];
  _BYTE buf[12];
  char v23;
  int v24;
  _BYTE *v25;
  void *__p[2];
  char v27;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0xB00000003;
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)(a1 + 12) = v4;
  v5 = (_DWORD *)(a1 + 12);
  *(_OWORD *)(a1 + 44) = v4;
  v6 = (_DWORD *)(a1 + 44);
  v7 = a1 + 80;
  *(_OWORD *)(a1 + 28) = v4;
  *(_OWORD *)(a1 + 60) = v4;
  sub_1001C4198(a1 + 80);
  *(_DWORD *)(a1 + 536) = -1;
  *(_QWORD *)(a1 + 528) = -1;
  *(_QWORD *)(a1 + 520) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = -1;
  *(_QWORD *)(a1 + 568) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101BB6FC0;
  *(_QWORD *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 672) = -1;
  *(_QWORD *)(a1 + 664) = -1;
  *(_QWORD *)(a1 + 656) = -1;
  *(_QWORD *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 688) = -1;
  sub_1001C1D6C((int)v21, *a2);
  v20 = 0;
  v8 = sub_1001C3D30((uint64_t)v21, kCTCellMonitorCellRadioAccessTechnology, &v20);
  if (!v20)
    v8 = 0;
  if (v8 == 1)
    *(_DWORD *)(a1 + 8) = sub_1001C42E4(v20);
  v19 = 0;
  v9 = sub_1001C3D30((uint64_t)v21, kCTCellMonitorCellType, &v19);
  if (!v19)
    v9 = 0;
  if (v9 == 1)
    *(_DWORD *)(a1 + 4) = sub_1001C441C(v19);
  v10 = *(_DWORD *)(a1 + 8);
  if ((v10 - 3) > 2)
  {
    switch(v10)
    {
      case 0:
      case 1:
      case 2:
      case 7:
        v11 = sub_1005A1AA0(a2, v5);
        goto LABEL_42;
      case 6:
        v11 = sub_1001C0AD0(a2, a1 + 512);
        goto LABEL_42;
      case 9:
        v11 = sub_1005A14E0(a2, v6);
        goto LABEL_42;
      case 10:
        *(_BYTE *)a1 = sub_1005A1E74(a2, a1 + 600);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AFE18);
        v17 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "nrCell dictionary received from CT", (uint8_t *)__p, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021AFE18);
          *(_WORD *)buf = 0;
          v16 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "nrCell dictionary received from CT", buf, 2);
          sub_100512490("Generic", 1, 0, 2, "CLCell::CLCell(const CFDictionaryRef &)", "%s\n", v16);
          if (v16 != (char *)__p)
            goto LABEL_40;
        }
        break;
      default:
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
        v12 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          sub_101347C78((unsigned int *)a1, __p);
          v13 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "CELL_LOC: Invalid cell rat: %{public}s", buf, 0xCu);
          if (v27 < 0)
            operator delete(__p[0]);
        }
        if (!sub_1001BFF7C(115, 0))
          break;
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
        v14 = qword_1022A02D8;
        sub_101347C78((unsigned int *)a1, buf);
        if (v23 >= 0)
          v15 = buf;
        else
          v15 = *(_BYTE **)buf;
        v24 = 136446210;
        v25 = v15;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 17, "CELL_LOC: Invalid cell rat: %{public}s", &v24, 12);
        if (v23 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "CLCell::CLCell(const CFDictionaryRef &)", "%s\n", v16);
        if (v16 == (char *)__p)
          break;
LABEL_40:
        free(v16);
        break;
    }
  }
  else
  {
    v11 = sub_1005A2794(a2, v7);
LABEL_42:
    *(_BYTE *)a1 = v11;
  }
  sub_10011A5A8(v21);
  return a1;
}

void sub_1001C3CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  sub_100664030(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C3D30(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t result;
  CFTypeID v7;
  CFTypeRef v8;
  NSObject *v9;
  _BYTE *v10;
  CFTypeID v11;
  CFTypeID TypeID;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  CFTypeID v17;
  CFTypeID v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v28;
  CFTypeID v29;
  __int16 v30;
  CFTypeID v31;
  uint8_t buf[4];
  _BYTE *v33;
  __int16 v34;
  CFTypeID v35;
  __int16 v36;
  CFTypeID v37;

  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      v8 = cf;
      *a3 = cf;
      CFAutorelease(v8);
      return 1;
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        sub_1001A486C(a2, (uint64_t)__p);
        v10 = v30 >= 0 ? __p : *(_BYTE **)__p;
        v11 = CFGetTypeID(cf);
        TypeID = CFStringGetTypeID();
        *(_DWORD *)buf = 136446722;
        v33 = v10;
        v34 = 2050;
        v35 = v11;
        v36 = 2050;
        v37 = TypeID;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
        if (SHIBYTE(v30) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v15 = qword_1022A02D8;
        sub_1001A486C(a2, (uint64_t)v24);
        if (v25 >= 0)
          v16 = v24;
        else
          v16 = (void **)v24[0];
        v17 = CFGetTypeID(cf);
        v18 = CFStringGetTypeID();
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v16;
        v28 = 2050;
        v29 = v17;
        v30 = 2050;
        v31 = v18;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", __p, 32);
        if (v25 < 0)
          operator delete(v24[0]);
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v13 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v33 = (_BYTE *)v14;
        v34 = 2112;
        v35 = (CFTypeID)a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v20 = qword_1022A02D8;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)__p = 138412546;
        *(_QWORD *)&__p[4] = v21;
        v28 = 2112;
        v29 = (CFTypeID)a2;
        LODWORD(v23) = 22;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 17, "Unsupported type at %@:%@ (domain:key)", __p, v23);
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "%s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_1001C415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001C4198(uint64_t a1)
{
  __int128 v8;

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0xFFFF;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  v8 = _Q0;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 156) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 224) = 0x30000000BLL;
  *(_DWORD *)(a1 + 232) = -1;
  sub_1015A2E04((_QWORD *)(a1 + 240), "");
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(_QWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 284) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 300) = v8;
  *(_OWORD *)(a1 + 316) = v8;
  *(_OWORD *)(a1 + 332) = v8;
  *(_DWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 388) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 420) = -1;
  return a1;
}

void sub_1001C42C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001C42E4(const void *a1)
{
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyGSM))
    return 0;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyLTE))
    return 6;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUMTS))
    return 7;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUTRAN))
    return 2;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMA1x))
    return 3;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMAEVDO))
    return 4;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyCDMAHybrid))
    return 5;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyUTRAN2))
    return 9;
  if (CFEqual(a1, kCTCellMonitorRadioAccessTechnologyNR))
    return 10;
  return 11;
}

uint64_t sub_1001C441C(const void *a1)
{
  if (CFEqual(a1, kCTCellMonitorCellTypeServing))
    return 0;
  if (CFEqual(a1, kCTCellMonitorCellTypeNeighbor))
    return 1;
  if (CFEqual(a1, kCTCellMonitorCellTypeDetected))
    return 2;
  return 3;
}

uint64_t sub_1001C4494@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unsigned int v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  CFAbsoluteTime Current;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  _QWORD v30[10];
  char v31;
  uint64_t v32;

  sub_100263E50((uint64_t)v28);
  v4 = sub_100263F7C(&v29, (uint64_t)"Request, type, ", 15);
  v5 = *(_DWORD *)a1 - 1;
  if (v5 > 6)
    v6 = "none";
  else
    v6 = off_10214FC20[v5];
  v7 = strlen(v6);
  v8 = sub_100263F7C(v4, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)", lowPriority, ", 15);
  if (*(_BYTE *)(a1 + 8))
    v10 = "yes";
  else
    v10 = "no";
  if (*(_BYTE *)(a1 + 8))
    v11 = 3;
  else
    v11 = 2;
  v12 = sub_100263F7C(v9, (uint64_t)v10, v11);
  v13 = sub_100263F7C(v12, (uint64_t)", requester, ", 13);
  v14 = *(char *)(a1 + 39);
  if (v14 >= 0)
    v15 = a1 + 16;
  else
    v15 = *(_QWORD *)(a1 + 16);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a1 + 39);
  else
    v16 = *(_QWORD *)(a1 + 24);
  v17 = sub_100263F7C(v13, v15, v16);
  v18 = sub_100263F7C(v17, (uint64_t)", numOfRequestedScans, ", 23);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *(unsigned int *)(a1 + 48));
  v20 = sub_100263F7C(v19, (uint64_t)", timestamp, ", 13);
  v21 = *v20;
  *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v20 + *(_QWORD *)(v21 - 24) + 16) = 1;
  v22 = (_QWORD *)std::ostream::operator<<(v20, *(double *)(a1 + 40));
  v23 = sub_100263F7C(v22, (uint64_t)", age, ", 7);
  v24 = *v23;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 16) = 1;
  Current = CFAbsoluteTimeGetCurrent();
  std::ostream::operator<<(v23, Current - *(double *)(a1 + 40));
  std::stringbuf::str(a2, v30);
  *(_QWORD *)((char *)v28
  v29 = v26;
  if (v31 < 0)
    operator delete((void *)v30[8]);
  std::streambuf::~streambuf(v30);
  return std::ios::~ios(&v32);
}

void sub_1001C46BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001C46D8(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  CFTypeID v9;
  CFTypeRef v10;
  CFTypeRef cf[3];
  __int16 v13;

  v7 = a1 + 128;
  v6 = *(_QWORD *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 128);
  v13 = 256;
  cf[0] = 0;
  v8 = sub_1001C1AD8(a1, a2, cf);
  if (v8)
  {
    v9 = CFGetTypeID(cf[0]);
    if (v9 == CFArrayGetTypeID() || v9 == CFDictionaryGetTypeID())
    {
      *a3 = objc_msgSend((id)cf[0], "cl_deepCopy");
    }
    else
    {
      v10 = cf[0];
      *a3 = cf[0];
      CFRetain(v10);
    }
    CFRelease(cf[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return v8;
}

void sub_1001C47A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C47C0(uint64_t a1, double a2, long double a3)
{
  NSObject *v6;
  _QWORD *v7;
  const char **v8;
  const char *v9;
  FILE *v10;
  FILE *v11;
  int v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  int v16;
  int v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  int v27;
  double v28;
  signed int v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  char *v41;
  NSObject *v42;
  int v43;
  int v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _BYTE v56[10];
  int v57;
  __int16 v58;
  int v59;
  __int128 v60[16];
  _BYTE v61[96];
  __int128 v62;
  __int128 v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  int buf;
  _BYTE v69[10];
  int v70;
  __int16 v71;
  int v72;

  if ((sub_1001C6834(a1) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v16 = *(unsigned __int8 *)(a1 + 64);
      buf = 67240192;
      *(_DWORD *)v69 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,DEM,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v17 = *(unsigned __int8 *)(a1 + 64);
    LODWORD(v60[0]) = 67240192;
    DWORD1(v60[0]) = v17;
    LODWORD(v52) = 8;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", v60, v52);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf)
      return 0;
LABEL_117:
    free(v18);
    return 0;
  }
  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  memset(v61, 0, sizeof(v61));
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v54 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10215A660);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v7 = (_QWORD *)*v7;
    buf = 136446210;
    *(_QWORD *)v69 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v46 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v46 = (_QWORD *)*v46;
    v55 = 136446210;
    *(_QWORD *)v56 = v46;
    LODWORD(v52) = 12;
    v47 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Reading,%{public}s", &v55, v52);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v47);
    if (v47 != (char *)&buf)
      free(v47);
  }
  v8 = (const char **)(a1 + 72);
  v9 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v9 = *v8;
  v10 = fopen(v9, "rb");
  v11 = v10;
  if (!v10)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v20 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v20 = *v8;
      v21 = *(unsigned __int8 *)(a1 + 64);
      v22 = *__error();
      buf = 136446722;
      *(_QWORD *)v69 = v20;
      *(_WORD *)&v69[8] = 1026;
      v70 = v21;
      v71 = 1026;
      v72 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    if (*(char *)(a1 + 95) < 0)
      v8 = (const char **)*v8;
    v48 = qword_1022A0078;
    v49 = *(unsigned __int8 *)(a1 + 64);
    v50 = *__error();
    v55 = 136446722;
    *(_QWORD *)v56 = v8;
    *(_WORD *)&v56[8] = 1026;
    v57 = v49;
    v58 = 1026;
    v59 = v50;
    LODWORD(v52) = 24;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v48, 16, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", &v55, v52);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v18);
    if (v18 == (char *)&buf)
      return 0;
    goto LABEL_117;
  }
  v53 = 0;
  if (!sub_1001C57F0((_BOOL8)v10, v60, (uint64_t)v61, (int *)&v54, (uint64_t)&v53))
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(unsigned __int8 *)(a1 + 64);
      buf = 67240192;
      *(_DWORD *)v69 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v51 = *(unsigned __int8 *)(a1 + 64);
    v55 = 67240192;
    *(_DWORD *)v56 = v51;
    LODWORD(v52) = 8;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", &v55, v52);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
    goto LABEL_121;
  }
  v12 = SBYTE10(v62);
  if ((double)SBYTE10(v62) <= a2)
  {
    v27 = SBYTE11(v62);
    if ((double)SBYTE11(v62) <= a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v31 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        buf = 134283777;
        *(double *)v69 = a2;
        *(_WORD *)&v69[8] = 1025;
        v70 = v27;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "DEM,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v55 = 134283777;
      *(double *)v56 = a2;
      *(_WORD *)&v56[8] = 1025;
      v57 = v27;
      LODWORD(v52) = 18;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", &v55, v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
    sub_1001C6800(a3);
    v29 = vcvtmd_s64_f64(v28 * 10.0) + 3600 * ((int)(floor(a2 * 10.0) + 900.0) - 10 * v12 - 900);
    if (v29 >= 0)
      v30 = v29;
    else
      v30 = v29 + 7;
    HIBYTE(v52) = 0;
    if ((v30 >> 3) >= HIDWORD(v63))
    {
      *(_BYTE *)(a1 + 64) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v33 = *(unsigned __int8 *)(a1 + 64);
        buf = 67240448;
        *(_DWORD *)v69 = v30 >> 3;
        *(_WORD *)&v69[4] = 1026;
        *(_DWORD *)&v69[6] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#Warning,DEM,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v34 = *(unsigned __int8 *)(a1 + 64);
      v55 = 67240448;
      *(_DWORD *)v56 = v30 >> 3;
      *(_WORD *)&v56[4] = 1026;
      *(_DWORD *)&v56[6] = v34;
      LODWORD(v52) = 14;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", &v55, v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
    fseek(v11, v30 >> 3, 1);
    if (fread((char *)&v52 + 7, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      switch(v29 - (v30 & 0xFFFFFFF8))
      {
        case 0u:
          v23 = HIBYTE(v52) & 1;
          break;
        case 1u:
          v23 = (HIBYTE(v52) >> 1) & 1;
          break;
        case 2u:
          v23 = (HIBYTE(v52) >> 2) & 1;
          break;
        case 3u:
          v23 = (HIBYTE(v52) >> 3) & 1;
          break;
        case 4u:
          v23 = (HIBYTE(v52) >> 4) & 1;
          break;
        case 5u:
          v23 = (HIBYTE(v52) >> 5) & 1;
          break;
        case 6u:
          v23 = (HIBYTE(v52) >> 6) & 1;
          break;
        case 7u:
          v23 = v52 < 0;
          break;
        default:
          *(_BYTE *)(a1 + 64) = 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10215A660);
          v42 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            v43 = *(unsigned __int8 *)(a1 + 64);
            buf = 67240192;
            *(_DWORD *)v69 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "DEM,Unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10215A660);
            v44 = *(unsigned __int8 *)(a1 + 64);
            v55 = 67240192;
            *(_DWORD *)v56 = v44;
            LODWORD(v52) = 8;
            v45 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "DEM,Unexpected case,fNeedToDownloadAvlFile,%{public}d", &v55, v52);
            sub_100512490("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v45);
            if (v45 != (char *)&buf)
              free(v45);
          }
          goto LABEL_45;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v38 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(unsigned __int8 *)(a1 + 64);
        buf = 67240448;
        *(_DWORD *)v69 = v23;
        *(_WORD *)&v69[4] = 1026;
        *(_DWORD *)&v69[6] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "DEM,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10215A660);
        v40 = *(unsigned __int8 *)(a1 + 64);
        v55 = 67240448;
        *(_DWORD *)v56 = v23;
        *(_WORD *)&v56[4] = 1026;
        *(_DWORD *)&v56[6] = v40;
        LODWORD(v52) = 14;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", &v55, v52);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v41);
        if (v41 != (char *)&buf)
          free(v41);
      }
      goto LABEL_46;
    }
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v35 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v36 = *(unsigned __int8 *)(a1 + 64);
      buf = 67240192;
      *(_DWORD *)v69 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - unable to get data byte,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v37 = *(unsigned __int8 *)(a1 + 64);
      v55 = 67240192;
      *(_DWORD *)v56 = v37;
      LODWORD(v52) = 8;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - unable to get data byte,fNeedToDownloadAvlFile,%{public}d", &v55, v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
      goto LABEL_121;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      buf = 134283777;
      *(double *)v69 = a2;
      *(_WORD *)&v69[8] = 1025;
      v70 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "DEM,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v55 = 134283777;
      *(double *)v56 = a2;
      *(_WORD *)&v56[8] = 1025;
      v57 = v12;
      LODWORD(v52) = 18;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", &v55, v52);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v14);
LABEL_121:
      if (v14 != (char *)&buf)
        free(v14);
    }
  }
LABEL_44:
  fclose(v11);
LABEL_45:
  v23 = 0;
LABEL_46:
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  return v23;
}

void sub_1001C5794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  if (a71 < 0)
    operator delete(*(void **)(v71 + 136));
  _Unwind_Resume(a1);
}

BOOL sub_1001C57F0(_BOOL8 result, __int128 *a2, uint64_t a3, int *a4, uint64_t a5)
{
  FILE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  int v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  NSObject *v33;
  double v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  int *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  int v54;
  unsigned __int8 v55;
  _QWORD v56[3];
  char v57;
  int v58;
  double v59;
  int v60;
  double v61;

  if (!result)
    return result;
  v9 = (FILE *)result;
  v56[1] = v56;
  if (feof((FILE *)result))
    return 0;
  v56[0] = a5;
  v10 = 0;
  while (1)
  {
    v57 = 0;
    if (fread(&v57, 1uLL, 1uLL, v9) != 1)
      return 0;
    v11 = ftell(v9);
    if (v57 == 67)
      break;
LABEL_12:
    v15 = feof(v9);
    result = 0;
    if (!v15 && v10++ < 0x1FF)
      continue;
    return result;
  }
  v12 = v11;
  LOBYTE(v54) = 67;
  if (fread((char *)&v54 + 1, 1uLL, 4uLL, v9) != 4)
    return 0;
  *(_DWORD *)a3 = v54;
  v14 = v55;
  *(_BYTE *)(a3 + 4) = v55;
  v13.i32[0] = *(_DWORD *)a3;
  if (vmovn_s16((int16x8_t)vmovl_u8(v13)).u32[0] != 1447119939 || v14 != 76)
  {
    if (!fseek(v9, v12, 0))
      goto LABEL_12;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v37 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "DEM,fseek returned non-zero", (uint8_t *)&v60, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v38 = (int *)_os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 17, "DEM,fseek returned non-zero", &v58, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDEMTileAvailabilityData &, size_t &, size_t &)", "%s\n");
LABEL_137:
    if (v38 != &v60)
      free(v38);
    return 0;
  }
  v17 = 0;
  *(_QWORD *)a4 = 5;
  do
  {
    *((_BYTE *)a2 + v17) = *(_BYTE *)(a3 + v17);
    ++v17;
    v18 = *(_QWORD *)a4;
  }
  while (*(_QWORD *)a4 > v17);
  v19 = (104 - v18);
  if (fread((char *)a2 + v18, 1uLL, v19, v9) != v19)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - header string", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - header string", &v58, 2);
    goto LABEL_136;
  }
  v20 = *a2;
  v21 = a2[2];
  *(_OWORD *)(a3 + 16) = a2[1];
  *(_OWORD *)(a3 + 32) = v21;
  *(_OWORD *)a3 = v20;
  v22 = a2[3];
  v23 = a2[4];
  v24 = a2[5];
  *(_QWORD *)(a3 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a3 + 64) = v23;
  *(_OWORD *)(a3 + 80) = v24;
  *(_OWORD *)(a3 + 48) = v22;
  v25 = *(_QWORD *)a4 + v19;
  *(_QWORD *)a4 = v25;
  LODWORD(v22) = *(_DWORD *)a3;
  if (vmovn_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)&v22)).u32[0] != 1447119939 || *(_BYTE *)(a3 + 4) != 76)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v40 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - invalid header string", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - invalid header string", &v58, 2);
    goto LABEL_136;
  }
  if (fread((char *)a2 + v25, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - version", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - version", &v58, 2);
    goto LABEL_136;
  }
  v26 = *(_QWORD *)a4;
  *(_BYTE *)(a3 + 104) = *((_BYTE *)a2 + *(_QWORD *)a4);
  *(_QWORD *)a4 = ++v26;
  if (fread((char *)a2 + v26, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v42 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - headerLength", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - headerLength", &v58, 2);
    goto LABEL_136;
  }
  v27 = *(_QWORD *)a4;
  *(_BYTE *)(a3 + 105) = *((_BYTE *)a2 + *(_QWORD *)a4);
  *(_QWORD *)a4 = ++v27;
  if (fread((char *)a2 + v27, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - minLat", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - minLat", &v58, 2);
    goto LABEL_136;
  }
  v28 = *(_QWORD *)a4;
  *(_BYTE *)(a3 + 106) = *((_BYTE *)a2 + *(_QWORD *)a4);
  *(_QWORD *)a4 = ++v28;
  if (fread((char *)a2 + v28, 1uLL, 1uLL, v9) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v44 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - maxLat", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - maxLat", &v58, 2);
    goto LABEL_136;
  }
  v29 = *(_QWORD *)a4;
  *(_BYTE *)(a3 + 107) = *((_BYTE *)a2 + *(_QWORD *)a4);
  *(_QWORD *)a4 = ++v29;
  if (fread((char *)a2 + v29, 1uLL, 4uLL, v9) != 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v45 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      LOWORD(v60) = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - binsize", (uint8_t *)&v60, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    LOWORD(v58) = 0;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - binsize", &v58, 2);
LABEL_136:
    v38 = (int *)v36;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDEMTileAvailabilityData &, size_t &, size_t &)", "%s\n");
    goto LABEL_137;
  }
  v30 = *(_QWORD *)a4;
  v31 = COERCE_FLOAT(bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4)));
  *(float *)(a3 + 108) = v31;
  v32 = v30 + 4;
  *(_QWORD *)a4 = v32;
  if (fabsf(v31 + -0.1) <= 0.0001)
  {
    if (fread((char *)a2 + v32, 1uLL, 8uLL, v9) == 8)
    {
      v46 = *(_QWORD *)a4;
      *(_QWORD *)(a3 + 112) = bswap64(*(_QWORD *)((char *)a2 + *(_QWORD *)a4));
      v46 += 8;
      *(_QWORD *)a4 = v46;
      if (fread((char *)a2 + v46, 1uLL, 4uLL, v9) == 4)
      {
        v47 = *(_QWORD *)a4;
        *(_DWORD *)(a3 + 120) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
        v47 += 4;
        *(_QWORD *)a4 = v47;
        if (fread((char *)a2 + v47, 1uLL, 4uLL, v9) == 4)
        {
          v48 = *(_QWORD *)a4;
          *(_DWORD *)(a3 + 124) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
          v48 += 4;
          *(_QWORD *)a4 = v48;
          if (fread((char *)a2 + v48, 1uLL, 4uLL, v9) == 4)
          {
            *(_QWORD *)v56[0] = *a4;
            v49 = *(_QWORD *)a4;
            *(_DWORD *)(a3 + 128) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
            *(_QWORD *)a4 = v49 + 4;
            return 1;
          }
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10215A660);
          v53 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            LOWORD(v60) = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - crc", (uint8_t *)&v60, 2u);
          }
          result = sub_1001BFF7C(115, 2);
          if (!result)
            return result;
          bzero(&v60, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10215A660);
          LOWORD(v58) = 0;
          v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - crc", &v58, 2);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10215A660);
          v52 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            LOWORD(v60) = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - data size", (uint8_t *)&v60, 2u);
          }
          result = sub_1001BFF7C(115, 2);
          if (!result)
            return result;
          bzero(&v60, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10215A660);
          LOWORD(v58) = 0;
          v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - data size", &v58, 2);
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10215A660);
        v51 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          LOWORD(v60) = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - expiration age", (uint8_t *)&v60, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(&v60, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10215A660);
        LOWORD(v58) = 0;
        v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - expiration age", &v58, 2);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v50 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        LOWORD(v60) = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "#Warning,DEM,Invalid CLDEM availability file - timestamp", (uint8_t *)&v60, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(&v60, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      LOWORD(v58) = 0;
      v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Invalid CLDEM availability file - timestamp", &v58, 2);
    }
    goto LABEL_136;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10215A660);
  v33 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v34 = *(float *)(a3 + 108);
    v60 = 134349056;
    v61 = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#Warning,DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&v60, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(&v60, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v35 = *(float *)(a3 + 108);
    v58 = 134349056;
    v59 = v35;
    v36 = _os_log_send_and_compose_impl(2, 0, &v60, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%{public}.1f,re-download needed", &v58, 12);
    goto LABEL_136;
  }
  return result;
}

void sub_1001C6800(long double a1)
{
  fmod(a1, 360.0);
}

uint64_t sub_1001C6834(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  const char **v6;
  const char *v7;
  FILE *v8;
  FILE *v9;
  double Current;
  double v11;
  unsigned int v12;
  NSObject *v13;
  int v14;
  int v15;
  char *v16;
  NSObject *v17;
  int v18;
  int v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  NSObject *v31;
  int v32;
  int v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  _BYTE v49[12];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int128 v60[16];
  _BYTE v61[96];
  __int128 v62;
  __int128 v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;

  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  memset(v61, 0, sizeof(v61));
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v46 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10215A660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    LODWORD(v55) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v33 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)v49 = 67240192;
    *(_DWORD *)&v49[4] = v33;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,fNeedToDownloadAvlFile,%{public}d", v49, 8);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  if (!sub_1001C74D4(a1))
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v18 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v55) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning,DEM,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v19 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)v49 = 67240192;
    *(_DWORD *)&v49[4] = v19;
    LODWORD(v45) = 8;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", v49, v45);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v20);
    if (v20 == (char *)buf)
      return 0;
LABEL_81:
    free(v20);
    return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10215A660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v5 = *(const char **)v5;
    *(_DWORD *)buf = 136446210;
    v55 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,Reading,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v35 = (_QWORD *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v49 = 136446210;
    *(_QWORD *)&v49[4] = v35;
    LODWORD(v45) = 12;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Reading,%{public}s", v49, v45);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  v6 = (const char **)(a1 + 72);
  v7 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v7 = *v6;
  v8 = fopen(v7, "rb");
  v9 = v8;
  if (!v8)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v21 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v22 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v22 = *v6;
      v23 = *(unsigned __int8 *)(a1 + 64);
      v24 = *__error();
      *(_DWORD *)buf = 136446722;
      v55 = v22;
      v56 = 1026;
      v57 = v23;
      v58 = 1026;
      v59 = v24;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    if (*(char *)(a1 + 95) < 0)
      v6 = (const char **)*v6;
    v37 = qword_1022A0078;
    v38 = *(unsigned __int8 *)(a1 + 64);
    v39 = *__error();
    *(_DWORD *)v49 = 136446722;
    *(_QWORD *)&v49[4] = v6;
    v50 = 1026;
    v51 = v38;
    v52 = 1026;
    v53 = v39;
    LODWORD(v45) = 24;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 16, "#Error,DEM,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", v49, v45);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v20);
    if (v20 == (char *)buf)
      return 0;
    goto LABEL_81;
  }
  *(_QWORD *)v49 = 0;
  if (!sub_1001C57F0((_BOOL8)v8, v60, (uint64_t)v61, (int *)&v46, (uint64_t)v49))
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v27 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v55) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#Warning,DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v40 = *(unsigned __int8 *)(a1 + 64);
      v47 = 67240192;
      v48 = v40;
      LODWORD(v45) = 8;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", &v47, v45);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
    fclose(v9);
    goto LABEL_56;
  }
  fclose(v9);
  if (BYTE8(v62) != 1)
  {
    *(_BYTE *)(a1 + 64) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v55) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "DEM,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v42 = *(unsigned __int8 *)(a1 + 64);
    v47 = 67240192;
    v48 = v42;
    LODWORD(v45) = 8;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", &v47, v45);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v16);
    goto LABEL_89;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v11 = *(double *)&v63;
  v12 = DWORD2(v63);
  if (Current <= v11 + (double)v12 + (double)(random() % 86400))
  {
    *(_BYTE *)(a1 + 64) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      LODWORD(v55) = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "DEM,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A660);
      v43 = *(unsigned __int8 *)(a1 + 64);
      v47 = 67240192;
      v48 = v43;
      LODWORD(v45) = 8;
      v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,end of checkAvlFileValidityAndSetDownloadFlag function reached,fNeedToDownloadAvlFile,%{public}d", &v47, v45);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v44);
      if (v44 != (char *)buf)
        free(v44);
    }
    v25 = 1;
    goto LABEL_57;
  }
  *(_BYTE *)(a1 + 64) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10215A660);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67240192;
    LODWORD(v55) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DEM,availability file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A660);
    v15 = *(unsigned __int8 *)(a1 + 64);
    v47 = 67240192;
    v48 = v15;
    LODWORD(v45) = 8;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,availability file has expired,fNeedToDownloadAvlFile,%{public}d", &v47, v45);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDemTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v16);
LABEL_89:
    if (v16 != (char *)buf)
      free(v16);
  }
LABEL_56:
  v25 = 0;
LABEL_57:
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  return v25;
}

void sub_1001C7488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

BOOL sub_1001C74D4(uint64_t a1)
{
  char *v2;
  const std::string::value_type *p_p;
  __darwin_ino64_t st_gid_high;
  std::string *p_str;
  int v6;
  stat __p;
  std::string __str;

  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&__p.st_uid = *(_QWORD *)(a1 + 56);
  }
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = *(const std::string::value_type **)&__p.st_dev;
  if ((__p.st_gid & 0x80000000) == 0)
    st_gid_high = HIBYTE(__p.st_gid);
  else
    st_gid_high = __p.st_ino;
  std::string::append(&__str, p_p, st_gid_high);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  std::string::operator=((std::string *)(a1 + 72), &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v6 = stat((const char *)p_str, &__p);
  if (v6)
    *(_BYTE *)(a1 + 64) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6 == 0;
}

void sub_1001C75B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1001C75D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1001C75C0);
}

void sub_1001C75F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  NSObject *v20;
  int v21;
  void **v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int i;
  double v27;
  float32_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  NSObject *v33;
  int v34;
  void **v35;
  uint64_t v36;
  int v37;
  void **v38;
  char *v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  unsigned int v43;
  uint64_t *v44;
  unsigned int j;
  double v46;
  float32_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  unsigned int v51;
  NSObject *v52;
  int v53;
  void **v54;
  uint64_t v55;
  int v56;
  void **v57;
  char *v58;
  char *v59;
  NSObject *v60;
  const char *v61;
  NSObject *v62;
  const char *v63;
  uint8_t *v64;
  uint64_t v65;
  int v66;
  void *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  void *v75[2];
  char v76;
  void *__p[2];
  void *v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  void **v85;
  __int128 v86;
  void *v87;
  __int128 v88;
  uint64_t v89;
  uint8_t buf[4];
  _BYTE v91[10];
  __int16 v92;
  void **v93;

  if (*(_BYTE *)a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 464) + 56))(*(_QWORD *)(v4 + 464));
    v6 = *(_QWORD *)(a1 + 40);
    if (*(double *)(v6 + 20) < 0.0 || vabdd_f64(v5, *(double *)(v6 + 76)) > 3600.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: location not relevant", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        LOWORD(v86) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: location not relevant", &v86, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
LABEL_24:
        if (v9 != buf)
          free(v9);
        return;
      }
      return;
    }
    v74 = (int *)(a2 + 4);
    sub_1000C1928((uint64_t)&v86, (_DWORD *)(a2 + 4));
    sub_1001CB024((uint64_t)&v86, -1, *(double *)(*(_QWORD *)(a1 + 40) + 4), *(double *)(*(_QWORD *)(a1 + 40) + 12), *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001C8DA8((unsigned int *)&v86))
    {
      v16 = sub_1001C85FC(a2 + 184, (unsigned int *)&v86);
      v17 = v16;
      if (v16 && sub_1001C9408(v16, *(_BYTE *)(v4 + 200)))
      {
        v18 = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 464) + 56))(*(_QWORD *)(v4 + 464));
        v19 = sub_1001C9C90(v17, v18);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v20 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v21 = *v74;
          sub_100BCC240((unsigned int *)&v86, __p);
          v22 = SHIBYTE(v78) >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v91 = v19;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = (__int16)v21;
          v92 = 2080;
          v93 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
          if (SHIBYTE(v78) < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v65 = qword_1022A0028;
          v66 = *v74;
          sub_100BCC240((unsigned int *)&v86, &v81);
          if (SHIBYTE(v85) >= 0)
            v67 = &v81;
          else
            v67 = v81;
          LODWORD(__p[0]) = 67109634;
          HIDWORD(__p[0]) = v19;
          LOWORD(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 2) = (__int16)v66;
          HIWORD(__p[1]) = 2080;
          v78 = v67;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 2, "TILE: updating mtime, %d, type, %d, tileid, %s", __p, 24, v71);
          v69 = v68;
          if (SHIBYTE(v85) < 0)
            operator delete(v81);
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v69);
          if (v69 != (char *)buf)
            free(v69);
        }
      }
      v23 = *v74;
      if (*v74 == 1)
      {
        v24 = -18;
        v25 = &qword_1022A0000;
        v72 = 67109634;
        while (1)
        {
          for (i = -18; i != 19; ++i)
          {
            if (!(i | v24))
              continue;
            *(_OWORD *)__p = v86;
            v78 = v87;
            if (SHIBYTE(v89) < 0)
            {
              sub_100115CE4(&v79, (void *)v88, *((unint64_t *)&v88 + 1));
            }
            else
            {
              v79 = v88;
              v80 = v89;
            }
            v27 = *(double *)(a2 + 160);
            v28 = *(double *)(a2 + 152);
            *(float *)&v27 = v27;
            sub_1001C85C8((uint64_t)__p, v24, i, v28, *(float32x2_t *)&v27);
            if (sub_1001C8DA8((unsigned int *)__p))
            {
              v29 = sub_1001C85FC(a2 + 184, (unsigned int *)__p);
              v30 = v29;
              if (!v29 || !sub_1001C9408(v29, *(_BYTE *)(v4 + 200)))
                goto LABEL_69;
              v31 = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 464) + 56))(*(_QWORD *)(v4 + 464));
              v32 = sub_1001C9C90(v30, v31);
              if (v25[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v33 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v34 = *v74;
                sub_100BCC240((unsigned int *)__p, &v81);
                v35 = &v81;
                if (SHIBYTE(v85) < 0)
                  v35 = (void **)v81;
                *(_DWORD *)buf = v72;
                *(_DWORD *)v91 = v32;
                *(_WORD *)&v91[4] = 1024;
                *(_DWORD *)&v91[6] = (__int16)v34;
                v92 = 2080;
                v93 = v35;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s", buf, 0x18u);
                if (SHIBYTE(v85) < 0)
                  operator delete(v81);
                v25 = &qword_1022A0000;
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_69;
              bzero(buf, 0x65CuLL);
              if (v25[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v36 = qword_1022A0028;
              v37 = *v74;
              sub_100BCC240((unsigned int *)__p, v75);
              v38 = v75;
              if (v76 < 0)
                v38 = (void **)v75[0];
              v81 = (void *)__PAIR64__(v32, v72);
              v82 = 1024;
              v83 = (__int16)v37;
              v84 = 2080;
              v85 = v38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s", &v81, 24, (const char *)v72);
              v40 = v39;
              if (v76 < 0)
                operator delete(v75[0]);
              sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v40);
              v25 = &qword_1022A0000;
            }
            else
            {
              if (v25[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v41 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "Invalid dem neighbor tile id!", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_69;
              bzero(buf, 0x65CuLL);
              if (v25[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              LOWORD(v81) = 0;
              LODWORD(v70) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Invalid dem neighbor tile id!", &v81, v70);
              v40 = (char *)v42;
              sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v42);
            }
            if (v40 != (char *)buf)
              free(v40);
LABEL_69:
            if (SHIBYTE(v80) < 0)
              operator delete((void *)v79);
          }
          if (++v24 == 19)
          {
            v23 = *v74;
            break;
          }
        }
      }
      if (v23 == 2)
      {
        v43 = -20;
        v44 = &qword_1022A0000;
        v73 = 67109634;
        do
        {
          for (j = -20; j != 21; ++j)
          {
            if (!(j | v43))
              continue;
            *(_OWORD *)__p = v86;
            v78 = v87;
            if (SHIBYTE(v89) < 0)
            {
              sub_100115CE4(&v79, (void *)v88, *((unint64_t *)&v88 + 1));
            }
            else
            {
              v79 = v88;
              v80 = v89;
            }
            v46 = *(double *)(a2 + 160);
            v47 = *(double *)(a2 + 152);
            *(float *)&v46 = v46;
            sub_1001C85C8((uint64_t)__p, v43, j, v47, *(float32x2_t *)&v46);
            if (sub_1001C8DA8((unsigned int *)__p))
            {
              v48 = sub_1001C85FC(a2 + 184, (unsigned int *)__p);
              v49 = v48;
              if (!v48 || !sub_1001C9408(v48, *(_BYTE *)(v4 + 200)))
                goto LABEL_111;
              v50 = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 464) + 56))(*(_QWORD *)(v4 + 464));
              v51 = sub_1001C9C90(v49, v50);
              if (v44[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v52 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v53 = *v74;
                sub_100BCC240((unsigned int *)__p, &v81);
                v54 = &v81;
                if (SHIBYTE(v85) < 0)
                  v54 = (void **)v81;
                *(_DWORD *)buf = v73;
                *(_DWORD *)v91 = v51;
                *(_WORD *)&v91[4] = 1024;
                *(_DWORD *)&v91[6] = (__int16)v53;
                v92 = 2080;
                v93 = v54;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "TILE: updating HRSE neighbor mtime, %d, type, %d, tileid, %s", buf, 0x18u);
                if (SHIBYTE(v85) < 0)
                  operator delete(v81);
                v44 = &qword_1022A0000;
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_111;
              bzero(buf, 0x65CuLL);
              if (v44[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v55 = qword_1022A0028;
              v56 = *v74;
              sub_100BCC240((unsigned int *)__p, v75);
              v57 = v75;
              if (v76 < 0)
                v57 = (void **)v75[0];
              v81 = (void *)__PAIR64__(v51, v73);
              v82 = 1024;
              v83 = (__int16)v56;
              v84 = 2080;
              v85 = v57;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 2, "TILE: updating HRSE neighbor mtime, %d, type, %d, tileid, %s", &v81, 24, (const char *)v73);
              v59 = v58;
              if (v76 < 0)
                operator delete(v75[0]);
              sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v59);
              v44 = &qword_1022A0000;
            }
            else
            {
              if (v44[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              v60 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "Invalid HRSE neighbor tile id!", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_111;
              bzero(buf, 0x65CuLL);
              if (v44[4] != -1)
                dispatch_once(&qword_1022A0020, &stru_102197858);
              LOWORD(v81) = 0;
              LODWORD(v70) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Invalid HRSE neighbor tile id!", &v81, v70);
              v59 = (char *)v61;
              sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v61);
            }
            if (v59 != (char *)buf)
              free(v59);
LABEL_111:
            if (SHIBYTE(v80) < 0)
              operator delete((void *)v79);
          }
          ++v43;
        }
        while (v43 != 21);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v62 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "TileMgr, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        LOWORD(__p[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, Invalid tile id!, #CloneMe", __p, 2);
        v64 = (uint8_t *)v63;
        sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v63);
        if (v64 != buf)
          free(v64);
      }
    }
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v11 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v11 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v91 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v14 = *(_QWORD *)(a2 + 8);
    v13 = a2 + 8;
    v12 = v14;
    if (*(char *)(v13 + 23) >= 0)
      v12 = v13;
    LODWORD(v86) = 136315138;
    *(_QWORD *)((char *)&v86 + 4) = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: tiles, %s, not active", (const char *)&v86);
    v9 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v15);
    goto LABEL_24;
  }
}

void sub_1001C8534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t sub_1001C85C8(uint64_t a1, unsigned int a2, unsigned int a3, float32_t a4, float32x2_t a5)
{
  int32x2_t result;

  a5.f32[1] = a4;
  result = vcvt_s32_f32(vmla_f32(vcvt_f32_s32(*(int32x2_t *)(a1 + 4)), a5, vcvt_f32_s32(vmul_s32((int32x2_t)__PAIR64__(a2, a3), vdup_n_s32(0x2710u)))));
  *(int32x2_t *)(a1 + 4) = result;
  return result;
}

uint64_t sub_1001C85FC(uint64_t a1, unsigned int *a2)
{
  _QWORD *v4;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;

  if (sub_1001C8DA8(a2))
  {
    v4 = sub_1001C8840(a1, (uint64_t)a2);
    if ((_QWORD *)(a1 + 8) != v4)
      return v4[10];
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215A600);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240(a2, __p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215A600);
      v8 = qword_1022A0048;
      sub_100BCC240(a2, buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136380675;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v8, 17, "Invalid tile ID: %{private}s, #CloneMe", &v13, 12);
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "CLTileFile *CLTilesMap::at(const TileId &) const", "%s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return 0;
}

_QWORD *sub_1001C8840(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1001C88B8((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1001C88B8(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t sub_1001C88B8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  NSObject *v6;
  void **v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  const void **v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  size_t v23;
  unsigned __int8 *v24;
  const void **v25;
  uint64_t v26;
  uint64_t result;
  const void *v28;
  size_t v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  _BYTE buf[12];
  char v39;
  int v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  if (!sub_1001C8DA8((unsigned int *)a1))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102178450);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240((unsigned int *)a1, __p);
      v5 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v43 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102178450);
      v31 = qword_1022A0048;
      sub_100BCC240((unsigned int *)a1, buf);
      if (v39 >= 0)
        v32 = buf;
      else
        v32 = *(_BYTE **)buf;
      v40 = 136380675;
      v41 = v32;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 17, "Invalid tile ID: %{private}s, #CloneMe", &v40, 12);
      if (v39 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "BOOL TileId::operator<(const TileId &) const", "%s\n", v33);
      if (v33 != (char *)__p)
        free(v33);
    }
  }
  if (!sub_1001C8DA8((unsigned int *)a2))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102178450);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      sub_100BCC240((unsigned int *)a2, __p);
      v7 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid tile ID: %{private}s, #CloneMe", buf, 0xCu);
      if (v43 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102178450);
      v34 = qword_1022A0048;
      sub_100BCC240((unsigned int *)a2, buf);
      if (v39 >= 0)
        v35 = buf;
      else
        v35 = *(_BYTE **)buf;
      v40 = 136380675;
      v41 = v35;
      LODWORD(v37) = 12;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 17, "Invalid tile ID: %{private}s, #CloneMe", &v40, v37);
      if (v39 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "BOOL TileId::operator<(const TileId &) const", "%s\n", v36);
      if (v36 != (char *)__p)
        free(v36);
    }
  }
  v8 = *(_DWORD *)a1 < *(_DWORD *)a2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return v8;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a2 + 8);
  v8 = v9 < v10;
  if (v9 != v10)
    return v8;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a2 + 4);
  v8 = v11 < v12;
  if (v11 != v12)
    return v8;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a2 + 16);
  if (v13 != v14)
    return v13 < v14;
  v15 = (const void **)(a1 + 24);
  v16 = *(unsigned __int8 *)(a1 + 47);
  v17 = *(_QWORD *)(a1 + 32);
  if ((v16 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(a1 + 47);
  else
    v18 = *(_QWORD *)(a1 + 32);
  v21 = *(unsigned __int8 **)(a2 + 24);
  v20 = (unsigned __int8 *)(a2 + 24);
  v19 = v21;
  v22 = (char)v20[23];
  if (v22 >= 0)
    v23 = v20[23];
  else
    v23 = *((_QWORD *)v20 + 1);
  if (v22 < 0)
    v20 = v19;
  if (v18 == v23)
  {
    if ((v16 & 0x80) != 0)
    {
      result = memcmp(*v15, v20, v17);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!(_DWORD)v16)
        return 0;
      v24 = v20;
      v25 = v15;
      v26 = v16;
      while (*(unsigned __int8 *)v25 == *v24)
      {
        result = 0;
        v25 = (const void **)((char *)v25 + 1);
        ++v24;
        if (!--v26)
          return result;
      }
    }
  }
  if ((v16 & 0x80u) == 0)
    v28 = v15;
  else
    v28 = *v15;
  if (v23 >= v18)
    v29 = v18;
  else
    v29 = v23;
  v30 = memcmp(v28, v20, v29);
  if (v30)
    return v30 < 0;
  else
    return v18 < v23;
}

BOOL sub_1001C8DA8(unsigned int *a1)
{
  return sub_1001C8FB0(a1) && sub_1001C8DEC(a1) && sub_1001C91DC((uint64_t)a1);
}

BOOL sub_1001C8DEC(unsigned int *a1)
{
  unsigned int v1;
  NSObject *v3;
  unsigned int v4;
  unsigned int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  unsigned int v10;

  v1 = *a1;
  if (*a1 >= 0xD)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102178450);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile type: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102178450);
      v6 = *a1;
      v8[0] = 67109120;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "Invalid tile type: %d", v8);
      sub_100512490("Generic", 1, 0, 2, "BOOL TileId::isTileTypeValid() const", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  return v1 < 0xD;
}

BOOL sub_1001C8FB0(unsigned int *a1)
{
  _BOOL8 result;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  _BYTE buf[12];
  char v9;
  int v10;
  _BYTE *v11;
  void *__p[2];
  char v13;

  if ((a1[1] & 0x80000000) == 0 && (a1[2] & 0x80000000) == 0)
    return 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102178450);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_100BCC240(a1, __p);
    v4 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile x, y: %s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102178450);
    v5 = qword_1022A0048;
    sub_100BCC240(a1, buf);
    if (v9 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v10 = 136315138;
    v11 = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "Invalid tile x, y: %s", (const char *)&v10);
    if (v9 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL TileId::isXYValid() const", "%s\n", v7);
    if (v7 != (char *)__p)
      free(v7);
    return 0;
  }
  return result;
}

BOOL sub_1001C91DC(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  _BYTE buf[12];
  char v9;
  int v10;
  _BYTE *v11;
  void *__p[2];
  char v13;

  if (!*(_BYTE *)(a1 + 7) && !*(_BYTE *)(a1 + 11))
    return 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102178450);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_100BCC240((unsigned int *)a1, __p);
    v4 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile hash: %s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102178450);
    v5 = qword_1022A0048;
    sub_100BCC240((unsigned int *)a1, buf);
    if (v9 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    v10 = 136315138;
    v11 = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v5, 0, "Invalid tile hash: %s", (const char *)&v10);
    if (v9 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL TileId::isHashValid() const", "%s\n", v7);
    if (v7 != (char *)__p)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1001C9408(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = sub_1001C94A8(a1);
  if ((a2 & 1) != 0)
  {
    if ((int)sub_100FA6510(a1) > 2)
      v5 = v5;
    else
      v5 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

void sub_1001C948C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001C94A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return (_DWORD)v1 == 0;
}

uint64_t sub_1001C96BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  FILE *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  const char *v15;
  char *v16;
  const void *v17;
  int v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  double v29;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 64), "assertInside");
  if (byte_102301B58)
  {
    v4 = mach_absolute_time();
    v5 = *(_QWORD *)(a1 + 8);
    v1 = v4 - *(_QWORD *)(v5 + 96);
    if (*(_BYTE *)(v5 + 88) && v1 > qword_102301B70)
    {
      v2 = &qword_1022A0000;
      if (qword_1022A02D0 == -1)
        goto LABEL_8;
      goto LABEL_22;
    }
  }
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_DWORD *)(v11 + 72);
    if (v12 > 0)
      break;
    result = sub_1018FF8BC();
LABEL_21:
    sub_1018FFA1C(result);
LABEL_22:
    dispatch_once(&qword_1022A02D0, &stru_102143448);
LABEL_8:
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(const char **)(*(_QWORD *)(a1 + 8) + 104);
      if (!v8)
        v8 = "<unnamed>";
      *(_DWORD *)buf = 136315650;
      v25 = v8;
      v26 = 2048;
      v27 = a1;
      v28 = 2048;
      v29 = (double)(v1 * dword_102301B5C / unk_102301B60) / 1000000000.0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102143448);
      v15 = *(const char **)(*(_QWORD *)(a1 + 8) + 104);
      if (!v15)
        v15 = "<unnamed>";
      v18 = 136315650;
      v19 = v15;
      v20 = 2048;
      v21 = a1;
      v22 = 2048;
      v23 = (double)(v1 * dword_102301B5C / unk_102301B60) / 1000000000.0;
      LODWORD(v17) = 32;
      v1 = (uint64_t)buf;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning TIMEOUT: Held lock '%s' (%p) for %f seconds", (const char *)&v18, v17);
      sub_100512490("Generic", 1, 0, 2, "virtual void BasicMutex::unlock()", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    v9 = sub_1001BFFCC();
    v10 = *(FILE **)(v9 + 192);
    if (v10)
      sub_100ACE7B0(v9, 0, v10);
  }
  v13 = v12 - 1;
  *(_DWORD *)(v11 + 72) = v13;
  if (!v13)
    *(_QWORD *)(v11 + 80) = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)v11);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

pthread_t sub_1001C9988(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  FILE *v11;
  pthread_t result;
  uint64_t v13;
  int v14;
  _opaque_pthread_t *v15;
  const char *v16;
  char *v17;
  const char *v18;
  int v19;
  double v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 64), "assertInside");
  v3 = (uint64_t)&xmmword_102301000;
  if (byte_102301B58)
    v4 = mach_absolute_time();
  else
    v4 = 0;
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    result = (pthread_t)sub_1018FF75C();
    goto LABEL_26;
  }
  if (byte_102301B58)
  {
    v5 = mach_absolute_time();
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v6 + 96) = v5;
    v3 = v5 - v4;
    if (*(_BYTE *)(v6 + 88) && v3 > qword_102301B68)
    {
      v1 = &qword_1022A0000;
      if (qword_1022A02D0 == -1)
        goto LABEL_12;
      goto LABEL_28;
    }
  }
  while (1)
  {
    result = pthread_self();
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(v13 + 72);
    if (v14 < 0)
    {
LABEL_26:
      result = (pthread_t)sub_1001CA1D4(result);
      goto LABEL_27;
    }
    v15 = *(_opaque_pthread_t **)(v13 + 80);
    if (v14)
    {
      if (v15 == result)
        break;
      result = (pthread_t)sub_1018FF5FC();
    }
    if (!v15)
      break;
LABEL_27:
    sub_1018FF49C(result);
LABEL_28:
    dispatch_once(&qword_1022A02D0, &stru_102143448);
LABEL_12:
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(const char **)(*(_QWORD *)(a1 + 8) + 104);
      *(_DWORD *)buf = 134218498;
      v26 = (double)(v3 * dword_102301B5C / unk_102301B60) / 1000000000.0;
      if (!v9)
        v9 = "<unnamed>";
      v27 = 2080;
      v28 = v9;
      v29 = 2048;
      v30 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v1[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_102143448);
      v16 = *(const char **)(*(_QWORD *)(a1 + 8) + 104);
      v19 = 134218498;
      v20 = (double)(v3 * dword_102301B5C / unk_102301B60) / 1000000000.0;
      if (!v16)
        v16 = "<unnamed>";
      v21 = 2080;
      v22 = v16;
      v23 = 2048;
      v24 = a1;
      LODWORD(v18) = 32;
      v3 = (uint64_t)buf;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)", COERCE_DOUBLE(&v19), v18);
      sub_100512490("Generic", 1, 0, 2, "virtual void BasicMutex::lock()", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v10 = sub_1001BFFCC();
    v11 = *(FILE **)(v10 + 192);
    if (v11)
      sub_100ACE7B0(v10, 0, v11);
  }
  *(_DWORD *)(v13 + 72) = v14 + 1;
  *(_QWORD *)(v13 + 80) = result;
  return result;
}

uint64_t sub_1001C9C90(uint64_t a1, double a2)
{
  double v3;

  v3 = a2;
  return sub_1001C9CBC(a1, &v3, (double *)&qword_1022FDCC8);
}

uint64_t sub_1001C9CBC(uint64_t a1, double *a2, double *a3)
{
  uint64_t v6;
  double v7;
  double v8;
  NSObject *v9;
  const char *v10;
  double v11;
  uint64_t v12;
  double v14;
  NSObject *v15;
  const char *v16;
  double v17;
  double v18;
  uint64_t v19;
  const char *v20;
  double v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  const char *v25;
  double v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  std::string v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  const char *v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  _BYTE v39[24];
  __int128 __p;
  uint64_t v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  v6 = *(_QWORD *)(a1 + 40);
  v31 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v32 = 256;
  v7 = *a2;
  v8 = *(double *)(a1 + 192);
  if (*a2 < v8 || v7 < *(double *)(a1 + 232))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v10 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      v11 = *a2;
      *(_DWORD *)buf = 136446466;
      v43 = v10;
      v44 = 2050;
      v45 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "@TileList, %{public}s, touch, ignoring, %{public}.2lf, #CloneMe", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v19 = qword_1022A0048;
      v20 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      v21 = *a2;
      *(_DWORD *)v39 = 136446466;
      *(_QWORD *)&v39[4] = v20;
      *(_WORD *)&v39[12] = 2050;
      *(double *)&v39[14] = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 16, "@TileList, %{public}s, touch, ignoring, %{public}.2lf, #CloneMe", v39, 22);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    goto LABEL_8;
  }
  if (vabdd_f64(v7, v8) < *a3)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  sub_100BCCB44((int *)(a1 + 48), a1 + 8, &v30);
  v14 = *a2;
  *(double *)(a1 + 192) = *a2;
  *(double *)(a1 + 232) = v14;
  sub_100FA7B0C(a1);
  *(_OWORD *)v39 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)&v39[16] = *(_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v41 = *(_QWORD *)(a1 + 88);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v16 = sub_1001CC818(*(unsigned int *)v39);
    v17 = sub_1001C087C((uint64_t)v39);
    v18 = sub_1001C0858((uint64_t)v39);
    *(_DWORD *)buf = 136446723;
    v43 = v16;
    v44 = 2049;
    v45 = v17;
    v46 = 2049;
    v47 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@TileList, %{public}s, touch, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v24 = qword_1022A0048;
    v25 = sub_1001CC818(*(unsigned int *)v39);
    v26 = sub_1001C087C((uint64_t)v39);
    v27 = sub_1001C0858((uint64_t)v39);
    v33 = 136446723;
    v34 = v25;
    v35 = 2049;
    v36 = v26;
    v37 = 2049;
    v38 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 1, "@TileList, %{public}s, touch, llsw, %{private}.2lf, %{private}.2lf", &v33, 32);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v12 = 1;
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v12;
}

void sub_1001CA15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  sub_10187E514((uint64_t)&a17);
  _Unwind_Resume(a1);
}

#error "1001CA248: call analysis failed (funcsize=70)"

uint64_t **sub_1001CA334(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1001CA3F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t **v4;
  _QWORD *v5;
  int *v7;
  _QWORD v8[2];
  uint64_t *v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 108))
    return 0xFFFFFFFFLL;
  v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  v9 = a2;
  v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  v10 = (_DWORD *)(a1 + 104);
  v4 = sub_1000823D0((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101B9EB60, &v10);
  if (v4 + 5 != (uint64_t **)&v7)
    sub_1001CA4BC(v4 + 5, v7, (int *)v8);
  v5 = (_QWORD *)v8[0];
  v4[8] = v9;
  v2 = *v3;
  sub_100008848((uint64_t)&v7, v5);
  return v2;
}

void sub_1001CA4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_100008848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_1001CA4BC(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  int *v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_1004A5BC4(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100720B68(v5, a2 + 7);
      v12 = (int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1001CA608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CA61C(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v12;
  NSObject *v13;
  unsigned int v14;
  const char *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  int v30;
  int v31;
  int v32;
  NSObject *v33;
  int v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  const char *v39;
  void **v40;
  int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  void *v48[2];
  char v49;
  __int128 v50;
  uint64_t v51;
  std::string v52;
  unsigned int v53;
  _BYTE __p[28];
  __int16 v55;
  _BYTE v56[10];
  void **v57;
  __int16 v58;
  int v59;
  uint8_t buf[4];
  _BYTE v61[24];
  __int16 v62;
  _BYTE v63[10];
  _BYTE *v64;
  __int16 v65;
  int v66;

  v53 = a2;
  if (a2 - 3 >= 3)
  {
    sub_101942718();
    __break(1u);
LABEL_50:
    dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    goto LABEL_17;
  }
  v6 = a1;
  if (*(_BYTE *)(a1 + 129))
  {
    sub_1000C1928((uint64_t)&v50, &v53);
    std::string::assign(&v52, "");
    v12 = sub_1001CDE58(v50, (_QWORD *)(v6 + 416));
    if (*(_BYTE *)(v6 + 160))
    {
      sub_1001CB024((uint64_t)&v50, a3, a4, a5, *(double *)(v12 + 152), *(double *)(v12 + 160));
      if (sub_1001C8DA8((unsigned int *)&v50))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v13 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v14 = v53;
          v15 = sub_1001CC818(v53);
          sub_100BCC240((unsigned int *)&v50, __p);
          v16 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          v17 = *(_DWORD *)(v6 + 352);
          *(_DWORD *)buf = 67241475;
          *(_DWORD *)v61 = v14;
          *(_WORD *)&v61[4] = 2082;
          *(_QWORD *)&v61[6] = v15;
          *(_WORD *)&v61[14] = 2049;
          *(double *)&v61[16] = a4;
          v62 = 2049;
          *(double *)v63 = a5;
          *(_WORD *)&v63[8] = 2081;
          v64 = v16;
          v65 = 1026;
          v66 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, reachbility, %{public}d", buf, 0x36u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          v37 = qword_1022A0048;
          v38 = v53;
          v39 = sub_1001CC818(v53);
          sub_100BCC240((unsigned int *)&v50, v48);
          if (v49 >= 0)
            v40 = v48;
          else
            v40 = (void **)v48[0];
          v41 = *(_DWORD *)(v6 + 352);
          *(_DWORD *)__p = 67241475;
          *(_DWORD *)&__p[4] = v38;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = v39;
          *(_WORD *)&__p[18] = 2049;
          *(double *)&__p[20] = a4;
          v55 = 2049;
          *(double *)v56 = a5;
          *(_WORD *)&v56[8] = 2081;
          v57 = v40;
          v58 = 1026;
          v59 = v41;
          v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, reachbility, %{public}d", __p, 54);
          if (v49 < 0)
            operator delete(v48[0]);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v42);
          if (v42 != (char *)buf)
            free(v42);
        }
        v18 = *(_QWORD *)(v6 + 376);
        v45 = v50;
        v46 = v51;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          sub_100115CE4(&v47, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
        else
          v47 = v52;
        v30 = sub_1001CB2A4(v18, (uint64_t)&v45, a6);
        v31 = v30;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v47.__r_.__value_.__l.__data_);
          if (!v31)
          {
LABEL_45:
            v21 = 1;
LABEL_46:
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v52.__r_.__value_.__l.__data_);
            return v21;
          }
        }
        else if (!v30)
        {
          goto LABEL_45;
        }
        v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 368) + 40))(*(_QWORD *)(v6 + 368));
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
        v33 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v61 = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, set, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
          *(_DWORD *)__p = 67240192;
          *(_DWORD *)&__p[4] = v32;
          LODWORD(v44) = 8;
          v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileSched, cell, set, %{public}d", __p, v44, v45, v46);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v43);
          if (v43 != (char *)buf)
            free(v43);
        }
        goto LABEL_45;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v29 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134284545;
        *(double *)v61 = a4;
        *(_WORD *)&v61[8] = 2049;
        *(double *)&v61[10] = a5;
        *(_WORD *)&v61[18] = 1024;
        *(_DWORD *)&v61[20] = v50;
        v62 = 1024;
        *(_DWORD *)v63 = DWORD1(v50);
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = DWORD2(v50);
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_34:
        v21 = 0;
        goto LABEL_46;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      *(_DWORD *)__p = 134284545;
      *(double *)&__p[4] = a4;
      *(_WORD *)&__p[12] = 2049;
      *(double *)&__p[14] = a5;
      *(_WORD *)&__p[22] = 1024;
      *(_DWORD *)&__p[24] = v50;
      v55 = 1024;
      *(_DWORD *)v56 = DWORD1(v50);
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = DWORD2(v50);
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", __p, 40);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v28);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        v23 = v53;
        v24 = sub_1001CC818(v53);
        *(_DWORD *)buf = 67240451;
        *(_DWORD *)v61 = v23;
        *(_WORD *)&v61[4] = 2081;
        *(_QWORD *)&v61[6] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@TileDl, requestDownload, type, %{public}d, %{private}s, not active", buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v25 = qword_1022A0048;
      v26 = v53;
      v27 = sub_1001CC818(v53);
      *(_DWORD *)__p = 67240451;
      *(_DWORD *)&__p[4] = v26;
      *(_WORD *)&__p[8] = 2081;
      *(_QWORD *)&__p[10] = v27;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "@TileDl, requestDownload, type, %{public}d, %{private}s, not active", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v28);
    }
    if (v28 != (char *)buf)
      free(v28);
    goto LABEL_34;
  }
  v7 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    goto LABEL_50;
LABEL_17:
  v19 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(unsigned __int8 *)(v6 + 128);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v61 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TileDl, ignore before first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v7[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v35 = *(unsigned __int8 *)(v6 + 128);
    *(_DWORD *)__p = 67240192;
    *(_DWORD *)&__p[4] = v35;
    v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TileDl, ignore before first unlock, fDataProtectionEnabled, %{public}d", __p, 8);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  return 0;
}

void sub_1001CAFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001CB024(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  int v10;
  int v11;
  BOOL v12;
  NSObject *v13;
  int v14;
  int v15;
  char *v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;

  v10 = (int)(a5 * 10000.0);
  v11 = (int)(a6 * 10000.0);
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      v22 = v10;
      v23 = 1026;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "TileFile, Delta lat/lon zero, %{public}d, %{public}d, #CloneMe", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v18[0] = 67240448;
      v18[1] = v10;
      v19 = 1026;
      v20 = v11;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileFile, Delta lat/lon zero, %{public}d, %{public}d, #CloneMe", v18, 14);
      sub_100512490("Generic", 1, 0, 0, "void CLTileFileUtility::initTileIdWithLatitudeAndLongitude(TileId &, double, double, double, double, sec_key_t)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v11 = 10000;
    v10 = 10000;
  }
  v14 = (int)((a3 + 90.0) * 10000.0) / v10 * v10;
  v15 = (int)((a4 + 180.0) * 10000.0) / v11 * v11;
  *(_DWORD *)(a1 + 4) = v15;
  *(_DWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = a2;
  return sub_1001CB298(a1, v14, v15, a2);
}

uint64_t sub_1001CB298(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a4;
  return result;
}

uint64_t sub_1001CB2A4(uint64_t a1, uint64_t a2, double a3)
{
  char v6;
  char v7;
  NSObject *v8;
  const char *v9;
  _QWORD *v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  NSObject *v22;
  char v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  int v28;
  char *v29;
  char v30;
  NSObject *v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  NSObject *v36;
  char *v37;
  NSObject *v38;
  _BYTE *v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  const char *v52;
  double v53;
  double v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  const std::string *v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  double v64;
  float32_t v65;
  _BOOL4 v66;
  int v67;
  _QWORD *v68;
  _BOOL4 v69;
  _BOOL4 v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  NSObject *v74;
  const char *v75;
  double v76;
  double v77;
  uint64_t v78;
  NSObject *v79;
  double v80;
  double v81;
  int v82;
  uint64_t v83;
  double v84;
  double v85;
  int v86;
  char *v87;
  uint64_t v88;
  const char *v89;
  double v90;
  double v91;
  uint64_t v92;
  char *v93;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[22];
  __int16 v108;
  _BYTE v109[10];
  uint64_t v110;
  int v111;
  _BYTE v112[48];
  _BYTE buf[14];
  double v114;
  _BYTE v115[12];
  uint64_t v116;
  int v117;

  v6 = sub_1001CC83C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (!*(_BYTE *)(a1 + 111))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, request, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      *(_WORD *)v112 = 0;
      v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileDl, preindexskip, request, #CloneMe", v112, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v50);
      if (v50 != buf)
        free(v50);
    }
    v23 = 0;
    return v23 & 1;
  }
  v7 = v6;
  v104 = sub_1001CDE58(*(_DWORD *)a2, *(_QWORD **)(a1 + 120));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v9 = sub_1001CC818(*(_DWORD *)a2);
    *(_DWORD *)buf = 136446723;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2049;
    v114 = sub_1001C087C(a2);
    *(_WORD *)v115 = 2049;
    *(_QWORD *)&v115[2] = sub_1001C0858(a2);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v47 = qword_1022A0048;
    v48 = sub_1001CC818(*(_DWORD *)a2);
    *(_DWORD *)v112 = 136446723;
    *(_QWORD *)&v112[4] = v48;
    *(_WORD *)&v112[12] = 2049;
    *(_QWORD *)&v112[14] = sub_1001C087C(a2);
    *(_WORD *)&v112[22] = 2049;
    *(_QWORD *)&v112[24] = sub_1001C0858(a2);
    v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 1, "@TileDl, %{public}s, request, llsw, %{private}.2lf, %{private}.2lf", v112, 32);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v49);
    if (v49 != buf)
      free(v49);
  }
  v10 = sub_1001C8840(a1, a2);
  v101 = v104 + 184;
  v11 = sub_1001C0618(v104 + 184, (unsigned int *)a2);
  v102 = (_QWORD *)(a1 + 8);
  if (v11 && (v12 = sub_1001C85FC(v101, (unsigned int *)a2), sub_1001C9408(v12, *(_BYTE *)(a1 + 110))))
  {
    v13 = v102 == v10;
    v14 = sub_1001C85FC(v101, (unsigned int *)a2);
    v15 = v13 && sub_1001CC848(a1, v14, a3);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v31 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(buf, v14);
      v32 = v115[1] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v112 = 67240451;
      *(_DWORD *)&v112[4] = v15;
      *(_WORD *)&v112[8] = 2081;
      *(_QWORD *)&v112[10] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "@TileQueue, usable, %{public}d, tileid, %{private}s", v112, 0x12u);
      if ((v115[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v33 = qword_1022A0048;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v112, v14);
      if (v112[23] >= 0)
        v34 = v112;
      else
        v34 = *(_BYTE **)v112;
      *(_DWORD *)v107 = 67240451;
      *(_DWORD *)&v107[4] = v15;
      *(_WORD *)&v107[8] = 2081;
      *(_QWORD *)&v107[10] = v34;
      LODWORD(v96) = 18;
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "@TileQueue, usable, %{public}d, tileid, %{private}s", v107, v96);
      if ((v112[23] & 0x80000000) != 0)
        operator delete(*(void **)v112);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v35);
      if (v35 != buf)
LABEL_123:
        free(v35);
LABEL_124:
      if (!v15)
        goto LABEL_125;
LABEL_92:
      sub_101191978(*(_DWORD *)(v104 + 4), v107);
      v106 = *(_QWORD *)v107;
      *(_QWORD *)v107 = 0;
      sub_101077CCC(a1, &v106, a2, a3);
      v40 = v106;
      v106 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v41 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v42 = sub_1001CC818(*(_DWORD *)a2);
        v43 = sub_1001C087C(a2);
        v44 = sub_1001C0858(a2);
        v45 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 136446979;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 2049;
        v114 = v43;
        *(_WORD *)v115 = 2049;
        *(double *)&v115[2] = v44;
        *(_WORD *)&v115[10] = 2050;
        v116 = v45;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v51 = qword_1022A0048;
        v52 = sub_1001CC818(*(_DWORD *)a2);
        v53 = sub_1001C087C(a2);
        v54 = sub_1001C0858(a2);
        v55 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)v112 = 136446979;
        *(_QWORD *)&v112[4] = v52;
        *(_WORD *)&v112[12] = 2049;
        *(double *)&v112[14] = v53;
        *(_WORD *)&v112[22] = 2049;
        *(double *)&v112[24] = v54;
        *(_WORD *)&v112[32] = 2050;
        *(_QWORD *)&v112[34] = v55;
        LODWORD(v96) = 42;
        v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 0, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, center, size, %{public}ld", v112, v96);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v56);
        if (v56 != buf)
          free(v56);
      }
      v46 = *(_QWORD *)v107;
      *(_QWORD *)v107 = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      v30 = 1;
      goto LABEL_126;
    }
  }
  else
  {
    if (v102 != v10)
    {
      v16 = v10[10];
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v16 + 16))(buf, v16);
        v18 = v115[1] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v112 = 136380675;
        *(_QWORD *)&v112[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "@TileQueue, onlist, tileid, %{private}s", v112, 0xCu);
        if ((v115[1] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v19 = qword_1022A0048;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v16 + 16))(v112, v16);
        if (v112[23] >= 0)
          v20 = v112;
        else
          v20 = *(_BYTE **)v112;
        *(_DWORD *)v107 = 136380675;
        *(_QWORD *)&v107[4] = v20;
        LODWORD(v96) = 12;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "@TileQueue, onlist, tileid, %{private}s", v107, v96);
        if ((v112[23] & 0x80000000) != 0)
          operator delete(*(void **)v112);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v21);
        if (v21 != buf)
          free(v21);
      }
      goto LABEL_125;
    }
    v24 = !v11;
    if (!*(_BYTE *)(a1 + 110))
      v24 = 1;
    if ((v24 & 1) != 0)
    {
      if (v11)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v27 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)buf = 67240961;
          *(_DWORD *)&buf[4] = 1;
          *(_WORD *)&buf[8] = 1025;
          *(_DWORD *)&buf[10] = 0;
          v114 = 2.18053518e-289;
          *(_DWORD *)v115 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d", buf, 0x1Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219D908);
          v28 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)v112 = 67240961;
          *(_DWORD *)&v112[4] = 1;
          *(_WORD *)&v112[8] = 1025;
          *(_DWORD *)&v112[10] = 0;
          *(_WORD *)&v112[14] = 1026;
          *(_DWORD *)&v112[16] = 0;
          *(_WORD *)&v112[20] = 1025;
          *(_DWORD *)&v112[22] = v28;
          LODWORD(v96) = 26;
          v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileQueue, skip, alreadyDownloaded, %{public}d, accessible, %{private}d, inqueue, %{public}d, locked, %{private}d", v112, v96);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v29);
          if (v29 != buf)
            free(v29);
          v30 = 0;
          goto LABEL_126;
        }
        goto LABEL_125;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v36 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "@TileQueue, queue, 1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        *(_WORD *)v112 = 0;
        LODWORD(v96) = 2;
        v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@TileQueue, queue, 1", v112, v96);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v37);
        if (v37 != buf)
          free(v37);
      }
      goto LABEL_92;
    }
    v25 = sub_1001C85FC(v101, (unsigned int *)a2);
    v15 = (v7 & 1) != 0 || *(_BYTE *)(a1 + 69) != 0;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v25 + 16))(buf, v25);
      v39 = v115[1] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v112 = 67240451;
      *(_DWORD *)&v112[4] = v15;
      *(_WORD *)&v112[8] = 2081;
      *(_QWORD *)&v112[10] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "@TileQueue, unreadable, %{public}d, tileid, %{private}s", v112, 0x12u);
      if ((v115[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10219D908);
      v57 = qword_1022A0048;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v25 + 16))(v112, v25);
      if (v112[23] >= 0)
        v58 = v112;
      else
        v58 = *(_BYTE **)v112;
      *(_DWORD *)v107 = 67240451;
      *(_DWORD *)&v107[4] = v15;
      *(_WORD *)&v107[8] = 2081;
      *(_QWORD *)&v107[10] = v58;
      LODWORD(v96) = 18;
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 2, "@TileQueue, unreadable, %{public}d, tileid, %{private}s", v107, v96);
      if ((v112[23] & 0x80000000) != 0)
        operator delete(*(void **)v112);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v35);
      if (v35 != buf)
        goto LABEL_123;
      goto LABEL_124;
    }
  }
  if (v15)
    goto LABEL_92;
LABEL_125:
  v30 = 0;
LABEL_126:
  *(_OWORD *)v112 = *(_OWORD *)a2;
  *(_QWORD *)&v112[16] = *(_QWORD *)(a2 + 16);
  v59 = (const std::string *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100115CE4(&v112[24], *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v112[24] = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    *(_QWORD *)&v112[40] = *(_QWORD *)(a2 + 40);
  }
  v100 = v30;
  v60 = *(_DWORD *)(a1 + 72);
  if ((v60 & 0x80000000) == 0)
  {
    v103 = a2;
    v61 = -v60;
    v98 = (2 * v60) | 1;
    v99 = -v60;
    v97 = *(_DWORD *)(a1 + 72);
    do
    {
      v62 = v98;
      v63 = v99;
      do
      {
        if (!(v63 | v61))
          goto LABEL_154;
        *(_OWORD *)v112 = *(_OWORD *)v103;
        *(_QWORD *)&v112[16] = *(_QWORD *)(v103 + 16);
        std::string::operator=((std::string *)&v112[24], v59);
        v64 = *(double *)(v104 + 160);
        v65 = *(double *)(v104 + 152);
        *(float *)&v64 = v64;
        sub_1001C85C8((uint64_t)v112, v61, v63, v65, *(float32x2_t *)&v64);
        v66 = sub_1001C8DA8((unsigned int *)v112);
        v67 = !v66;
        if (v66)
        {
          v68 = sub_1001C8840(a1, (uint64_t)v112);
          v69 = sub_1001C0618(v101, (unsigned int *)v112);
          v70 = v69;
          if (*(_BYTE *)(a1 + 110))
            v71 = 1;
          else
            v71 = v69;
          v72 = v102 != v68;
          if (v102 != v68)
            v71 = 1;
          if (((v71 | v67) & 1) == 0)
          {
            sub_101191978(*(_DWORD *)(v104 + 4), &v105);
            sub_101077CCC(a1, &v105, (uint64_t)v112, a3);
            v73 = v105;
            v105 = 0;
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10219D908);
            v74 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v75 = sub_1001CC818(*(unsigned int *)v112);
              v76 = sub_1001C087C((uint64_t)v112);
              v77 = sub_1001C0858((uint64_t)v112);
              v78 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)buf = 136446979;
              *(_QWORD *)&buf[4] = v75;
              *(_WORD *)&buf[12] = 2049;
              v114 = v76;
              *(_WORD *)v115 = 2049;
              *(double *)&v115[2] = v77;
              *(_WORD *)&v115[10] = 2050;
              v116 = v78;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_10219D908);
              v88 = qword_1022A0048;
              v89 = sub_1001CC818(*(unsigned int *)v112);
              v90 = sub_1001C087C((uint64_t)v112);
              v91 = sub_1001C0858((uint64_t)v112);
              v92 = *(_QWORD *)(a1 + 16);
              *(_DWORD *)v107 = 136446979;
              *(_QWORD *)&v107[4] = v89;
              *(_WORD *)&v107[12] = 2049;
              *(double *)&v107[14] = v90;
              v108 = 2049;
              *(double *)v109 = v91;
              *(_WORD *)&v109[8] = 2050;
              v110 = v92;
              LODWORD(v96) = 42;
              v93 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v88, 0, "@TileReq, %{public}s, onlist, llsw, %{private}.2lf, %{private}.2lf, neighbor, size, %{public}ld", v107, v96);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v93);
              if (v93 != buf)
                free(v93);
            }
            v100 = 1;
            goto LABEL_154;
          }
        }
        else
        {
          v72 = 0;
          v70 = 0;
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10219D908);
        v79 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v80 = sub_1001C087C((uint64_t)v112);
          v81 = sub_1001C0858((uint64_t)v112);
          v82 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)buf = 134284801;
          *(double *)&buf[4] = v80;
          *(_WORD *)&buf[12] = 2049;
          v114 = v81;
          *(_WORD *)v115 = 1026;
          *(_DWORD *)&v115[2] = v82;
          *(_WORD *)&v115[6] = 1026;
          *(_DWORD *)&v115[8] = v70;
          LOWORD(v116) = 1026;
          *(_DWORD *)((char *)&v116 + 2) = v72;
          HIWORD(v116) = 1026;
          v117 = v67;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{public}d, outbounds, %{public}d", buf, 0x2Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10219D908);
          v83 = qword_1022A0048;
          v84 = sub_1001C087C((uint64_t)v112);
          v85 = sub_1001C0858((uint64_t)v112);
          v86 = *(unsigned __int8 *)(a1 + 110);
          *(_DWORD *)v107 = 134284801;
          *(double *)&v107[4] = v84;
          *(_WORD *)&v107[12] = 2049;
          *(double *)&v107[14] = v85;
          v108 = 1026;
          *(_DWORD *)v109 = v86;
          *(_WORD *)&v109[4] = 1026;
          *(_DWORD *)&v109[6] = v70;
          LOWORD(v110) = 1026;
          *(_DWORD *)((char *)&v110 + 2) = v72;
          HIWORD(v110) = 1026;
          v111 = v67;
          LODWORD(v96) = 46;
          v87 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 2, "@TileDl, skipneighbor, %{private}.2lf, %{private}.2lf, locked, %{public}d, dled, %{public}d, pending, %{public}d, outbounds, %{public}d", v107, v96);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::requestTiles(TileId, CFAbsoluteTime)", "%s\n", v87);
          if (v87 != buf)
            free(v87);
        }
LABEL_154:
        ++v63;
        --v62;
      }
      while (v62);
    }
    while (v61++ != v97);
  }
  if ((v112[47] & 0x80000000) != 0)
    operator delete(*(void **)&v112[24]);
  v23 = v100;
  return v23 & 1;
}

void sub_1001CC76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  _Unwind_Resume(exception_object);
}

const char *sub_1001CC818(unsigned int a1)
{
  if (a1 > 0xC)
    return "?";
  else
    return (&off_1021A48A0)[a1];
}

uint64_t sub_1001CC83C(int a1, unsigned int a2)
{
  if (a1 == 2)
    return 1;
  else
    return a2;
}

BOOL sub_1001CC848(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int *v6;
  uint64_t *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  double v11;
  const std::string::value_type *v12;
  _BOOL8 v13;
  NSObject *v14;
  const char *v15;
  double v16;
  double v17;
  std::string *v18;
  uint64_t v20;
  const char *v21;
  double v22;
  double v23;
  std::string *v24;
  char *v25;
  std::string v26;
  int v27;
  const char *v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  double v40;
  __int16 v41;
  std::string *v42;
  _BYTE buf[12];
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  double v55;
  __int16 v56;
  std::string *v57;

  memset(&v26, 0, sizeof(v26));
  v6 = (unsigned int *)(a2 + 48);
  *(_QWORD *)buf = a2 + 48;
  v7 = sub_1001CCC64((uint64_t **)(a1 + 24), a2 + 48, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
  v8 = sub_1001C94A8(a2);
  v9 = sub_1001CCD00(a2);
  v10 = sub_1001CC83C(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  v11 = vabdd_f64(a3, sub_1001CCCF8(a2));
  if (*((_BYTE *)v7 + 88))
  {
    v12 = "DlProgress";
LABEL_3:
    std::string::assign(&v26, v12);
    v13 = 0;
    goto LABEL_4;
  }
  if (((v9 | !v8) & 1) != 0)
  {
    if ((v9 ^ 1 | !v8) != 1)
    {
      v12 = "RefreshSkipped";
      goto LABEL_3;
    }
    if (((v9 ^ 1 | v8) & 1) != 0)
    {
      v12 = "Empty";
      goto LABEL_3;
    }
    v13 = sub_100FA0798(a2, v10, a3, 1.0);
    std::string::assign(&v26, "DoesntExist");
  }
  else
  {
    v13 = v11 >= *(double *)(a1 + 88);
    std::string::assign(&v26, "1st/Re-Try");
  }
LABEL_4:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10219D908);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v15 = sub_1001CC818(*v6);
    v16 = sub_1001C087C((uint64_t)v6);
    v17 = sub_1001C0858((uint64_t)v6);
    v18 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136448003;
    *(_QWORD *)&buf[4] = v15;
    v44 = 2049;
    v45 = v16;
    v46 = 2049;
    v47 = v17;
    v48 = 1026;
    v49 = v13;
    v50 = 1026;
    v51 = v9;
    v52 = 1026;
    v53 = v8;
    v54 = 2050;
    v55 = v11;
    v56 = 2082;
    v57 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s", buf, 0x46u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10219D908);
    v20 = qword_1022A0048;
    v21 = sub_1001CC818(*v6);
    v22 = sub_1001C087C((uint64_t)v6);
    v23 = sub_1001C0858((uint64_t)v6);
    v24 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v26.__r_.__value_.__r.__words[0];
    v27 = 136448003;
    v28 = v21;
    v29 = 2049;
    v30 = v22;
    v31 = 2049;
    v32 = v23;
    v33 = 1026;
    v34 = v13;
    v35 = 1026;
    v36 = v9;
    v37 = 1026;
    v38 = v8;
    v39 = 2050;
    v40 = v11;
    v41 = 2082;
    v42 = v24;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "@TileReq, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, isDownload, %{public}d, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, path, %{public}s", &v27, 70);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileDownloader::canRequestBasedOnAttempts(CLTileFile *, CFAbsoluteTime)", "%s\n", v25);
    if (v25 != buf)
      free(v25);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1001CCC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1001CCC64(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1000C17A4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_10107BD24((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

double sub_1001CCCF8(uint64_t a1)
{
  return *(double *)(a1 + 160);
}

uint64_t sub_1001CCD00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

BOOL sub_1001CCD08(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE v8[32];
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (!*(_DWORD *)(a1 + 196))
  {
    if (sub_100243630(a1)
      || (v2 = kTCCServiceMotion,
          CLConnection::getAuditToken(*(CLConnection **)(a1 + 264)),
          TCCAccessCheckAuditToken(v2, v8, 0)))
    {
      *(_DWORD *)(a1 + 196) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 196) = 2;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v4 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ did not pass entitlement/tcc checks.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v6 = *(_QWORD *)(a1 + 48);
        v9 = 138412290;
        v10 = v6;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Client %@ did not pass entitlement/tcc checks.", &v9, 12);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isAuthorizedForMotionActivity()", "%s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
    }
  }
  return *(_DWORD *)(a1 + 196) == 1;
}

void *sub_1001CCF14(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191EACC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"28CLMotionActivitySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_1001CD0CC()
{
  operator delete();
}

void *sub_1001CD0F8(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191C37C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLHeadingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_1001CD2B0()
{
  operator delete();
}

uint64_t sub_1001CD2DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t isEntitled;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  int v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t *v22;
  uint8_t buf[4];
  _BYTE v24[18];
  __int16 v25;
  uint64_t *v26;

  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    isEntitled = CLConnection::isEntitled(v3, a2);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v7 = "not entitled";
      v8 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)isEntitled)
        v7 = "entitled";
      if (*((char *)a2 + 23) >= 0)
        v9 = a2;
      else
        v9 = (uint64_t *)*a2;
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v24 = v8;
      *(_WORD *)&v24[8] = 2080;
      *(_QWORD *)&v24[10] = v7;
      v25 = 2080;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ is %s for %s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v10 = "not entitled";
      v11 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)isEntitled)
        v10 = "entitled";
      if (*((char *)a2 + 23) >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      v17 = 138412802;
      v18 = v11;
      v19 = 2080;
      v20 = v10;
      v21 = 2080;
      v22 = v12;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "%@ is %s for %s", &v17, 32);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::isEntitled(const std::string &)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"The underlying fConnection in CLDaemonClient is no longer available\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
    }
    v15 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The underlying fConnection in CLDaemonClient is no longer available", "{\"msg%{public}.0s\":\"The underlying fConnection in CLDaemonClient is no longer available\"}", buf, 0x12u);
    }
    return 0;
  }
  return isEntitled;
}

unint64_t sub_1001CD634()
{
  return ((unint64_t)sub_1001B7910() >> 22) & 1;
}

id sub_1001CD64C(void *a1)
{
  id result;

  result = sub_1001AF3C4(a1);
  if (result)
    return objc_msgSend(result, "path");
  return result;
}

void sub_1001CD7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int i;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  CLOSTransaction *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v14 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLTilesManager::traverseAllTilesSets");
  for (i = 0; i != 13; ++i)
  {
    if ((i & 0x7FFFFFF7) - 1 <= 1)
    {
      v7 = sub_1001CDA64(a1, i);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v9 = v7 + 8;
        if (*(char *)(v7 + 31) < 0)
          v9 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)buf = 136315394;
        v20 = a2;
        v21 = 2080;
        v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: performing, sAction, %s, tilesSet, %s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v10 = v7 + 8;
        if (*(char *)(v7 + 31) < 0)
          v10 = *(_QWORD *)(v7 + 8);
        v15 = 136315394;
        v16 = a2;
        v17 = 2080;
        v18 = v10;
        LODWORD(v13) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: performing, sAction, %s, tilesSet, %s", (const char *)&v15, v13);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v7);
    }
  }

}

uint64_t sub_1001CDA64(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  unsigned int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101937F08();
LABEL_5:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TileMgr, invalid tileType, %{public}d, #CloneMe", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      v9[0] = 67240192;
      v9[1] = v2;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, invalid tileType, %{public}d, #CloneMe", v9, 8);
      sub_100512490("Generic", 1, 0, 0, "CLTilesSet &CLTilesManager::getTilesSet(CLTilesManager_Type::TileType)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
    }
    v6 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
    }
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm", 2628, "getTilesSet");
  }
  v2 = a2;
  result = sub_1001CE20C((_QWORD *)(a1 + 504), a2);
  if (!result)
    goto LABEL_5;
  return result;
}

uint64_t sub_1001CDE58(unsigned int a1, _QWORD *a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  unsigned int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  result = sub_1001CE20C(a2, a1);
  if (!result)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A4908);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "TileMgr, invalid tileType, %{public}d, #CloneMe", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A4908);
      v9[0] = 67240192;
      v9[1] = a1;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "TileMgr, invalid tileType, %{public}d, #CloneMe", v9, 8);
      sub_100512490("Generic", 1, 0, 0, "static CLTilesSet &CLTilesManagerUtility::getTilesSet(CLTilesManager_Type::TileType, CLTilesSetCollection *)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A4928);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4928);
    }
    v6 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A4928);
    }
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "false";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManagerUtility.mm", 77, "getTilesSet");
  }
  return result;
}

uint64_t sub_1001CE20C(_QWORD *a1, unsigned int a2)
{
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;

  if (a2 >= 0xD)
    sub_101947C38();
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AA438);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      v6 = (uint64_t)(a1[1] - *a1) >> 3;
      *(_DWORD *)buf = 68290051;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1025;
      v16 = a2;
      v17 = 2049;
      v18 = v6;
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "index < fTileSets.size()";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Index out of bounds\", \"index\":%{private}d, \"size\":%{private}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AA438);
    }
    v7 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      v8 = (uint64_t)(a1[1] - *a1) >> 3;
      *(_DWORD *)buf = 68290051;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1025;
      v16 = a2;
      v17 = 2049;
      v18 = v8;
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "index < fTileSets.size()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Index out of bounds", "{\"msg%{public}.0s\":\"Index out of bounds\", \"index\":%{private}d, \"size\":%{private}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AA438);
    }
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v10 = (uint64_t)(a1[1] - *a1) >> 3;
      *(_DWORD *)buf = 68290051;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1025;
      v16 = a2;
      v17 = 2049;
      v18 = v10;
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "index < fTileSets.size()";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Index out of bounds\", \"index\":%{private}d, \"size\":%{private}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesSet.mm", 122, "getTilesSet");
  }
  return *(_QWORD *)(*a1 + 8 * a2);
}

void sub_1001CE508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  double v10;
  double v11;
  std::string __p;
  __int128 v13;
  int v14;
  CFAbsoluteTime Current;
  __int16 v16;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 1)
  {
    sub_100197040();
    v6 = sub_100241564();
    v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v6 = 1;
  }
  if (v5 == 2)
  {
    sub_100197040();
    v6 &= sub_100241564();
    v5 = *(_DWORD *)(a2 + 4);
  }
  if ((*(_DWORD *)(a2 + 148) & 0x80000000) == 0 && v5 != 9 && v6 != 0)
  {
    *(_WORD *)((char *)&v13 + 1) = 0;
    *((_QWORD *)&v13 + 1) = 0xBFF0000000000000;
    Current = CFAbsoluteTimeGetCurrent();
    v16 = 1;
    v14 = *(_DWORD *)(a2 + 148);
    LOBYTE(v13) = *(_BYTE *)(a2 + 177);
    v8 = *(_DWORD *)(a2 + 4);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(double *)(v9 + 4);
    v11 = *(double *)(v9 + 12);
    sub_1015A2E04(&__p, "");
    sub_1001BC1D8(v4, v8, -1, &__p, &v13, v10, v11, *(double *)(a1 + 48));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001CE614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001CE630()
{
  if ((sub_1001DC634() & 1) != 0
    || (sub_1001DC5AC() & 1) != 0
    || sub_1000FDBD0()
    || sub_1001DC794() && !sub_1000FDB3C())
  {
    return 1;
  }
  else
  {
    return sub_10075B95C();
  }
}

uint64_t sub_1001CE674(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v7;
  char *v8;
  int v9;
  uint64_t *v10;
  uint8_t buf[4];
  uint64_t *v12;

  if (objc_msgSend(*(id *)(a1 + 8), "fSpectatingLocation"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) >= 0)
        v5 = a2;
      else
        v5 = (uint64_t *)*a2;
      *(_DWORD *)buf = 136315138;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "stopping location spectating because %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (*((char *)a2 + 23) >= 0)
        v7 = a2;
      else
        v7 = (uint64_t *)*a2;
      v9 = 136315138;
      v10 = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "stopping location spectating because %s", (const char *)&v9);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::ensureNotSpectatingLocation(const std::string &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    objc_msgSend(*(id *)(a1 + 8), "setFSpectatingLocation:", 0);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

id sub_1001CE868(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 3);
}

uint64_t sub_1001CE878(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  int v13;
  uint64_t *v14;
  uint8_t buf[4];
  uint64_t *v16;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "fSpectatingLocation");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 8), "setFSpectatingLocation:", 1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v6 = a2;
      else
        v6 = (uint64_t *)*a2;
      *(_DWORD *)buf = 136315138;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, state, 1, spectate, starting to spectate location because %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (*((char *)a2 + 23) >= 0)
        v9 = a2;
      else
        v9 = (uint64_t *)*a2;
      v13 = 136315138;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxIndoor, state, 1, spectate, starting to spectate location because %s", (const char *)&v13);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::ensureSpectatingLocation(const std::string &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    if (sub_1000C4240())
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0)
          v8 = a2;
        else
          v8 = (uint64_t *)*a2;
        *(_DWORD *)buf = 136315138;
        v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, state, 1, spectate, starting to spectate location because %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*((char *)a2 + 23) >= 0)
          v11 = a2;
        else
          v11 = (uint64_t *)*a2;
        v13 = 136315138;
        v14 = v11;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi2, state, 1, spectate, starting to spectate location because %s", (const char *)&v13);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::ensureSpectatingLocation(const std::string &)", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  }
  return result;
}

id sub_1001CEBE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 3, 0);
}

id sub_1001CEC00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  uint64_t *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  uint64_t *v15;
  const char *v16;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint8_t *v21;
  _BYTE v22[24];
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t *v27;
  __int16 v28;
  const char *v29;

  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded") == (_DWORD)a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v7 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
      if (*((char *)a3 + 23) >= 0)
        v8 = a3;
      else
        v8 = (uint64_t *)*a3;
      *(_DWORD *)buf = 136446466;
      v25 = v7;
      v26 = 2082;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@IndoorSeed, same, %{public}s, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v9 = qword_1022A0048;
      v10 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
      if (*((char *)a3 + 23) >= 0)
        v11 = a3;
      else
        v11 = (uint64_t *)*a3;
      *(_DWORD *)v22 = 136446466;
      *(_QWORD *)&v22[4] = v10;
      *(_WORD *)&v22[12] = 2082;
      *(_QWORD *)&v22[14] = v11;
      v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "@IndoorSeed, same, %{public}s, %{public}s", v22, 22, *(_OWORD *)v22, *(_QWORD *)&v22[16], v23);
LABEL_30:
      v21 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::setSeedState(PipelinedSeeded, const std::string &)", "%s\n", v12);
      if (v21 != buf)
        free(v21);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v14 = sub_1001CEFB0(a2);
      if (*((char *)a3 + 23) >= 0)
        v15 = a3;
      else
        v15 = (uint64_t *)*a3;
      v16 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
      *(_DWORD *)buf = 136446722;
      v25 = v14;
      v26 = 2082;
      v27 = v15;
      v28 = 2082;
      v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@IndoorSeed, set, %{public}s, %{public}s, was, %{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v18 = qword_1022A0048;
      v19 = sub_1001CEFB0(a2);
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t *)*a3;
      v20 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
      *(_DWORD *)v22 = 136446722;
      *(_QWORD *)&v22[4] = v19;
      *(_WORD *)&v22[12] = 2082;
      *(_QWORD *)&v22[14] = a3;
      *(_WORD *)&v22[22] = 2082;
      v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "@IndoorSeed, set, %{public}s, %{public}s, was, %{public}s", v22, 32, *(_QWORD *)v22, *(_OWORD *)&v22[8], v20);
      goto LABEL_30;
    }
  }
  return objc_msgSend(*(id *)(a1 + 8), "setPipelinedSeeded:", a2);
}

const char *sub_1001CEFB0(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 3)
    return (&off_102129E20)[a1];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Corrupt PipelinedSeeded: got %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Corrupt PipelinedSeeded: got %{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "const char *to_string(PipelinedSeeded)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "Unknown pipelinedSeeded";
}

void sub_1001CF180(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        sub_1001CF67C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1001CF5A0(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B88E0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B88E0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

void sub_1001CF554(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_1001CF67C(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

_BYTE *sub_1001CF5A0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_1001CF67C(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_1001CF67C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_10149122C(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_1001CF6F4(a1);
  }
}

id sub_1001CF6F4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA5803 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101CA5803 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021B8BB8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1001CFAA0(_QWORD *a1, unsigned int *a2, void *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  id v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  int v24;
  NSObject *v25;
  _QWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  _QWORD *v44;
  BOOL v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v6 = sub_1001CFE7C(a2);
    v9 = a1 + 8;
    v8 = a1[8];
    if (v8)
    {
      v10 = a1 + 8;
      do
      {
        v11 = *(_DWORD *)(v8 + 32);
        v12 = v11 < v6;
        if (v11 >= v6)
          v13 = (uint64_t *)v8;
        else
          v13 = (uint64_t *)(v8 + 8);
        if (!v12)
          v10 = (_QWORD *)v8;
        v8 = *v13;
      }
      while (*v13);
      if (v10 != v9 && v6 >= *((_DWORD *)v10 + 8))
      {
        v51 = v10;
        v14 = sub_1001CFFD8(a3, v7);
        (*(void (**)(_QWORD *, unsigned int *, id, _QWORD *))(*a1 + 184))(a1, a2, v14, v10 + 10);
        v15 = (_QWORD *)v10[5];
        if (v15 != v10 + 6)
        {
          v16 = a1 + 11;
          v17 = a1 + 1;
          do
          {
            v18 = *v16;
            if (!*v16)
              goto LABEL_25;
            v19 = *((_DWORD *)v15 + 7);
            v20 = a1 + 11;
            do
            {
              v21 = *(_DWORD *)(v18 + 32);
              v22 = v21 < v19;
              if (v21 >= v19)
                v23 = (uint64_t *)v18;
              else
                v23 = (uint64_t *)(v18 + 8);
              if (!v22)
                v20 = (uint64_t *)v18;
              v18 = *v23;
            }
            while (*v23);
            if (v20 != v16 && (v24 = *((_DWORD *)v20 + 8), v19 >= v24))
            {
              v50 = v20;
              sub_1001CFEE8(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v28 = sub_1001CFE7C(a2);
              v29 = a1[8];
              if (!v29)
                return;
              v30 = a1 + 8;
              do
              {
                v31 = *(_DWORD *)(v29 + 32);
                v32 = v31 < v28;
                if (v31 >= v28)
                  v33 = (uint64_t *)v29;
                else
                  v33 = (uint64_t *)(v29 + 8);
                if (!v32)
                  v30 = (_QWORD *)v29;
                v29 = *v33;
              }
              while (*v33);
              if (v30 == v9 || v28 < *((_DWORD *)v30 + 8))
                return;
              v51 = v30;
              v35 = v30[6];
              v15 = v30 + 6;
              v34 = v35;
              if (v35)
              {
                v36 = v15;
                v37 = v34;
                do
                {
                  v38 = *(_DWORD *)(v37 + 28);
                  v39 = v38 < v24;
                  if (v38 >= v24)
                    v40 = (uint64_t *)v37;
                  else
                    v40 = (uint64_t *)(v37 + 8);
                  if (!v39)
                    v36 = (_QWORD *)v37;
                  v37 = *v40;
                }
                while (*v40);
                if (v36 == v15 || v24 < *((_DWORD *)v36 + 7))
                {
                  do
                  {
                    v41 = *(_DWORD *)(v34 + 28);
                    v42 = v24 < v41;
                    if (v24 >= v41)
                      v43 = (uint64_t *)(v34 + 8);
                    else
                      v43 = (uint64_t *)v34;
                    if (v42)
                      v15 = (_QWORD *)v34;
                    v34 = *v43;
                  }
                  while (*v43);
                }
                else
                {
                  v44 = (_QWORD *)v36[1];
                  if (v44)
                  {
                    do
                    {
                      v15 = v44;
                      v44 = (_QWORD *)*v44;
                    }
                    while (v44);
                  }
                  else
                  {
                    do
                    {
                      v15 = (_QWORD *)v36[2];
                      v45 = *v15 == (_QWORD)v36;
                      v36 = v15;
                    }
                    while (!v45);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021460C0);
              v25 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v26 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v26 = (_QWORD *)*v17;
                v27 = *((_DWORD *)v15 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v26;
                v58 = 1026;
                v59 = v27;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021460C0);
                v46 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v46 = (_QWORD *)*v17;
                v47 = *((_DWORD *)v15 + 7);
                v52 = 136446466;
                v53 = v46;
                v54 = 1026;
                v55 = v47;
                LODWORD(v49) = 18;
                v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v52,
                                v49);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v48);
                if (v48 != (char *)buf)
                  free(v48);
              }
            }
          }
          while (v15 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_1001CFE7C(unsigned int *a1)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result == -1)
    sub_1019005E0();
  return result;
}

id sub_1001CFE9C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1001CFFD8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

_BYTE *sub_1001CFEE8(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v15) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1001CFFD8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v16 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v16, (uint64_t)&unk_101B9EB60, &v16);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v15, v9, v10, v12 + 4);
    if ((_DWORD)result)
    {
      LODWORD(v16) = *(_DWORD *)(*(_QWORD *)a3 + 32);
      v13 = *(void **)(*(_QWORD *)a2 + 64);
      v14 = sub_1001CFE7C((unsigned int *)&v16);
      return objc_msgSend(v13, "onNotification:withData:", v14, a4, v15);
    }
  }
  return result;
}

id sub_1001CFFD8(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1001D0024(a1);
  else
    return 0;
}

id sub_1001D0024(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146370);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7112 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146370);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146370);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB7112 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102146370);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTelephonyService_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1001D03D0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1001D08CC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_1001D07A4(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A2C20);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A2C20);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1001D07A4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1001D08CC(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1001D0880(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1001D08CC(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_1001D08CC(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100117CB4(a1);
  else
    return 0;
}

void sub_1001D0918(uint64_t a1, int *a2, unsigned int *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLApplicationLifecycleManager::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217CD58);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLApplicationLifecycleManager::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217CD58);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLApplicationLifecycleManager::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D0AF0((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D0AF0(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4)
{
  NSObject *v7;
  int v8;
  const char *v9;
  unsigned int v10;
  unsigned int *v11;
  RBSProcessIdentifier *v12;
  id v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint8_t *v26;
  _BOOL4 v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  const char *v38;
  unsigned int v39;
  unsigned int *v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  int v44;
  const char *v45;
  _BYTE v46[24];
  __int16 v47;
  unsigned int *v48;
  uint8_t buf[24];
  __int16 v50;
  unsigned int *v51;

  objc_msgSend(*(id *)a1, "silo");
  if ((*a3 - 2) > 4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CD78);
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *a3;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = sub_1000BD874(a3);
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning unhandled app monitor notification, %d, %s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CD78);
      v32 = qword_1022A02D8;
      v33 = *a3;
      *(_DWORD *)v46 = 67109378;
      *(_DWORD *)&v46[4] = v33;
      *(_WORD *)&v46[8] = 2080;
      *(_QWORD *)&v46[10] = sub_1000BD874(a3);
      LODWORD(v43) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 0, "#Warning unhandled app monitor notification, %d, %s", v46, v43);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CD78);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a3;
      v9 = sub_1000BD874(a3);
      v10 = *a4;
      if (*((char *)a4 + 31) >= 0)
        v11 = a4 + 2;
      else
        v11 = (unsigned int *)*((_QWORD *)a4 + 1);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v9;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v10;
      v50 = 2080;
      v51 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "notification, %d, %s, pid, %d, bundleId, %s", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CD78);
      v36 = qword_1022A02D8;
      v37 = *a3;
      v38 = sub_1000BD874(a3);
      v39 = *a4;
      if (*((char *)a4 + 31) >= 0)
        v40 = a4 + 2;
      else
        v40 = (unsigned int *)*((_QWORD *)a4 + 1);
      *(_DWORD *)v46 = 67109890;
      *(_DWORD *)&v46[4] = v37;
      *(_WORD *)&v46[8] = 2080;
      *(_QWORD *)&v46[10] = v38;
      *(_WORD *)&v46[18] = 1024;
      *(_DWORD *)&v46[20] = v39;
      v47 = 2080;
      v48 = v40;
      LODWORD(v43) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "notification, %d, %s, pid, %d, bundleId, %s", v46, v43, v44, v45);
      v42 = (uint8_t *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    v45 = 0;
    v12 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", *a4);
    v13 = +[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", v12, &v45);
    if (v12 && v13)
    {
      v14 = (const __CFString *)objc_msgSend(objc_msgSend(v13, "bundle"), "identifier");
      memset(buf, 0, sizeof(buf));
      if (v14)
      {
        sub_1001A486C(v14, (uint64_t)v46);
        *(_OWORD *)buf = *(_OWORD *)v46;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v46[16];
        v15 = v46[23];
        if (v46[23] < 0)
          v15 = *(_QWORD *)&v46[8];
        if (v15)
        {
          v16 = *(_QWORD *)(a1 + 32);
          if (v16 != a1 + 24)
          {
            v17 = 0;
            do
            {
              v18 = *(double *)(v16 + 40);
              if (v18 + 5.0 >= CFAbsoluteTimeGetCurrent())
              {
                v21 = buf[23];
                if ((buf[23] & 0x80u) == 0)
                  v22 = buf[23];
                else
                  v22 = *(_QWORD *)&buf[8];
                v23 = *(unsigned __int8 *)(v16 + 39);
                v24 = (char)v23;
                if ((v23 & 0x80u) != 0)
                  v23 = *(_QWORD *)(v16 + 24);
                if (v22 != v23)
                  goto LABEL_37;
                if (v24 >= 0)
                  v25 = (unsigned __int8 *)(v16 + 16);
                else
                  v25 = *(unsigned __int8 **)(v16 + 16);
                if ((buf[23] & 0x80) != 0)
                {
                  v27 = memcmp(*(const void **)buf, v25, *(size_t *)&buf[8]) == 0;
                }
                else
                {
                  if (buf[23])
                  {
                    v26 = buf;
                    while (*v26 == *v25)
                    {
                      ++v26;
                      ++v25;
                      if (!--v21)
                        goto LABEL_36;
                    }
LABEL_37:
                    v19 = *(_QWORD *)(v16 + 8);
                    goto LABEL_38;
                  }
LABEL_36:
                  v27 = 1;
                }
                if (v17 & 1 | !v27)
                {
                  v19 = *(_QWORD *)(v16 + 8);
                  if (!v27)
                    goto LABEL_38;
                  goto LABEL_21;
                }
                v17 = 1;
                sub_100C9EE70((id *)a1, a4, (const void **)buf, 1);
              }
              v19 = *(_QWORD *)(v16 + 8);
LABEL_21:
              v20 = *(_QWORD **)v16;
              v20[1] = v19;
              **(_QWORD **)(v16 + 8) = v20;
              --*(_QWORD *)(a1 + 40);
              sub_100C9F734(a1 + 24, (void **)v16);
LABEL_38:
              v16 = v19;
            }
            while (v19 != a1 + 24);
          }
        }
      }
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217CD38);
      v30 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *a4;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ALM: unable to get process handle\", \"pid\":%{public}d}", buf, 0x18u);
      }
    }
  }
}

void sub_1001D1128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001D1154(unsigned int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLClientManager::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021545E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D1B9C(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D131C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D133C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;

  v5 = *a2;
  sub_1001D13D4((uint64_t)&v6, a3);
  objc_msgSend(a4, "onAppMonitorNotification:data:", v5, &v6);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
}

void sub_1001D13C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10079C284((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D13D4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  v7 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100115CE4(v7, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

void sub_1001D14D4(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1001D1850(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBTLEFenceManagerConcrete::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152DA0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152DA0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D1A28(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D1A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D1A28(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  void *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void **v17;

  if ((*a3 - 1) >= 3)
  {
    if (*a3 != 4)
      return;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)a4;
    std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a4 + 8));
    std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a4 + 32));
    std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a4 + 56));
    std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a4 + 80));
    v14 = *(_QWORD *)(a4 + 104);
    goto LABEL_28;
  }
  v6 = *(unsigned __int8 *)(a4 + 31);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a4 + 31);
  else
    v7 = *(_QWORD *)(a4 + 16);
  v8 = *(unsigned __int8 *)(a1 + 215);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 200);
  if (v7 != v8)
    return;
  v10 = (const void **)(a4 + 8);
  v12 = (_QWORD *)(a1 + 192);
  v11 = *(void **)(a1 + 192);
  if (v9 >= 0)
    v13 = (unsigned __int8 *)(a1 + 192);
  else
    v13 = *(unsigned __int8 **)(a1 + 192);
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v13, *(_QWORD *)(a4 + 16)))
      return;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a4 + 31))
  {
LABEL_19:
    *(_DWORD *)(a1 + 184) = -1;
    if (v9 < 0)
      operator delete(v11);
    v15 = (void **)(a1 + 216);
    *v12 = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    if (*(char *)(a1 + 239) < 0)
      operator delete(*v15);
    v16 = (void **)(a1 + 240);
    *v15 = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    if (*(char *)(a1 + 263) < 0)
      operator delete(*v16);
    v17 = (void **)(a1 + 264);
    *v16 = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    if (*(char *)(a1 + 287) < 0)
      operator delete(*v17);
    *v17 = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    v14 = 0xFFFFFFFF00000000;
LABEL_28:
    *(_QWORD *)(a1 + 288) = v14;
    return;
  }
  while (*(unsigned __int8 *)v10 == *v13)
  {
    v10 = (const void **)((char *)v10 + 1);
    ++v13;
    if (!--v6)
      goto LABEL_19;
  }
}

void sub_1001D1B9C(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  CLClientKeyPath *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  CLConnection *v25;
  id v26;
  NSObject *v27;
  char *v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  CLConnection **v34;
  char *v35;
  char *v36;
  CLConnection *v37;
  _QWORD *v38;
  _QWORD *v39;
  const char *v40;
  uint8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  CLConnection *v44;
  NSObject *v45;
  uint8_t *v46;
  char *v47;
  void *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  CLConnection **v53;
  char *v54;
  char *v55;
  CLConnection *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  NSObject *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  CLConnection *v71;
  id v72;
  NSObject *v73;
  char *v74;
  void *v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  CLConnection **v80;
  char *v81;
  char *v82;
  CLConnection *v83;
  _QWORD *v84;
  _QWORD *v85;
  const char *v86;
  uint8_t *v87;
  CLConnection **v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  id v92;
  NSObject *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  NSObject *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t *v117;
  BOOL v118;
  _QWORD *v119;
  uint64_t v120;
  id v121;
  NSObject *v122;
  _QWORD *v123;
  _QWORD *v124;
  NSObject *v125;
  const char *v126;
  uint8_t *v127;
  uint64_t v128;
  CLClientKeyPath *v130;
  unsigned int *v131;
  void *v133[2];
  void *v134[4];
  void *v135[2];
  void *v136[8];
  void *v137[2];
  _OWORD v138[2];
  uint64_t v139;
  void *__p[2];
  char v141;
  _BYTE v142[12];
  char v143;
  int v144;
  _BYTE *v145;
  uint8_t buf[48];
  void *v147[2];
  void *v148[5];
  __int128 v149;
  _OWORD v150[95];

  v7 = a4 + 8;
  if (*(char *)(a4 + 31) >= 0)
    v8 = a4 + 8;
  else
    v8 = *(_QWORD *)(a4 + 8);
  v130 = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), 105);
  v9 = (CLClientKeyPath *)objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:");
  v131 = (unsigned int *)a3;
  if ((*a3 & 0xFFFFFFFE) == 0xA)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = sub_1000BD874(a3);
      v14 = *(char **)(a4 + 80);
      v13 = (char *)(a4 + 80);
      v12 = v14;
      if (*(v13 - 49) >= 0)
        v15 = v7;
      else
        v15 = *((_QWORD *)v13 - 9);
      if (*(v13 - 1) >= 0)
        v16 = v13 - 24;
      else
        v16 = (char *)*((_QWORD *)v13 - 3);
      if (v13[23] >= 0)
        v12 = v13;
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v11;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v15;
      *(_WORD *)&buf[38] = 2082;
      *(_QWORD *)&buf[40] = v16;
      LOWORD(v147[0]) = 2082;
      *(void **)((char *)v147 + 2) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"AppMonitor - application (un)installation notification\", \"notification\":%{public, location:escape_only}s, \"BundleId\":%{public, location:escape_only}s, \"BundlePath\":%{public, location:escape_only}s, \"ExecutablePath\":%{public, location:escape_only}s}", buf, 0x3Au);
    }
    if (*a3 == 10)
    {
      if (-[CLClientKeyPath isValidCKP](v9, "isValidCKP"))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v9;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reregistering client key path due to app update\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        objc_msgSend(*(id *)(a1 + 136), "registerClient:fromAuthSync:", v9, 0);
      }
    }
    else
    {
      sub_1015A2E04(__p, "ClientRemoved");
      sub_1007C0424(a1, v9, 1, (uint64_t *)__p);
      if (v141 < 0)
        operator delete(__p[0]);
      memset(v148, 0, 35);
      *(_OWORD *)v147 = 0u;
      memset(buf, 0, sizeof(buf));
      v149 = 0u;
      memset(v150, 0, 59);
      if (v130)
      {
        -[CLClientKeyPath clientName](v130, "clientName");
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
      else
      {
        v139 = 0;
        memset(v138, 0, sizeof(v138));
        *(_OWORD *)v137 = 0uLL;
        *(_OWORD *)v135 = 0uLL;
        memset(v136, 0, sizeof(v136));
        memset(v134, 0, sizeof(v134));
        *(_OWORD *)v133 = 0uLL;
      }
      *(_OWORD *)buf = *(_OWORD *)v133;
      *(void **)&buf[16] = v134[0];
      HIBYTE(v134[0]) = 0;
      LOBYTE(v133[0]) = 0;
      if ((char)buf[47] < 0)
        operator delete(*(void **)&buf[24]);
      *(_OWORD *)&buf[24] = *(_OWORD *)&v134[1];
      *(void **)&buf[40] = v134[3];
      HIBYTE(v134[3]) = 0;
      LOBYTE(v134[1]) = 0;
      if (SHIBYTE(v148[0]) < 0)
        operator delete(v147[0]);
      *(_OWORD *)v147 = *(_OWORD *)v135;
      v148[0] = v136[0];
      HIBYTE(v136[0]) = 0;
      LOBYTE(v135[0]) = 0;
      if (SHIBYTE(v148[3]) < 0)
        operator delete(v148[1]);
      *(_OWORD *)&v148[1] = *(_OWORD *)&v136[1];
      v148[3] = v136[3];
      HIBYTE(v136[3]) = 0;
      LOBYTE(v136[1]) = 0;
      LOWORD(v148[4]) = v136[4];
      BYTE2(v148[4]) = BYTE2(v136[4]);
      if (SBYTE7(v150[0]) < 0)
        operator delete((void *)v149);
      v149 = *(_OWORD *)&v136[5];
      *(void **)&v150[0] = v136[7];
      HIBYTE(v136[7]) = 0;
      LOBYTE(v136[5]) = 0;
      if (SHIBYTE(v150[1]) < 0)
        operator delete(*((void **)&v150[0] + 1));
      *(_OWORD *)((char *)v150 + 8) = *(_OWORD *)v137;
      *((_QWORD *)&v150[1] + 1) = *(_QWORD *)&v138[0];
      BYTE7(v138[0]) = 0;
      LOBYTE(v137[0]) = 0;
      if (SBYTE7(v150[3]) < 0)
        operator delete(*(void **)&v150[2]);
      v150[2] = *(_OWORD *)((char *)v138 + 8);
      *(_QWORD *)&v150[3] = *((_QWORD *)&v138[1] + 1);
      HIBYTE(v138[1]) = 0;
      BYTE8(v138[0]) = 0;
      WORD4(v150[3]) = v139;
      BYTE10(v150[3]) = BYTE2(v139);
      if (SHIBYTE(v136[7]) < 0)
        operator delete(v136[5]);
      if (SHIBYTE(v136[3]) < 0)
        operator delete(v136[1]);
      if (SHIBYTE(v136[0]) < 0)
        operator delete(v135[0]);
      if (SHIBYTE(v134[3]) < 0)
        operator delete(v134[1]);
      if (SHIBYTE(v134[0]) < 0)
        operator delete(v133[0]);
      LODWORD(v133[0]) = 1;
      (*(void (**)(uint64_t, void **, uint8_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v133, buf, 0, 0xFFFFFFFFLL, 0);
      if (SBYTE7(v150[3]) < 0)
        operator delete(*(void **)&v150[2]);
      if (SHIBYTE(v150[1]) < 0)
        operator delete(*((void **)&v150[0] + 1));
      if (SBYTE7(v150[0]) < 0)
        operator delete((void *)v149);
      if (SHIBYTE(v148[3]) < 0)
        operator delete(v148[1]);
      if (SHIBYTE(v148[0]) < 0)
        operator delete(v147[0]);
      if ((char)buf[47] < 0)
        operator delete(*(void **)&buf[24]);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v19 = sub_1000BD874(a3);
      v20 = *(_DWORD *)a4;
      if (*(char *)(a4 + 31) >= 0)
        v21 = v7;
      else
        v21 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v19;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v20;
      *(_WORD *)&buf[34] = 2082;
      *(_QWORD *)&buf[36] = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"AppMonitor notification\", \"notification\":%{public, location:escape_only}s, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
    v22 = *a3;
    if (*a3 == 2)
    {
      v133[0] = 0;
      v133[1] = 0;
      v134[0] = 0;
      v23 = *(_QWORD **)(a1 + 816);
      if (v23 != (_QWORD *)(a1 + 824))
      {
        do
        {
          v25 = (CLConnection *)v23[4];
          v24 = v23[5];
          if (CLConnection::getRemotePid(v25) == *(_DWORD *)a4)
          {
            v26 = objc_msgSend(sub_1001948D4(v24, 0), "clientKey");
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v27 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "'%{public}@' task suspended: removing client", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              *(_DWORD *)v142 = 138543362;
              *(_QWORD *)&v142[4] = v26;
              LODWORD(v128) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "'%{public}@' task suspended: removing client", v142, v128);
              v41 = (uint8_t *)v40;
              sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v40);
              if (v41 != buf)
                free(v41);
            }
            v28 = (char *)v133[1];
            if (v133[1] >= v134[0])
            {
              v30 = ((char *)v133[1] - (char *)v133[0]) >> 3;
              if ((unint64_t)(v30 + 1) >> 61)
                sub_100259694();
              v31 = ((char *)v134[0] - (char *)v133[0]) >> 2;
              if (v31 <= v30 + 1)
                v31 = v30 + 1;
              if ((void *)((char *)v134[0] - (char *)v133[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
                v32 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v32 = v31;
              if (v32)
                v33 = (char *)sub_10025E6A0((uint64_t)v134, v32);
              else
                v33 = 0;
              v34 = (CLConnection **)&v33[8 * v30];
              *v34 = v25;
              v29 = v34 + 1;
              v36 = (char *)v133[0];
              v35 = (char *)v133[1];
              if (v133[1] != v133[0])
              {
                do
                {
                  v37 = (CLConnection *)*((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *--v34 = v37;
                }
                while (v35 != v36);
                v35 = (char *)v133[0];
              }
              v133[0] = v34;
              v133[1] = v29;
              v134[0] = &v33[8 * v32];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *(_QWORD *)v133[1] = v25;
              v29 = v28 + 8;
            }
            v133[1] = v29;
          }
          v38 = (_QWORD *)v23[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v23[2];
              v118 = *v39 == (_QWORD)v23;
              v23 = v39;
            }
            while (!v118);
          }
          v23 = v39;
        }
        while (v39 != (_QWORD *)(a1 + 824));
      }
      v42 = *(_QWORD **)(a1 + 840);
      if (v42 != (_QWORD *)(a1 + 848))
      {
        do
        {
          v44 = (CLConnection *)v42[4];
          v43 = v42[5];
          if (CLConnection::getRemotePid(v44) == *(_DWORD *)a4)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v45 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)v43 + 24))(buf, v43);
              v46 = buf;
              if ((buf[23] & 0x80u) != 0)
                v46 = *(uint8_t **)buf;
              *(_DWORD *)v142 = 136446210;
              *(_QWORD *)&v142[4] = v46;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "'%{public}s' task suspended: removing client", v142, 0xCu);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v59 = qword_1022A01D8;
              (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v43 + 24))(v142, v43);
              v60 = v142;
              if (v143 < 0)
                v60 = *(_BYTE **)v142;
              v144 = 136446210;
              v145 = v60;
              LODWORD(v128) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v59, 1, "'%{public}s' task suspended: removing client", &v144, v128);
              v62 = v61;
              if (v143 < 0)
                operator delete(*(void **)v142);
              sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v62);
              if (v62 != (char *)buf)
                free(v62);
            }
            v47 = (char *)v133[1];
            if (v133[1] >= v134[0])
            {
              v49 = ((char *)v133[1] - (char *)v133[0]) >> 3;
              if ((unint64_t)(v49 + 1) >> 61)
                sub_100259694();
              v50 = ((char *)v134[0] - (char *)v133[0]) >> 2;
              if (v50 <= v49 + 1)
                v50 = v49 + 1;
              if ((void *)((char *)v134[0] - (char *)v133[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v50;
              if (v51)
                v52 = (char *)sub_10025E6A0((uint64_t)v134, v51);
              else
                v52 = 0;
              v53 = (CLConnection **)&v52[8 * v49];
              *v53 = v44;
              v48 = v53 + 1;
              v55 = (char *)v133[0];
              v54 = (char *)v133[1];
              if (v133[1] != v133[0])
              {
                do
                {
                  v56 = (CLConnection *)*((_QWORD *)v54 - 1);
                  v54 -= 8;
                  *--v53 = v56;
                }
                while (v54 != v55);
                v54 = (char *)v133[0];
              }
              v133[0] = v53;
              v133[1] = v48;
              v134[0] = &v52[8 * v51];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_QWORD *)v133[1] = v44;
              v48 = v47 + 8;
            }
            v133[1] = v48;
          }
          v57 = (_QWORD *)v42[1];
          if (v57)
          {
            do
            {
              v58 = v57;
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v58 = (_QWORD *)v42[2];
              v118 = *v58 == (_QWORD)v42;
              v42 = v58;
            }
            while (!v118);
          }
          v42 = v58;
        }
        while (v58 != (_QWORD *)(a1 + 848));
      }
      v63 = *(_QWORD **)(a1 + 912);
      if (v63 != (_QWORD *)(a1 + 920))
      {
        do
        {
          v64 = v63[4];
          if (objc_msgSend((id)sub_100026CC8(v64), "isEqual:", v9))
          {
            v65 = objc_msgSend((id)sub_100026CC8(v64), "clientKey");
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v66 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(_QWORD *)&buf[20] = v65;
              *(_WORD *)&buf[28] = 2050;
              *(_QWORD *)&buf[30] = v64;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic task suspended: cancelling retirement\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
            sub_10110789C(v64);
          }
          v67 = (_QWORD *)v63[1];
          if (v67)
          {
            do
            {
              v68 = v67;
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (_QWORD *)v63[2];
              v118 = *v68 == (_QWORD)v63;
              v63 = v68;
            }
            while (!v118);
          }
          v63 = v68;
        }
        while (v68 != (_QWORD *)(a1 + 920));
      }
      v69 = *(_QWORD **)(a1 + 888);
      if (v69 != (_QWORD *)(a1 + 896))
      {
        do
        {
          v71 = (CLConnection *)v69[4];
          v70 = v69[5];
          if (CLConnection::getRemotePid(v71) == *(_DWORD *)a4)
          {
            v72 = objc_msgSend((id)sub_100026CC8(v70), "clientKey");
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v73 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v72;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "'%{public}@' task suspended: removing daemonIdentifiableClient #dic", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              *(_DWORD *)v142 = 138543362;
              *(_QWORD *)&v142[4] = v72;
              LODWORD(v128) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "'%{public}@' task suspended: removing daemonIdentifiableClient #dic", v142, v128);
              v87 = (uint8_t *)v86;
              sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v86);
              if (v87 != buf)
                free(v87);
            }
            v74 = (char *)v133[1];
            if (v133[1] >= v134[0])
            {
              v76 = ((char *)v133[1] - (char *)v133[0]) >> 3;
              if ((unint64_t)(v76 + 1) >> 61)
                sub_100259694();
              v77 = ((char *)v134[0] - (char *)v133[0]) >> 2;
              if (v77 <= v76 + 1)
                v77 = v76 + 1;
              if ((void *)((char *)v134[0] - (char *)v133[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
                v78 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
                v79 = (char *)sub_10025E6A0((uint64_t)v134, v78);
              else
                v79 = 0;
              v80 = (CLConnection **)&v79[8 * v76];
              *v80 = v71;
              v75 = v80 + 1;
              v82 = (char *)v133[0];
              v81 = (char *)v133[1];
              if (v133[1] != v133[0])
              {
                do
                {
                  v83 = (CLConnection *)*((_QWORD *)v81 - 1);
                  v81 -= 8;
                  *--v80 = v83;
                }
                while (v81 != v82);
                v81 = (char *)v133[0];
              }
              v133[0] = v80;
              v133[1] = v75;
              v134[0] = &v79[8 * v78];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v133[1] = v71;
              v75 = v74 + 8;
            }
            v133[1] = v75;
          }
          v84 = (_QWORD *)v69[1];
          if (v84)
          {
            do
            {
              v85 = v84;
              v84 = (_QWORD *)*v84;
            }
            while (v84);
          }
          else
          {
            do
            {
              v85 = (_QWORD *)v69[2];
              v118 = *v85 == (_QWORD)v69;
              v69 = v85;
            }
            while (!v118);
          }
          v69 = v85;
        }
        while (v85 != (_QWORD *)(a1 + 896));
      }
      v88 = (CLConnection **)v133[0];
      if (v133[0] != v133[1])
      {
        do
          sub_100209F54(a1, *v88++);
        while (v88 != v133[1]);
        v88 = (CLConnection **)v133[0];
      }
      if (v88)
      {
        v133[1] = v88;
        operator delete(v88);
      }
      v22 = *v131;
    }
    if (v22 == 1 && -[CLClientKeyPath isValidCKP](v9, "isValidCKP"))
    {
      v89 = *(_QWORD **)(a1 + 912);
      v90 = (_QWORD *)(a1 + 920);
      if (v89 != (_QWORD *)(a1 + 920))
      {
        do
        {
          v91 = v89[4];
          if (objc_msgSend((id)sub_100026CC8(v91), "isEqual:", v9))
          {
            v92 = objc_msgSend((id)sub_100026CC8(v91), "clientKey");
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v93 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(_QWORD *)&buf[20] = v92;
              *(_WORD *)&buf[28] = 2050;
              *(_QWORD *)&buf[30] = v91;
              _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic cancelRetirement due to termination before actual dic death\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
            sub_10110789C(v91);
          }
          v94 = (_QWORD *)v89[1];
          if (v94)
          {
            do
            {
              v95 = v94;
              v94 = (_QWORD *)*v94;
            }
            while (v94);
          }
          else
          {
            do
            {
              v95 = (_QWORD *)v89[2];
              v118 = *v95 == (_QWORD)v89;
              v89 = v95;
            }
            while (!v118);
          }
          v89 = v95;
        }
        while (v95 != v90);
      }
      if (*(_DWORD *)(a4 + 108) == 1)
      {
        v96 = *(_QWORD **)(a1 + 888);
        if (v96 != (_QWORD *)(a1 + 896))
        {
          do
          {
            v97 = v96[5];
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97) == 3
              && objc_msgSend((id)sub_100026CC8(v97), "isEqual:", v9))
            {
              v98 = objc_msgSend((id)sub_100026CC8(v97), "clientKey");
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_102154528);
              v99 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v98;
                *(_WORD *)&buf[28] = 2050;
                *(_QWORD *)&buf[30] = v97;
                _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic #bas marking eligible for destructionUponDisconnection due to UserTermination\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
              }
              sub_101107244(v97);
            }
            v100 = (_QWORD *)v96[1];
            if (v100)
            {
              do
              {
                v101 = v100;
                v100 = (_QWORD *)*v100;
              }
              while (v100);
            }
            else
            {
              do
              {
                v101 = (_QWORD *)v96[2];
                v118 = *v101 == (_QWORD)v96;
                v96 = v101;
              }
              while (!v118);
            }
            v96 = v101;
          }
          while (v101 != (_QWORD *)(a1 + 896));
        }
        memset(buf, 0, 24);
        v102 = *(_QWORD **)(a1 + 912);
        if (v102 != v90)
        {
          do
          {
            v103 = v102[4];
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103) == 3
              && objc_msgSend((id)sub_100026CC8(v103), "isEqual:", v9))
            {
              v104 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
              {
                v106 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
                if ((unint64_t)(v106 + 1) >> 61)
                  sub_100259694();
                v107 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
                if (v107 <= v106 + 1)
                  v107 = v106 + 1;
                if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
                  v108 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v108 = v107;
                if (v108)
                  v109 = (char *)sub_10025E6A0((uint64_t)&buf[16], v108);
                else
                  v109 = 0;
                v110 = (uint64_t *)&v109[8 * v106];
                *v110 = v103;
                v105 = v110 + 1;
                v112 = *(char **)buf;
                v111 = *(char **)&buf[8];
                if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                {
                  do
                  {
                    v113 = *((_QWORD *)v111 - 1);
                    v111 -= 8;
                    *--v110 = v113;
                  }
                  while (v111 != v112);
                  v111 = *(char **)buf;
                }
                *(_QWORD *)buf = v110;
                *(_QWORD *)&buf[8] = v105;
                *(_QWORD *)&buf[16] = &v109[8 * v108];
                if (v111)
                  operator delete(v111);
              }
              else
              {
                **(_QWORD **)&buf[8] = v103;
                v105 = (_QWORD *)(v104 + 8);
              }
              *(_QWORD *)&buf[8] = v105;
            }
            v114 = (_QWORD *)v102[1];
            if (v114)
            {
              do
              {
                v115 = v114;
                v114 = (_QWORD *)*v114;
              }
              while (v114);
            }
            else
            {
              do
              {
                v115 = (_QWORD *)v102[2];
                v118 = *v115 == (_QWORD)v102;
                v102 = v115;
              }
              while (!v118);
            }
            v102 = v115;
          }
          while (v115 != v90);
          v116 = *(unint64_t **)buf;
          v117 = *(unint64_t **)&buf[8];
          if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
          {
            do
              sub_1007CA05C(a1, *v116++);
            while (v116 != v117);
            v117 = *(unint64_t **)buf;
          }
          if (v117)
          {
            *(_QWORD *)&buf[8] = v117;
            operator delete(v117);
          }
        }
      }
    }
    v118 = *v131 > 6 || ((1 << *v131) & 0x58) == 0;
    if (!v118)
    {
      v119 = *(_QWORD **)(a1 + 912);
      if (v119 != (_QWORD *)(a1 + 920))
      {
        do
        {
          v120 = v119[4];
          if (objc_msgSend((id)sub_100026CC8(v120), "isEqual:", v9))
          {
            v121 = objc_msgSend((id)sub_100026CC8(v120), "clientKey");
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v122 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(_QWORD *)&buf[20] = v121;
              *(_WORD *)&buf[28] = 2050;
              *(_QWORD *)&buf[30] = v120;
              _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic triggerRetirement\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
            sub_1011072B8(v120);
          }
          v123 = (_QWORD *)v119[1];
          if (v123)
          {
            do
            {
              v124 = v123;
              v123 = (_QWORD *)*v123;
            }
            while (v123);
          }
          else
          {
            do
            {
              v124 = (_QWORD *)v119[2];
              v118 = *v124 == (_QWORD)v119;
              v119 = v124;
            }
            while (!v118);
          }
          v119 = v124;
        }
        while (v124 != (_QWORD *)(a1 + 920));
      }
    }
    if (!-[CLClientKeyPath isValidCKP](v9, "isValidCKP"))
    {
      memset(buf, 0, 41);
      objc_msgSend(*(id *)(a1 + 136), "expensivelyGetIdentifyingInformation:forClient:", buf, v130);
      v9 = +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", *(_QWORD *)buf, 105);
    }
    sub_1001D3384(*(_QWORD **)(a1 + 376), a2, v131, (int *)a4, v9);
    if (*v131 == 4 && *(_BYTE *)(a1 + 1059))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v125 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_INFO, "Trial period #reprompt disarmed by foregrounded app", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        LOWORD(v133[0]) = 0;
        LODWORD(v128) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Trial period #reprompt disarmed by foregrounded app", v133, v128);
        v127 = (uint8_t *)v126;
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v126);
        if (v127 != buf)
          free(v127);
      }
      *(_BYTE *)(a1 + 1059) = 0;
    }
  }
}

void sub_1001D32C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001D3384(_QWORD *a1, uint64_t a2, unsigned int *a3, int *a4, void *a5)
{
  NSObject *v8;
  int *v9;
  int v10;
  int *v11;
  void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  std::string v27;
  void *__dst[2];
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  uint8_t buf[8];
  __int16 v33;
  const char *v34;
  __int16 v35;
  int *v36;
  __int16 v37;
  _BYTE v38[14];
  __int16 v39;
  void **v40;

  if (a5)
  {
    objc_msgSend(a5, "cppClientKey");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v31 = 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (int *)*a3;
    v10 = *a4;
    if (*((char *)a4 + 31) >= 0)
      v11 = a4 + 2;
    else
      v11 = (int *)*((_QWORD *)a4 + 1);
    v12 = __p;
    if (v31 < 0)
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    v33 = 2082;
    v34 = "";
    v35 = 2050;
    v36 = v9;
    v37 = 1026;
    *(_DWORD *)v38 = v10;
    *(_WORD *)&v38[4] = 2082;
    *(_QWORD *)&v38[6] = v11;
    v39 = 2082;
    v40 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA AppMonitor notification\", \"notification\":%{public, location:CLAppMonitor_Type::Notification}lld, \"pid\":%{public}d, \"bundleId\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s}", buf, 0x36u);
  }
  switch(*a3)
  {
    case 1u:
      sub_100C1FB5C(a1 + 10, (unsigned __int8 *)a4 + 8);
      goto LABEL_26;
    case 2u:
    case 3u:
    case 6u:
      v13 = sub_1001987C8(a1 + 10, (unsigned __int8 *)a4 + 8);
      if (v13)
      {
        sub_1015A2E04(buf, "Decaying in-use status from process state");
        sub_100033848((uint64_t)a1, __p, (uint64_t)buf);
        if (SBYTE3(v36) < 0)
          operator delete(*(void **)buf);
        sub_1000592D8(a1 + 10, v13, (uint64_t)buf);
        sub_100C1FB18((uint64_t)buf, 0);
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217A980);
        v14 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a4 + 31) >= 0)
            v15 = a4 + 2;
          else
            v15 = (int *)*((_QWORD *)a4 + 1);
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2082;
          v36 = v15;
          v16 = "{\"msg%{public}.0s\":\"skip erasing #CLIUA for RunningBoard Process State. Does not exists\", \"bundleId"
                "\":%{public, location:escape_only}s}";
          v17 = v14;
          v18 = 28;
          goto LABEL_35;
        }
      }
      break;
    case 4u:
      v19 = a1 + 10;
      if (sub_1001987C8(a1 + 10, (unsigned __int8 *)a4 + 8))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217A980);
        v20 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1001987C8(v19, (unsigned __int8 *)a4 + 8);
          v21 = (int *)*((unsigned int *)sub_1001987C8(v19, (unsigned __int8 *)a4 + 8) + 22);
          if (*((char *)a4 + 31) >= 0)
            v22 = a4 + 2;
          else
            v22 = (int *)*((_QWORD *)a4 + 1);
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2050;
          v36 = v21;
          v37 = 2082;
          *(_QWORD *)v38 = v22;
          v16 = "{\"msg%{public}.0s\":\"skip taking #CLIUA for RunningBoard Process State. Already exists\", \"AssertionL"
                "evel\":%{public, location:CLClientInUseLevel}lld, \"bundleId\":%{public, location:escape_only}s}";
          v17 = v20;
          v18 = 38;
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
        }
      }
      else
      {
        if (SHIBYTE(v31) < 0)
        {
          sub_100115CE4(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__p;
          v29 = v31;
        }
        sub_1015A2E04(&v27, "Process state from RunningBoard");
        sub_1001FA3D8(&v27, a1, (uint64_t)__dst, 5, (uint64_t *)buf);
        sub_1001F7668((uint64_t)(a1 + 10), (unsigned __int8 *)a4 + 8, (__int128 *)(a4 + 2), (__int128 *)buf);
        sub_1001FA090((uint64_t)buf);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29) < 0)
          operator delete(__dst[0]);
LABEL_26:
        sub_1001FA380((uint64_t)a1, (uint64_t *)__p);
      }
      break;
    default:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
      v23 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v24 = *a3;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v33 = 2082;
        v34 = "";
        v35 = 1026;
        LODWORD(v36) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Unexpected app monitor notification\", \"notification\":%{public}d}", buf, 0x18u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217A980);
      }
      v25 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v26 = *a3;
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v33 = 2082;
        v34 = "";
        v35 = 1026;
        LODWORD(v36) = v26;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Unexpected app monitor notification", "{\"msg%{public}.0s\":\"#CLIUA Unexpected app monitor notification\", \"notification\":%{public}d}", buf, 0x18u);
      }
      break;
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

void sub_1001D38E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001D3974(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAppNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001FBF8C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D3B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D3B4C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v4 = a2;
  *(_BYTE *)(a1 + 2904) = a2 & a3;
  v6 = *(_QWORD *)(a1 + 2408);
  if (v6)
    sub_1001D3D70(v6, a2);
  sub_1001D4210(a1 + 2816, v4);
  v7 = *(_QWORD **)(a1 + 2408);
  if (v7)
    sub_1001D4260(v7, *(_BYTE *)(a1 + 2831) == 0);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217C380);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(unsigned __int8 *)(a1 + 2831);
    *(_DWORD *)buf = 67109632;
    v19 = v4;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,Change in locationApp foreground status,isForeGround,%d,isAppleMaps,%d,networkusage,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v10 = *(unsigned __int8 *)(a1 + 2831);
    v14 = 1024;
    v15 = a3;
    v16 = 1024;
    v17 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,Change in locationApp foreground status,isForeGround,%d,isAppleMaps,%d,networkusage,%d", &v13, 20, 67109632);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationFilterController::setLocationApplicationIsForeground(BOOL, BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

uint64_t sub_1001D3D70(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  v4 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v5 = v4[31];
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2);
  v6 = *(_QWORD *)(a1 + 272);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a2);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,ForceNetworkUsage,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v11[0] = 67240192;
    v11[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,ForceNetworkUsage,%{public}d", v11, 8);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setForceNetworkUsage(BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1001D3F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D3FA4(uint64_t a1, char a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 112) = a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_1001D3FC0(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102190550);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *((unsigned __int8 *)a1 + 15);
    v4 = *((unsigned __int8 *)a1 + 13);
    v5 = *((unsigned __int8 *)a1 + 12);
    v6 = a1[6];
    v7 = *((unsigned __int8 *)a1 + 14);
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
    *(_DWORD *)buf = 67241728;
    v33 = v3;
    v34 = 1026;
    v35 = v4;
    v36 = 1026;
    v37 = v5;
    v38 = 1026;
    v39 = v6;
    v40 = 1026;
    v41 = v7;
    v42 = 1026;
    v43 = v8;
    v44 = 2050;
    v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,AllowNetworkUsage,%{public}d,batterySaverMode,%{public}d,thermalVoteToAllow,%{public}d,signalEnv,%{public}d,isMapsForeground,%{public}d,thermalLevel,%{public}d,currentBatteryLevel,%{public}.2lf", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102190550);
    v10 = *((unsigned __int8 *)a1 + 15);
    v11 = *((unsigned __int8 *)a1 + 13);
    v12 = *((unsigned __int8 *)a1 + 12);
    v13 = a1[6];
    v14 = *((unsigned __int8 *)a1 + 14);
    v15 = *a1;
    v16 = *((_QWORD *)a1 + 2);
    v19[0] = 67241728;
    v19[1] = v10;
    v20 = 1026;
    v21 = v11;
    v22 = 1026;
    v23 = v12;
    v24 = 1026;
    v25 = v13;
    v26 = 1026;
    v27 = v14;
    v28 = 1026;
    v29 = v15;
    v30 = 2050;
    v31 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,AllowNetworkUsage,%{public}d,batterySaverMode,%{public}d,thermalVoteToAllow,%{public}d,signalEnv,%{public}d,isMapsForeground,%{public}d,thermalLevel,%{public}d,currentBatteryLevel,%{public}.2lf", v19, 48);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatcherNetworkUsage::log() const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

void sub_1001D4210(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 14) != a2)
  {
    *(_BYTE *)(a1 + 14) = a2;
    sub_10022B0A8(a1);
    if (*(_BYTE *)(a1 + 14))
    {
      if (*(_BYTE *)(a1 + 12))
        *(_BYTE *)(a1 + 15) = 1;
    }
  }
  sub_1001D3FC0((int *)a1);
}

uint64_t sub_1001D4260(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v4 = a1 + 1;
  (*(void (**)(_QWORD *))(a1[1] + 16))(a1 + 1);
  v5 = v4[31];
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
  v6 = a1[34];
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a2);
  v7 = a1[76];
  if (v7)
    *(_BYTE *)(v7 + 8) = a2 ^ 1;
  v8 = a1[79];
  if (v8)
    *(_BYTE *)(v8 + 8) = a2 ^ 1;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  v9 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,DisallowNetworkUsage,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    v13[0] = 67240192;
    v13[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,DisallowNetworkUsage,%{public}d", v13, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMapMatchingEngine::setDisallowNetworkUsage(BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_1001D448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D44B4(uint64_t a1, int a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 113) = a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, a2 ^ 1u);
  return result;
}

void *sub_1001D44D4(_QWORD *a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v14;
  double v15;
  double __dst[40];
  int v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;

  memcpy(__dst, a2, sizeof(__dst));
  v3 = a1[55];
  if (v3)
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v3 + 48))(v3, __dst);
  v4 = a1[7];
  if (v4)
  {
    v5 = v4 + a1[6] - 1;
    v6 = (void **)a1[3];
    v7 = (*(double **)((char *)v6 + ((v5 >> 1) & 0x7FFFFFFFFFFFFFF8)))[40 * (v5 & 0xF)];
    if (v7 > __dst[0])
    {
      v8 = a1[4];
      a1[7] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[4];
          v6 = (void **)(a1[3] + 8);
          a1[3] = v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 8;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v22 = __dst[0];
            v23 = 2048;
            v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v17 = 134218240;
            v18 = __dst[0];
            v19 = 2048;
            v20 = v7;
            LODWORD(v15) = 22;
            v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v17), v15);
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLExtendedStepCountEntry>::add(const T &) [T = CLExtendedStepCountEntry]", "%s\n", v14);
            if (v14 != (char *)buf)
              free(v14);
          }
          goto LABEL_17;
        }
        v11 = 16;
      }
      a1[6] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1001D4784(a1 + 2, __dst);
  return memcpy(a1 + 12, __dst, 0x140uLL);
}

void *sub_1001D4784(_QWORD *a1, void *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100211D84(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = memcpy((void *)(*(_QWORD *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (v7 & 0xF)), __src, 0x140uLL);
  ++a1[5];
  return result;
}

uint64_t sub_1001D4818(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void sub_1001D4834(uint64_t *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  int v23;
  uint64_t *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *a2;
    v7 = a2[39];
    v8 = a2[26];
    v9 = *((_DWORD *)a2 + 54);
    v11 = a2[29];
    v10 = a2[30];
    v12 = a2[28];
    *(_DWORD *)buf = 136316930;
    v40 = v5;
    v41 = 2048;
    v42 = v6;
    v43 = 2048;
    v44 = v7;
    v45 = 2048;
    v46 = v11;
    v47 = 2048;
    v48 = v8;
    v49 = 1024;
    v50 = v9;
    v51 = 2048;
    v52 = v10;
    v53 = 2048;
    v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ExtendedStep,context,%s,startTime,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f,incrementalActiveTime,%f", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v13 = *a2;
    v14 = a2[39];
    v15 = a2[26];
    v16 = *((_DWORD *)a2 + 54);
    v18 = a2[29];
    v17 = a2[30];
    v19 = a2[28];
    v23 = 136316930;
    v24 = a1;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    v29 = 2048;
    v30 = v18;
    v31 = 2048;
    v32 = v15;
    v33 = 1024;
    v34 = v16;
    v35 = 2048;
    v36 = v17;
    v37 = 2048;
    v38 = v19;
    LODWORD(v22) = 78;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "ExtendedStep,context,%s,startTime,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f,incrementalActiveTime,%f", (const char *)&v23, v22);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logExtendedStep(const CLOutdoorExtendedStep &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

id sub_1001D4AB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onStepCountNotification:data:", a2, a3);
}

id sub_1001D4AC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onStepCountNotification:data:", a2, a3);
}

id sub_1001D4AD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onStepCountNotification:data:", a2, a3);
}

id sub_1001D4AE0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onStepCountNotification:data:", a2, a3);
}

void sub_1001D4AF0(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLConfigAsset::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 48), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182AD0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLConfigAsset::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182AD0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLConfigAsset::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001E14B4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D4CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D4CC8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCachedLocationController::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021595F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001F9BE8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D4E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D4EA0(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssInterference::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CD1E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssInterference::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CD1E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssInterference::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D5078(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D5058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

double *sub_1001D5078(uint64_t a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  NSObject *v7;
  const __CFString *v8;
  void **v9;
  const void *v10;
  const void *v11;
  uint64_t v13;
  const __CFString *v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  _BYTE buf[12];
  char v19;
  int v20;
  _BYTE *v21;
  void *__p[2];
  char v23;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)__p);
    v9 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imd,gnss,onTelephonyNotification,Received notification,%s", buf, 0xCu);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v13 = qword_1022A0078;
    v14 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v14, (uint64_t)buf);
    if (v19 >= 0)
      v15 = buf;
    else
      v15 = *(_BYTE **)buf;
    v20 = 136315138;
    v21 = v15;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 2, "#imd,gnss,onTelephonyNotification,Received notification,%s", (const char *)&v20);
    v17 = v16;
    if (v19 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssInterference::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
    if (v17 != (char *)__p)
      free(v17);
  }
  v10 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(CFSTR("kUplinkFreqBwNotification"), v10))
  {
    sub_1017147B8(a1, a4);
  }
  else
  {
    v11 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(CFSTR("kCellInfoNotification"), v11))
      sub_1001D571C(a1, (void **)a4);
  }
  return sub_1001D5304(a1);
}

double *sub_1001D5304(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  double *result;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 28))
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
      sub_101712CD4(v2, *(float *)(a1 + 20));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#imd,Unable to get uplink frequency disabling BT AFH", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imd,Unable to get uplink frequency disabling BT AFH", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssInterference::updateInterferenceMonitoring()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      sub_101712CC4(v4);
  }
  result = *(double **)(a1 + 56);
  if (result)
  {
    if (*(_BYTE *)(a1 + 44))
      return (double *)sub_1001D54D8(result, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1001D54D8(double *a1, int a2, double a3)
{
  double v6;
  NSObject *v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  __int16 v21;
  _BOOL4 v22;

  v6 = sub_1001FCBB4();
  if ((a2 - 13) >= 2)
  {
    a3 = *a1;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD910);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a1;
      v13 = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = a2;
      v19 = 2050;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssInterference, CLLTEBand13Band14Handler::handleBand, logging new fMachTimeOfLastBand13Band14Notification\", \"LTE-Band\":%{public}u, \"fMachTimeOfLastBand13Band14Notification\":\"%{public}f\"}", (uint8_t *)&v13, 0x22u);
    }
    *a1 = a3;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD910);
  v9 = v6 - a3;
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a1;
    v13 = 68289794;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = a2;
    v19 = 2050;
    v20 = v11;
    v21 = 1026;
    v22 = v9 < 259200.0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssInterference, CLLTEBand13Band14Handler::handleBand, \", \"LTE-Band\":%{public}u, \"fMachTimeOfLastBand13Band14Notification\":\"%{public}f\", \"band13Band14UsedRecently\":%{public}d}", (uint8_t *)&v13, 0x28u);
  }
  return sub_1001D56DC((uint64_t)(a1 + 1), v9 < 259200.0, 1);
}

uint64_t sub_1001D56DC(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  char v5;
  char v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_1001D571C(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t i;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  _OWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint8_t buf[8];
  _BYTE v16[10];
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  char v21;

  *(_BYTE *)(a1 + 44) = 0;
  v3 = *a2;
  if (*a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    memset(v9, 0, sizeof(v9));
    v10 = 1065353216;
    if (sub_1001DBC88(v3, (uint64_t)v9))
    {
      *(_DWORD *)buf = 0;
      v14 = buf;
      if (*((_QWORD *)sub_1001DC028((uint64_t)v9, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)&v14) + 3))
      {
        sub_1001C1F5C(0, (uint64_t)v9, &v11);
        sub_1001DF2C0(&v11, buf);
        if (v21 && *(_DWORD *)v16 == 6)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(sub_1001E3CA4((uint64_t)buf) + 24);
          *(double *)(a1 + 32) = sub_1001FCBB4();
          *(_BYTE *)(a1 + 44) = 1;
        }
        sub_10087B6D0((uint64_t)buf);
      }
      v5 = v11;
      for (i = v12; i != v5; sub_1005A9904((uint64_t)&v13, i))
        i -= 696;
      v12 = v5;
      if (sub_1001DC538())
      {
        *(_DWORD *)buf = 1;
        v14 = buf;
        if (*((_QWORD *)sub_1001DC028((uint64_t)v9, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)&v14) + 3))
        {
          sub_1001C1F5C(1, (uint64_t)v9, &v11);
          sub_1001DF2C0(&v11, buf);
          if (v21 && *(_DWORD *)v16 == 6)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(sub_1001E3CA4((uint64_t)buf) + 24);
            *(double *)(a1 + 32) = sub_1001FCBB4();
            *(_BYTE *)(a1 + 44) = 1;
          }
          sub_10087B6D0((uint64_t)buf);
        }
      }
    }
    sub_1001DBC50((uint64_t)v9);
    *(_QWORD *)buf = &v11;
    sub_10087B4F8((void ***)buf);
    if (*(_BYTE *)(a1 + 44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(a1 + 40);
        v8 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v16 = 2082;
        *(_QWORD *)&v16[2] = "";
        v17 = 1026;
        v18 = v7;
        v19 = 2050;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#imd,Received notification\", \"band_info\":%{public}u, \"MachTime(s)\":\"%{public}f\"}", buf, 0x22u);
      }
    }
  }
}

void sub_1001D59C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_10087B6D0((uint64_t)&a19);
  sub_1001DBC50((uint64_t)&a9);
  a19 = (void **)&a14;
  sub_10087B4F8(&a19);
  _Unwind_Resume(a1);
}

void sub_1001D5A08(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssController::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 792), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D5FFC((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D5BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D5BE0(uint64_t a1, int a2, char a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "isBand13Active,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LODWORD(v16[0]) = 67240192;
    HIDWORD(v16[0]) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "isBand13Active,%{public}d", v16, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleLTEBand13Or14State(BOOL, BOOL)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (*(unsigned __int8 *)(a1 + 608) != a2)
  {
    if (!*(_BYTE *)(a1 + 608) || (a3 & 1) != 0)
    {
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 600);
      *(_WORD *)(a1 + 688) = *(_WORD *)(a1 + 608);
      sub_100858280((_QWORD *)(a1 + 696), a1 + 616);
      sub_100858280((_QWORD *)(a1 + 728), a1 + 648);
      *(_BYTE *)(a1 + 608) = a2;
      sub_10006028C(a1 + 2624, 15);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v10 = *(unsigned __int8 *)(a1 + 608);
        *(_DWORD *)buf = 67240192;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLGnssController::handleLTEBand13Or14State, fOperatingContext.fDeviceOperatingContext.fB13, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v13 = *(unsigned __int8 *)(a1 + 608);
        LODWORD(v16[0]) = 67240192;
        HIDWORD(v16[0]) = v13;
        LODWORD(v15) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssController::handleLTEBand13Or14State, fOperatingContext.fDeviceOperatingContext.fB13, %{public}d", v16, v15, v16[0]);
        goto LABEL_30;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fB13 currently set,not resetting it", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        LOWORD(v16[0]) = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "fB13 currently set,not resetting it", v16, v15, v16[0]);
LABEL_30:
        v14 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleLTEBand13Or14State(BOOL, BOOL)", "%s\n", v8);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

void sub_1001D5FFC(_QWORD *a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  NSObject *v7;
  const __CFString *v8;
  void **v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102156528);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)__p);
    v9 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"received CT notification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(_QWORD, int *, CFDictionaryRef *))(*(_QWORD *)*a1 + 304))(*a1, a3, a4);
  v10 = (float32x2_t *)a1[147];
  if (v10)
    sub_1001DCAA8(v10, a3, a4);
  v11 = a1[154];
  if (v11)
    sub_1001D9A4C(v11, a3);
  v12 = a1[148];
  if (v12)
    sub_1001D6180(v12, a3, a4);
}

void sub_1001D6180(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const void *v21;
  int v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t *v37;
  NSObject *v38;
  const char *v39;
  uint8_t *v40;
  int v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  double v47;
  double v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  NSObject *v52;
  const __CFString *v53;
  uint8_t *v54;
  uint64_t v55;
  const __CFString *v56;
  uint8_t *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  int v65[3];
  BOOL v66;
  __int128 v67;
  uint64_t v68;
  uint8_t v69[16];
  __int128 v70;
  int v71;
  uint8_t buf[8];
  _BYTE v73[10];
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  uint64_t v78;

  if (*a3
    || (v6 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kCLTelephonyServiceConnectedNotification"), v6))
    || (v7 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kCLTelephonyServiceDisconnectedNotification"), v7))
    || (v8 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kCLTelephonyServiceResetNotification"), v8))
    || (v9 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kCallStatusChangeNotification"), v9))
    || (v10 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kAtLeastOneVoiceCallInProgress"), v10))
    || (v11 = (const void *)sub_1001DEC98(a2), CFEqual(CFSTR("kNoVoiceCallInProgress"), v11)))
  {
    v12 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kUplinkFreqBwNotification"), v12))
    {
      if (*a3)
      {
        sub_1001C1D6C((int)v69, *a3);
        LODWORD(v67) = -1082130432;
        LODWORD(v78) = -1082130432;
        v66 = 0;
        v13 = sub_1001E48E4((uint64_t)v69, (uint64_t)CFSTR("kUplinkFreqBwValid"), &v66);
        sub_10052688C((uint64_t)v69, (uint64_t)CFSTR("kUplinkFreqKey"), (float *)&v67);
        v15 = v14;
        sub_10052688C((uint64_t)v69, (uint64_t)CFSTR("kUplinkBwKey"), (float *)&v78);
        if ((v13 & v15 & v16) != 1 || !v66)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v18 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,error fetching cellular bandwidth and frequency", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE050);
            LOWORD(v65[0]) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,error fetching cellular bandwidth and frequency", v65, 2);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
        }
        else
        {
          *(float32x2_t *)(a1 + 2524) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v78, v67)), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
          sub_1001E4804(buf);
          LOBYTE(v65[0]) = 0;
          v41 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v65);
          if (LOBYTE(v65[0]))
            v42 = v41;
          else
            v42 = 0;
          v43 = *(std::__shared_weak_count **)v73;
          if (*(_QWORD *)v73)
          {
            v44 = (unint64_t *)(*(_QWORD *)v73 + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (v42)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE050);
            v46 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v47 = *(float *)(a1 + 2524);
              v48 = *(float *)(a1 + 2528);
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v73 = 2082;
              *(_QWORD *)&v73[2] = "";
              v74 = 2050;
              v75 = v47;
              v76 = 2050;
              v77 = v48;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd,Cellular-AWD,kUplinkFreqBwNotification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", buf, 0x26u);
            }
          }
          *(_DWORD *)(a1 + 2360) = *(_DWORD *)(a1 + 2352);
        }
        sub_10011A5A8(v69);
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v38 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,data is nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        *(_WORD *)v69 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,kUplinkFreqBwNotification,data is nil", v69, 2);
        v40 = (uint8_t *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v39);
        goto LABEL_96;
      }
    }
    else
    {
      v21 = (const void *)sub_1001DEC98(a2);
      if (!CFEqual(CFSTR("kCellInfoNotification"), v21))
        return;
      if (*a3)
      {
        *(_OWORD *)v69 = 0u;
        v70 = 0u;
        v71 = 1065353216;
        sub_1001D714C(a1 + 2616);
        if (sub_1001DBC88(*a3, (uint64_t)v69))
        {
          v67 = 0uLL;
          v68 = 0;
          *(_DWORD *)buf = 0;
          v78 = (uint64_t)buf;
          if (*((_QWORD *)sub_1001DC028((uint64_t)v69, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)&v78) + 3))
          {
            sub_1001E4804(buf);
            LOBYTE(v78) = 0;
            v22 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v78);
            if ((_BYTE)v78)
              v23 = v22;
            else
              v23 = 0;
            v24 = *(std::__shared_weak_count **)v73;
            if (*(_QWORD *)v73)
            {
              v25 = (unint64_t *)(*(_QWORD *)v73 + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            if (v23)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v27 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = 0;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", buf, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v78 = 67109120;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", &v78);
                v62 = (uint8_t *)v61;
                sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v61);
                if (v62 != buf)
                  free(v62);
              }
            }
            sub_1001C1F5C(0, (uint64_t)v69, (uint64_t *)&v67);
            sub_1001DF2C0((uint64_t *)&v67, buf);
            v65[0] = 0;
            v78 = (uint64_t)v65;
            v28 = sub_1001E3660(a1 + 2616, v65, (uint64_t)&unk_101B9EB60, (_DWORD **)&v78);
            sub_101892924((uint64_t)(v28 + 3), (uint64_t)buf);
            sub_10087B6D0((uint64_t)buf);
          }
          v29 = *((_QWORD *)&v67 + 1);
          v30 = v67;
          while (v29 != v30)
          {
            v29 -= 696;
            sub_1005A9904((uint64_t)&v68, v29);
          }
          *((_QWORD *)&v67 + 1) = v30;
          if (sub_1001DC538())
          {
            v65[0] = 1;
            v78 = (uint64_t)v65;
            if (*((_QWORD *)sub_1001DC028((uint64_t)v69, v65, (uint64_t)&unk_101B9EB60, (_DWORD **)&v78) + 3))
            {
              sub_1001E4804(buf);
              LOBYTE(v78) = 0;
              v31 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v78);
              if ((_BYTE)v78)
                v32 = v31;
              else
                v32 = 0;
              v33 = *(std::__shared_weak_count **)v73;
              if (*(_QWORD *)v73)
              {
                v34 = (unint64_t *)(*(_QWORD *)v73 + 8);
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              if (v32)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v36 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = 1;
                  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", buf, 8u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_1021CE050);
                  v78 = 0x104000100;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification,serving cell found for sim,%d", &v78);
                  v64 = (uint8_t *)v63;
                  sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v63);
                  if (v64 != buf)
                    free(v64);
                }
              }
              sub_1001C1F5C(1, (uint64_t)v69, (uint64_t *)&v67);
              sub_1001DF2C0((uint64_t *)&v67, buf);
              v65[0] = 1;
              v78 = (uint64_t)v65;
              v37 = sub_1001E3660(a1 + 2616, v65, (uint64_t)&unk_101B9EB60, (_DWORD **)&v78);
              sub_101892924((uint64_t)(v37 + 3), (uint64_t)buf);
              sub_10087B6D0((uint64_t)buf);
            }
          }
          if (*(_QWORD *)(a1 + 2640))
            sub_1001E24E8(a1);
          *(_QWORD *)buf = &v67;
          sub_10087B4F8((void ***)buf);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v51 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#warning,#gnssawd,error fetching cell info", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021CE050);
            LOWORD(v67) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,error fetching cell info", &v67, 2);
            v60 = (uint8_t *)v59;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v59);
            if (v60 != buf)
              free(v60);
          }
        }
        sub_1001DBC50((uint64_t)v69);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v49 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,kCellInfoNotification,data is nil", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          *(_WORD *)v69 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,kCellInfoNotification,data is nil", v69, 2);
          v40 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v50);
LABEL_96:
          if (v40 == buf)
            return;
LABEL_97:
          free(v40);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v52 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v53 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v53, (uint64_t)buf);
      v54 = (SBYTE3(v75) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v69 = 136446210;
      *(_QWORD *)&v69[4] = v54;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#warning,#gnssawd,dropping %{public}s,empty data", v69, 0xCu);
      if (SBYTE3(v75) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v55 = qword_1022A0078;
      v56 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v56, (uint64_t)v69);
      if ((SBYTE7(v70) & 0x80u) == 0)
        v57 = v69;
      else
        v57 = *(uint8_t **)v69;
      LODWORD(v67) = 136446210;
      *(_QWORD *)((char *)&v67 + 4) = v57;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 1, "#warning,#gnssawd,dropping %{public}s,empty data", &v67, 12);
      v40 = v58;
      if (SBYTE7(v70) < 0)
        operator delete(*(void **)v69);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", (const char *)v40);
      if (v40 != buf)
        goto LABEL_97;
    }
  }
}

void sub_1001D7088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a13;
  sub_10087B4F8(&a23);
  sub_1001DBC50((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1001D714C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1001D71A0(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1001D71A0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_10087B6D0((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001D71DC(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  NSObject *v6;
  const __CFString *v7;
  _DWORD **v8;
  const void *v9;
  signed int v10;
  signed int v11;
  NSObject *v12;
  const __CFString *v13;
  uint8_t *v14;
  uint64_t v15;
  const __CFString *v16;
  void **v17;
  char *v18;
  const void *v19;
  NSObject *v20;
  uint64_t **v21;
  NSObject *v22;
  const __CFString *v23;
  _DWORD **v24;
  uint64_t v25;
  const __CFString *v26;
  uint8_t *v27;
  NSObject *v28;
  const __CFString *v29;
  _DWORD **v30;
  NSObject *v31;
  uint64_t **v32;
  const void *v33;
  NSObject *v34;
  uint64_t **v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  const void *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t **v44;
  NSObject *v45;
  CFDictionaryRef v46;
  BOOL v47;
  const void *v48;
  NSObject *v49;
  uint64_t **v50;
  NSObject *v51;
  NSObject *v52;
  const void *v54;
  CFDictionaryRef v55;
  int v56;
  int v57;
  NSObject *v58;
  int v59;
  int v60;
  NSObject *v61;
  NSObject *v62;
  const void *v63;
  const __CFDictionary *v64;
  NSObject *v65;
  BOOL v66;
  BOOL v67;
  BOOL *v68;
  NSObject *v69;
  _BOOL4 v70;
  _BOOL4 v71;
  char *v72;
  NSObject *v73;
  char *v74;
  NSObject *v75;
  _DWORD **v76;
  int v77;
  int v78;
  NSObject *v79;
  int v80;
  int v81;
  uint64_t v82;
  const __CFString *v83;
  uint8_t *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  const __CFString *v88;
  uint8_t *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint8_t *v103;
  const char *v104;
  uint64_t v105;
  _BYTE v106[23];
  int v107[4];
  uint8_t buf[32];
  int v109;
  void *__p[4];
  _DWORD *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v7, (uint64_t)&v111);
    v8 = v115 >= 0 ? &v111 : (_DWORD **)v111;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,onTelephonyNotification,%s", buf, 0xCu);
    if (SHIBYTE(v115) < 0)
      operator delete(v111);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v111, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v82 = qword_1022A0078;
    v83 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v83, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0)
      v84 = buf;
    else
      v84 = *(uint8_t **)buf;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v84;
    v85 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, v82, 0, "#nilr,#nifc,onTelephonyNotification,%s", (const char *)__p);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v85);
    if (v85 != (char *)&v111)
      free(v85);
  }
  sub_1001C1D6C((int)v106, *a3);
  v105 = 255;
  v9 = (const void *)sub_1001DEC98(a2);
  if (!CFEqual(CFSTR("kSuplInitPayloadNotification"), v9))
  {
    v19 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kSimStatusChangeNotification"), v19))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v111 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        v86 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v86);
        if (v86 != (char *)&v111)
          free(v86);
      }
      if (sub_1001D9934(a1, 0))
      {
        v111 = &dword_101CE0B30;
        v21 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, &v111);
        sub_1001DAEF4((uint64_t)v21[5], a2, a3);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v111) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v111, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          *(_WORD *)buf = 0;
          LODWORD(v104) = 2;
          v92 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104, v105);
          sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v92);
          if (v92 != (char *)&v111)
            free(v92);
        }
      }
      if (!sub_1001D9934(a1, 1))
        return sub_10011A5A8(v106);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v37 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v111 = (_DWORD *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        v93 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v93);
        if (v93 != (char *)&v111)
          free(v93);
      }
      if (sub_1001D9934(a1, 1))
      {
LABEL_93:
        v111 = &dword_101CE0B34;
        v32 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, &v111);
        goto LABEL_117;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v39 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v111) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return sub_10011A5A8(v106);
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 == -1)
      {
LABEL_108:
        *(_WORD *)buf = 0;
        LODWORD(v104) = 2;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104);
        sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
        goto LABEL_161;
      }
LABEL_322:
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      goto LABEL_108;
    }
    v33 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kCellInfoNotification"), v33))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v111 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        v94 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v94);
        if (v94 != (char *)&v111)
          free(v94);
      }
      if (sub_1001D9934(a1, 0))
      {
        v111 = &dword_101CE0B30;
        v35 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, &v111);
        sub_1001DAEF4((uint64_t)v35[5], a2, a3);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v42 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v111) = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v111, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          *(_WORD *)buf = 0;
          LODWORD(v104) = 2;
          v95 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104, v105);
          sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v95);
          if (v95 != (char *)&v111)
            free(v95);
        }
      }
      if (sub_1001D9934(a1, 1))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v43 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v111 = (_DWORD *)0x104000100;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&v111, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 1;
          v96 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
          sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v96);
          if (v96 != (char *)&v111)
            free(v96);
        }
        if (sub_1001D9934(a1, 1))
        {
          v111 = &dword_101CE0B34;
          v44 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B34, (uint64_t)&unk_101B9EB60, &v111);
          sub_1001DAEF4((uint64_t)v44[5], a2, a3);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          v45 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            LOWORD(v111) = 0;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&v111, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
            *(_WORD *)buf = 0;
            LODWORD(v104) = 2;
            v98 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104);
            sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v98);
            if (v98 != (char *)&v111)
              free(v98);
          }
        }
      }
      if ((sub_1001DF9C4() & 1) != 0)
      {
        v46 = *a3;
        if (!*a3)
          return sub_10011A5A8(v106);
      }
      else
      {
        v47 = sub_1001DC9E0();
        v46 = *a3;
        if (!*a3)
          v47 = 0;
        if (!v47)
          return sub_10011A5A8(v106);
      }
      memset(__p, 0, 24);
      memset(buf, 0, sizeof(buf));
      v109 = 1065353216;
      if (sub_1001DBC88(v46, (uint64_t)buf))
      {
        *(_QWORD *)v107 = a1 + 1232;
        if (*((_QWORD *)sub_1001C1FBC((uint64_t)buf, (int *)(a1 + 1232), (uint64_t)&unk_101B9EB60, (_DWORD **)v107) + 3))
        {
          sub_1001C1F5C(*(_DWORD *)(a1 + 1232), (uint64_t)buf, (uint64_t *)__p);
          sub_1001DF2C0((uint64_t *)__p, &v111);
          sub_101892924(a1, (uint64_t)&v111);
          sub_10087B6D0((uint64_t)&v111);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          v52 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v111 = (_DWORD *)68289026;
            v112 = 2082;
            v113 = "";
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ci,cellInfo,error fetching cell info\"}", (uint8_t *)&v111, 0x12u);
          }
        }
      }
      sub_1001DBC50((uint64_t)buf);
      v111 = __p;
      sub_10087B4F8((void ***)&v111);
      return sub_10011A5A8(v106);
    }
    v40 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kCellRefreshNotification"), v40))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v41 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v111 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        v97 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v97);
        if (v97 != (char *)&v111)
          free(v97);
      }
      if (sub_1001D9934(a1, 0))
      {
        v111 = &dword_101CE0B30;
        v32 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, &v111);
        goto LABEL_117;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v51 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v111) = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return sub_10011A5A8(v106);
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      *(_WORD *)buf = 0;
      LODWORD(v104) = 2;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104, v105);
      sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
      goto LABEL_161;
    }
    v48 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kCLTelephonyServiceDisconnectedNotification"), v48))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v49 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v111 = (_DWORD *)67109120;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        v99 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v99);
        if (v99 != (char *)&v111)
          free(v99);
      }
      if (sub_1001D9934(a1, 0))
      {
        v111 = &dword_101CE0B30;
        v50 = sub_100041CE0((uint64_t **)(a1 + 760), &dword_101CE0B30, (uint64_t)&unk_101B9EB60, &v111);
        sub_1001DAEF4((uint64_t)v50[5], a2, a3);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v61 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          LOWORD(v111) = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&v111, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          *(_WORD *)buf = 0;
          LODWORD(v104) = 2;
          v100 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104, v105);
          sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v100);
          if (v100 != (char *)&v111)
            free(v100);
        }
      }
      if (!sub_1001D9934(a1, 1))
        return sub_10011A5A8(v106);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v62 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v111 = (_DWORD *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        v101 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v101);
        if (v101 != (char *)&v111)
          free(v101);
      }
      if (sub_1001D9934(a1, 1))
        goto LABEL_93;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v65 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v111) = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return sub_10011A5A8(v106);
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_108;
      goto LABEL_322;
    }
    v54 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(v54, CFSTR("kSubscriptionChangeNotification")) && ((sub_1001DF9C4() & 1) != 0 || sub_1001DC9E0()))
    {
      v55 = *a3;
      if (*a3)
      {
        memset(buf, 0, sizeof(buf));
        v109 = 1065353216;
        if (sub_1012621F4(v55, (uint64_t)buf))
        {
          v107[0] = 0;
          v111 = v107;
          v56 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, v107, (uint64_t)&unk_101B9EB60, &v111) + 20);
          v111 = v107;
          v57 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, v107, (uint64_t)&unk_101B9EB60, &v111) + 22);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          v58 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v59 = v107[0];
            __p[0] = v107;
            v60 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, v107, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 21);
            v111 = (_DWORD *)68290050;
            v112 = 2082;
            v113 = "";
            v114 = 1026;
            v115 = v59;
            v116 = 1026;
            v117 = v56;
            v118 = 1026;
            v119 = v60;
            v120 = 1026;
            v121 = v57;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim1\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)&v111, 0x2Au);
          }
          if (v56 && v57)
          {
            *(_DWORD *)(a1 + 1232) = 0;
          }
          else if (sub_1001DC538())
          {
            HIDWORD(v104) = 1;
            v111 = (_DWORD *)&v104 + 1;
            v77 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v104 + 1, (uint64_t)&unk_101B9EB60, &v111) + 20);
            v111 = (_DWORD *)&v104 + 1;
            v78 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v104 + 1, (uint64_t)&unk_101B9EB60, &v111) + 22);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
            v79 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              v80 = HIDWORD(v104);
              __p[0] = (char *)&v104 + 4;
              v81 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v104 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 21);
              v111 = (_DWORD *)68290050;
              v112 = 2082;
              v113 = "";
              v114 = 1026;
              v115 = v80;
              v116 = 1026;
              v117 = v77;
              v118 = 1026;
              v119 = v81;
              v120 = 1026;
              v121 = v78;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#timingadvance,kSubscriptionChangeNotification for sim2\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)&v111, 0x2Au);
            }
            if (v77 && v78)
              *(_DWORD *)(a1 + 1232) = 1;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
          v73 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v111) = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#timingadvance,kSubscriptionChangeNotification,error fetching context", (uint8_t *)&v111, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&v111, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
            LOWORD(__p[0]) = 0;
            LODWORD(v104) = 2;
            v74 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 16, "#timingadvance,kSubscriptionChangeNotification,error fetching context", __p, v104, v105);
            sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v74);
            if (v74 != (char *)&v111)
              free(v74);
          }
        }
        sub_100067AC4((uint64_t)buf);
      }
      return sub_10011A5A8(v106);
    }
    v63 = (const void *)sub_1001DEC98(a2);
    if (!CFEqual(v63, CFSTR("kCLCellularTransmitStateNotification")))
      return sub_10011A5A8(v106);
    if ((sub_1001DF9C4() & 1) != 0)
    {
      v64 = *a3;
      if (!*a3)
        return sub_10011A5A8(v106);
    }
    else
    {
      v66 = sub_1001DC9E0();
      v64 = *a3;
      if (*a3)
        v67 = v66;
      else
        v67 = 0;
      if (!v67)
        return sub_10011A5A8(v106);
    }
    sub_1001C1D6C((int)__p, v64);
    v68 = (BOOL *)(a1 + 1236);
    if ((sub_1001E48E4((uint64_t)__p, (uint64_t)CFSTR("kCLCellularTransmitStateNotification"), v68) & 1) != 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v69 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v70 = *v68;
        LODWORD(v111) = 67109120;
        HIDWORD(v111) = v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "#nifc #timingadvance,kTransmitStateNotification, %d", (uint8_t *)&v111, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_237;
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v71 = *v68;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v71;
      v72 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 2, "#nifc #timingadvance,kTransmitStateNotification, %d", buf);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
      if (v72 == (char *)&v111)
        goto LABEL_237;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v75 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)&v111);
        v76 = v115 >= 0 ? &v111 : (_DWORD **)v111;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,key,%{public}s,notExist", buf, 0xCu);
        if (SHIBYTE(v115) < 0)
          operator delete(v111);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_237;
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v102 = qword_1022A0078;
      sub_1001A486C(CFSTR("kCLCellularTransmitStateNotification"), (uint64_t)buf);
      if ((buf[23] & 0x80u) == 0)
        v103 = buf;
      else
        v103 = *(uint8_t **)buf;
      v107[0] = 136446210;
      *(_QWORD *)&v107[1] = v103;
      LODWORD(v104) = 12;
      v72 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, v102, 0, "#Warning,#cts,key,%{public}s,notExist", v107, v104, v105);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
      if (v72 == (char *)&v111)
        goto LABEL_237;
    }
    free(v72);
LABEL_237:
    sub_10011A5A8(__p);
    return sub_10011A5A8(v106);
  }
  if ((sub_1001C1194((uint64_t)v106, (uint64_t)CFSTR("kSlotIdKey"), (_DWORD *)&v105 + 1) & 1) != 0)
  {
    v10 = sub_100099E54(SHIDWORD(v105));
    v11 = v10;
    LODWORD(v105) = v10;
    if (!*(_BYTE *)(a1 + 792) && v10)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v13 = (const __CFString *)sub_1001DEC98(a2);
        sub_1001A486C(v13, (uint64_t)buf);
        v14 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v111) = 67109634;
        HIDWORD(v111) = v11;
        v112 = 2080;
        v113 = (const char *)v14;
        v114 = 1024;
        v115 = HIDWORD(v105);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s,invalidInstance,slot,%d", (uint8_t *)&v111, 0x18u);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(&v111, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
        v15 = qword_1022A0078;
        v16 = (const __CFString *)sub_1001DEC98(a2);
        sub_1001A486C(v16, (uint64_t)__p);
        if (SHIBYTE(__p[2]) >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v17;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = HIDWORD(v105);
        LODWORD(v104) = 24;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, v15, 16, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s,invalidInstance,slot,%d", buf, v104, v105);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        goto LABEL_55;
      }
      return sub_10011A5A8(v106);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v29 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v29, (uint64_t)&v111);
      v30 = v115 >= 0 ? &v111 : (_DWORD **)v111;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s", buf, 0x12u);
      if (SHIBYTE(v115) < 0)
        operator delete(v111);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      v87 = qword_1022A0078;
      v88 = (const __CFString *)sub_1001DEC98(a2);
      sub_1001A486C(v88, (uint64_t)buf);
      if ((buf[23] & 0x80u) == 0)
        v89 = buf;
      else
        v89 = *(uint8_t **)buf;
      LODWORD(__p[0]) = 67109378;
      HIDWORD(__p[0]) = v11;
      LOWORD(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 2) = v89;
      LODWORD(v104) = 18;
      v90 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, v87, 0, "#nilr,#nifc,#ins%d,onTelephonyNotification,%s", __p, v104);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v90);
      if (v90 != (char *)&v111)
        free(v90);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v111) = 67109120;
      HIDWORD(v111) = v11;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", (uint8_t *)&v111, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v111, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      v91 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 0, "#nilr,#nifc,invoke,%d,onTelephonyNotification(notification, data)", buf);
      sub_100512490("Generic", 1, 0, 2, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v91);
      if (v91 != (char *)&v111)
        free(v91);
    }
    if (sub_1001D9934(a1, v11))
    {
      v111 = &v105;
      v32 = sub_100041CE0((uint64_t **)(a1 + 760), (int *)&v105, (uint64_t)&unk_101B9EB60, &v111);
LABEL_117:
      sub_1001DAEF4((uint64_t)v32[5], a2, a3);
      return sub_10011A5A8(v106);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v38 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v111) = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "Invalid instance", (uint8_t *)&v111, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return sub_10011A5A8(v106);
    bzero(&v111, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    *(_WORD *)buf = 0;
    LODWORD(v104) = 2;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, qword_1022A0078, 17, "Invalid instance", buf, v104, v105);
    sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
LABEL_161:
    if (v18 != (char *)&v111)
    {
LABEL_162:
      free(v18);
      return sub_10011A5A8(v106);
    }
    return sub_10011A5A8(v106);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
  v22 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v23 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v23, (uint64_t)&v111);
    v24 = v115 >= 0 ? &v111 : (_DWORD **)v111;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#nilr,#nifc,onTelephonyNotification,%s,slot,na", buf, 0xCu);
    if (SHIBYTE(v115) < 0)
      operator delete(v111);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&v111, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0EA8);
    v25 = qword_1022A0078;
    v26 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v26, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0)
      v27 = buf;
    else
      v27 = *(uint8_t **)buf;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v27;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &v111, 1628, &_mh_execute_header, v25, 16, "#nilr,#nifc,onTelephonyNotification,%s,slot,na", (const char *)__p);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
LABEL_55:
    sub_100512490("Generic", 1, 0, 0, "void CLNilrInterfaceController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
    if (v18 == (char *)&v111)
      return sub_10011A5A8(v106);
    goto LABEL_162;
  }
  return sub_10011A5A8(v106);
}

void sub_1001D9830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_10011A5A8(va1);
  sub_10011A5A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001D9934(uint64_t a1, signed int a2)
{
  _BOOL8 result;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  signed int v10;
  BOOL v11;
  uint64_t *v12;
  int v13;
  int *v14;

  result = 0;
  v13 = a2;
  if (a2)
    v4 = *(_BYTE *)(a1 + 792) == 0;
  else
    v4 = 0;
  v5 = !v4;
  if (a2 <= 1 && v5)
  {
    v6 = *(_QWORD *)(a1 + 768);
    if (!v6)
      return 0;
    v7 = (uint64_t **)(a1 + 760);
    v8 = a1 + 768;
    v9 = v8;
    do
    {
      v10 = *(_DWORD *)(v6 + 32);
      v11 = v10 < a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (!v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 != v8 && *(_DWORD *)(v9 + 32) <= a2)
    {
      v14 = &v13;
      return sub_100041CE0(v7, &v13, (uint64_t)&unk_101B9EB60, &v14)[5] != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001D99EC(uint64_t a1, int *a2, const __CFDictionary **a3)
{
  _BYTE *v6;
  uint64_t result;

  v6 = *(_BYTE **)(a1 + 1672);
  if (v6)
    sub_101801EF0(v6, a2, a3);
  result = *(_QWORD *)(a1 + 3192);
  if (result)
    return sub_1001D71DC(result, a2, a3);
  return result;
}

void sub_1001D9A4C(uint64_t a1, int *a2)
{
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  v4 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v4, CFSTR("kAtLeastOneVoiceCallInProgress")) && !*(_BYTE *)(a1 + 53))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "L5Context,kAtLeastOneVoiceCallInProgress", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,kAtLeastOneVoiceCallInProgress", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    *(_BYTE *)(a1 + 53) = 1;
    goto LABEL_17;
  }
  v5 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v5, CFSTR("kNoVoiceCallInProgress")) && *(_BYTE *)(a1 + 53))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "L5Context,kNoVoiceCallInProgress", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,kNoVoiceCallInProgress", v12, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    *(_BYTE *)(a1 + 53) = 0;
LABEL_17:
    sub_100240068(a1);
  }
}

void sub_1001D9D70(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLUnifiedCellLocationProvider::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLUnifiedCellLocationProvider::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021846B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLUnifiedCellLocationProvider::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001D9F48(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001D9F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001D9F48(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  void *v7;
  NSObject *v8;
  const __CFString *v9;
  _BYTE *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const char *v15;
  double Current;
  NSObject *v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  _BOOL4 v21;
  const void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  const void *v36;
  unsigned __int8 v37;
  NSObject *v38;
  const char *v39;
  const void *v40;
  NSObject *v41;
  const __CFString *v42;
  _BYTE *v43;
  uint64_t v44;
  const __CFString *v45;
  uint8_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  const __CFString *v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _BOOL4 v55;
  const char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63[3];
  uint64_t v64[3];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  _BOOL4 v69;
  uint8_t buf[32];
  int v71;
  uint64_t v72[4];
  _BYTE __p[18];
  __int16 v74;
  int v75;

  v7 = *a4;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v9, (uint64_t)__p);
    v10 = v75 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v7 != 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@CellFlow, ctnotify, %{public}s, havedata, %{public}d", buf, 0x12u);
    if (SHIBYTE(v75) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v49 = qword_1022A0048;
    v50 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v50, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0)
      v51 = buf;
    else
      v51 = *(uint8_t **)buf;
    LODWORD(v72[0]) = 136446466;
    *(uint64_t *)((char *)v72 + 4) = (uint64_t)v51;
    WORD2(v72[1]) = 1026;
    *(_DWORD *)((char *)&v72[1] + 6) = v7 != 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v49, 0, "@CellFlow, ctnotify, %{public}s, havedata, %{public}d", v72, 18);
    v53 = v52;
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v53);
    if (v53 != __p)
      free(v53);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(__p);
    v11 = sub_1001DEC98(a3);
    sub_1001F6B14((uint64_t)__p, "telNotification", v11);
    sub_1001DFAF4((uint64_t)__p, (uint64_t)"telNotification");
    sub_10011A5A8(__p);
  }
  if (v7)
  {
    v12 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v12, CFSTR("kCellInfoNotification")))
      ++*(_DWORD *)(a1 + 1192);
    v13 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v13, CFSTR("kCellMonitorRefreshResultNotification")))
      ++*(_DWORD *)(a1 + 1196);
  }
  if (sub_10019CFA0() != 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CellFlow, outcome, LS Off", __p, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    *(_WORD *)buf = 0;
    LODWORD(v61) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellFlow, outcome, LS Off", buf, v61);
    v19 = (char *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
LABEL_114:
    if (v19 != __p)
      free(v19);
    return;
  }
  v14 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v14, CFSTR("kCLTelephonyServiceDisconnectedNotification")))
  {
    sub_100044040((_QWORD *)a1, "disconnect");
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 384))(a1, "disconnect");
LABEL_20:
    v15 = "x";
    goto LABEL_21;
  }
  v22 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v22, CFSTR("kCellInfoNotification")))
  {
    if (v7)
    {
      memset(v72, 0, 24);
      memset(buf, 0, sizeof(buf));
      v71 = 1065353216;
      v15 = "x";
      if (sub_1001DBC88(*a4, (uint64_t)buf))
      {
        *(_DWORD *)__p = 0;
        v65 = (uint64_t)__p;
        v23 = *((_QWORD *)sub_1001DC028((uint64_t)buf, (int *)__p, (uint64_t)&unk_101B9EB60, (_DWORD **)&v65) + 3);
        sub_1001C1F5C(0, (uint64_t)buf, v72);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v24 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__p = 0x104020300;
          *(_WORD *)&__p[8] = 2050;
          *(_QWORD *)&__p[10] = 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3);
          v74 = 1026;
          v75 = v23 == 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", __p, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v65 = 0x104020300;
          v66 = 2050;
          v67 = 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3);
          v68 = 1026;
          v69 = v23 == 0;
          LODWORD(v61) = 24;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", &v65, v61);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v57);
          if (v58 != __p)
            free(v58);
        }
        v25 = *(_QWORD *)(a1 + 1072);
        v26 = *(_QWORD *)(a1 + 1064);
        memset(v64, 0, sizeof(v64));
        sub_100D97524(v64, v72[0], v72[1], 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3));
        v62 = (uint64_t *)(a1 + 1064);
        sub_1001DFB98(v64, 0, (uint64_t *)(a1 + 1040), (uint64_t *)(a1 + 1064));
        *(_QWORD *)__p = v64;
        sub_10087B4F8((void ***)__p);
        if (v23)
          v27 = 0;
        else
          v27 = v25 == v26;
        if (!v27)
          v15 = "cellinfo";
        v29 = v72[0];
        for (i = v72[1]; i != v29; sub_1005A9904((uint64_t)&v72[2], i))
          i -= 696;
        v72[1] = v29;
        if (sub_1001DC538())
        {
          *(_DWORD *)__p = 1;
          v65 = (uint64_t)__p;
          v30 = *((_QWORD *)sub_1001DC028((uint64_t)buf, (int *)__p, (uint64_t)&unk_101B9EB60, (_DWORD **)&v65) + 3);
          sub_1001C1F5C(1, (uint64_t)buf, v72);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021846D8);
          v31 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)__p = 0x204020300;
            *(_WORD *)&__p[8] = 2050;
            *(_QWORD *)&__p[10] = 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3);
            v74 = 1026;
            v75 = v30 == 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", __p, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021846D8);
            v65 = 0x204020300;
            v66 = 2050;
            v67 = 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3);
            v68 = 1026;
            v69 = v30 == 0;
            LODWORD(v61) = 24;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellFlow, infonotify, inst, %{public}d, cells, %{public}lu, empty, %{public}d", &v65, v61, v62);
            v60 = (char *)v59;
            sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v59);
            if (v60 != __p)
              free(v60);
          }
          v32 = *(_QWORD *)(a1 + 1096);
          v33 = *(_QWORD *)(a1 + 1088);
          memset(v63, 0, sizeof(v63));
          sub_100D97524(v63, v72[0], v72[1], 0x66FD0EB66FD0EB67 * ((v72[1] - v72[0]) >> 3));
          sub_1001DFB98(v63, 1, (uint64_t *)(a1 + 1040), v62);
          *(_QWORD *)__p = v63;
          sub_10087B4F8((void ***)__p);
          if (v30)
            v34 = 0;
          else
            v34 = v32 == v33;
          if (!v34)
            v15 = "cellinfo";
        }
        v35 = "x";
      }
      else
      {
        v35 = "fetchfail";
      }
      sub_1001DBC50((uint64_t)buf);
      *(_QWORD *)__p = v72;
      sub_10087B4F8((void ***)__p);
    }
    else
    {
      v35 = "nulldata";
      v15 = "x";
    }
    if (strlen(v35) >= 2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v38 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CellFlow, infonotify, error, %{public}s", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        return;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v35;
      LODWORD(v61) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 16, "CellFlow, infonotify, error, %{public}s", buf, v61);
      v19 = (char *)v39;
      sub_100512490("Generic", 1, 0, 0, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v39);
      goto LABEL_114;
    }
  }
  else
  {
    v36 = (const void *)sub_1001DEC98(a3);
    if (!CFEqual(v36, CFSTR("kCellMonitorRefreshResultNotification")))
    {
      v40 = (const void *)sub_1001DEC98(a3);
      if (CFEqual(v40, CFSTR("kCLTelephonyServiceResetNotification")))
      {
        sub_100044040((_QWORD *)a1, "reset");
        v15 = "reset";
        goto LABEL_21;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v41 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v42 = (const __CFString *)sub_1001DEC98(a3);
        sub_1001A486C(v42, (uint64_t)__p);
        v43 = v75 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "CellService, unknown, %{public}s", buf, 0xCu);
        if (SHIBYTE(v75) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v44 = qword_1022A0048;
        v45 = (const __CFString *)sub_1001DEC98(a3);
        sub_1001A486C(v45, (uint64_t)buf);
        if ((buf[23] & 0x80u) == 0)
          v46 = buf;
        else
          v46 = *(uint8_t **)buf;
        LODWORD(v72[0]) = 136446210;
        *(uint64_t *)((char *)v72 + 4) = (uint64_t)v46;
        LODWORD(v61) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v44, 0, "CellService, unknown, %{public}s", v72, v61);
        v48 = v47;
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v48);
        if (v48 != __p)
          free(v48);
      }
      goto LABEL_20;
    }
    v15 = "x";
    if (v7)
    {
      __p[0] = 0;
      v37 = sub_100235254((CFDictionaryRef)*a4, __p);
      if ((v37 & (__p[0] == 0)) != 0)
        v15 = "monitorrefresh";
    }
  }
LABEL_21:
  if (sub_1001DFB18(a1) && strlen(v15) >= 2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001E6A38(a1 + 120, (uint64_t)v15, (_OWORD **)(a1 + 1040), a1 + 880, Current);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v21 = sub_1001DFB18(a1);
    *(_DWORD *)__p = 67240450;
    *(_DWORD *)&__p[4] = v21;
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@CellFlow, skipcalc, clients, %{public}d, get, %{public}s", __p, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v54 = qword_1022A0048;
    v55 = sub_1001DFB18(a1);
    *(_DWORD *)buf = 67240450;
    *(_DWORD *)&buf[4] = v55;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v15;
    LODWORD(v61) = 18;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v54, 0, "@CellFlow, skipcalc, clients, %{public}d, get, %{public}s", buf, v61);
    v19 = (char *)v56;
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v56);
    goto LABEL_114;
  }
}

void sub_1001DAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  sub_1001DBC50((uint64_t)&a23);
  a33 = (void **)&a29;
  sub_10087B4F8(&a33);
  _Unwind_Resume(a1);
}

void sub_1001DAEF4(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  NSObject *v6;
  int v7;
  const __CFString *v8;
  void **v9;
  const void *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  const void *v15;
  const void *v16;
  _BOOL4 v17;
  BOOL v18;
  int *v19;
  _BOOL4 v20;
  const void *v21;
  NSObject *v22;
  int v23;
  int v24;
  char *v25;
  NSObject *v26;
  int v27;
  int v28;
  char *v29;
  NSObject *v30;
  int v31;
  int v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const __CFString *v39;
  uint8_t *v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  char *v46;
  const char *v47;
  uint64_t v48[3];
  _BYTE v49[23];
  _DWORD *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  uint8_t buf[32];
  int v56;
  uint64_t v57;
  __int128 v58;
  void *__p;
  __int128 v60;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 8488);
    v8 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v8, (uint64_t)&__p);
    v9 = v60 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,%s", buf, 0x12u);
    if (SHIBYTE(v60) < 0)
      operator delete(__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v37 = qword_1022A0078;
    v38 = *(_DWORD *)(a1 + 8488);
    v39 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v39, (uint64_t)buf);
    if ((buf[23] & 0x80u) == 0)
      v40 = buf;
    else
      v40 = *(uint8_t **)buf;
    LODWORD(v57) = 67109378;
    HIDWORD(v57) = v38;
    LOWORD(v58) = 2080;
    *(_QWORD *)((char *)&v58 + 2) = v40;
    LODWORD(v47) = 18;
    v41 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v37, 2, "#ins%d,#nilr,#nict,%s", &v57, v47);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v41);
    if (v41 != (char *)&__p)
      free(v41);
  }
  v10 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(CFSTR("kCLTelephonyServiceDisconnectedNotification"), v10))
  {
    sub_100D6F0A8(a1 + 6112);
    __p = 0;
    v60 = 0uLL;
    sub_1001E54D0(a1 + 3344, &__p);
    *(_QWORD *)buf = &__p;
    sub_10087B4F8((void ***)buf);
    sub_1001E5300(a1 + 3344, 0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 8488);
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,cellInfo,erased", (uint8_t *)&__p, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_16;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v44 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v44;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,cellInfo,erased", buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
    goto LABEL_88;
  }
  v16 = (const void *)sub_1001DEC98(a2);
  if (!CFEqual(CFSTR("kCellInfoNotification"), v16))
  {
    v21 = (const void *)sub_1001DEC98(a2);
    if (!CFEqual(CFSTR("kCellRefreshNotification"), v21))
      goto LABEL_16;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_DWORD *)(a1 + 8488);
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,kCellRefreshNotification", (uint8_t *)&__p, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_16;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v24 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v24;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,kCellRefreshNotification", buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
LABEL_88:
    if (v25 != (char *)&__p)
      free(v25);
    goto LABEL_16;
  }
  if (*a3)
  {
    sub_1001C1D6C((int)v49, *a3);
    v57 = 0;
    v58 = 0uLL;
    memset(buf, 0, sizeof(buf));
    v56 = 1065353216;
    v17 = sub_1001DBC88(*a3, (uint64_t)buf);
    v18 = v17;
    if (v17)
    {
      v19 = (int *)(a1 + 8488);
      v50 = (_DWORD *)(a1 + 8488);
      if (*((_QWORD *)sub_1001C1FBC((uint64_t)buf, (int *)(a1 + 8488), (uint64_t)&unk_101B9EB60, &v50) + 3))
      {
        sub_1001C1F5C(*v19, (uint64_t)buf, &v57);
        sub_1001DF2C0(&v57, &__p);
        sub_101892924(a1 + 6112, (uint64_t)&__p);
        sub_10087B6D0((uint64_t)&__p);
        sub_1001E54D0(a1 + 3344, &v57);
        if (*(_BYTE *)(a1 + 6808))
          v20 = *(_DWORD *)(a1 + 6120) == 6;
        else
          v20 = 0;
        sub_1001E5300(a1 + 3344, v20);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v33 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v34 = *v19;
          LODWORD(__p) = 67109632;
          HIDWORD(__p) = v34;
          LOWORD(v60) = 2048;
          *(_QWORD *)((char *)&v60 + 2) = 0x66FD0EB66FD0EB67 * (((uint64_t)v58 - v57) >> 3);
          WORD5(v60) = 1024;
          HIDWORD(v60) = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,refreshed,cellcount,%lu,sim,%d", (uint8_t *)&__p, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D3A38);
          v45 = *v19;
          LODWORD(v50) = 67109632;
          HIDWORD(v50) = v45;
          v51 = 2048;
          v52 = 0x66FD0EB66FD0EB67 * (((uint64_t)v58 - v57) >> 3);
          v53 = 1024;
          v54 = v45;
          LODWORD(v47) = 24;
          v46 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#ci,cellInfo,refreshed,cellcount,%lu,sim,%d", &v50, v47, LODWORD(v48[0]));
          sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v46);
          if (v46 != (char *)&__p)
            free(v46);
        }
        if (((sub_1001DF9C4() & 1) != 0 || sub_1001DC9E0()) && sub_1001DCA70() && sub_1000FDB0C())
        {
          if ((uint64_t *)(a1 + 6816) != &v57)
            sub_10169AB5C(a1 + 6816, v57, v58, 0x66FD0EB66FD0EB67 * (((uint64_t)v58 - v57) >> 3));
          v35 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40);
          v36 = *(unsigned int *)(a1 + 8488);
          memset(v48, 0, sizeof(v48));
          sub_100D97524(v48, *(_QWORD *)(a1 + 6816), *(_QWORD *)(a1 + 6824), 0x66FD0EB66FD0EB67 * ((uint64_t)(*(_QWORD *)(a1 + 6824) - *(_QWORD *)(a1 + 6816)) >> 3));
          sub_1001E52CC(v35, v36, v48);
          __p = v48;
          sub_10087B4F8((void ***)&__p);
        }
        goto LABEL_70;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v30 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v31 = *v19;
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,emptycells", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v32 = *v19;
        LODWORD(v50) = 67109120;
        HIDWORD(v50) = v32;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#ci,cellInfo,emptycells", &v50);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v29);
LABEL_55:
        if (v29 != (char *)&__p)
          free(v29);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D3A38);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(_DWORD *)(a1 + 8488);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ci,cellInfo,error fetching cell info", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D3A38);
        v28 = *(_DWORD *)(a1 + 8488);
        LODWORD(v50) = 67109120;
        HIDWORD(v50) = v28;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,#ci,cellInfo,error fetching cell info", &v50);
        sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v29);
        goto LABEL_55;
      }
    }
LABEL_70:
    sub_1001DBC50((uint64_t)buf);
    __p = &v57;
    sub_10087B4F8((void ***)&__p);
    sub_10011A5A8(v49);
    if (!v18)
      return;
  }
LABEL_16:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D3A38);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(_DWORD *)(a1 + 8488);
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,fSupl.onTelephonyNotification", (uint8_t *)&__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D3A38);
    v42 = *(_DWORD *)(a1 + 8488);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v42;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ins%d,#nilr,#nict,fSupl.onTelephonyNotification", buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrController::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v43);
    if (v43 != (char *)&__p)
      free(v43);
  }
  sub_1001DF338(a1 + 3344, a2, (void **)a3);
  v15 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(CFSTR("kSimStatusChangeNotification"), v15))
    sub_1018513B8(a1);
}

void sub_1001DBBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  sub_1001DBC50((uint64_t)&a21);
  a31 = (void **)&a27;
  sub_10087B4F8(&a31);
  sub_10011A5A8(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DBC50(uint64_t a1)
{
  void *v2;

  sub_1001DC4C4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

BOOL sub_1001DBC88(void *a1, uint64_t a2)
{
  id v4;
  char *v5;
  id v6;
  char *v7;
  _BOOL8 result;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint8_t buf[1640];

  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get cell information for SIM 1", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v13) = 0;
    LODWORD(v12) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get cell information for SIM 1", &v13, v12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromCellInfoDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v10);
LABEL_23:
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  sub_1001DC4C0(&v13, v4);
  HIDWORD(v12) = 0;
  *(_QWORD *)buf = (char *)&v12 + 4;
  v5 = sub_1001DC028(a2, (int *)&v12 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  sub_1001DC284((id *)v5 + 3, &v13);
  sub_1001DC534(&v13);
  if (!sub_1001DC538())
    return 1;
  v6 = objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v6)
  {
    sub_1001DC4C0(&v13, v6);
    HIDWORD(v12) = 1;
    *(_QWORD *)buf = (char *)&v12 + 4;
    v7 = sub_1001DC028(a2, (int *)&v12 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1001DC284((id *)v7 + 3, &v13);
    sub_1001DC534(&v13);
    return 1;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get cell information for SIM 2", buf, 2u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v13) = 0;
    LODWORD(v12) = 2;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get cell information for SIM 2", &v13, v12);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromCellInfoDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v10);
    goto LABEL_23;
  }
  return result;
}

void sub_1001DC008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001DC534(va);
  _Unwind_Resume(a1);
}

char *sub_1001DC028(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  char **v10;
  char *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = *(char **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = (char *)(a1 + 16);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_QWORD *)v14 + 3) = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(char **)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(char **)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100970770(v24, 0);
  return i;
}

void sub_1001DC26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100970770((char **)va, 0);
  _Unwind_Resume(a1);
}

id *sub_1001DC284(id *a1, id *a2)
{
  if (a1 != a2)
  {

    *a1 = *a2;
    *a2 = 0;
  }
  return a1;
}

id *sub_1001DC2C4(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v10;
  id v11;
  char *v12;
  int v13;
  id v14;
  uint8_t buf[4];
  id v16;

  *a1 = 0;
  v3 = objc_msgSend(a2, "valueForKey:", CFSTR("kCellRefreshNotification"));
  v5 = objc_opt_class(NSArray, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    *a1 = v3;
    v6 = v3;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021461A0);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = objc_msgSend(*a1, "count");
    *(_DWORD *)buf = 134217984;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#clct,CLCTCellInfo, received cellList size,%lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v10 = qword_1022A02A8;
    v11 = objc_msgSend(*a1, "count");
    v13 = 134217984;
    v14 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#clct,CLCTCellInfo, received cellList size,%lu", &v13);
    sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTCellInfo::CLCTCellInfo(CFDictionaryRef)", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  return a1;
}

void sub_1001DC4C4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1001DC534(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

id *sub_1001DC500(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1001DC538()
{
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if (byte_102303E08 != 1)
    return 0;
  if ((sub_1001DC634() & 1) != 0 || (sub_1001DC5AC() & 1) != 0 || (sub_1001DC794() & 1) != 0)
    return 1;
  return sub_10075B95C();
}

uint64_t sub_1001DC5AC()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 139) < 0x34) & (0x900000005001DuLL >> (dword_102303CA8
                                                                                              + 117));
}

uint64_t sub_1001DC634()
{
  uint64_t result;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if (dword_102303CA8 > 134)
  {
    if (((dword_102303CA8 - 135) > 0xA || ((1 << (dword_102303CA8 + 121)) & 0x405) == 0)
      && dword_102303CA8 != 202
      && dword_102303CA8 != 204)
    {
      return 0;
    }
  }
  else if ((dword_102303CA8 - 34) > 0x2E
         || ((1 << (dword_102303CA8 - 34)) & 0x700000008001) == 0)
  {
    return 0;
  }
  return result;
}

uint64_t sub_1001DC708()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 180) < 0x3E) & (0x2C14031410000003uLL >> (dword_102303CA8
                                                                                                 + 76));
}

uint64_t sub_1001DC794()
{
  if ((sub_1001DC8D0() & 1) != 0
    || (sub_1001DC848() & 1) != 0
    || (sub_1001DC958() & 1) != 0
    || sub_1001DC7D8()
    || (sub_1001DC708() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1007573A8();
  }
}

BOOL sub_1001DC7D8()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return dword_102303CA8 == 217;
}

uint64_t sub_1001DC848()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 172) < 0x27) & (0x4400020033uLL >> (dword_102303CA8
                                                                                           + 84));
}

uint64_t sub_1001DC8D0()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 168) < 0x21) & (0x14000000FuLL >> (dword_102303CA8
                                                                                          + 88));
}

uint64_t sub_1001DC958()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return ((dword_102303CA8 - 178) < 0x33) & (0x5030000000003uLL >> (dword_102303CA8
                                                                                              + 78));
}

BOOL sub_1001DC9E0()
{
  if ((sub_1001DCA70() & 1) == 0 && (sub_1001DC634() & 1) == 0 && !sub_1001DC5AC())
    return 0;
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  return (byte_102303E08 & 1) != 0;
}

uint64_t sub_1001DCA70()
{
  uint64_t result;

  result = sub_1001DC794();
  if ((_DWORD)result)
    return (sub_1001DC8D0() & 1) == 0 && (sub_1001DC848() & 1) == 0 && !sub_1001DC7D8();
  return result;
}

void sub_1001DCAA8(float32x2_t *a1, int *a2, CFDictionaryRef *a3)
{
  NSObject *v6;
  const __CFString *v7;
  _BYTE *v8;
  const void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  double v15;
  double v16;
  const void *v17;
  CFDictionaryRef v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  const void *v22;
  const __CFDictionary *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const void *v28;
  CFDictionaryRef v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  const void *v33;
  CFDictionaryRef v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v40;
  NSObject *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _QWORD *v46;
  NSObject *v47;
  const char *v48;
  char *v49;
  const void *v50;
  CFDictionaryRef v51;
  NSObject *v52;
  int v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  const void *v60;
  const __CFDictionary *v61;
  NSObject *v62;
  uint64_t i;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  const char *v67;
  NSObject *v68;
  const char *v69;
  NSObject *v70;
  NSObject *v71;
  const void *v72;
  const __CFDictionary *v73;
  NSObject *v74;
  __int32 v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  const __CFString *v79;
  uint8_t *v80;
  char *v81;
  char *v82;
  NSObject *v83;
  const char *v84;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  const char *v89;
  char *v90;
  const char *v91;
  char *v92;
  const char *v93;
  char *v94;
  const char *v95;
  char *v96;
  const char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint8_t buf[16];
  __int128 v110;
  int v111;
  char v112;
  id v113[4];
  int v114;
  _BYTE v115[18];
  __int16 v116;
  _BYTE v117[10];
  double v118;
  int v119;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v7 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v7, (uint64_t)v115);
    v8 = v117[3] >= 0 ? v115 : *(_BYTE **)v115;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#awd,onTelephonyNotification,%s", buf, 0xCu);
    if ((v117[3] & 0x80000000) != 0)
      operator delete(*(void **)v115);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v115, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v78 = qword_1022A0088;
    v79 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v79, (uint64_t)buf);
    if ((SBYTE7(v110) & 0x80u) == 0)
      v80 = buf;
    else
      v80 = *(uint8_t **)buf;
    LODWORD(v113[0]) = 136315138;
    *(id *)((char *)v113 + 4) = v80;
    _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, v78, 2, "#awd,onTelephonyNotification,%s", (const char *)v113);
    v82 = v81;
    if (SBYTE7(v110) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v82);
    if (v82 != v115)
      free(v82);
  }
  v9 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(CFSTR("kUplinkFreqBwNotification"), v9))
  {
    if (*a3)
    {
      sub_1001C1D6C((int)buf, *a3);
      LODWORD(v113[0]) = -1082130432;
      LODWORD(v104) = -1082130432;
      LOBYTE(v107) = 0;
      v10 = sub_1001E48E4((uint64_t)buf, (uint64_t)CFSTR("kUplinkFreqBwValid"), (BOOL *)&v107);
      sub_10052688C((uint64_t)buf, (uint64_t)CFSTR("kUplinkFreqKey"), (float *)v113);
      v12 = v11;
      sub_10052688C((uint64_t)buf, (uint64_t)CFSTR("kUplinkBwKey"), (float *)&v104);
      if ((v10 & v12 & v13) == 1 && (_BYTE)v107)
      {
        a1[81] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v104, v113[0])), (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL)));
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDEE8);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v15 = a1[81].f32[0];
          v16 = a1[81].f32[1];
          *(_DWORD *)v115 = 68289538;
          *(_DWORD *)&v115[4] = 0;
          *(_WORD *)&v115[8] = 2082;
          *(_QWORD *)&v115[10] = "";
          v116 = 2050;
          *(double *)v117 = v15;
          *(_WORD *)&v117[8] = 2050;
          v118 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kUplinkFreqBwNotification\", \"freq(MHz)\":\"%{public}f\", \"bw(MHz)\":\"%{public}f\"}", v115, 0x26u);
        }
      }
      sub_10011A5A8(buf);
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v19 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v115 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#awd,kUplinkFreqBwNotification,error fetching info", v115, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v115, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      *(_WORD *)buf = 0;
      LODWORD(v103) = 2;
      _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kUplinkFreqBwNotification,error fetching info", buf, v103);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v20);
LABEL_75:
      if (v21 != v115)
        free(v21);
      return;
    }
    return;
  }
  v17 = (const void *)sub_1001DEC98(a2);
  if (!CFEqual(v17, CFSTR("kSubscriptionChangeNotification")))
  {
    v22 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kPrefDataSimChangedNotification"), v22))
    {
      v23 = *a3;
      if (!*a3)
        return;
      v113[0] = 0;
      if (sub_101261E84(v23, v113))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
        v24 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v115 = 138477827;
          *(id *)&v115[4] = v113[0];
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#awd,kPrefDSChangedNotification,context,%{private}@", v115, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v115, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          *(_DWORD *)buf = 138477827;
          *(id *)&buf[4] = v113[0];
          LODWORD(v103) = 12;
          _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kPrefDSChangedNotification,context,%{private}@", buf, v103);
          v88 = (char *)v87;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v87);
          if (v88 != v115)
            free(v88);
        }
        a1[80].i32[0] = sub_100099E54((uint64_t)objc_msgSend(v113[0], "slotID"));

      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
        v31 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v115 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#awd,kPrefDSChangedNotification,error fetching info", v115, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(v115, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          *(_WORD *)buf = 0;
          LODWORD(v103) = 2;
          _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kPrefDSChangedNotification,error fetching info", buf, v103);
          v21 = (char *)v32;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v32);
          goto LABEL_75;
        }
      }
      return;
    }
    v28 = (const void *)sub_1001DEC98(a2);
    if (!CFEqual(CFSTR("kCellInfoNotification"), v28))
    {
      v33 = (const void *)sub_1001DEC98(a2);
      if (CFEqual(CFSTR("kSubscriberMccAndMncNotification"), v33))
      {
        v34 = *a3;
        if (*a3)
        {
          *(_OWORD *)buf = 0u;
          v110 = 0u;
          v111 = 1065353216;
          if (sub_1001E56B4(v34, (uint64_t)buf))
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            v35 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v104) = 0;
              v113[0] = &v104;
              v36 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v113) + 5);
              v107 = 0;
              v113[0] = &v107;
              v37 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, &v107, (uint64_t)&unk_101B9EB60, (_DWORD **)v113) + 6);
              HIDWORD(v103) = 0;
              v113[0] = (char *)&v103 + 4;
              v38 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)&v103 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v113)+ 28);
              *(_DWORD *)v115 = 68290050;
              *(_DWORD *)&v115[4] = 0;
              *(_WORD *)&v115[8] = 2082;
              *(_QWORD *)&v115[10] = "";
              v116 = 1026;
              *(_DWORD *)v117 = 0;
              *(_WORD *)&v117[4] = 1026;
              *(_DWORD *)&v117[6] = v36;
              LOWORD(v118) = 1026;
              *(_DWORD *)((char *)&v118 + 2) = v37;
              HIWORD(v118) = 1026;
              v119 = v38;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", v115, 0x2Au);
            }
            LODWORD(v113[0]) = 0;
            *(_QWORD *)v115 = v113;
            v39 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)v113, (uint64_t)&unk_101B9EB60, (_DWORD **)v115) + 5);
            LODWORD(v104) = 0;
            *(_QWORD *)v115 = &v104;
            v40 = sub_1001E59F8((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v115);
            sub_10173A958((uint64_t)a1, 0, v39, *((_DWORD *)v40 + 6));
            if (sub_1001DC538())
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v41 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
              {
                LODWORD(v104) = 1;
                v113[0] = &v104;
                v42 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v113) + 5);
                v107 = 1;
                v113[0] = &v107;
                v43 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, &v107, (uint64_t)&unk_101B9EB60, (_DWORD **)v113) + 6);
                HIDWORD(v103) = 1;
                v113[0] = (char *)&v103 + 4;
                v44 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)&v103 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)v113)+ 28);
                *(_DWORD *)v115 = 68290050;
                *(_DWORD *)&v115[4] = 0;
                *(_WORD *)&v115[8] = 2082;
                *(_QWORD *)&v115[10] = "";
                v116 = 1026;
                *(_DWORD *)v117 = 1;
                *(_WORD *)&v117[4] = 1026;
                *(_DWORD *)&v117[6] = v42;
                LOWORD(v118) = 1026;
                *(_DWORD *)((char *)&v118 + 2) = v43;
                HIWORD(v118) = 1026;
                v119 = v44;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", v115, 0x2Au);
              }
              LODWORD(v113[0]) = 1;
              *(_QWORD *)v115 = v113;
              v45 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)v113, (uint64_t)&unk_101B9EB60, (_DWORD **)v115) + 5);
              LODWORD(v104) = 1;
              *(_QWORD *)v115 = &v104;
              v46 = sub_1001E59F8((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v115);
              sub_10173A958((uint64_t)a1, 1, v45, *((_DWORD *)v46 + 6));
            }
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            v59 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v115 = 0;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#awd,kSubscriberMccAndMncNotification,error fetching MCC/MNC", v115, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(v115, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              LOWORD(v113[0]) = 0;
              LODWORD(v103) = 2;
              _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kSubscriberMccAndMncNotification,error fetching MCC/MNC", v113, v103);
              v92 = (char *)v91;
              sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v91);
              if (v92 != v115)
                free(v92);
            }
          }
          sub_100067AC4((uint64_t)buf);
        }
      }
      else
      {
        v50 = (const void *)sub_1001DEC98(a2);
        if (CFEqual(CFSTR("kDataStatusNotification"), v50))
        {
          v51 = *a3;
          if (*a3)
          {
            *(_OWORD *)buf = 0u;
            v110 = 0u;
            v111 = 1065353216;
            if (sub_101260B14(v51, (uint64_t)buf))
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v52 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v104) = 0;
                v113[0] = &v104;
                v53 = *((_DWORD *)sub_10071E124((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v113) + 9);
                *(_DWORD *)v115 = 68289538;
                *(_DWORD *)&v115[4] = 0;
                *(_WORD *)&v115[8] = 2082;
                *(_QWORD *)&v115[10] = "";
                v116 = 1026;
                *(_DWORD *)v117 = 0;
                *(_WORD *)&v117[4] = 1026;
                *(_DWORD *)&v117[6] = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kDataStatusNotification\", \"sim\":%{public}d, \"RAT\":%{public}d}", v115, 0x1Eu);
              }
              if (sub_1001DC538())
              {
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
                v54 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v104) = 1;
                  v113[0] = &v104;
                  v55 = *((_DWORD *)sub_10071E124((uint64_t)buf, (int *)&v104, (uint64_t)&unk_101B9EB60, (_DWORD **)v113)
                        + 9);
                  *(_DWORD *)v115 = 68289538;
                  *(_DWORD *)&v115[4] = 0;
                  *(_WORD *)&v115[8] = 2082;
                  *(_QWORD *)&v115[10] = "";
                  v116 = 1026;
                  *(_DWORD *)v117 = 1;
                  *(_WORD *)&v117[4] = 1026;
                  *(_DWORD *)&v117[6] = v55;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,kDataStatusNotification\", \"sim\":%{public}d, \"RAT\":%{public}d}", v115, 0x1Eu);
                }
              }
            }
            else
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v70 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v115 = 0;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#awd,copyValuesFromDataStatusDictionary,failed", v115, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(v115, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
                LOWORD(v113[0]) = 0;
                LODWORD(v103) = 2;
                _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,copyValuesFromDataStatusDictionary,failed", v113, v103);
                v98 = (char *)v97;
                sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v97);
                if (v98 != v115)
                  free(v98);
              }
            }
            sub_100067AC4((uint64_t)buf);
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            v68 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v115 = 0;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "#awd,kDataStatusNotification,error fetching info", v115, 2u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(v115, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              *(_WORD *)buf = 0;
              LODWORD(v103) = 2;
              _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kDataStatusNotification,error fetching info", buf, v103);
              v21 = (char *)v69;
              sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v69);
              goto LABEL_75;
            }
          }
        }
        else
        {
          v60 = (const void *)sub_1001DEC98(a2);
          if (CFEqual(v60, CFSTR("kAltAccountConfiguredNotification")))
          {
            v61 = *a3;
            if (*a3)
            {
              LOBYTE(v113[0]) = 0;
              if (sub_101262BB4(v61, (BOOL *)v113))
              {
                a1[96].i32[0] = LOBYTE(v113[0]);
                return;
              }
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v76 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v115 = 0;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "#awd,kAltAccountConfiguredNotification,error fetching alt account configuration", v115, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(v115, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
                *(_WORD *)buf = 0;
                LODWORD(v103) = 2;
                _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kAltAccountConfiguredNotification,error fetching alt account configuration", buf, v103);
                v21 = (char *)v77;
                sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v77);
                goto LABEL_75;
              }
            }
          }
          else
          {
            v72 = (const void *)sub_1001DEC98(a2);
            if (!CFEqual(CFSTR("kTandemCapabilityNotification"), v72))
              return;
            v73 = *a3;
            if (!*a3)
              return;
            v113[0] = 0;
            if (sub_101262E34(v73, v113))
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v74 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v115 = 134217984;
                *(id *)&v115[4] = v113[0];
                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "#awd,kTandemCapabilityNotification,tandemCapability,%ld", v115, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v115, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
                *(_DWORD *)buf = 134217984;
                *(id *)&buf[4] = v113[0];
                _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kTandemCapabilityNotification,tandemCapability,%ld", buf);
                v102 = (char *)v101;
                sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v101);
                if (v102 != v115)
                  free(v102);
              }
              if ((unint64_t)v113[0] - 1 < 4)
                v75 = (__int32)v113[0];
              else
                v75 = 0;
              a1[80].i32[1] = v75;
            }
            else
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
              v83 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v115 = 0;
                _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "#awd,kTandemCapabilityNotification,error fetching context", v115, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(v115, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
                *(_WORD *)buf = 0;
                LODWORD(v103) = 2;
                _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kTandemCapabilityNotification,error fetching context", buf, v103);
                v21 = (char *)v84;
                sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v84);
                goto LABEL_75;
              }
            }
          }
        }
      }
      return;
    }
    v29 = *a3;
    if (!*a3)
      return;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    memset(v113, 0, sizeof(v113));
    v114 = 1065353216;
    if (sub_1001DBC88(v29, (uint64_t)v113))
    {
      *(_DWORD *)v115 = 0;
      *(_QWORD *)buf = v115;
      if (*((_QWORD *)sub_1001DC028((uint64_t)v113, (int *)v115, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3))
      {
        sub_1001C1F5C(0, (uint64_t)v113, &v104);
        sub_1001DF2C0(&v104, buf);
        if (v112)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          v30 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v115 = 67109120;
            *(_DWORD *)&v115[4] = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell found for sim,%d", v115, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v115, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            v107 = 67109120;
            v108 = 0;
            _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,serving cell found for sim,%d", &v107);
            v90 = (char *)v89;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v89);
            if (v90 != v115)
              free(v90);
          }
          sub_1001E38C0((uint64_t)a1, 0, (uint64_t)buf);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          v62 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v115 = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell missing", v115, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v115, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            LOWORD(v107) = 0;
            LODWORD(v103) = 2;
            _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,serving cell missing", &v107, v103);
            v94 = (char *)v93;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v93);
            if (v94 != v115)
              free(v94);
          }
        }
        sub_10087B6D0((uint64_t)buf);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
        v56 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v115 = 67109120;
          *(_DWORD *)&v115[4] = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", v115, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v115, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 0;
          _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v57);
          if (v58 != v115)
            free(v58);
        }
      }
      v64 = v104;
      for (i = v105; i != v64; sub_1005A9904((uint64_t)&v106, i))
        i -= 696;
      v105 = v64;
      if (!sub_1001DC538())
        goto LABEL_176;
      *(_DWORD *)v115 = 1;
      *(_QWORD *)buf = v115;
      if (*((_QWORD *)sub_1001DC028((uint64_t)v113, (int *)v115, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3))
      {
        sub_1001C1F5C(1, (uint64_t)v113, &v104);
        sub_1001DF2C0(&v104, buf);
        if (v112)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          v65 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v115 = 67109120;
            *(_DWORD *)&v115[4] = 1;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell found for sim,%d", v115, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v115, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            v107 = 67109120;
            v108 = 1;
            _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,serving cell found for sim,%d", &v107);
            v96 = (char *)v95;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v95);
            if (v96 != v115)
              free(v96);
          }
          sub_1001E38C0((uint64_t)a1, 1, (uint64_t)buf);
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
          v71 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v115 = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,serving cell missing", v115, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(v115, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
            LOWORD(v107) = 0;
            LODWORD(v103) = 2;
            _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,serving cell missing", &v107, v103);
            v100 = (char *)v99;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v99);
            if (v100 != v115)
              free(v100);
          }
        }
        sub_10087B6D0((uint64_t)buf);
LABEL_176:
        sub_1001DBC50((uint64_t)v113);
        *(_QWORD *)v115 = &v104;
        sub_10087B4F8((void ***)v115);
        return;
      }
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v66 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v115 = 67109120;
        *(_DWORD *)&v115[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", v115, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_176;
      bzero(v115, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf);
      v49 = (char *)v67;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v67);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v47 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#awd,kCellInfoNotification,error fetching cell info", v115, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_176;
      bzero(v115, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      *(_WORD *)buf = 0;
      LODWORD(v103) = 2;
      _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kCellInfoNotification,error fetching cell info", buf, v103);
      v49 = (char *)v48;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v48);
    }
    if (v49 != v115)
      free(v49);
    goto LABEL_176;
  }
  v18 = *a3;
  if (*a3)
  {
    *(_OWORD *)buf = 0u;
    v110 = 0u;
    v111 = 1065353216;
    if (sub_1012621F4(v18, (uint64_t)buf))
    {
      sub_10173A5EC((uint64_t)a1, 0, (uint64_t)buf);
      if (sub_1001DC538())
        sub_10173A5EC((uint64_t)a1, 1, (uint64_t)buf);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      v27 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#awd,kSubscriptionChangeNotification,error fetching context", v115, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(v115, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
        LOWORD(v113[0]) = 0;
        LODWORD(v103) = 2;
        _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kSubscriptionChangeNotification,error fetching context", v113, v103);
        v86 = (char *)v85;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v85);
        if (v86 != v115)
          free(v86);
      }
    }
    sub_100067AC4((uint64_t)buf);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v25 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v115 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#awd,kSubscriptionChangeNotification,error fetching info", v115, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v115, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
      *(_WORD *)buf = 0;
      LODWORD(v103) = 2;
      _os_log_send_and_compose_impl(2, 0, v115, 1628, &_mh_execute_header, qword_1022A0088, 16, "#awd,kSubscriptionChangeNotification,error fetching info", buf, v103);
      v21 = (char *)v26;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyAWD::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
      goto LABEL_75;
    }
  }
}

void sub_1001DEBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_10087B6D0((uint64_t)va1);
  sub_1001DBC50((uint64_t)&STACK[0x300]);
  *(_QWORD *)(v3 + 48) = va;
  sub_10087B4F8((void ***)&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DEC98(int *a1)
{
  os_unfair_lock_s *v2;
  int v3;
  uint64_t v4;
  _QWORD v6[5];
  int v7;

  if (qword_102301D18 != -1)
    dispatch_once(&qword_102301D18, &stru_102146120);
  v2 = (os_unfair_lock_s *)qword_102301D20;
  v3 = *a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001DED44;
  v6[3] = &unk_102146160;
  v6[4] = qword_102301D20;
  v7 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)qword_102301D20);
  v4 = sub_1001DED44((uint64_t)v6);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_1001DED44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v29;
  _DWORD v30[2];
  __int16 v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  _BYTE v38[24];

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v3 = (_QWORD *)(v1 + 40);
  v2 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v2 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v2;
    else
      v9 = (uint64_t *)(v2 + 8);
    if (!v8)
      v6 = (_QWORD *)v2;
    v2 = *v9;
  }
  while (*v9);
  if (v6 == v3 || v5 < *((_DWORD *)v6 + 8))
  {
LABEL_12:
    v29 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD **)(v29 + 32);
    if (v11 != v3)
      goto LABEL_29;
    while (1)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v13 = *(_DWORD *)(a1 + 40);
        v14 = *(_DWORD *)(v29 + 4);
        *(_DWORD *)buf = 67109376;
        v34 = v13;
        v35 = 1024;
        LODWORD(v36) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Request to decode unknown integer %d is a programmer error. fSize %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v25 = *(_DWORD *)(a1 + 40);
        v26 = *(_DWORD *)(v29 + 4);
        v30[0] = 67109376;
        v30[1] = v25;
        v31 = 1024;
        v32 = v26;
        v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Request to decode unknown integer %d is a programmer error. fSize %d", v30, 14);
        sub_100512490("Generic", 1, 0, 0, "CFStringRef (anonymous namespace)::NotificationMap::notificationFromInt(int)_block_invoke", "%s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        *(_QWORD *)v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(_QWORD *)&v38[10] = "0";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
      }
      v16 = qword_1022A02D8;
      if (os_signpost_enabled((os_log_t)qword_1022A02D8))
      {
        *(_DWORD *)buf = 68289539;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        *(_QWORD *)v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(_QWORD *)&v38[10] = "0";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
      }
      v17 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2082;
        *(_QWORD *)v38 = "assert";
        *(_WORD *)&v38[8] = 2081;
        *(_QWORD *)&v38[10] = "0";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm", 571, "notificationFromInt_block_invoke");
LABEL_29:
      v18 = qword_1022A0070;
      do
      {
        if (v18 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021461E0);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *((_DWORD *)v11 + 8);
          v21 = v11[5];
          *(_DWORD *)buf = 68289794;
          v34 = 0;
          v35 = 2082;
          v36 = "";
          v37 = 1026;
          *(_DWORD *)v38 = v20;
          *(_WORD *)&v38[4] = 2050;
          *(_QWORD *)&v38[6] = v21;
          *(_WORD *)&v38[14] = 2114;
          *(_QWORD *)&v38[16] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Int2NotifMap\", \"Key\":%{public}d, \"NotifPtr\":\"%{public}p\", \"NotifVal\":%{public, location:escape_only}@}", buf, 0x2Cu);
          v18 = qword_1022A0070;
        }
        else
        {
          v18 = -1;
        }
        v22 = (_QWORD *)v11[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v11[2];
            v24 = *v23 == (_QWORD)v11;
            v11 = v23;
          }
          while (!v24);
        }
        v11 = v23;
      }
      while (v23 != v3);
    }
  }
  return v6[5];
}

uint64_t *sub_1001DF2C0@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = 0;
  a2[696] = 0;
  v3 = *result;
  v4 = result[1];
  if (*result != v4)
  {
    while (!*(_BYTE *)v3 || *(_DWORD *)(v3 + 4) != 0)
    {
      v3 += 696;
      if (v3 == v4)
        return result;
    }
  }
  if (v3 != v4)
    return (uint64_t *)sub_10087B57C((uint64_t)a2, v3);
  return result;
}

void sub_1001DF324(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10087B6D0(v1);
  _Unwind_Resume(a1);
}

void sub_1001DF338(uint64_t a1, int *a2, void **a3)
{
  NSObject *v6;
  const __CFString *v7;
  void **v8;
  const void *v9;
  const std::string *v10;
  const std::string *v11;
  const std::string *v12;
  const void *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  void *__p[2];
  __int128 v27;
  int v28;
  int v29;
  int v30;
  id v31[2];
  uint8_t buf[8];
  __int16 v33;
  const char *v34;
  __int16 v35;
  void **v36;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    v7 = (const __CFString *)sub_1001DEC98(a2);
    sub_1001A486C(v7, (uint64_t)__p);
    v8 = (SBYTE7(v27) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v33 = 2082;
    v34 = "";
    v35 = 2082;
    v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,received CT notification\", \"notification\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
  }
  v9 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(CFSTR("kSimStatusChangeNotification"), v9))
  {
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 1065353216;
    if (sub_1012615CC(*a3, (uint64_t)__p))
    {
      *(_QWORD *)buf = a1 + 2556;
      v10 = (const std::string *)sub_100970464((uint64_t)__p, (int *)(a1 + 2556), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 376), v10 + 1);
      *(_QWORD *)buf = a1 + 2556;
      v11 = (const std::string *)sub_100970464((uint64_t)__p, (int *)(a1 + 2556), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 432), v11 + 2);
      *(_QWORD *)buf = a1 + 2556;
      v12 = (const std::string *)sub_100970464((uint64_t)__p, (int *)(a1 + 2556), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      std::string::operator=((std::string *)(a1 + 400), v12 + 3);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021C7518);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_DWORD *)(a1 + 2556);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,copySimStatusChangeFromDictionary error", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021C7518);
        v20 = *(_DWORD *)(a1 + 2556);
        LODWORD(v31[0]) = 67109120;
        HIDWORD(v31[0]) = v20;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ins%d,#nilr,#supl,copySimStatusChangeFromDictionary error", v31);
        sub_100512490("Generic", 1, 0, 0, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
    }
    sub_10097039C((uint64_t)__p);
  }
  else
  {
    v13 = (const void *)sub_1001DEC98(a2);
    if (CFEqual(CFSTR("kSuplInitPayloadNotification"), v13))
    {
      v31[0] = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v27 = 0;
      if (sub_101261268((CFDictionaryRef)*a3, v31, (unint64_t *)__p))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v14 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#supl suplInitCT", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v22 = *(_DWORD *)(a1 + 2556);
          v29 = 67109120;
          v30 = v22;
          v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,#supl suplInitCT", &v29);
          sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
          if (v23 != (char *)buf)
            free(v23);
        }
        sub_1016A6F8C(a1, (char **)__p);
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_1021C74F8);
        v18 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          v19 = *(_DWORD *)(a1 + 2556);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#ins%d,#nilr,#supl,copySuplPayloadfromDictionary returned error", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_1021C74F8);
          v24 = *(_DWORD *)(a1 + 2556);
          v29 = 67109120;
          v30 = v24;
          v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ins%d,#nilr,#supl,copySuplPayloadfromDictionary returned error", &v29);
          sub_100512490("Generic", 1, 0, 0, "void CLNilrSupl::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v25);
          if (v25 != (char *)buf)
            free(v25);
        }
      }

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1001DF984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001DF9C4()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "TimingAdvanceSupport", &v8);
  if (v8)
    v1 = v0;
  else
    v1 = 0;
  v2 = v7;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v1)
      return 0;
  }
  else
  {
LABEL_8:
    if (!v1)
      return 0;
  }
  if ((sub_1001DCA70() & 1) != 0 || (sub_1001DC634() & 1) != 0 || sub_1001DC5AC())
  {
    if (qword_102303CA0 != -1)
      dispatch_once(&qword_102303CA0, &stru_102151390);
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    if ((byte_102303E08 & 1) != 0)
      return 1;
  }
  return 0;
}

void sub_1001DFAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DFAE8()
{
  return byte_1022FDE70;
}

uint64_t sub_1001DFAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_10011A5AC(a1);
  return sub_10019E128(v3, a2);
}

BOOL sub_1001DFB18(uint64_t a1)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;

  v4 = 0;
  v2 = 1;
  if (!sub_1001B7864(a1, &v4, 1))
  {
    v5 = 3;
    v2 = 1;
    if (!sub_1001B7864(a1, &v5, 1))
    {
      v6 = 4;
      return sub_1001B7864(a1, &v6, 1) != 0;
    }
  }
  return v2;
}

void sub_1001DFB98(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  NSObject *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  char *v135;
  uint64_t v136;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint8_t v143[8];
  __int16 v144;
  _BYTE *v145;
  char v146;
  _DWORD v147[2];
  __int16 v148;
  uint8_t *v149;
  _BYTE v150[76];
  int v151;
  void *v152;
  void *v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _OWORD v166[2];
  __int128 __p;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  int v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  _BYTE buf[76];
  int v193;
  void *v194;
  void *v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _OWORD v208[2];
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int v233;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 1875962727 * ((unint64_t)(a1[1] - *a1) >> 3);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = a2 + 1;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@CellService, selection, inst, %{public}d, count, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v127 = 1875962727 * ((unint64_t)(a1[1] - *a1) >> 3);
    *(_DWORD *)v150 = 67240448;
    *(_DWORD *)&v150[4] = a2 + 1;
    *(_WORD *)&v150[8] = 1026;
    *(_DWORD *)&v150[10] = v127;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellService, selection, inst, %{public}d, count, %{public}d", v150, 14);
    v129 = (char *)v128;
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v128);
    if (v129 != buf)
      free(v129);
  }
  v7 = &a4[3 * a2];
  v10 = v7[1];
  v9 = v7 + 1;
  v8 = v10;
  v141 = &a4[3 * a2];
  v11 = *v141;
  if (v10 != *v141)
  {
    do
    {
      v8 -= 696;
      sub_1005A9904((uint64_t)&a4[3 * a2 + 2], v8);
    }
    while (v8 != v11);
  }
  *v9 = v11;
  v12 = *a1;
  v13 = a1[1];
  if (*a1 == v13)
  {
    v142 = 0;
  }
  else
  {
    v142 = 0;
    v140 = &a4[3 * a2 + 2];
    do
    {
      *(_OWORD *)v150 = *(_OWORD *)v12;
      v14 = *(_OWORD *)(v12 + 16);
      v15 = *(_OWORD *)(v12 + 32);
      v16 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)&v150[60] = *(_OWORD *)(v12 + 60);
      *(_OWORD *)&v150[32] = v15;
      *(_OWORD *)&v150[48] = v16;
      *(_OWORD *)&v150[16] = v14;
      v151 = *(_DWORD *)(v12 + 80);
      v153 = 0;
      v154 = 0;
      v152 = 0;
      sub_10027205C(&v152, *(const void **)(v12 + 88), *(_QWORD *)(v12 + 96), (uint64_t)(*(_QWORD *)(v12 + 96) - *(_QWORD *)(v12 + 88)) >> 2);
      v155 = *(_OWORD *)(v12 + 112);
      v17 = *(_OWORD *)(v12 + 128);
      v18 = *(_OWORD *)(v12 + 144);
      v19 = *(_OWORD *)(v12 + 176);
      v158 = *(_OWORD *)(v12 + 160);
      v159 = v19;
      v156 = v17;
      v157 = v18;
      v20 = *(_OWORD *)(v12 + 192);
      v21 = *(_OWORD *)(v12 + 208);
      v22 = *(_OWORD *)(v12 + 240);
      v162 = *(_OWORD *)(v12 + 224);
      v163 = v22;
      v160 = v20;
      v161 = v21;
      v23 = *(_OWORD *)(v12 + 256);
      v24 = *(_OWORD *)(v12 + 272);
      v25 = *(_OWORD *)(v12 + 288);
      *(_OWORD *)((char *)v166 + 12) = *(_OWORD *)(v12 + 300);
      v165 = v24;
      v166[0] = v25;
      v164 = v23;
      if (*(char *)(v12 + 343) < 0)
      {
        sub_100115CE4(&__p, *(void **)(v12 + 320), *(_QWORD *)(v12 + 328));
      }
      else
      {
        v26 = *(_OWORD *)(v12 + 320);
        v168 = *(_QWORD *)(v12 + 336);
        __p = v26;
      }
      v27 = *(_OWORD *)(v12 + 344);
      v28 = *(_OWORD *)(v12 + 376);
      v170 = *(_OWORD *)(v12 + 360);
      v171 = v28;
      v169 = v27;
      v29 = *(_OWORD *)(v12 + 392);
      v30 = *(_OWORD *)(v12 + 408);
      v31 = *(_OWORD *)(v12 + 440);
      v174 = *(_OWORD *)(v12 + 424);
      v175 = v31;
      v172 = v29;
      v173 = v30;
      v32 = *(_OWORD *)(v12 + 456);
      v33 = *(_OWORD *)(v12 + 472);
      v34 = *(_OWORD *)(v12 + 488);
      v179 = *(_DWORD *)(v12 + 504);
      v177 = v33;
      v178 = v34;
      v176 = v32;
      v35 = *(_OWORD *)(v12 + 512);
      v36 = *(_OWORD *)(v12 + 528);
      v37 = *(_OWORD *)(v12 + 560);
      v182 = *(_OWORD *)(v12 + 544);
      v183 = v37;
      v180 = v35;
      v181 = v36;
      v38 = *(_OWORD *)(v12 + 576);
      v39 = *(_OWORD *)(v12 + 592);
      v40 = *(_OWORD *)(v12 + 624);
      v186 = *(_OWORD *)(v12 + 608);
      v187 = v40;
      v184 = v38;
      v185 = v39;
      v41 = *(_OWORD *)(v12 + 640);
      v42 = *(_OWORD *)(v12 + 656);
      v43 = *(_OWORD *)(v12 + 672);
      v191 = *(_DWORD *)(v12 + 688);
      v189 = v42;
      v190 = v43;
      v188 = v41;
      if (v150[0])
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v44 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          sub_1001E6450((unsigned int *)v150, buf);
          v45 = buf;
          if (buf[23] < 0)
            v45 = *(_BYTE **)buf;
          *(_DWORD *)v143 = 67240451;
          *(_DWORD *)&v143[4] = a2 + 1;
          v144 = 2081;
          v145 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@CellService, selection, inst, %{public}d, %{private}s", v143, 0x12u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v48 = qword_1022A0048;
          sub_1001E6450((unsigned int *)v150, v143);
          v49 = v143;
          if (v146 < 0)
            v49 = *(uint8_t **)v143;
          v147[0] = 67240451;
          v147[1] = a2 + 1;
          v148 = 2081;
          v149 = v49;
          LODWORD(v136) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 0, "@CellService, selection, inst, %{public}d, %{private}s", v147, v136);
          v51 = v50;
          if (v146 < 0)
            operator delete(*(void **)v143);
          sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v51);
          if (v51 != buf)
            free(v51);
        }
        sub_1001E6780((uint64_t)v150, -1, -1, -1, -1);
        ++HIDWORD(v142);
        if (*(_DWORD *)&v150[4])
        {
          v46 = *v9;
          if (*v9 >= (unint64_t)*v140)
          {
            v47 = sub_1005A9E3C(v141, (uint64_t)v150);
          }
          else
          {
            sub_1005A9F60((uint64_t)v140, *v9, (uint64_t)v150);
            v47 = v46 + 696;
            *v9 = v46 + 696;
          }
          *v9 = v47;
        }
        else
        {
          sub_1001E6098(v141, *v141 + 696 * (int)v142, (uint64_t)v150);
          LODWORD(v142) = v142 + 1;
        }
      }
      if (SHIBYTE(v168) < 0)
        operator delete((void *)__p);
      if (v152)
      {
        v153 = v152;
        operator delete(v152);
      }
      v12 += 696;
    }
    while (v12 != v13);
    if ((_DWORD)v142)
      sub_1001E63C4((uint64_t)v141, *v141 + 696 * (int)v142, *v9);
    else
      LODWORD(v142) = 0;
  }
  v53 = *a3;
  v52 = a3[1];
  if (v52 != *a3)
  {
    do
    {
      v52 -= 696;
      sub_1005A9904((uint64_t)(a3 + 2), v52);
    }
    while (v52 != v53);
  }
  a3[1] = v53;
  v54 = *a4;
  v55 = a4[1];
  if (*a4 != v55)
  {
    do
    {
      *(_OWORD *)buf = *(_OWORD *)v54;
      v56 = *(_OWORD *)(v54 + 16);
      v57 = *(_OWORD *)(v54 + 32);
      v58 = *(_OWORD *)(v54 + 48);
      *(_OWORD *)&buf[60] = *(_OWORD *)(v54 + 60);
      *(_OWORD *)&buf[32] = v57;
      *(_OWORD *)&buf[48] = v58;
      *(_OWORD *)&buf[16] = v56;
      v193 = *(_DWORD *)(v54 + 80);
      v195 = 0;
      v196 = 0;
      v194 = 0;
      sub_10027205C(&v194, *(const void **)(v54 + 88), *(_QWORD *)(v54 + 96), (uint64_t)(*(_QWORD *)(v54 + 96) - *(_QWORD *)(v54 + 88)) >> 2);
      v197 = *(_OWORD *)(v54 + 112);
      v59 = *(_OWORD *)(v54 + 128);
      v60 = *(_OWORD *)(v54 + 144);
      v61 = *(_OWORD *)(v54 + 176);
      v200 = *(_OWORD *)(v54 + 160);
      v201 = v61;
      v198 = v59;
      v199 = v60;
      v62 = *(_OWORD *)(v54 + 192);
      v63 = *(_OWORD *)(v54 + 208);
      v64 = *(_OWORD *)(v54 + 240);
      v204 = *(_OWORD *)(v54 + 224);
      v205 = v64;
      v202 = v62;
      v203 = v63;
      v65 = *(_OWORD *)(v54 + 256);
      v66 = *(_OWORD *)(v54 + 272);
      v67 = *(_OWORD *)(v54 + 288);
      *(_OWORD *)((char *)v208 + 12) = *(_OWORD *)(v54 + 300);
      v207 = v66;
      v208[0] = v67;
      v206 = v65;
      if (*(char *)(v54 + 343) < 0)
      {
        sub_100115CE4(&v209, *(void **)(v54 + 320), *(_QWORD *)(v54 + 328));
      }
      else
      {
        v68 = *(_OWORD *)(v54 + 320);
        v210 = *(_QWORD *)(v54 + 336);
        v209 = v68;
      }
      v69 = *(_OWORD *)(v54 + 344);
      v70 = *(_OWORD *)(v54 + 376);
      v212 = *(_OWORD *)(v54 + 360);
      v213 = v70;
      v211 = v69;
      v71 = *(_OWORD *)(v54 + 392);
      v72 = *(_OWORD *)(v54 + 408);
      v73 = *(_OWORD *)(v54 + 440);
      v216 = *(_OWORD *)(v54 + 424);
      v217 = v73;
      v214 = v71;
      v215 = v72;
      v74 = *(_OWORD *)(v54 + 456);
      v75 = *(_OWORD *)(v54 + 472);
      v76 = *(_OWORD *)(v54 + 488);
      v221 = *(_DWORD *)(v54 + 504);
      v219 = v75;
      v220 = v76;
      v218 = v74;
      v77 = *(_OWORD *)(v54 + 512);
      v78 = *(_OWORD *)(v54 + 528);
      v79 = *(_OWORD *)(v54 + 560);
      v224 = *(_OWORD *)(v54 + 544);
      v225 = v79;
      v222 = v77;
      v223 = v78;
      v80 = *(_OWORD *)(v54 + 576);
      v81 = *(_OWORD *)(v54 + 592);
      v82 = *(_OWORD *)(v54 + 624);
      v228 = *(_OWORD *)(v54 + 608);
      v229 = v82;
      v226 = v80;
      v227 = v81;
      v83 = *(_OWORD *)(v54 + 640);
      v84 = *(_OWORD *)(v54 + 656);
      v85 = *(_OWORD *)(v54 + 672);
      v233 = *(_DWORD *)(v54 + 688);
      v231 = v84;
      v232 = v85;
      v230 = v83;
      v86 = a3[1];
      if (v86 >= a3[2])
      {
        v87 = sub_1005A9E3C(a3, (uint64_t)buf);
      }
      else
      {
        sub_1005A9F60((uint64_t)(a3 + 2), a3[1], (uint64_t)buf);
        v87 = v86 + 696;
        a3[1] = v86 + 696;
      }
      a3[1] = v87;
      if (SHIBYTE(v210) < 0)
        operator delete((void *)v209);
      if (v194)
      {
        v195 = v194;
        operator delete(v194);
      }
      v54 += 696;
    }
    while (v54 != v55);
  }
  v88 = a4[3];
  for (i = a4[4]; v88 != i; v88 += 696)
  {
    *(_OWORD *)buf = *(_OWORD *)v88;
    v90 = *(_OWORD *)(v88 + 16);
    v91 = *(_OWORD *)(v88 + 32);
    v92 = *(_OWORD *)(v88 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v88 + 60);
    *(_OWORD *)&buf[32] = v91;
    *(_OWORD *)&buf[48] = v92;
    *(_OWORD *)&buf[16] = v90;
    v193 = *(_DWORD *)(v88 + 80);
    v195 = 0;
    v196 = 0;
    v194 = 0;
    sub_10027205C(&v194, *(const void **)(v88 + 88), *(_QWORD *)(v88 + 96), (uint64_t)(*(_QWORD *)(v88 + 96) - *(_QWORD *)(v88 + 88)) >> 2);
    v197 = *(_OWORD *)(v88 + 112);
    v93 = *(_OWORD *)(v88 + 128);
    v94 = *(_OWORD *)(v88 + 144);
    v95 = *(_OWORD *)(v88 + 176);
    v200 = *(_OWORD *)(v88 + 160);
    v201 = v95;
    v198 = v93;
    v199 = v94;
    v96 = *(_OWORD *)(v88 + 192);
    v97 = *(_OWORD *)(v88 + 208);
    v98 = *(_OWORD *)(v88 + 240);
    v204 = *(_OWORD *)(v88 + 224);
    v205 = v98;
    v202 = v96;
    v203 = v97;
    v99 = *(_OWORD *)(v88 + 256);
    v100 = *(_OWORD *)(v88 + 272);
    v101 = *(_OWORD *)(v88 + 288);
    *(_OWORD *)((char *)v208 + 12) = *(_OWORD *)(v88 + 300);
    v207 = v100;
    v208[0] = v101;
    v206 = v99;
    if (*(char *)(v88 + 343) < 0)
    {
      sub_100115CE4(&v209, *(void **)(v88 + 320), *(_QWORD *)(v88 + 328));
    }
    else
    {
      v102 = *(_OWORD *)(v88 + 320);
      v210 = *(_QWORD *)(v88 + 336);
      v209 = v102;
    }
    v103 = *(_OWORD *)(v88 + 344);
    v104 = *(_OWORD *)(v88 + 376);
    v212 = *(_OWORD *)(v88 + 360);
    v213 = v104;
    v211 = v103;
    v105 = *(_OWORD *)(v88 + 392);
    v106 = *(_OWORD *)(v88 + 408);
    v107 = *(_OWORD *)(v88 + 440);
    v216 = *(_OWORD *)(v88 + 424);
    v217 = v107;
    v214 = v105;
    v215 = v106;
    v108 = *(_OWORD *)(v88 + 456);
    v109 = *(_OWORD *)(v88 + 472);
    v110 = *(_OWORD *)(v88 + 488);
    v221 = *(_DWORD *)(v88 + 504);
    v219 = v109;
    v220 = v110;
    v218 = v108;
    v111 = *(_OWORD *)(v88 + 512);
    v112 = *(_OWORD *)(v88 + 528);
    v113 = *(_OWORD *)(v88 + 560);
    v224 = *(_OWORD *)(v88 + 544);
    v225 = v113;
    v222 = v111;
    v223 = v112;
    v114 = *(_OWORD *)(v88 + 576);
    v115 = *(_OWORD *)(v88 + 592);
    v116 = *(_OWORD *)(v88 + 624);
    v228 = *(_OWORD *)(v88 + 608);
    v229 = v116;
    v226 = v114;
    v227 = v115;
    v117 = *(_OWORD *)(v88 + 640);
    v118 = *(_OWORD *)(v88 + 656);
    v119 = *(_OWORD *)(v88 + 672);
    v233 = *(_DWORD *)(v88 + 688);
    v231 = v118;
    v232 = v119;
    v230 = v117;
    v120 = a3[1];
    if (v120 >= a3[2])
    {
      v121 = sub_1005A9E3C(a3, (uint64_t)buf);
    }
    else
    {
      sub_1005A9F60((uint64_t)(a3 + 2), a3[1], (uint64_t)buf);
      v121 = v120 + 696;
      a3[1] = v120 + 696;
    }
    a3[1] = v121;
    if (SHIBYTE(v210) < 0)
      operator delete((void *)v209);
    if (v194)
    {
      v195 = v194;
      operator delete(v194);
    }
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v122 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v123 = 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3);
    v124 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
    v125 = 0x66FD0EB66FD0EB67 * ((a4[1] - *a4) >> 3);
    v126 = 0x66FD0EB66FD0EB67 * ((a4[4] - a4[3]) >> 3);
    *(_DWORD *)buf = 134350592;
    *(_QWORD *)&buf[4] = v123;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v124;
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = HIDWORD(v142);
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v142;
    *(_WORD *)&buf[40] = 2050;
    *(_QWORD *)&buf[42] = v125;
    *(_WORD *)&buf[50] = 2050;
    *(_QWORD *)&buf[52] = v126;
    _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "CellFlow, selectsize, %{public}lu, thisslot, %{public}d, %{public}lu, valid, %{public}d, serving, %{public}d, slotcells, %{public}lu, %{public}lu", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v130 = 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3);
    v131 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
    v132 = 0x66FD0EB66FD0EB67 * ((a4[1] - *a4) >> 3);
    v133 = 0x66FD0EB66FD0EB67 * ((a4[4] - a4[3]) >> 3);
    *(_DWORD *)v150 = 134350592;
    *(_QWORD *)&v150[4] = v130;
    *(_WORD *)&v150[12] = 1026;
    *(_DWORD *)&v150[14] = a2;
    *(_WORD *)&v150[18] = 2050;
    *(_QWORD *)&v150[20] = v131;
    *(_WORD *)&v150[28] = 1026;
    *(_DWORD *)&v150[30] = HIDWORD(v142);
    *(_WORD *)&v150[34] = 1026;
    *(_DWORD *)&v150[36] = v142;
    *(_WORD *)&v150[40] = 2050;
    *(_QWORD *)&v150[42] = v132;
    *(_WORD *)&v150[50] = 2050;
    *(_QWORD *)&v150[52] = v133;
    LODWORD(v136) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellFlow, selectsize, %{public}lu, thisslot, %{public}d, %{public}lu, valid, %{public}d, serving, %{public}d, slotcells, %{public}lu, %{public}lu", v150, v136);
    v135 = (char *)v134;
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::selectCurrentCells(CLCellVector, int, CLCellVector &, CLCellVector (&)[2])", "%s\n", v134);
    if (v135 != buf)
      free(v135);
  }
}

void sub_1001E0888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1005A1100((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1001E0910(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t *i;
  uint64_t v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  _BYTE v30[8];
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE v37[12];
  __int16 v38;
  int v39;
  _BYTE buf[18];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v36 = a2;
  v34 = 0;
  v33 = 0;
  v35 = 0;
  v30[0] = 0;
  v32 = 0;
  v5 = sub_1001E24AC(a2, 1);
  *(_QWORD *)v37 = &v36;
  v6 = &qword_1022A0000;
  if (!*((_QWORD *)sub_1001C1FBC(a3, &v36, (uint64_t)&unk_101B9EB60, (_DWORD **)v37) + 3))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v13 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v36;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,received nil CellInfo from CT for inst %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    *(_DWORD *)v37 = 67109120;
    *(_DWORD *)&v37[4] = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,handleCellInfoChange,received nil CellInfo from CT for inst %d", v37);
    v15 = (char *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v14);
LABEL_62:
    if (v15 != buf)
      free(v15);
    goto LABEL_26;
  }
  sub_1001C1F5C(v36, a3, &v33);
  sub_1001DF2C0(&v33, buf);
  sub_101892924((uint64_t)v30, (uint64_t)buf);
  sub_10087B6D0((uint64_t)buf);
  if (!v32)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v16 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,serving cell missing", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_26;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    *(_WORD *)v37 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,handleCellInfoChange,serving cell missing", v37, 2);
    v15 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v28);
    goto LABEL_62;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * ((v34 - v33) >> 3);
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v36;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLConfig,handleCellInfoChange,cellcount,%lu,inst,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    *(_DWORD *)v37 = 134218240;
    *(_QWORD *)&v37[4] = 0x66FD0EB66FD0EB67 * ((v34 - v33) >> 3);
    v38 = 1024;
    v39 = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,handleCellInfoChange,cellcount,%lu,inst,%d", v37, 18);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  if (v31 < 3)
    goto LABEL_11;
  if (v31 == 9)
  {
    v8 = *(unsigned int *)sub_100706590((uint64_t)v30);
    v9 = sub_100706590((uint64_t)v30);
    goto LABEL_12;
  }
  if (v31 == 7)
  {
LABEL_11:
    v8 = *(unsigned int *)sub_1007057DC((uint64_t)v30);
    v9 = sub_1007057DC((uint64_t)v30);
LABEL_12:
    v10 = *(unsigned int *)(v9 + 4);
    v11 = 0xFFFFFFFFLL;
    v12 = 0xFFFFFFFFLL;
    goto LABEL_28;
  }
  if (v31 - 3 <= 2)
  {
    v12 = *(unsigned int *)(sub_100704A28((uint64_t)v30) + 32);
    v11 = *(unsigned int *)(sub_100704A28((uint64_t)v30) + 36);
    goto LABEL_27;
  }
  if (v31 == 10)
  {
    v8 = *(unsigned int *)sub_1007073B4((uint64_t)v30);
    v9 = sub_1007073B4((uint64_t)v30);
    goto LABEL_12;
  }
  if (v31 == 6)
  {
    v8 = *(unsigned int *)sub_1001E3CA4((uint64_t)v30);
    v9 = sub_1001E3CA4((uint64_t)v30);
    goto LABEL_12;
  }
LABEL_26:
  v11 = 0xFFFFFFFFLL;
  v12 = 0xFFFFFFFFLL;
LABEL_27:
  v10 = 0xFFFFFFFFLL;
  v8 = 0xFFFFFFFFLL;
LABEL_28:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v17 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290307;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v41 = 1026;
    v42 = v36;
    v43 = 1025;
    v44 = v8;
    v45 = 1025;
    v46 = v10;
    v47 = 1025;
    v48 = v12;
    v49 = 1025;
    v50 = v11;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleCellInfoChange,operator mcc and mnc updated\", \"inst\":%{public}d, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d}", buf, 0x30u);
  }
  for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
  {
    v19 = i[3];
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 56))(v19, v5, v8, v10, v12, v11);
    }
    else
    {
      if (v6[84] != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v20 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        v21 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleCellInfoChange,pointer for component was null", buf, 0xCu);
      }
      v6 = &qword_1022A0000;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v22 = qword_1022A02A8;
        v23 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
        *(_DWORD *)v37 = 136446210;
        *(_QWORD *)&v37[4] = v23;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 16, "#CLConfig,%{public}s,handleCellInfoChange,pointer for component was null", v37, v29);
        v25 = (char *)v24;
        sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleCellInfoChange(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
        v6 = &qword_1022A0000;
      }
    }
  }
  sub_10087B6D0((uint64_t)v30);
  *(_QWORD *)buf = &v33;
  sub_10087B4F8((void ***)buf);
}

void sub_1001E1198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10087B6D0((uint64_t)va);
  STACK[0x320] = (unint64_t)&STACK[0x2E0];
  sub_10087B4F8((void ***)&STACK[0x320]);
  _Unwind_Resume(a1);
}

char *sub_1001E11EC(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  char *result;
  int v11;
  int *v12;

  v11 = a2;
  v12 = &v11;
  result = sub_1001E1254(a1 + 240, &v11, (uint64_t)&unk_101B9EB60, &v12);
  *((_DWORD *)result + 12) = a3;
  *((_DWORD *)result + 13) = a4;
  *((_DWORD *)result + 14) = a5;
  *((_DWORD *)result + 15) = a6;
  return result;
}

char *sub_1001E1254(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x48uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_QWORD *)v11 + 6) = -1;
  *((_QWORD *)v11 + 7) = -1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001E1498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_10055A1C0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001E14B4(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  int v40[4];
  __int128 v41;
  __int128 v42;
  int v43;
  uint8_t buf[1640];

  if (!*a4)
    return;
  v7 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v7, CFSTR("kBundleChangeNotification")))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v8 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kBundleChangeNotification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v41) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,received CLTelephonyService_Type::kBundleChangeNotification", &v41, 2);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    sub_100D68674(a1, *a4);
    return;
  }
  v9 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v9, CFSTR("kDefaultBundleChangeNotification")))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kDefaultBundleChangeNotification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v41) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,received CLTelephonyService_Type::kDefaultBundleChangeNotification", &v41, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    sub_100D68884(a1, *a4);
    return;
  }
  v11 = (const void *)sub_1001DEC98(a3);
  if (!CFEqual(v11, CFSTR("kCellInfoNotification")))
  {
    v13 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v13, CFSTR("kSubscriberMccAndMncNotification")))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v14 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kSubscriberMccAndMncNotification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        LOWORD(v41) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,received CLTelephonyService_Type::kSubscriberMccAndMncNotification", &v41, 2);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      v41 = 0u;
      v42 = 0u;
      v43 = 1065353216;
      if (sub_1001E56B4((void *)*a4, (uint64_t)&v41))
      {
        v40[0] = 0;
        *(_QWORD *)buf = v40;
        v15 = sub_1001E59F8((uint64_t)&v41, v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100D68A94(a1, 0, *(_QWORD *)((char *)v15 + 20), *((_DWORD *)v15 + 7));
        if (*(_BYTE *)(a1 + 296))
        {
          v40[0] = 1;
          *(_QWORD *)buf = v40;
          v16 = sub_1001E59F8((uint64_t)&v41, v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          sub_100D68A94(a1, 1, *(_QWORD *)((char *)v16 + 20), *((_DWORD *)v16 + 7));
        }
LABEL_62:
        sub_100067AC4((uint64_t)&v41);
        return;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v22 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#CLConfig,kSubscriberMccAndMncNotification,error fetching MCC and MNC", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_62;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v40[0]) = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,kSubscriberMccAndMncNotification,error fetching MCC and MNC", v40, v39);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
    }
    else
    {
      v18 = (const void *)sub_1001DEC98(a3);
      if (!CFEqual(v18, CFSTR("kServingMccAndMncNotification")))
        return;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v19 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kServingMccAndMncNotification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        LOWORD(v41) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,received CLTelephonyService_Type::kServingMccAndMncNotification", &v41, 2);
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      v41 = 0u;
      v42 = 0u;
      v43 = 1065353216;
      if (sub_1001E56B4((void *)*a4, (uint64_t)&v41))
      {
        v40[0] = 0;
        *(_QWORD *)buf = v40;
        v20 = sub_1001E59F8((uint64_t)&v41, v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_1001E212C(a1, 0, *(_QWORD *)((char *)v20 + 20), *((_DWORD *)v20 + 7));
        if (*(_BYTE *)(a1 + 296))
        {
          v40[0] = 1;
          *(_QWORD *)buf = v40;
          v21 = sub_1001E59F8((uint64_t)&v41, v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          sub_1001E212C(a1, 1, *(_QWORD *)((char *)v21 + 20), *((_DWORD *)v21 + 7));
        }
        goto LABEL_62;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      v25 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#CLConfig,kServingMccAndMncNotification,error fetching MCC and MNC", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_62;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v40[0]) = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,kServingMccAndMncNotification,error fetching MCC and MNC", v40, v39);
      v24 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v38);
    }
    if (v24 != buf)
      free(v24);
    goto LABEL_62;
  }
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102182AB0);
  v12 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#CLConfig,received CLTelephonyService_Type::kCellInfoNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    LOWORD(v41) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#CLConfig,received CLTelephonyService_Type::kCellInfoNotification", &v41, 2);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v41 = 0u;
  v42 = 0u;
  v43 = 1065353216;
  if (sub_1001DBC88((void *)*a4, (uint64_t)&v41))
  {
    sub_1001E0910(a1, 0, (uint64_t)&v41);
    if (sub_1001DC538())
      sub_1001E0910(a1, 1, (uint64_t)&v41);
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v17 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLConfig,handleCellInfoChange,error fetching cell info", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102182AB0);
      LOWORD(v40[0]) = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#CLConfig,handleCellInfoChange,error fetching cell info", v40, v39);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  sub_1001DBC50((uint64_t)&v41);
}

void sub_1001E20E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001E212C(uint64_t a1, int a2, unint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *i;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  id v23;
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v8 = HIDWORD(a3);
  v9 = sub_1001E24AC(a2, 1);
  if ((_DWORD)a3 == -1 && (_DWORD)v8 == -1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v10 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 1026;
      v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleServingMccMncChange,operator mcc and mnc are invalid\", \"inst\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102182AB0);
    v11 = a4 & 1;
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68290050;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 1026;
      v27 = a2;
      v28 = 1026;
      v29 = a3;
      v30 = 1026;
      v31 = v8;
      v32 = 1026;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLConfig,handleServingMccMncChange,operator mcc and mnc updated\", \"inst\":%{public}d, \"MCC\":%{public}d, \"MNC\":%{public}d, \"is3DigitMnc\":%{public}hhd}", buf, 0x2Au);
    }
    for (i = *(uint64_t **)(a1 + 272); i; i = (uint64_t *)*i)
    {
      v14 = i[3];
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v14 + 64))(v14, v9, a3, v8, v11);
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102182AB0);
        v15 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          v16 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v25 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,handleServingMccMncChange,pointer for component was null", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102182AB0);
          v17 = qword_1022A02A8;
          v18 = -[__CFString UTF8String](sub_100D67F9C(*((_DWORD *)i + 4)), "UTF8String");
          v22 = 136446210;
          v23 = v18;
          LODWORD(v21) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 16, "#CLConfig,%{public}s,handleServingMccMncChange,pointer for component was null", &v22, v21);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 0, "void CLConfigAsset::handleServingMccMncChange(SimInstance, CLCTMccAndMnc)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
      }
    }
  }
}

uint64_t sub_1001E24AC(int a1, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  if (a2 == 1)
    v2 = 3;
  else
    v2 = 2;
  if (a2 == 255)
    v2 = 255;
  v3 = a2 == 1;
  if (a2 == 255)
    v3 = 255;
  if (a1)
    v4 = 255;
  else
    v4 = v3;
  if (a1 == 1)
    return v2;
  else
    return v4;
}

uint64_t sub_1001E24E8(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  int v37;
  int v38;
  NSObject *v39;
  int v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  NSObject *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  const char *v68;
  const char *v69;
  uint8_t *v70;
  const char *v71;
  uint8_t *v72;
  const char *v73;
  uint8_t *v74;
  const char *v75;
  uint8_t *v76;
  const char *v77;
  uint8_t *v78;
  uint64_t v79;
  BOOL v80[8];
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  int v87[2];
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  uint8_t buf[8];
  std::__shared_weak_count *v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;

  sub_1001E4804(buf);
  v80[0] = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v80);
  if (v80[0])
    v3 = v2;
  else
    v3 = 0;
  v4 = v103;
  if (!v103)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v103->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v3)
      goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,processServingCell", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    *(_WORD *)v80 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,processServingCell", v80, 2);
    v59 = (uint8_t *)v58;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v58);
    if (v59 != buf)
      free(v59);
  }
LABEL_14:
  v80[0] = 0;
  v86 = 0;
  v87[0] = 0;
  *(_QWORD *)buf = v87;
  if (*((_BYTE *)sub_1001E3660(a1 + 2616, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 720))
  {
    v87[0] = 0;
    *(_QWORD *)buf = v87;
    v8 = sub_1001E3660(a1 + 2616, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1017530C0((uint64_t)v80, (uint64_t)(v8 + 3));
  }
  else
  {
    v87[0] = 1;
    *(_QWORD *)buf = v87;
    if (!*((_BYTE *)sub_1001E3660(a1 + 2616, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 720))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Couldn't get current serving cell", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return sub_10087B6D0((uint64_t)v80);
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      LOWORD(v87[0]) = 0;
      LODWORD(v79) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Couldn't get current serving cell", v87, v79);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v17);
LABEL_139:
      if (v18 != buf)
        free(v18);
      return sub_10087B6D0((uint64_t)v80);
    }
    v87[0] = 1;
    *(_QWORD *)buf = v87;
    v9 = sub_1001E3660(a1 + 2616, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    sub_1017530C0((uint64_t)v80, (uint64_t)(v9 + 3));
  }
  if (!v86)
    return sub_10087B6D0((uint64_t)v80);
  if (v81 < 3)
  {
LABEL_22:
    sub_1001E4804(buf);
    LOBYTE(v87[0]) = 0;
    v10 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
    if (LOBYTE(v87[0]))
      v11 = v10;
    else
      v11 = 0;
    v12 = v103;
    if (!v103)
      goto LABEL_29;
    v13 = (unint64_t *)&v103->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v11)
        goto LABEL_30;
    }
    else
    {
LABEL_29:
      if (v11)
      {
LABEL_30:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification GSM", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v87[0]) = 0;
          LODWORD(v79) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification GSM", v87, v79);
          v70 = (uint8_t *)v69;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v69);
          if (v70 != buf)
            free(v70);
        }
      }
    }
    *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1007057DC((uint64_t)v80);
    *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1007057DC((uint64_t)v80) + 4);
    sub_1001E4FEC((id *)a1);
    goto LABEL_107;
  }
  if (v81 == 9)
  {
    sub_1001E4804(buf);
    LOBYTE(v87[0]) = 0;
    v19 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
    if (LOBYTE(v87[0]))
      v20 = v19;
    else
      v20 = 0;
    v21 = v103;
    if (v103)
    {
      v22 = (unint64_t *)&v103->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v20)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification SCDMA", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        LOWORD(v87[0]) = 0;
        LODWORD(v79) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification SCDMA", v87, v79);
        v72 = (uint8_t *)v71;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
    }
    *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_100706590((uint64_t)v80);
    *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_100706590((uint64_t)v80) + 4);
  }
  else
  {
    if (v81 == 7)
      goto LABEL_22;
    if (v81 - 3 <= 2)
    {
      sub_1001E4804(buf);
      LOBYTE(v87[0]) = 0;
      v25 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
      if (LOBYTE(v87[0]))
        v26 = v25;
      else
        v26 = 0;
      v27 = v103;
      if (v103)
      {
        v28 = (unint64_t *)&v103->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v26)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification CDMA", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v87[0]) = 0;
          LODWORD(v79) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification CDMA", v87, v79);
          v74 = (uint8_t *)v73;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v73);
          if (v74 != buf)
            free(v74);
        }
      }
      *(_DWORD *)(a1 + 2508) = *(_DWORD *)(sub_100704A28((uint64_t)v80) + 32);
      *(_DWORD *)(a1 + 2512) = *(_DWORD *)(sub_100704A28((uint64_t)v80) + 36);
      *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_100704A28((uint64_t)v80) + 48);
LABEL_106:
      *(_DWORD *)(a1 + 2356) = *(_DWORD *)(a1 + 2352);
      goto LABEL_107;
    }
    if (v81 == 10)
    {
      sub_1001E4804(buf);
      LOBYTE(v87[0]) = 0;
      v37 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
      if (LOBYTE(v87[0]))
        v38 = v37;
      else
        v38 = 0;
      sub_100261F44((uint64_t)buf);
      if (v38 == 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v39 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification 5G", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v87[0]) = 0;
          LODWORD(v79) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification 5G", v87, v79);
          v78 = (uint8_t *)v77;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v77);
          if (v78 != buf)
            free(v78);
        }
      }
      *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1007073B4((uint64_t)v80);
      *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1007073B4((uint64_t)v80) + 4);
      *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_1007073B4((uint64_t)v80) + 32);
      sub_1001E4FEC((id *)a1);
      goto LABEL_106;
    }
    if (v81 == 6)
    {
      sub_1001E4804(buf);
      LOBYTE(v87[0]) = 0;
      v31 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
      if (LOBYTE(v87[0]))
        v32 = v31;
      else
        v32 = 0;
      v33 = v103;
      if (v103)
      {
        v34 = (unint64_t *)&v103->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v32)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v36 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,kCellInfoNotification LTE", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v87[0]) = 0;
          LODWORD(v79) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,kCellInfoNotification LTE", v87, v79);
          v76 = (uint8_t *)v75;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v75);
          if (v76 != buf)
            free(v76);
        }
      }
      *(_DWORD *)(a1 + 2500) = *(_DWORD *)sub_1001E3CA4((uint64_t)v80);
      *(_DWORD *)(a1 + 2504) = *(_DWORD *)(sub_1001E3CA4((uint64_t)v80) + 4);
      *(_DWORD *)(a1 + 2516) = *(_DWORD *)(sub_1001E3CA4((uint64_t)v80) + 24);
      sub_1001E4FEC((id *)a1);
      goto LABEL_106;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v55 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,Unhandled serving cell", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      LOWORD(v87[0]) = 0;
      LODWORD(v79) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,Unhandled serving cell", v87, v79);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
  }
LABEL_107:
  *(_DWORD *)(a1 + 2520) = v81;
  sub_1001E4804(buf);
  LOBYTE(v87[0]) = 0;
  v40 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v87);
  if (LOBYTE(v87[0]))
    v41 = v40;
  else
    v41 = 0;
  v42 = v103;
  if (!v103)
    goto LABEL_114;
  v43 = (unint64_t *)&v103->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (!v41)
      return sub_10087B6D0((uint64_t)v80);
  }
  else
  {
LABEL_114:
    if (!v41)
      return sub_10087B6D0((uint64_t)v80);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v45 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(_DWORD *)(a1 + 2500);
    v47 = *(_DWORD *)(a1 + 2504);
    v48 = *(_DWORD *)(a1 + 2508);
    v49 = *(_DWORD *)(a1 + 2512);
    v50 = *(_DWORD *)(a1 + 2516);
    v51 = *(_DWORD *)(a1 + 2520);
    v52 = *(_DWORD *)(a1 + 2536);
    v53 = *(_DWORD *)(a1 + 2532);
    *(_DWORD *)buf = 67110912;
    *(_DWORD *)&buf[4] = v46;
    LOWORD(v103) = 1024;
    *(_DWORD *)((char *)&v103 + 2) = v47;
    HIWORD(v103) = 1024;
    v104 = v48;
    v105 = 1024;
    v106 = v49;
    v107 = 1024;
    v108 = v50;
    v109 = 1024;
    v110 = v51;
    v111 = 1024;
    v112 = v52;
    v113 = 1024;
    v114 = v53;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,processServingCell,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,RAT,%d,RSRP,%d,SNR,%d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v60 = *(_DWORD *)(a1 + 2500);
    v61 = *(_DWORD *)(a1 + 2504);
    v62 = *(_DWORD *)(a1 + 2508);
    v63 = *(_DWORD *)(a1 + 2512);
    v64 = *(_DWORD *)(a1 + 2516);
    v65 = *(_DWORD *)(a1 + 2520);
    v66 = *(_DWORD *)(a1 + 2536);
    v67 = *(_DWORD *)(a1 + 2532);
    v87[0] = 67110912;
    v87[1] = v60;
    v88 = 1024;
    v89 = v61;
    v90 = 1024;
    v91 = v62;
    v92 = 1024;
    v93 = v63;
    v94 = 1024;
    v95 = v64;
    v96 = 1024;
    v97 = v65;
    v98 = 1024;
    v99 = v66;
    v100 = 1024;
    v101 = v67;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,processServingCell,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,RAT,%d,RSRP,%d,SNR,%d", v87, 50, *(_DWORD *)v80, v81, v82, v83, v84, v85);
    v18 = (uint8_t *)v68;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::processServingCell()", "%s\n", v68);
    goto LABEL_139;
  }
  return sub_10087B6D0((uint64_t)v80);
}

void sub_1001E35C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10087B6D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001E3660(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x2D8uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_BYTE *)v14 + 24) = 0;
  *((_BYTE *)v14 + 720) = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_101753268((uint64_t)v24, 0);
  return i;
}

void sub_1001E38A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_101753268((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001E38C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  NSObject *v14;
  int v15;
  void **v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  void *__p[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void **v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v25 = a2;
  if (!*(_BYTE *)(a3 + 696))
    return;
  v4 = a1 + 664;
  v5 = sub_1001F8DEC((_QWORD *)(a1 + 664), &v25);
  if (v5)
  {
    v23 = *(_OWORD *)(v5 + 3);
    v24 = v5[5];
    v6 = *(uint64_t *)((char *)v5 + 68);
    v7 = *(_DWORD *)(a3 + 8);
    if (v7 < 3)
      goto LABEL_6;
    if (v7 == 9)
    {
      v8 = *(_DWORD *)sub_100706590(a3);
      v9 = sub_100706590(a3);
      goto LABEL_7;
    }
    if (v7 == 7)
    {
LABEL_6:
      v8 = *(_DWORD *)sub_1007057DC(a3);
      v9 = sub_1007057DC(a3);
    }
    else
    {
      if (v7 - 3 <= 2)
      {
        v12 = *(_DWORD *)(sub_100704A28(a3) + 32);
        v11 = *(_DWORD *)(sub_100704A28(a3) + 36);
        v10 = -1;
        v8 = -1;
        goto LABEL_8;
      }
      if (v7 == 10)
      {
        v8 = *(_DWORD *)sub_1007073B4(a3);
        v9 = sub_1007073B4(a3);
      }
      else
      {
        if (v7 != 6)
        {
          v8 = *((_DWORD *)v5 + 12);
          v10 = *((_DWORD *)v5 + 13);
          v12 = *((_DWORD *)v5 + 14);
          v11 = *((_DWORD *)v5 + 15);
          goto LABEL_8;
        }
        v8 = *(_DWORD *)sub_1001E3CA4(a3);
        v9 = sub_1001E3CA4(a3);
      }
    }
LABEL_7:
    v10 = *(_DWORD *)(v9 + 4);
    v11 = -1;
    v12 = -1;
LABEL_8:
    v13 = *(_DWORD *)(a3 + 8);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    v14 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v25;
      sub_1001E3CC8(v13, __p);
      if (v22 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 68290563;
      *(_DWORD *)&buf[4] = 0;
      v27 = 2082;
      v28 = "";
      v29 = 1026;
      v30 = v15;
      v31 = 2082;
      v32 = v16;
      v33 = 1025;
      v34 = v8;
      v35 = 1025;
      v36 = v10;
      v37 = 1025;
      v38 = v12;
      v39 = 1025;
      v40 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,handleCellInfoNotification\", \"inst\":%{public}d, \"RAT\":%{public, location:escape_only}s, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d}", buf, 0x3Au);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    *(_QWORD *)buf = &v25;
    v17 = sub_1001E3CF4(v4, &v25, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    *(_OWORD *)(v17 + 24) = v23;
    *((_QWORD *)v17 + 5) = v24;
    *((_DWORD *)v17 + 12) = v8;
    *((_DWORD *)v17 + 13) = v10;
    *((_DWORD *)v17 + 14) = v12;
    *((_DWORD *)v17 + 15) = v11;
    *((_DWORD *)v17 + 16) = v13;
    *(_QWORD *)(v17 + 68) = v6;
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
  v18 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#awd,#Warning,handleCellInfoNotification,fTelephonyInfoMap,null", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021CDEA8);
    LOWORD(v23) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#awd,#Warning,handleCellInfoNotification,fTelephonyInfoMap,null", &v23, 2);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyAWD::handleCellInfoNotification(SimInstance, const std::optional<CLCell> &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

uint64_t sub_1001E3CA4(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 8) == 6)
    return a1 + 512;
  v2 = sub_1019050AC();
  return sub_1001E3CC8(v2);
}

_QWORD *sub_1001E3CC8@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xC)
    v2 = "UnhandledRAT";
  else
    v2 = (&off_1021CFB88)[a1];
  return sub_1015A2E04(a2, v2);
}

char *sub_1001E3CF4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *((_QWORD *)v11 + 9) = 0;
  *((_DWORD *)v11 + 6) = 255;
  *((_QWORD *)v11 + 6) = -1;
  *((_QWORD *)v11 + 7) = -1;
  *((_QWORD *)v11 + 8) = -4294967285;
  *((_DWORD *)v11 + 18) = -1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001E3F34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E3F48(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7)
{
  uint64_t v10;
  CLLocationSubscriptionAdapter *v11;
  _BYTE *v12;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  NSObject *v36;
  const char *v37;
  char v38;
  char v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  int v44;
  unsigned int v45;
  int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  int v54;
  signed int v56;
  unsigned int v57;
  uint8_t buf[8];
  _BYTE v59[10];
  __int16 v60;
  int v61;

  v10 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v10 = off_1021A36C0;
  *(_DWORD *)(v10 + 44) = a7;
  v11 = objc_alloc_init(CLLocationSubscriptionAdapter);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 48) = v11;
  *(_WORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 58) = 0;
  *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x7FF0000000000000;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 89) = a6;
  *(_WORD *)(a1 + 90) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  v12 = (_BYTE *)(a1 + 192);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 193) = 1;
  *(_QWORD *)(a1 + 196) = -1;
  *(_QWORD *)(a1 + 208) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_WORD *)(a1 + 240) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 248) = _Q1;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 272) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0x7FF0000000000000;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 349) = 0;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 360) = 1000;
  *(_BYTE *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 400) = _Q1;
  *(_OWORD *)(a1 + 416) = _Q1;
  *(_BYTE *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 500) = 0;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = off_102141E98;
  v18 = operator new(0x20uLL);
  v18[2] = 0;
  *v18 = off_102141ED0;
  v18[1] = 0;
  *((_DWORD *)v18 + 6) = 31337;
  *(_QWORD *)(a1 + 528) = v18 + 3;
  *(_QWORD *)(a1 + 536) = v18;
  *(_QWORD *)(a1 + 552) = off_102141E98;
  v19 = operator new(0x20uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = off_102141ED0;
  *((_DWORD *)v19 + 6) = 31337;
  *(_QWORD *)(a1 + 560) = v19 + 3;
  *(_QWORD *)(a1 + 568) = v19;
  *(_QWORD *)(a1 + 576) = 0;
  sub_1001E4804(buf);
  v20 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)off_1022FDAD8, (void *)(a1 + 544));
  v21 = v20;
  v22 = *(std::__shared_weak_count **)v59;
  if (*(_QWORD *)v59)
  {
    v23 = (unint64_t *)(*(_QWORD *)v59 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v21 & 1) != 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((v20 & 1) == 0)
LABEL_6:
    *(_QWORD *)(a1 + 544) = 0x408C200000000000;
LABEL_7:
  sub_1001E4804(buf);
  v25 = sub_1001E4874(*(uint64_t *)buf, "ForceMapMatching", (BOOL *)(a1 + 194));
  v26 = v25;
  v27 = *(std::__shared_weak_count **)v59;
  if (*(_QWORD *)v59)
  {
    v28 = (unint64_t *)(*(_QWORD *)v59 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v26 & 1) != 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if ((v25 & 1) == 0)
LABEL_12:
    *(_BYTE *)(a1 + 194) = 0;
LABEL_13:
  v57 = 0;
  sub_1001E4804(buf);
  v30 = sub_1001E4B84(*(uint64_t *)buf, "AutoPauseOverride", &v57);
  v31 = v30;
  v32 = *(std::__shared_weak_count **)v59;
  if (!*(_QWORD *)v59)
    goto LABEL_17;
  v33 = (unint64_t *)(*(_QWORD *)v59 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v31)
      goto LABEL_25;
  }
  else
  {
LABEL_17:
    if (!v30)
      goto LABEL_25;
  }
  v35 = v57;
  if (v57 <= 3)
  {
    *(_DWORD *)(a1 + 188) = v57;
    goto LABEL_26;
  }
LABEL_25:
  v35 = *(_DWORD *)(a1 + 188);
LABEL_26:
  switch(v35)
  {
    case 0u:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v36 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v59 = 2082;
        *(_QWORD *)&v59[2] = "";
        v37 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to None\"}";
        goto LABEL_43;
      }
      break;
    case 1u:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v36 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v59 = 2082;
        *(_QWORD *)&v59[2] = "";
        v37 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to Off for all clients\"}";
        goto LABEL_43;
      }
      break;
    case 2u:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v36 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v59 = 2082;
        *(_QWORD *)&v59[2] = "";
        v37 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to On for all clients\"}";
        goto LABEL_43;
      }
      break;
    case 3u:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v36 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v59 = 2082;
        *(_QWORD *)&v59[2] = "";
        v37 = "{\"msg%{public}.0s\":\"PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0\"}";
LABEL_43:
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, v37, buf, 0x12u);
      }
      break;
    default:
      break;
  }
  sub_1001E4804(buf);
  v38 = sub_1001E4874(*(uint64_t *)buf, "AutoPauseLogUI", (BOOL *)(a1 + 192));
  v39 = v38;
  v40 = *(std::__shared_weak_count **)v59;
  if (!*(_QWORD *)v59)
    goto LABEL_48;
  v41 = (unint64_t *)(*(_QWORD *)v59 + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (v42)
  {
LABEL_48:
    if ((v38 & 1) != 0)
      goto LABEL_49;
LABEL_55:
    *v12 = 0;
    goto LABEL_56;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if ((v39 & 1) == 0)
    goto LABEL_55;
LABEL_49:
  if (*v12)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v43 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v59 = 2082;
      *(_QWORD *)&v59[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: AutoPause log UI Enabled\"}", buf, 0x12u);
    }
  }
LABEL_56:
  v56 = 0;
  sub_1001E4804(buf);
  v44 = sub_1001E4B84(*(uint64_t *)buf, "AutoPauseActivityType", &v56);
  v45 = v56;
  if (v56 >= 0)
    v46 = v44;
  else
    v46 = 0;
  if (v46 == 1)
  {
    v47 = *(std::__shared_weak_count **)v59;
    if (*(_QWORD *)v59)
    {
      v48 = (unint64_t *)(*(_QWORD *)v59 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v45 <= 3)
      sub_101163BE0(a1, v56);
  }
  else
  {
    v50 = *(std::__shared_weak_count **)v59;
    if (*(_QWORD *)v59)
    {
      v51 = (unint64_t *)(*(_QWORD *)v59 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v53 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v54 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v59 = 2082;
    *(_QWORD *)&v59[2] = "";
    v60 = 1026;
    v61 = v54;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: activity type defaulted\", \"activity\":%{public}d}", buf, 0x18u);
  }
  return a1;
}

void sub_1001E46E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100090A0C((_QWORD *)(v1 + 552));
  sub_100090A0C((_QWORD *)(v2 + 416));
  sub_1011644B8((id **)(v2 + 408), 0);
  if (*(char *)(v1 + 351) < 0)
    operator delete(*(void **)(v2 + 224));
  sub_100261F44(v2 + 184);
  v5 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 144) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v3;
  *v3 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_1007F9198((uint64_t *)v2, 0);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_1001E47EC()
{
  JUMPOUT(0x1001E4724);
}

void sub_1001E47F4()
{
  JUMPOUT(0x1001E472CLL);
}

void sub_1001E47FC()
{
  JUMPOUT(0x1001E47DCLL);
}

void sub_1001E4804(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (qword_1023108B8 != -1)
    dispatch_once_f(&qword_1023108B8, 0, (dispatch_function_t)sub_100568B64);
  v2 = *(_QWORD *)(qword_1023108C0 + 144);
  *a1 = *(_QWORD *)(qword_1023108C0 + 136);
  a1[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_1001E4874(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1001E48E4(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1001E48E4(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_1001E4B1C(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_1001E4B1C(const void *a1, BOOL *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID() && v4 != CFNumberGetTypeID())
    return 0;
  *a2 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  return 1;
}

uint64_t sub_1001E4B84(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1001C1194(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1001E4BF4()
{
  uint64_t result;
  int v1;
  BOOL v2;
  unsigned int v3;
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  uint8_t buf[4];
  int v12;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 0;
  v1 = dword_102303CA8;
  switch(dword_102303CA8)
  {
    case 0:
    case 259:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v12 = v1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      v9 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v9)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
                             &v10);
        goto LABEL_17;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102151740);
      v4 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v12 = v1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      v5 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102151740);
        v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "Old hardware,%d is not supported", &v10);
LABEL_17:
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "%s\n", v6);
        if (v7 != buf)
          free(v7);
        result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 217:
      result = 31;
      break;
    case 26:
      result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_102303F10 != -1)
        dispatch_once(&qword_102303F10, &stru_1021516D0);
      v2 = byte_102303F18 == 0;
      v3 = 22;
      goto LABEL_23;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      if (qword_102303F10 != -1)
        dispatch_once(&qword_102303F10, &stru_1021516D0);
      v2 = byte_102303F18 == 0;
      v3 = 54;
LABEL_23:
      if (v2)
        result = v3;
      else
        result = v3 + 1;
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      result = 63;
      break;
    default:
      return result;
  }
  return result;
}

id sub_1001E4FEC(id *a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  id v8;
  const char *v10;
  uint8_t *v11;
  _QWORD v12[5];
  BOOL v13[16];
  uint8_t buf[8];
  std::__shared_weak_count *v15;

  sub_1001E4804(buf);
  v13[0] = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v13);
  if (v13[0])
    v3 = v2;
  else
    v3 = 0;
  v4 = v15;
  if (!v15)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v3)
      goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,fetchSignalStrengthMeasurementsWithReply", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    *(_WORD *)v13 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,fetchSignalStrengthMeasurementsWithReply", v13, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
LABEL_14:
  v8 = objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLTelephonyService"));
  objc_msgSend(v8, "registerDelegate:inSilo:", sub_1001E5288((uint64_t)(a1 + 305)), objc_msgSend(*a1, "silo"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10020954C;
  v12[3] = &unk_1021CE030;
  v12[4] = a1;
  return objc_msgSend(v8, "fetchSignalStrengthMeasurementForSim:withReply:", 0, v12);
}

void sub_1001E526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1001E5288(uint64_t a1)
{
  void *v1;
  CLCallbackDropNullDelegate *v3;

  v1 = *(void **)(a1 + 24);
  if (!v1)
  {
    v3 = objc_alloc_init(CLCallbackDropNullDelegate);
    *(_QWORD *)(a1 + 24) = v3;
    -[CLCallbackDropNullDelegate setValid:](v3, "setValid:", 1);
    v1 = *(void **)(a1 + 24);
  }
  return v1;
}

void sub_1001E52CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = a1 + 872;
  if ((uint64_t *)v3 != a3)
    sub_10169AB5C(v3, *a3, a3[1], 0x66FD0EB66FD0EB67 * ((a3[1] - *a3) >> 3));
}

void sub_1001E5300(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109376;
    v12 = v5;
    v13 = 1024;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,setServingIsOnLte,isOnLte,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v6 = *(_DWORD *)(a1 + 2556);
    v8[0] = 67109376;
    v8[1] = v6;
    v9 = 1024;
    v10 = a2;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,setServingIsOnLte,isOnLte,%d", v8, 14);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::setServingIsOnLte(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  *(_BYTE *)(a1 + 371) = a2;
}

void sub_1001E54D0(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021C74F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 2556);
    *(_DWORD *)buf = 67109120;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,updateCellData", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021C74F8);
    v9 = *(_DWORD *)(a1 + 2556);
    v11[0] = 67109120;
    v11[1] = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#ins%d,#nilr,#supl,updateCellData", v11);
    sub_100512490("Generic", 1, 0, 2, "void CLNilrSupl::updateCellData(std::vector<CLCell> &&)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v6 = *(_QWORD *)(a1 + 2472);
  *(_QWORD *)(a1 + 2472) = *a2;
  *a2 = v6;
  v7 = *(_QWORD *)(a1 + 2480);
  *(_QWORD *)(a1 + 2480) = a2[1];
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2488) = a2[2];
  a2[2] = v8;
}

uint64_t sub_1001E56B4(void *a1, uint64_t a2)
{
  const __CFDictionary *v4;
  _QWORD *v5;
  const __CFDictionary *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v13;
  int v14;
  _DWORD *v15[2];
  uint8_t buf[8];
  char v17;

  v4 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotOne"));
  if (!v4)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 1", buf, 2u);
    }
    v7 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v7;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Sim Status Change information for SIM 1", v15, 2);
LABEL_23:
    v13 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromMccAndMncDictionary(CFDictionaryRef, std::unordered_map<SimInstance, CLCTMccAndMnc> &)", "%s\n", v10);
    if (v13 != buf)
      free(v13);
    return 0;
  }
  sub_1001E6094((uint64_t)buf, v4);
  v14 = 0;
  v15[0] = &v14;
  v5 = sub_1001E59F8(a2, &v14, (uint64_t)&unk_101B9EB60, v15);
  *(_QWORD *)((char *)v5 + 20) = *(_QWORD *)buf;
  *((_BYTE *)v5 + 28) = v17;
  if (!sub_1001DC538())
    return 1;
  v6 = (const __CFDictionary *)objc_msgSend(a1, "objectForKey:", CFSTR("kSlotTwo"));
  if (v6)
  {
    sub_1001E6094((uint64_t)buf, v6);
    v7 = 1;
    v14 = 1;
    v15[0] = &v14;
    v8 = sub_1001E59F8(a2, &v14, (uint64_t)&unk_101B9EB60, v15);
    *(_QWORD *)((char *)v8 + 20) = *(_QWORD *)buf;
    *((_BYTE *)v8 + 28) = v17;
    return v7;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021AADE0);
  v11 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#ctcl couldn't get Sim Status Change information for SIM 2", buf, 2u);
  }
  v7 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021AADE0);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#ctcl couldn't get Sim Status Change information for SIM 2", v15, 2);
    goto LABEL_23;
  }
  return v7;
}

_QWORD *sub_1001E59F8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_QWORD *)((char *)v11 + 20) = -1;
  *((_BYTE *)v11 + 28) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001E5C0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E5C20(uint64_t a1, const __CFDictionary *a2)
{
  _DWORD *v3;
  BOOL *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  _WORD v10[8];
  uint8_t v11[16];
  uint8_t buf[1640];

  *(_QWORD *)a1 = -1;
  v3 = (_DWORD *)(a1 + 4);
  *(_BYTE *)(a1 + 8) = 0;
  v4 = (BOOL *)(a1 + 8);
  sub_1001C1D6C((int)v11, a2);
  if ((sub_1001C1194((uint64_t)v11, (uint64_t)CFSTR("kMccKey"), (_DWORD *)a1) & 1) != 0)
  {
    if ((sub_1001C1194((uint64_t)v11, (uint64_t)CFSTR("kMncKey"), v3) & 1) != 0)
    {
      if ((sub_1001E48E4((uint64_t)v11, (uint64_t)CFSTR("kIs3DigitMnc"), v4) & 1) == 0)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v5 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for is3DigitMnc", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021461A0);
          v10[0] = 0;
          v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMccMnc, couldn't get value for is3DigitMnc", v10, 2);
          sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(CFDictionaryRef)", "%s\n", v6);
LABEL_29:
          if (v6 != (char *)buf)
            free(v6);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v8 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for mnc", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021461A0);
        v10[0] = 0;
        v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMccMnc, couldn't get value for mnc", v10, 2);
        sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(CFDictionaryRef)", "%s\n", v6);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021461A0);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTMccMnc, couldn't get value for mcc", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021461A0);
      v10[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#clct,CLCTMccMnc, couldn't get value for mcc", v10, 2);
      sub_100512490("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMccAndMnc::CLCTMccAndMnc(CFDictionaryRef)", "%s\n", v6);
      goto LABEL_29;
    }
  }
  sub_10011A5A8(v11);
  return a1;
}

void sub_1001E606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E6098(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  int v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x66FD0EB66FD0EB67 * ((a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v49 = 0x66FD0EB66FD0EB67 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v49 > 0x5E293205E29320)
      sub_100259694();
    v50 = 0x66FD0EB66FD0EB67 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x2F149902F14990)
      v51 = 0x5E293205E29320;
    else
      v51 = v49;
    *(_QWORD *)&v56 = v9;
    if (v51)
      v52 = (char *)sub_1005A9B68(v9, v51);
    else
      v52 = 0;
    *(_QWORD *)&v54 = v52;
    *((_QWORD *)&v54 + 1) = &v52[696 * v8];
    *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
    *((_QWORD *)&v55 + 1) = &v52[696 * v51];
    sub_1006B5DF4(&v54, a3);
    v4 = sub_1006B5F44(a1, &v54, v4);
    sub_1001C37C4((void **)&v54);
  }
  else if (a2 == v6)
  {
    sub_1005A9F60(v9, a2, a3);
    a1[1] = v4 + 696;
  }
  else
  {
    v98 = v9;
    sub_1005A9F60(v9, (uint64_t)&v54, a3);
    sub_1006B5C78((uint64_t)a1, v4, a1[1], v4 + 696);
    *(_OWORD *)v4 = v54;
    v12 = v55;
    v13 = v56;
    v14 = v57[0];
    *(_OWORD *)(v4 + 60) = *(_OWORD *)((char *)v57 + 12);
    *(_OWORD *)(v4 + 32) = v13;
    *(_OWORD *)(v4 + 48) = v14;
    *(_OWORD *)(v4 + 16) = v12;
    v15 = v7 + 696 * v8;
    v18 = *(void **)(v15 + 88);
    v17 = (_QWORD *)(v15 + 88);
    v16 = v18;
    *((_DWORD *)v17 - 2) = v58;
    if (v18)
    {
      *(_QWORD *)(v7 + 696 * v8 + 96) = v16;
      operator delete(v16);
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
    }
    *(_OWORD *)v17 = v59;
    v19 = v7 + 696 * v8;
    *(_QWORD *)(v19 + 104) = v60;
    v60 = 0;
    v59 = 0uLL;
    v20 = v65;
    v22 = v62;
    v21 = v63;
    *(_OWORD *)(v19 + 160) = v64;
    *(_OWORD *)(v19 + 176) = v20;
    *(_OWORD *)(v19 + 128) = v22;
    *(_OWORD *)(v19 + 144) = v21;
    v23 = v69;
    v25 = v66;
    v24 = v67;
    *(_OWORD *)(v19 + 224) = v68;
    *(_OWORD *)(v19 + 240) = v23;
    *(_OWORD *)(v19 + 192) = v25;
    *(_OWORD *)(v19 + 208) = v24;
    v27 = v71;
    v26 = v72[0];
    v28 = v70;
    *(_OWORD *)(v19 + 300) = *(_OWORD *)((char *)v72 + 12);
    *(_OWORD *)(v19 + 272) = v27;
    *(_OWORD *)(v19 + 288) = v26;
    *(_OWORD *)(v19 + 256) = v28;
    *(_OWORD *)(v19 + 112) = v61;
    v29 = v19 + 320;
    if (*(char *)(v4 + 343) < 0)
      operator delete(*(void **)v29);
    v30 = v73;
    *(_QWORD *)(v29 + 16) = v74;
    *(_OWORD *)v29 = v30;
    HIBYTE(v74) = 0;
    LOBYTE(v73) = 0;
    v31 = v7 + 696 * v8;
    v32 = v82;
    v33 = v83;
    v34 = v84;
    *(_DWORD *)(v31 + 504) = v85;
    v36 = v80;
    v35 = v81;
    v37 = v79;
    *(_OWORD *)(v31 + 392) = v78;
    *(_OWORD *)(v31 + 408) = v37;
    *(_OWORD *)(v31 + 424) = v36;
    *(_OWORD *)(v31 + 440) = v35;
    v39 = v76;
    v38 = v77;
    *(_OWORD *)(v31 + 344) = v75;
    *(_OWORD *)(v31 + 360) = v39;
    *(_OWORD *)(v31 + 376) = v38;
    *(_OWORD *)(v31 + 472) = v33;
    *(_OWORD *)(v31 + 488) = v34;
    *(_OWORD *)(v31 + 456) = v32;
    v40 = v86;
    v41 = v87;
    v42 = v89;
    *(_OWORD *)(v31 + 544) = v88;
    *(_OWORD *)(v31 + 560) = v42;
    *(_OWORD *)(v31 + 512) = v40;
    *(_OWORD *)(v31 + 528) = v41;
    v43 = v90;
    v44 = v91;
    v45 = v93;
    *(_OWORD *)(v31 + 608) = v92;
    *(_OWORD *)(v31 + 624) = v45;
    *(_OWORD *)(v31 + 576) = v43;
    *(_OWORD *)(v31 + 592) = v44;
    v46 = v94;
    v47 = v95;
    v48 = v96;
    *(_DWORD *)(v31 + 688) = v97;
    *(_OWORD *)(v31 + 656) = v47;
    *(_OWORD *)(v31 + 672) = v48;
    *(_OWORD *)(v31 + 640) = v46;
    sub_1005A9904(v98, (uint64_t)&v54);
  }
  return v4;
}

void sub_1001E6390(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_1001E63C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != a3)
  {
    sub_1006B61CC((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 696;
        sub_1005A9904(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_1001E6450@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  unsigned int v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[10];
  char v22;
  uint64_t v23;

  sub_100263E50((uint64_t)v19);
  v4 = sub_1001EFA4C(a1[2]);
  v5 = strlen(v4);
  v6 = sub_100263F7C(&v20, (uint64_t)v4, v5);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_1001EFA28(a1[1]);
  v9 = strlen(v8);
  sub_100263F7C(v7, (uint64_t)v8, v9);
  v10 = a1[2];
  if (v10 < 3)
  {
LABEL_4:
    v11 = sub_100263F7C(&v20, (uint64_t)", ", 2);
    sub_1001C35D0(a1 + 3, &__p);
    if ((v18 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v18 & 0x80u) == 0)
      v13 = v18;
    else
      v13 = v17;
    goto LABEL_37;
  }
  if (v10 == 9)
  {
    v11 = sub_100263F7C(&v20, (uint64_t)", ", 2);
    sub_1001C35D0(a1 + 11, &__p);
    if ((v18 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v18 & 0x80u) == 0)
      v13 = v18;
    else
      v13 = v17;
  }
  else
  {
    if (v10 == 7)
      goto LABEL_4;
    if (v10 - 3 > 2)
    {
      if (v10 == 10)
      {
        v11 = sub_100263F7C(&v20, (uint64_t)", ", 2);
        sub_10066537C(a1 + 150, &__p);
        if ((v18 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v18 & 0x80u) == 0)
          v13 = v18;
        else
          v13 = v17;
      }
      else
      {
        if (v10 != 6)
        {
          sub_100263F7C(&v20, (uint64_t)", UnknownCell", 13);
          goto LABEL_39;
        }
        v11 = sub_100263F7C(&v20, (uint64_t)", ", 2);
        sub_1001C35D0(a1 + 128, &__p);
        if ((v18 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v18 & 0x80u) == 0)
          v13 = v18;
        else
          v13 = v17;
      }
    }
    else
    {
      v11 = sub_100263F7C(&v20, (uint64_t)", ", 2);
      sub_100663EE0((uint64_t)(a1 + 20), &__p);
      if ((v18 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = v17;
    }
  }
LABEL_37:
  sub_100263F7C(v11, (uint64_t)p_p, v13);
  if ((char)v18 < 0)
    operator delete(__p);
LABEL_39:
  std::stringbuf::str(a2, v21);
  *(_QWORD *)((char *)v19
  v20 = v14;
  if (v22 < 0)
    operator delete((void *)v21[8]);
  std::streambuf::~streambuf(v21);
  return std::ios::~ios(&v23);
}

void sub_1001E6730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1001E6780(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unsigned int v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 < 3)
    goto LABEL_4;
  if (v6 == 9)
  {
    *(_DWORD *)(a1 + 60) = a2;
    *(_DWORD *)(a1 + 64) = a3;
    *(_DWORD *)(a1 + 68) = a4;
    *(_DWORD *)(a1 + 72) = a5;
  }
  else
  {
    if (v6 == 7)
    {
LABEL_4:
      *(_DWORD *)(a1 + 28) = a2;
      *(_DWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 36) = a4;
      *(_DWORD *)(a1 + 40) = a5;
      goto LABEL_5;
    }
    if (v6 - 3 > 2)
    {
      if (v6 == 10)
      {
        *(_DWORD *)(a1 + 624) = a2;
        *(_DWORD *)(a1 + 628) = a3;
        *(_DWORD *)(a1 + 656) = a4;
        *(_DWORD *)(a1 + 660) = a5;
        *(_DWORD *)(a1 + 632) = -1;
        *(_QWORD *)(a1 + 648) = 0;
        *(_QWORD *)(a1 + 640) = 0;
      }
      else if (v6 == 6)
      {
        *(_DWORD *)(a1 + 528) = a2;
        *(_DWORD *)(a1 + 532) = a3;
        *(_DWORD *)(a1 + 560) = a4;
        *(_DWORD *)(a1 + 564) = a5;
        *(_DWORD *)(a1 + 536) = -1;
        *(_QWORD *)(a1 + 552) = 0;
        *(_QWORD *)(a1 + 544) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 136) = -1;
      *(_DWORD *)(a1 + 140) = a4;
      *(_DWORD *)(a1 + 144) = a5;
    }
  }
LABEL_5:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_101347C78((unsigned int *)a1, __p);
    v8 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CELL_LOC: override to, %s", buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    v9 = qword_1022A02D8;
    sub_101347C78((unsigned int *)a1, buf);
    if (v14 >= 0)
      v10 = buf;
    else
      v10 = *(_BYTE **)buf;
    v15 = 136315138;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "CELL_LOC: override to, %s", (const char *)&v15);
    v12 = v11;
    if (v14 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLCell::overrideUarfcnPsc(int, int, int, int)", "%s\n", v12);
    if (v12 != (char *)__p)
      free(v12);
  }
}

void sub_1001E6A38(uint64_t a1, uint64_t a2, _OWORD **a3, uint64_t a4, double a5)
{
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  unsigned int *v11;
  int v12;
  int v13;
  double v14;
  unsigned int *v15;
  double v16;
  unsigned int v21;
  NSObject *v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  void **v27;
  NSObject *v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  NSObject *v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  char *v59;
  NSObject *v60;
  _BYTE *v61;
  std::string *v62;
  _BYTE *v63;
  _BYTE *v64;
  NSObject *v65;
  double v66;
  int v67;
  _BYTE *v68;
  int v69;
  std::string::size_type v70;
  int v71;
  std::string::size_type v72;
  std::string *v73;
  std::string *v74;
  _BYTE *v75;
  void **v76;
  uint64_t i;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  void **v81;
  void **v82;
  __int128 *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int v92;
  void **v93;
  int v94;
  std::string::size_type v95;
  int v96;
  std::string::size_type v97;
  std::string *v98;
  std::string *v99;
  void **v100;
  __int128 *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void **v105;
  std::string *v106;
  _BYTE *v107;
  _BYTE *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  NSObject *v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *j;
  NSObject *v149;
  int v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  int v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  char *v159;
  char *v160;
  unsigned int *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  const void *v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  unsigned int v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  int Current;
  int v233;
  NSObject *v234;
  int v235;
  _BYTE *v236;
  _BYTE *v237;
  _BYTE *v238;
  std::string *v239;
  std::string *v240;
  NSObject *v241;
  _BYTE *v242;
  uint64_t v243;
  const char *v244;
  uint64_t *v245;
  int v246;
  int v247;
  NSObject *v248;
  _BYTE *v249;
  uint64_t v250;
  std::string *v251;
  std::string *v252;
  int v253;
  _BYTE *v254;
  _BYTE *v255;
  __int128 *v256;
  std::string::size_type size;
  _BYTE *v258;
  std::string *v259;
  std::string *v260;
  std::string::size_type v261;
  std::string *v262;
  __int128 v263;
  __n128 v264;
  __n128 v265;
  NSObject *v266;
  __int128 *v267;
  NSObject *v268;
  int v269;
  uint64_t v270;
  int v271;
  const char *v272;
  char *v273;
  NSObject *v274;
  __int128 *v275;
  NSObject *v276;
  NSObject *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  NSObject *v283;
  __int128 v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  const char *v288;
  int v289;
  _BYTE *v290;
  std::__shared_weak_count *v291;
  unint64_t *p_shared_owners;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  _OWORD *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  BOOL v304;
  int v305;
  uint64_t v307;
  NSObject *v308;
  uint64_t v309;
  uint64_t *v310;
  NSObject *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  double v316;
  uint64_t v317;
  NSObject *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  double v322;
  double v323;
  uint64_t v324;
  NSObject *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  double v329;
  double v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  unsigned int *v334;
  int v335;
  int v336;
  double v337;
  const char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  const char *v342;
  char *v343;
  uint64_t v344;
  int v345;
  _BYTE *v346;
  _BYTE *v347;
  __int128 *v348;
  std::string *v349;
  std::string *v350;
  char *v351;
  char *v352;
  uint64_t v353;
  _BYTE *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  _BYTE *v358;
  uint64_t v359;
  std::string *v360;
  std::string *v361;
  int v362;
  __int128 *v363;
  __int128 *v364;
  void **v365;
  char *v366;
  char *v367;
  __int128 *v368;
  const char *v369;
  char *v370;
  __int128 *v371;
  const char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _BYTE *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  const char *v387;
  int v388;
  void **v389;
  char *v390;
  char *v391;
  uint64_t v392;
  const char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  const char *v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  const char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const char *v411;
  char *v412;
  const char *v413;
  char *v414;
  const char *v415;
  char *v416;
  double v417;
  double v418;
  double v419;
  __int128 v420;
  _OWORD **v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  unsigned int v426;
  __int128 v428;
  _QWORD v429[4];
  __int128 v430;
  uint64_t v431;
  _QWORD v432[4];
  __int128 v433;
  uint64_t v434;
  void *v435[2];
  char v436;
  _QWORD v437[5];
  __int128 v438;
  __int128 v439;
  __int128 v440;
  _OWORD v441[2];
  int v442;
  void *v443;
  void *v444;
  uint64_t v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  _OWORD v457[2];
  std::string v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  unsigned int v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  unsigned int v481;
  std::string v482;
  std::string v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  _BYTE v492[28];
  unsigned __int8 v493;
  __int128 v494;
  int64_t v495;
  int v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  std::string v500;
  std::string v501;
  _BYTE v502[12];
  __int16 v503;
  _BYTE v504[34];
  __int16 v505;
  int v506;
  __int16 v507;
  uint64_t v508;
  __int16 v509;
  const char *v510;
  __int16 v511;
  int v512;
  __int16 v513;
  void **v514;
  __int16 v515;
  int v516;
  __int16 v517;
  int v518;
  _BYTE v519[96];
  __int128 v520;
  __int128 v521;
  _OWORD v522[3];
  uint64_t v523;
  double v524;
  int v525;
  int v526;
  double v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  void *v530;
  char v531;
  std::__shared_weak_count *v532;
  id v533;
  _BYTE v534[96];
  __int128 v535;
  __int128 v536;
  _OWORD v537[2];
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  _OWORD v546[2];
  std::string __src;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  unsigned int v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  unsigned int v570;
  _BYTE v571[96];
  __int128 v572;
  __int128 v573;
  _BYTE v574[28];
  void *__p[4];
  _BYTE buf[12];
  __int16 v577;
  _BYTE v578[50];
  _BYTE v579[10];
  __int16 v580;
  _BYTE v581[20];
  uint64_t v582;
  void *v583;
  char v584;
  int v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  _BYTE v594[28];
  char v595;

  v422 = a3;
  sub_1015A2E04(&v501, "none");
  sub_1015A2E04(&v500, "none");
  v7 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v8 = &qword_1022A0000;
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (unsigned int *)*v422;
    v10 = (char *)v422[1];
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v13 = *(_DWORD *)(a4 + 96);
    v14 = vabdd_f64(a5, *(double *)(a4 + 76));
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * ((v10 - (char *)v11) >> 3);
    v577 = 1026;
    *(_DWORD *)v578 = v12;
    *(_WORD *)&v578[4] = 2050;
    *(double *)&v578[6] = v14;
    *(_WORD *)&v578[14] = 1026;
    *(_DWORD *)&v578[16] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CellFlow, compute, cells, %{public}zu, spectators, %{public}d, last, %{public}.1lf, type, %{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v332 = qword_1022A0048;
    v334 = (unsigned int *)*v422;
    v333 = (char *)v422[1];
    v335 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v336 = *(_DWORD *)(a4 + 96);
    v337 = vabdd_f64(a5, *(double *)(a4 + 76));
    *(_DWORD *)v519 = 134349824;
    *(_QWORD *)&v519[4] = 0x66FD0EB66FD0EB67 * ((v333 - (char *)v334) >> 3);
    *(_WORD *)&v519[12] = 1026;
    *(_DWORD *)&v519[14] = v335;
    *(_WORD *)&v519[18] = 2050;
    *(double *)&v519[20] = v337;
    *(_WORD *)&v519[28] = 1026;
    *(_DWORD *)&v519[30] = v336;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v332, 0, "CellFlow, compute, cells, %{public}zu, spectators, %{public}d, last, %{public}.1lf, type, %{public}d", v519, 34);
    v339 = (char *)v338;
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v338);
    if (v339 != buf)
      free(v339);
  }
  v15 = (unsigned int *)*v422;
  v16 = *((double *)v422 + 1);
  if (*(_OWORD **)&v16 == *v422)
  {
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 56))(a1, "nocells");
    goto LABEL_491;
  }
  v425 = 0;
  v426 = 0;
  v498 = 0;
  v497 = 0;
  v499 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v428 = _Q0;
  *(_QWORD *)&_Q0 = 136446723;
  v424 = _Q0;
  *(_QWORD *)&_Q0 = 136446467;
  v423 = _Q0;
  *(_QWORD *)&_Q0 = 136446210;
  v420 = _Q0;
  do
  {
    v21 = v15[2];
    if (v21 >= 8 && v21 - 9 >= 2)
    {
      if (v7[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v55 = v8[9];
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        sub_101347C78(v15, buf);
        v56 = buf;
        if (v578[9] < 0)
          v56 = *(_BYTE **)buf;
        *(_DWORD *)v519 = v420;
        *(_QWORD *)&v519[4] = v56;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "CellMatch, invalid cell, %{public}s, #CloneMe", v519, 0xCu);
        if ((v578[9] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v7[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v57 = v8[9];
        sub_101347C78(v15, v519);
        v58 = v519;
        if (v519[23] < 0)
          v58 = *(_BYTE **)v519;
        *(_DWORD *)v534 = v420;
        *(_QWORD *)&v534[4] = v58;
        LODWORD(v417) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v57, 0, "CellMatch, invalid cell, %{public}s, #CloneMe", v534, *(_QWORD *)&v417);
        v42 = v59;
        if ((v519[23] & 0x80000000) != 0)
          operator delete(*(void **)v519);
        goto LABEL_54;
      }
    }
    else
    {
      if (sub_1001EC790(v21))
      {
        sub_1015A2E04(v571, "none");
        sub_1015A2E04(&v571[24], "weak");
        sub_1015A2E04(&v571[48], "strong");
        sub_1015A2E04(&v571[72], "exact");
        LODWORD(v435[0]) = 0;
        *(_QWORD *)&v519[4] = 0;
        *(_QWORD *)&v519[12] = 0;
        *(_OWORD *)&v519[20] = xmmword_101BAFC90;
        *(_OWORD *)&v519[36] = v428;
        *(_OWORD *)&v519[52] = v428;
        *(_OWORD *)&v519[68] = v428;
        *(_DWORD *)v519 = 0xFFFF;
        *(_DWORD *)&v519[84] = 0;
        *(_QWORD *)&v519[88] = 0xBFF0000000000000;
        v520 = 0uLL;
        LODWORD(v521) = 0;
        *(_QWORD *)((char *)&v521 + 4) = 0xBFF0000000000000;
        HIDWORD(v521) = 0x7FFFFFFF;
        memset(v522, 0, 25);
        LODWORD(v435[0]) = (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v15, v519);
        v496 = 0;
        *(_QWORD *)&v534[4] = 0;
        *(_QWORD *)&v534[12] = 0;
        *(_OWORD *)&v534[20] = xmmword_101BAFC90;
        *(_OWORD *)&v534[36] = v428;
        *(_OWORD *)&v534[52] = v428;
        *(_OWORD *)&v534[68] = v428;
        *(_DWORD *)v534 = 0xFFFF;
        *(_DWORD *)&v534[84] = 0;
        *(_QWORD *)&v534[88] = 0xBFF0000000000000;
        v535 = 0uLL;
        LODWORD(v536) = 0;
        *(_QWORD *)((char *)&v536 + 4) = 0xBFF0000000000000;
        HIDWORD(v536) = 0x7FFFFFFF;
        memset(v537, 0, 25);
        if (SLODWORD(v435[0]) <= 2)
          v496 = (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)a1 + 32))(a1, v15, v534);
        if (v7[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v22 = v8[9];
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          v23 = &v571[24 * SLODWORD(v435[0])];
          if ((char)v23[23] < 0)
            v23 = *(_BYTE **)v23;
          sub_1001C36E4(v15, v502);
          v24 = v504[9];
          v25 = *(_BYTE **)v502;
          sub_100071A00((uint64_t)v519, __p);
          v26 = v502;
          if (v24 < 0)
            v26 = v25;
          v27 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v27 = (void **)__p[0];
          *(_DWORD *)buf = v424;
          *(_QWORD *)&buf[4] = v23;
          v577 = 2081;
          *(_QWORD *)v578 = v26;
          *(_WORD *)&v578[8] = 2081;
          *(_QWORD *)&v578[10] = v27;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CellMatch, best network, %{public}s, %{private}s, location, %{private}s", buf, 0x20u);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v7 = &qword_1022A0000;
          if ((v504[9] & 0x80000000) != 0)
            operator delete(*(void **)v502);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v7[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v78 = v8[9];
          v79 = &v571[24 * SLODWORD(v435[0])];
          if ((char)v79[23] < 0)
            v79 = *(_BYTE **)v79;
          sub_1001C36E4(v15, __p);
          v80 = SHIBYTE(__p[2]);
          v81 = (void **)__p[0];
          sub_100071A00((uint64_t)v519, &v494);
          v82 = __p;
          if (v80 < 0)
            v82 = v81;
          v83 = &v494;
          if (v495 < 0)
            v83 = (__int128 *)v494;
          *(_DWORD *)v502 = v424;
          *(_QWORD *)&v502[4] = v79;
          v503 = 2081;
          *(_QWORD *)v504 = v82;
          *(_WORD *)&v504[8] = 2081;
          *(_QWORD *)&v504[10] = v83;
          LODWORD(v417) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, 2, "CellMatch, best network, %{public}s, %{private}s, location, %{private}s", v502, *(_QWORD *)&v417);
          v85 = v84;
          if (SHIBYTE(v495) < 0)
            operator delete((void *)v494);
          v7 = &qword_1022A0000;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v85);
          if (v85 != buf)
            free(v85);
        }
        if (v7[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v28 = v8[9];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          v29 = &v571[24 * v496];
          if ((char)v29[23] < 0)
            v29 = *(_BYTE **)v29;
          sub_100071A00((uint64_t)v534, buf);
          v30 = buf;
          if (v578[9] < 0)
            v30 = *(_BYTE **)buf;
          *(_DWORD *)v502 = v423;
          *(_QWORD *)&v502[4] = v29;
          v503 = 2081;
          *(_QWORD *)v504 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CellMatch, best tile, %{public}s, location, %{private}s", v502, 0x16u);
          if ((v578[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v7[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v86 = v8[9];
          v87 = &v571[24 * v496];
          if ((char)v87[23] < 0)
            v87 = *(_BYTE **)v87;
          sub_100071A00((uint64_t)v534, v502);
          v88 = v502;
          if (v504[9] < 0)
            v88 = *(_BYTE **)v502;
          LODWORD(__p[0]) = v423;
          *(void **)((char *)__p + 4) = v87;
          WORD2(__p[1]) = 2081;
          *(void **)((char *)&__p[1] + 6) = v88;
          LODWORD(v417) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v86, 2, "CellMatch, best tile, %{public}s, location, %{private}s", __p, *(_QWORD *)&v417);
          v90 = v89;
          if ((v504[9] & 0x80000000) != 0)
            operator delete(*(void **)v502);
          sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v90);
          if (v90 != buf)
            free(v90);
        }
        v493 = 1;
        if (LODWORD(v435[0]) | v496)
        {
          if (SLODWORD(v435[0]) >= v496)
          {
            v493 = SLODWORD(v435[0]) < 3;
            v49 = v498;
            if (v498 >= v499)
            {
              v54 = sub_1006B671C(&v497, (uint64_t)v15, v435, v519, &v493);
            }
            else
            {
              sub_1006B6890(v498, (uint64_t)v15);
              *(_DWORD *)(v49 + 696) = v435[0];
              *(_BYTE *)(v49 + 856) = v493;
              v50 = v521;
              *(_OWORD *)(v49 + 796) = v520;
              *(_OWORD *)(v49 + 812) = v50;
              *(_OWORD *)(v49 + 828) = v522[0];
              *(_OWORD *)(v49 + 840) = *(_OWORD *)((char *)v522 + 12);
              v51 = *(_OWORD *)&v519[48];
              *(_OWORD *)(v49 + 732) = *(_OWORD *)&v519[32];
              *(_OWORD *)(v49 + 748) = v51;
              v52 = *(_OWORD *)&v519[80];
              *(_OWORD *)(v49 + 764) = *(_OWORD *)&v519[64];
              *(_OWORD *)(v49 + 780) = v52;
              v53 = *(_OWORD *)&v519[16];
              v54 = v49 + 864;
              *(_OWORD *)(v49 + 700) = *(_OWORD *)v519;
              *(_OWORD *)(v49 + 716) = v53;
            }
            v498 = v54;
            std::string::assign(&v500, "network");
            std::string::operator=(&v501, (const std::string *)&v571[24 * SLODWORD(v435[0])]);
            LODWORD(v425) = v425 + 1;
          }
          else
          {
            v493 = v496 < 2;
            v43 = v498;
            if (v498 >= v499)
            {
              v48 = sub_1006B671C(&v497, (uint64_t)v15, &v496, v534, &v493);
            }
            else
            {
              sub_1006B6890(v498, (uint64_t)v15);
              *(_DWORD *)(v43 + 696) = v496;
              *(_BYTE *)(v43 + 856) = v493;
              v44 = v536;
              *(_OWORD *)(v43 + 796) = v535;
              *(_OWORD *)(v43 + 812) = v44;
              *(_OWORD *)(v43 + 828) = v537[0];
              *(_OWORD *)(v43 + 840) = *(_OWORD *)((char *)v537 + 12);
              v45 = *(_OWORD *)&v534[48];
              *(_OWORD *)(v43 + 732) = *(_OWORD *)&v534[32];
              *(_OWORD *)(v43 + 748) = v45;
              v46 = *(_OWORD *)&v534[80];
              *(_OWORD *)(v43 + 764) = *(_OWORD *)&v534[64];
              *(_OWORD *)(v43 + 780) = v46;
              v47 = *(_OWORD *)&v534[16];
              v48 = v43 + 864;
              *(_OWORD *)(v43 + 700) = *(_OWORD *)v534;
              *(_OWORD *)(v43 + 716) = v47;
            }
            v498 = v48;
            std::string::assign(&v500, "tiles");
            std::string::operator=(&v501, (const std::string *)&v571[24 * v496]);
            ++HIDWORD(v425);
          }
          if (v7[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v60 = v8[9];
          if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
          {
            sub_1001C36E4(v15, v502);
            v61 = v502;
            if (v504[9] < 0)
              v61 = *(_BYTE **)v502;
            v62 = &v500;
            if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v62 = (std::string *)v500.__r_.__value_.__r.__words[0];
            v63 = &v571[24 * SLODWORD(v435[0])];
            if ((char)v63[23] < 0)
              v63 = *(_BYTE **)v63;
            v64 = &v571[24 * v496];
            if ((char)v64[23] < 0)
              v64 = *(_BYTE **)v64;
            *(_DWORD *)buf = 136381699;
            *(_QWORD *)&buf[4] = v61;
            v577 = 2082;
            *(_QWORD *)v578 = v62;
            *(_WORD *)&v578[8] = 2082;
            *(_QWORD *)&v578[10] = v63;
            *(_WORD *)&v578[18] = 2082;
            *(_QWORD *)&v578[20] = v64;
            *(_WORD *)&v578[28] = 1026;
            *(_DWORD *)&v578[30] = v493;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "CellMatch, prefer, %{private}s, %{public}s, levels, %{public}s, %{public}s, als, %{public}d", buf, 0x30u);
            if ((v504[9] & 0x80000000) != 0)
              operator delete(*(void **)v502);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v7[8] != -1)
              dispatch_once(&qword_1022A0040, &stru_10214D020);
            v104 = v8[9];
            sub_1001C36E4(v15, __p);
            v105 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v105 = (void **)__p[0];
            v106 = &v500;
            if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v106 = (std::string *)v500.__r_.__value_.__r.__words[0];
            v107 = &v571[24 * SLODWORD(v435[0])];
            if ((char)v107[23] < 0)
              v107 = *(_BYTE **)v107;
            v108 = &v571[24 * v496];
            if ((char)v108[23] < 0)
              v108 = *(_BYTE **)v108;
            *(_DWORD *)v502 = 136381699;
            *(_QWORD *)&v502[4] = v105;
            v503 = 2082;
            *(_QWORD *)v504 = v106;
            *(_WORD *)&v504[8] = 2082;
            *(_QWORD *)&v504[10] = v107;
            *(_WORD *)&v504[18] = 2082;
            *(_QWORD *)&v504[20] = v108;
            *(_WORD *)&v504[28] = 1026;
            *(_DWORD *)&v504[30] = v493;
            LODWORD(v417) = 48;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v104, 1, "CellMatch, prefer, %{private}s, %{public}s, levels, %{public}s, %{public}s, als, %{public}d", v502, *(_QWORD *)&v417);
            v110 = v109;
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v110);
            if (v110 != buf)
              free(v110);
          }
        }
        else
        {
          buf[0] = 1;
          v31 = v498;
          if (v498 >= v499)
          {
            v36 = sub_1006B671C(&v497, (uint64_t)v15, v435, v519, buf);
          }
          else
          {
            sub_1006B6890(v498, (uint64_t)v15);
            *(_DWORD *)(v31 + 696) = v435[0];
            *(_BYTE *)(v31 + 856) = buf[0];
            v32 = v521;
            *(_OWORD *)(v31 + 796) = v520;
            *(_OWORD *)(v31 + 812) = v32;
            *(_OWORD *)(v31 + 828) = v522[0];
            *(_OWORD *)(v31 + 840) = *(_OWORD *)((char *)v522 + 12);
            v33 = *(_OWORD *)&v519[48];
            *(_OWORD *)(v31 + 732) = *(_OWORD *)&v519[32];
            *(_OWORD *)(v31 + 748) = v33;
            v34 = *(_OWORD *)&v519[80];
            *(_OWORD *)(v31 + 764) = *(_OWORD *)&v519[64];
            *(_OWORD *)(v31 + 780) = v34;
            v35 = *(_OWORD *)&v519[16];
            v36 = v31 + 864;
            *(_OWORD *)(v31 + 700) = *(_OWORD *)v519;
            *(_OWORD *)(v31 + 716) = v35;
          }
          v498 = v36;
          ++v426;
        }
        if (v7[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v65 = v8[9];
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          v66 = v16;
          sub_1001C36E4(v15, v502);
          v67 = v504[9];
          v68 = *(_BYTE **)v502;
          v69 = SHIBYTE(v501.__r_.__value_.__r.__words[2]);
          v70 = v501.__r_.__value_.__r.__words[0];
          v71 = SHIBYTE(v500.__r_.__value_.__r.__words[2]);
          v72 = v500.__r_.__value_.__r.__words[0];
          sub_1001C3454((uint64_t)v15, __p);
          v73 = &v500;
          if (v71 < 0)
            v73 = (std::string *)v72;
          v74 = &v501;
          if (v69 < 0)
            v74 = (std::string *)v70;
          v75 = v502;
          if (v67 < 0)
            v75 = v68;
          *(_DWORD *)buf = 136381699;
          v76 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v76 = (void **)__p[0];
          *(_QWORD *)&buf[4] = v75;
          v577 = 2082;
          *(_QWORD *)v578 = v74;
          *(_WORD *)&v578[8] = 2082;
          *(_QWORD *)&v578[10] = v73;
          *(_WORD *)&v578[18] = 2082;
          *(_QWORD *)&v578[20] = v76;
          *(_WORD *)&v578[28] = 1026;
          *(_DWORD *)&v578[30] = v493;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "@CellFlow, match, %{private}s, %{public}s, %{public}s, rat, %{public}s, needsAls, %{public}d", buf, 0x30u);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v8 = &qword_1022A0000;
          v7 = &qword_1022A0000;
          v16 = v66;
          if ((v504[9] & 0x80000000) != 0)
            operator delete(*(void **)v502);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v7[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v419 = v16;
          v91 = v8[9];
          sub_1001C36E4(v15, __p);
          v92 = SHIBYTE(__p[2]);
          v93 = (void **)__p[0];
          v94 = SHIBYTE(v501.__r_.__value_.__r.__words[2]);
          v95 = v501.__r_.__value_.__r.__words[0];
          v96 = SHIBYTE(v500.__r_.__value_.__r.__words[2]);
          v97 = v500.__r_.__value_.__r.__words[0];
          sub_1001C3454((uint64_t)v15, &v494);
          v98 = &v500;
          if (v96 < 0)
            v98 = (std::string *)v97;
          v99 = &v501;
          if (v94 < 0)
            v99 = (std::string *)v95;
          v100 = __p;
          if (v92 < 0)
            v100 = v93;
          *(_DWORD *)v502 = 136381699;
          v101 = &v494;
          if (v495 < 0)
            v101 = (__int128 *)v494;
          *(_QWORD *)&v502[4] = v100;
          v503 = 2082;
          *(_QWORD *)v504 = v99;
          *(_WORD *)&v504[8] = 2082;
          *(_QWORD *)&v504[10] = v98;
          *(_WORD *)&v504[18] = 2082;
          *(_QWORD *)&v504[20] = v101;
          *(_WORD *)&v504[28] = 1026;
          *(_DWORD *)&v504[30] = v493;
          LODWORD(v417) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v91, 0, "@CellFlow, match, %{private}s, %{public}s, %{public}s, rat, %{public}s, needsAls, %{public}d", v502, *(_QWORD *)&v417);
          v103 = v102;
          if (SHIBYTE(v495) < 0)
            operator delete((void *)v494);
          v8 = &qword_1022A0000;
          v7 = &qword_1022A0000;
          v16 = v419;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v103);
          if (v103 != buf)
            free(v103);
        }
        for (i = 0; i != -96; i -= 24)
        {
          if ((char)v571[i + 95] < 0)
            operator delete(*(void **)&v571[i + 72]);
        }
        goto LABEL_116;
      }
      if (v7[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v37 = v8[9];
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        sub_101347C78(v15, buf);
        v38 = buf;
        if (v578[9] < 0)
          v38 = *(_BYTE **)buf;
        *(_DWORD *)v519 = 136380675;
        *(_QWORD *)&v519[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CellMatch, ignoring cell, %{private}s", v519, 0xCu);
        if ((v578[9] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v7[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v39 = v8[9];
        sub_101347C78(v15, v519);
        v40 = v519;
        if (v519[23] < 0)
          v40 = *(_BYTE **)v519;
        *(_DWORD *)v534 = 136380675;
        *(_QWORD *)&v534[4] = v40;
        LODWORD(v417) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 2, "CellMatch, ignoring cell, %{private}s", v534, *(_QWORD *)&v417);
        v42 = v41;
        if ((v519[23] & 0x80000000) != 0)
          operator delete(*(void **)v519);
LABEL_54:
        sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v42);
        if (v42 != buf)
          free(v42);
      }
    }
LABEL_116:
    v15 += 174;
  }
  while (v15 != *(unsigned int **)&v16);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 96))(a1, v425, HIDWORD(v425), v426);
  v111 = v498;
  v112 = v497;
  if (v498 == v497)
  {
    v130 = 0;
    v131 = v498;
  }
  else
  {
    v113 = 0;
    memset(v519, 0, 24);
    do
    {
      if (!*(_DWORD *)(v112 + 4))
      {
        if (v113 >= *(_QWORD *)&v519[16])
        {
          v113 = sub_1006B6D4C((uint64_t *)v519, v112);
        }
        else
        {
          sub_1006B6EB0(v113, v112);
          *(_DWORD *)(v113 + 696) = *(_DWORD *)(v112 + 696);
          v114 = *(_OWORD *)(v112 + 716);
          *(_OWORD *)(v113 + 700) = *(_OWORD *)(v112 + 700);
          *(_OWORD *)(v113 + 716) = v114;
          v115 = *(_OWORD *)(v112 + 732);
          v116 = *(_OWORD *)(v112 + 748);
          v117 = *(_OWORD *)(v112 + 780);
          *(_OWORD *)(v113 + 764) = *(_OWORD *)(v112 + 764);
          *(_OWORD *)(v113 + 780) = v117;
          *(_OWORD *)(v113 + 732) = v115;
          *(_OWORD *)(v113 + 748) = v116;
          v118 = *(_OWORD *)(v112 + 796);
          v119 = *(_OWORD *)(v112 + 812);
          v120 = *(_OWORD *)(v112 + 828);
          *(_OWORD *)(v113 + 840) = *(_OWORD *)(v112 + 840);
          *(_OWORD *)(v113 + 812) = v119;
          *(_OWORD *)(v113 + 828) = v120;
          *(_OWORD *)(v113 + 796) = v118;
          *(_BYTE *)(v113 + 856) = *(_BYTE *)(v112 + 856);
          v113 += 864;
        }
        *(_QWORD *)&v519[8] = v113;
      }
      v112 += 864;
    }
    while (v112 != v111);
    v121 = *(_QWORD *)v519;
    if (v113 == *(_QWORD *)v519)
    {
      v132 = v497;
      v133 = v498;
      if (v497 == v498)
      {
        v142 = v497;
      }
      else
      {
        while (1)
        {
          sub_1006B6EB0((uint64_t)buf, v132);
          v585 = *(_DWORD *)(v132 + 696);
          v134 = *(_OWORD *)(v132 + 716);
          v586 = *(_OWORD *)(v132 + 700);
          v587 = v134;
          v135 = *(_OWORD *)(v132 + 780);
          v137 = *(_OWORD *)(v132 + 732);
          v136 = *(_OWORD *)(v132 + 748);
          v590 = *(_OWORD *)(v132 + 764);
          v591 = v135;
          v588 = v137;
          v589 = v136;
          v139 = *(_OWORD *)(v132 + 812);
          v138 = *(_OWORD *)(v132 + 828);
          v140 = *(_OWORD *)(v132 + 796);
          *(_OWORD *)&v594[12] = *(_OWORD *)(v132 + 840);
          v593 = v139;
          *(_OWORD *)v594 = v138;
          v592 = v140;
          v141 = *(unsigned __int8 *)(v132 + 856);
          v595 = *(_BYTE *)(v132 + 856);
          if (v584 < 0)
            operator delete(v583);
          if (*(_QWORD *)&v581[12])
          {
            v582 = *(_QWORD *)&v581[12];
            operator delete(*(void **)&v581[12]);
          }
          if (v141)
            break;
          v132 += 864;
          if (v132 == v133)
          {
            v132 = v133;
            break;
          }
        }
        v142 = v132;
        v132 = v498;
        v7 = &qword_1022A0000;
      }
      v130 = v142 != v132;
    }
    else
    {
      while (1)
      {
        sub_1006B6EB0((uint64_t)buf, v121);
        v585 = *(_DWORD *)(v121 + 696);
        v122 = *(_OWORD *)(v121 + 716);
        v586 = *(_OWORD *)(v121 + 700);
        v587 = v122;
        v123 = *(_OWORD *)(v121 + 780);
        v125 = *(_OWORD *)(v121 + 732);
        v124 = *(_OWORD *)(v121 + 748);
        v590 = *(_OWORD *)(v121 + 764);
        v591 = v123;
        v588 = v125;
        v589 = v124;
        v127 = *(_OWORD *)(v121 + 812);
        v126 = *(_OWORD *)(v121 + 828);
        v128 = *(_OWORD *)(v121 + 796);
        *(_OWORD *)&v594[12] = *(_OWORD *)(v121 + 840);
        v593 = v127;
        *(_OWORD *)v594 = v126;
        v592 = v128;
        v129 = *(unsigned __int8 *)(v121 + 856);
        v595 = *(_BYTE *)(v121 + 856);
        if (v584 < 0)
          operator delete(v583);
        if (*(_QWORD *)&v581[12])
        {
          v582 = *(_QWORD *)&v581[12];
          operator delete(*(void **)&v581[12]);
        }
        if (v129)
          break;
        v121 += 864;
        if (v121 == v113)
        {
          v121 = v113;
          break;
        }
      }
      v130 = v121 != *(_QWORD *)&v519[8];
      v7 = &qword_1022A0000;
    }
    *(_QWORD *)buf = v519;
    sub_1006B6698((void ***)buf);
    v131 = v497;
    v111 = v498;
  }
  memset(__p, 0, 24);
  sub_1006B703C(__p, v131, v111, 0x84BDA12F684BDA13 * ((v111 - v131) >> 5));
  v143 = 126 - 2 * __clz(0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5));
  if (__p[1] == __p[0])
    v144 = 0;
  else
    v144 = v143;
  sub_1001EB460((uint64_t)__p[0], (unint64_t)__p[1], v144, 1);
  if (v7[8] != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v145 = v8[9];
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
  {
    v146 = 0x66FD0EB66FD0EB67 * (((char *)v422[1] - (char *)*v422) >> 3);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v146;
    v577 = 2050;
    *(_QWORD *)v578 = 0x84BDA12F684BDA13 * ((uint64_t)(v498 - v497) >> 5);
    *(_WORD *)&v578[8] = 2050;
    *(_QWORD *)&v578[10] = 0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5);
    *(_WORD *)&v578[18] = 1026;
    *(_DWORD *)&v578[20] = v130;
    _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "@CellFlow, counts, in, %{public}lu, sortIn, %{public}lu, sortOut, %{public}lu, shouldQuery, %{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v7[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v340 = v8[9];
    v341 = 0x66FD0EB66FD0EB67 * (((char *)v422[1] - (char *)*v422) >> 3);
    *(_DWORD *)v519 = 134349824;
    *(_QWORD *)&v519[4] = v341;
    *(_WORD *)&v519[12] = 2050;
    *(_QWORD *)&v519[14] = 0x84BDA12F684BDA13 * ((uint64_t)(v498 - v497) >> 5);
    *(_WORD *)&v519[22] = 2050;
    *(_QWORD *)&v519[24] = 0x84BDA12F684BDA13 * (((char *)__p[1] - (char *)__p[0]) >> 5);
    *(_WORD *)&v519[32] = 1026;
    *(_DWORD *)&v519[34] = v130;
    LODWORD(v417) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v340, 0, "@CellFlow, counts, in, %{public}lu, sortIn, %{public}lu, sortOut, %{public}lu, shouldQuery, %{public}d", v519, *(_QWORD *)&v417);
    v343 = (char *)v342;
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v342);
    if (v343 != buf)
      free(v343);
  }
  v147 = (unsigned int *)__p[0];
  for (j = (unsigned int *)__p[1]; v147 != j; v7 = &qword_1022A0000)
  {
    if (v7[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v149 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_1001C36E4(v147, buf);
      v150 = v578[9];
      v151 = *(_BYTE **)buf;
      sub_100071A00((uint64_t)(v147 + 175), v519);
      v152 = buf;
      if (v150 < 0)
        v152 = v151;
      if (v519[23] >= 0)
        v153 = v519;
      else
        v153 = *(_BYTE **)v519;
      *(_DWORD *)v534 = 136380931;
      *(_QWORD *)&v534[4] = v152;
      *(_WORD *)&v534[12] = 2081;
      *(_QWORD *)&v534[14] = v153;
      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "CellMatch, preferred cell matches, in ascending order, %{private}s, %{private}s", v534, 0x16u);
      if ((v519[23] & 0x80000000) != 0)
        operator delete(*(void **)v519);
      if ((v578[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v154 = qword_1022A0048;
      sub_1001C36E4(v147, v519);
      v155 = v519[23];
      v156 = *(_BYTE **)v519;
      sub_100071A00((uint64_t)(v147 + 175), v534);
      if (v155 >= 0)
        v157 = v519;
      else
        v157 = v156;
      v158 = v534;
      if (v534[23] < 0)
        v158 = *(_BYTE **)v534;
      *(_DWORD *)v571 = 136380931;
      *(_QWORD *)&v571[4] = v157;
      *(_WORD *)&v571[12] = 2081;
      *(_QWORD *)&v571[14] = v158;
      LODWORD(v417) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v154, 2, "CellMatch, preferred cell matches, in ascending order, %{private}s, %{private}s", v571, *(_QWORD *)&v417);
      v160 = v159;
      if ((v534[23] & 0x80000000) != 0)
        operator delete(*(void **)v534);
      if ((v519[23] & 0x80000000) != 0)
        operator delete(*(void **)v519);
      sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v160);
      if (v160 != buf)
        free(v160);
    }
    v147 += 216;
  }
  *(_QWORD *)&v571[12] = 0;
  *(_QWORD *)&v571[4] = 0;
  *(_OWORD *)&v571[20] = xmmword_101BAFC90;
  *(_OWORD *)&v571[36] = v428;
  *(_OWORD *)&v571[52] = v428;
  *(_OWORD *)&v571[68] = v428;
  *(_DWORD *)v571 = 0xFFFF;
  *(_DWORD *)&v571[84] = 0;
  *(_QWORD *)&v571[88] = 0xBFF0000000000000;
  v572 = 0uLL;
  *(_QWORD *)((char *)&v573 + 4) = 0xBFF0000000000000;
  LODWORD(v573) = 0;
  HIDWORD(v573) = 0x7FFFFFFF;
  memset(v574, 0, 25);
  v161 = (unsigned int *)*v422;
  *(_OWORD *)v534 = **v422;
  v162 = *((_OWORD *)v161 + 1);
  v163 = *((_OWORD *)v161 + 2);
  v164 = *((_OWORD *)v161 + 3);
  *(_OWORD *)&v534[60] = *(_OWORD *)(v161 + 15);
  *(_OWORD *)&v534[32] = v163;
  *(_OWORD *)&v534[48] = v164;
  *(_DWORD *)&v534[80] = v161[20];
  *(_QWORD *)&v534[88] = 0;
  v535 = 0uLL;
  v165 = (const void *)*((_QWORD *)v161 + 11);
  v166 = *((_QWORD *)v161 + 12);
  *(_OWORD *)&v534[16] = v162;
  sub_10027205C(&v534[88], v165, v166, (v166 - (uint64_t)v165) >> 2);
  v167 = *((_OWORD *)v161 + 16);
  v168 = *((_OWORD *)v161 + 17);
  v169 = *((_OWORD *)v161 + 18);
  *(_OWORD *)((char *)v546 + 12) = *(_OWORD *)(v161 + 75);
  v536 = *((_OWORD *)v161 + 7);
  v170 = *((_OWORD *)v161 + 8);
  v171 = *((_OWORD *)v161 + 9);
  v172 = *((_OWORD *)v161 + 11);
  v538 = *((_OWORD *)v161 + 10);
  v539 = v172;
  v537[0] = v170;
  v537[1] = v171;
  v173 = *((_OWORD *)v161 + 12);
  v174 = *((_OWORD *)v161 + 13);
  v175 = *((_OWORD *)v161 + 15);
  v542 = *((_OWORD *)v161 + 14);
  v543 = v175;
  v540 = v173;
  v541 = v174;
  v545 = v168;
  v546[0] = v169;
  v544 = v167;
  v176 = a1;
  if (*((char *)v161 + 343) < 0)
  {
    sub_100115CE4(&__src, *((void **)v161 + 40), *((_QWORD *)v161 + 41));
  }
  else
  {
    v177 = *((_OWORD *)v161 + 20);
    __src.__r_.__value_.__r.__words[2] = *((_QWORD *)v161 + 42);
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v177;
  }
  v178 = *(_OWORD *)(v161 + 86);
  v179 = *(_OWORD *)(v161 + 94);
  v549 = *(_OWORD *)(v161 + 90);
  v550 = v179;
  v548 = v178;
  v180 = *(_OWORD *)(v161 + 98);
  v181 = *(_OWORD *)(v161 + 102);
  v182 = *(_OWORD *)(v161 + 110);
  v553 = *(_OWORD *)(v161 + 106);
  v554 = v182;
  v551 = v180;
  v552 = v181;
  v183 = v161[126];
  v184 = *(_OWORD *)(v161 + 114);
  v185 = *(_OWORD *)(v161 + 122);
  v556 = *(_OWORD *)(v161 + 118);
  v557 = v185;
  v555 = v184;
  v558 = v183;
  v186 = *((_OWORD *)v161 + 32);
  v187 = *((_OWORD *)v161 + 33);
  v188 = *((_OWORD *)v161 + 35);
  v561 = *((_OWORD *)v161 + 34);
  v562 = v188;
  v559 = v186;
  v560 = v187;
  v189 = *((_OWORD *)v161 + 36);
  v190 = *((_OWORD *)v161 + 37);
  v191 = *((_OWORD *)v161 + 39);
  v565 = *((_OWORD *)v161 + 38);
  v566 = v191;
  v563 = v189;
  v564 = v190;
  v192 = *((_OWORD *)v161 + 40);
  v193 = *((_OWORD *)v161 + 41);
  v194 = *((_OWORD *)v161 + 42);
  v570 = v161[172];
  v568 = v193;
  v569 = v194;
  v567 = v192;
  if (__p[1] != __p[0])
  {
    v195 = (char *)__p[1] - 864;
    *(_OWORD *)v534 = *((_OWORD *)__p[1] - 54);
    v196 = *((_OWORD *)__p[1] - 53);
    v197 = *((_OWORD *)__p[1] - 52);
    v198 = *((_OWORD *)__p[1] - 51);
    *(_OWORD *)&v534[60] = *(_OWORD *)((char *)__p[1] - 804);
    *(_OWORD *)&v534[32] = v197;
    *(_OWORD *)&v534[48] = v198;
    *(_OWORD *)&v534[16] = v196;
    *(_DWORD *)&v534[80] = *((_DWORD *)__p[1] - 196);
    if (v534 != (char *)__p[1] - 864)
      sub_1002A3054(&v534[88], *((char **)__p[1] - 97), *((_QWORD *)__p[1] - 96), (uint64_t)(*((_QWORD *)__p[1] - 96) - *((_QWORD *)__p[1] - 97)) >> 2);
    v536 = *((_OWORD *)v195 + 7);
    v199 = *((_OWORD *)v195 + 8);
    v200 = *((_OWORD *)v195 + 9);
    v201 = *((_OWORD *)v195 + 11);
    v538 = *((_OWORD *)v195 + 10);
    v539 = v201;
    v537[0] = v199;
    v537[1] = v200;
    v202 = *((_OWORD *)v195 + 12);
    v203 = *((_OWORD *)v195 + 13);
    v204 = *((_OWORD *)v195 + 15);
    v542 = *((_OWORD *)v195 + 14);
    v543 = v204;
    v540 = v202;
    v541 = v203;
    v205 = *((_OWORD *)v195 + 16);
    v206 = *((_OWORD *)v195 + 17);
    v207 = *((_OWORD *)v195 + 18);
    *(_OWORD *)((char *)v546 + 12) = *(_OWORD *)(v195 + 300);
    v545 = v206;
    v546[0] = v207;
    v544 = v205;
    std::string::operator=(&__src, (const std::string *)(v195 + 320));
    v208 = *(_OWORD *)(v195 + 344);
    v209 = *(_OWORD *)(v195 + 376);
    v549 = *(_OWORD *)(v195 + 360);
    v550 = v209;
    v548 = v208;
    v210 = *(_OWORD *)(v195 + 392);
    v211 = *(_OWORD *)(v195 + 408);
    v212 = *(_OWORD *)(v195 + 440);
    v553 = *(_OWORD *)(v195 + 424);
    v554 = v212;
    v551 = v210;
    v552 = v211;
    v213 = *(_OWORD *)(v195 + 456);
    v214 = *(_OWORD *)(v195 + 472);
    v215 = *(_OWORD *)(v195 + 488);
    v558 = *((_DWORD *)v195 + 126);
    v556 = v214;
    v557 = v215;
    v555 = v213;
    v216 = *((_OWORD *)v195 + 32);
    v217 = *((_OWORD *)v195 + 33);
    v218 = *((_OWORD *)v195 + 35);
    v561 = *((_OWORD *)v195 + 34);
    v562 = v218;
    v559 = v216;
    v560 = v217;
    v219 = *((_OWORD *)v195 + 36);
    v220 = *((_OWORD *)v195 + 37);
    v221 = *((_OWORD *)v195 + 39);
    v565 = *((_OWORD *)v195 + 38);
    v566 = v221;
    v563 = v219;
    v564 = v220;
    v222 = *((_OWORD *)v195 + 40);
    v223 = *((_OWORD *)v195 + 41);
    v224 = *((_OWORD *)v195 + 42);
    v570 = *((_DWORD *)v195 + 172);
    v568 = v223;
    v569 = v224;
    v567 = v222;
    v225 = *(_OWORD *)(v195 + 716);
    *(_OWORD *)v571 = *(_OWORD *)(v195 + 700);
    *(_OWORD *)&v571[16] = v225;
    v226 = *(_OWORD *)(v195 + 732);
    v227 = *(_OWORD *)(v195 + 748);
    v228 = *(_OWORD *)(v195 + 780);
    *(_OWORD *)&v571[64] = *(_OWORD *)(v195 + 764);
    *(_OWORD *)&v571[80] = v228;
    *(_OWORD *)&v571[32] = v226;
    *(_OWORD *)&v571[48] = v227;
    v229 = *(_OWORD *)(v195 + 796);
    v230 = *(_OWORD *)(v195 + 812);
    v231 = *(_OWORD *)(v195 + 828);
    *(_OWORD *)&v574[12] = *(_OWORD *)(v195 + 840);
    v573 = v230;
    *(_OWORD *)v574 = v231;
    v572 = v229;
  }
  v493 = 0;
  if (v130 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    v493 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  Current = (int)CFAbsoluteTimeGetCurrent();
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v233 = Current % 10;
  v234 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_1001C3454((uint64_t)v534, v519);
    v235 = v519[23];
    v236 = *(_BYTE **)v519;
    sub_1001EB274((uint64_t)v534, v502);
    v237 = v519;
    if (v235 < 0)
      v237 = v236;
    if (v504[9] >= 0)
      v238 = v502;
    else
      v238 = *(_BYTE **)v502;
    v239 = &v500;
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v239 = (std::string *)v500.__r_.__value_.__r.__words[0];
    v240 = &v501;
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v240 = (std::string *)v501.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136447747;
    *(_QWORD *)&buf[4] = a2;
    v577 = 2082;
    *(_QWORD *)v578 = v237;
    *(_WORD *)&v578[8] = 2082;
    *(_QWORD *)&v578[10] = v238;
    *(_WORD *)&v578[18] = 2049;
    *(_QWORD *)&v578[20] = *(_QWORD *)&v571[20];
    *(_WORD *)&v578[28] = 2082;
    *(_QWORD *)&v578[30] = v239;
    *(_WORD *)&v578[38] = 2082;
    *(_QWORD *)&v578[40] = v240;
    *(_WORD *)&v578[48] = 1026;
    *(_DWORD *)v579 = v233;
    _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEBUG, "UclpMetric, fixattempt, %{public}s, %{public}s, %{public}s, acc, %{private}.0f, %{public}s, %{public}s, submit10, %{public}d", buf, 0x44u);
    if ((v504[9] & 0x80000000) != 0)
      operator delete(*(void **)v502);
    v176 = a1;
    if ((v519[23] & 0x80000000) != 0)
      operator delete(*(void **)v519);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v344 = qword_1022A0048;
    sub_1001C3454((uint64_t)v534, v502);
    v345 = v504[9];
    v346 = *(_BYTE **)v502;
    sub_1001EB274((uint64_t)v534, &v494);
    v347 = v502;
    if (v345 < 0)
      v347 = v346;
    if (v495 >= 0)
      v348 = &v494;
    else
      v348 = (__int128 *)v494;
    v349 = &v500;
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v349 = (std::string *)v500.__r_.__value_.__r.__words[0];
    v350 = &v501;
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v350 = (std::string *)v501.__r_.__value_.__r.__words[0];
    *(_DWORD *)v519 = 136447747;
    *(_QWORD *)&v519[4] = a2;
    *(_WORD *)&v519[12] = 2082;
    *(_QWORD *)&v519[14] = v347;
    *(_WORD *)&v519[22] = 2082;
    *(_QWORD *)&v519[24] = v348;
    *(_WORD *)&v519[32] = 2049;
    *(_QWORD *)&v519[34] = *(_QWORD *)&v571[20];
    *(_WORD *)&v519[42] = 2082;
    *(_QWORD *)&v519[44] = v349;
    *(_WORD *)&v519[52] = 2082;
    *(_QWORD *)&v519[54] = v350;
    *(_WORD *)&v519[62] = 1026;
    *(_DWORD *)&v519[64] = v233;
    LODWORD(v417) = 68;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v344, 2, "UclpMetric, fixattempt, %{public}s, %{public}s, %{public}s, acc, %{private}.0f, %{public}s, %{public}s, submit10, %{public}d", v519, *(_QWORD *)&v417);
    v352 = v351;
    if (SHIBYTE(v495) < 0)
      operator delete((void *)v494);
    v176 = a1;
    if ((v504[9] & 0x80000000) != 0)
      operator delete(*(void **)v502);
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v352);
    if (v352 != buf)
      free(v352);
  }
  if (!v233)
  {
    v437[1] = 3321888768;
    v439 = *(_OWORD *)&v534[16];
    v440 = *(_OWORD *)&v534[32];
    v441[0] = *(_OWORD *)&v534[48];
    *(_OWORD *)((char *)v441 + 12) = *(_OWORD *)&v534[60];
    v437[0] = _NSConcreteStackBlock;
    v437[2] = sub_10004FBFC;
    v437[3] = &unk_10214CFC0;
    v437[4] = a2;
    v438 = *(_OWORD *)v534;
    v442 = *(_DWORD *)&v534[80];
    v445 = 0;
    v443 = 0;
    v444 = 0;
    sub_10027205C(&v443, *(const void **)&v534[88], v535, (uint64_t)(v535 - *(_QWORD *)&v534[88]) >> 2);
    v455 = v544;
    v456 = v545;
    v457[0] = v546[0];
    *(_OWORD *)((char *)v457 + 12) = *(_OWORD *)((char *)v546 + 12);
    v453 = v542;
    v454 = v543;
    v451 = v540;
    v452 = v541;
    v447 = v537[0];
    v448 = v537[1];
    v449 = v538;
    v450 = v539;
    v446 = v536;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&v458, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    else
      v458 = __src;
    v467 = v556;
    v468 = v557;
    v469 = v558;
    v463 = v552;
    v464 = v553;
    v465 = v554;
    v466 = v555;
    v459 = v548;
    v460 = v549;
    v461 = v550;
    v462 = v551;
    v478 = v567;
    v479 = v568;
    v480 = v569;
    v474 = v563;
    v475 = v564;
    v476 = v565;
    v477 = v566;
    v470 = v559;
    v471 = v560;
    v472 = v561;
    v473 = v562;
    v481 = v570;
    *(_OWORD *)&v492[12] = *(_OWORD *)&v574[12];
    v490 = v572;
    v491 = v573;
    *(_OWORD *)v492 = *(_OWORD *)v574;
    v486 = *(_OWORD *)&v571[32];
    v487 = *(_OWORD *)&v571[48];
    v488 = *(_OWORD *)&v571[64];
    v489 = *(_OWORD *)&v571[80];
    v484 = *(_OWORD *)v571;
    v485 = *(_OWORD *)&v571[16];
    if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&v482, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
    else
      v482 = v500;
    if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
      sub_100115CE4(&v483, v501.__r_.__value_.__l.__data_, v501.__r_.__value_.__l.__size_);
    else
      v483 = v501;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.fixattempt"), v437);
    if (SHIBYTE(v483.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v483.__r_.__value_.__l.__data_);
    if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v482.__r_.__value_.__l.__data_);
    if (SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v458.__r_.__value_.__l.__data_);
    if (v443)
    {
      v444 = v443;
      operator delete(v443);
    }
  }
  if (*(double *)&v571[20] < 0.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v241 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1001C36E4((unsigned int *)v534, buf);
      v242 = v578[9] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v519 = 136380931;
      *(_QWORD *)&v519[4] = v242;
      *(_WORD *)&v519[12] = 1026;
      *(_DWORD *)&v519[14] = v493;
      _os_log_impl((void *)&_mh_execute_header, v241, OS_LOG_TYPE_DEFAULT, "@ClxCell, Fix, 0, ll, N/A, Unknown, %{private}s, querying, %{public}d", v519, 0x12u);
      if ((v578[9] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v353 = qword_1022A0048;
      sub_1001C36E4((unsigned int *)v534, v519);
      if (v519[23] >= 0)
        v354 = v519;
      else
        v354 = *(_BYTE **)v519;
      *(_DWORD *)v502 = 136380931;
      *(_QWORD *)&v502[4] = v354;
      v503 = 1026;
      *(_DWORD *)v504 = v493;
      LODWORD(v417) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v353, 0, "@ClxCell, Fix, 0, ll, N/A, Unknown, %{private}s, querying, %{public}d", v502, *(_QWORD *)&v417);
      v356 = v355;
      if ((v519[23] & 0x80000000) != 0)
        operator delete(*(void **)v519);
      sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v356);
      if (v356 != buf)
        free(v356);
    }
    v243 = 104;
    if (v493)
    {
      v244 = "alsquery";
    }
    else
    {
      v243 = 56;
      v244 = "nofix";
    }
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v176 + v243))(v176, v244);
    if (*(_DWORD *)&v534[8] == 10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 48))(v176))
      {
        (*(void (**)(uint64_t, const char *))(*(_QWORD *)v176 + 80))(v176, "nr cell nofix");
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v268 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v269 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 48))(v176);
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v269;
          _os_log_impl((void *)&_mh_execute_header, v268, OS_LOG_TYPE_DEFAULT, "CellFlow, skipreqwifi, locationclients, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          v270 = qword_1022A0048;
          v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          *(_DWORD *)v519 = 67240192;
          *(_DWORD *)&v519[4] = v271;
          LODWORD(v417) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v270, 0, "CellFlow, skipreqwifi, locationclients, %{public}d", v519, *(_QWORD *)&v417);
          v273 = (char *)v272;
          sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v272);
          if (v273 != buf)
            free(v273);
          v176 = a1;
        }
      }
    }
    goto LABEL_486;
  }
  v245 = &qword_1022A0000;
  if (*(_DWORD *)&v534[8] == 6)
    v246 = *(_DWORD *)(sub_1001E3CA4((uint64_t)v534) + 56);
  else
    v246 = -1;
  v247 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v176 + 112))(v176, v534, v571);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v248 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_1001C36E4((unsigned int *)v534, v519);
    if (v519[23] >= 0)
      v249 = v519;
    else
      v249 = *(_BYTE **)v519;
    v250 = *(_QWORD *)&v571[20];
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v251 = &v500;
    else
      v251 = (std::string *)v500.__r_.__value_.__r.__words[0];
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v252 = &v501;
    else
      v252 = (std::string *)v501.__r_.__value_.__r.__words[0];
    sub_1001C3454((uint64_t)v534, v502);
    v253 = v504[9];
    v254 = *(_BYTE **)v502;
    sub_1001EB274((uint64_t)v534, &v494);
    v255 = v502;
    if (v253 < 0)
      v255 = v254;
    if (v495 >= 0)
      v256 = &v494;
    else
      v256 = (__int128 *)v494;
    *(_DWORD *)buf = 136382723;
    *(_QWORD *)&buf[4] = v249;
    v577 = 2049;
    *(_QWORD *)v578 = v250;
    *(_WORD *)&v578[8] = 2082;
    *(_QWORD *)&v578[10] = v251;
    *(_WORD *)&v578[18] = 2082;
    *(_QWORD *)&v578[20] = v252;
    *(_WORD *)&v578[28] = 2082;
    *(_QWORD *)&v578[30] = v255;
    *(_WORD *)&v578[38] = 2082;
    *(_QWORD *)&v578[40] = v256;
    *(_WORD *)&v578[48] = 1026;
    *(_DWORD *)v579 = v247;
    *(_WORD *)&v579[4] = 1026;
    *(_DWORD *)&v579[6] = v246;
    v580 = 2082;
    *(_QWORD *)v581 = a2;
    _os_log_impl((void *)&_mh_execute_header, v248, OS_LOG_TYPE_DEFAULT, "CellFlow, fix, %{private}s, acc, %{private}.0f, %{public}s, %{public}s, %{public}s, %{public}s, notify, %{public}d, deploymentType, %{public}d, %{public}s", buf, 0x54u);
    if (SHIBYTE(v495) < 0)
      operator delete((void *)v494);
    v176 = a1;
    v245 = &qword_1022A0000;
    if ((v504[9] & 0x80000000) != 0)
      operator delete(*(void **)v502);
    if ((v519[23] & 0x80000000) != 0)
      operator delete(*(void **)v519);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v357 = qword_1022A0048;
    sub_1001C36E4((unsigned int *)v534, v502);
    if (v504[9] >= 0)
      v358 = v502;
    else
      v358 = *(_BYTE **)v502;
    v359 = *(_QWORD *)&v571[20];
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v360 = &v500;
    else
      v360 = (std::string *)v500.__r_.__value_.__r.__words[0];
    if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v361 = &v501;
    else
      v361 = (std::string *)v501.__r_.__value_.__r.__words[0];
    sub_1001C3454((uint64_t)v534, &v494);
    v362 = SHIBYTE(v495);
    v363 = (__int128 *)v494;
    sub_1001EB274((uint64_t)v534, v435);
    v364 = &v494;
    if (v362 < 0)
      v364 = v363;
    if (v436 >= 0)
      v365 = v435;
    else
      v365 = (void **)v435[0];
    *(_DWORD *)v519 = 136382723;
    *(_QWORD *)&v519[4] = v358;
    *(_WORD *)&v519[12] = 2049;
    *(_QWORD *)&v519[14] = v359;
    *(_WORD *)&v519[22] = 2082;
    *(_QWORD *)&v519[24] = v360;
    *(_WORD *)&v519[32] = 2082;
    *(_QWORD *)&v519[34] = v361;
    *(_WORD *)&v519[42] = 2082;
    *(_QWORD *)&v519[44] = v364;
    *(_WORD *)&v519[52] = 2082;
    *(_QWORD *)&v519[54] = v365;
    *(_WORD *)&v519[62] = 1026;
    *(_DWORD *)&v519[64] = v247;
    *(_WORD *)&v519[68] = 1026;
    *(_DWORD *)&v519[70] = v246;
    *(_WORD *)&v519[74] = 2082;
    *(_QWORD *)&v519[76] = a2;
    LODWORD(v417) = 84;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v357, 0, "CellFlow, fix, %{private}s, acc, %{private}.0f, %{public}s, %{public}s, %{public}s, %{public}s, notify, %{public}d, deploymentType, %{public}d, %{public}s", v519, *(_QWORD *)&v417);
    v367 = v366;
    if (v436 < 0)
      operator delete(v435[0]);
    v176 = a1;
    v245 = &qword_1022A0000;
    if (SHIBYTE(v495) < 0)
      operator delete((void *)v494);
    if ((v504[9] & 0x80000000) != 0)
      operator delete(*(void **)v502);
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v367);
    if (v367 != buf)
      free(v367);
  }
  if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v500.__r_.__value_.__r.__words[2]);
  else
    size = v500.__r_.__value_.__l.__size_;
  sub_100259584((uint64_t)buf, size + 1);
  if (v578[9] >= 0)
    v258 = buf;
  else
    v258 = *(_BYTE **)buf;
  if (size)
  {
    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v259 = &v500;
    else
      v259 = (std::string *)v500.__r_.__value_.__r.__words[0];
    memmove(v258, v259, size);
  }
  *(_WORD *)&v258[size] = 58;
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v260 = &v501;
  else
    v260 = (std::string *)v501.__r_.__value_.__r.__words[0];
  if ((v501.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v261 = HIBYTE(v501.__r_.__value_.__r.__words[2]);
  else
    v261 = v501.__r_.__value_.__l.__size_;
  v262 = std::string::append((std::string *)buf, (const std::string::value_type *)v260, v261);
  v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
  v495 = v262->__r_.__value_.__r.__words[2];
  v494 = v263;
  v262->__r_.__value_.__l.__size_ = 0;
  v262->__r_.__value_.__r.__words[2] = 0;
  v262->__r_.__value_.__r.__words[0] = 0;
  if ((v578[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (sub_10011CE64(*(double *)&v571[4], *(double *)&v571[12]))
  {
    if (v245[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v266 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v267 = &v494;
      if (v495 < 0)
        v267 = (__int128 *)v494;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = "cell, null";
      v577 = 2081;
      *(_QWORD *)v578 = v267;
      _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v245[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v368 = &v494;
      if (v495 < 0)
        v368 = (__int128 *)v494;
      *(_DWORD *)v519 = 136380931;
      *(_QWORD *)&v519[4] = "cell, null";
      *(_WORD *)&v519[12] = 2081;
      *(_QWORD *)&v519[14] = v368;
      LODWORD(v417) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", v519, *(_QWORD *)&v417);
      v370 = (char *)v369;
      sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v369);
      if (v370 != buf)
        free(v370);
      v176 = a1;
    }
    v432[0] = _NSConcreteStackBlock;
    v432[1] = 3321888768;
    v432[2] = sub_1006B5A8C;
    v432[3] = &unk_10214CFF0;
    if (SHIBYTE(v495) < 0)
    {
      sub_100115CE4(&v433, (void *)v494, *((unint64_t *)&v494 + 1));
    }
    else
    {
      v433 = v494;
      v434 = v495;
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), v432);
    if (SHIBYTE(v434) < 0)
      operator delete((void *)v433);
  }
  v265.n128_u64[0] = *(_QWORD *)&v571[4];
  v264.n128_u64[0] = -1.0;
  if (*(double *)&v571[4] != -1.0)
    goto LABEL_383;
  v265.n128_u64[0] = *(_QWORD *)&v571[12];
  if (*(double *)&v571[12] != -1.0)
    goto LABEL_383;
  if (v245[8] != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v274 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v275 = &v494;
    if (v495 < 0)
      v275 = (__int128 *)v494;
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = "cell, sentinel";
    v577 = 2081;
    *(_QWORD *)v578 = v275;
    _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v245[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v371 = &v494;
    if (v495 < 0)
      v371 = (__int128 *)v494;
    *(_DWORD *)v519 = 136380931;
    *(_QWORD *)&v519[4] = "cell, sentinel";
    *(_WORD *)&v519[12] = 2081;
    *(_QWORD *)&v519[14] = v371;
    LODWORD(v417) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", v519, *(_QWORD *)&v417);
    v373 = (char *)v372;
    sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v372);
    if (v373 != buf)
      free(v373);
    v176 = a1;
  }
  v429[0] = _NSConcreteStackBlock;
  v429[1] = 3321888768;
  v429[2] = sub_1006B5B40;
  v429[3] = &unk_10214CFF0;
  if (SHIBYTE(v495) < 0)
  {
    sub_100115CE4(&v430, (void *)v494, *((unint64_t *)&v494 + 1));
  }
  else
  {
    v430 = v494;
    v431 = v495;
  }
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), v429);
  if (SHIBYTE(v431) < 0)
  {
    operator delete((void *)v430);
    if (v247)
    {
LABEL_384:
      if (*(_DWORD *)&v574[4] != 1)
      {
        if (v245[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v276 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_FAULT, "reference frame is not properly set", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v245[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          *(_WORD *)v519 = 0;
          LODWORD(v417) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "reference frame is not properly set", v519, *(_QWORD *)&v417);
          v414 = (char *)v413;
          sub_100512490("Generic", 1, 0, 0, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v413);
          if (v414 != buf)
            free(v414);
          v176 = a1;
        }
        *(_DWORD *)&v574[4] = 1;
      }
      if (!*(_DWORD *)&v571[84])
      {
        if (v245[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v277 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_ERROR, "confidence is not properly set", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v245[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214D020);
          *(_WORD *)v519 = 0;
          LODWORD(v417) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "confidence is not properly set", v519, *(_QWORD *)&v417);
          v416 = (char *)v415;
          sub_100512490("Generic", 1, 0, 0, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v415);
          if (v416 != buf)
            free(v416);
          v176 = a1;
        }
        *(_DWORD *)&v571[84] = 70;
      }
      if (v245[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v278 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v279 = *(_QWORD *)&v571[4];
        v280 = *(_QWORD *)&v571[12];
        v281 = *(_QWORD *)&v571[20];
        sub_1001C36E4((unsigned int *)v534, v519);
        if (v519[23] >= 0)
          v282 = v519;
        else
          v282 = *(_BYTE **)v519;
        *(_DWORD *)buf = 134284803;
        *(_QWORD *)&buf[4] = v279;
        v577 = 2049;
        *(_QWORD *)v578 = v280;
        *(_WORD *)&v578[8] = 2050;
        *(_QWORD *)&v578[10] = v281;
        *(_WORD *)&v578[18] = 2081;
        *(_QWORD *)&v578[20] = v282;
        *(_WORD *)&v578[28] = 1026;
        *(_DWORD *)&v578[30] = v572;
        *(_WORD *)&v578[34] = 2050;
        *(_QWORD *)&v578[36] = *(_QWORD *)&v571[76];
        _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_DEFAULT, "@ClxCell, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, key, %{private}s, type, %{public}d, timestamp, %{public}.3f", buf, 0x3Au);
        if ((v519[23] & 0x80000000) != 0)
          operator delete(*(void **)v519);
        v245 = &qword_1022A0000;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v245[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v374 = qword_1022A0048;
        v375 = *(_QWORD *)&v571[4];
        v376 = *(_QWORD *)&v571[12];
        v377 = *(_QWORD *)&v571[20];
        sub_1001C36E4((unsigned int *)v534, v502);
        if (v504[9] >= 0)
          v378 = v502;
        else
          v378 = *(_BYTE **)v502;
        *(_DWORD *)v519 = 134284803;
        *(_QWORD *)&v519[4] = v375;
        *(_WORD *)&v519[12] = 2049;
        *(_QWORD *)&v519[14] = v376;
        *(_WORD *)&v519[22] = 2050;
        *(_QWORD *)&v519[24] = v377;
        *(_WORD *)&v519[32] = 2081;
        *(_QWORD *)&v519[34] = v378;
        *(_WORD *)&v519[42] = 1026;
        *(_DWORD *)&v519[44] = v572;
        *(_WORD *)&v519[48] = 2050;
        *(_QWORD *)&v519[50] = *(_QWORD *)&v571[76];
        LODWORD(v417) = 58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v374, 0, "@ClxCell, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, key, %{private}s, type, %{public}d, timestamp, %{public}.3f", v519, *(_QWORD *)&v417);
        v380 = v379;
        if ((v504[9] & 0x80000000) != 0)
          operator delete(*(void **)v502);
        sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v380);
        if (v380 != buf)
          free(v380);
        v176 = a1;
        v245 = &qword_1022A0000;
      }
      *(double *)&v571[76] = a5;
      sub_100129CA0((uint64_t)v519);
      v520 = v572;
      v521 = v573;
      v522[0] = *(_OWORD *)v574;
      *(_OWORD *)((char *)v522 + 12) = *(_OWORD *)&v574[12];
      *(_OWORD *)&v519[32] = *(_OWORD *)&v571[32];
      *(_OWORD *)&v519[48] = *(_OWORD *)&v571[48];
      *(_OWORD *)&v519[64] = *(_OWORD *)&v571[64];
      *(_DWORD *)&v519[84] = *(_DWORD *)&v571[84];
      *(_OWORD *)v519 = *(_OWORD *)v571;
      *(_OWORD *)&v519[16] = *(_OWORD *)&v571[16];
      *(double *)&v519[76] = a5;
      *(_QWORD *)&v519[88] = 0xBFF0000000000000;
      v523 = 0;
      v524 = sub_100078B88();
      v527 = sub_1001FCBB4();
      v496 = 0;
      if (sub_100208AC8((float *)&v496, *(double *)&v571[4], *(double *)&v571[12]))
      {
        v526 = v496;
        v525 = 1;
      }
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214D060);
      v283 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v284 = *(_OWORD *)&v519[4];
        v285 = *(_QWORD *)&v519[20];
        v286 = *(_DWORD *)&v519[84];
        v287 = *(_QWORD *)&v519[88];
        v288 = sub_10014D1E0(v520);
        v289 = v520;
        sub_101347C78((unsigned int *)v534, v502);
        if (v504[9] >= 0)
          v290 = v502;
        else
          v290 = *(_BYTE **)v502;
        *(_DWORD *)buf = 136317954;
        *(_QWORD *)&buf[4] = "Cell";
        v577 = 1024;
        *(_DWORD *)v578 = 1;
        *(_WORD *)&v578[4] = 2048;
        *(_QWORD *)&v578[6] = v284;
        *(_WORD *)&v578[14] = 2048;
        *(_QWORD *)&v578[16] = *((_QWORD *)&v284 + 1);
        *(_WORD *)&v578[24] = 2048;
        *(_QWORD *)&v578[26] = v285;
        *(_WORD *)&v578[34] = 1024;
        *(_DWORD *)&v578[36] = v286;
        *(_WORD *)&v578[40] = 2048;
        *(_QWORD *)&v578[42] = v287;
        *(_WORD *)v579 = 2080;
        *(_QWORD *)&v579[2] = v288;
        v580 = 1024;
        *(_DWORD *)v581 = v289;
        *(_WORD *)&v581[4] = 2080;
        *(_QWORD *)&v581[6] = v290;
        *(_WORD *)&v581[14] = 1024;
        *(_DWORD *)&v581[16] = -1;
        LOWORD(v582) = 1024;
        *(_DWORD *)((char *)&v582 + 2) = v522[0];
        _os_log_impl((void *)&_mh_execute_header, v283, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,Lifespan,%.3f,SubType,%s,MatchLevel,%d,cell,%s,Transmit,%d,integrity,%d", buf, 0x66u);
        if ((v504[9] & 0x80000000) != 0)
          operator delete(*(void **)v502);
        v176 = a1;
        v245 = &qword_1022A0000;
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214D060);
        v381 = qword_1022A02F8;
        v382 = *(_QWORD *)&v519[4];
        v383 = *(_QWORD *)&v519[12];
        v384 = *(_QWORD *)&v519[20];
        v385 = *(_DWORD *)&v519[84];
        v386 = *(_QWORD *)&v519[88];
        v387 = sub_10014D1E0(v520);
        v388 = v520;
        sub_101347C78((unsigned int *)v534, v435);
        if (v436 >= 0)
          v389 = v435;
        else
          v389 = (void **)v435[0];
        *(_DWORD *)v502 = 136317954;
        *(_QWORD *)&v502[4] = "Cell";
        v503 = 1024;
        *(_DWORD *)v504 = 1;
        *(_WORD *)&v504[4] = 2048;
        *(_QWORD *)&v504[6] = v382;
        *(_WORD *)&v504[14] = 2048;
        *(_QWORD *)&v504[16] = v383;
        *(_WORD *)&v504[24] = 2048;
        *(_QWORD *)&v504[26] = v384;
        v505 = 1024;
        v506 = v385;
        v507 = 2048;
        v508 = v386;
        v509 = 2080;
        v510 = v387;
        v511 = 1024;
        v512 = v388;
        v513 = 2080;
        v514 = v389;
        v515 = 1024;
        v516 = -1;
        v517 = 1024;
        v518 = v522[0];
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v381, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,Lifespan,%.3f,SubType,%s,MatchLevel,%d,cell,%s,Transmit,%d,integrity,%d", v502, 102, v418, v419, *(double *)&v420, DWORD2(v420), *(double *)&a2, (const char *)v422, (_DWORD)v423, *((const char **)&v423 + 1),
          (_DWORD)v424,
          DWORD2(v424));
        v391 = v390;
        if (v436 < 0)
          operator delete(v435[0]);
        sub_100512490("LOCATION", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v391);
        if (v391 != buf)
          free(v391);
        v176 = a1;
        v245 = &qword_1022A0000;
      }
      if (sub_1001DFAE8())
      {
        sub_100119F3C(buf);
        *(_DWORD *)v502 = v520;
        sub_10011B4E4((uint64_t)buf, "cellMatch", v502);
        sub_10011B47C((uint64_t)buf, "query", &v493);
        sub_10018A4CC((uint64_t)buf, "hAcc", &v571[20]);
        sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
        sub_10011A5A8(buf);
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v176 + 64))(v176, v519);

      v291 = v532;
      if (v532)
      {
        p_shared_owners = (unint64_t *)&v532->__shared_owners_;
        do
          v293 = __ldaxr(p_shared_owners);
        while (__stlxr(v293 - 1, p_shared_owners));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
      if (v531 < 0)
        operator delete(v530);
      v294 = v529;
      if (v529)
      {
        v295 = (unint64_t *)&v529->__shared_owners_;
        do
          v296 = __ldaxr(v295);
        while (__stlxr(v296 - 1, v295));
        if (!v296)
        {
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v294);
        }
      }
      v297 = v528;
      if (v528)
      {
        v298 = (unint64_t *)&v528->__shared_owners_;
        do
          v299 = __ldaxr(v298);
        while (__stlxr(v299 - 1, v298));
        if (!v299)
        {
          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
          std::__shared_weak_count::__release_weak(v297);
        }
      }
    }
  }
  else
  {
LABEL_383:
    if (v247)
      goto LABEL_384;
  }
  (*(void (**)(uint64_t, const char *, __n128, __n128))(*(_QWORD *)v176 + 104))(v176, "fix", v264, v265);
  if ((v572 & 0xFFFFFFFE) == 6)
  {
    v301 = (uint64_t)*v422;
    v300 = v422[1];
    if (*v422 == v300)
    {
      v307 = (uint64_t)*v422;
      v302 = (uint64_t)*v422;
    }
    else
    {
      v302 = (uint64_t)*v422;
      while (1)
      {
        v303 = *(_DWORD *)(v302 + 8);
        v304 = v303 > 7;
        v305 = (1 << v303) & 0x87;
        if (!v304 && v305 != 0)
          break;
        v302 += 696;
        if ((_OWORD *)v302 == v300)
        {
          v302 = (uint64_t)v422[1];
          break;
        }
      }
      v307 = (uint64_t)*v422;
      do
      {
        if (*(_DWORD *)(v307 + 8) == 3)
          goto LABEL_454;
        v307 += 696;
      }
      while ((_OWORD *)v307 != v300);
      v307 = (uint64_t)v422[1];
LABEL_454:
      while (*(_DWORD *)(v301 + 8) != 6)
      {
        v301 += 696;
        if ((_OWORD *)v301 == v300)
        {
          v301 = (uint64_t)v422[1];
          break;
        }
      }
    }
    if (v245[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v308 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v309 = ((char *)v422[1] - (char *)*v422) >> 3;
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * v309;
      v577 = 1026;
      *(_DWORD *)v578 = v302 != (_QWORD)v300;
      *(_WORD *)&v578[4] = 1026;
      *(_DWORD *)&v578[6] = v307 != (_QWORD)v300;
      *(_WORD *)&v578[10] = 1026;
      *(_DWORD *)&v578[12] = v301 != (_QWORD)v300;
      _os_log_impl((void *)&_mh_execute_header, v308, OS_LOG_TYPE_DEFAULT, "@CellLoc, tiledl, cells, %{public}lu, gsm, %{public}d, cdma, %{public}d, lte, %{public}d", buf, 0x1Eu);
    }
    v310 = &qword_1022A0000;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v392 = ((char *)v422[1] - (char *)*v422) >> 3;
      *(_DWORD *)v519 = 134349824;
      *(_QWORD *)&v519[4] = 0x66FD0EB66FD0EB67 * v392;
      *(_WORD *)&v519[12] = 1026;
      *(_DWORD *)&v519[14] = v302 != (_QWORD)v300;
      *(_WORD *)&v519[18] = 1026;
      *(_DWORD *)&v519[20] = v307 != (_QWORD)v300;
      *(_WORD *)&v519[24] = 1026;
      *(_DWORD *)&v519[26] = v301 != (_QWORD)v300;
      LODWORD(v417) = 30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellLoc, tiledl, cells, %{public}lu, gsm, %{public}d, cdma, %{public}d, lte, %{public}d", v519, *(_QWORD *)&v417);
      v394 = (char *)v393;
      sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v393);
      if (v394 != buf)
        free(v394);
      v176 = a1;
      v310 = &qword_1022A0000;
    }
    if ((_OWORD *)v302 != v300)
    {
      if (v310[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v311 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v312 = *(_QWORD *)&v571[4];
        v313 = *(_QWORD *)&v571[12];
        v314 = sub_1001EC348(v302);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v312;
        v577 = 2048;
        *(_QWORD *)v578 = v313;
        *(_WORD *)&v578[8] = 2048;
        *(_QWORD *)&v578[10] = v314;
        _os_log_impl((void *)&_mh_execute_header, v311, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, GSM, %.8f, %.8f, seckey, %llu", buf, 0x20u);
      }
      v310 = &qword_1022A0000;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v395 = qword_1022A0048;
        v396 = *(_QWORD *)&v571[4];
        v397 = *(_QWORD *)&v571[12];
        v398 = sub_1001EC348(v302);
        *(_DWORD *)v519 = 134218496;
        *(_QWORD *)&v519[4] = v396;
        *(_WORD *)&v519[12] = 2048;
        *(_QWORD *)&v519[14] = v397;
        *(_WORD *)&v519[22] = 2048;
        *(_QWORD *)&v519[24] = v398;
        LODWORD(v417) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v395, 2, "CellLoc, requestDownload, GSM, %.8f, %.8f, seckey, %llu", COERCE_DOUBLE(v519), v417, *(_QWORD *)&v418);
        v400 = (char *)v399;
        sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v399);
        if (v400 != buf)
          free(v400);
        v176 = a1;
        v310 = &qword_1022A0000;
      }
      v315 = *(double *)&v571[4];
      v316 = *(double *)&v571[12];
      v317 = sub_1001EC348(v302);
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)v176 + 88))(v176, 3, v317, v315, v316);
    }
    if ((_OWORD *)v307 != v300)
    {
      if (v310[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v318 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v319 = *(_QWORD *)&v571[4];
        v320 = *(_QWORD *)&v571[12];
        v321 = sub_1001EC348(v307);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v319;
        v577 = 2048;
        *(_QWORD *)v578 = v320;
        *(_WORD *)&v578[8] = 2048;
        *(_QWORD *)&v578[10] = v321;
        _os_log_impl((void *)&_mh_execute_header, v318, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, CDMA, %.8f, %.8f, seckey, %llu", buf, 0x20u);
        v310 = &qword_1022A0000;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v310[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v401 = qword_1022A0048;
        v402 = *(_QWORD *)&v571[4];
        v403 = *(_QWORD *)&v571[12];
        v404 = sub_1001EC348(v307);
        *(_DWORD *)v519 = 134218496;
        *(_QWORD *)&v519[4] = v402;
        *(_WORD *)&v519[12] = 2048;
        *(_QWORD *)&v519[14] = v403;
        *(_WORD *)&v519[22] = 2048;
        *(_QWORD *)&v519[24] = v404;
        LODWORD(v417) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v401, 2, "CellLoc, requestDownload, CDMA, %.8f, %.8f, seckey, %llu", COERCE_DOUBLE(v519), v417, *(_QWORD *)&v418);
        v406 = (char *)v405;
        sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v405);
        if (v406 != buf)
          free(v406);
        v176 = a1;
        v310 = &qword_1022A0000;
      }
      v322 = *(double *)&v571[4];
      v323 = *(double *)&v571[12];
      v324 = sub_1001EC348(v307);
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)v176 + 88))(v176, 5, v324, v322, v323);
    }
    if ((_OWORD *)v301 != v300)
    {
      if (v310[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214D020);
      v325 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v326 = *(_QWORD *)&v571[4];
        v327 = *(_QWORD *)&v571[12];
        v328 = sub_1001EC348(v301);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v326;
        v577 = 2048;
        *(_QWORD *)v578 = v327;
        *(_WORD *)&v578[8] = 2048;
        *(_QWORD *)&v578[10] = v328;
        _os_log_impl((void *)&_mh_execute_header, v325, OS_LOG_TYPE_DEBUG, "CellLoc, requestDownload, LTE, %.8f, %.8f, seckey, %llu", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v310[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214D020);
        v407 = qword_1022A0048;
        v408 = *(_QWORD *)&v571[4];
        v409 = *(_QWORD *)&v571[12];
        v410 = sub_1001EC348(v301);
        *(_DWORD *)v519 = 134218496;
        *(_QWORD *)&v519[4] = v408;
        *(_WORD *)&v519[12] = 2048;
        *(_QWORD *)&v519[14] = v409;
        *(_WORD *)&v519[22] = 2048;
        *(_QWORD *)&v519[24] = v410;
        LODWORD(v417) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v407, 2, "CellLoc, requestDownload, LTE, %.8f, %.8f, seckey, %llu", COERCE_DOUBLE(v519), v417, *(_QWORD *)&v418);
        v412 = (char *)v411;
        sub_100512490("Generic", 1, 0, 2, "static void CLUnifiedCellLocationProviderLogic::computeCellLocation(ICellLocationProvider *, const char *, const CLCellVector &, const CLDaemonLocation &, const CFAbsoluteTime)", "%s\n", v411);
        if (v412 != buf)
          free(v412);
        v176 = a1;
      }
      v329 = *(double *)&v571[4];
      v330 = *(double *)&v571[12];
      v331 = sub_1001EC348(v301);
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)v176 + 88))(v176, 4, v331, v329, v330);
    }
  }
  if (SHIBYTE(v495) < 0)
    operator delete((void *)v494);
LABEL_486:
  (*(void (**)(uint64_t, const char *, double, double))(*(_QWORD *)v176 + 16))(v176, "recalc", a5, 300.0);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&v534[88])
  {
    *(_QWORD *)&v535 = *(_QWORD *)&v534[88];
    operator delete(*(void **)&v534[88]);
  }
  *(_QWORD *)buf = __p;
  sub_1006B6698((void ***)buf);
  *(_QWORD *)buf = &v497;
  sub_1006B6698((void ***)buf);
LABEL_491:
  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v500.__r_.__value_.__l.__data_);
  if (SHIBYTE(v501.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v501.__r_.__value_.__l.__data_);
}

void sub_1001EAE84(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  sub_1005A1100((uint64_t)&STACK[0xC40]);
  STACK[0xFC0] = (unint64_t)&STACK[0xFA0];
  sub_1006B6698((void ***)&STACK[0xFC0]);
  STACK[0x640] = (unint64_t)&STACK[0x588];
  sub_1006B6698((void ***)&STACK[0x640]);
  if (SLOBYTE(STACK[0x5B7]) < 0)
    operator delete((void *)STACK[0x5A0]);
  if (SLOBYTE(STACK[0x5CF]) < 0)
    operator delete((void *)STACK[0x5B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EB274@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_100263E50((uint64_t)v9);
  v4 = *(int *)(a1 + 4);
  if (v4 >= 3)
  {
    v5 = "Unknown";
    v6 = 7;
  }
  else
  {
    v5 = off_1021AFE88[v4];
    v6 = qword_101C9E518[v4];
  }
  sub_100263F7C(&v10, (uint64_t)v5, v6);
  std::stringbuf::str(a2, v11);
  *(_QWORD *)((char *)v9
  v10 = v7;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_1001EB35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001EB370(uint64_t a1)
{
  return sub_1001EC730(a1 - 120);
}

_QWORD *sub_1001EB378(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return sub_1001EC988((_QWORD *)(a1 - 120), a2, a3, a4);
}

void sub_1001EB380(uint64_t a1, int a2, int a3, int a4)
{
  int *v7;

  v7 = (int *)(a1 + 1024);
  CFAbsoluteTimeGetCurrent();
  sub_1001F3EC0(v7, a2, a3, a4);
}

uint64_t sub_1001EB3C4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return sub_1001ECB78(a1 - 120, a2, a3);
}

id sub_1001EB3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 - 88), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetBestMatchLocation:forCell:", a3, a2);
}

id sub_1001EB40C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 - 88), "vendor"), "proxyForService:", CFSTR("CLCellTilesManager")), "requestCellTileDownloadByType:lat:lon:seckey:", a2, a3, a4, a5);
}

void sub_1001EB460(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  BOOL v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  __int128 *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 *v234;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  _BYTE v240[32];
  _BYTE v241[32];
  __int128 v242;
  _OWORD v243[2];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _OWORD v252[2];
  __int128 __p;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  int v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  int v277;
  int v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  _BYTE v287[28];
  char v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  _OWORD v297[3];

void sub_1001EC2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001EC348(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  int *v5;
  NSObject *v6;
  _BYTE *v7;
  int v8;
  NSObject *v9;
  const char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _BYTE buf[12];
  char v18;
  int v19;
  _BYTE *v20;
  _BYTE __p[12];
  char v22;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 3)
    goto LABEL_4;
  if (v2 == 9)
  {
    v3 = *(_DWORD *)(a1 + 44);
    v4 = *(unsigned __int16 *)(a1 + 48);
  }
  else
  {
    if (v2 == 7)
    {
LABEL_4:
      v3 = *(_DWORD *)(a1 + 12);
      v4 = *(unsigned __int16 *)(a1 + 16);
      goto LABEL_25;
    }
    if (v2 - 3 > 2)
    {
      if (v2 == 10)
      {
        v3 = *(_DWORD *)(a1 + 600);
        v4 = *(unsigned __int16 *)(a1 + 604);
      }
      else if (v2 == 6)
      {
        v3 = *(_DWORD *)(a1 + 512);
        v4 = *(unsigned __int16 *)(a1 + 516);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
        v6 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_101347C78((unsigned int *)a1, __p);
          v7 = v22 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: which cell is that, %s", buf, 0xCu);
          if (v22 < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
          v13 = qword_1022A02D8;
          sub_101347C78((unsigned int *)a1, buf);
          if (v18 >= 0)
            v14 = buf;
          else
            v14 = *(_BYTE **)buf;
          v19 = 136315138;
          v20 = v14;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 2, "CELL_LOC: which cell is that, %s", (const char *)&v19);
          v16 = v15;
          if (v18 < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "unsigned long long CLCell::getSecKey() const", "%s\n", v16);
          if (v16 != __p)
            free(v16);
        }
        v4 = 0;
        v3 = 0;
      }
    }
    else
    {
      v5 = *(int **)(a1 + 88);
      if (*(int **)(a1 + 96) == v5)
        v3 = -1;
      else
        v3 = *v5;
      v4 = *(unsigned __int16 *)(a1 + 116);
    }
  }
LABEL_25:
  v8 = v4 | (v3 << 16);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CELL_LOC: sec_key, 0x%016llX", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AFDF8);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: sec_key, 0x%016llX", buf);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "unsigned long long CLCell::getSecKey() const", "%s\n", v11);
    if (v12 != __p)
      free(v12);
  }
  return v8;
}

BOOL sub_1001EC730(uint64_t a1)
{
  uint64_t v2;
  int v4;
  int v5;

  v4 = 0;
  v2 = 1;
  if (!sub_1001B7864(a1, &v4, 1))
  {
    v5 = 3;
    return sub_1001B7864(a1, &v5, 1) != 0;
  }
  return v2;
}

BOOL sub_1001EC790(unsigned int a1)
{
  NSObject *v2;
  _BOOL8 result;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  uint8_t buf[4];
  unsigned int v11;
  __int16 v12;
  const char *v13;

  if (a1 < 0xC && ((0xEFFu >> a1) & 1) != 0)
    return (0x7EFu >> a1) & 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214D020);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240450;
    v11 = a1;
    v12 = 2082;
    v13 = sub_1001EFA4C(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CellLoc, Invalid rat, %{public}d, %{public}s, #CloneMe", buf, 0x12u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214D020);
    v4 = qword_1022A0048;
    v7[0] = 67240450;
    v7[1] = a1;
    v8 = 2082;
    v9 = sub_1001EFA4C(a1);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "CellLoc, Invalid rat, %{public}d, %{public}s, #CloneMe", v7, 18);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLUnifiedCellLocationProviderLogic::isAlsQueriable(CLTelephonyService_Type::RadioAccessTechnology)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

_QWORD *sub_1001EC988(_QWORD *result, uint64_t a2, double a3, double a4)
{
  _QWORD *v7;
  NSObject *v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  double v17;

  if (result[140])
  {
    v7 = result;
    result[141] = a2;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v15 = a2;
      v16 = 2050;
      v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CellFlow, timer, %{public}s, %{public}.0f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v10 = 136446466;
      v11 = a2;
      v12 = 2050;
      v13 = a4;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellFlow, timer, %{public}s, %{public}.0f", &v10, 22);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::setCellLocationPropagationTimer(const char *, CFAbsoluteTime, CFTimeInterval)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    v7[141] = a2;
    return sub_1001F40D0(v7[140], a3 + a4);
  }
  return result;
}

uint64_t sub_1001ECB78(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v48;
  int v49;
  char *v50;
  _DWORD v51[2];
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  _BOOL4 v59;
  uint8_t buf[4];
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  _BOOL4 v67;
  __int16 v68;
  _BOOL4 v69;

  v6 = *(unsigned __int8 *)(a1 + 1116);
  if (*(_BYTE *)(a1 + 1116))
  {
    v7 = sub_1001FBE48(a2, a1 + 184);
    if (v7)
      v7 = sub_10013E570((uint64_t)a3, a1 + 880);
    *(_BYTE *)(a1 + 1116) = v7;
    v8 = !v7;
  }
  else
  {
    v8 = 1;
    *(_BYTE *)(a1 + 1116) = 1;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v9 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(unsigned __int8 *)(a1 + 1116);
    *(_DWORD *)buf = 67241216;
    v61 = v6;
    v62 = 1026;
    v63 = v10;
    v64 = 1026;
    v65 = v8;
    v66 = 1026;
    v67 = sub_1001FBE48(a2, a1 + 184);
    v68 = 1026;
    v69 = sub_10013E570((uint64_t)a3, a1 + 880);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CellFlow, skipnotify, in, %{public}d, new, %{public}d, retval, %{public}d, cell, %{public}d, latlon, %{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v48 = qword_1022A0048;
    v49 = *(unsigned __int8 *)(a1 + 1116);
    v51[0] = 67241216;
    v51[1] = v6;
    v52 = 1026;
    v53 = v49;
    v54 = 1026;
    v55 = v8;
    v56 = 1026;
    v57 = sub_1001FBE48(a2, a1 + 184);
    v58 = 1026;
    v59 = sub_10013E570((uint64_t)a3, a1 + 880);
    v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v48, 2, "CellFlow, skipnotify, in, %{public}d, new, %{public}d, retval, %{public}d, cell, %{public}d, latlon, %{public}d", v51, 32);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &)", "%s\n", v50);
    if (v50 != (char *)buf)
      free(v50);
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a2;
  v11 = *(_OWORD *)(a2 + 16);
  v12 = *(_OWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 244) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 80);
  if (a1 + 184 != a2)
    sub_1002A3054((char *)(a1 + 272), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 112);
  v14 = *(_OWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 360) = v16;
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 328) = v15;
  v17 = *(_OWORD *)(a2 + 192);
  v18 = *(_OWORD *)(a2 + 208);
  v19 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 424) = v19;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 392) = v18;
  v20 = *(_OWORD *)(a2 + 256);
  v21 = *(_OWORD *)(a2 + 272);
  v22 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 300);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 472) = v22;
  *(_OWORD *)(a1 + 440) = v20;
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 320));
  v24 = *(_OWORD *)(a2 + 360);
  v23 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 544) = v24;
  *(_OWORD *)(a1 + 560) = v23;
  v25 = *(_OWORD *)(a2 + 440);
  v27 = *(_OWORD *)(a2 + 392);
  v26 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 624) = v25;
  *(_OWORD *)(a1 + 576) = v27;
  *(_OWORD *)(a1 + 592) = v26;
  v29 = *(_OWORD *)(a2 + 472);
  v28 = *(_OWORD *)(a2 + 488);
  v30 = *(_OWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 656) = v29;
  *(_OWORD *)(a1 + 672) = v28;
  *(_OWORD *)(a1 + 640) = v30;
  v31 = *(_OWORD *)(a2 + 640);
  v32 = *(_OWORD *)(a2 + 656);
  v33 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 840) = v32;
  *(_OWORD *)(a1 + 856) = v33;
  *(_OWORD *)(a1 + 824) = v31;
  v34 = *(_OWORD *)(a2 + 576);
  v35 = *(_OWORD *)(a2 + 592);
  v36 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 808) = v36;
  *(_OWORD *)(a1 + 760) = v34;
  *(_OWORD *)(a1 + 776) = v35;
  v37 = *(_OWORD *)(a2 + 512);
  v38 = *(_OWORD *)(a2 + 528);
  v39 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 744) = v39;
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  v40 = a3[1];
  *(_OWORD *)(a1 + 880) = *a3;
  *(_OWORD *)(a1 + 896) = v40;
  v41 = a3[2];
  v42 = a3[3];
  v43 = a3[5];
  *(_OWORD *)(a1 + 944) = a3[4];
  *(_OWORD *)(a1 + 960) = v43;
  *(_OWORD *)(a1 + 912) = v41;
  *(_OWORD *)(a1 + 928) = v42;
  v44 = a3[6];
  v45 = a3[7];
  v46 = a3[8];
  *(_OWORD *)(a1 + 1020) = *(_OWORD *)((char *)a3 + 140);
  *(_OWORD *)(a1 + 992) = v45;
  *(_OWORD *)(a1 + 1008) = v46;
  *(_OWORD *)(a1 + 976) = v44;
  return v8;
}

uint64_t sub_1001ECF48(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v5;
  _QWORD v6[5];
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@CellFlow, outcome, %{public}s, UclpMetric", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v7 = 136446210;
    v8 = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellFlow, outcome, %{public}s, UclpMetric", &v7, 12);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLUnifiedCellLocationProvider::logCellRefreshOutcome(const char *)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100030E64;
  v6[3] = &unk_102131FE8;
  v6[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.outcome"), v6);
}

void sub_1001ED130(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001ED318(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001ED2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001ED318(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    sub_10020097C(v4, a2, a3, a4, 0);
  }
  else
  {
    v5 = sub_10194D590();
    sub_1001ED338(v5);
  }
}

void sub_1001ED338(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  int v10;
  void *v11;
  BOOL v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  char *v30;
  const char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  os_activity_scope_state_s state;
  char v37;
  _OWORD v38[2];
  int v39;
  _BYTE v40[696];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[12];
  __int16 v46;
  int v47;
  _BYTE buf[18];
  __int16 v49;
  const char *v50;
  __int16 v51;
  uint64_t v52;

  CLProfilingIdentify("CLNearbydInterfaceManager::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D6780);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v37 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6780);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v49 = 2082;
      v50 = "activity";
      v51 = 2050;
      v52 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v37 = 0;
  }
  v9 = (const void *)sub_1001DEC98(a2);
  v10 = CFEqual(v9, CFSTR("kCellInfoNotification"));
  v11 = *a3;
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v43 = 0;
    v42 = 0;
    v44 = 0;
    v40[0] = 0;
    v41 = 0;
    memset(v38, 0, sizeof(v38));
    v39 = 1065353216;
    if (!sub_1001DBC88(v11, (uint64_t)v38))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#NearbydIfMgr,#ci,kCellInfoNotification,[3]:error fetching cell info", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_69;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      *(_WORD *)v45 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 16, "#NearbydIfMgr,#ci,kCellInfoNotification,[3]:error fetching cell info", v45, 2);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v16);
      goto LABEL_30;
    }
    *(_DWORD *)buf = 0;
    *(_QWORD *)v45 = buf;
    if (*((_QWORD *)sub_1001DC028((uint64_t)v38, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)v45) + 3))
    {
      sub_1001C1F5C(0, (uint64_t)v38, &v42);
      sub_1001DF2C0(&v42, buf);
      sub_101892924((uint64_t)v40, (uint64_t)buf);
      sub_10087B6D0((uint64_t)buf);
      if (v41)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D6760);
        v13 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * ((v43 - v42) >> 3);
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          *(_DWORD *)v45 = 134218240;
          *(_QWORD *)&v45[4] = 0x66FD0EB66FD0EB67 * ((v43 - v42) >> 3);
          v46 = 1024;
          v47 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", v45, 18);
          v30 = (char *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        v14 = sub_1001EE1E8((uint64_t)v40);
        sub_1001EE260(a4, 0, v14);
        goto LABEL_45;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v21 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_45:
        v22 = v43;
        v23 = v42;
        while (v22 != v23)
        {
          v22 -= 696;
          sub_1005A9904((uint64_t)&v44, v22);
        }
        v43 = v23;
        if (!sub_1001DC538())
          goto LABEL_69;
        *(_DWORD *)buf = 1;
        *(_QWORD *)v45 = buf;
        if (*((_QWORD *)sub_1001DC028((uint64_t)v38, (int *)buf, (uint64_t)&unk_101B9EB60, (_DWORD **)v45) + 3))
        {
          sub_1001C1F5C(1, (uint64_t)v38, &v42);
          sub_1001DF2C0(&v42, buf);
          sub_101892924((uint64_t)v40, (uint64_t)buf);
          sub_10087B6D0((uint64_t)buf);
          if (v41)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021D6760);
            v24 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * ((v43 - v42) >> 3);
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              *(_DWORD *)v45 = 134218240;
              *(_QWORD *)&v45[4] = 0x66FD0EB66FD0EB67 * ((v43 - v42) >> 3);
              v46 = 1024;
              v47 = 1;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[1]:cellcount,%lu,sim %d", v45, 18);
              v33 = (char *)v32;
              sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v32);
              if (v33 != buf)
                free(v33);
            }
            v25 = sub_1001EE1E8((uint64_t)v40);
            sub_1001EE260(a4, 1, v25);
LABEL_69:
            sub_1001DBC50((uint64_t)v38);
            sub_10087B6D0((uint64_t)v40);
            *(_QWORD *)buf = &v42;
            sub_10087B4F8((void ***)buf);
            goto LABEL_70;
          }
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          v28 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_69;
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          *(_WORD *)v45 = 0;
          LODWORD(v35) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", v45, v35);
          v17 = (char *)v34;
          sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v34);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          v26 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = 1;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", buf, 8u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_69;
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          *(_QWORD *)v45 = 0x104000100;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", v45);
          v17 = (char *)v27;
          sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v27);
        }
LABEL_30:
        if (v17 != buf)
          free(v17);
        goto LABEL_69;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      *(_WORD *)v45 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[0]:serving cell missing", v45, 2);
      v20 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v31);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v18 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      *(_QWORD *)v45 = 67109120;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#ci,kCellInfoNotification,[2]:received nil CellInfo from CT for sim %d", v45);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
    }
    if (v20 != buf)
      free(v20);
    goto LABEL_45;
  }
LABEL_70:
  sub_1001EE090(a4, 0, 1);
  sub_1001EE090(a4, 1, 1);
  if (v37)
    os_activity_scope_leave(&state);
}

void sub_1001EE008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  os_activity_scope_state_s v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, os_activity_scope_state_s);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_1001DBC50((uint64_t)va1);
  sub_10087B6D0((uint64_t)va2);
  STACK[0x360] = (unint64_t)&STACK[0x320];
  sub_10087B4F8((void ***)&STACK[0x360]);
  if ((_BYTE)v7)
    os_activity_scope_leave((os_activity_scope_state_t)va);
  _Unwind_Resume(a1);
}

void sub_1001EE090(uint64_t a1, int a2, int a3)
{
  uint64_t *v6;
  const std::string *v7;

  v6 = sub_1001EE134((_QWORD *)(a1 + 8), a2);
  if (v6)
  {
    v7 = (const std::string *)v6;
    if (!a3)
      goto LABEL_8;
    if (*((char *)v6 + 47) < 0)
    {
      if (!v6[4])
        goto LABEL_8;
    }
    else if (!*((_BYTE *)v6 + 47))
    {
LABEL_8:
      if (std::string::compare(v7 + 1, "_SPL::MCC::000"))
        sub_1001EE260(a1, a2, 0);
      return;
    }
    if (sub_1001FCBB4() - *((double *)v6 + 10) < *(double *)&qword_102300918)
      return;
    goto LABEL_8;
  }
}

uint64_t *sub_1001EE134(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1001EE1E8(uint64_t a1)
{
  unsigned int v1;
  unsigned int *v3;

  if (!*(_BYTE *)a1)
    return 0xFFFFFFFFLL;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 3)
    return *(unsigned int *)(a1 + 12);
  if (v1 == 9)
    return *(unsigned int *)(a1 + 44);
  if (v1 == 7)
    return *(unsigned int *)(a1 + 12);
  if (v1 - 3 <= 2)
  {
    v3 = *(unsigned int **)(a1 + 88);
    if (*(unsigned int **)(a1 + 96) != v3)
      return *v3;
    return 0xFFFFFFFFLL;
  }
  if (v1 != 10)
  {
    if (v1 == 6)
      return *(unsigned int *)(a1 + 512);
    return 0xFFFFFFFFLL;
  }
  return *(unsigned int *)(a1 + 600);
}

void sub_1001EE260(uint64_t a1, int a2, int a3)
{
  char **v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  CFStringRef v14;
  unint64_t v15;
  id v16;
  BOOL v17;
  uint64_t *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  std::string::size_type v22;
  NSObject *v23;
  NSObject *v24;
  std::string *p_dst;
  int v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t **v29;
  uint64_t *j;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  int v55;
  std::string::size_type size;
  std::string::size_type v57;
  uint64_t *v58;
  uint64_t *v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  unsigned __int8 *v64;
  std::string *v65;
  NSObject *v66;
  std::string *p_str;
  NSObject *v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  char v73;
  NSObject *v74;
  int v75;
  NSObject *v76;
  uint64_t v77;
  int v78;
  NSObject *v79;
  uint64_t v80;
  int v81;
  std::string::size_type v82;
  int v83;
  const char *v84;
  char *v85;
  NSObject *v86;
  uint64_t v87;
  int v88;
  std::string::size_type v89;
  int v90;
  const char *v91;
  NSObject *v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  int v96;
  const char *v97;
  char *v98;
  std::string::size_type v99;
  int v100;
  const char *v101;
  std::string *v102;
  const char *v103;
  char *v104;
  std::string *v105;
  const char *v106;
  const char *v107;
  char *v108;
  std::string::size_type v109;
  int v110;
  const char *v111;
  char *v112;
  _QWORD *v113;
  const char *v114;
  char *v115;
  const char *v116;
  std::string v117;
  unsigned int v118;
  id v119;
  std::string __str;
  __int16 v121;
  int v122;
  std::string *v123;
  __int128 *v124;
  uint64_t v125;
  double v126;
  std::string __dst;
  int v128;
  int v129;
  __int16 v130;
  std::string *v131;
  _QWORD buf[205];

  v118 = a2;
  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 1) && (!a3 || !*(_BYTE *)(a1 + 96)))
  {
    memset(&v117, 0, sizeof(v117));
    if (!a3)
    {
      v6 = &off_1021D6730;
      goto LABEL_9;
    }
    if (a3 == 901)
    {
      v6 = &off_1021D6738;
LABEL_9:
      std::string::assign(&v117, *v6);
      goto LABEL_135;
    }
    v7 = a3;
    v8 = *(_QWORD *)(a1 + 144);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v10 = a3;
        if (v8 <= a3)
          v10 = a3 % v8;
      }
      else
      {
        v10 = (v8 - 1) & a3;
      }
      v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 136) + 8 * v10);
      if (v11)
      {
        for (i = *v11; i; i = (uint64_t *)*i)
        {
          v13 = i[1];
          if (v13 == a3)
          {
            if (*((_DWORD *)i + 4) == a3)
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v92 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                v93 = i + 3;
                if (*((char *)i + 47) < 0)
                  v93 = (_QWORD *)*v93;
                LODWORD(buf[0]) = 67109378;
                HIDWORD(buf[0]) = a3;
                LOWORD(buf[1]) = 2080;
                *(_QWORD *)((char *)&buf[1] + 2) = v93;
                _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIso,mcc:%d,isCountryCode:%s", (uint8_t *)buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                v113 = i + 3;
                if (*((char *)i + 47) < 0)
                  v113 = (_QWORD *)*v113;
                LODWORD(__str.__r_.__value_.__l.__data_) = 67109378;
                HIDWORD(__str.__r_.__value_.__r.__words[0]) = a3;
                LOWORD(__str.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v113;
                LODWORD(v116) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#toCountryIso,mcc:%d,isCountryCode:%s", &__str, v116);
                v115 = (char *)v114;
                sub_100512490("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIso(int)", "%s\n", v114);
                if (v115 != (char *)buf)
                  free(v115);
              }
              if (*((char *)i + 47) < 0)
                sub_100115CE4(&__dst, (void *)i[3], i[4]);
              else
                __dst = *(std::string *)((_BYTE *)i + 1);
              goto LABEL_132;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v10)
              break;
          }
        }
      }
    }
    snprintf((char *)&__str, 0x20uLL, "%d", a3);
    v14 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&__str, 0x8000100u);
    v119 = 0;
    v15 = _CTServerConnectionCopyISOForMCC(*(_QWORD *)(a1 + 128), v14, &v119);
    v16 = v119;
    memset(&__dst, 0, sizeof(__dst));
    if ((_DWORD)v15)
      v17 = 1;
    else
      v17 = v119 == 0;
    if (v17)
    {
      v18 = (uint64_t *)HIDWORD(v15);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v19 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 67109376;
        HIDWORD(buf[0]) = v15;
        LOWORD(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 2) = HIDWORD(v15);
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#NearbydIfMgr,#toCountryIsoNonCached,_CTServerConnectionCopyISOForMCC failed,domain,%d,error,%d", (uint8_t *)buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_54:
        LODWORD(buf[0]) = a3;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_100115CE4(&buf[1], __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          v26 = buf[0];
          v7 = SLODWORD(buf[0]);
        }
        else
        {
          *(std::string *)&buf[1] = __dst;
          v26 = a3;
        }
        v27 = *(_QWORD *)(a1 + 144);
        if (v27)
        {
          v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
          v28.i16[0] = vaddlv_u8(v28);
          if (v28.u32[0] > 1uLL)
          {
            v18 = (uint64_t *)v7;
            if (v27 <= v7)
              v18 = (uint64_t *)(v7 % v27);
          }
          else
          {
            v18 = (uint64_t *)((v27 - 1) & v7);
          }
          v29 = *(uint64_t ***)(*(_QWORD *)(a1 + 136) + 8 * (_QWORD)v18);
          if (v29)
          {
            for (j = *v29; j; j = (uint64_t *)*j)
            {
              v31 = j[1];
              if (v31 == v7)
              {
                if (*((_DWORD *)j + 4) == v26)
                  goto LABEL_130;
              }
              else
              {
                if (v28.u32[0] > 1uLL)
                {
                  if (v31 >= v27)
                    v31 %= v27;
                }
                else
                {
                  v31 &= v27 - 1;
                }
                if ((uint64_t *)v31 != v18)
                  break;
              }
            }
          }
        }
        v32 = (char *)operator new(0x30uLL);
        v33 = (_QWORD *)(a1 + 152);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = v7;
        *((_DWORD *)v32 + 4) = v26;
        *(_OWORD *)(v32 + 24) = *(_OWORD *)&buf[1];
        *((_QWORD *)v32 + 5) = buf[3];
        memset(&buf[1], 0, 24);
        v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
        v35 = *(float *)(a1 + 168);
        if (v27 && (float)(v35 * (float)v27) >= v34)
        {
          v7 = (unint64_t)v18;
          goto LABEL_120;
        }
        v36 = 1;
        if (v27 >= 3)
          v36 = (v27 & (v27 - 1)) != 0;
        v37 = v36 | (2 * v27);
        v38 = vcvtps_u32_f32(v34 / v35);
        if (v37 <= v38)
          prime = (int8x8_t)v38;
        else
          prime = (int8x8_t)v37;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v27 = *(_QWORD *)(a1 + 144);
        }
        if (*(_QWORD *)&prime <= v27)
        {
          if (*(_QWORD *)&prime >= v27)
            goto LABEL_116;
          v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
          if (v27 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
          {
            v46 = std::__next_prime(v46);
          }
          else
          {
            v48 = 1 << -(char)__clz(v46 - 1);
            if (v46 >= 2)
              v46 = v48;
          }
          if (*(_QWORD *)&prime <= v46)
            prime = (int8x8_t)v46;
          if (*(_QWORD *)&prime >= v27)
          {
            v27 = *(_QWORD *)(a1 + 144);
            goto LABEL_116;
          }
          if (!*(_QWORD *)&prime)
          {
            v94 = *(void **)(a1 + 136);
            *(_QWORD *)(a1 + 136) = 0;
            if (v94)
              operator delete(v94);
            v27 = 0;
            *(_QWORD *)(a1 + 144) = 0;
            goto LABEL_116;
          }
        }
        if (*(_QWORD *)&prime >> 61)
          sub_10025955C();
        v40 = operator new(8 * *(_QWORD *)&prime);
        v41 = *(void **)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v40;
        if (v41)
          operator delete(v41);
        v42 = 0;
        *(int8x8_t *)(a1 + 144) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v42++) = 0;
        while (*(_QWORD *)&prime != v42);
        v43 = (_QWORD *)*v33;
        if (*v33)
        {
          v44 = v43[1];
          v45 = (uint8x8_t)vcnt_s8(prime);
          v45.i16[0] = vaddlv_u8(v45);
          if (v45.u32[0] > 1uLL)
          {
            if (v44 >= *(_QWORD *)&prime)
              v44 %= *(_QWORD *)&prime;
          }
          else
          {
            v44 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v44) = v33;
          v49 = (_QWORD *)*v43;
          if (*v43)
          {
            do
            {
              v50 = v49[1];
              if (v45.u32[0] > 1uLL)
              {
                if (v50 >= *(_QWORD *)&prime)
                  v50 %= *(_QWORD *)&prime;
              }
              else
              {
                v50 &= *(_QWORD *)&prime - 1;
              }
              if (v50 != v44)
              {
                v51 = *(_QWORD *)(a1 + 136);
                if (!*(_QWORD *)(v51 + 8 * v50))
                {
                  *(_QWORD *)(v51 + 8 * v50) = v43;
                  goto LABEL_112;
                }
                *v43 = *v49;
                *v49 = **(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v50);
                **(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v50) = v49;
                v49 = v43;
              }
              v50 = v44;
LABEL_112:
              v43 = v49;
              v49 = (_QWORD *)*v49;
              v44 = v50;
            }
            while (v49);
          }
        }
        v27 = (unint64_t)prime;
LABEL_116:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v27 <= v7)
            v7 %= v27;
        }
        else
        {
          v7 &= v27 - 1;
        }
LABEL_120:
        v52 = *(_QWORD *)(a1 + 136);
        v53 = *(_QWORD **)(v52 + 8 * v7);
        if (v53)
        {
          *(_QWORD *)v32 = *v53;
        }
        else
        {
          *(_QWORD *)v32 = *v33;
          *v33 = v32;
          *(_QWORD *)(v52 + 8 * v7) = v33;
          if (!*(_QWORD *)v32)
          {
LABEL_129:
            ++*(_QWORD *)(a1 + 160);
LABEL_130:
            if (SHIBYTE(buf[3]) < 0)
              operator delete((void *)buf[1]);
LABEL_132:
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v117.__r_.__value_.__l.__data_);
            v117 = __dst;
LABEL_135:
            v55 = SHIBYTE(v117.__r_.__value_.__r.__words[2]);
            size = v117.__r_.__value_.__l.__size_;
            if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
            else
              v57 = v117.__r_.__value_.__l.__size_;
            if (!v57)
            {
LABEL_184:
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v117.__r_.__value_.__l.__data_);
              return;
            }
            v58 = sub_1001EE134((_QWORD *)(a1 + 8), a2);
            if (!v58)
            {
              if (v55 < 0)
                sub_100115CE4(&__str, v117.__r_.__value_.__l.__data_, size);
              else
                __str = v117;
              LOBYTE(v121) = 1;
              v124 = 0;
              v125 = 0;
              v123 = 0;
              v126 = sub_1001FCBB4();
              v65 = (std::string *)sub_101892E80(a1 + 8, a2, &v118);
              std::string::operator=(v65 + 1, &__str);
              v65[2].__r_.__value_.__s.__data_[0] = v121;
              if (&v65[1] != &__str)
                sub_101892BBC((uint64_t)&v65[2].__r_.__value_.__l.__size_, v123, v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (char *)v123) >> 3));
              *(double *)&v65[3].__r_.__value_.__l.__size_ = v126;
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v66 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                p_str = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                LODWORD(buf[0]) = 67109634;
                HIDWORD(buf[0]) = a2;
                LOWORD(buf[1]) = 2080;
                *(_QWORD *)((char *)&buf[1] + 2) = p_str;
                WORD1(buf[2]) = 1024;
                HIDWORD(buf[2]) = v121;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc, did not find instance=%d - added it as new instance with iso=%s, sendIt=%d", (uint8_t *)buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                v102 = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v102 = (std::string *)__str.__r_.__value_.__r.__words[0];
                LODWORD(__dst.__r_.__value_.__l.__data_) = 67109634;
                HIDWORD(__dst.__r_.__value_.__r.__words[0]) = a2;
                LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v102;
                WORD1(__dst.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(__dst.__r_.__value_.__r.__words[2]) = v121;
                LODWORD(v116) = 24;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#setIsoCountryFromMcc, did not find instance=%d - added it as new instance with iso=%s, sendIt=%d", &__dst, v116, LODWORD(v117.__r_.__value_.__l.__data_));
                v104 = (char *)v103;
                sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v103);
                if (v104 != (char *)buf)
                  free(v104);
              }
              buf[0] = &v123;
              sub_100259608((void ***)buf);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_173;
            }
            v59 = v58;
            v60 = (std::string *)(v58 + 3);
            v61 = *((unsigned __int8 *)v58 + 47);
            if ((v61 & 0x80u) == 0)
              v62 = *((unsigned __int8 *)v58 + 47);
            else
              v62 = v58[4];
            if (v62 != v57)
              goto LABEL_168;
            if (v55 >= 0)
              v63 = &v117;
            else
              v63 = (std::string *)v117.__r_.__value_.__r.__words[0];
            if ((v61 & 0x80) != 0)
            {
              if (memcmp(v60->__r_.__value_.__l.__data_, v63, v58[4]))
              {
LABEL_168:
                std::string::operator=(v60, &v117);
                *((double *)v59 + 10) = sub_1001FCBB4();
                *((_BYTE *)v59 + 48) = 1;
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                v68 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  v69 = v59[10];
                  v70 = *((unsigned __int8 *)v59 + 48);
                  LODWORD(buf[0]) = 67109888;
                  HIDWORD(buf[0]) = a2;
                  LOWORD(buf[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1] + 2) = a3;
                  HIWORD(buf[1]) = 2048;
                  buf[2] = v69;
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = v70;
                  _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,Updated existing mccEntry,instance=%d,mcc=%d,timestamp=%.1f,sendIt=%d", (uint8_t *)buf, 0x1Eu);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_173;
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                v99 = v59[10];
                v100 = *((unsigned __int8 *)v59 + 48);
                __str.__r_.__value_.__r.__words[0] = __PAIR64__(a2, 67109888);
                LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = a3;
                HIWORD(__str.__r_.__value_.__r.__words[1]) = 2048;
                __str.__r_.__value_.__r.__words[2] = v99;
                v121 = 1024;
                v122 = v100;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#setIsoCountryFromMcc,Updated existing mccEntry,instance=%d,mcc=%d,timestamp=%.1f,sendIt=%d", &__str, 30, *(double *)&v117.__r_.__value_.__l.__data_, LODWORD(v117.__r_.__value_.__r.__words[1]));
                v85 = (char *)v101;
                sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v101);
                goto LABEL_237;
              }
            }
            else if (*((_BYTE *)v58 + 47))
            {
              v64 = (unsigned __int8 *)(v58 + 3);
              while (*v64 == v63->__r_.__value_.__s.__data_[0])
              {
                ++v64;
                v63 = (std::string *)((char *)v63 + 1);
                if (!--v61)
                  goto LABEL_187;
              }
              goto LABEL_168;
            }
LABEL_187:
            if (*((_BYTE *)v59 + 48))
            {
              if (sub_1001FCBB4() - *((double *)v59 + 10) < 600.0)
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                v76 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  v77 = v59[10];
                  v78 = *((unsigned __int8 *)v59 + 48);
                  LODWORD(buf[0]) = 134218240;
                  *(_QWORD *)((char *)buf + 4) = v77;
                  WORD2(buf[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1] + 6) = v78;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - waiting for kMinIntervalBetweenIDSMessages to expire before sending another IDS message,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                  v109 = v59[10];
                  v110 = *((unsigned __int8 *)v59 + 48);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
                  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v109;
                  WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v110;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - waiting for kMinIntervalBetweenIDSMessages to expire before sending another IDS message,timestamp=%.1f, sendIt=%d", COERCE_DOUBLE(&__str), 18);
                  v112 = (char *)v111;
                  sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v111);
                  if (v112 != (char *)buf)
                    free(v112);
                }
                v71 = 1;
                goto LABEL_174;
              }
              *((double *)v59 + 10) = sub_1001FCBB4();
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v86 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                v87 = v59[10];
                v88 = *((unsigned __int8 *)v59 + 48);
                LODWORD(buf[0]) = 134218240;
                *(_QWORD *)((char *)buf + 4) = v87;
                WORD2(buf[1]) = 1024;
                *(_DWORD *)((char *)&buf[1] + 6) = v88;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new but kMinIntervalBetweenIDSMessages has expired, send another IDS message,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
              }
              if (!sub_1001BFF7C(115, 2))
              {
LABEL_173:
                v71 = 0;
LABEL_174:
                v72 = v118;
                if (*((_BYTE *)sub_101892E80(a1 + 8, v118, &v118) + 48))
                  v73 = v71;
                else
                  v73 = 1;
                if ((v73 & 1) == 0)
                {
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                  v74 = qword_1022A01D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                  {
                    v75 = *((unsigned __int8 *)sub_101892E80(a1 + 8, v72, &v118) + 48);
                    LODWORD(buf[0]) = 67109120;
                    HIDWORD(buf[0]) = v75;
                    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc, calling sendIsoCountryToWatch(instance),sendIt=%d", (uint8_t *)buf, 8u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01D0 != -1)
                      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
                    v95 = qword_1022A01D8;
                    v96 = *((unsigned __int8 *)sub_101892E80(a1 + 8, v72, &v118) + 48);
                    LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
                    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v96;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 2, "#NearbydIfMgr,#setIsoCountryFromMcc, calling sendIsoCountryToWatch(instance),sendIt=%d", &__str);
                    v98 = (char *)v97;
                    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v97);
                    if (v98 != (char *)buf)
                      free(v98);
                  }
                  sub_101892340(a1, v72);
                }
                goto LABEL_184;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v89 = v59[10];
              v90 = *((unsigned __int8 *)v59 + 48);
              LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v89;
              WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v90;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new but kMinIntervalBetweenIDSMessages has expired, send another IDS message,timestamp=%.1f, sendIt=%d", COERCE_DOUBLE(&__str), 18);
              v85 = (char *)v91;
              sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v91);
            }
            else
            {
              *((double *)v59 + 10) = sub_1001FCBB4();
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v79 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                v80 = v59[10];
                v81 = *((unsigned __int8 *)v59 + 48);
                LODWORD(buf[0]) = 134218240;
                *(_QWORD *)((char *)buf + 4) = v80;
                WORD2(buf[1]) = 1024;
                *(_DWORD *)((char *)&buf[1] + 6) = v81;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - setting its timestamp to current time,timestamp=%.1f, sendIt=%d", (uint8_t *)buf, 0x12u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_173;
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021D6760);
              v82 = v59[10];
              v83 = *((unsigned __int8 *)v59 + 48);
              LODWORD(__str.__r_.__value_.__l.__data_) = 134218240;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v82;
              WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v83;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#setIsoCountryFromMcc,isoCountryCode is not new - setting its timestamp to current time,timestamp=%.1f, sendIt=%d", COERCE_DOUBLE(&__str), 18);
              v85 = (char *)v84;
              sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::setIsoCountryFromMcc(SimInstance, int)", "%s\n", v84);
            }
LABEL_237:
            if (v85 != (char *)buf)
              free(v85);
            goto LABEL_173;
          }
          v54 = *(_QWORD *)(*(_QWORD *)v32 + 8);
          if ((v27 & (v27 - 1)) != 0)
          {
            if (v54 >= v27)
              v54 %= v27;
          }
          else
          {
            v54 &= v27 - 1;
          }
          v53 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v54);
        }
        *v53 = v32;
        goto LABEL_129;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v128 = 67109376;
      v129 = v15;
      v130 = 1024;
      LODWORD(v131) = HIDWORD(v15);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 16, "#NearbydIfMgr,#toCountryIsoNonCached,_CTServerConnectionCopyISOForMCC failed,domain,%d,error,%d", &v128, 14);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 0, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v20);
    }
    else
    {
      std::string::assign(&__dst, (const std::string::value_type *)objc_msgSend(objc_msgSend(v119, "uppercaseString"), "UTF8String"));
      v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = __dst.__r_.__value_.__l.__size_;
      if (!v22)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D6760);
        v23 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 67109120;
          HIDWORD(buf[0]) = a3;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIsoNonCached,mcc=%d,countryCode,empty", (uint8_t *)buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D6760);
          v128 = 67109120;
          v129 = a3;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#toCountryIsoNonCached,mcc=%d,countryCode,empty", &v128);
          v108 = (char *)v107;
          sub_100512490("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v107);
          if (v108 != (char *)buf)
            free(v108);
        }
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v18 = &qword_1022A0000;
      v24 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        LODWORD(buf[0]) = 67109378;
        HIDWORD(buf[0]) = a3;
        LOWORD(buf[1]) = 2080;
        *(_QWORD *)((char *)&buf[1] + 2) = p_dst;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#toCountryIsoNonCached,mcc:%d,isCountryCode:%s,fromCache", (uint8_t *)buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_54;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v105 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v105 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v128 = 67109378;
      v129 = a3;
      v130 = 2080;
      v131 = v105;
      LODWORD(v116) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#toCountryIsoNonCached,mcc:%d,isCountryCode:%s,fromCache", &v128, v116);
      v21 = (char *)v106;
      sub_100512490("Generic", 1, 0, 2, "std::string CLNearbydInterfaceManager::toCountryIsoNonCached(int)", "%s\n", v106);
    }
    if (v21 != (char *)buf)
      free(v21);
    goto LABEL_54;
  }
}

void sub_1001EF958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_1001EFA28(unsigned int a1)
{
  if (a1 > 3)
    return "Invalid";
  else
    return off_1021463B8[a1];
}

const char *sub_1001EFA4C(unsigned int a1)
{
  if (a1 > 0xB)
    return "Invalid";
  else
    return off_1021463D8[a1];
}

void sub_1001EFA70(uint64_t a1, int *a2, CFDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLEmergencyController::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102195EB8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102195EB8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001EFC48(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001EFC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001EFC48(uint64_t a1, uint64_t a2, int *a3, CFDictionaryRef *a4)
{
  NSObject *v7;
  const __CFString *v8;
  _BYTE *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  NSObject *v17;
  const void *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  const void *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  const void *v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  const void *v50;
  NSObject *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  const void *v57;
  NSObject *v58;
  NSObject *v59;
  const char *v60;
  char *v61;
  const void *v62;
  NSObject *v63;
  const std::string *v64;
  const std::string *v65;
  NSObject *v66;
  std::string *p_str;
  std::string *v68;
  std::string *v69;
  const std::string *v70;
  const std::string *v71;
  NSObject *v72;
  std::string *v73;
  std::string *v74;
  std::string *v75;
  NSObject *v76;
  const char *v77;
  char *v78;
  NSObject *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  const __CFString *v85;
  _BYTE *v86;
  uint64_t v87;
  const __CFString *v88;
  uint8_t *v89;
  char *v90;
  const void *v91;
  NSObject *v92;
  uint64_t v93;
  const __CFString *v94;
  uint8_t *v95;
  char *v96;
  char *v97;
  const void *v98;
  NSObject *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  const void *v104;
  int v105;
  int v106;
  int v107;
  NSObject *v108;
  int v109;
  int v110;
  int v111;
  NSObject *v112;
  NSObject *v113;
  const char *v114;
  const char *v115;
  char *v116;
  const void *v117;
  NSObject *v118;
  NSObject *v119;
  const char *v120;
  char *v121;
  const void *v122;
  unsigned int **v123;
  const char *v124;
  const void *v125;
  NSObject *v126;
  _QWORD *v127;
  const std::string *v128;
  const std::string *v129;
  const void *v130;
  _BOOL4 v131;
  int v132;
  NSObject *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  const char *v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  const char *v142;
  char *v143;
  const char *v144;
  char *v145;
  const void *v146;
  NSObject *v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  NSObject *v151;
  int v152;
  uint64_t v153;
  _QWORD *v154;
  NSObject *v155;
  const char *v156;
  const char *v157;
  char *v158;
  const void *v159;
  NSObject *v160;
  CFDictionaryRef v161;
  NSObject *v162;
  const char *v163;
  char *v164;
  const char *v165;
  char *v166;
  const char *v167;
  char *v168;
  const char *v169;
  char *v170;
  const char *v171;
  char *v172;
  uint64_t v173;
  int v174;
  const char *v175;
  char *v176;
  CFDictionaryRef v177;
  const char *v178;
  char *v179;
  uint64_t v180;
  int v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  _WORD v185[7];
  BOOL v186;
  std::string v187;
  std::string __dst;
  unsigned int v189;
  __int128 v190;
  int v191;
  std::string v192;
  std::string __str;
  uint8_t buf[16];
  __int128 v195;
  int v196;
  _BYTE __p[36];
  std::string *v198;
  unsigned int v199;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v7 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)__p);
    v9 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EmergCon,EMERGENCY:notification,%{public}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v93 = qword_1022A0088;
    v94 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v94, (uint64_t)buf);
    if ((SBYTE7(v195) & 0x80u) == 0)
      v95 = buf;
    else
      v95 = *(uint8_t **)buf;
    LODWORD(__str.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v93, 0, "#EmergCon,EMERGENCY:notification,%{public}s", &__str, 12);
    v97 = v96;
    if (SBYTE7(v195) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v97);
    if (v97 != __p)
      free(v97);
  }
  if (!*a4)
  {
    v10 = (const void *)sub_1001DEC98(a3);
    if (!CFEqual(CFSTR("kCLTelephonyServiceConnectedNotification"), v10))
    {
      v11 = (const void *)sub_1001DEC98(a3);
      if (!CFEqual(CFSTR("kCLTelephonyServiceDisconnectedNotification"), v11))
      {
        v12 = (const void *)sub_1001DEC98(a3);
        if (!CFEqual(CFSTR("kCLTelephonyServiceResetNotification"), v12))
        {
          v13 = (const void *)sub_1001DEC98(a3);
          if (!CFEqual(CFSTR("kCallStatusChangeNotification"), v13))
          {
            v14 = (const void *)sub_1001DEC98(a3);
            if (!CFEqual(CFSTR("kAtLeastOneVoiceCallInProgress"), v14))
            {
              v15 = (const void *)sub_1001DEC98(a3);
              if (!CFEqual(CFSTR("kNoVoiceCallInProgress"), v15))
              {
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_102195E98);
                v84 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
                {
                  v85 = (const __CFString *)sub_1001DEC98(a3);
                  sub_1001A486C(v85, (uint64_t)__p);
                  v86 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v86;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "#EmergCon,dropping %{public}s,empty data", buf, 0xCu);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(__p, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_102195E98);
                  v87 = qword_1022A0088;
                  v88 = (const __CFString *)sub_1001DEC98(a3);
                  sub_1001A486C(v88, (uint64_t)buf);
                  if ((SBYTE7(v195) & 0x80u) == 0)
                    v89 = buf;
                  else
                    v89 = *(uint8_t **)buf;
                  LODWORD(__str.__r_.__value_.__l.__data_) = 136446210;
                  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v89;
                  LODWORD(v184) = 12;
                  _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v87, 16, "#EmergCon,dropping %{public}s,empty data", &__str, v184);
                  v78 = v90;
                  if (SBYTE7(v195) < 0)
                    operator delete(*(void **)buf);
                  sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v78);
                  if (v78 != __p)
                    goto LABEL_178;
                }
                return;
              }
            }
          }
        }
      }
    }
  }
  sub_1001F63D4(*(_QWORD *)(a1 + 688), a3, a4);
  v16 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(CFSTR("kEmergencyModeChangeNotification"), v16))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = "CLTelephonyService_Type::kEmergencyModeChangeNotification";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
    }
    sub_1005A4CFC((uint64_t)__p, *a4);
    v190 = *(_OWORD *)__p;
    v191 = *(_DWORD *)&__p[16];
    sub_100F799A8(a1, (unsigned __int8 *)&v190);
    return;
  }
  v18 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v18, CFSTR("kRegistrationDisplayStatusNotification")))
  {
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_101260640(*a4, (uint64_t)buf))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v19 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v192.__r_.__value_.__l.__data_) = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
        v20 = *((unsigned __int8 *)sub_1009700C8((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 48);
        *(_QWORD *)__p = 68289539;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1025;
        *(_DWORD *)&__p[26] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
      }
      v21 = *(_QWORD *)(a1 + 688);
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      *(_QWORD *)__p = &__str;
      v22 = sub_1009700C8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      sub_1013929B8(v21, 0, *((unsigned __int8 *)v22 + 48));
      if (*(_BYTE *)(a1 + 133))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v23 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v192.__r_.__value_.__l.__data_) = 1;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
          v24 = *((unsigned __int8 *)sub_1009700C8((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 48);
          *(_QWORD *)__p = 68289539;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 1;
          *(_WORD *)&__p[24] = 1025;
          *(_DWORD *)&__p[26] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kRegistrationDisplayStatusNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
        }
        v25 = *(_QWORD *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 1;
        *(_QWORD *)__p = &__str;
        v26 = sub_1009700C8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        sub_1013929B8(v25, 1, *((unsigned __int8 *)v26 + 48));
      }
      v27 = *(uint64_t **)(a1 + 672);
      if (v27)
      {
        v28 = *v27;
        if (*v27)
        {
          LODWORD(__str.__r_.__value_.__l.__data_) = 0;
          *(_QWORD *)__p = &__str;
          v29 = sub_1009700C8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
          sub_100EEFB48(v28, (const char *)v29 + 24);
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v39 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#EmergCon,kRegistrationDisplayStatusNotification,error fetching InHomeCountry", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kRegistrationDisplayStatusNotification,error fetching InHomeCountry", &__str, v184);
        v116 = (char *)v115;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v115);
        if (v116 != __p)
          free(v116);
      }
    }
    sub_100127554((uint64_t)buf);
    return;
  }
  v30 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v30, CFSTR("kInHomeCountryNotification")))
  {
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_101260140(*a4, (uint64_t)buf))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v31 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v192.__r_.__value_.__l.__data_) = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
        v32 = *((unsigned __int8 *)sub_10096ED18((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 20);
        *(_QWORD *)__p = 68289539;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1025;
        *(_DWORD *)&__p[26] = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kInHomeCountryNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
      }
      v33 = *(_QWORD *)(a1 + 688);
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      *(_QWORD *)__p = &__str;
      v34 = sub_10096ED18((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      sub_1013929B8(v33, 0, *((unsigned __int8 *)v34 + 20));
      if (*(_BYTE *)(a1 + 133))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v35 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v192.__r_.__value_.__l.__data_) = 1;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
          v36 = *((unsigned __int8 *)sub_10096ED18((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 20);
          *(_QWORD *)__p = 68289539;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 1;
          *(_WORD *)&__p[24] = 1025;
          *(_DWORD *)&__p[26] = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kInHomeCountryNotification\", \"sim\":%{public}d, \"inHomeCountry\":%{private}d}", __p, 0x1Eu);
        }
        v37 = *(_QWORD *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 1;
        *(_QWORD *)__p = &__str;
        v38 = sub_10096ED18((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        sub_1013929B8(v37, 1, *((unsigned __int8 *)v38 + 20));
      }
      goto LABEL_73;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v49 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#EmergCon,kInHomeCountryNotification,error fetching InHomeCountry", __p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_73;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    LODWORD(v184) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kInHomeCountryNotification,error fetching InHomeCountry", &__str, v184);
    v121 = (char *)v120;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v120);
    if (v121 == __p)
      goto LABEL_73;
LABEL_255:
    free(v121);
LABEL_73:
    sub_100067AC4((uint64_t)buf);
    return;
  }
  v40 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v40, CFSTR("kDataStatusNotification")))
  {
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_101260B14(*a4, (uint64_t)buf))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v41 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v192.__r_.__value_.__l.__data_) = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
        v42 = *((unsigned __int8 *)sub_10071E124((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 52);
        *(_QWORD *)__p = 68289538;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1026;
        *(_DWORD *)&__p[26] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", __p, 0x1Eu);
      }
      v43 = *(_QWORD *)(a1 + 688);
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      *(_QWORD *)__p = &__str;
      v44 = sub_10071E124((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      sub_1013929B8(v43, 0, *((unsigned __int8 *)v44 + 52));
      if (*(_BYTE *)(a1 + 133))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v45 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v192.__r_.__value_.__l.__data_) = 1;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
          v46 = *((unsigned __int8 *)sub_10071E124((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str) + 52);
          *(_QWORD *)__p = 68289538;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 1;
          *(_WORD *)&__p[24] = 1026;
          *(_DWORD *)&__p[26] = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", __p, 0x1Eu);
        }
        v47 = *(_QWORD *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 1;
        *(_QWORD *)__p = &__str;
        v48 = sub_10071E124((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        sub_1013929B8(v47, 1, *((unsigned __int8 *)v48 + 52));
      }
      goto LABEL_73;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v56 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#EmergCon,kDataStatusNotification,error fetching InHomeCountry", __p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_73;
    bzero(__p, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    LODWORD(v184) = 2;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kDataStatusNotification,error fetching InHomeCountry", &__str, v184);
    v121 = (char *)v124;
    sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v124);
    if (v121 == __p)
      goto LABEL_73;
    goto LABEL_255;
  }
  v50 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v50, CFSTR("kPhoneNumberStatusNotification")))
  {
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_101262A5C(*a4, (uint64_t)buf))
    {
      *(_DWORD *)__p = 0;
      if (sub_1001F8DEC(buf, (int *)__p))
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v51 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v192.__r_.__value_.__l.__data_) = 0;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
          v52 = sub_1009707B4((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str);
          v53 = v52 + 3;
          if (*((char *)v52 + 47) < 0)
            v53 = (_QWORD *)*v53;
          *(_DWORD *)__p = 136380675;
          *(_QWORD *)&__p[4] = v53;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberOne,%{private}s", __p, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v134 = qword_1022A0088;
          v189 = 0;
          v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
          v135 = sub_1009707B4((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, &v192);
          v136 = v135 + 3;
          if (*((char *)v135 + 47) < 0)
            v136 = (_QWORD *)*v136;
          LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v136;
          LODWORD(v184) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v134, 2, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberOne,%{private}s", &__str, v184);
          v138 = (char *)v137;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v137);
          if (v138 != __p)
            free(v138);
        }
        v54 = *(_QWORD *)(a1 + 688);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        v55 = sub_1009707B4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        if (*((char *)v55 + 47) < 0)
          sub_100115CE4(&__dst, (void *)v55[3], v55[4]);
        else
          __dst = *(std::string *)((_BYTE *)v55 + 1);
        sub_101394728(v54, 0, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (*(_BYTE *)(a1 + 133))
      {
        *(_DWORD *)__p = 1;
        if (sub_1001F8DEC(buf, (int *)__p))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v79 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v192.__r_.__value_.__l.__data_) = 1;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
            v80 = sub_1009707B4((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, &__str);
            v81 = v80 + 3;
            if (*((char *)v80 + 47) < 0)
              v81 = (_QWORD *)*v81;
            *(_DWORD *)__p = 136380675;
            *(_QWORD *)&__p[4] = v81;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberTwo,%{private}s", __p, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102195E98);
            v139 = qword_1022A0088;
            v189 = 1;
            v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
            v140 = sub_1009707B4((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, &v192);
            v141 = v140 + 3;
            if (*((char *)v140 + 47) < 0)
              v141 = (_QWORD *)*v141;
            LODWORD(__str.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v141;
            LODWORD(v184) = 12;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v139, 2, "#EmergCon,kPhoneNumberStatusNotification,phoneNumberTwo,%{private}s", &__str, v184);
            v143 = (char *)v142;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v142);
            if (v143 != __p)
              free(v143);
          }
          v82 = *(_QWORD *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          v83 = sub_1009707B4((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
          if (*((char *)v83 + 47) < 0)
            sub_100115CE4(&v187, (void *)v83[3], v83[4]);
          else
            v187 = *(std::string *)((_BYTE *)v83 + 1);
          sub_101394728(v82, 1u, &v187);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v59 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#EmergCon,kPhoneNumberStatusNotification,error fetching phone numbers", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kPhoneNumberStatusNotification,error fetching phone numbers", &__str, v184);
        v61 = (char *)v60;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v60);
        if (v61 != __p)
          free(v61);
      }
    }
    sub_100127554((uint64_t)buf);
    return;
  }
  v57 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v57, CFSTR("kAltAccountConfiguredNotification")))
  {
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (sub_101262BB4(*a4, (BOOL *)&__str))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v58 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__p = 67174657;
        *(_DWORD *)&__p[4] = __str.__r_.__value_.__s.__data_[0];
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#EmergCon,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", __p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&buf[4] = __str.__r_.__value_.__s.__data_[0];
        LODWORD(v184) = 8;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", buf, v184);
        v145 = (char *)v144;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v144);
        if (v145 != __p)
          free(v145);
      }
      sub_101395518(*(_QWORD *)(a1 + 688), __str.__r_.__value_.__s.__data_[0]);
      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v76 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "#EmergCon,kAltAccountConfiguredNotification,error fetching alt account configuration", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_WORD *)buf = 0;
      LODWORD(v184) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kAltAccountConfiguredNotification,error fetching alt account configuration", buf, v184);
      v78 = (char *)v77;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v77);
      goto LABEL_145;
    }
    return;
  }
  v62 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v62, CFSTR("kSimStatusChangeNotification")))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v63 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)__p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = "CLTelephonyService_Type::kSimStatusChangeNotification";
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
    }
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_1012615CC(*a4, (uint64_t)buf))
    {
      memset(&__str, 0, sizeof(__str));
      memset(&v192, 0, sizeof(v192));
      v189 = 0;
      *(_QWORD *)__p = &v189;
      v64 = (const std::string *)sub_100970464((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      std::string::operator=(&__str, v64 + 1);
      v189 = 0;
      *(_QWORD *)__p = &v189;
      v65 = (const std::string *)sub_100970464((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      std::string::operator=(&v192, v65 + 2);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v66 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        v68 = &v192;
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v68 = (std::string *)v192.__r_.__value_.__r.__words[0];
        *(_QWORD *)__p = 68289795;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 2081;
        *(_QWORD *)&__p[26] = p_str;
        *(_WORD *)&__p[34] = 2081;
        v198 = v68;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSimStatusChangeNotification\", \"sim\":%{public}d, \"imsi\":%{private, location:escape_only}s, \"imei\":%{private, location:escape_only}s}", __p, 0x2Cu);
      }
      sub_101393254(*(_QWORD *)(a1 + 688), 0, &__str, &v192);
      v189 = 0;
      *(_QWORD *)__p = &v189;
      v69 = (std::string *)sub_1009707B4(a1 + 312, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
      std::string::operator=(v69 + 1, &__str);
      if (*(_BYTE *)(a1 + 133))
      {
        v189 = 1;
        *(_QWORD *)__p = &v189;
        v70 = (const std::string *)sub_100970464((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        std::string::operator=(&__str, v70 + 1);
        v189 = 1;
        *(_QWORD *)__p = &v189;
        v71 = (const std::string *)sub_100970464((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        std::string::operator=(&v192, v71 + 2);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v72 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          v73 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v73 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v74 = &v192;
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v74 = (std::string *)v192.__r_.__value_.__r.__words[0];
          *(_QWORD *)__p = 68289795;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 1;
          *(_WORD *)&__p[24] = 2081;
          *(_QWORD *)&__p[26] = v73;
          *(_WORD *)&__p[34] = 2081;
          v198 = v74;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSimStatusChangeNotification\", \"sim\":%{public}d, \"imsi\":%{private, location:escape_only}s, \"imei\":%{private, location:escape_only}s}", __p, 0x2Cu);
        }
        sub_101393254(*(_QWORD *)(a1 + 688), 1, &__str, &v192);
        v189 = 1;
        *(_QWORD *)__p = &v189;
        v75 = (std::string *)sub_1009707B4(a1 + 312, (int *)&v189, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
        std::string::operator=(v75 + 1, &__str);
      }
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v92 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "#EmergCon,kSimStatusChangeNotification,error fetching imsi and imei", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kSimStatusChangeNotification,error fetching imsi and imei", &__str, v184);
        v158 = (char *)v157;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v157);
        if (v158 != __p)
          free(v158);
      }
    }
    sub_10097039C((uint64_t)buf);
    return;
  }
  v91 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v91, CFSTR("kCellInfoNotification")))
  {
    *(_OWORD *)buf = 0u;
    v195 = 0u;
    v196 = 1065353216;
    if (sub_1001DBC88(*a4, (uint64_t)buf))
    {
      sub_1001F31B0(a1, 0, (uint64_t)buf);
      if (sub_1001DC538())
        sub_1001F31B0(a1, 1, (uint64_t)buf);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v103 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "#EmergCon,#ci,kCellInfoNotification,error fetching cell info", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,#ci,kCellInfoNotification,error fetching cell info", &__str, v184);
        v164 = (char *)v163;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v163);
        if (v164 != __p)
          free(v164);
      }
    }
    sub_1001DBC50((uint64_t)buf);
    return;
  }
  v98 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v98, CFSTR("kSmsSentNotification")))
  {
    *(_QWORD *)buf = 0;
    v186 = 0;
    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
    LODWORD(v192.__r_.__value_.__l.__data_) = -1;
    v189 = -1;
    if (sub_101262680(*a4, buf, &v186, &__str, &v192, &v189))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v99 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v100 = objc_msgSend(*(id *)buf, "slotID");
        *(_QWORD *)__p = 68290306;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = v100;
        *(_WORD *)&__p[24] = 1026;
        *(_DWORD *)&__p[26] = v186;
        *(_WORD *)&__p[30] = 1026;
        *(_DWORD *)&__p[32] = __str.__r_.__value_.__l.__data_;
        LOWORD(v198) = 1026;
        *(_DWORD *)((char *)&v198 + 2) = v192.__r_.__value_.__l.__data_;
        HIWORD(v198) = 1026;
        v199 = v189;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSmsSentNotification\", \"inst\":%{public}d, \"success\":%{public}hhd, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", __p, 0x30u);
      }
      v101 = *(_QWORD *)(a1 + 688);
      v102 = sub_100099E54((uint64_t)objc_msgSend(*(id *)buf, "slotID"));
      sub_101392FA0(v101, v102, v186, LODWORD(__str.__r_.__value_.__l.__data_), LODWORD(v192.__r_.__value_.__l.__data_), v189);

      return;
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v113 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "#EmergCon,kSmsSentNotification,error fetching SMS info", __p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v185[0] = 0;
      LODWORD(v184) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kSmsSentNotification,error fetching SMS info", v185, v184);
      v78 = (char *)v114;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v114);
      goto LABEL_145;
    }
  }
  else
  {
    v104 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v104, CFSTR("kSubscriberMccAndMncNotification")))
    {
      *(_OWORD *)buf = 0u;
      v195 = 0u;
      v196 = 1065353216;
      if (sub_1001E56B4(*a4, (uint64_t)buf))
      {
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        v105 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        v106 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        v107 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)
               + 28);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v108 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)__p = 68290050;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = 0;
          *(_WORD *)&__p[24] = 1026;
          *(_DWORD *)&__p[26] = v105;
          *(_WORD *)&__p[30] = 1026;
          *(_DWORD *)&__p[32] = v106;
          LOWORD(v198) = 1026;
          *(_DWORD *)((char *)&v198 + 2) = v107;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", __p, 0x2Au);
        }
        sub_101393840(*(std::string **)(a1 + 688), 0, v105, v106);
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        *((_DWORD *)sub_10006A62C(a1 + 352, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5) = v105;
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(_QWORD *)__p = &__str;
        *((_DWORD *)sub_10006A62C(a1 + 392, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5) = v106;
        if (*(_BYTE *)(a1 + 133))
        {
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          v109 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          v110 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          v111 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 28);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v112 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)__p = 68290050;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 1026;
            *(_DWORD *)&__p[20] = 1;
            *(_WORD *)&__p[24] = 1026;
            *(_DWORD *)&__p[26] = v109;
            *(_WORD *)&__p[30] = 1026;
            *(_DWORD *)&__p[32] = v110;
            LOWORD(v198) = 1026;
            *(_DWORD *)((char *)&v198 + 2) = v111;
            _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon,kSubscriberMccAndMncNotification\", \"sim\":%{public}d, \"mcc\":%{public}d, \"mnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", __p, 0x2Au);
          }
          sub_101393840(*(std::string **)(a1 + 688), 1, v109, v110);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          *((_DWORD *)sub_10006A62C(a1 + 352, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5) = v109;
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          *(_QWORD *)__p = &__str;
          *((_DWORD *)sub_10006A62C(a1 + 392, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5) = v110;
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v119 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "#EmergCon,kSubscriberMccAndMncNotification,error fetching MCC and MNC", __p, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          LODWORD(v184) = 2;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kSubscriberMccAndMncNotification,error fetching MCC and MNC", &__str, v184);
          v166 = (char *)v165;
          sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v165);
          if (v166 != __p)
            free(v166);
        }
      }
      sub_100067AC4((uint64_t)buf);
      return;
    }
    v117 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(CFSTR("kCLTelephonyServiceDisconnectedNotification"), v117))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v118 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)__p = 68289282;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2082;
        *(_QWORD *)&__p[20] = "CLTelephonyService_Type::kDisconnectedNotification";
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EmergCon EMERGENCY:notification\", \"notif\":%{public, location:escape_only}s}", __p, 0x1Cu);
      }
      *(_QWORD *)(a1 + 48) = 0;
      sub_100F7A08C(a1, 0);
      *(_BYTE *)(a1 + 92) = 0;
      *(_QWORD *)(a1 + 96) = 0x400000000;
      *(_WORD *)(a1 + 104) = 256;
      *(_BYTE *)(a1 + 106) = 0;
      *(_DWORD *)(a1 + 108) = 255;
      sub_100F7798C(a1);
      return;
    }
    v122 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(CFSTR("kLinkQualityNotification"), v122))
    {
      v123 = *(unsigned int ***)(a1 + 672);
      if (v123 && *v123)
        sub_100EEFFF0(*v123, *a4);
      return;
    }
    v125 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(CFSTR("kCLCellularTransmitStateNotification"), v125))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v126 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome RRC notification", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)buf = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome RRC notification", buf, v184);
        v168 = (char *)v167;
        sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v167);
        if (v168 != __p)
          free(v168);
      }
      memset(__p, 0, 24);
      sub_1001C1D6C((int)buf, *a4);
      __str.__r_.__value_.__s.__data_[0] = 0;
      v127 = *(_QWORD **)(a1 + 672);
      if (v127 && *v127)
      {
        if ((sub_1001E48E4((uint64_t)buf, (uint64_t)CFSTR("kCLCellularTransmitStateNotification"), (BOOL *)&__str) & 1) != 0)
        {
          v128 = **(const std::string ***)(a1 + 672);
          if (__str.__r_.__value_.__s.__data_[0])
            v129 = v128 + 4;
          else
            v129 = v128 + 3;
        }
        else
        {
          v129 = (const std::string *)(**(_QWORD **)(a1 + 672) + 48);
        }
        std::string::operator=((std::string *)__p, v129);
        sub_100EF033C(**(_QWORD **)(a1 + 672), (uint64_t)__p);
      }
      sub_10011A5A8(buf);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      return;
    }
    v130 = (const void *)sub_1001DEC98(a3);
    if (!CFEqual(CFSTR("kStewieSupportNotification"), v130))
    {
      v146 = (const void *)sub_1001DEC98(a3);
      if (CFEqual(v146, CFSTR("kImsRegStatusNotification")))
      {
        *(_OWORD *)buf = 0u;
        v195 = 0u;
        v196 = 1065353216;
        if (sub_1012643C4(*a4, (uint64_t)buf))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v147 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(v192.__r_.__value_.__l.__data_) = 0;
            *(_QWORD *)__p = &v192;
            v148 = *((unsigned __int8 *)sub_100970A84((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 20);
            LODWORD(__str.__r_.__value_.__l.__data_) = 67240192;
            HIDWORD(__str.__r_.__value_.__r.__words[0]) = v148;
            _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", (uint8_t *)&__str, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102195E98);
            v173 = qword_1022A0088;
            v189 = 0;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
            v174 = *((unsigned __int8 *)sub_100970A84((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, &__str) + 20);
            LODWORD(v192.__r_.__value_.__l.__data_) = 67240192;
            HIDWORD(v192.__r_.__value_.__r.__words[0]) = v174;
            LODWORD(v184) = 8;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v173, 2, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", &v192, v184);
            v176 = (char *)v175;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v175);
            if (v176 != __p)
              free(v176);
          }
          v149 = *(_QWORD *)(a1 + 688);
          LODWORD(__str.__r_.__value_.__l.__data_) = 0;
          *(_QWORD *)__p = &__str;
          v150 = sub_100970A84((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
          sub_1013957D0(v149, 0, (_BYTE *)v150 + 20);
          if (sub_1001DC538())
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102195E98);
            v151 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v192.__r_.__value_.__l.__data_) = 1;
              *(_QWORD *)__p = &v192;
              v152 = *((unsigned __int8 *)sub_100970A84((uint64_t)buf, (int *)&v192, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 20);
              LODWORD(__str.__r_.__value_.__l.__data_) = 67240192;
              HIDWORD(__str.__r_.__value_.__r.__words[0]) = v152;
              _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", (uint8_t *)&__str, 8u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_102195E98);
              v180 = qword_1022A0088;
              v189 = 1;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
              v181 = *((unsigned __int8 *)sub_100970A84((uint64_t)buf, (int *)&v189, (uint64_t)&unk_101B9EB60, &__str) + 20);
              LODWORD(v192.__r_.__value_.__l.__data_) = 67240192;
              HIDWORD(v192.__r_.__value_.__r.__words[0]) = v181;
              LODWORD(v184) = 8;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v180, 2, "#EmergCon, Received kImsRegStatusNotification with sms reg status %{public}d", &v192, v184);
              v183 = (char *)v182;
              sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v182);
              if (v183 != __p)
                free(v183);
            }
            v153 = *(_QWORD *)(a1 + 688);
            LODWORD(__str.__r_.__value_.__l.__data_) = 1;
            *(_QWORD *)__p = &__str;
            v154 = sub_100970A84((uint64_t)buf, (int *)&__str, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
            sub_1013957D0(v153, 1u, (_BYTE *)v154 + 20);
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v162 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_ERROR, "#EmergCon,#ci,kImsRegStatusNotification,error fetching cell info", __p, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102195E98);
            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
            LODWORD(v184) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,#ci,kImsRegStatusNotification,error fetching cell info", &__str, v184);
            v172 = (char *)v171;
            sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v171);
            if (v172 != __p)
              free(v172);
          }
        }
        sub_100067AC4((uint64_t)buf);
      }
      else
      {
        v159 = (const void *)sub_1001DEC98(a3);
        if (CFEqual(v159, CFSTR("kVoiceLinkQualityNotification")))
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          v160 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
          {
            v161 = *a4;
            *(_DWORD *)__p = 138543362;
            *(_QWORD *)&__p[4] = v161;
            _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "#EmergCon, Received kVoiceLinkQualityNotification with vlqm %{public}@", __p, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_102195E98);
            v177 = *a4;
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v177;
            LODWORD(v184) = 12;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon, Received kVoiceLinkQualityNotification with vlqm %{public}@", buf, v184);
            v179 = (char *)v178;
            sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v178);
            if (v179 != __p)
              free(v179);
          }
          if (sub_1012648F0(*a4, a1 + 472))
            sub_101395288(*(_QWORD *)(a1 + 688), a1 + 472);
        }
      }
      return;
    }
    __str.__r_.__value_.__s.__data_[0] = 0;
    v131 = sub_1012641BC(*a4, &__str);
    v132 = _os_feature_enabled_impl("CoreTelephony", "Bifrost");
    if (v131)
    {
      if (v132)
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        v133 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__p = 67240192;
          *(_DWORD *)&__p[4] = __str.__r_.__value_.__s.__data_[0];
          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "#EmergCon,kStewieSupportNotification,supported,%{public}d", __p, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_102195E98);
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = __str.__r_.__value_.__s.__data_[0];
          LODWORD(v184) = 8;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,kStewieSupportNotification,supported,%{public}d", buf, v184);
          v170 = (char *)v169;
          sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v169);
          if (v170 != __p)
            free(v170);
        }
      }
      sub_101395524(*(_QWORD *)(a1 + 688), __str.__r_.__value_.__s.__data_[0]);
      return;
    }
    if (v132)
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      v155 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "#EmergCon,kStewieSupportNotification,error fetching Stewie support", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_102195E98);
        *(_WORD *)buf = 0;
        LODWORD(v184) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0088, 16, "#EmergCon,kStewieSupportNotification,error fetching Stewie support", buf, v184);
        v78 = (char *)v156;
        sub_100512490("Generic", 1, 0, 0, "void CLEmergencyController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v156);
LABEL_145:
        if (v78 == __p)
          return;
LABEL_178:
        free(v78);
      }
    }
  }
}

void sub_1001F2FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  sub_100067AC4((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_1001F31B0(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v5;
  unsigned int v6;
  _DWORD **v7;
  int v8;
  _QWORD *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;

  v23 = a2;
  v21 = 0;
  v20 = 0;
  v22 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  *(_QWORD *)v24 = &v23;
  if (!*((_QWORD *)sub_1001C1FBC(a3, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24) + 3))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    *(_DWORD *)v24 = 67109120;
    *(_DWORD *)&v24[4] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#ci,kCellInfoNotification,received nil CellInfo from CT for sim %d", v24);
    v12 = (char *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v11);
LABEL_44:
    if (v12 != buf)
      free(v12);
    goto LABEL_29;
  }
  sub_1001C1F5C(v23, a3, &v20);
  sub_1001DF2C0(&v20, buf);
  sub_101892924((uint64_t)&v17, (uint64_t)buf);
  sub_10087B6D0((uint64_t)buf);
  if (v19)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = 0x66FD0EB66FD0EB67 * ((v21 - v20) >> 3);
      v28 = 1024;
      v29 = v23;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,cellcount,%lu,sim %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_102195E98);
      *(_DWORD *)v24 = 134218240;
      *(_QWORD *)&v24[4] = 0x66FD0EB66FD0EB67 * ((v21 - v20) >> 3);
      v25 = 1024;
      v26 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#ci,kCellInfoNotification,cellcount,%lu,sim %d", v24, 18);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_1001F63DC(*(_QWORD *)(a1 + 688), v23, (uint64_t)&v17);
    v6 = v18;
    *(_QWORD *)v24 = &v23;
    *((_DWORD *)sub_10006A62C(a1 + 272, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24) + 5) = v6;
    v7 = *(_DWORD ***)(a1 + 672);
    if (v7 && *v7)
      sub_1001F3890(*v7, (uint64_t)&v17);
    if (v18 >= 3)
    {
      if (v18 == 9)
      {
        v8 = *(_DWORD *)sub_100706590((uint64_t)&v17);
        *(_QWORD *)v24 = &v23;
        v9 = sub_10006A62C(a1 + 432, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24);
        goto LABEL_15;
      }
      if (v18 != 7)
      {
        if (v18 - 3 <= 2)
        {
          *(_QWORD *)v24 = &v23;
          *((_DWORD *)sub_10006A62C(a1 + 432, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24) + 5) = -1;
          goto LABEL_29;
        }
        if (v18 == 10)
        {
          v8 = *(_DWORD *)sub_1007073B4((uint64_t)&v17);
          *(_QWORD *)v24 = &v23;
          v9 = sub_10006A62C(a1 + 432, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24);
        }
        else
        {
          if (v18 != 6)
            goto LABEL_29;
          v8 = *(_DWORD *)sub_1001E3CA4((uint64_t)&v17);
          *(_QWORD *)v24 = &v23;
          v9 = sub_10006A62C(a1 + 432, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24);
        }
        goto LABEL_15;
      }
    }
    v8 = *(_DWORD *)sub_1007057DC((uint64_t)&v17);
    *(_QWORD *)v24 = &v23;
    v9 = sub_10006A62C(a1 + 432, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)v24);
LABEL_15:
    *((_DWORD *)v9 + 5) = v8;
    goto LABEL_29;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102195E98);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EmergCon,#ci,kCellInfoNotification,serving cell missing", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102195E98);
    *(_WORD *)v24 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergCon,#ci,kCellInfoNotification,serving cell missing", v24, 2, v17);
    v12 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLEmergencyController::processCellInfoNotification(SimInstance, std::unordered_map<SimInstance, CLCTCellInfo> &)", "%s\n", v16);
    goto LABEL_44;
  }
LABEL_29:
  sub_10087B6D0((uint64_t)&v17);
  *(_QWORD *)buf = &v20;
  sub_10087B4F8((void ***)buf);
}

void sub_1001F384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10087B6D0((uint64_t)va);
  STACK[0x310] = (unint64_t)&STACK[0x2D0];
  sub_10087B4F8((void ***)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_1001F3890(_DWORD *a1, uint64_t a2)
{
  NSObject *v3;
  void *v5;
  void **v10;
  int v12;
  int v14;
  int v15;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  void *__p[2];
  uint64_t v26;
  _DWORD v27[4];
  uint8_t buf[16];
  uint64_t v29;

  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  if (*(_BYTE *)(a2 + 696))
  {
    sub_1001C3454(a2, buf);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)buf;
    v26 = v29;
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, no serving cell", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      LOWORD(v27[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, no serving cell", v27, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRatNotification(const std::optional<CLCell> &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    switch(HIBYTE(v26))
    {
      case 3:
        if (LOWORD(__p[0]) == 21319 && BYTE2(__p[0]) == 77)
          goto LABEL_82;
        goto LABEL_54;
      case 4:
        goto LABEL_52;
      case 5:
        if (LODWORD(__p[0]) == 1296319315 && BYTE4(__p[0]) == 65)
          goto LABEL_53;
        if (HIBYTE(v26) == 3)
          goto LABEL_55;
        if (HIBYTE(v26) != 4)
          goto LABEL_70;
LABEL_52:
        if (LODWORD(__p[0]) == 1095582787)
          goto LABEL_53;
LABEL_54:
        if (HIBYTE(v26) != 3)
          goto LABEL_70;
LABEL_55:
        if (LOWORD(__p[0]) == 21580 && BYTE2(__p[0]) == 69)
          goto LABEL_84;
        v10 = __p;
        break;
      case 7:
        if (LODWORD(__p[0]) != 1852534357 || *(_DWORD *)((char *)__p + 3) != 1853321070)
          goto LABEL_70;
        goto LABEL_83;
      default:
        goto LABEL_70;
    }
LABEL_60:
    v14 = *(unsigned __int16 *)v10;
    v15 = *((unsigned __int8 *)v10 + 2);
    if (v14 == 21326 && v15 == 65)
    {
      v12 = 4;
      goto LABEL_73;
    }
    goto LABEL_70;
  }
  v5 = __p[1];
  if (__p[1] == (void *)3)
  {
    if (*(_WORD *)__p[0] == 21319 && *((_BYTE *)__p[0] + 2) == 77)
    {
LABEL_82:
      v12 = 1;
      goto LABEL_73;
    }
    v5 = __p[1];
  }
  else if (__p[1] == (void *)7 && *(_DWORD *)__p[0] == 1852534357 && *(_DWORD *)((char *)__p[0] + 3) == 1853321070)
  {
LABEL_83:
    v12 = 0;
    goto LABEL_73;
  }
  if (v5 == (void *)5)
  {
    if (*(_DWORD *)__p[0] == 1296319315 && *((_BYTE *)__p[0] + 4) == 65)
      goto LABEL_53;
    v5 = __p[1];
  }
  if (v5 == (void *)4)
  {
    if (*(_DWORD *)__p[0] != 1095582787)
    {
      v5 = __p[1];
      goto LABEL_39;
    }
LABEL_53:
    v12 = 2;
    goto LABEL_73;
  }
LABEL_39:
  if (v5 == (void *)3)
  {
    if (*(_WORD *)__p[0] == 21580 && *((_BYTE *)__p[0] + 2) == 69)
    {
LABEL_84:
      v12 = 3;
      goto LABEL_73;
    }
    if (__p[1] == (void *)3)
    {
      v10 = (void **)__p[0];
      goto LABEL_60;
    }
  }
LABEL_70:
  if (sub_100839084(__p, "NR"))
    v12 = 5;
  else
    v12 = 6;
LABEL_73:
  if (v12 != a1[30])
  {
    a1[30] = v12;
    objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", objc_msgSend(objc_alloc((Class)BMDeviceCellularQualityStatus), "initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), a1[30], a1[31], +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[32]), a1[33]));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021918A0);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v19 = a1[30];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, rat, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021918A0);
      v20 = a1[30];
      v27[0] = 67109120;
      v27[1] = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#EmergencyBiome, Biome donation, rat, %d", v27);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRatNotification(const std::optional<CLCell> &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
}

void sub_1001F3E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001F3EC0(int *a1, int a2, int a3, int a4)
{
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v5 = a1[1] + a2;
  ++*a1;
  a1[1] = v5;
  v6 = a1[3] + a4;
  a1[2] += a3;
  a1[3] = v6;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021497E0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a1;
    v9 = a1[1];
    v10 = a1[2];
    v11 = a1[3];
    *(_DWORD *)buf = 67240960;
    v25 = v8;
    v26 = 1026;
    v27 = v9;
    v28 = 1026;
    v29 = v10;
    v30 = 1026;
    v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@Celltileusage, attempt, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021497E0);
    v12 = *a1;
    v13 = a1[1];
    v14 = a1[2];
    v15 = a1[3];
    v17[0] = 67240960;
    v17[1] = v12;
    v18 = 1026;
    v19 = v13;
    v20 = 1026;
    v21 = v14;
    v22 = 1026;
    v23 = v15;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@Celltileusage, attempt, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d", v17, 26);
    sub_100512490("Generic", 1, 0, 2, "void CLCellLocationMetrics::locationAttempt(int, int, int, CFAbsoluteTime)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
}

id sub_1001F40D0(uint64_t a1, double a2)
{
  NSObject *v4;
  _QWORD *v5;
  double v6;
  _QWORD *v8;
  double v9;
  char *v10;
  double v11;
  int v12;
  _QWORD *v13;
  __int16 v14;
  double v15;
  uint8_t buf[4];
  _QWORD *v17;
  __int16 v18;
  double v19;

  objc_msgSend(*(id *)(a1 + 24), "assertInside");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  v4 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v5 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v5 = (_QWORD *)*v5;
    v6 = -1.0;
    if (a2 != 1.79769313e308)
      v6 = a2;
    *(_DWORD *)buf = 136315394;
    v17 = v5;
    v18 = 2048;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setNextFireDate, %s, %.1lf", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    v8 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v8 = (_QWORD *)*v8;
    v9 = -1.0;
    if (a2 != 1.79769313e308)
      v9 = a2;
    v12 = 136315394;
    v13 = v8;
    v14 = 2048;
    v15 = v9;
    LODWORD(v11) = 22;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "setNextFireDate, %s, %.1lf", (const char *)&v12, v11);
    sub_100512490("Generic", 1, 0, 2, "void CLPersistentTimer::setNextFireDate(CFAbsoluteTime)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return objc_msgSend(*(id *)a1, "setNextFireTime:", a2);
}

void sub_1001F42F8(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAnalyticsLogger::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 208), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102169770);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAnalyticsLogger::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102169770);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAnalyticsLogger::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001F44D0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001F44B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001F44D0(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  NSObject *v7;
  const __CFString *v8;
  void **v9;
  const void *v10;
  NSObject *v11;
  const char *v12;
  void **v13;
  const void *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  const void *v19;
  NSObject *v20;
  _DWORD *v21;
  NSObject *v22;
  const void *v23;
  void *v24;
  NSObject *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  NSObject *v35;
  const char *v36;
  void **v37;
  const void *v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  NSObject *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  const char *v58;
  void **v59;
  NSObject *v60;
  uint64_t i;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  NSObject *v67;
  uint64_t v68;
  const __CFString *v69;
  uint8_t *v70;
  char *v71;
  char *v72;
  const char *v73;
  void **v74;
  const char *v75;
  void **v76;
  const char *v77;
  void **v78;
  const char *v79;
  void **v80;
  const char *v81;
  void **v82;
  const char *v83;
  void **v84;
  const char *v85;
  void **v86;
  const char *v87;
  void **v88;
  uint64_t v89;
  _DWORD v90[8];
  _DWORD v91[8];
  _DWORD v92[8];
  _DWORD v93[8];
  _DWORD v94[8];
  _DWORD v95[8];
  __int128 v96;
  void *v97;
  int v98;
  _DWORD v99[8];
  _DWORD v100[8];
  __int128 v101;
  void *v102;
  int v103;
  _DWORD v104[8];
  _DWORD v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD v109[8];
  _DWORD v110[9];
  int v111;
  int v112;
  uint8_t buf[16];
  __int128 v114;
  int v115;
  char v116;
  _OWORD v117[2];
  int v118;
  void *__p[3];
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v7 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)__p);
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ca,onTelephonyServiceNotification,%{public}s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v68 = qword_1022A02A8;
    v69 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v69, (uint64_t)buf);
    if ((SBYTE7(v114) & 0x80u) == 0)
      v70 = buf;
    else
      v70 = *(uint8_t **)buf;
    LODWORD(v117[0]) = 136446210;
    *(_QWORD *)((char *)v117 + 4) = v70;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v68, 0, "#ca,onTelephonyServiceNotification,%{public}s", v117, 12);
    v72 = v71;
    if (SBYTE7(v114) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v72);
    if (v72 != (char *)__p)
      free(v72);
  }
  v10 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(CFSTR("kEmergencyModeChangeNotification"), v10))
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v11 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ca,kEmergencyModeChangeNotification", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      *(_WORD *)buf = 0;
      LODWORD(v89) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kEmergencyModeChangeNotification", buf, v89);
      v13 = (void **)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v12);
      if (v13 != __p)
        free(v13);
    }
    return;
  }
  v14 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v14, CFSTR("kDataStatusNotification")))
  {
    *(_OWORD *)buf = 0u;
    v114 = 0u;
    v115 = 1065353216;
    if (sub_101260B14(*a4, (uint64_t)buf))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v15 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v106) = 0;
        *(_QWORD *)&v117[0] = &v106;
        v16 = *((unsigned __int8 *)sub_10071E124((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)
              + 52);
        __p[0] = (void *)68289538;
        LOWORD(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 2) = "";
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = 0;
        v120 = 1026;
        v121 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", (uint8_t *)__p, 0x1Eu);
      }
      if (sub_1001DC538())
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v17 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v106) = 1;
          *(_QWORD *)&v117[0] = &v106;
          v18 = *((unsigned __int8 *)sub_10071E124((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)
                + 52);
          __p[0] = (void *)68289538;
          LOWORD(__p[1]) = 2082;
          *(void **)((char *)&__p[1] + 2) = "";
          WORD1(__p[2]) = 1026;
          HIDWORD(__p[2]) = 1;
          v120 = 1026;
          v121 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kDataStatusNotification\", \"inst\":%{public}d, \"InHomeCountry\":%{public}d}", (uint8_t *)__p, 0x1Eu);
        }
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v22 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#ca,kDataStatusNotification,error fetching InHomeCountry", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        LOWORD(v117[0]) = 0;
        LODWORD(v89) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kDataStatusNotification,error fetching InHomeCountry", v117, v89);
        v74 = (void **)v73;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v73);
        if (v74 != __p)
          free(v74);
      }
    }
    sub_100067AC4((uint64_t)buf);
    return;
  }
  v19 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v19, CFSTR("kAltAccountConfiguredNotification")))
  {
    LOBYTE(v117[0]) = 0;
    if (sub_101262BB4((CFDictionaryRef)*a4, (BOOL *)v117))
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v20 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 67174657;
        HIDWORD(__p[0]) = LOBYTE(v117[0]);
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#ca,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", (uint8_t *)__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&buf[4] = LOBYTE(v117[0]);
        LODWORD(v89) = 8;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kAltAccountConfiguredNotification,isAltAccountConfigured,%{private}d", buf, v89);
        v76 = (void **)v75;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v75);
        if (v76 != __p)
          free(v76);
      }
      LODWORD(__p[0]) = 30;
      if (LOBYTE(v117[0]))
      {
        v110[0] = 1;
        v110[6] = 0;
        sub_1001F80F0(a1, (int *)__p, (uint64_t)v110);
        v21 = v110;
      }
      else
      {
        v109[0] = 0;
        v109[6] = 0;
        sub_1001F80F0(a1, (int *)__p, (uint64_t)v109);
        v21 = v109;
      }
      sub_1001F8644((uint64_t)v21);
    }
    return;
  }
  v23 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v23, CFSTR("kCellInfoNotification")))
  {
    v24 = *a4;
    if (!*a4)
      return;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    memset(v117, 0, sizeof(v117));
    v118 = 1065353216;
    if (sub_1001DBC88(v24, (uint64_t)v117))
    {
      LODWORD(__p[0]) = 0;
      *(_QWORD *)buf = __p;
      if (*((_QWORD *)sub_1001DC028((uint64_t)v117, (int *)__p, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3))
      {
        sub_1001C1F5C(0, (uint64_t)v117, &v106);
        sub_1001DF2C0(&v106, buf);
        if (v116)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v25 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            __p[0] = (void *)67109120;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell found for sim,%d", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            v111 = 67109120;
            v112 = 0;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,serving cell found for sim,%d", &v111);
            v80 = (void **)v79;
            sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v79);
            if (v80 != __p)
              free(v80);
          }
          sub_1001F7BFC(a1, 0, (uint64_t)buf);
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v60 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell missing", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            LOWORD(v111) = 0;
            LODWORD(v89) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,serving cell missing", &v111, v89);
            v82 = (void **)v81;
            sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v81);
            if (v82 != __p)
              free(v82);
          }
        }
        sub_10087B6D0((uint64_t)buf);
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v57 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          __p[0] = (void *)67109120;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", (uint8_t *)__p, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 0;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf);
          v59 = (void **)v58;
          sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v58);
          if (v59 != __p)
            free(v59);
        }
      }
      v62 = v106;
      for (i = v107; i != v62; sub_1005A9904((uint64_t)&v108, i))
        i -= 696;
      v107 = v62;
      if (!sub_1001DC538())
        goto LABEL_167;
      LODWORD(__p[0]) = 1;
      *(_QWORD *)buf = __p;
      if (*((_QWORD *)sub_1001DC028((uint64_t)v117, (int *)__p, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 3))
      {
        sub_1001C1F5C(1, (uint64_t)v117, &v106);
        sub_1001DF2C0(&v106, buf);
        if (v116)
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v63 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            __p[0] = (void *)0x104000100;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell found for sim,%d", (uint8_t *)__p, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            v111 = 67109120;
            v112 = 1;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,serving cell found for sim,%d", &v111);
            v84 = (void **)v83;
            sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v83);
            if (v84 != __p)
              free(v84);
          }
          sub_1001F7BFC(a1, 1, (uint64_t)buf);
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v67 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,serving cell missing", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            LOWORD(v111) = 0;
            LODWORD(v89) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,serving cell missing", &v111, v89);
            v88 = (void **)v87;
            sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v87);
            if (v88 != __p)
              free(v88);
          }
        }
        sub_10087B6D0((uint64_t)buf);
LABEL_167:
        sub_1001DBC50((uint64_t)v117);
        __p[0] = &v106;
        sub_10087B4F8((void ***)__p);
        return;
      }
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v64 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        __p[0] = (void *)0x104000100;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", (uint8_t *)__p, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_167;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,received nil CellInfo from CT for sim %d", buf);
      v37 = (void **)v65;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v65);
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v35 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#ca,kCellInfoNotification,error fetching cell info", (uint8_t *)__p, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_167;
      bzero(__p, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      *(_WORD *)buf = 0;
      LODWORD(v89) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kCellInfoNotification,error fetching cell info", buf, v89);
      v37 = (void **)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v36);
    }
    if (v37 != __p)
      free(v37);
    goto LABEL_167;
  }
  v26 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v26, CFSTR("kSubscriberMccAndMncNotification")))
  {
    *(_OWORD *)buf = 0u;
    v114 = 0u;
    v115 = 1065353216;
    if (sub_1001E56B4(*a4, (uint64_t)buf))
    {
      LODWORD(v117[0]) = 0;
      __p[0] = v117;
      v27 = *((unsigned int *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5);
      LODWORD(v117[0]) = 0;
      __p[0] = v117;
      v28 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6);
      LODWORD(v117[0]) = 0;
      __p[0] = v117;
      v29 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 28);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v30 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        __p[0] = (void *)68290050;
        LOWORD(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 2) = "";
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = 0;
        v120 = 1026;
        v121 = v27;
        v122 = 1026;
        v123 = v28;
        v124 = 1026;
        v125 = v29;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"Carriermcc\":%{public}d, \"CarrierMnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
      }
      LODWORD(__p[0]) = 4;
      v105[0] = v27;
      v105[6] = 0;
      sub_1001F80F0(a1, (int *)__p, (uint64_t)v105);
      sub_1001F8644((uint64_t)v105);
      LODWORD(__p[0]) = 5;
      v104[0] = v28;
      v104[6] = 0;
      sub_1001F80F0(a1, (int *)__p, (uint64_t)v104);
      sub_1001F8644((uint64_t)v104);
      LODWORD(v117[0]) = 6;
      sub_1001F904C(v27, __p);
      v101 = *(_OWORD *)__p;
      v102 = __p[2];
      memset(__p, 0, sizeof(__p));
      v103 = 6;
      sub_1001F80F0(a1, (int *)v117, (uint64_t)&v101);
      sub_1001F8644((uint64_t)&v101);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (sub_1001DC538())
      {
        LODWORD(v117[0]) = 1;
        __p[0] = v117;
        v31 = *((unsigned int *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 5);
        LODWORD(v117[0]) = 1;
        __p[0] = v117;
        v32 = *((_DWORD *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 6);
        LODWORD(v117[0]) = 1;
        __p[0] = v117;
        v33 = *((unsigned __int8 *)sub_1001E59F8((uint64_t)buf, (int *)v117, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 28);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v34 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          __p[0] = (void *)68290050;
          LOWORD(__p[1]) = 2082;
          *(void **)((char *)&__p[1] + 2) = "";
          WORD1(__p[2]) = 1026;
          HIDWORD(__p[2]) = 1;
          v120 = 1026;
          v121 = v31;
          v122 = 1026;
          v123 = v32;
          v124 = 1026;
          v125 = v33;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"CarrierMcc\":%{public}d, \"CarrierMnc\":%{public}d, \"is3DigitMnc\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
        }
        LODWORD(__p[0]) = 12;
        v100[0] = v31;
        v100[6] = 0;
        sub_1001F80F0(a1, (int *)__p, (uint64_t)v100);
        sub_1001F8644((uint64_t)v100);
        LODWORD(__p[0]) = 13;
        v99[0] = v32;
        v99[6] = 0;
        sub_1001F80F0(a1, (int *)__p, (uint64_t)v99);
        sub_1001F8644((uint64_t)v99);
        LODWORD(v117[0]) = 16;
        sub_1001F904C(v31, __p);
        v96 = *(_OWORD *)__p;
        v97 = __p[2];
        memset(__p, 0, sizeof(__p));
        v98 = 6;
        sub_1001F80F0(a1, (int *)v117, (uint64_t)&v96);
        sub_1001F8644((uint64_t)&v96);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v56 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#ca,kSubscriberMccAndMncNotification,error fetching MCC and MNC", (uint8_t *)__p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        LOWORD(v117[0]) = 0;
        LODWORD(v89) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,kSubscriberMccAndMncNotification,error fetching MCC and MNC", v117, v89);
        v78 = (void **)v77;
        sub_100512490("Generic", 1, 0, 2, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v77);
        if (v78 != __p)
          free(v78);
      }
    }
    sub_100067AC4((uint64_t)buf);
  }
  else
  {
    v38 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v38, CFSTR("kSubscriptionChangeNotification")))
    {
      v39 = *a4;
      if (*a4)
      {
        *(_OWORD *)buf = 0u;
        v114 = 0u;
        v115 = 1065353216;
        if (sub_1012621F4(v39, (uint64_t)buf))
        {
          LODWORD(v106) = 0;
          LODWORD(v117[0]) = 33;
          __p[0] = &v106;
          if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 20))
            v40 = 1;
          else
            v40 = 2;
          v95[0] = v40;
          v95[6] = 0;
          sub_1001F80F0(a1, (int *)v117, (uint64_t)v95);
          sub_1001F8644((uint64_t)v95);
          LODWORD(v117[0]) = 34;
          __p[0] = &v106;
          if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 21))
            v41 = 1;
          else
            v41 = 2;
          v94[0] = v41;
          v94[6] = 0;
          sub_1001F80F0(a1, (int *)v117, (uint64_t)v94);
          sub_1001F8644((uint64_t)v94);
          LODWORD(v117[0]) = 22;
          __p[0] = &v106;
          if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 22))
            v42 = 1;
          else
            v42 = 2;
          v93[0] = v42;
          v93[6] = 0;
          sub_1001F80F0(a1, (int *)v117, (uint64_t)v93);
          sub_1001F8644((uint64_t)v93);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v43 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
          {
            v44 = v106;
            *(_QWORD *)&v117[0] = &v106;
            v45 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)+ 20);
            *(_QWORD *)&v117[0] = &v106;
            v46 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)+ 21);
            *(_QWORD *)&v117[0] = &v106;
            v47 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, (int *)&v106, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)+ 22);
            __p[0] = (void *)68290050;
            LOWORD(__p[1]) = 2082;
            *(void **)((char *)&__p[1] + 2) = "";
            WORD1(__p[2]) = 1026;
            HIDWORD(__p[2]) = v44;
            v120 = 1026;
            v121 = v45;
            v122 = 1026;
            v123 = v46;
            v124 = 1026;
            v125 = v47;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
          }
          if (sub_1001DC538())
          {
            v111 = 1;
            LODWORD(v117[0]) = 35;
            __p[0] = &v111;
            if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 20))
              v48 = 1;
            else
              v48 = 2;
            v92[0] = v48;
            v92[6] = 0;
            sub_1001F80F0(a1, (int *)v117, (uint64_t)v92);
            sub_1001F8644((uint64_t)v92);
            LODWORD(v117[0]) = 36;
            __p[0] = &v111;
            if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 21))
              v49 = 1;
            else
              v49 = 2;
            v91[0] = v49;
            v91[6] = 0;
            sub_1001F80F0(a1, (int *)v117, (uint64_t)v91);
            sub_1001F8644((uint64_t)v91);
            LODWORD(v117[0]) = 23;
            __p[0] = &v111;
            if (*((_BYTE *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)__p) + 22))
              v50 = 1;
            else
              v50 = 2;
            v90[0] = v50;
            v90[6] = 0;
            sub_1001F80F0(a1, (int *)v117, (uint64_t)v90);
            sub_1001F8644((uint64_t)v90);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            v51 = qword_1022A02A8;
            if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
            {
              v52 = v111;
              *(_QWORD *)&v117[0] = &v111;
              v53 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)
                    + 20);
              *(_QWORD *)&v117[0] = &v111;
              v54 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)
                    + 21);
              *(_QWORD *)&v117[0] = &v111;
              v55 = *((unsigned __int8 *)sub_10096FEA4((uint64_t)buf, &v111, (uint64_t)&unk_101B9EB60, (_DWORD **)v117)
                    + 22);
              __p[0] = (void *)68290050;
              LOWORD(__p[1]) = 2082;
              *(void **)((char *)&__p[1] + 2) = "";
              WORD1(__p[2]) = 1026;
              HIDWORD(__p[2]) = v52;
              v120 = 1026;
              v121 = v53;
              v122 = 1026;
              v123 = v54;
              v124 = 1026;
              v125 = v55;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,kSubscriptionChangeNotification\", \"sim\":%{public}d, \"userDataPreferred\":%{public}hhd, \"userDefaultVoice\":%{public}hhd, \"isSimPresent\":%{public}hhd}", (uint8_t *)__p, 0x2Au);
            }
          }
        }
        else
        {
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021696B0);
          v66 = qword_1022A02A8;
          if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "#ca,kSubscriptionChangeNotification,error fetching context", (uint8_t *)__p, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A02A0 != -1)
              dispatch_once(&qword_1022A02A0, &stru_1021696B0);
            LOWORD(v117[0]) = 0;
            LODWORD(v89) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02A8, 16, "#ca,kSubscriptionChangeNotification,error fetching context", v117, v89);
            v86 = (void **)v85;
            sub_100512490("Generic", 1, 0, 0, "void CLAnalyticsLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v85);
            if (v86 != __p)
              free(v86);
          }
        }
        sub_100067AC4((uint64_t)buf);
      }
    }
  }
}

void sub_1001F6218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_10087B6D0((uint64_t)&STACK[0x200]);
  sub_1001DBC50((uint64_t)&STACK[0x4C0]);
  STACK[0x4F0] = (unint64_t)&a59;
  sub_10087B4F8((void ***)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

void sub_1001F63D4(uint64_t a1, int *a2, CFDictionaryRef *a3)
{
  sub_1001DCAA8(*(float32x2_t **)(a1 + 1768), a2, a3);
}

void sub_1001F63DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  void **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  void *__p[2];
  char v25;
  uint8_t buf[8];
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void **v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;

  v23 = a2;
  if (!*(_BYTE *)(a3 + 696))
    return;
  v5 = a1 + 1728;
  if (!sub_1001F8DEC((_QWORD *)(a1 + 1728), &v23))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021B21E8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Actor handleCellInfo called with unexpected inst instance %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_1021B21E8);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#Actor handleCellInfo called with unexpected inst instance %d", __p);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLEmergencyActor::handleCellInfo(SimInstance, const std::optional<CLCell> &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  *(_QWORD *)buf = &v23;
  v7 = sub_1001F6864(v5, &v23, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v8 = v7;
  v9 = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v7 + 6) = v9;
  if (v9 < 3)
    goto LABEL_11;
  if (v9 == 9)
  {
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_100706590(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_100706590(a3) + 4);
    v8[5] = -1;
    v10 = sub_100706590(a3);
    goto LABEL_12;
  }
  if (v9 == 7)
  {
LABEL_11:
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1007057DC(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1007057DC(a3) + 4);
    v8[5] = -1;
    v10 = sub_1007057DC(a3);
LABEL_12:
    v11 = *(int *)(v10 + 12);
LABEL_13:
    v8[6] = v11;
    v12 = -1;
    goto LABEL_14;
  }
  if (v9 - 3 <= 2)
  {
    v7[4] = -1;
    *((_DWORD *)v7 + 10) = *(_DWORD *)(sub_100704A28(a3) + 32);
    *((_DWORD *)v8 + 11) = *(_DWORD *)(sub_100704A28(a3) + 36);
    v11 = *(int *)(sub_100704A28(a3) + 44);
    goto LABEL_13;
  }
  if (v9 == 10)
  {
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1007073B4(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1007073B4(a3) + 4);
    v8[5] = -1;
    v8[6] = *(_QWORD *)(sub_1007073B4(a3) + 16);
    v12 = *(_DWORD *)(sub_1007073B4(a3) + 32);
  }
  else
  {
    if (v9 != 6)
      goto LABEL_15;
    *((_DWORD *)v7 + 8) = *(_DWORD *)sub_1001E3CA4(a3);
    *((_DWORD *)v8 + 9) = *(_DWORD *)(sub_1001E3CA4(a3) + 4);
    v8[5] = -1;
    v8[6] = *(int *)(sub_1001E3CA4(a3) + 12);
    v12 = *(_DWORD *)(sub_1001E3CA4(a3) + 24);
  }
LABEL_14:
  *((_DWORD *)v8 + 46) = v12;
LABEL_15:
  sub_1013935BC(a1);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_1021B21E8);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v14 = v23;
    sub_1001E3CC8(*((_DWORD *)v8 + 6), __p);
    if (v25 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = *((_DWORD *)v8 + 8);
    v17 = *((_DWORD *)v8 + 9);
    v18 = *((_DWORD *)v8 + 10);
    v19 = *((_DWORD *)v8 + 11);
    v20 = v8[6];
    *(_DWORD *)buf = 68290819;
    *(_DWORD *)&buf[4] = 0;
    v27 = 2082;
    v28 = "";
    v29 = 1026;
    v30 = v14;
    v31 = 2082;
    v32 = v15;
    v33 = 1025;
    v34 = v16;
    v35 = 1025;
    v36 = v17;
    v37 = 1025;
    v38 = v18;
    v39 = 1025;
    v40 = v19;
    v41 = 2049;
    v42 = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Actor cell info updated\", \"inst\":%{public}d, \"RAT\":%{public, location:escape_only}s, \"MCC\":%{private}d, \"MNC\":%{private}d, \"SID\":%{private}d, \"NID\":%{private}d, \"cell ID\":%{private}lld}", buf, 0x44u);
    if (v25 < 0)
      operator delete(__p[0]);
  }
}

uint64_t *sub_1001F6864(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0xC0uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *((_DWORD *)v14 + 6) = 11;
  *(_QWORD *)&v15 = -1;
  *((_QWORD *)&v15 + 1) = -1;
  *((_OWORD *)v14 + 2) = v15;
  *((_OWORD *)v14 + 3) = v15;
  *((_QWORD *)v14 + 22) = 0;
  *((_QWORD *)v14 + 23) = 0;
  *((_OWORD *)v14 + 9) = 0u;
  *((_OWORD *)v14 + 10) = 0u;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_DWORD *)v14 + 46) = -1;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10139A9F8((uint64_t)v25, 0);
  return i;
}

void sub_1001F6AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10139A9F8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F6B14(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

void sub_1001F7548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F75C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1006B6A64((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void **sub_1001F7638(void **a1)
{
  sub_1006B6D08(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

unsigned __int8 *sub_1001F7668(uint64_t a1, unsigned __int8 *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  sub_1001F78F0(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_10012E444(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  sub_100C1FB18((uint64_t)v27, 0);
  return i;
}

void sub_1001F78D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100C1FB18((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1001F78F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  char *result;

  v9 = a1 + 16;
  v10 = operator new(0x78uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = sub_100C1FAA0((char *)v10 + 16, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1001F795C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C1FB18(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7974(uint64_t a1, int a2, int a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v15 = a3;
  v16 = a2;
  v4 = (_QWORD *)(a1 + 2208);
  result = (uint64_t)sub_1001F8DEC((_QWORD *)(a1 + 2208), &v16);
  if (result)
  {
    v6 = sub_1001F8DEC(v4, &v16);
    if (!v6)
      goto LABEL_21;
    v7 = sub_1001F8DEC(v6 + 3, &v15);
    if (!sub_1001F8DEC(v4, &v16))
      goto LABEL_21;
    if (!v7)
      return 0;
    v8 = sub_1001F8DEC(v4, &v16);
    if (!v8 || (v9 = sub_1001F8DEC(v8 + 3, &v15)) == 0)
LABEL_21:
      sub_100263950("unordered_map::at: key not found");
    v10 = v9;
    if (*((_BYTE *)v9 + 40))
      return 0;
    *((CFAbsoluteTime *)v9 + 4) = CFAbsoluteTimeGetCurrent();
    result = 1;
    *((_BYTE *)v10 + 40) = 1;
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v12 = v10[4];
        *(_DWORD *)buf = 134284033;
        v24 = v12;
        v25 = 1025;
        v26 = v16;
        v27 = 1025;
        v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gnssca,initializeGnssSessionDataAtEventStart,start time,%{private}.1lf,metricsContext,%{private}d,eventType,%{private}d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v13 = v10[4];
        v17 = 134284033;
        v18 = v13;
        v19 = 1025;
        v20 = v16;
        v21 = 1025;
        v22 = v15;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,initializeGnssSessionDataAtEventStart,start time,%{private}.1lf,metricsContext,%{private}d,eventType,%{private}d", &v17, 24);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAWD::initializeGnssSessionDataAtEventStart(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v14);
        if (v14 != (char *)buf)
          free(v14);
      }
      return 1;
    }
  }
  return result;
}

void sub_1001F7BFC(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  __int128 *v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  _DWORD v18[8];
  _DWORD v19[8];
  _DWORD v20[8];
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD v25[8];
  _DWORD v26[8];
  _DWORD v27[8];
  uint8_t buf[24];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (!*(_BYTE *)(a3 + 696))
    return;
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 < 3)
    goto LABEL_5;
  if (v5 == 9)
  {
    v6 = *(unsigned int *)sub_100706590(a3);
    v7 = sub_100706590(a3);
    goto LABEL_7;
  }
  if (v5 == 7)
  {
LABEL_5:
    v6 = *(unsigned int *)sub_1007057DC(a3);
    v7 = sub_1007057DC(a3);
  }
  else
  {
    if (v5 - 3 <= 2)
    {
      v9 = *(_DWORD *)(sub_100704A28(a3) + 32);
      v10 = *(_DWORD *)(sub_100704A28(a3) + 36);
      v8 = -1;
      v6 = 0xFFFFFFFFLL;
      goto LABEL_9;
    }
    if (v5 == 10)
    {
      v6 = *(unsigned int *)sub_1007073B4(a3);
      v7 = sub_1007073B4(a3);
    }
    else
    {
      if (v5 != 6)
      {
        v8 = 0;
        v6 = 0;
        v9 = 0;
        goto LABEL_8;
      }
      v6 = *(unsigned int *)sub_1001E3CA4(a3);
      v7 = sub_1001E3CA4(a3);
    }
  }
LABEL_7:
  v8 = *(_DWORD *)(v7 + 4);
  v9 = -1;
LABEL_8:
  v10 = -1;
LABEL_9:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v11 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 68290307;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a2;
    v29 = 1025;
    v30 = v6;
    v31 = 1025;
    v32 = v8;
    v33 = 1025;
    v34 = v9;
    v35 = 1025;
    v36 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ca,handleCellInfoNotification\", \"inst\":%{public}d, \"OperatorMCC\":%{private}d, \"OperatorMNC\":%{private}d, \"OperatorSID\":%{private}d, \"OperatorNID\":%{private}d}", buf, 0x30u);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  }
  v12 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)buf = 68289794;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = 0;
    v29 = 1026;
    v30 = v6;
    v31 = 1026;
    v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca,kSubscriberMccAndMncNotification\", \"CarrierSim\":%{public}d, \"Carriermcc\":%{public}d, \"CarrierMnc\":%{public}d}", buf, 0x24u);
  }
  if (a2 == 1)
  {
    *(_DWORD *)buf = 14;
    v20[0] = v6;
    v20[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v20);
    sub_1001F8644((uint64_t)v20);
    *(_DWORD *)buf = 15;
    v19[0] = v8;
    v19[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v19);
    sub_1001F8644((uint64_t)v19);
    *(_DWORD *)buf = 21;
    v18[0] = *(_DWORD *)(a3 + 8);
    v18[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v18);
    sub_1001F8644((uint64_t)v18);
    if ((v6 - 1) > 0x3E6)
      return;
    v24 = 18;
    sub_1001F904C(v6, buf);
    v15 = *(_OWORD *)buf;
    v16 = *(_QWORD *)&buf[16];
    memset(buf, 0, sizeof(buf));
    v17 = 6;
    sub_1001F80F0(a1, &v24, (uint64_t)&v15);
    v13 = &v15;
    goto LABEL_22;
  }
  if (!a2)
  {
    *(_DWORD *)buf = 8;
    v27[0] = v6;
    v27[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v27);
    sub_1001F8644((uint64_t)v27);
    *(_DWORD *)buf = 9;
    v26[0] = v8;
    v26[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v26);
    sub_1001F8644((uint64_t)v26);
    *(_DWORD *)buf = 20;
    v25[0] = *(_DWORD *)(a3 + 8);
    v25[6] = 0;
    sub_1001F80F0(a1, (int *)buf, (uint64_t)v25);
    sub_1001F8644((uint64_t)v25);
    if ((v6 - 1) <= 0x3E6)
    {
      v24 = 10;
      sub_1001F904C(v6, buf);
      v21 = *(_OWORD *)buf;
      v22 = *(_QWORD *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v23 = 6;
      sub_1001F80F0(a1, &v24, (uint64_t)&v21);
      v13 = &v21;
LABEL_22:
      sub_1001F8644((uint64_t)v13);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
  }
}

void sub_1001F806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_1001F8644((uint64_t)va);
  if (*(char *)(v3 - 137) < 0)
    operator delete(*(void **)(v3 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_1001F80F0(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void **v14;
  uint64_t v15;
  uint64_t *v16;
  _BOOL8 result;
  NSObject *v18;
  void **v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE v30[32];
  _BYTE buf[12];
  __int16 v32;
  int v33;
  char v34;
  int v35;
  _BYTE *v36;
  __int16 v37;
  int v38;
  void *__p[2];
  char v40;
  void **v41;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v6 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100ADFED8(a1, *a2, (uint64_t)__p);
    v7 = v40 >= 0 ? __p : (void **)__p[0];
    v8 = *a2;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    v32 = 1026;
    v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ca,setMeasurements,measurement,%{public}s, %{public}d", buf, 0x12u);
    if (v40 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v20 = qword_1022A02A8;
    sub_100ADFED8(a1, *a2, (uint64_t)buf);
    if (v34 >= 0)
      v21 = buf;
    else
      v21 = *(_BYTE **)buf;
    v22 = *a2;
    v35 = 136446466;
    v36 = v21;
    v37 = 1026;
    v38 = v22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 2, "#ca,setMeasurements,measurement,%{public}s, %{public}d", &v35, 18);
    v24 = v23;
    if (v34 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, MeasurementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v24);
    if (v24 != (char *)__p)
      free(v24);
  }
  LODWORD(__p[0]) = *a2;
  v9 = sub_1001F8DEC((_QWORD *)(a1 + 8), (int *)__p);
  if (v9)
  {
    v10 = *(unsigned int *)(a3 + 24);
    if ((_DWORD)v10 == -1)
      sub_100392428();
    v11 = v9[6];
    __p[0] = buf;
    v12 = ((uint64_t (*)(void **, uint64_t))off_102169790[v10])(__p, a3);
    if (!sub_100270DE8(v12, v11))
      goto LABEL_21;
  }
  sub_1001F8940(a1, *a2, __p);
  sub_1001F869C((uint64_t)v30, a3);
  if (!v41)
    sub_10025FD1C();
  v13 = (*((uint64_t (**)(void **, _BYTE *))*v41 + 6))(v41, v30);
  sub_1001F8644((uint64_t)v30);
  v14 = v41;
  if (v41 == __p)
  {
    v15 = 4;
    v14 = __p;
  }
  else
  {
    if (!v41)
      goto LABEL_19;
    v15 = 5;
  }
  (*((void (**)(void))*v14 + v15))();
LABEL_19:
  if ((v13 & 1) != 0)
  {
    __p[0] = a2;
    v16 = sub_1001F86E0(a1 + 48, a2, (uint64_t)&unk_101B9EB60, (_DWORD **)__p);
    sub_100AEC43C((uint64_t)(v16 + 3), a3);
    return 1;
  }
LABEL_21:
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021696B0);
  v18 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100ADFED8(a1, *a2, (uint64_t)__p);
    v19 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#ca,ERROR,invalid,measurement,%{public}s", buf, 0xCu);
    if (v40 < 0)
      operator delete(__p[0]);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v25 = qword_1022A02A8;
    sub_100ADFED8(a1, *a2, (uint64_t)buf);
    if (v34 >= 0)
      v26 = buf;
    else
      v26 = *(_BYTE **)buf;
    v35 = 136446210;
    v36 = v26;
    LODWORD(v29) = 12;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 2, "#ca,ERROR,invalid,measurement,%{public}s", &v35, v29);
    v28 = v27;
    if (v34 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL AnalyticsLogger<CLAnalyticsMeasurements, CLAnalyticsTriggers>::setMeasurementValue(const Measurement &, MeasurementValueType) [Measurement = CLAnalyticsMeasurements, Trigger = CLAnalyticsTriggers, MeasurementValueType = std::variant<int, long long, unsigned long long, unsigned int, float, double, std::string, BOOL>]", "%s\n", v28);
    if (v28 != (char *)__p)
      free(v28);
    return 0;
  }
  return result;
}

void sub_1001F85F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v26;
  uint64_t v27;

  v26 = a25;
  if (a25 == &a22)
  {
    v27 = 4;
    v26 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F8644(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_10214C660 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_1001F869C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1006AB494(a1, a2);
  return a1;
}

void sub_1001F86CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001F8644(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F86E0(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x38uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *((_DWORD *)v14 + 6) = 0;
  *((_DWORD *)v14 + 12) = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100AEC3F8((uint64_t)v24, 0);
  return i;
}

void sub_1001F8928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100AEC3F8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F8940@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *result;
  int v5;

  v5 = a2;
  result = sub_1001F8DEC((_QWORD *)(a1 + 8), &v5);
  if (result)
    return (uint64_t *)sub_100270E34((uint64_t)a3, (uint64_t)(result + 8));
  *a3 = off_1021697E0;
  a3[1] = sub_100AEC2F0;
  a3[3] = a3;
  return result;
}

uint64_t *sub_1001F89A4(uint64_t a1, int a2, int a3)
{
  _QWORD *v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  double v15;
  _BOOL4 v16;
  double v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;

  v21 = a3;
  v22 = a2;
  v4 = (_QWORD *)(a1 + 2208);
  result = sub_1001F8DEC((_QWORD *)(a1 + 2208), &v22);
  if (!result)
    return result;
  v6 = sub_1001F8DEC(v4, &v22);
  if (!v6)
    goto LABEL_31;
  v7 = sub_1001F8DEC(v6 + 3, &v21);
  if (!sub_1001F8DEC(v4, &v22))
    goto LABEL_31;
  if (!v7)
    return 0;
  v8 = sub_1001F8DEC(v4, &v22);
  if (!v8 || (v9 = sub_1001F8DEC(v8 + 3, &v21)) == 0)
LABEL_31:
    sub_100263950("unordered_map::at: key not found");
  v10 = v9;
  if (!*((_BYTE *)v9 + 40))
    return 0;
  *((_BYTE *)v9 + 40) = 0;
  v11 = CFAbsoluteTimeGetCurrent() - *((double *)v9 + 4);
  if (v11 >= 0.0)
  {
    *((double *)v10 + 3) = v11 + *((double *)v10 + 3);
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v13 = v10[3];
        *(_DWORD *)buf = 67175425;
        v32 = v22;
        v33 = 1025;
        v34 = v21;
        v35 = 2049;
        v36 = v11;
        v37 = 2049;
        v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,updateGnssSessionDataAtEventEnd,metricsContext,%{private}d,eventType,%{private}d,eventDuration_s,%{private}.1lf,totalDailyUsage_s,%{private}.1lf", buf, 0x22u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v19 = v10[3];
        v23 = 67175425;
        v24 = v22;
        v25 = 1025;
        v26 = v21;
        v27 = 2049;
        v28 = v11;
        v29 = 2049;
        v30 = v19;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,updateGnssSessionDataAtEventEnd,metricsContext,%{private}d,eventType,%{private}d,eventDuration_s,%{private}.1lf,totalDailyUsage_s,%{private}.1lf", &v23, 34);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAWD::updateGnssSessionDataAtEventEnd(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
    }
    return (uint64_t *)1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v15 = *((double *)v10 + 4);
    *(_DWORD *)buf = 67175169;
    v32 = v22;
    v33 = 1025;
    v34 = v21;
    v35 = 2049;
    v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gnssca,updateGnssSessionDataAtEventEnd,start time in future,metricsContext,%{private}d,eventType,%{private}d,startTime,%{private}.1lf", buf, 0x18u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v17 = *((double *)v10 + 4);
    v23 = 67175169;
    v24 = v22;
    v25 = 1025;
    v26 = v21;
    v27 = 2049;
    v28 = v17;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssca,updateGnssSessionDataAtEventEnd,start time in future,metricsContext,%{private}d,eventType,%{private}d,startTime,%{private}.1lf", &v23, 24);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssAWD::updateGnssSessionDataAtEventEnd(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
    return 0;
  }
  return result;
}

uint64_t *sub_1001F8DEC(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1001F8EA8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

BOOL sub_1001F8EF4(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  sub_1001F8F88((uint64_t)&v4, a2);
  v2 = v6;
  if (v6 == 6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_100115CE4(__p, (void *)v4, *((unint64_t *)&v4 + 1));
    }
    else
    {
      *(_OWORD *)__p = v4;
      v8 = v5;
    }
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  sub_1001F8644((uint64_t)&v4);
  return v2 == 6;
}

void sub_1001F8F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001F8644((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8F88(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1006AB89C(a1, a2);
  return a1;
}

uint64_t sub_1001F8FC0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0x3E8u;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_1001F9010(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A500;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001F9024(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10216A080;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001F9038(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169B80;
  a2[1] = v2;
  return result;
}

void sub_1001F904C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  __int128 *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int128 *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 *v18;
  uint8_t buf[16];
  uint64_t v20;

  v15 = 0uLL;
  v16 = 0;
  if ((a1 - 1000) > 0xFFFFFC18)
  {
    v4 = (void *)TUISOCountryCodeForMCC(-[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1), "stringValue"));
    if (v4)
    {
      sub_1015A2E04(buf, (char *)objc_msgSend(v4, "UTF8String"));
      v15 = *(_OWORD *)buf;
      v16 = v20;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v5 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        v6 = &v15;
        if (v16 < 0)
          v6 = (__int128 *)v15;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        v10 = &v15;
        if (v16 < 0)
          v10 = (__int128 *)v15;
        v17 = 136446210;
        v18 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,getCountryCode,%{public}s", &v17, 12);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      *(_OWORD *)a2 = v15;
      a2[2] = v16;
    }
    else
    {
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      v7 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,InvalidCountryCode", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021696B0);
        LOWORD(v17) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,getCountryCode,InvalidCountryCode", &v17, 2, v15, v16);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_1015A2E04(a2, "InvalidCountryCode");
    }
  }
  else
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021696B0);
    v3 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#ca,getCountryCode,InvalidMCC", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021696B0);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "#ca,getCountryCode,InvalidMCC", &v17, 2, v15, v16);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "std::string CLAnalyticsLogger::getCountryCode(int)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    sub_1015A2E04(a2, "InvalidMCC");
  }
}

void sub_1001F9504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F9534(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _DWORD v5[8];

  sub_1001F8F88((uint64_t)v5, a2);
  if (v5[6])
    v2 = 1;
  else
    v2 = v5[0] >= 0xDu;
  v3 = !v2;
  sub_1001F8644((uint64_t)v5);
  return v3;
}

uint64_t sub_1001F957C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102169C00;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001F9590(std::string::size_type a1, int a2, int a3, int a4, char a5)
{
  char *v9;
  uint64_t result;
  int v11;
  int v12;
  NSObject *v14;
  id v15;
  uint64_t v16;
  id v17;
  char *v18;
  uint64_t v19;
  int v20;
  id v21;
  uint8_t buf[1640];

  HIDWORD(v19) = a2;
  *(_QWORD *)buf = (char *)&v19 + 4;
  v9 = sub_1001E1254(a1 + 240, (int *)&v19 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  *((_DWORD *)v9 + 12) = a3;
  *((_DWORD *)v9 + 13) = a4;
  *(_QWORD *)buf = (char *)&v19 + 4;
  result = (uint64_t)sub_1001F97E8(a1 + 280, (int *)&v19 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v11 = *(_DWORD *)(result + 20);
  v12 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  *(_BYTE *)(result + 28) = a5;
  if (v11 != a3 || v12 != a4)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
    v14 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,handleMccMncChange,MCC/MNC changed", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B7B50);
      v16 = qword_1022A02A8;
      v17 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v20 = 136446210;
      v21 = v17;
      LODWORD(v19) = 12;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#CLConfig,%{public}s,handleMccMncChange,MCC/MNC changed", &v20, v19);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLEmergencyLocationConfigAsset::handleMccMncChange(BundleDescriptor, int32_t, int32_t, BOOL)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    result = sub_100D6C5CC(a1);
    if ((_DWORD)result)
    {
      sub_10146F8BC(a1);
      sub_10146F278(a1);
      return sub_10146D56C(a1);
    }
  }
  return result;
}

_QWORD *sub_1001F97E8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(_QWORD *)((char *)v11 + 20) = -1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1001F99FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F9A10(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  char v7;
  uint64_t v8;
  void *i;
  size_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v18;
  int v19;
  void *__p;
  size_t __n;
  unsigned __int8 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v2 = *(_QWORD *)(a1 + 2952);
  if (v2
    && (v4 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)) != 0
    && (v5 = v4,
        v26 = 0u,
        v27 = 0u,
        v24 = 0u,
        v25 = 0u,
        (v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v28, 16)) != 0))
  {
    v7 = 0;
    v8 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        sub_1015A2E04(&__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i), "UTF8String"));
        if ((v23 & 0x80u) == 0)
          v10 = v23;
        else
          v10 = __n;
        v11 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
        v12 = (char)v11;
        if ((char)v11 < 0)
          v11 = a2[1];
        if ((unsigned __int8 *)v10 == v11)
        {
          if (v12 >= 0)
            v13 = (unsigned __int8 *)a2;
          else
            v13 = *a2;
          if ((v23 & 0x80) != 0)
          {
            v18 = __p;
            v19 = memcmp(__p, v13, __n);
            operator delete(v18);
            if (!v19)
            {
LABEL_35:
              v7 = 1;
              return v7 & 1;
            }
          }
          else
          {
            if (!v23)
              goto LABEL_35;
            v14 = 0;
            do
            {
              v15 = *((unsigned __int8 *)&__p + v14);
              v16 = v13[v14];
            }
            while (v15 == v16 && v23 - 1 != v14++);
            v7 |= v15 == v16;
            if (v15 == v16)
              return v7 & 1;
          }
        }
        else if ((v23 & 0x80) != 0)
        {
          operator delete(__p);
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v6)
        continue;
      break;
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

void sub_1001F9BE8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (*a3 == 4)
  {
    if (!std::string::compare((const std::string *)(a4 + 8), "com.apple.Maps"))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v6 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136380675;
        v20 = "com.apple.Maps";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLC: Received kNotificationForegroundRunning for %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159648);
        v17 = 136380675;
        v18 = "com.apple.Maps";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Received kNotificationForegroundRunning for %{private}s", &v17, 12);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_10089353C(a1, 4);
    }
  }
  else if (*a3 == 1)
  {
    if (!std::string::compare((const std::string *)(a4 + 8), "com.apple.Maps"))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v5 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136380675;
        v20 = "com.apple.Maps";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLC: Received kNotificationTerminated for %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159648);
        v17 = 136380675;
        v18 = "com.apple.Maps";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Received kNotificationTerminated for %{private}s", &v17, 12);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      sub_100893204(a1, 4);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67240192;
      LODWORD(v20) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLC: Received unknown notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v10 = *a3;
      v17 = 67240192;
      LODWORD(v18) = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Received unknown notification %{public}d", &v17, 8);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_1001FA090(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 56);
      if (v5)
        sub_1001FA938(v5, (unsigned __int8 *)a1, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 48), 0);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *sub_1001FA140(_OWORD *a1, __int128 *a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_1001FA188((uint64_t)a1, a2);
  return a1;
}

void sub_1001FA174(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001FA090(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FA188(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p[2];
  uint64_t v24;
  void *v25[2];
  uint64_t v26;

  *(_OWORD *)v25 = *(_OWORD *)a1;
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_DWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  v9 = (void **)(a1 + 24);
  v10 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v9);
  v11 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v9 = v11;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  v13 = *((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v12;
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  if (v5)
  {
    v18 = std::__shared_weak_count::lock(v5);
    if (v18)
    {
      v19 = v18;
      if (v6)
        sub_1001FA938(v6, (unsigned __int8 *)v25, (uint64_t *)__p, v4, 0);
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__shared_weak_count::__release_weak(v5);
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  return a1;
}

void sub_1001FA344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;

  sub_100261F44((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v23);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

id sub_1001FA380(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  NSString *v4;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v4), "invalidate");
  return objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", 0, v4);
}

void sub_1001FA3D8(std::string *this@<X2>, _QWORD *a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v10 = std::string::compare(this, "Location in use on paired watch by 3rd party app") == 0;
  sub_1007208BC(&v17, a2);
  *(_OWORD *)v15 = *(_OWORD *)a3;
  v16 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  __p = *this;
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  sub_1001FA510(a5, &v17, (__int128 *)v15, (__int128 *)&__p, a4, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1001FA4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018F11A0((uint64_t)&a16);
  sub_100261F44((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001FA510(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4, int a5, char a6)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t *v18;
  uint64_t *v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;

  v8 = *a3;
  a1[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)a1 = v8;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  a1[5] = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 3) = v9;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *((_DWORD *)a1 + 12) = a5;
  v10 = *a2;
  a1[7] = *a2;
  v11 = a2[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v10 = *a2;
  }
  v14 = a1 + 3;
  *((_BYTE *)a1 + 72) = a6;
  if (!v10)
  {
LABEL_14:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217A980);
    v16 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v17 = *a2 != 0;
      v18 = a1;
      if (*((char *)a1 + 23) < 0)
        v18 = (uint64_t *)*a1;
      v19 = a1 + 3;
      if (*((char *)a1 + 47) < 0)
        v19 = (uint64_t *)*v14;
      *(_DWORD *)buf = 68290307;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 1026;
      v33 = v17;
      v34 = 2082;
      v35 = v18;
      v36 = 2082;
      v37 = v19;
      v38 = 2082;
      v39 = "assert";
      v40 = 2081;
      v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v20 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v21 = *a2 != 0;
      v22 = a1;
      if (*((char *)a1 + 23) < 0)
        v22 = (uint64_t *)*a1;
      v23 = a1 + 3;
      if (*((char *)a1 + 47) < 0)
        v23 = (uint64_t *)*v14;
      *(_DWORD *)buf = 68290307;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 1026;
      v33 = v21;
      v34 = 2082;
      v35 = v22;
      v36 = 2082;
      v37 = v23;
      v38 = 2082;
      v39 = "assert";
      v40 = 2081;
      v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Required parameter missing", "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v24 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v25 = *a2 != 0;
      v26 = a1;
      if (*((char *)a1 + 23) < 0)
        v26 = (uint64_t *)*a1;
      v27 = a1 + 3;
      if (*((char *)a1 + 47) < 0)
        v27 = (uint64_t *)*v14;
      *(_DWORD *)buf = 68290307;
      v29 = 0;
      v30 = 2082;
      v31 = "";
      v32 = 1026;
      v33 = v25;
      v34 = 2082;
      v35 = v26;
      v36 = 2082;
      v37 = v27;
      v38 = 2082;
      v39 = "assert";
      v40 = 2081;
      v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Required parameter missing\", \"logic\":%{public}hhd, \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x40u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm", 23, "Assertion");
    __break(1u);
  }
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      goto LABEL_14;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_14;
  }
  if (*((char *)a1 + 47) < 0)
  {
    if (!a1[4])
      goto LABEL_14;
  }
  else if (!*((_BYTE *)a1 + 47))
  {
    goto LABEL_14;
  }
  sub_1001FA938(v10, (unsigned __int8 *)a1, a1 + 3, *((_DWORD *)a1 + 12), 1);
  return a1;
}

void sub_1001FA90C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  sub_101922F04(v1, v2);
  _Unwind_Resume(a1);
}

void sub_1001FA938(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD v14[4];
  unsigned int v15;
  char v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t *v22;
  __int16 v23;
  uint64_t *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;

  if (a4 - 6 <= 0xFFFFFFFA)
    sub_101922F40();
  objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "silo"), "assertInside");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = *(uint64_t **)a2;
    if (*((char *)a3 + 23) >= 0)
      v13 = a3;
    else
      v13 = (uint64_t *)*a3;
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = v12;
    v23 = 2082;
    v24 = v13;
    v25 = 2050;
    v26 = a4;
    v27 = 1026;
    v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA Marking change\", \"clientKey\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"coming\":%{public}hhd}", buf, 0x36u);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001FAE6C;
  v14[3] = &unk_10217A960;
  v16 = a5;
  v15 = a4;
  sub_1001FAAE0(a1, a2, v11, (uint64_t)v14);
}

void sub_1001FAAE0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  uint64_t v27;

  v7 = (_QWORD *)(a1 + 16);
  *(_QWORD *)buf = a2;
  v8 = sub_1001FAEB8(a1 + 16, a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf) + 40;
  v9 = &dword_100000014;
  while (v9 != -4)
  {
    v10 = *(unsigned int *)((char *)&unk_101C1E920 + v9);
    if (v10 >= 6)
      sub_100263950("array::at");
    v9 -= 4;
    if (*(_DWORD *)&v8[4 * v10])
      goto LABEL_7;
  }
  LODWORD(v10) = 0;
LABEL_7:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = *(uint64_t **)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2082;
    v25 = v12;
    v26 = 2050;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA updating AssertionRecord\", \"ClientKey\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x26u);
  }
  (*(void (**)(uint64_t, unsigned __int8 *))(a4 + 16))(a4, v8);
  v13 = &dword_100000014;
  while (v13 != -4)
  {
    v14 = *(unsigned int *)((char *)&unk_101C1E920 + v13);
    if (v14 >= 6)
      sub_100263950("array::at");
    v13 -= 4;
    if (*(_DWORD *)&v8[4 * v14])
      goto LABEL_20;
  }
  v14 = 0;
LABEL_20:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  v15 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0)
      v16 = (uint64_t *)a2;
    else
      v16 = *(uint64_t **)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2082;
    v25 = v16;
    v26 = 2050;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA AssertionRecord updated\", \"ClientKey\":%{public, location:escape_only}s, \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x26u);
  }
  if (!(_DWORD)v14)
    sub_10019C594(v7, a2);
  if ((_DWORD)v14 != (_DWORD)v10 && *(_QWORD *)(a1 + 56))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217A980);
    v17 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2[23] & 0x80u) == 0)
        v18 = (uint64_t *)a2;
      else
        v18 = *(uint64_t **)a2;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA in-use level changed for client\", \"ClientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v19 = *(_QWORD *)(a1 + 56);
    if ((a2[23] & 0x80u) == 0)
      v20 = (uint64_t *)a2;
    else
      v20 = *(uint64_t **)a2;
    (*(void (**)(uint64_t, CLClientKeyPath *, uint64_t))(*(_QWORD *)v19 + 16))(v19, +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)), v14);
  }
}

uint64_t sub_1001FAE6C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(result + 32);
  if (!*(_BYTE *)(result + 36))
    return sub_1001FE2FC(a2, v2);
  if (v2 >= 6)
    sub_100263950("array::at");
  ++*(_DWORD *)(a2 + 4 * v2);
  return result;
}

unsigned __int8 *sub_1001FAEB8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_1001FB154(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1001FB128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void sub_1001FB14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001FBD14(a1 - 112, a2, a3);
}

_BYTE *sub_1001FB154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1001FB1E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A20A8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FB200(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  BOOL v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  int v18;
  id v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  HIDWORD(v17) = a2;
  *(_QWORD *)buf = (char *)&v17 + 4;
  result = (uint64_t)sub_1001F97E8(a1 + 176, (int *)&v17 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v11 = *(_DWORD *)(result + 20) == (_DWORD)a3 && *(_DWORD *)(result + 24) == (_DWORD)a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a4;
  *(_BYTE *)(result + 28) = a5;
  if ((HIDWORD(v17) & 0xFFFFFFFD) == 1 && !v11)
  {
    *(_DWORD *)(a1 + 136) = a3;
    *(_DWORD *)(a1 + 140) = a4;
    *(_BYTE *)(a1 + 144) = a5;
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
    v12 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v13;
      v27 = 1026;
      v28 = a3;
      v29 = 1026;
      v30 = a4;
      v31 = 1026;
      v32 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,MCC/MNC changed,%{public}d,%{public}d,%{public}d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021B34A8);
      v14 = qword_1022A02A8;
      v15 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
      v18 = 136446978;
      v19 = v15;
      v20 = 1026;
      v21 = a3;
      v22 = 1026;
      v23 = a4;
      v24 = 1026;
      v25 = a5;
      LODWORD(v17) = 30;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "#CLConfig,%{public}s,MCC/MNC changed,%{public}d,%{public}d,%{public}d", &v18, v17);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLKappaConfigAsset::handleMccMncChange(BundleDescriptor, int32_t, int32_t, BOOL)", "%s\n", v16);
      if (v16 != buf)
        free(v16);
    }
    result = sub_100D6C5CC(a1);
    if ((_DWORD)result)
    {
      result = sub_1013D29C8(a1, a3, a4, a5);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    }
  }
  return result;
}

void sub_1001FB498(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLKappaNotifier::onTelephony");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6C48);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLKappaNotifier::onTelephony", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6C48);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLKappaNotifier::onTelephony\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1001FB66C(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_1001FB64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001FB66C(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  const void *v5;
  __int128 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[2];
  int v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[8];
  __int16 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (*a4)
  {
    v5 = (const void *)sub_1001DEC98(a3);
    if (CFEqual(v5, CFSTR("kServingMccAndMncNotification")))
    {
      memset(v20, 0, sizeof(v20));
      v21 = 1065353216;
      if (sub_1001E56B4(*a4, (uint64_t)v20))
      {
        LODWORD(v22) = 0;
        *(_QWORD *)buf = &v22;
        v19 = *(_QWORD *)((char *)sub_1001E59F8((uint64_t)v20, (int *)&v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 20);
        LODWORD(v22) = 1;
        *(_QWORD *)buf = &v22;
        *(_QWORD *)&v6 = *(_QWORD *)((char *)sub_1001E59F8((uint64_t)v20, (int *)&v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 20);
        v18 = v6;
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v7 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v8) = 67109888;
          HIDWORD(v8) = v19;
          *(_QWORD *)buf = v8;
          v29 = 1024;
          *(_DWORD *)((unint64_t)buf | 0xA) = HIDWORD(v19);
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = DWORD1(v18);
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "MCC/MNC %d/%d, %d/%d", buf, 0x1Au);
        }
        v9 = sub_1001BFF7C(115, 2);
        if ((_DWORD)v9)
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          v14 = qword_10229FDA8;
          LODWORD(v15) = 67109888;
          HIDWORD(v15) = v19;
          v22 = v15;
          v23 = 1024;
          *(_DWORD *)((unint64_t)&v22 | 0xA) = HIDWORD(v19);
          v24 = 1024;
          v25 = v18;
          v26 = 1024;
          v27 = DWORD1(v18);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "MCC/MNC %d/%d, %d/%d", &v22, 26, (_DWORD)v18, DWORD2(v18));
          v17 = (uint8_t *)v16;
          v9 = sub_100512490("Generic", 1, 0, 2, "void CLKappaNotifier::onTelephony(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        v10.i64[0] = v19;
        v10.i64[1] = v18;
        *(int16x4_t *)buf = vmovn_s32(v10);
        sub_1001FBA94(v9, 6, buf, 8uLL);
      }
      else
      {
        if (qword_10229FDA0 != -1)
          dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
        v11 = qword_10229FDA8;
        if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "error fetching MCC and MNC", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDA0 != -1)
            dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
          LOWORD(v22) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDA8, 16, "error fetching MCC and MNC", &v22, 2);
          v13 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 0, "void CLKappaNotifier::onTelephony(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
      }
      sub_100067AC4((uint64_t)v20);
    }
  }
}

void sub_1001FBA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FBA94(uint64_t a1, char a2, void *a3, unint64_t a4)
{
  const void *v7;
  void *v8;

  v7 = (const void *)sub_1001FBB04(0);
  if (v7)
  {
    if (v8)
      sub_1001FBB74((uint64_t)v8, a2, a3, a4);
  }
}

uint64_t sub_1001FBB04(char a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[4];
  char v5;

  result = qword_1023113D8;
  if (!qword_1023113D8)
  {
    v3 = sub_100127B9C();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100C1DEBC;
    v4[3] = &unk_102146CB8;
    v5 = a1;
    sub_1000A50A8(v3, (uint64_t)v4);
    return qword_1023113D8;
  }
  return result;
}

void sub_1001FBB74(uint64_t a1, char a2, void *__src, unint64_t a4)
{
  size_t v5;
  __int128 v6[6];
  int v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  LOBYTE(v6[0]) = 65;
  BYTE1(v6[0]) = a2;
  if (__src && a4)
  {
    v5 = 96;
    if (a4 < 0x60)
      v5 = a4;
    memcpy((char *)v6 + 4, __src, v5);
  }
  sub_1001FBBF0(a1 + 192, v6, 0);
}

void sub_1001FBBF0(uint64_t a1, __int128 *a2, void *aBlock)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[7];
  _QWORD v10[6];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if (*(_QWORD *)(a1 + 8))
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x9812000000;
    v10[3] = sub_1005D5470;
    v10[4] = nullsub_220;
    v10[5] = &unk_102080316;
    v4 = a2[5];
    v15 = a2[4];
    v16 = v4;
    v17 = *((_DWORD *)a2 + 24);
    v5 = a2[1];
    v11 = *a2;
    v12 = v5;
    v6 = a2[3];
    v13 = a2[2];
    v14 = v6;
    if (aBlock)
      v7 = _Block_copy(aBlock);
    else
      v7 = 0;
    v8 = *(NSObject **)a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002081A4;
    v9[3] = &unk_102147938;
    v9[5] = v10;
    v9[6] = a1;
    v9[4] = v7;
    dispatch_async(v8, v9);
    _Block_object_dispose(v10, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_1001FBCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001FBD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  void *__p[2];
  char v8;
  id v9;
  id v10;

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (objc_msgSend(v5, "isValidCKP"))
  {
    if (sub_100013AB0(a1, (uint64_t)v5, a3))
      objc_msgSend(*(id *)(a1 + 136), "persist");
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary");
    v9 = objc_msgSend(v5, "legacyClientKey");
    v10 = v6;
    sub_10019DFF0((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1), (uint64_t)"clientStatus");
    sub_1015A2E04(__p, "");
    sub_100193838(a1, v5, (uint64_t)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1001FBE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FBE3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

BOOL sub_1001FBE48(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 3)
    goto LABEL_6;
  if (v2 == 9)
  {
    if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52))
    {
      v3 = *(_DWORD *)(a1 + 56);
      v4 = *(_DWORD *)(a2 + 56);
      return v3 == v4;
    }
    return 0;
  }
  if (v2 == 7)
  {
LABEL_6:
    if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      v3 = *(_DWORD *)(a1 + 24);
      v4 = *(_DWORD *)(a2 + 24);
      return v3 == v4;
    }
    return 0;
  }
  if (v2 - 3 <= 2)
    return sub_10071C1D0(a1 + 80, a2 + 80);
  if (v2 != 10)
  {
    if (v2 == 6
      && *(_DWORD *)(a1 + 512) == *(_DWORD *)(a2 + 512)
      && *(_DWORD *)(a1 + 516) == *(_DWORD *)(a2 + 516)
      && *(_DWORD *)(a1 + 520) == *(_DWORD *)(a2 + 520))
    {
      v3 = *(_DWORD *)(a1 + 524);
      v4 = *(_DWORD *)(a2 + 524);
      return v3 == v4;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 600) != *(_DWORD *)(a2 + 600)
    || *(_DWORD *)(a1 + 604) != *(_DWORD *)(a2 + 604)
    || *(_DWORD *)(a1 + 608) != *(_DWORD *)(a2 + 608))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 616) == *(_QWORD *)(a2 + 616);
}

void sub_1001FBF8C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  CFAbsoluteTime Current;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  CFAbsoluteTime v13;
  double v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  void *__p[2];
  uint64_t v20;
  int v21;
  CFAbsoluteTime v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  CFAbsoluteTime v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v7 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v9 = sub_1001FCBB4();
    v10 = *a3;
    v11 = a4 + 8;
    if (*(char *)(a4 + 31) < 0)
      v11 = *(_QWORD *)(a4 + 8);
    *(_DWORD *)buf = 134349827;
    v30 = Current;
    v31 = 2050;
    v32 = v9;
    v33 = 1026;
    v34 = v10;
    v35 = 2081;
    v36 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,machContTime,%{public}.1lf,onApp,ReceivedAppNotification,%{public}d,%{private}s", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v12 = qword_1022A0008;
    v13 = CFAbsoluteTimeGetCurrent();
    v14 = sub_1001FCBB4();
    v15 = *a3;
    v16 = a4 + 8;
    if (*(char *)(a4 + 31) < 0)
      v16 = *(_QWORD *)(a4 + 8);
    v21 = 134349827;
    v22 = v13;
    v23 = 2050;
    v24 = v14;
    v25 = 1026;
    v26 = v15;
    v27 = 2081;
    v28 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLAccessoryAWD,%{public}.1lf,machContTime,%{public}.1lf,onApp,ReceivedAppNotification,%{public}d,%{private}s", &v21, 38);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAppNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(char *)(a4 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a4 + 8);
    v20 = *(_QWORD *)(a4 + 24);
  }
  sub_1001FC25C(a1, (unsigned __int8 *)__p, (*a3 - 1) < 2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1001FC238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001FC25C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  double v4;
  CFAbsoluteTime Current;
  id v6;
  id v7;
  uint64_t **v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void **v12;
  void **v13;
  const char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char **v38;
  char *v39[2];
  int v40;
  CFAbsoluteTime v41;
  __int16 v42;
  double v43;
  __int16 v44;
  void **v45;
  _BYTE __p[24];
  double v47;
  _BYTE v48[128];

  v4 = sub_1001FCBB4();
  Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 6168) = v4;
  v31 = a1;
  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetNonSystemLocationClientKeys");
  v39[0] = 0;
  v39[1] = 0;
  v38 = v39;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v48, 16);
  if (v7)
  {
    v8 = (uint64_t **)(a1 + 6144);
    v9 = *(_QWORD *)v35;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v35 != v9)
          objc_enumerationMutation(v6);
        sub_1015A2E04(v32, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v10), "UTF8String"));
        if (SHIBYTE(v33) < 0)
        {
          sub_100115CE4(__p, v32[0], (unint64_t)v32[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v32;
          *(_QWORD *)&__p[16] = v33;
        }
        v47 = v4;
        sub_100210A64((uint64_t **)&v38, (const void **)__p, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (!sub_1001876D0((uint64_t)v8, (const void **)v32))
        {
          if (SHIBYTE(v33) < 0)
          {
            sub_100115CE4(__p, v32[0], (unint64_t)v32[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v32;
            *(_QWORD *)&__p[16] = v33;
          }
          v47 = v4;
          sub_100210A64(v8, (const void **)__p, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021506B8);
          v11 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
          {
            v12 = v32;
            if (v33 < 0)
              v12 = (void **)v32[0];
            *(_DWORD *)__p = 134349571;
            *(CFAbsoluteTime *)&__p[4] = Current;
            *(_WORD *)&__p[12] = 2050;
            *(double *)&__p[14] = v4;
            *(_WORD *)&__p[22] = 2081;
            v47 = *(double *)&v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,machContTime,%{public}.1lf,onApp,newApp,%{private}s", __p, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_1021506B8);
            v13 = v32;
            if (v33 < 0)
              v13 = (void **)v32[0];
            v40 = 134349571;
            v41 = Current;
            v42 = 2050;
            v43 = v4;
            v44 = 2081;
            v45 = v13;
            LODWORD(v28) = 32;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessoryAWD,%{public}.1lf,machContTime,%{public}.1lf,onApp,newApp,%{private}s", &v40, v28);
            v15 = (char *)v14;
            sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::updateLocationAppStatus(const std::string, const BOOL)", "%s\n", v14);
            if (v15 != __p)
              free(v15);
          }
        }
        if (SHIBYTE(v33) < 0)
          operator delete(v32[0]);
        v10 = (char *)v10 + 1;
      }
      while (v7 != v10);
      v16 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v48, 16);
      v7 = v16;
    }
    while (v16);
  }
  v17 = *(_QWORD *)(a1 + 6144);
  v18 = (uint64_t *)(a1 + 6152);
  if (v17 != v31 + 6152)
  {
    do
    {
      if (sub_1001876D0((uint64_t)&v38, (const void **)(v17 + 32)))
      {
        v19 = *(unsigned __int8 *)(v17 + 55);
        if ((v19 & 0x80u) == 0)
          v20 = *(unsigned __int8 *)(v17 + 55);
        else
          v20 = *(_QWORD *)(v17 + 40);
        v21 = a2[23];
        v22 = (char)v21;
        if ((v21 & 0x80u) != 0)
          v21 = *((_QWORD *)a2 + 1);
        if (v20 != v21)
          goto LABEL_54;
        if (v22 >= 0)
          v23 = a2;
        else
          v23 = *(unsigned __int8 **)a2;
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v17 + 32), v23, *(_QWORD *)(v17 + 40)))
            goto LABEL_54;
        }
        else
        {
          v24 = (unsigned __int8 *)(v17 + 32);
          if (*(_BYTE *)(v17 + 55))
          {
            while (*v24 == *v23)
            {
              ++v24;
              ++v23;
              if (!--v19)
                goto LABEL_52;
            }
LABEL_54:
            v26 = *(uint64_t **)(v17 + 8);
            if (v26)
            {
              do
              {
                v25 = v26;
                v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v25 = *(uint64_t **)(v17 + 16);
                v27 = *v25 == v17;
                v17 = (uint64_t)v25;
              }
              while (!v27);
            }
            goto LABEL_59;
          }
        }
LABEL_52:
        if (!a3)
          goto LABEL_54;
      }
      sub_1011601C8(v31 + 2544, v17 + 32, (double *)(v17 + 56), v4);
      v25 = sub_100675198((uint64_t **)(v31 + 6144), v17);
LABEL_59:
      v17 = (uint64_t)v25;
    }
    while (v25 != v18);
  }
  sub_100090AE4((uint64_t)&v38, v39[0]);
}

void sub_1001FC750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a23 < 0)
    operator delete(__p);
  sub_100090AE4((uint64_t)&a33, a34);
  _Unwind_Resume(a1);
}

double sub_1001FC7BC(uint64_t a1, uint64_t a2)
{
  double Current;
  double v4;

  if (*(double *)(a2 + 344) <= 0.0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = *(double *)(a1 + 76);
  }
  else
  {
    Current = sub_1001FCBB4();
    v4 = *(double *)(a2 + 344);
  }
  return Current - v4;
}

uint64_t sub_1001FC800(uint64_t a1, int a2, double a3)
{
  uint64_t result;

  result = sub_1001FC84C(a1, a3);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = a2;
    if (*(_QWORD *)(a1 + 32))
      return sub_1000B5898(a1 + 8, a2, *(double *)(a1 + 56));
  }
  return result;
}

BOOL sub_1001FC84C(uint64_t a1, double a2)
{
  double v4;
  double v5;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL8 result;
  double v9;
  uint8_t *v10;
  uint8_t *v11;
  double v12;
  NSObject *v13;
  double v14;
  uint8_t *v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;

  v4 = sub_1001FCBB4();
  v5 = v4;
  if (v4 >= a2)
  {
    v12 = v4 - *(double *)(a1 + 56);
    if (v12 <= 1.0)
    {
      result = 1;
      goto LABEL_23;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AFD8);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      v23 = v12;
      v24 = 2050;
      v25 = a2;
      v26 = 2050;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "AmbientLight,Timing,diff_rxtime,%{public}.2f,mat,%{public}.3f,mct,%{public}.3f", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AFD8);
      v16 = 134349568;
      v17 = v12;
      v18 = 2050;
      v19 = a2;
      v20 = 2050;
      v21 = v5;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "AmbientLight,Timing,diff_rxtime,%{public}.2f,mat,%{public}.3f,mct,%{public}.3f", &v16, 32);
      v11 = v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLAmbientLightDecisionTree::sanityCheckAmbientLightMeasurementTiming(const double)", "%s\n", v14);
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AFD8);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349312;
      v23 = a2;
      v24 = 2050;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "AmbientLight,Timing,mct_lt_mat,mat,%{public}f,mct,%{public}f", buf, 0x16u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AFD8);
      v16 = 134349312;
      v17 = a2;
      v18 = 2050;
      v19 = v5;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "AmbientLight,Timing,mct_lt_mat,mat,%{public}f,mct,%{public}f", &v16, 22);
      v11 = v10;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLAmbientLightDecisionTree::sanityCheckAmbientLightMeasurementTiming(const double)", "%s\n", v9);
LABEL_19:
      if (v11 != buf)
        free(v11);
      result = 0;
    }
  }
LABEL_23:
  *(double *)(a1 + 56) = v5;
  return result;
}

double sub_1001FCBB4()
{
  uint64_t v0;

  v0 = mach_continuous_time();
  return sub_100127828(v0);
}

void sub_1001FCBC8(uint64_t a1, int a2, double a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  double Current;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  double v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  double v22;
  int v23;
  NSObject *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  int v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  int v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  const char *v46;
  uint8_t *v47;
  double v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  _BYTE v61[24];
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint8_t buf[4];
  double v68;
  __int16 v69;
  _BYTE v70[10];
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;

  if (*(_DWORD *)(a1 + 216) > 2u)
    return;
  if (sub_1001FD8B8(*(_QWORD *)(a1 + 104)) > 0.0 && *(_BYTE *)(a1 + 32))
  {
    if ((sub_100EE18AC(a1, a3) & 1) != 0)
      return;
    v6 = *(_DWORD *)(a1 + 216);
    if (v6 == 2)
    {
      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v13 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_DWORD *)(a1 + 232);
          v14 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)buf = 134349568;
          v68 = a3;
          v69 = 1026;
          *(_DWORD *)v70 = v14;
          *(_WORD *)&v70[4] = 1026;
          *(_DWORD *)&v70[6] = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021912C0);
          v38 = *(_DWORD *)(a1 + 232);
          v37 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)v61 = 134349568;
          *(double *)&v61[4] = a3;
          *(_WORD *)&v61[12] = 1026;
          *(_DWORD *)&v61[14] = v37;
          *(_WORD *)&v61[18] = 1026;
          *(_DWORD *)&v61[20] = v38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", v61, 24);
          v40 = (uint8_t *)v39;
          sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v39);
          if (v40 != buf)
            free(v40);
        }
        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 224) = a3;
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v16 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(double *)(a1 + 8);
          *(_DWORD *)buf = 134349056;
          v68 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_50;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 == -1)
          goto LABEL_85;
        goto LABEL_99;
      }
      if (*(double *)(a1 + 224) + 180.0 >= a3)
        return;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v24 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v25 = a3 - *(double *)(a1 + 48);
        v26 = *(_DWORD *)(a1 + 240);
        v27 = *(_QWORD *)(a1 + 8);
        v28 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 134350080;
        v68 = a3;
        v69 = 2050;
        *(double *)v70 = v25;
        *(_WORD *)&v70[8] = 1026;
        v71 = v26;
        v72 = 2050;
        v73 = v27;
        v74 = 2050;
        v75 = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, escalation end time : %{public}f, escalation duration : %{public}f, total number of floors ascended : %{public}u, recoveryStart : %{public}f, recoveryEnd : %{public}f", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v48 = a3 - *(double *)(a1 + 48);
        v49 = *(_DWORD *)(a1 + 240);
        v50 = *(_QWORD *)(a1 + 8);
        v51 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)v61 = 134350080;
        *(double *)&v61[4] = a3;
        *(_WORD *)&v61[12] = 2050;
        *(double *)&v61[14] = v48;
        *(_WORD *)&v61[22] = 1026;
        v62 = v49;
        v63 = 2050;
        v64 = v50;
        v65 = 2050;
        v66 = v51;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, escalation end time : %{public}f, escalation duration : %{public}f, total number of floors ascended : %{public}u, recoveryStart : %{public}f, recoveryEnd : %{public}f", v61, 48);
        v53 = (uint8_t *)v52;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v52);
        if (v53 != buf)
          free(v53);
      }
      *(double *)(a1 + 16) = a3;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v29 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(double *)(a1 + 16);
        *(_DWORD *)buf = 134349056;
        v68 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery endTime set to %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v54 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)v61 = 134349056;
        *(_QWORD *)&v61[4] = v54;
        LODWORD(v60) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, HRRecovery endTime set to %{public}f", v61, v60);
        v56 = (uint8_t *)v55;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v55);
        if (v56 != buf)
          free(v56);
      }
      v31 = a1;
      v32 = 1;
    }
    else
    {
      if (v6 != 1)
      {
        if (!v6 && a2)
        {
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021912C0);
          v7 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v68 = a3;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation triggered, timestamp : %{public}f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_1021912C0);
            *(_DWORD *)v61 = 134349056;
            *(double *)&v61[4] = a3;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation triggered, timestamp : %{public}f", v61, 12);
            v36 = (uint8_t *)v35;
            sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v35);
            if (v36 != buf)
              free(v36);
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104));
          *(_DWORD *)(a1 + 216) = 1;
          *(double *)(a1 + 48) = a3;
          *(_BYTE *)(a1 + 34) = 0;
          *(_DWORD *)buf = 0;
          v8 = sub_1001FD94C();
          if (byte_102308FAF >= 0)
            v9 = (const char *)&qword_102308F98;
          else
            v9 = (const char *)qword_102308F98;
          sub_1001E4B84(v8, v9, buf);
          *(_DWORD *)(a1 + 336) = *(_DWORD *)buf;
          if (*(_QWORD *)(a1 + 176))
          {
            if (!*(_BYTE *)(a1 + 33))
            {
              Current = CFAbsoluteTimeGetCurrent();
              sub_100EE0F4C(a1 + 152, 0, 0, 11, Current);
              *(_BYTE *)(a1 + 33) = 1;
            }
          }
        }
        return;
      }
      if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v18 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_DWORD *)(a1 + 232);
          v19 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)buf = 134349568;
          v68 = a3;
          v69 = 1026;
          *(_DWORD *)v70 = v19;
          *(_WORD *)&v70[4] = 1026;
          *(_DWORD *)&v70[6] = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_1021912C0);
          v42 = *(_DWORD *)(a1 + 232);
          v41 = *(_DWORD *)(a1 + 236);
          *(_DWORD *)v61 = 134349568;
          *(double *)&v61[4] = a3;
          *(_WORD *)&v61[12] = 1026;
          *(_DWORD *)&v61[14] = v41;
          *(_WORD *)&v61[18] = 1026;
          *(_DWORD *)&v61[20] = v42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, flight detected, timestamp, %{public}f, prev floors Ascended : %{public}u, current floors Ascended, %{public}u", v61, 24);
          v44 = (uint8_t *)v43;
          sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
        *(_DWORD *)(a1 + 216) = 2;
        *(double *)(a1 + 8) = a3;
        *(double *)(a1 + 224) = a3;
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v21 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(double *)(a1 + 8);
          *(_DWORD *)buf = 134349056;
          v68 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_50;
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 == -1)
        {
LABEL_85:
          v45 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)v61 = 134349056;
          *(_QWORD *)&v61[4] = v45;
          LODWORD(v60) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, HRRecovery startTime set to %{public}.1f", v61, v60, *(_OWORD *)v61);
          v47 = (uint8_t *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v46);
          if (v47 != buf)
            free(v47);
LABEL_50:
          v23 = *(_DWORD *)(a1 + 240) + 1;
          *(_DWORD *)(a1 + 236) = *(_DWORD *)(a1 + 232);
          *(_DWORD *)(a1 + 240) = v23;
          return;
        }
LABEL_99:
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
        goto LABEL_85;
      }
      if (a3 - *(double *)(a1 + 48) <= 30.0)
        return;
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v33 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        v34 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134349312;
        v68 = a3;
        v69 = 2050;
        *(_QWORD *)v70 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, deescalated due to no confirmed flight, timestamp : %{public}f, escalationOnsetTime : %{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_1021912C0);
        v57 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)v61 = 134349312;
        *(double *)&v61[4] = a3;
        *(_WORD *)&v61[12] = 2050;
        *(_QWORD *)&v61[14] = v57;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Background Stairs Escalation Manager, deescalated due to no confirmed flight, timestamp : %{public}f, escalationOnsetTime : %{public}f", v61, 22);
        v59 = (uint8_t *)v58;
        sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)", "%s\n", v58);
        if (v59 != buf)
          free(v59);
      }
      v31 = a1;
      v32 = 4;
    }
    sub_1001FE080(v31, v32);
    return;
  }
  if (sub_1001FD8B8(*(_QWORD *)(a1 + 104)) <= 0.0)
    v11 = 7;
  else
    v11 = 6;
  sub_1001FE080(a1, v11);
  v12 = *(_QWORD *)(a1 + 208);
  if (v12)
  {
    buf[0] = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  }
}

double sub_1001FD8B8(uint64_t a1)
{
  int v2;
  double v3;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = sub_1001FD900(a1);
  if (!v2)
    return v3 - (sub_1001FCBB4() - *(double *)(a1 + 16));
  return v3;
}

double sub_1001FD900(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  double v5;

  v5 = 0.0;
  v2 = sub_1001FD94C();
  v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = *(const char **)v3;
  sub_1001FD98C(v2, v3, &v5);
  return v5;
}

uint64_t sub_1001FD94C()
{
  if (qword_102301C18 != -1)
    dispatch_once(&qword_102301C18, &stru_102144560);
  return qword_1023108D0;
}

uint64_t sub_1001FD98C(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1001FD9FC(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1001FD9FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_1001FDC34(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_1001FDC34(const void *a1, void *a2)
{
  CFTypeID v4;
  uint64_t result;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  CFTypeID v13;
  __int16 v14;
  CFTypeID v15;
  uint8_t buf[4];
  CFTypeID v17;
  __int16 v18;
  CFTypeID TypeID;

  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v17 = CFGetTypeID(a1);
      v18 = 2050;
      TypeID = CFNumberGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v7)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v8 = qword_1022A02D8;
    v12 = 134349312;
    v13 = CFGetTypeID(a1);
    v14 = 2050;
    v15 = CFNumberGetTypeID();
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "type IDs do not match - %{public}lu vs %{public}lu", &v12, 22);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "%s\n", v9);
    if (v9 == (char *)buf)
      return 0;
LABEL_12:
    free(v9);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, a2))
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v11 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v11)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    LOWORD(v12) = 0;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get value", &v12, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "%s\n", v9);
    if (v9 == (char *)buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1001FDF88(uint64_t a1, const __CFString *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  CFTypeRef v12;
  CFTypeRef cf[3];
  __int16 v15;

  v9 = a1 + 128;
  v8 = *(_QWORD *)(a1 + 128);
  cf[1] = (CFTypeRef)(a1 + 128);
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 128);
  v15 = 256;
  cf[0] = 0;
  v10 = sub_1001C15CC(a1, a2, (uint64_t *)cf, a4);
  if ((_DWORD)v10)
  {
    v11 = CFGetTypeID(cf[0]);
    if (v11 == CFArrayGetTypeID() || v11 == CFDictionaryGetTypeID())
    {
      *a3 = objc_msgSend((id)cf[0], "cl_deepCopy");
    }
    else
    {
      v12 = cf[0];
      *a3 = cf[0];
      CFRetain(v12);
    }
    CFRelease(cf[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return v10;
}

void sub_1001FE068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FE080(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double Current;
  double v8;
  uint64_t v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  if ((*(_DWORD *)(a1 + 216) - 1) <= 1)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v5 = sub_1001FD8B8(*(_QWORD *)(a1 + 104));
      *(_DWORD *)buf = 134349056;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, deescalating, remaining budget : %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021912C0);
      v9 = qword_10229FE68;
      v10 = sub_1001FD8B8(*(_QWORD *)(a1 + 104));
      v13 = 134349056;
      v14 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 2, "Background Stairs Escalation Manager, deescalating, remaining budget : %{public}f", &v13, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::handleStairsDeescalation(CMActivityReason)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
    sub_1009FCEA4(*(_QWORD *)(a1 + 104));
    Current = CFAbsoluteTimeGetCurrent();
    v8 = Current;
    if (*(_QWORD *)(a1 + 176) && !*(_BYTE *)(a1 + 34))
    {
      sub_100EE0F4C(a1 + 152, 1, a2, 11, Current);
      *(_BYTE *)(a1 + 34) = 1;
    }
    if (*(_DWORD *)(a1 + 336) == 3 && v8 - *(double *)(a1 + 48) >= 30.0)
      sub_100EE1ADC(a1, v6);
    *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 33) = 0;
    *(_DWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 237) = 0;
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  }
}

uint64_t sub_1001FE2FC(uint64_t result, unsigned int a2)
{
  int v2;

  if (a2 >= 6)
    sub_100263950("array::at");
  v2 = *(_DWORD *)(result + 4 * a2);
  *(_DWORD *)(result + 4 * a2) = v2 - 1;
  if (v2 <= 0)
    sub_1019232A4();
  return result;
}

uint64_t sub_1001FE338(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  NSNumber *v5;

  v2 = (void *)sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("activeType"));
  v3 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 6);
  v4 = sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("startDate"));
  if (v2 && v3)
  {
    if (!v4)
    {
      v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
      sub_100E539FC(a1, (uint64_t)CFSTR("startDate"), (uint64_t)v5);
      sub_100E53AAC(a1);
    }
    return sub_10140D434(a1, (int)objc_msgSend(v2, "intValue"));
  }
  else
  {
    if (v4)
    {
      sub_100E539FC(a1, (uint64_t)CFSTR("startDate"), 0);
      sub_100E53AAC(a1);
    }
    return sub_100223FD8(a1);
  }
}

uint64_t sub_1001FE40C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  const char *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  const char *v32;

  sub_1001FE68C((uint64_t)a1);
  v4 = a1[6];
  sub_1007208BC(&v23, a1 + 1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v23, a2);
  v7 = v5;
  v8 = v24;
  if (!v24)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v7)
      return v7;
  }
  else
  {
LABEL_5:
    if (!v5)
      return v7;
  }
  v11 = objc_opt_class(NSNumber, v6);
  if ((objc_opt_isKindOfClass(v7, v11) & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v14 = a1[8];
      v15 = (objc_class *)objc_opt_class(v7, v13);
      v16 = -[NSString UTF8String](NSStringFromClass(v15), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2114;
      v30 = v14;
      v31 = 2082;
      v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to downcast objc type\", \"clientKeyPath\":%{public, location:escape_only}@, \"foundClass\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    v17 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v19 = a1[8];
      v20 = (objc_class *)objc_opt_class(v7, v18);
      v21 = -[NSString UTF8String](NSStringFromClass(v20), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      v29 = 2114;
      v30 = v19;
      v31 = 2082;
      v32 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to downcast objc type", "{\"msg%{public}.0s\":\"Failed to downcast objc type\", \"clientKeyPath\":%{public, location:escape_only}@, \"foundClass\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    return 0;
  }
  return v7;
}

void sub_1001FE670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FE68C(uint64_t result)
{
  if (!*(_BYTE *)(result + 248))
    sub_10192F2B4();
  return result;
}

id sub_1001FE6A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  void **v6;
  id v7;
  __int128 *p_p;
  id v9;
  void *v11[2];
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_100115CE4(v11, *(void **)(v5 + 72), *(_QWORD *)(v5 + 80));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)(v5 + 72);
    v12 = *(_QWORD *)(v5 + 88);
  }
  if (*(char *)(v5 + 119) < 0)
  {
    sub_100115CE4(&__p, *(void **)(v5 + 96), *(_QWORD *)(v5 + 104));
  }
  else
  {
    __p = *(_OWORD *)(v5 + 96);
    v14 = *(_QWORD *)(v5 + 112);
  }
  v15 = *(_QWORD *)(v5 + 120);
  if (v12 >= 0)
    v6 = v11;
  else
    v6 = (void **)v11[0];
  v7 = sub_100196E90(*(_QWORD *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v11[0], v11[1], v12)));
  if (v14 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  v9 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "dictionaryForKey:atKeyPath:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p), v7, &__NSDictionary0__struct), "objectForKeyedSubscript:", a3);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  return v9;
}

void sub_1001FE7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001FE880(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;

  v10 = a3;
  ++*(_DWORD *)(a1 + 204);
  if (*(_BYTE *)(a1 + 88) && (a3 == 5 || !a3))
  {
    sub_100203518(a1);
    v6 = *(double *)(a4 + 20);
    v7 = v6 > 0.0 && v6 < 200.0;
    if (v7 && (sub_1002035A8(a1) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 440))
      {
        sub_1001FEC34(a1, a1 + 1336);
      }
      else
      {
        if (sub_1001FEC34(a1, a1 + 936))
        {
          v8 = a1;
          v9 = 0;
        }
        else
        {
          v8 = a1;
          v9 = 1;
        }
        sub_1001FE960(v8, v9);
      }
    }
    if (sub_1002035A8(a1))
      sub_100FEA5A4(a1 + 608, (uint64_t)&v10, a4, 0);
    sub_1001FEABC(a1);
  }
}

void sub_1001FE960(uint64_t a1, int a2)
{
  void *__p[3];

  if (a2 <= 5)
  {
    sub_1001FE9E0(__p, 6uLL);
    *((_DWORD *)__p[0] + a2) = 1;
    sub_1001FEA54(*(_QWORD *)(a1 + 920), __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1001FE9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001FE9E0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1002720D4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1001FEA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FEA54(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD v3[5];

  if (a2[1] - *a2 >= 0x18uLL)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10110A4CC;
    v3[3] = &unk_102131FE8;
    v3[4] = a2;
    return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.harvest.trace.triggerstats"), v3);
  }
  return result;
}

void sub_1001FEABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v2 = a1 + 608;
  if (sub_1001FEC2C(a1 + 608))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) != 0)
    {
      v3 = *(_QWORD *)(a1 + 1376);
      if (v3)
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 3221225472;
        v6[2] = sub_100CEA6E4;
        v6[3] = &unk_10217EF40;
        v6[4] = v4;
        v6[5] = a1;
        sub_100FEB7E0(v2, (uint64_t)v6);
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217F080);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        sub_100201404(a1);
        *(_DWORD *)buf = 68289282;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2050;
        v12 = sub_100201404(a1);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
    }
  }
}

id sub_1001FEC2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 48), "count");
}

uint64_t sub_1001FEC34(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE v13[40];
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;

  v4 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  sub_1006DFA98(v13, a1 + 1384);
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *, double))(*(_QWORD *)a2 + 16))(a2, v13, v4);
  if (v13[32])
    sub_1001FF18C((uint64_t)v13);
  if ((v5 & 1) != 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217F080);
    v6 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
      *(_DWORD *)buf = 138412290;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ starting trace", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217F080);
      v10 = qword_1022A0208;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
      v14 = 138412290;
      v15 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "%@ starting trace", &v14, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSubHarvesterTrace::startTrace(CLTraceHarvestInterface::Archiver &)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    *(_BYTE *)(a1 + 904) = 1;
    *(_QWORD *)(a1 + 1376) = a2;
    v8 = (_QWORD *)(a1 + 608);
    sub_100FEA50C(v8);
    sub_100FEAACC(v8);
  }
  return v5;
}

void sub_1001FEE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    sub_1001FF18C((uint64_t)&a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FEEAC(uint64_t a1, uint64_t a2, double a3)
{
  char v6;
  void *v8;
  id v9;
  CLHarvestScoredRequestArchive *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  _BYTE v14[40];

  sub_1006DFA98(v14, a2);
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, double))(*(_QWORD *)a1 + 120))(a1, v14, a3);
  if (v14[32])
    sub_1001FF18C((uint64_t)v14);
  if ((v6 & 1) == 0
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    return 0;
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 24), "setArchive:", objc_msgSend(*(id *)(a1 + 32), "archiveForHarvester:withSuffix:", 10, (*(uint64_t (**)(uint64_t, id))(*(_QWORD *)a1 + 128))(a1, objc_msgSend(v8, "index"))));
  }
  else
  {
    v9 = objc_msgSend(*(id *)(a1 + 8), "count");
    v10 = -[CLHarvestScoredRequestArchive initWithArchive:index:]([CLHarvestScoredRequestArchive alloc], "initWithArchive:index:", objc_msgSend(*(id *)(a1 + 32), "archiveForHarvester:withSuffix:", 10, (*(uint64_t (**)(uint64_t, id))(*(_QWORD *)a1 + 128))(a1, v9)), v9);
    *(_QWORD *)(a1 + 24) = v10;
    objc_msgSend(*(id *)(a1 + 8), "addObject:", v10);
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "archive"), "eraseAllData");
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v12 = *(_QWORD *)(a1 + 40);
  sub_1006DFA98(v13, a2);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v12, v13);
  if (v13[32])
    sub_1001FF18C((uint64_t)v13);
  *(double *)(a1 + 16) = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  return 1;
}

void sub_1001FF060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a13)
    sub_1001FF18C((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001FF090(uint64_t a1, uint64_t a2, double a3)
{
  int v5;
  double v7;
  _BYTE v8[40];

  sub_1006DFA98(v8, a2);
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 96))(a1, v8);
  if (v8[32])
    sub_1001FF18C((uint64_t)v8);
  if (v5)
  {
    sub_10110A330(*(_QWORD *)(a1 + 64), 1, 1, a3);
    return 0;
  }
  else
  {
    v7 = *(double *)(a1 + 88);
    return v7 <= a3 || v7 == 1.79769313e308;
  }
}

void sub_1001FF12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    sub_1001FF18C((uint64_t)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FF148(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1006DF934(a1, a2);
  return a1;
}

void sub_1001FF178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001FF18C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FF18C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_10214F150[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

BOOL sub_1001FF1E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD v6[5];

  if (!*(_BYTE *)(a2 + 32))
    return 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 168))(v6);
  if (!*(_BYTE *)(a2 + 32))
    sub_10028DF3C();
  if (*(_DWORD *)(a2 + 24) == 1)
    v3 = sub_1001FF2F4(v6, (unint64_t *)a2);
  else
    v3 = (_QWORD *)v6[3];
  v4 = v3 != 0;
  sub_100067AC4((uint64_t)v6);
  return v4;
}

void sub_1001FF26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FF280(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1008A2874(a1, i + 2, i + 2);
  return a1;
}

void sub_1001FF2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001FF2F4(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1001FF3A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 128))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001FF3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FF280(a2, a1 + 144);
}

void sub_1001FF6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  NSObject *v7;
  const char *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  id v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  NSObject *v39;
  id v40;
  _OWORD v41[8];
  uint64_t v42;
  _OWORD v43[8];
  uint64_t v44;
  _OWORD v45[8];
  uint64_t v46;
  _OWORD v47[8];
  _OWORD v48[2];
  uint64_t buf;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  id v55;

  if ((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a4 + 76) <= *(double *)(a1 + 440))
  {
    v6 = *(double *)(a4 + 20);
    if (v6 >= 0.0)
    {
      if (v6 <= 1000.0)
      {
        v9 = objc_alloc((Class)CLPLocation);
        v10 = *(_OWORD *)(a4 + 112);
        v47[6] = *(_OWORD *)(a4 + 96);
        v47[7] = v10;
        v48[0] = *(_OWORD *)(a4 + 128);
        *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)(a4 + 140);
        v11 = *(_OWORD *)(a4 + 48);
        v47[2] = *(_OWORD *)(a4 + 32);
        v47[3] = v11;
        v12 = *(_OWORD *)(a4 + 80);
        v47[4] = *(_OWORD *)(a4 + 64);
        v47[5] = v12;
        v13 = *(_OWORD *)(a4 + 16);
        v47[0] = *(_OWORD *)a4;
        v47[1] = v13;
        v14 = objc_msgSend(v9, "initWithDaemonLocation:", v47);
        v15 = objc_alloc((Class)CLPMotionActivity);
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
        v45[0] = *(_OWORD *)v16;
        v17 = *(_OWORD *)(v16 + 64);
        v19 = *(_OWORD *)(v16 + 16);
        v18 = *(_OWORD *)(v16 + 32);
        v45[3] = *(_OWORD *)(v16 + 48);
        v45[4] = v17;
        v45[1] = v19;
        v45[2] = v18;
        v21 = *(_OWORD *)(v16 + 96);
        v20 = *(_OWORD *)(v16 + 112);
        v22 = *(_OWORD *)(v16 + 80);
        v46 = *(_QWORD *)(v16 + 128);
        v45[6] = v21;
        v45[7] = v20;
        v45[5] = v22;
        objc_msgSend(v14, "setRawMotionActivity:", objc_msgSend(v15, "initWithCLMotionActivity:", v45));
        v23 = objc_alloc((Class)CLPMotionActivity);
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
        v43[0] = *(_OWORD *)v24;
        v25 = *(_OWORD *)(v24 + 64);
        v27 = *(_OWORD *)(v24 + 16);
        v26 = *(_OWORD *)(v24 + 32);
        v43[3] = *(_OWORD *)(v24 + 48);
        v43[4] = v25;
        v43[1] = v27;
        v43[2] = v26;
        v29 = *(_OWORD *)(v24 + 96);
        v28 = *(_OWORD *)(v24 + 112);
        v30 = *(_OWORD *)(v24 + 80);
        v44 = *(_QWORD *)(v24 + 128);
        v43[6] = v29;
        v43[7] = v28;
        v43[5] = v30;
        objc_msgSend(v14, "setMotionActivity:", objc_msgSend(v23, "initWithCLMotionActivity:", v43));
        v31 = objc_alloc((Class)CLPMotionActivity);
        v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
        v41[0] = *(_OWORD *)v32;
        v33 = *(_OWORD *)(v32 + 64);
        v35 = *(_OWORD *)(v32 + 16);
        v34 = *(_OWORD *)(v32 + 32);
        v41[3] = *(_OWORD *)(v32 + 48);
        v41[4] = v33;
        v41[1] = v35;
        v41[2] = v34;
        v37 = *(_OWORD *)(v32 + 96);
        v36 = *(_OWORD *)(v32 + 112);
        v38 = *(_OWORD *)(v32 + 80);
        v42 = *(_QWORD *)(v32 + 128);
        v41[6] = v37;
        v41[7] = v36;
        v41[5] = v38;
        objc_msgSend(v14, "setDominantMotionActivity:", objc_msgSend(v31, "initWithCLMotionActivity:", v41));
        objc_msgSend(*(id *)(a1 + 400), "addObject:", v14);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102139040);
        v39 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v40 = objc_msgSend(*(id *)(a1 + 400), "count");
          buf = 68289539;
          v50 = 2082;
          v51 = "";
          v52 = 2050;
          v53 = 9;
          v54 = 2049;
          v55 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"adding location to buffer\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"bufferedLocationCount\":%{private}lu}", (uint8_t *)&buf, 0x26u);
        }

        sub_1002000E0(a1);
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102139040);
        v7 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          buf = 68289282;
          v50 = 2082;
          v51 = "";
          v52 = 2050;
          v53 = 9;
          v8 = "{\"msg%{public}.0s\":\"ignoring inaccurate location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
          goto LABEL_12;
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102139040);
      v7 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        buf = 68289282;
        v50 = 2082;
        v51 = "";
        v52 = 2050;
        v53 = 9;
        v8 = "{\"msg%{public}.0s\":\"ignoring invalid location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&buf, 0x1Cu);
      }
    }
  }
}

id sub_1001FFF00(uint64_t a1, _OWORD *a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v33[8];
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  _OWORD v37[8];
  uint64_t v38;
  _OWORD v39[8];
  _BYTE v40[28];

  v4 = objc_alloc((Class)CLPLocation);
  v5 = a2[5];
  v39[4] = a2[4];
  v39[5] = v5;
  v6 = a2[3];
  v39[2] = a2[2];
  v39[3] = v6;
  *(_OWORD *)&v40[12] = *(_OWORD *)((char *)a2 + 140);
  v7 = a2[8];
  v8 = a2[6];
  v39[7] = a2[7];
  *(_OWORD *)v40 = v7;
  v39[6] = v8;
  v9 = a2[1];
  v39[0] = *a2;
  v39[1] = v9;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  v37[0] = *(_OWORD *)v10;
  v12 = *(_OWORD *)(v10 + 16);
  v11 = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  v37[3] = *(_OWORD *)(v10 + 48);
  v37[4] = v13;
  v37[1] = v12;
  v14 = *(_OWORD *)(v10 + 80);
  v15 = *(_OWORD *)(v10 + 96);
  v16 = *(_OWORD *)(v10 + 112);
  v38 = *(_QWORD *)(v10 + 128);
  v37[6] = v15;
  v37[7] = v16;
  v37[5] = v14;
  v37[2] = v11;
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
  v35[0] = *(_OWORD *)v17;
  v18 = *(_OWORD *)(v17 + 16);
  v19 = *(_OWORD *)(v17 + 32);
  v20 = *(_OWORD *)(v17 + 64);
  v35[3] = *(_OWORD *)(v17 + 48);
  v35[4] = v20;
  v35[1] = v18;
  v35[2] = v19;
  v21 = *(_OWORD *)(v17 + 80);
  v22 = *(_OWORD *)(v17 + 96);
  v23 = *(_OWORD *)(v17 + 112);
  v36 = *(_QWORD *)(v17 + 128);
  v35[6] = v22;
  v35[7] = v23;
  v35[5] = v21;
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
  v33[0] = *(_OWORD *)v24;
  v25 = *(_OWORD *)(v24 + 64);
  v27 = *(_OWORD *)(v24 + 16);
  v26 = *(_OWORD *)(v24 + 32);
  v33[3] = *(_OWORD *)(v24 + 48);
  v33[4] = v25;
  v33[1] = v27;
  v33[2] = v26;
  v29 = *(_OWORD *)(v24 + 96);
  v28 = *(_OWORD *)(v24 + 112);
  v30 = *(_OWORD *)(v24 + 80);
  v34 = *(_QWORD *)(v24 + 128);
  v33[6] = v29;
  v33[7] = v28;
  v33[5] = v30;
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 216))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(v4, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:", v39, v37, v35, v33, v31, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 208))(*(_QWORD *)(a1 + 56)));
}

uint64_t sub_100200078(uint64_t a1)
{
  return a1 + 664;
}

uint64_t sub_100200080(uint64_t a1)
{
  return a1 + 392;
}

uint64_t sub_100200088(uint64_t a1)
{
  return a1 + 528;
}

BOOL sub_100200090(double *a1)
{
  _BOOL4 v1;

  v1 = a1[101] > 0.0;
  return (*(double (**)(double *))(*(_QWORD *)a1 + 64))(a1) - a1[101] <= 30.0 && v1;
}

uint64_t sub_1002000D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 802);
}

void sub_1002000E0(uint64_t a1)
{
  NSMutableArray *v2;
  double v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  __int128 v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[8];
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  _BYTE v38[128];

  v2 = objc_opt_new(NSMutableArray);
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = *(id *)(a1 + 432);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v29;
    *(_QWORD *)&v5 = 68289282;
    v21 = v5;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v29 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v8);
        v27 = objc_msgSend(v9, "triggerType", v21);
        *(_QWORD *)buf = &v27;
        v10 = *((double *)sub_1000610B4((uint64_t **)(a1 + 408), (int *)&v27, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 6);
        objc_msgSend(v9, "triggerTimestamp");
        if (v10 + v11 <= v3)
        {
          -[NSMutableArray addObject:](v2, "addObject:", v9);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102139040);
          v15 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v21;
            *(_DWORD *)&buf[4] = 0;
            v34 = 2082;
            v35 = "";
            v36 = 2050;
            v37 = 9;
            v13 = v15;
            v14 = "{\"msg%{public}.0s\":\"found ready transaction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
            goto LABEL_15;
          }
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102139040);
          v12 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v21;
            *(_DWORD *)&buf[4] = 0;
            v34 = 2082;
            v35 = "";
            v36 = 2050;
            v37 = 9;
            v13 = v12;
            v14 = "{\"msg%{public}.0s\":\"found non-ready transaction\", \"subHarvester\":%{public, location:CLSubHarvest"
                  "erIdentifier}lld}";
LABEL_15:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, v14, buf, 0x1Cu);
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
    }
    while (v6);
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v2);
        v20 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        sub_100429FB8(a1, v20);
        objc_msgSend(*(id *)(a1 + 432), "removeObject:", v20);
        sub_100D05194(a1);
      }
      v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    }
    while (v17);
  }

  sub_100087390(a1);
  sub_10020043C(a1);
}

void sub_10020043C(uint64_t a1)
{
  double v2;
  void *v3;
  NSMutableArray *v4;
  _QWORD v5[6];

  v2 = sub_1002004D4(a1);
  v4 = objc_opt_new(NSMutableArray);
  v3 = *(void **)(a1 + 392);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000397B4;
  v5[3] = &unk_102138FE0;
  *(double *)&v5[5] = v2;
  v5[4] = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);
  objc_msgSend(*(id *)(a1 + 392), "removeObjectsForKeys:", v4);

}

double sub_1002004D4(uint64_t a1)
{
  double v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t **v7;
  void *i;
  void *v9;
  double v10;
  double v11;
  uint64_t **v12;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int *v19;
  _BYTE v20[128];

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a1 + 440);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = *(void **)(a1 + 432);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    v7 = (uint64_t **)(a1 + 408);
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "triggerTimestamp");
        v11 = v10;
        v14 = objc_msgSend(v9, "triggerType");
        v19 = &v14;
        v12 = sub_1000610B4(v7, (int *)&v14, (uint64_t)&unk_101B9EB60, &v19);
        if (v2 >= v11 - *((double *)v12 + 5))
          v2 = v11 - *((double *)v12 + 5);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v5);
  }
  return v2;
}

void sub_10020063C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[6];
  int v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  _QWORD v22[2];

  ++*(_DWORD *)(a1 + 348);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
  {
    switch(a3)
    {
      case 5:
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a4))
        {
          sub_100201040(a1);
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          v14[2] = sub_100200C7C;
          v14[3] = &unk_102145888;
          v15 = a2;
          v16 = 5;
          v14[4] = a1;
          v14[5] = a4;
          sub_100200A5C(a1, 1u, (uint64_t)v14);
          sub_100200E2C(a1);
        }
        break;
      case 46:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
        v8 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *(_DWORD *)(a4 + 1512);
          v10 = *(_QWORD *)(a4 + 1520);
          *(_DWORD *)buf = 68289538;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 1026;
          LODWORD(v22[0]) = v9;
          WORD2(v22[0]) = 2050;
          *(_QWORD *)((char *)v22 + 6) = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLProactiveLoc ntfy\", \"sessionState\":%{public}d, \"sec_s\":\"%{public}.09f\"}", buf, 0x22u);
        }
        v11 = *(_QWORD *)(a1 + 152);
        if (v11)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(v11, a4 + 1512);
        break;
      case 13:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        break;
      default:
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
        v12 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289283;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2049;
          v22[0] = a3;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Harvester received an un-registered location notification\", \"notification\":%{private, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021459F8);
        }
        v13 = qword_1022A0208;
        if (os_signpost_enabled((os_log_t)qword_1022A0208))
        {
          *(_DWORD *)buf = 68289283;
          v18 = 0;
          v19 = 2082;
          v20 = "";
          v21 = 2049;
          v22[0] = a3;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Harvester received an un-registered location notification", "{\"msg%{public}.0s\":\"Harvester received an un-registered location notification\", \"notification\":%{private, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
        }
        break;
    }
  }
}

void sub_10020097C(uint64_t a1, int a2, int *a3, uint64_t a4, int a5)
{
  const void *v10;
  unsigned int v11;
  _QWORD v12[6];
  int v13;
  char v14;

  v10 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v10, kCTCallStatusChangeNotification))
  {
    v14 = 0;
    if ((*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(a1 + 48) + 304))(*(_QWORD *)(a1 + 48), &v14))
      *(_BYTE *)(a1 + 972) = v14;
  }
  sub_100201040(a1);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  if (a5)
    v11 = 5;
  else
    v11 = 4;
  v12[2] = sub_1002011BC;
  v12[3] = &unk_1021458C8;
  v13 = a2;
  v12[4] = a3;
  v12[5] = a4;
  sub_100200A5C(a1, v11, (uint64_t)v12);
  sub_100200E2C(a1);
}

void sub_100200A5C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  char **v21;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v4 = *(_QWORD *)(a1 + 88) + 40 * a2 + 16;
  v5 = (uint64_t **)(a1 + 64);
  while (1)
  {
    v4 = *(_QWORD *)v4;
    if (!v4)
      break;
    v20 = (_DWORD *)(v4 + 16);
    v6 = sub_100200B98(v5, (int *)(v4 + 16), (uint64_t)&unk_101B9EB60, &v20);
    sub_10033F68C(&v17, (__int128 *)(v6 + 5));
  }
  v7 = v17;
  v8 = v18;
  while (v7 != v8)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
    v15 = *(_QWORD *)v7;
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(a3 + 16))(a3, &v15);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 += 16;
  }
  v21 = &v17;
  sub_1002A3684((void ***)&v21);
}

void sub_100200B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  sub_100261F44((uint64_t)&a9);
  *(_QWORD *)(v11 - 40) = &a11;
  sub_1002A3684((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t **sub_100200B98(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1005931B0((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_100200C7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_100201404(*a2);
  sub_100200CD0(v4, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(_QWORD *)(a1 + 40));
}

void sub_100200CD0(uint64_t a1, int a2)
{
  unint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;

  sub_10020167C(a2, __p);
  v3 = v8;
  v4 = v8;
  if ((v8 & 0x80u) != 0)
    v3 = (unint64_t)__p[1];
  if (v3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102145A38);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v6 = __p;
      if ((v8 & 0x80u) != 0)
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), __p);
    v4 = v8;
  }
  if ((v4 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_100200E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100200E2C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;

  if (*(_BYTE *)(a1 + 973))
  {
    *(_BYTE *)(a1 + 973) = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer unlocked\"}", (uint8_t *)&v6, 0x12u);
    }
    if (*(_BYTE *)(a1 + 974))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v6 = 68289026;
        v7 = 0;
        v8 = 2082;
        v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cleaning dirty #uploadTimer times\"}", (uint8_t *)&v6, 0x12u);
      }
      v4 = sub_1005913DC(a1);
      sub_100590FC4(a1, v4);
      *(_BYTE *)(a1 + 974) = 0;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v6 = 68289026;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer already unlocked\"}", (uint8_t *)&v6, 0x12u);
    }
  }
}

void sub_100201040(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  int v3;
  int v4;
  __int16 v5;
  const char *v6;

  if (*(_BYTE *)(a1 + 973))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v1 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v3 = 68289026;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v2 = "{\"msg%{public}.0s\":\"#uploadTimer already locked\"}";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, v2, (uint8_t *)&v3, 0x12u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 973) = 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v1 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v3 = 68289026;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v2 = "{\"msg%{public}.0s\":\"#uploadTimer locked\"}";
      goto LABEL_10;
    }
  }
}

uint64_t sub_10020119C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 72))(*a2, *(unsigned int *)(a1 + 48), **(unsigned int **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1002011BC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1002011D8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  int v9;
  int v10;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  sub_10020BC9C(a1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), v3);
  sub_100201040(a1);
  v4 = *(_QWORD **)(a1 + 64);
  if (v4 != (_QWORD *)(a1 + 72))
  {
    do
    {
      if ((_DWORD)v3 && (v5 = sub_100201404(v4[5]), sub_10020140C(a1, v5)))
        sub_100201690(v4[5]);
      else
        sub_100201924(v4[5]);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 72));
  }
  sub_100200E2C(a1);
  if (v2 != (_DWORD)v3)
  {
    sub_100201040(a1);
    if ((_DWORD)v3)
    {
      sub_100590144(a1, 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168), 1);
      sub_10058FBF4(a1, 1);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 176))(*(_QWORD *)(a1 + 48));
      sub_1005902D8(a1, &v10);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48), 6);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48), 8);
    }
    else
    {
      sub_100590144(a1, 0);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), 0);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168), 0);
      sub_10058FBF4(a1, 0);
      v9 = 0;
      sub_1005902D8(a1, &v9);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48), 6);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48), 8);
      sub_100524790(a1 + 1080);
      sub_100524424(a1 + 1080);
    }
    sub_100200E2C(a1);
  }
}

uint64_t sub_100201404(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL sub_10020140C(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  NSObject *v7;
  void **v8;
  id v9;
  NSObject *v10;
  void **v11;
  id v12;
  void *__p[2];
  unsigned __int8 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void **v21;
  __int16 v22;
  id v23;

  sub_10020167C(a2, __p);
  v4 = v15;
  if ((v15 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    v5 = sub_10019C4C0(a1 + 1016, (const void **)__p);
    if (a1 + 1024 == v5)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v7 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_ERROR))
      {
        v8 = (v15 & 0x80u) == 0 ? __p : (void **)__p[0];
        v9 = -[__CFString UTF8String]((id)sub_100B6ADC4(a2), "UTF8String");
        *(_DWORD *)buf = 68289538;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v8;
        v22 = 2082;
        v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized\", \"SystemService\":%{public, location:escape_only}s, \"Harvester\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
      }
      v10 = qword_1022A0208;
      if (os_signpost_enabled((os_log_t)qword_1022A0208))
      {
        if ((v15 & 0x80u) == 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        v12 = -[__CFString UTF8String]((id)sub_100B6ADC4(a2), "UTF8String");
        *(_DWORD *)buf = 68289538;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 2082;
        v21 = v11;
        v22 = 2082;
        v23 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized", "{\"msg%{public}.0s\":\"SystemService gating harvester does not exists in isClientAuthorizedMap. Treating as not authorized\", \"SystemService\":%{public, location:escape_only}s, \"Harvester\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      v6 = 0;
    }
    else
    {
      v6 = *(_BYTE *)(v5 + 56) != 0;
    }
  }
  else
  {
    v6 = 1;
  }
  if ((char)v15 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_100201650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10020167C@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, *((char **)&off_102145A58 + a1));
}

void sub_100201690(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 88))
    return;
  if (*(_BYTE *)(a1 + 280))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 16), 0);
        *(_BYTE *)(a1 + 88) = 1;
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102180480);
        v2 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v3 = *(unsigned int *)(a1 + 16);
          v9 = 68289283;
          v10 = 0;
          v11 = 2082;
          v12 = "";
          v13 = 2049;
          v14 = v3;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvesting enabled\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v9, 0x1Cu);
        }
        v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v4);
        sub_100D05194(a1);
      }
      return;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned int *)(a1 + 16);
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2049;
      v14 = v8;
      v7 = "{\"msg%{public}.0s\":\"cannot be enabled: not supported\", \"subHarvester\":%{private, location:CLSubHarveste"
           "rIdentifier}lld}";
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(unsigned int *)(a1 + 16);
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2049;
      v14 = v6;
      v7 = "{\"msg%{public}.0s\":\"cannot be enabled: disabled by harvest rule\", \"subHarvester\":%{private, location:CL"
           "SubHarvesterIdentifier}lld}";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_100201924(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 88))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    *(_BYTE *)(a1 + 88) = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 16), 0);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102180480);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(unsigned int *)(a1 + 16);
      v4[0] = 68289283;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2049;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvesting disabled\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v4, 0x1Cu);
    }
    sub_100D05194(a1);
  }
}

void sub_100201A44(uint64_t a1, uint64_t a2, int *a3, id *a4)
{
  NSObject *v7;
  const __CFString *v8;
  void **v9;
  int v10;
  _OWORD *v11;
  char v12;
  const void *v13;
  id v14;
  _BOOL4 v15;
  const void *v16;
  const void *v17;
  NSObject *v18;
  NSObject *v19;
  _BYTE *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const void *v24;
  int *v25;
  int *v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  BOOL *v29;
  NSObject *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _BOOL4 v35;
  NSObject *v36;
  const __CFString *v37;
  void *p_p;
  id v39;
  NSObject *v40;
  const __CFString *v41;
  void **v42;
  id v43;
  NSObject *v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  _BOOL4 v52;
  char *v53;
  int v54[5];
  void *__p;
  __int16 v56;
  _BYTE v57[20];
  __int16 v58;
  _BOOL4 v59;
  _BYTE buf[38];
  __int16 v61;
  id v62;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)&__p);
    v9 = v57[13] >= 0 ? &__p : (void **)__p;
    v10 = *(unsigned __int8 *)(a1 + 417);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 1;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v9;
    v61 = 1026;
    LODWORD(v62) = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onTelephonyNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"harvestingDisabledDueToInvalidInUseSubsriptionsCount\":%{public}hhd}", buf, 0x2Cu);
    if ((v57[13] & 0x80000000) != 0)
      operator delete(__p);
  }
  sub_100202F14(a1, a3, a4);
  sub_100F114C8(a1, a3, a4);
  if (!*(_BYTE *)(a1 + 417))
  {
    v11 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 56))(*(_QWORD *)(a1 + 368));
    ++*(_DWORD *)(a1 + 204);
    v12 = (*(uint64_t (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 56) + 184))(*(_QWORD *)(a1 + 56), v11);
    v13 = (const void *)sub_1001DEC98(a3);
    if (!CFEqual(v13, CFSTR("kCellInfoNotification")))
    {
      v16 = (const void *)sub_1001DEC98(a3);
      if (CFEqual(v16, CFSTR("kServingCellChangedNotification"))
        || (v17 = (const void *)sub_1001DEC98(a3), CFEqual(v17, CFSTR("kServingNetworkChangedNotification"))))
      {
        if (objc_msgSend(*a4, "objectForKey:", CFSTR("kSlotOne")))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v18 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#msim CellMonitorRefresh requested for SimOne", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            LOWORD(__p) = 0;
            v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#msim CellMonitorRefresh requested for SimOne", &__p, 2);
            sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v46);
            if (v46 != buf)
              free(v46);
          }
          *(_BYTE *)(a1 + 488) = 1;
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 352) + 144))(*(_QWORD *)(a1 + 352), 0);
        }
        else if (objc_msgSend(*a4, "objectForKey:", CFSTR("kSlotTwo")))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v23 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#msim CellMonitorRefresh requested for SimTwo", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            LOWORD(__p) = 0;
            v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#msim CellMonitorRefresh requested for SimTwo", &__p, 2);
            sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v47);
            if (v47 != buf)
              free(v47);
          }
          *(_BYTE *)(a1 + 512) = 1;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 144))(*(_QWORD *)(a1 + 352), 1);
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_102192628);
          v36 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
          {
            v37 = (const __CFString *)sub_1001DEC98(a3);
            sub_1001A486C(v37, (uint64_t)&__p);
            if (v57[13] >= 0)
              p_p = &__p;
            else
              p_p = __p;
            v39 = *a4;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2050;
            *(_QWORD *)&buf[20] = 1;
            *(_WORD *)&buf[28] = 2082;
            *(_QWORD *)&buf[30] = p_p;
            v61 = 2114;
            v62 = v39;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#msim onTelephonyNotification received notification for invalid slot\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"Data\":%{public, location:escape_only}@}", buf, 0x30u);
            if ((v57[13] & 0x80000000) != 0)
              operator delete(__p);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
          }
          v40 = qword_1022A0208;
          if (os_signpost_enabled((os_log_t)qword_1022A0208))
          {
            v41 = (const __CFString *)sub_1001DEC98(a3);
            sub_1001A486C(v41, (uint64_t)&__p);
            v42 = v57[13] >= 0 ? &__p : (void **)__p;
            v43 = *a4;
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2050;
            *(_QWORD *)&buf[20] = 1;
            *(_WORD *)&buf[28] = 2082;
            *(_QWORD *)&buf[30] = v42;
            v61 = 2114;
            v62 = v43;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#msim onTelephonyNotification received notification for invalid slot", "{\"msg%{public}.0s\":\"#msim onTelephonyNotification received notification for invalid slot\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"Data\":%{public, location:escape_only}@}", buf, 0x30u);
            if ((v57[13] & 0x80000000) != 0)
              operator delete(__p);
          }
        }
      }
      else
      {
        v24 = (const void *)sub_1001DEC98(a3);
        if (CFEqual(v24, CFSTR("kTimingAdvanceInfoNotification")))
        {
          if (*a4)
          {
            sub_1001C1D6C((int)v54, (CFDictionaryRef)*a4);
            v25 = (int *)(a1 + 528);
            sub_1001C1194((uint64_t)v54, (uint64_t)CFSTR("kTimingAdvanceLTEKey"), (_DWORD *)(a1 + 528));
            v26 = (int *)(a1 + 532);
            sub_1001C1194((uint64_t)v54, (uint64_t)CFSTR("kTimingAdvanceNRKey"), (_DWORD *)(a1 + 532));
            v27 = (uint64_t *)(a1 + 536);
            sub_1001FD9FC((uint64_t)v54, (uint64_t)CFSTR("kTimingAdvanceTimeStampKey"), (void *)(a1 + 536));
            v28 = (unsigned __int8 *)(a1 + 544);
            sub_1001E48E4((uint64_t)v54, (uint64_t)CFSTR("kTimingAdvanceisLTEKey"), (BOOL *)(a1 + 544));
            v29 = (BOOL *)(a1 + 545);
            sub_1001E48E4((uint64_t)v54, (uint64_t)CFSTR("kTimingAdvanceisNRKey"), v29);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v30 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
            {
              v31 = *v25;
              v32 = *v26;
              v33 = *v27;
              v34 = *v28;
              v35 = *v29;
              *(_DWORD *)buf = 67241216;
              *(_DWORD *)&buf[4] = v31;
              *(_WORD *)&buf[8] = 1026;
              *(_DWORD *)&buf[10] = v32;
              *(_WORD *)&buf[14] = 2050;
              *(_QWORD *)&buf[16] = v33;
              *(_WORD *)&buf[24] = 1026;
              *(_DWORD *)&buf[26] = v34;
              *(_WORD *)&buf[30] = 1026;
              *(_DWORD *)&buf[32] = v35;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#timingadvance,lte_ta_val,%{public}d,nr_ta_val,%{public}d,taQuerytimestamp,%{public}f,istaLte,%{public}d,istaNr,%{public}d", buf, 0x24u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_102192628);
              v48 = *v25;
              v49 = *v26;
              v50 = *v27;
              v51 = *v28;
              v52 = *v29;
              LODWORD(__p) = 67241216;
              HIDWORD(__p) = v48;
              v56 = 1026;
              *(_DWORD *)v57 = v49;
              *(_WORD *)&v57[4] = 2050;
              *(_QWORD *)&v57[6] = v50;
              *(_WORD *)&v57[14] = 1026;
              *(_DWORD *)&v57[16] = v51;
              v58 = 1026;
              v59 = v52;
              v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#timingadvance,lte_ta_val,%{public}d,nr_ta_val,%{public}d,taQuerytimestamp,%{public}f,istaLte,%{public}d,istaNr,%{public}d", &__p, 36);
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v53);
              if (v53 != buf)
                free(v53);
            }
            sub_10011A5A8(v54);
          }
          else
          {
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_102192628);
            v44 = qword_1022A0208;
            if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#timingadvance data is empty", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_102192628);
              LOWORD(__p) = 0;
              v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "#timingadvance data is empty", &__p, 2);
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterCell::onTelephonyHarvestNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v45);
              if (v45 != buf)
                free(v45);
            }
          }
        }
      }
      return;
    }
    sub_10020312C(a1, a4);
    if ((v12 & 1) == 0)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v19 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = 1;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onTelephonyNotification gps location not eligible - skip harvetsing\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
      return;
    }
    memset(buf, 0, 32);
    *(_DWORD *)&buf[32] = 1065353216;
    sub_1001DBC88(*a4, (uint64_t)buf);
    v54[0] = 0;
    __p = v54;
    v14 = objc_msgSend(*((id *)sub_1001DC028((uint64_t)buf, v54, (uint64_t)&unk_101B9EB60, (_DWORD **)&__p) + 3), "count");
    if (sub_1001DC538())
    {
      v54[0] = 1;
      __p = v54;
      v15 = objc_msgSend(*((id *)sub_1001DC028((uint64_t)buf, v54, (uint64_t)&unk_101B9EB60, (_DWORD **)&__p) + 3), "count") != 0;
      if (!v14)
        goto LABEL_36;
    }
    else
    {
      v15 = 0;
      if (!v14)
        goto LABEL_36;
    }
    if (*(_BYTE *)(a1 + 488))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v20 = (_BYTE *)(a1 + 488);
      v21 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        __p = (void *)68289282;
        v56 = 2082;
        *(_QWORD *)v57 = "";
        *(_WORD *)&v57[8] = 2050;
        *(_QWORD *)&v57[10] = 1;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim pending cellMonitorRefreshRequest found for SimOne\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&__p, 0x1Cu);
      }
      sub_100F11644(a1, v11, 0);
      goto LABEL_43;
    }
LABEL_36:
    if (!v15 || !*(_BYTE *)(a1 + 512))
      goto LABEL_44;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v20 = (_BYTE *)(a1 + 512);
    v22 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289282;
      v56 = 2082;
      *(_QWORD *)v57 = "";
      *(_WORD *)&v57[8] = 2050;
      *(_QWORD *)&v57[10] = 1;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim pending cellMonitorRefreshRequest found for SimTwo\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&__p, 0x1Cu);
    }
    sub_100F11644(a1, v11, 1);
LABEL_43:
    *v20 = 0;
LABEL_44:
    sub_1001DBC50((uint64_t)buf);
  }
}

void sub_100202748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

BOOL sub_100202784(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _BOOL8 result;
  NSObject *v6;
  double v7;
  NSObject *v8;
  char *v9;
  _WORD v10[8];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  double v16;

  if (*(_BYTE *)(a1 + 1072))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: faking harvest eligibility\"}", buf, 0x12u);
    }
    return 1;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) & 1) != 0)
  {
    if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 48))(*(_QWORD *)(a1 + 168), a2) & 1) != 0)
      return 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Pos harvesting not eligible as gps harvetsing is ineligible", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v10[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "Pos harvesting not eligible as gps harvetsing is ineligible", v10, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isPosHarvestingEligible(const CLDaemonLocation &) const", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v6 = qword_1022A0208;
    result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
    if (result)
    {
      v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) - *(double *)(a2 + 76);
      *(_DWORD *)buf = 68289283;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2049;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"not harvesting, harvesting now allowed\", \"age_s\":\"%{private}.09f\"}", buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

BOOL sub_100202A84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  _BOOL8 result;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char *v21;
  int v22;
  _BYTE v23[32];
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  uint64_t v27;

  if (!sub_100182290(a2)
    || vabdd_f64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32)), *(double *)(a2 + 76)) > 5.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v4 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v5 = vabdd_f64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32)), *(double *)(a2 + 76));
      *(_DWORD *)buf = 134217984;
      *(double *)v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "invalid/stale location (age %.3fs) - ignoring", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v19 = qword_1022A0208;
    v20 = vabdd_f64((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32)), *(double *)(a2 + 76));
    *(_DWORD *)v23 = 134217984;
    *(double *)&v23[4] = v20;
    v22 = 12;
    v11 = "invalid/stale location (age %.3fs) - ignoring";
    v9 = v19;
LABEL_32:
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, v11, v23, v22, *(_OWORD *)v23, *(_OWORD *)&v23[16]);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLMonitorGps::isGpsHarvestingEligible(const CLDaemonLocation &) const", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
    return 0;
  }
  if (*(int *)(a1 + 72) > 4)
  {
    if (*(int *)(a1 + 88) < 181 || *(_BYTE *)(a1 + 64))
      return 1;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v12 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v13 = *(_DWORD *)(a1 + 88);
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v25 = v13;
      *(_WORD *)&v25[4] = 2048;
      *(_QWORD *)&v25[6] = v14;
      v26 = 2048;
      v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%d consecutive clamps at <%+.8f,%+.8f> - not harvesting", buf, 0x1Cu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v9 = qword_1022A0208;
      v16 = *(_DWORD *)(a1 + 88);
      v17 = *(_QWORD *)(a1 + 96);
      v18 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)v23 = 67109632;
      *(_DWORD *)&v23[4] = v16;
      *(_WORD *)&v23[8] = 2048;
      *(_QWORD *)&v23[10] = v17;
      *(_WORD *)&v23[18] = 2048;
      *(_QWORD *)&v23[20] = v18;
      v22 = 28;
      v11 = "%d consecutive clamps at <%+.8f,%+.8f> - not harvesting";
      goto LABEL_32;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021613C8);
    v7 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v8 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v25 = v8;
      *(_WORD *)&v25[4] = 1024;
      *(_DWORD *)&v25[6] = 5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "not harvesting yet; GPS warming count is %d < %d",
        buf,
        0xEu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021613C8);
      v9 = qword_1022A0208;
      v10 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)v23 = 67109376;
      *(_DWORD *)&v23[4] = v10;
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 5;
      v22 = 14;
      v11 = "not harvesting yet; GPS warming count is %d < %d";
      goto LABEL_32;
    }
  }
  return result;
}

uint64_t sub_100202F0C(uint64_t a1)
{
  return a1 + 92;
}

void sub_100202F14(uint64_t a1, int *a2, id *a3)
{
  const void *v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  __int16 v22;
  _BOOL4 v23;

  v5 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v5, CFSTR("kSubscriptionsInUseNotification")))
  {
    v6 = objc_msgSend(*a3, "valueForKey:", CFSTR("kSubscriptionsInUseKey"));
    v7 = objc_msgSend(v6, "count");
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 424);
      v12 = 68290050;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = 1;
      v18 = 2114;
      v19 = v9;
      v20 = 2114;
      v21 = v6;
      v22 = 1026;
      v23 = v6 == 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim updated InUseSubscriptions\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"OldInUseSubscriptions\":%{public, location:escape_only}@, \"NewInUseSubscriptions\":%{public, location:escape_only}@, \"hasError\":%{public}hhd}", (uint8_t *)&v12, 0x36u);
    }

    *(_QWORD *)(a1 + 424) = v6;
    if (v6)
      v10 = (unint64_t)v7 >= 3;
    else
      v10 = 1;
    if (v10)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102192628);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2050;
        v17 = 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#msim Cell-Harvesting does not support more than 2 in-use subscriptions. Harvester disabled\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v12, 0x1Cu);
      }
      *(_BYTE *)(a1 + 417) = 1;
    }
  }
}

id sub_10020312C(uint64_t a1, id *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  id result;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  __int16 v15;
  id v16;

  v4 = objc_msgSend(*a2, "objectForKey:", CFSTR("kSlotOne"));
  v5 = objc_msgSend(*a2, "objectForKey:", CFSTR("kSlotTwo"));
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289794;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2050;
    v12 = 1;
    v13 = 2114;
    v14 = v4;
    v15 = 2114;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim update CellInfo\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"CellInfoSimOne\":%{public, location:escape_only}@, \"CellInfoSimTwo\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x30u);
  }
  if (objc_msgSend(v4, "count"))
  {

    *(_QWORD *)(a1 + 472) = v4;
  }
  result = objc_msgSend(v5, "count");
  if (result)
  {

    result = v5;
    *(_QWORD *)(a1 + 496) = result;
  }
  return result;
}

uint64_t sub_10020329C(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
  if ((result & 1) == 0)
  {
    while (1)
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "count");
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
      if ((unint64_t)v3 <= (int)result)
        break;
      objc_msgSend(*(id *)(a1 + 48), "removeObjectAtIndex:", 0);
    }
  }
  return result;
}

void sub_100203300(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterTraceExternal::onCompass");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 256), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102159BD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterTraceExternal::onCompass", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102159BD8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterTraceExternal::onCompass\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 304) + 16))(*(_QWORD *)(a2 + 304), a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1002034B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1002034D8(uint64_t a1, uint64_t a2)
{
  if ((sub_100203518(a1 - 352) & 1) == 0)
    sub_100203774(a1 + 256, a2);
}

uint64_t sub_100203518(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  double v6;

  v2 = *(unsigned __int8 *)(a1 + 904);
  v3 = sub_100CE9804(a1);
  v4 = v3;
  if (v2)
    v5 = (_DWORD)v3 == 0;
  else
    v5 = 1;
  if (!v5 && !*(_BYTE *)(a1 + 440))
  {
    v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    if (v6 - sub_100932B7C(a1 + 608) >= *(double *)(a1 + 416))
    {
      sub_100CE9254(a1, 0);
      sub_100D05194(a1);
    }
  }
  return v4;
}

uint64_t sub_1002035A8(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 904) || sub_1002036E0((double *)(a1 + 608)))
    return 0;
  if (*(_BYTE *)(a1 + 88))
    return 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217F080);
  v3 = qword_1022A0208;
  v4 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    sub_100201404(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2050;
    v9 = sub_100201404(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: Harvesting was turned off but we're still checking for active traces\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v5, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t sub_1002036D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 186);
}

BOOL sub_1002036E0(double *a1)
{
  double v3;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 80))(*((_QWORD *)a1 + 4)) & 1) != 0)
    return 0;
  v3 = (*(double (**)(_QWORD))(**(_QWORD **)a1 + 64))(*(_QWORD *)a1) - a1[7];
  return v3 > (*(double (**)(_QWORD))(**((_QWORD **)a1 + 4) + 64))(*((_QWORD *)a1 + 4));
}

uint64_t sub_100203754(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100203764(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

double sub_10020376C(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

void sub_100203774(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  id v6;
  id v7;
  double v8;
  double v9;
  float v10;
  id v11;
  double v12;
  float v13;
  id v14;
  double v15;
  float v16;
  id v17;
  double v18;

  v4 = *(double *)a2 - *(double *)(a1 + 72);
  if (v4 >= (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32)))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)a2;
    v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
    v6 = objc_alloc_init((Class)CLPIndoorEvent);
    objc_msgSend(v6, "setType:", 1);
    objc_msgSend(v6, "setCmAttitude:", objc_alloc_init((Class)CLPIndoorCMAttitude));
    objc_msgSend(objc_msgSend(v6, "cmAttitude"), "setTimestamp:", v5 - *(double *)(a1 + 64));
    LODWORD(v5) = *(_DWORD *)(a2 + 40);
    v7 = objc_msgSend(v6, "cmAttitude");
    LODWORD(v8) = LODWORD(v5);
    objc_msgSend(v7, "setMagneticAccuracy:", v8);
    objc_msgSend(objc_msgSend(v6, "cmAttitude"), "setMagneticCalibration:", *(unsigned int *)(a2 + 44));
    objc_msgSend(objc_msgSend(v6, "cmAttitude"), "setQuaternion:", objc_alloc_init((Class)CLPQuaternion));
    if (*(double *)(a2 + 64) < 0.0)
      v9 = -1.0;
    else
      v9 = 1.0;
    v10 = *(double *)(a2 + 72) * v9;
    v11 = objc_msgSend(objc_msgSend(v6, "cmAttitude"), "quaternion");
    *(float *)&v12 = v10;
    objc_msgSend(v11, "setX:", v12);
    v13 = v9 * *(double *)(a2 + 80);
    v14 = objc_msgSend(objc_msgSend(v6, "cmAttitude"), "quaternion");
    *(float *)&v15 = v13;
    objc_msgSend(v14, "setY:", v15);
    v16 = v9 * *(double *)(a2 + 88);
    v17 = objc_msgSend(objc_msgSend(v6, "cmAttitude"), "quaternion");
    *(float *)&v18 = v16;
    objc_msgSend(v17, "setZ:", v18);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v6);
    sub_10020329C(a1);
  }
}

double sub_100203914(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

BOOL sub_10020391C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL8 result;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  if ((*(_DWORD *)(a2 + 132) | 2) != 2)
    return 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v3 = qword_1022A0208;
  result = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO);
  if (result)
  {
    v5 = *(unsigned int *)(a2 + 132);
    v6[0] = 68289283;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2049;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"WARN: location dropped due to referenceFrame\", \"referenceFrame\":%{private, location:CLClientLocationReferenceFrame}lld}", (uint8_t *)v6, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_100203A20(uint64_t a1, std::string *a2)
{
  id v3;
  void *v4[2];
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;

  sub_100204320(a2, (uint64_t)v18);
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  sub_1001AF190((char *)v4, (__int128 *)v18);
  objc_msgSend(v3, "markReceivingLocationInformation:", sub_1001AE728((__int128 *)v4));
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_100203B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_100010174((uint64_t)&a9);
  sub_100010174((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_100203B8C(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  __int128 v5;
  double v6;
  double v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  int v22;
  double v23;
  int v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  int v33;
  double v34;
  __int128 v35;
  double v36;
  __int128 v37;
  _BYTE v38[28];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t buf;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  __int16 v72;
  _BOOL4 v73;
  __int16 v74;
  _BOOL4 v75;

  ++*(_DWORD *)(a1 + 204);
  if (a3 && a3 != 5)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102148538);
    v19 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    buf = 68289282;
    v54 = 2082;
    v55 = "";
    v56 = 2050;
    v57 = 8;
    v20 = "{\"msg%{public}.0s\":\"Received non-location locationProvider notification, not harvesting\", \"subHarvester\""
          ":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_33:
    v28 = v19;
    v29 = 28;
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, v20, (uint8_t *)&buf, v29);
    return;
  }
  v5 = *a4;
  v52 = *((_DWORD *)a4 + 4);
  v6 = *(double *)((char *)a4 + 20);
  v50 = *(__int128 *)((char *)a4 + 28);
  v51 = v5;
  v7 = *(double *)((char *)a4 + 44);
  v8 = *(__int128 *)((char *)a4 + 68);
  v48 = *(__int128 *)((char *)a4 + 52);
  v49[0] = v8;
  *(_OWORD *)((char *)v49 + 12) = a4[5];
  v9 = *((unsigned int *)a4 + 24);
  v10 = *(__int128 *)((char *)a4 + 100);
  v11 = *(__int128 *)((char *)a4 + 116);
  v12 = *(__int128 *)((char *)a4 + 132);
  v47 = *(_QWORD *)((char *)a4 + 148);
  v45 = v11;
  v46 = v12;
  v44 = v10;
  v13 = *((double *)a4 + 57);
  v14 = *((double *)a4 + 58);
  v15 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  v16 = 0;
  v17 = v7 < 19.4444 && v7 >= 0.0;
  if ((_DWORD)v9 == 1 && v13 != 0.0 && v6 >= 0.0 && v15 - *(double *)(a1 + 376) > 60.0)
  {
    if (*(_BYTE *)(a1 + 372))
      v18 = v17;
    else
      v18 = 0;
    v16 = v18 || *(_BYTE *)(a1 + 373) != 0;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102148538);
  v21 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(unsigned __int8 *)(a1 + 373);
    v23 = v15 - *(double *)(a1 + 376);
    v24 = *(unsigned __int8 *)(a1 + 372);
    buf = 68291587;
    v54 = 2082;
    v55 = "";
    v56 = 2050;
    v57 = 8;
    v58 = 2049;
    v59 = v9;
    v60 = 1025;
    v61 = v22;
    v62 = 2049;
    v63 = v13;
    v64 = 2049;
    v65 = v14;
    v66 = 2049;
    v67 = v23;
    v68 = 2049;
    v69 = 0x404E000000000000;
    v70 = 1025;
    v71 = v24;
    v72 = 1025;
    v73 = v17;
    v74 = 1025;
    v75 = v16;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onLocation\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"locationType\":%{private, location:CLLocationType}lld, \"allowingStationaryHarvest\":%{private}hhd, \"pressureValue\":\"%{private}f\", \"pressureStd\":\"%{private}f\", \"timeSinceLastSample_s\":\"%{private}.09f\", \"minGapTime_s\":\"%{private}.09f\", \"isDriving\":%{private}hhd, \"isValidSpeed\":%{private}hhd, \"willHarvest\":%{private}hhd}", (uint8_t *)&buf, 0x66u);
  }
  if (!v16)
    return;
  *(double *)(a1 + 376) = v15;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) == 0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102148538);
    v19 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    buf = 68289282;
    v54 = 2082;
    v55 = "";
    v56 = 2050;
    v57 = 8;
    v20 = "{\"msg%{public}.0s\":\"harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLSubH"
          "arvesterIdentifier}lld}";
    goto LABEL_33;
  }
  if ((*(_DWORD *)(a1 + 368) & 0x80000000) != 0
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 368))
  {
    v25 = objc_alloc_init((Class)CLPPressureCollectionRequest);
    objc_msgSend(v25, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    v32 = v51;
    v33 = v52;
    v34 = v6;
    v35 = v50;
    v36 = v7;
    v37 = v48;
    *(_OWORD *)v38 = v49[0];
    *(_OWORD *)&v38[12] = *(_OWORD *)((char *)v49 + 12);
    v39 = v9;
    v43 = v47;
    v42 = v46;
    v41 = v45;
    v40 = v44;
    v26 = objc_msgSend(objc_alloc((Class)CLPLocation), "initWithDaemonLocation:", &v32);
    objc_msgSend(v25, "setPressureLocation:", v26);

    v27 = objc_msgSend(objc_alloc((Class)CLPPressure), "initWithPressure:stdDeviation:timestamp:", v13, v14, v15);
    objc_msgSend(v25, "setPressure:", v27);

    objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "archiveForHarvester:", 8), "overwritePrimaryObject:", v25);
    ++*(_DWORD *)(a1 + 208);
    sub_100D05194(a1);
    return;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102148538);
  v30 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_DWORD *)(a1 + 368);
    buf = 68289539;
    v54 = 2082;
    v55 = "";
    v56 = 2050;
    v57 = 8;
    v58 = 1025;
    LODWORD(v59) = v31;
    v20 = "{\"msg%{public}.0s\":\"max scans exceeded, not submitting\", \"subHarvester\":%{public, location:CLSubHarveste"
          "rIdentifier}lld, \"maxHarvestPointCount\":%{private}d}";
    v28 = v30;
    v29 = 34;
    goto LABEL_34;
  }
}

void sub_100204104(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v6;
  int v7;
  char v8;
  char v9;
  int v10;

  v10 = a3;
  ++*(_DWORD *)(a1 + 204);
  if (!*(_BYTE *)(a1 + 88) || a3 != 5 && a3)
    return;
  v6 = *(_DWORD *)(a4 + 96);
  if (v6 == 10
    && (sub_1002041F0(a1) & 1) == 0
    && (*(double *)(a1 + 768) == 1.79769313e308
     || (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) >= *(double *)(a1 + 768)))
  {
    sub_100CABFFC(a1);
    v8 = 1;
    goto LABEL_11;
  }
  v7 = sub_1002041F0(a1);
  v8 = 0;
  v9 = 0;
  if (v7)
  {
LABEL_11:
    sub_100FEA5A4(a1 + 464, (uint64_t)&v10, a4, 0);
    v9 = v8;
  }
  if (v6 == 10 && (v9 & 1) == 0)
    sub_100CAC1F4(a1);
}

uint64_t sub_1002041F0(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 760) || sub_1002036E0((double *)(a1 + 464)))
    return 0;
  if (*(_BYTE *)(a1 + 88))
    return 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217D5E0);
  v3 = qword_1022A0208;
  v4 = os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    sub_100201404(a1);
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2050;
    v9 = sub_100201404(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: Harvesting was turned off but we're still checking for active traces\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v5, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_100204320(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int64_t size;
  std::string *v6;
  char *v7;
  std::string *v8;
  char *v9;
  std::string::size_type v10;
  NSObject *v11;
  char **v12;
  NSObject *v13;
  std::string *v14;
  std::string v15;
  char v16;
  _BYTE v17[32];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;

  if ((_os_feature_enabled_impl("CoreLocation", "cl_pula") & 1) != 0)
  {
    *(_DWORD *)(a2 + 95) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 163) = 0u;
    v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      size = a1->__r_.__value_.__l.__size_;
    if (v4 >= 0)
      v6 = a1;
    else
      v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
    if (size >= 1)
    {
      v7 = (char *)v6 + size;
      v8 = v6;
      do
      {
        v9 = (char *)memchr(v8, 58, size);
        if (!v9)
          break;
        if (*v9 == 58)
        {
          if (v9 == v7)
            break;
          v10 = v9 - (char *)v6;
          if (v10 == -1)
            break;
          std::string::basic_string(&v15, a1, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
          sub_1001B82F8(&v15, (uint64_t)v17);
          sub_1001AEF2C(a2, (__int128 *)v17);
          if (v28 < 0)
            operator delete(__p);
          if (v26 < 0)
            operator delete(v25);
          if (v24 < 0)
            operator delete(v23);
          if (v22 < 0)
            operator delete(v21);
          if (v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(*(void **)&v17[24]);
          if ((v17[23] & 0x80000000) != 0)
            operator delete(*(void **)v17);
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v15.__r_.__value_.__l.__data_);
          std::string::basic_string((std::string *)v17, a1, 0, v10, (std::allocator<char> *)&v15);
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(_OWORD *)a2 = *(_OWORD *)v17;
          *(_QWORD *)(a2 + 16) = *(_QWORD *)&v17[16];
          return;
        }
        v8 = (std::string *)(v9 + 1);
        size = v7 - (char *)v8;
      }
      while (v7 - (char *)v8 >= 1);
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v12 = (a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (char **)a1
          : (char **)a1->__r_.__value_.__r.__words[0];
      *(_QWORD *)v17 = 68289282;
      *(_WORD *)&v17[8] = 2082;
      *(_QWORD *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(_QWORD *)&v17[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multi-User clientKey doesn't have userName!\", \"clientKey\":%{public, location:escape_only}s}", v17, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    }
    v13 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = a1;
      else
        v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
      *(_QWORD *)v17 = 68289282;
      *(_WORD *)&v17[8] = 2082;
      *(_QWORD *)&v17[10] = "";
      *(_WORD *)&v17[18] = 2082;
      *(_QWORD *)&v17[20] = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multi-User clientKey doesn't have userName!", "{\"msg%{public}.0s\":\"#Multi-User clientKey doesn't have userName!\", \"clientKey\":%{public, location:escape_only}s}", v17, 0x1Cu);
    }
  }
  else
  {
    sub_1001B82F8(a1, a2);
  }
}

void sub_100204698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_100010174(v14);
  _Unwind_Resume(a1);
}

void sub_1002046C8(uint64_t a1)
{
  if ((sub_100203518(a1) & 1) == 0)
    sub_10020539C((double *)(a1 + 608));
}

void sub_10020470C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _OWORD *v6;

  if (a3 == 3)
  {
    v6 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 56))(*(_QWORD *)(a1 + 368));
    sub_100204758(a1, v6, 3, a4);
  }
}

void sub_100204758(uint64_t a1, _OWORD *a2, int a3, uint64_t a4)
{
  id v8;
  id v9;
  NSObject *v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t buf[8];
  _BYTE v29[20];
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 184))(*(_QWORD *)(a1 + 56)) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 448)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 64))(*(_QWORD *)(a1 + 368)))
    {
      v8 = sub_1001FFF00(a1, a2);
      v9 = objc_msgSend(*(id *)(a1 + 384), "classifyLoiTypeForLocation:", v8);

      sub_100204C08(*(_QWORD *)(a1 + 448), (uint64_t)a2, a3, a4, (uint64_t)v9);
    }
    if (a3 == 3)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B4B70);
      v10 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)&v11 = *(char *)(a4 + 1);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2050;
        *(_QWORD *)&v29[12] = 2;
        v30 = 2049;
        v31 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWifiNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"scanType\":%{private, location:CLWifiService_Type::ScanType}lld}", buf, 0x26u);
      }
      v12 = *(unsigned __int8 *)(a4 + 1) > 4u;
    }
    else
    {
      v12 = 1;
    }
    v17 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    v18 = *(double *)(a1 + 400);
    sub_100204BE4(a1 + 280);
    v19 = vabdd_f64(v17, v18);
    v21 = v20 * 0.5;
    if (v19 <= v20 * 0.5 && v12)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B4B70);
      v23 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289795;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2050;
        *(_QWORD *)&v29[12] = 2;
        v30 = 2049;
        v31 = v19;
        v32 = 2049;
        v33 = v21;
        v14 = "{\"msg%{public}.0s\":\"scans are too frequent, ignoring scan\", \"subHarvester\":%{public, location:CLSubH"
              "arvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{private}.09f\", \"allowedWifiScansInterval_s\":\"%{private}.09f\"}";
        v15 = v23;
        v16 = 48;
        goto LABEL_24;
      }
    }
    else
    {
      if ((*(_DWORD *)(a1 + 392) & 0x80000000) != 0
        || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 392))
      {
        v26 = 0;
        *(_QWORD *)buf = 0;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)&v29[8] = 0;
        (*(void (**)(_QWORD, uint8_t *, uint64_t *))(**(_QWORD **)(a1 + 56) + 240))(*(_QWORD *)(a1 + 56), buf, &v26);
        sub_1013F6974(a1, a2, buf, *(char *)(a4 + 1));
        *(_DWORD *)(a1 + 204) -= 1171354717 * ((*(_QWORD *)v29 - *(_QWORD *)buf) >> 3);
        v27 = buf;
        sub_100279AA4((void ***)&v27);
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021B4B70);
        v24 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_DWORD *)(a1 + 392);
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v29 = 2082;
          *(_QWORD *)&v29[2] = "";
          *(_WORD *)&v29[10] = 2050;
          *(_QWORD *)&v29[12] = 2;
          v30 = 1025;
          LODWORD(v31) = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"wifi scan exceeds max locations - ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}d}", buf, 0x22u);
        }
      }
      *(double *)(a1 + 400) = v17;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021B4B70);
    v13 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2050;
      *(_QWORD *)&v29[12] = 2;
      v14 = "{\"msg%{public}.0s\":\"not harvesting eligible - skipping\", \"subHarvester\":%{public, location:CLSubHarves"
            "terIdentifier}lld}";
      v15 = v13;
      v16 = 28;
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, v14, buf, v16);
    }
  }
}

void sub_100204BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100204BE4(uint64_t result)
{
  uint64_t v1;

  if (*(double *)(result + 8) == -1.0)
  {
    v1 = sub_101946160();
    return sub_100204C08(v1);
  }
  return result;
}

void sub_100204C08(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  double v13;
  NSObject *v14;
  char *v15;
  _WORD v16[8];
  uint64_t buf[205];

  if (a3 == 3)
  {
    v6 = *(char *)(a4 + 1);
    v7 = v6 > 0xC;
    v8 = (1 << v6) & 0x17DF;
    if (!v7 && v8 != 0)
    {
      v13 = *(double *)(a2 + 76) - *(double *)a1;
      if (v13 >= *((double *)sub_1000A3224() + 3))
      {
        if (*(_BYTE *)(a4 + 96) && *(int *)(a4 + 48) > 0)
        {
          sub_1004F7110(a1);
          sub_100ED9F0C((uint64_t)buf, a4 + 8, (_OWORD *)a2, a5);
          sub_100880FE4(*(_QWORD *)(a1 + 8), buf);
          *(_QWORD *)a1 = *(_QWORD *)(a2 + 76);
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10213FFA0);
          v14 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Skip harvesting associated AP as the device is not connected to any wifi network!", (uint8_t *)buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10213FFA0);
            v16[0] = 0;
            v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Skip harvesting associated AP as the device is not connected to any wifi network!", v16, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::harvestWifiFromGps(const CLDaemonLocation &, const CLWifiService_Type::Notification, const CLWifiService_Type::NotificationData &, const RTLocationOfInterestType)", "%s\n", v15);
            if (v15 != (char *)buf)
              free(v15);
          }
        }
      }
    }
  }
}

id sub_100204E3C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  if (*((_BYTE *)a1 + 44))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021986C0);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v3 = *((unsigned int *)a1 + 10);
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2050;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trace ending, unsubscribing from trace notifications\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v6, 0x1Cu);
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, *((unsigned int *)a1 + 10), 2);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, *((unsigned int *)a1 + 10), 8);
    v4 = a1[2];
    v6[0] = 0;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v4 + 56))(v4, v6);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[2] + 72))(a1[2], 30);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[2] + 88))(a1[2], 0);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 144))(a1[4]))
      (*(void (**)(_QWORD))(*(_QWORD *)a1[2] + 104))(a1[2]);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]))
      (*(void (**)(_QWORD))(*(_QWORD *)a1[2] + 120))(a1[2]);
    *((_BYTE *)a1 + 44) = 0;
  }
  return objc_msgSend((id)a1[6], "removeAllObjects");
}

void sub_100204FF0(uint64_t a1, uint64_t a2, int a3)
{
  double v4;
  id v5;
  id v6;
  __int128 v7;
  double *v8;
  uint64_t *v9;
  id v10;
  void *p_p;
  NSObject *v12;
  NSObject *v13;
  id v14;
  __int128 v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  double v20;
  void *__p;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;

  if (a3 == 3)
  {
    v4 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    if (v4 - *(double *)(a1 + 384) >= *(double *)(a1 + 376))
    {
      v19 = 0;
      v20 = -1.79769313e308;
      v17 = 0;
      v18 = 0;
      (*(void (**)(_QWORD, uint64_t **, double *))(**(_QWORD **)(a1 + 56) + 240))(*(_QWORD *)(a1 + 56), &v17, &v20);
      if (v4 - v20 <= *(double *)(a1 + 440))
      {
        v5 = objc_alloc((Class)NSMutableArray);
        v6 = objc_msgSend(v5, "initWithCapacity:", 0x2E8BA2E8BA2E8BA3 * (v18 - v17));
        v8 = (double *)v17;
        v9 = v18;
        if (v17 != v18)
        {
          *(_QWORD *)&v7 = 68289282;
          v15 = v7;
          do
          {
            if (*((_DWORD *)v8 + 8))
            {
              v10 = objc_alloc_init((Class)CLPPoiWifiAccessPoint);
              objc_msgSend(v10, "setAge:", v8[6]);
              objc_msgSend(v10, "setScanTimestamp:", v8[7]);
              objc_msgSend(v10, "setChannel:", *((unsigned int *)v8 + 10));
              v16 = *v8;
              sub_1000C2348(&v16, &__p);
              if ((v25 & 0x80000000) == 0)
                p_p = &__p;
              else
                p_p = __p;
              objc_msgSend(v10, "setMac:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p, v15));
              if (SBYTE3(v25) < 0)
                operator delete(__p);
              objc_msgSend(v10, "setRssi:", *((unsigned int *)v8 + 8));
              objc_msgSend(v6, "addObject:", v10);

            }
            else
            {
              if (qword_1022A0200 != -1)
                dispatch_once(&qword_1022A0200, &stru_102139040);
              v12 = qword_1022A0208;
              if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
              {
                __p = (void *)v15;
                v22 = 2082;
                v23 = "";
                v24 = 2050;
                v25 = 9;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ignoring sentinel access point\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&__p, 0x1Cu);
              }
            }
            v8 += 11;
          }
          while (v8 != (double *)v9);
        }
        objc_msgSend(*(id *)(a1 + 392), "setObject:forKeyedSubscript:", v6, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v20, v15));
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_102139040);
        v13 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v14 = objc_msgSend(*(id *)(a1 + 392), "count");
          __p = (void *)68289539;
          v22 = 2082;
          v23 = "";
          v24 = 2050;
          v25 = 9;
          v26 = 2049;
          v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"adding scan to buffer\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"bufferedWifiCount\":%{private}lu}", (uint8_t *)&__p, 0x26u);
        }

        *(double *)(a1 + 384) = v4;
        sub_1002000E0(a1);
      }
      __p = &v17;
      sub_100279AA4((void ***)&__p);
    }
  }
}

void sub_100205358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __p = &a13;
  sub_100279AA4((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10020539C(double *a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _BYTE *v6;
  __int128 v7;
  NSObject *v8;
  uint64_t v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE __p[28];
  __int16 v24;
  std::string *v25;
  __int16 v26;
  int v27;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)a1 + 240))(*(_QWORD *)a1, &v19, &v22);
  v3 = v19;
  v4 = v20;
  if (v19 != v20)
  {
    *(_QWORD *)&v2 = 68289795;
    v16 = v2;
    do
    {
      if (*(_DWORD *)(v3 + 36) == 2)
      {
        v5 = objc_alloc_init((Class)CLPIndoorEvent);
        objc_msgSend(v5, "setType:", 6);
        objc_msgSend(v5, "setWifiScan:", objc_alloc_init((Class)CLPIndoorWifiScan));
        objc_msgSend(objc_msgSend(v5, "wifiScan"), "setTimestamp:", *(double *)(v3 + 56) - a1[8]);
        v18.__r_.__value_.__r.__words[0] = *(_QWORD *)v3;
        sub_1000C2150(&v18, (std::string *)__p);
        if (__p[23] >= 0)
          v6 = __p;
        else
          v6 = *(_BYTE **)__p;
        objc_msgSend(objc_msgSend(v5, "wifiScan"), "setMac:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v16));
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        objc_msgSend(objc_msgSend(v5, "wifiScan"), "setChannel:", *(unsigned int *)(v3 + 40));
        if (*(char *)(v3 + 31) < 0)
        {
          sub_100115CE4(__p, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
        }
        else
        {
          v7 = *(_OWORD *)(v3 + 8);
          *(_QWORD *)&__p[16] = *(_QWORD *)(v3 + 24);
          *(_OWORD *)__p = v7;
        }
        v12 = __p[23];
        v13 = *(_QWORD *)&__p[8];
        v14 = objc_msgSend(v5, "wifiScan");
        if ((v12 & 0x80u) == 0)
          v15 = v12;
        else
          v15 = v13;
        objc_msgSend(v14, "setHidden:", v15 == 0);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        objc_msgSend(objc_msgSend(v5, "wifiScan"), "setRssi:", *(unsigned int *)(v3 + 32));
        objc_msgSend(objc_msgSend(v5, "wifiScan"), "setAge:", *(double *)(v3 + 48));
        objc_msgSend(*((id *)a1 + 6), "addObject:", v5);
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021986C0);
        v8 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v9 = *((unsigned int *)a1 + 10);
          v17 = *(_QWORD *)v3;
          sub_1000C2150(&v17, &v18);
          v10 = &v18;
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
          v11 = *(_DWORD *)(v3 + 36);
          *(_QWORD *)__p = v16;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2050;
          *(_QWORD *)&__p[20] = v9;
          v24 = 2081;
          v25 = v10;
          v26 = 1025;
          v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not an infrastructure ap- ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"mode\":%{private}d}", __p, 0x2Cu);
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
        }
      }
      v3 += 88;
    }
    while (v3 != v4);
  }
  sub_10020329C((uint64_t)a1);
  *(_QWORD *)__p = &v19;
  sub_100279AA4((void ***)__p);
}

void sub_1002056C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __p = &a15;
  sub_100279AA4((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10020570C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  void (**v5)(_OWORD *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[3];
  void **v18;

  memset(v17, 0, sizeof(v17));
  v5 = (void (**)(_OWORD *__return_ptr))objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLWifiService")), "syncgetScanResult");
  if (v5)
  {
    v5[2](&v15);
    v6 = v15;
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    v6 = 0;
  }
  *a3 = v6;
  if ((uint64_t *)((char *)&v15 + 8) != a2)
    sub_10055A264(a2, *((uint64_t *)&v15 + 1), v16, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - *((_QWORD *)&v15 + 1)) >> 3));
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    while (!sub_1002058D0(v7))
    {
      v7 += 88;
      if (v7 == v8)
      {
        v7 = v8;
        goto LABEL_18;
      }
    }
    if (v7 != v8)
    {
      for (i = v7 + 88; i != v8; i += 88)
      {
        if (!sub_1002058D0(i))
        {
          *(_QWORD *)v7 = *(_QWORD *)i;
          v10 = (void **)(v7 + 8);
          if (*(char *)(v7 + 31) < 0)
            operator delete(*v10);
          v11 = *(_OWORD *)(i + 8);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(i + 24);
          *(_OWORD *)v10 = v11;
          *(_BYTE *)(i + 31) = 0;
          *(_BYTE *)(i + 8) = 0;
          v12 = *(_OWORD *)(i + 32);
          v13 = *(_OWORD *)(i + 48);
          v14 = *(_OWORD *)(i + 64);
          *(_QWORD *)(v7 + 80) = *(_QWORD *)(i + 80);
          *(_OWORD *)(v7 + 48) = v13;
          *(_OWORD *)(v7 + 64) = v14;
          *(_OWORD *)(v7 + 32) = v12;
          v7 += 88;
        }
      }
    }
  }
LABEL_18:
  sub_1002059DC((uint64_t)a2, v7, a2[1]);
  v18 = (void **)&v15 + 1;
  sub_100279AA4(&v18);
  *(_QWORD *)&v15 = v17;
  sub_100279AA4((void ***)&v15);
}

void sub_100205894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  sub_100279AA4(&a16);
  a9 = (void **)&a13;
  sub_100279AA4(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1002058D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  char *p_p;
  char *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  void *__p;
  unint64_t v14;
  unsigned __int8 v15;

  sub_1015A2E04(&__p, "_nomap");
  v2 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
    v3 = *(_QWORD *)(a1 + 16);
  else
    v3 = *(unsigned __int8 *)(a1 + 31);
  if ((char)v15 < 0)
  {
    if (v3 < v14)
    {
      v4 = 0;
LABEL_17:
      operator delete(__p);
      return v4;
    }
    p_p = (char *)__p;
    v6 = (char *)__p + v14;
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
LABEL_12:
    v7 = *(_QWORD *)(a1 + 8);
    v2 = *(_QWORD *)(a1 + 16);
    goto LABEL_13;
  }
  if (v3 < v15)
    return 0;
  p_p = (char *)&__p;
  v6 = (char *)&__p + v15;
  if ((v2 & 0x80) != 0)
    goto LABEL_12;
LABEL_10:
  v7 = a1 + 8;
LABEL_13:
  v8 = (unsigned __int8 *)(v2 + v7 - 1);
  do
  {
    v4 = v6 == p_p;
    if (v6 == p_p)
      break;
    v10 = *--v6;
    v9 = v10;
    v11 = *v8--;
  }
  while (v9 == v11);
  if ((v15 & 0x80) != 0)
    goto LABEL_17;
  return v4;
}

_QWORD *sub_1002059A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return sub_10055A7B8(a2 + 1, a1[5], a1[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[6] - a1[5]) >> 3));
}

uint64_t sub_1002059DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != a3)
  {
    sub_100935E34((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 57) < 0)
          operator delete(*(void **)(v7 - 80));
        v7 -= 88;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100205A60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 344))(*(_QWORD *)(a1 + 48));
}

void sub_1002060E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002061B0(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_alloc_init((Class)CLPIndoorEvent);
  objc_msgSend(v4, "setType:", 12);
  objc_msgSend(v4, "setOutdoorUpdate:", objc_alloc_init((Class)CLPOutdoorUpdate));
  objc_msgSend(objc_msgSend(v4, "outdoorUpdate"), "setTimestamp:", *(double *)a2 - *(double *)(a1 + 64));
  objc_msgSend(objc_msgSend(v4, "outdoorUpdate"), "setMctTimestamp:", *(double *)(a2 + 8));
  objc_msgSend(objc_msgSend(v4, "outdoorUpdate"), "setConfidence:", *(unsigned int *)(a2 + 24));
  objc_msgSend(objc_msgSend(v4, "outdoorUpdate"), "setType:", *(unsigned int *)(a2 + 16));
  objc_msgSend(objc_msgSend(v4, "outdoorUpdate"), "setEstimatedStateProbabilityOutdoor:", *(double *)(a2 + 32));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v4);
  return sub_10020329C(a1);
}

uint64_t sub_100206440(uint64_t a1)
{
  char v1;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_BYTE *)(a1 + 8);
  if (!v1)
    return 0;
  result = 0;
  v4 = (unsigned __int8 *)(a1 + 9);
  do
  {
    result = 2 * (result + v1);
    v5 = *v4++;
    v1 = v5;
  }
  while (v5);
  return result;
}

uint64_t sub_100206470(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 160));
  return result;
}

BOOL sub_1002064B4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_1002064D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_1002064F8(double *a1, _DWORD *a2)
{
  double v3;
  BOOL v4;
  NSObject *v5;
  double v6;
  uint64_t result;
  double v8;
  BOOL v9;
  NSObject *v10;
  double v11;
  const char *v12;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint8_t *v17;
  uint8_t buf[4];
  double v19;

  v3 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v3 >= 0.0 ? (v4 = v3 <= 1.0) : (v4 = 0), !v4))
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 134217984;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Indoor,likelihoodObservationGivenIndoor,%f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Indoor,likelihoodObservationGivenIndoor,%f");
LABEL_29:
    v17 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorEmissionLikelihood(const void *, cnmatrix::CNMatrix<max_nx, 1, T> &) [max_nx = 2U, T = double]", "%s\n", v12);
    if (v17 != buf)
      free(v17);
    return 0xFFFFFFFFLL;
  }
  v8 = a1[1];
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v8 >= 0.0 ? (v9 = v8 <= 1.0) : (v9 = 0), !v9))
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v10 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      v11 = a1[1];
      *(_DWORD *)buf = 134217984;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Outdoor,likelihoodObservationGivenOutdoor,%f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v12 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "OutdoorEstimatorEmissionLikelihood,Invalid Likelihood Observation Given Outdoor,likelihoodObservationGivenOutdoor,%f");
    goto LABEL_29;
  }
  sub_10021C2A0(a2, 2u, 1);
  v14 = *a1;
  *(double *)sub_100206B6C((uint64_t)a2, 0, 0) = v14;
  v15 = *((_QWORD *)a1 + 1);
  v16 = (_QWORD *)sub_100206B6C((uint64_t)a2, 1, 0);
  result = 0;
  *v16 = v15;
  return result;
}

uint64_t sub_100206840(double *a1, _DWORD *a2)
{
  double v2;
  BOOL v3;
  NSObject *v4;
  uint64_t result;
  double v6;
  BOOL v7;
  NSObject *v8;
  const char *v9;
  double *v11;
  uint8_t *v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  v2 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v2 >= 0.0 ? (v3 = v2 <= 1.0) : (v3 = 0), !v3))
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "OutdoorEstimatorTransitionProbability,Invalid Indoor Given Indoor Probability", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v13[0]) = 0;
    v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "OutdoorEstimatorTransitionProbability,Invalid Indoor Given Indoor Probability", v13, 2, v13[0]);
LABEL_29:
    v12 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimator_Type::OutdoorEstimatorTransitionProbability(const void *, cnmatrix::CNMatrix<max_nx, max_nx, T> &) [max_nx = 2U, T = double]", "%s\n", v9);
    if (v12 != buf)
      free(v12);
    return 0xFFFFFFFFLL;
  }
  v6 = a1[1];
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || (v6 >= 0.0 ? (v7 = v6 <= 1.0) : (v7 = 0), !v7))
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v8 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "OutdoorEstimatorTransitionProbability,Invalid Outdoor Given Outdoor Probability", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v13[0]) = 0;
    v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "OutdoorEstimatorTransitionProbability,Invalid Outdoor Given Outdoor Probability", v13, 2, v13[0]);
    goto LABEL_29;
  }
  sub_10021C264(a2, 2u, 2u);
  *(double *)sub_100206B6C((uint64_t)a2, 0, 0) = v2;
  *(double *)sub_100206B6C((uint64_t)a2, 0, 1) = 1.0 - v6;
  *(double *)sub_100206B6C((uint64_t)a2, 1, 0) = 1.0 - v2;
  v11 = (double *)sub_100206B6C((uint64_t)a2, 1, 1);
  result = 0;
  *v11 = v6;
  return result;
}

uint64_t sub_100206B6C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101918570();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_101918598();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019185C0();
  return v3 + 8 * v4;
}

uint64_t sub_100206BAC(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 272));
  return result;
}

BOOL sub_100206BF0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_100206C08(uint64_t a1, uint64_t a2)
{
  return sub_1002D1408(a1 + 48, a2 + 48);
}

__n128 sub_100206C14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100206C38(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_100206C4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100206C70(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_100206C80(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_100206C90(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  result = *(__n128 *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_100206CC4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 53) = *(_QWORD *)(a2 + 53);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_100206CD8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100206CF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_100206D04(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_100206D14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

__n128 sub_100206D28(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 80) = v3;
  result = *(__n128 *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

void sub_100206D5C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100206D6C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_100206D7C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = *(_OWORD *)(a2 + 88);
  v4 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 118) = *(_OWORD *)(a2 + 118);
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v3;
  v5 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v6 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v6;
  v7 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v7;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  v8 = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v8;
  v9 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v9;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v10 = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v10;
  v11 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = v11;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  result = *(__n128 *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(__n128 *)(a1 + 304) = result;
  return result;
}

void sub_100206E60(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100206E70(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100206E80(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100206E90(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void *sub_100206EA0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v4 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v5 = *(_OWORD *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 136);
  v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  v8 = *(_OWORD *)(a2 + 184);
  v9 = *(_OWORD *)(a2 + 200);
  v10 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 229) = *(_QWORD *)(a2 + 229);
  *(_OWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  v11 = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v12 = *(_OWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v12;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  v13 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = v13;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  v14 = *(_OWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = v14;
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  v15 = *(_OWORD *)(a2 + 368);
  v16 = *(_OWORD *)(a2 + 384);
  v17 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v17;
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 384) = v16;
  v18 = *(_OWORD *)(a2 + 432);
  v19 = *(_OWORD *)(a2 + 448);
  v20 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 477) = *(_QWORD *)(a2 + 477);
  *(_OWORD *)(a1 + 448) = v19;
  *(_OWORD *)(a1 + 464) = v20;
  *(_OWORD *)(a1 + 432) = v18;
  v21 = *(_OWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = v21;
  *(_QWORD *)(a2 + 488) = 0;
  *(_QWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 528) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 536) = 0;
  return memcpy((void *)(a1 + 544), (const void *)(a2 + 544), 0x458uLL);
}

__n128 sub_100207058(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10020707C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_10020708C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1002070A0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_1002070B0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  result = *(__n128 *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_1002070E4(uint64_t a1, uint64_t a2)
{
  return sub_1007F5A68(a1 + 48, a2 + 48);
}

_OWORD *sub_1002070F0(uint64_t a1, uint64_t a2)
{
  return sub_1001FA140((_OWORD *)(a1 + 48), (__int128 *)(a2 + 48));
}

__n128 sub_1002070FC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  int v6;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v4 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  result = *(__n128 *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v6 = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v6;
  return result;
}

void sub_100207178(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207188(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207198(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

char *sub_1002071A8(uint64_t a1, uint64_t a2)
{
  return sub_1004E5748((char *)(a1 + 48), (__int128 *)(a2 + 48));
}

void sub_1002071B4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_1002071C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1002071D4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_1002071E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_1002071F4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_100207204(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;

  v2 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  result = *(__n128 *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(__n128 *)(a1 + 120) = result;
  return result;
}

uint64_t sub_100207250(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_100FC2BA4((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

uint64_t sub_10020726C(uint64_t result, uint64_t a2)
{
  __int16 v2;

  v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_100207280(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207290(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_1002072A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

__n128 sub_1002072C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1002072E8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1002072F8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207308(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207318(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207328(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207338(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_100207348(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_100207358(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_10020736C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_100207390(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_1002073A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1002073C4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 sub_1002073D4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v3 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v4 = *(_OWORD *)(a2 + 120);
  v5 = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  return result;
}

uint64_t sub_1002074C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_1002074D8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  result = *(__n128 *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

__n128 sub_1002074FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t sub_10020750C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

__n128 sub_100207518(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;

  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    v4 = *(_OWORD *)(a2 + 48);
    v5 = *(_OWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 64) = v5;
    v7 = *(_OWORD *)(a2 + 112);
    v8 = *(_OWORD *)(a2 + 128);
    v9 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 112) = v7;
    *(_OWORD *)(a1 + 128) = v8;
    v10 = *(_OWORD *)(a2 + 176);
    v11 = *(_OWORD *)(a2 + 192);
    v12 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v12;
    *(_OWORD *)(a1 + 176) = v10;
    *(_OWORD *)(a1 + 192) = v11;
    v13 = *(_OWORD *)(a2 + 240);
    v14 = *(_OWORD *)(a2 + 256);
    v15 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 256) = v14;
    *(_OWORD *)(a1 + 272) = v15;
    *(_OWORD *)(a1 + 240) = v13;
    sub_10012D080(a1 + 296, (uint64_t *)(a2 + 296));
    result = *(__n128 *)(a2 + 336);
    *(__n128 *)(a1 + 336) = result;
    *(_BYTE *)(a1 + 352) = 1;
  }
  return result;
}

__n128 sub_1002075B0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  result = *(__n128 *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void sub_1002075E4(uint64_t a1, void *a2)
{
  sub_1000A6A70(*(_QWORD *)(a1 + 32), a2);
}

double *sub_1002075EC(double *result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double v16;
  float v17;
  float v18;
  double *v19;
  char v20;
  BOOL v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  float v28;
  BOOL v29;
  uint64_t v30;
  double v31;
  float v32;
  float v33;
  BOOL v34;
  double v35;
  float v36;
  float v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  float v43;
  BOOL v44;
  uint64_t v45;
  float v46;
  float v47;
  BOOL v48;
  double v49;
  float v50;
  float v51;
  BOOL v52;
  double v53;
  double v54;
  float v55;
  float v56;
  BOOL v57;
  double v58;
  double v59;
  float v60;
  float v61;
  BOOL v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  float v67;
  float v68;
  float v69;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(a2 - 1);
        v23 = v22;
        v24 = *v9;
        v25 = *v9;
        if (v23 > v25)
        {
          *v9 = v22;
          *(a2 - 1) = v24;
        }
        return result;
      case 3uLL:
        v26 = v9[1];
        v27 = v26;
        v28 = *(a2 - 1);
        v29 = v27 <= v28;
        if (v27 <= v28)
          v30 = *((_QWORD *)a2 - 1);
        else
          v30 = *((_QWORD *)v9 + 1);
        if (!v29)
          v26 = *(a2 - 1);
        *(a2 - 1) = v26;
        *((_QWORD *)v9 + 1) = v30;
        v31 = *(a2 - 1);
        v32 = v31;
        v33 = *v9;
        v34 = v32 <= v33;
        if (v32 <= v33)
          v35 = *v9;
        else
          v35 = *(a2 - 1);
        if (!v34)
          v31 = *v9;
        *(a2 - 1) = v31;
        v36 = v35;
        v37 = v9[1];
        v38 = v36 <= v37;
        if (v36 <= v37)
          v39 = *((_QWORD *)v9 + 1);
        else
          v39 = *(_QWORD *)v9;
        if (!v38)
          v35 = v9[1];
        *(_QWORD *)v9 = v39;
        v9[1] = v35;
        return result;
      case 4uLL:
        v40 = *(_QWORD *)v9;
        v41 = v9[1];
        v42 = *v9;
        v43 = v9[2];
        v44 = v42 <= v43;
        if (v42 <= v43)
          v45 = *((_QWORD *)v9 + 2);
        else
          v45 = *(_QWORD *)v9;
        if (!v44)
          v40 = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 2) = v40;
        *(_QWORD *)v9 = v45;
        v46 = v41;
        v47 = *(a2 - 1);
        v48 = v46 <= v47;
        if (v46 <= v47)
          v49 = *(a2 - 1);
        else
          v49 = v41;
        if (!v48)
          v41 = *(a2 - 1);
        *(a2 - 1) = v41;
        v50 = *v9;
        v51 = v49;
        v52 = v50 <= v51;
        if (v50 <= v51)
          v53 = v49;
        else
          v53 = *v9;
        if (v52)
          v49 = *v9;
        *v9 = v53;
        v9[1] = v49;
        v54 = v9[2];
        v55 = v54;
        v56 = *(a2 - 1);
        v57 = v55 <= v56;
        if (v55 <= v56)
          v58 = *(a2 - 1);
        else
          v58 = v9[2];
        if (!v57)
          v54 = *(a2 - 1);
        *(a2 - 1) = v54;
        v59 = v9[1];
        v60 = v59;
        v61 = v58;
        v62 = v60 <= v61;
        if (v60 <= v61)
          v63 = v58;
        else
          v63 = v9[1];
        if (!v62)
          v59 = v58;
        v9[1] = v63;
        v9[2] = v59;
        return result;
      case 5uLL:
        return sub_10108B3E4(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return sub_10108BA54(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_10108B5AC(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_10108B5AC(v9, &v9[v13 >> 1], a2 - 1);
            sub_10108B5AC(v9 + 1, v15 - 1, a2 - 2);
            sub_10108B5AC(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_10108B5AC(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          v17 = *(v9 - 1);
          v18 = *v9;
          if (v17 <= v18)
          {
            result = sub_10108B64C(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v19 = sub_10108B718(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_15;
          v21 = sub_10108B7E4(v9, v19);
          v9 = v19 + 1;
          result = (double *)sub_10108B7E4(v19 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_15:
            result = (double *)sub_1002075EC(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return sub_10108B52C(v9, a2);
        if (v9 != a2)
        {
          while (v8 + 1 != a2)
          {
            v66 = *v8;
            v65 = v8[1];
            v64 = ++v8;
            v67 = v65;
            v68 = v66;
            if (v67 > v68)
            {
              do
              {
                *v64 = v66;
                v66 = *(v64 - 2);
                v69 = v66;
                --v64;
              }
              while (v67 > v69);
              *v64 = v65;
            }
          }
        }
        return result;
    }
  }
}

id sub_1002079F8(uint64_t a1)
{
  return sub_10006AAB4(*(id *)(a1 + 32), 1, *(double *)(a1 + 40));
}

uint64_t sub_100207A0C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 96));
  return result;
}

BOOL sub_100207A50(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_100207A68(uint64_t a1)
{
  return sub_1002D1518(a1 + 48);
}

void sub_100207A70(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100207A8C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100207AA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = (_QWORD *)(a1 + 48);
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_1004966B4((uint64_t)v1, v2);
}

void sub_100207AB8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207ACC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t sub_100207AE0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100207B00(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207B14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207B20(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207B2C(uint64_t a1)
{
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

void sub_100207BA0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207BAC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207BB8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207BC4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_100207BD0(uint64_t a1)
{
  return sub_100115F78(a1 + 48);
}

void sub_100207BD8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100207BF0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207C00(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_100207C10(uint64_t a1)
{
  return sub_100235568(a1 + 48);
}

uint64_t sub_100207C18(uint64_t a1)
{
  return sub_1001FA090(a1 + 48);
}

void sub_100207C20(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

void sub_100207C84(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207C90(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207C9C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207CA8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_100207D28(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_100207D34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100207D54(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_100207D60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100207D80(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207D8C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_100207DA0(uint64_t a1)
{
  sub_1001A5CBC((uint64_t *)(a1 + 48));
}

void sub_100207DAC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207DB8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207DC4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100207DDC(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_10118EB08(&v1);
}

void sub_100207E04(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E1C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E28(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E34(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E40(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E4C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207E5C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100207E74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    operator delete();
  return result;
}

void sub_100207E9C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100207EB4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_100207EC0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(_QWORD *)(a1 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

uint64_t sub_100207F34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100207F58(uint64_t a1)
{
  return sub_100261F44(a1 + 48);
}

uint64_t sub_100207F64(uint64_t result)
{
  if (*(_BYTE *)(result + 352))
    return sub_100067A50(result + 296);
  return result;
}

uint64_t sub_100207F7C()
{
  return 1;
}

uint64_t sub_100207F84(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100207F98(uint64_t a1)
{
  return sub_1000FF864(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100207FA8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

BOOL sub_100207FC8(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v6;
  int v7;
  double v8;
  int v9;
  double v10;
  double v11;

  if (a2 <= 0)
    sub_101953804();
  if (*(_DWORD *)(a3 + 8) != a2 || *(_DWORD *)(a3 + 12) != a2)
    sub_10195382C();
  v6 = 0;
  v7 = 0;
  v8 = *(double *)(a1 + 128);
LABEL_8:
  v9 = 0;
  v10 = 0.0;
  while (1)
  {
    v11 = sub_100208094(a3, v9, v7);
    if (v11 < 0.0 || v11 > 1.0)
      return v6;
    v10 = v10 + v11;
    if (a2 == ++v9)
    {
      if (fabs(v10 + -1.0) <= v8)
      {
        v6 = ++v7 >= a2;
        if (v7 != a2)
          goto LABEL_8;
      }
      return v6;
    }
  }
}

double sub_100208094(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101919370();
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_101919398();
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019193C0();
  return *(double *)(v3 + 8 * v4);
}

void sub_1002080D4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 80;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10020813C(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 25;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_1002081A4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 65;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 100);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

BOOL sub_10020820C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  mach_error_t v7;
  mach_error_t v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  NSObject *v13;
  char *v14;
  int v15;
  _BOOL4 v16;
  _BOOL8 result;
  uint64_t v18;
  char *v19;
  int v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  _DWORD v24[4];
  int v25;
  char *v26;
  __int16 v27;
  mach_error_t v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  char *v32;
  __int16 v33;
  mach_error_t v34;
  __int16 v35;
  int v36;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v7 = -536870187;
    v23 = 256;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 80))(v3, a2, a3, &v25, &v23);
    if (v8 == -536870187)
    {
      while (*(_DWORD *)(a1 + 16) < 5u)
      {
        if (qword_10229FC80 != -1)
          dispatch_once(&qword_10229FC80, &stru_10217A9A0);
        v9 = qword_10229FC88;
        if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
        {
          v10 = dword_101C1E938[*(int *)(a1 + 16)];
          *(_DWORD *)buf = 67109120;
          LODWORD(v32) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CMA busy. Waiting %d microseconds.", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC80 != -1)
            dispatch_once(&qword_10229FC80, &stru_10217A9A0);
          v11 = dword_101C1E938[*(int *)(a1 + 16)];
          v24[0] = 67109120;
          v24[1] = v11;
          v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "CMA busy. Waiting %d microseconds.", v24);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)", "%s\n", v12);
          if (v12 != (char *)buf)
            free(v12);
        }
        usleep(dword_101C1E938[*(int *)(a1 + 16)]);
        ++*(_DWORD *)(a1 + 16);
        v23 = 256;
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)v3 + 80))(v3, a2, a3, &v25, &v23);
        if (v8 != -536870187)
          goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      v7 = v8;
      if (!v8)
      {
        *(_DWORD *)(a1 + 16) = 0;
        return 1;
      }
    }
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10217A9A0);
    v13 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v14 = mach_error_string(v7);
      v15 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)buf = 136446722;
      v32 = v14;
      v33 = 1026;
      v34 = v7;
      v35 = 1026;
      v36 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "sendCommandPayload() = %{public}s (0x%{public}x),fNumConsecutiveCMAFailures,%{public}d", buf, 0x18u);
    }
    v16 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10217A9A0);
      v18 = qword_10229FC88;
      v19 = mach_error_string(v7);
      v20 = *(_DWORD *)(a1 + 16);
      v25 = 136446722;
      v26 = v19;
      v27 = 1026;
      v28 = v7;
      v29 = 1026;
      v30 = v20;
      v21 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 17, "sendCommandPayload() = %{public}s (0x%{public}x),fNumConsecutiveCMAFailures,%{public}d", &v25, 24);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)", "%s\n");
LABEL_32:
      if (v21 != buf)
        free(v21);
      return 0;
    }
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10217A9A0);
    v22 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "cmaHidDriverInterface NULL", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10217A9A0);
      LOWORD(v25) = 0;
      v21 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "cmaHidDriverInterface NULL", &v25, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)", "%s\n");
      goto LABEL_32;
    }
  }
  return result;
}

BOOL sub_100208740(uint64_t a1, double *a2, double a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  result = sub_100AD19A8(*(_QWORD **)(a1 + 656), (uint64_t)&v30, &v28, a3);
  if (result)
  {
    v6 = *((_QWORD *)&v31 + 1);
    v7 = *(_QWORD *)v31;
    v8 = *((_QWORD *)&v31 + 1) - *(_QWORD *)v31;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    v10 = v9 - 1;
    if (v8 < 193)
    {
      v14 = ((21 - v9) * (unsigned __int128)0x8618618618618619) >> 64;
      v15 = v14 + ((21 - v9 - v14) >> 1);
      v12 = *(_QWORD *)(v31 - 8 * (v15 >> 4));
      v13 = v12 + 192 * (v9 - 21 + 21 * (v15 >> 4)) + 3840;
      if (v13 == *((_QWORD *)&v29 + 1))
        return 0;
      v11 = -(uint64_t)(v15 >> 4);
    }
    else
    {
      v11 = v10 / 0x15;
      v12 = *(_QWORD *)(v31 + 8 * (v10 / 0x15));
      v13 = v12 + 192 * (v10 % 0x15);
      if (v13 == *((_QWORD *)&v29 + 1))
        return 0;
    }
    if (v13 == v12)
      v13 = *(_QWORD *)(v31 + 8 * v11 - 8) + 4032;
    if (*(double *)(v13 - 192) > a3)
      return 0;
    v16 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) == v7)
      v16 = *(_QWORD *)(v31 - 8) + 4032;
    if (*(double *)(v16 - 192) <= a3)
      return 0;
    if (v8 < 193)
    {
      v20 = ((21 - v9) * (unsigned __int128)0x8618618618618619) >> 64;
      v21 = (v20 + ((21 - v9 - v20) >> 1)) >> 4;
      v17 = -(uint64_t)v21;
      v18 = *(_QWORD *)(v31 - 8 * v21);
      v19 = v18 + 192 * (v9 - 21 + 21 * v21) + 3840;
    }
    else
    {
      v17 = v10 / 0x15;
      v18 = *(_QWORD *)(v31 + 8 * (v10 / 0x15));
      v19 = v18 + 192 * (v10 % 0x15);
    }
    if (v19 == v18)
      v19 = *(_QWORD *)(v31 + 8 * v17 - 8) + 4032;
    if (v8 < 193)
    {
      v25 = 21 - v9;
      v26 = ((21 - v9) * (unsigned __int128)0x8618618618618619) >> 64;
      v27 = (v26 + ((v25 - v26) >> 1)) >> 4;
      v22 = -(uint64_t)v27;
      v23 = *(_QWORD *)(v31 - 8 * v27);
      v24 = v23 + 192 * (21 * v27 - v25) + 3840;
    }
    else
    {
      v22 = v10 / 0x15;
      v23 = *(_QWORD *)(v31 + 8 * (v10 / 0x15));
      v24 = v23 + 192 * (v10 % 0x15);
    }
    if (v24 == v23)
      v24 = *(_QWORD *)(v31 + 8 * v22 - 8) + 4032;
    if (*((_QWORD *)&v31 + 1) == v7)
      v6 = *(_QWORD *)(v31 - 8) + 4032;
    *a2 = sub_1002446AC(*(double *)(v19 - 192), *(double *)(v24 - 144), *(double *)(v6 - 192), *(double *)(v6 - 144), a3);
    return 1;
  }
  return result;
}

uint64_t sub_100208A04(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v16, &v14);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1) == *((_QWORD *)&v15 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v17 == *((_QWORD *)&v17 + 1))
        v4 = *(_QWORD *)(v17 - 8) + 4032;
      v5 = *(_OWORD *)(v4 - 192);
      v6 = *(_OWORD *)(v4 - 176);
      v7 = *(_OWORD *)(v4 - 144);
      a2[2] = *(_OWORD *)(v4 - 160);
      a2[3] = v7;
      *a2 = v5;
      a2[1] = v6;
      v8 = *(_OWORD *)(v4 - 128);
      v9 = *(_OWORD *)(v4 - 112);
      v10 = *(_OWORD *)(v4 - 80);
      a2[6] = *(_OWORD *)(v4 - 96);
      a2[7] = v10;
      a2[4] = v8;
      a2[5] = v9;
      v11 = *(_OWORD *)(v4 - 64);
      v12 = *(_OWORD *)(v4 - 48);
      v13 = *(_OWORD *)(v4 - 16);
      a2[10] = *(_OWORD *)(v4 - 32);
      a2[11] = v13;
      a2[8] = v11;
      a2[9] = v12;
      return 1;
    }
  }
  return result;
}

BOOL sub_100208AC8(float *a1, double a2, double a3)
{
  double v5;
  unsigned int v6;
  unsigned int v8;
  float v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  _BOOL8 result;
  uint64_t v15;
  NSObject *v16;
  float v17;
  int v18;
  NSObject *v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29;
  double v30;
  uint8_t buf[4];
  double v32;

  *a1 = 0.0;
  if (a2 < -90.0 || a2 > 90.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161B20);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Input latitude = %.9lf is out of possible range", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161B20);
      v29 = 134217984;
      v30 = a2;
      v21 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Input latitude = %.9lf is out of possible range", COERCE_DOUBLE(&v29));
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)", "%s\n");
      goto LABEL_56;
    }
  }
  else
  {
    v5 = a3;
    if (a3 < -180.0)
    {
      v6 = 0;
      do
        v5 = v5 + 360.0;
      while (v5 < -180.0 && v6++ < 3);
    }
    if (v5 >= 180.0)
    {
      v8 = 0;
      do
        v5 = v5 + -360.0;
      while (v5 >= 180.0 && v8++ < 3);
    }
    v10 = (v5 + 180.0) / 10.0;
    v11 = vcvtms_s32_f32(v10);
    if (v11 < 0x24)
    {
      v17 = (90.0 - a2) / 10.0;
      v18 = vcvtms_s32_f32(v17);
      if (v18 < 0x13)
      {
        if (v11 == 35)
          v22 = 0;
        else
          v22 = (v11 + 1);
        v23 = v18 + 1;
        if (v18 == 18)
        {
          *a1 = -30.0;
        }
        else
        {
          v24 = (36 * v18);
          result = sub_100209090(v24 + v11);
          if (!result)
            return result;
          v25 = byte_101BE9BA8[v24 + v11];
          v26 = (36 * v23);
          result = sub_100209090(v26 + v11);
          if (!result)
            return result;
          v28 = byte_101BE9BA8[v26 + v11];
          result = sub_100209090(v22 + v24);
          if (!result)
            return result;
          v27 = byte_101BE9BA8[v22 + v24];
          result = sub_100209090(v22 + v26);
          if (!result)
            return result;
          *a1 = (float)((float)((float)((float)((float)((float)v23 - v17)
                                              * (float)((float)(v10 - (float)v11) * (float)v27))
                                      + (float)((float)((float)((float)(int)v22 - v10) * (float)v25)
                                              * (float)((float)v23 - v17)))
                              + (float)((float)((float)((float)(int)v22 - v10) * (float)v28) * (float)(v17 - (float)v18)))
                      + (float)((float)((float)(v10 - (float)v11) * (float)byte_101BE9BA8[v22 + v26])
                              * (float)(v17 - (float)v18)))
              / (float)((float)((float)v23 - (float)v18) * (float)((float)(int)v22 - (float)v11));
        }
        return 1;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161B20);
      v19 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v32 = a2;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "latitude %.9lf is not valid.", buf, 0xCu);
      }
      v20 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v20)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102161B20);
        v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "latitude %.9lf is not valid.");
        goto LABEL_41;
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161B20);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v32 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "longitude %.9lf is not valid.", buf, 0xCu);
      }
      v13 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102161B20);
        v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "longitude %.9lf is not valid.");
LABEL_41:
        v21 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)", "%s\n");
LABEL_56:
        if (v21 != buf)
          free(v21);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100209090(unsigned int a1)
{
  NSObject *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a1 >= 0x2AC)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102161B20);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Bad index into kkDefenseMappingAgencyTenByTenGeoid.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102161B20);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Bad index into kkDefenseMappingAgencyTenByTenGeoid.", v5, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoidModel::_static_check_dma_index(int)", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return a1 < 0x2AC;
}

uint64_t sub_100209230(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100209250(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100209270(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100209294(uint64_t a1)
{
  return sub_100010174(a1 + 32);
}

char *sub_10020929C(uint64_t a1, uint64_t a2)
{
  return sub_1001AF190((char *)(a1 + 32), (__int128 *)(a2 + 32));
}

void sub_1002092A8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_1002092BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_1002092CC(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 49) = a2;
  return result;
}

uint64_t sub_1002092DC()
{
  return 1;
}

uint64_t sub_1002092E4(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = *(_DWORD *)(result + 224);
  if ((_BYTE)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(result + 24);
      if (result)
      {
        result = sub_10076796C(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      result = *(_QWORD *)(v1 + 32);
      if (result)
      {
        result = sub_100DBA0B0(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = sub_10076A128(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      v3 = *(_QWORD *)(v1 + 48);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 23) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      result = *(_QWORD *)(v1 + 56);
      if (result)
      {
        result = sub_1007688EC(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      result = *(_QWORD *)(v1 + 64);
      if (result)
      {
        result = sub_100F3D998(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      v4 = *(_QWORD *)(v1 + 72);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16))
          *(_DWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      result = *(_QWORD *)(v1 + 80);
      if (result)
      {
        result = sub_10076A8CC(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      result = *(_QWORD *)(v1 + 88);
      if (result)
      {
        result = sub_10076A458(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    *(_QWORD *)(v1 + 96) = 0;
    if ((v2 & 0x4000) != 0)
    {
      v5 = *(_QWORD *)(v1 + 104);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16))
          *(_BYTE *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x8000) != 0)
    {
      v6 = *(_QWORD *)(v1 + 112);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 24))
        {
          *(_QWORD *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = 0;
        }
        *(_DWORD *)(v6 + 24) = 0;
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      result = *(_QWORD *)(v1 + 120);
      if (result)
      {
        result = sub_100F3DA54(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x20000) != 0)
    {
      result = *(_QWORD *)(v1 + 128);
      if (result)
      {
        result = sub_1008CAD3C(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x40000) != 0)
    {
      v7 = *(_QWORD *)(v1 + 136);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    v2 = *(_DWORD *)(v1 + 224);
    if ((v2 & 0x80000) != 0)
    {
      result = *(_QWORD *)(v1 + 144);
      if (result)
      {
        result = sub_1008E5920(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x100000) != 0)
    {
      result = *(_QWORD *)(v1 + 152);
      if (result)
      {
        result = sub_1008EAA1C(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x200000) != 0)
    {
      result = *(_QWORD *)(v1 + 160);
      if (result)
      {
        result = sub_1008F018C(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x400000) != 0)
    {
      result = *(_QWORD *)(v1 + 168);
      if (result)
      {
        result = sub_1008FBB44(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x800000) != 0)
    {
      result = *(_QWORD *)(v1 + 176);
      if (result)
      {
        result = sub_1008FF118(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
  }
  if (HIBYTE(v2))
  {
    if ((v2 & 0x1000000) != 0)
    {
      result = *(_QWORD *)(v1 + 184);
      if (result)
      {
        result = sub_1008D3CAC(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    if ((v2 & 0x2000000) != 0)
    {
      result = *(_QWORD *)(v1 + 192);
      if (result)
      {
        result = sub_1008D1FE8(result);
        v2 = *(_DWORD *)(v1 + 224);
      }
    }
    *(_QWORD *)(v1 + 200) = 0;
    *(_DWORD *)(v1 + 216) = 0;
    if ((v2 & 0x20000000) != 0)
    {
      result = *(_QWORD *)(v1 + 208);
      if (result)
        result = sub_1008CEF0C(result);
    }
  }
  *(_DWORD *)(v1 + 224) = 0;
  return result;
}

uint64_t sub_10020954C(uint64_t result, void *a2)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  const char *v35;
  _BYTE v36[8];
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  uint8_t buf[8];
  std::__shared_weak_count *v44;

  if (a2)
  {
    v3 = *(_DWORD **)(result + 32);
    v36[0] = 0;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)buf = &v39;
    if (*((_BYTE *)sub_1001E3660((uint64_t)(v3 + 654), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 720))
    {
      v39 = 0;
      *(_QWORD *)buf = &v39;
      v4 = sub_1001E3660((uint64_t)(v3 + 654), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_1017530C0((uint64_t)v36, (uint64_t)(v4 + 3));
    }
    else
    {
      v39 = 1;
      *(_QWORD *)buf = &v39;
      if (!*((_BYTE *)sub_1001E3660((uint64_t)(v3 + 654), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 720))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v32 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#warning,#gnssawd,fetchSignalStrengthMeasurementsWithReply Couldn't get current serving cell", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return sub_10087B6D0((uint64_t)v36);
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,fetchSignalStrengthMeasurementsWithReply Couldn't get current serving cell", &v39, 2);
        v20 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()_block_invoke", "%s\n", v33);
        goto LABEL_69;
      }
      v39 = 1;
      *(_QWORD *)buf = &v39;
      v5 = sub_1001E3660((uint64_t)(v3 + 654), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_1017530C0((uint64_t)v36, (uint64_t)(v5 + 3));
    }
    if (v38)
    {
      if (v37 <= 0xA)
      {
        if (((1 << v37) & 0x87) != 0)
        {
          v3[634] = objc_msgSend(objc_msgSend(a2, "rscp"), "intValue");
          v3[633] = objc_msgSend(objc_msgSend(a2, "ecn0"), "intValue");
          sub_1001E4804(buf);
          LOBYTE(v39) = 0;
          v6 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v39);
          if ((_BYTE)v39)
            v7 = v6;
          else
            v7 = 0;
          v8 = v44;
          if (!v44)
            goto LABEL_16;
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
            if (v7)
              goto LABEL_17;
          }
          else
          {
LABEL_16:
            if (v7)
            {
LABEL_17:
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v11 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v12 = v3[634];
                v13 = v3[633];
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v12;
                LOWORD(v44) = 1024;
                *(_DWORD *)((char *)&v44 + 2) = v13;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,GSM,RSRP,%d,SNR,%d", buf, 0xEu);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_72;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v14 = v3[634];
              v15 = v3[633];
              v39 = 67109376;
              v40 = v14;
              v41 = 1024;
              v42 = v15;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,GSM,RSRP,%d,SNR,%d", &v39, 14);
              v17 = (uint8_t *)v16;
              sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()_block_invoke", "%s\n", v16);
              goto LABEL_51;
            }
          }
LABEL_72:
          v3[591] = v3[588];
          return sub_10087B6D0((uint64_t)v36);
        }
        if (((1 << v37) & 0x440) != 0)
        {
          v3[634] = objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue");
          v3[633] = objc_msgSend(objc_msgSend(a2, "snr"), "intValue");
          sub_1001E4804(buf);
          LOBYTE(v39) = 0;
          v21 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v39);
          if ((_BYTE)v39)
            v22 = v21;
          else
            v22 = 0;
          v23 = v44;
          if (v44)
          {
            v24 = (unint64_t *)&v44->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (!v22)
            goto LABEL_72;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v26 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v27 = v3[634];
            v28 = v3[633];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v27;
            LOWORD(v44) = 1024;
            *(_DWORD *)((char *)&v44 + 2) = v28;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,5G-LTE,RSRP,%d,SNR,%d", buf, 0xEu);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_72;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v29 = v3[634];
          v30 = v3[633];
          v39 = 67109376;
          v40 = v29;
          v41 = 1024;
          v42 = v30;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,5G-LTE,RSRP,%d,SNR,%d", &v39, 14);
          v17 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()_block_invoke", "%s\n", v31);
LABEL_51:
          if (v17 != buf)
            free(v17);
          goto LABEL_72;
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,Unhandled serving cell to obtain cellular signal strength", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return sub_10087B6D0((uint64_t)v36);
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,Unhandled serving cell to obtain cellular signal strength", &v39, 2);
      v20 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()_block_invoke", "%s\n", v35);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#warning,#gnssawd,Cellular-AWD,fetchSignalStrengthMeasurementsWithReply Unhandled serving cell", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return sub_10087B6D0((uint64_t)v36);
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      LOWORD(v39) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#warning,#gnssawd,Cellular-AWD,fetchSignalStrengthMeasurementsWithReply Unhandled serving cell", &v39, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::fetchSignalStrengthMeasurementsWithReply()_block_invoke", "%s\n", v19);
    }
LABEL_69:
    if (v20 != buf)
      free(v20);
    return sub_10087B6D0((uint64_t)v36);
  }
  return result;
}

void sub_100209E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10087B6D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100209E88(uint64_t a1, void *a2, void *a3)
{
  sub_100099AA8(*(_QWORD *)(a1 + 32), a2, a3);
}

uint64_t sub_100209E90(uint64_t result, int a2)
{
  if (a2)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 64);
  return result;
}

uint64_t sub_100209EAC(uint64_t result, uint64_t a2)
{
  if (a2 >= 1)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 64);
  return result;
}

uint64_t sub_100209ECC(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 60) = a2;
  return result;
}

uint64_t sub_100209EDC(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 56) = a2;
  return result;
}

uint64_t sub_100209EEC(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) = a2;
  return result;
}

uint64_t sub_100209EFC(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 51) = a2;
  return result;
}

uint64_t sub_100209F0C(uint64_t result, int a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 50) = a2 == 0;
  return result;
}

uint64_t sub_100209F24(uint64_t result, int a2)
{
  if (a2)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 68);
  return result;
}

uint64_t sub_100209F40(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 48) = a2;
  return result;
}

void sub_100209F54(uint64_t a1, CLConnection *this)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  NSObject *v28;
  void **v29;
  void *v30;
  NSObject *v31;
  _BYTE *v32;
  NSObject *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  _BYTE v39[12];
  char v40;
  _BYTE buf[12];
  char v42;
  void *__p;
  __int16 v44;
  const char *v45;
  __int16 v46;
  _BYTE *v47;
  __int16 v48;
  _BYTE *v49;

  v4 = *(_QWORD **)(a1 + 824);
  if (v4)
  {
    v5 = a1 + 824;
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)this;
      if (v6 >= (unint64_t)this)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = (uint64_t)v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != a1 + 824 && *(_QWORD *)(v5 + 32) <= (unint64_t)this)
    {
      sub_100090424(a1, this);
      return;
    }
  }
  v9 = *(_QWORD **)(a1 + 848);
  if (v9)
  {
    v10 = a1 + 848;
    do
    {
      v11 = v9[4];
      v12 = v11 >= (unint64_t)this;
      if (v11 >= (unint64_t)this)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = (uint64_t)v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != a1 + 848 && *(_QWORD *)(v10 + 32) <= (unint64_t)this)
    {
      sub_10008A758(a1, this);
      return;
    }
  }
  v14 = *(_QWORD **)(a1 + 896);
  if (v14)
  {
    v15 = a1 + 896;
    do
    {
      v16 = v14[4];
      v17 = v16 >= (unint64_t)this;
      if (v16 >= (unint64_t)this)
        v18 = v14;
      else
        v18 = v14 + 1;
      if (v17)
        v15 = (uint64_t)v14;
      v14 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != a1 + 896 && *(_QWORD *)(v15 + 32) <= (unint64_t)this)
    {
      __p = *(void **)(v15 + 40);
      sub_101106F00(__p);
      sub_100210524((uint64_t **)(a1 + 912), (unint64_t *)&__p, (uint64_t *)&__p);
      sub_10008A9F0((uint64_t **)(a1 + 888), (uint64_t *)v15);
      v30 = (void *)v15;
LABEL_78:
      operator delete(v30);
      return;
    }
  }
  if (*(CLConnection **)(a1 + 936) == this)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v28 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 936));
      v29 = SBYTE3(v47) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Client %{public}s disconnected", buf, 0xCu);
      if (SBYTE3(v47) < 0)
        operator delete(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v35 = qword_1022A01D8;
      CLConnection::getName(*(CLConnection **)(a1 + 936));
      if (v42 >= 0)
        v36 = buf;
      else
        v36 = *(_BYTE **)buf;
      *(_DWORD *)v39 = 136446210;
      *(_QWORD *)&v39[4] = v36;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v35, 0, "Client %{public}s disconnected", v39, 12);
      v38 = v37;
      if (v42 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleDisconnection(CLConnection *)", "%s\n", v38);
      if (v38 != (char *)&__p)
        free(v38);
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 936));
    *(_QWORD *)(a1 + 936) = 0;
  }
  else
  {
    CLConnection::getUserName(this);
    v19 = (uint64_t **)(a1 + 864);
    v20 = sub_10019C4C0(a1 + 864, (const void **)&__p);
    v21 = a1 + 872;
    if (SBYTE3(v47) < 0)
      operator delete(__p);
    if (v21 != v20)
    {
      CLConnection::getUserName(this);
      v22 = sub_10019C4C0((uint64_t)v19, (const void **)buf);
      sub_100675198(v19, v22);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v23 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v24 = v42;
        v25 = *(_BYTE **)buf;
        CLConnection::getName(this);
        v26 = buf;
        if (v24 < 0)
          v26 = v25;
        if (v40 >= 0)
          v27 = v39;
        else
          v27 = *(_BYTE **)v39;
        __p = (void *)68289538;
        v44 = 2082;
        v45 = "";
        v46 = 2082;
        v47 = v26;
        v48 = 2082;
        v49 = v27;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CoreLocationAgent disconnected\", \"UserName\":%{public, location:escape_only}s, \"Connection\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (v40 < 0)
          operator delete(*(void **)v39);
      }
      goto LABEL_76;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v31 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      CLConnection::getName(this);
      if (v42 >= 0)
        v32 = buf;
      else
        v32 = *(_BYTE **)buf;
      __p = (void *)68289282;
      v44 = 2082;
      v45 = "";
      v46 = 2082;
      v47 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Got disconnection for unknown client\", \"Connection\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (v42 < 0)
        operator delete(*(void **)buf);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v33 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      CLConnection::getName(this);
      if (v42 >= 0)
        v34 = buf;
      else
        v34 = *(_BYTE **)buf;
      __p = (void *)68289282;
      v44 = 2082;
      v45 = "";
      v46 = 2082;
      v47 = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got disconnection for unknown client", "{\"msg%{public}.0s\":\"Got disconnection for unknown client\", \"Connection\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
LABEL_76:
      if ((v42 & 0x80000000) == 0)
        return;
      v30 = *(void **)buf;
      goto LABEL_78;
    }
  }
}

void sub_10020A5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020A608(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_10020A620(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return sub_1007855D8(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48));
}

_QWORD *sub_10020A638(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_10020A668(uint64_t a1)
{
  sub_1001AF568(*(_QWORD *)(a1 + 32));
}

void sub_10020A674(uint64_t a1)
{
  sub_10002EFB0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10020A67C(uint64_t a1)
{
  return sub_1002A1C94(a1 + 48);
}

uint64_t sub_10020A684(uint64_t a1, uint64_t a2)
{
  return sub_10012D080(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_10020A690(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  unsigned int v42;
  int v43;
  int v44;

  v3 = *(_DWORD *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    if ((v3 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_63;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_19;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311CF8 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10020A97C(v5, a2);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 2) != 0)
  {
LABEL_13:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311CF8 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F3688(v9, a2);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 84);
  }
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_102311CF8 + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F3C48(v13, a2);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_39;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
    v17 = *(_QWORD *)(qword_102311CF8 + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F4D1C(v17);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x10) == 0)
  {
LABEL_22:
    if ((v3 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_39:
  v21 = *(_QWORD *)(a1 + 40);
  if (!v21)
    v21 = *(_QWORD *)(qword_102311CF8 + 40);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F5824(v21);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x20) == 0)
  {
LABEL_23:
    if ((v3 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_45:
  v25 = *(_QWORD *)(a1 + 48);
  if (!v25)
    v25 = *(_QWORD *)(qword_102311CF8 + 48);
  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F5CE8(v25, a2);
  v28 = (int)v26;
  if (v26 >= 0x80)
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, v27);
  else
    v29 = 1;
  v4 = (v4 + v28 + v29 + 1);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x40) == 0)
  {
LABEL_24:
    if ((v3 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_51:
  v30 = *(_QWORD *)(a1 + 56);
  if (!v30)
    v30 = *(_QWORD *)(qword_102311CF8 + 56);
  v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F6154(v30);
  v33 = (int)v31;
  if (v31 >= 0x80)
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, v32);
  else
    v34 = 1;
  v4 = (v4 + v33 + v34 + 1);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x80) == 0)
  {
LABEL_25:
    if ((v3 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_63;
  }
LABEL_57:
  v35 = *(_QWORD *)(a1 + 64);
  if (!v35)
    v35 = *(_QWORD *)(qword_102311CF8 + 64);
  v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F6578(v35);
  v38 = (int)v36;
  if (v36 >= 0x80)
    v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, v37);
  else
    v39 = 1;
  v4 = (v4 + v38 + v39 + 1);
  if ((*(_DWORD *)(a1 + 84) & 0x100) != 0)
  {
LABEL_63:
    v40 = *(_QWORD *)(a1 + 72);
    if (!v40)
      v40 = *(_QWORD *)(qword_102311CF8 + 72);
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011F699C(v40);
    v43 = (int)v41;
    if (v41 >= 0x80)
      v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41, v42);
    else
      v44 = 1;
    v4 = (v4 + v43 + v44 + 1);
  }
LABEL_69:
  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

uint64_t sub_10020A97C(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  unsigned int v16;

  LOBYTE(v3) = *(_BYTE *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    result = 0;
    goto LABEL_44;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311D08 + 8);
  v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0)
      v8 += 9;
    if ((v7 & 4) != 0)
      v7 = v8 + 9;
    else
      v7 = v8;
  }
  *(_DWORD *)(v6 + 32) = v7;
  v4 = v7 + 2;
  v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102311D08 + 16);
    v10 = *(unsigned __int8 *)(v9 + 36);
    if (*(_BYTE *)(v9 + 36))
    {
      v11 = (v10 << 31 >> 31) & 9;
      if ((v10 & 2) != 0)
        v11 += 9;
      if ((v10 & 4) != 0)
        v10 = v11 + 9;
      else
        v10 = v11;
    }
    *(_DWORD *)(v9 + 32) = v10;
    v4 += v10 + 2;
    v3 = *(_DWORD *)(a1 + 52);
  }
LABEL_24:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_39;
    goto LABEL_33;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v12 & 0x80000000) != 0)
  {
    v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    v13 = 2;
  }
  v4 += v13;
  if ((v3 & 8) != 0)
  {
LABEL_33:
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      v3 = *(_DWORD *)(a1 + 52);
    }
    else
    {
      v15 = 2;
    }
    v4 += v15;
  }
LABEL_39:
  v16 = v4 + 9;
  if ((v3 & 0x10) == 0)
    v16 = v4;
  if ((v3 & 0x20) != 0)
    result = v16 + 9;
  else
    result = v16;
LABEL_44:
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10020AAE4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

_QWORD *sub_10020AB50(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a2[4];
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *(v3 - 1) = v2;
  v3[1] = 0;
  v3[2] = 0;
  return sub_10055A7B8(v3, a2[5], a2[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[6] - a2[5]) >> 3));
}

uint64_t sub_10020AB88(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 160));
  return result;
}

BOOL sub_10020ABCC(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_10020ABE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020AC04(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020AC24(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020AC44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020AC68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD790;
  a2[1] = v2;
  return result;
}

uint64_t sub_10020AC80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021CD810;
  a2[1] = v2;
  return result;
}

uint64_t sub_10020ACAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

int32x2_t sub_10020ACD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int32x2_t result;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 8))
  {
    v2 = *(_QWORD *)(a1 + 40);
    *(int32x4_t *)(v1 + 36) = vaddq_s32(*(int32x4_t *)(v1 + 36), vuzp1q_s32(*(int32x4_t *)v2, vrev64q_s32(*(int32x4_t *)v2)));
    result = vadd_s32(*(int32x2_t *)(v1 + 52), *(int32x2_t *)(v2 + 16));
    *(int32x2_t *)(v1 + 52) = result;
  }
  return result;
}

void sub_10020AD0C(uint64_t a1)
{
  sub_100019970(*(_QWORD *)(a1 + 32));
}

float sub_10020AD14(uint64_t a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 596) += *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v1 + 568) += *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v1 + 572) += *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v1 + 584) += *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v1 + 592) += *(_DWORD *)(a1 + 56);
  *(_DWORD *)(v1 + 588) += *(_DWORD *)(a1 + 60);
  *(float *)(v1 + 600) = *(float *)(a1 + 64) + *(float *)(v1 + 600);
  result = *(float *)(a1 + 68) + *(float *)(v1 + 604);
  *(float *)(v1 + 604) = result;
  *(_DWORD *)(v1 + 576) += *(_DWORD *)(a1 + 72);
  *(_DWORD *)(v1 + 580) += *(_DWORD *)(a1 + 76);
  *(_DWORD *)(v1 + 608) += *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v1 + 612) += *(_DWORD *)(a1 + 84);
  *(_DWORD *)(v1 + 624) += *(_DWORD *)(a1 + 88);
  *(_DWORD *)(v1 + 628) += *(_DWORD *)(a1 + 92);
  return result;
}

uint64_t sub_10020ADFC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1368);
  if (!v2)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
}

void sub_10020AE34(uint64_t a1, int a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  double v7;
  NSObject *v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_1001FCBB4();
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v6 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (v5 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    v19 = a2;
    v20 = 2050;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController,configureInitializeAndStartRavenSupervisor,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v9 = (v5 - *(double *)(a1 + 40)) * 1000.0;
    v15[0] = 67240448;
    v15[1] = a2;
    v16 = 2050;
    v17 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "CLGLS,CLRavenController,configureInitializeAndStartRavenSupervisor,success,%{public}d,time,%{public}.1lfms", v15, 18);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)(v4 + 4663) = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v8 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "CLGLS,Raven,Could not configure Raven supervisor,estimator disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v15[0]) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 17, "CLGLS,Raven,Could not configure Raven supervisor,estimator disabled", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10020B174(uint64_t a1, uint64_t a2)
{
  sub_1000A78EC(*(_QWORD **)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48), *(const __CFArray **)(a1 + 56), *(_DWORD *)(a1 + 64));
}

uint64_t sub_10020B188(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020B1A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_10020B1C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "ingestTAEvent:", *(_QWORD *)(a1 + 40));
}

id sub_10020B1DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "ingestTAEvent:", *(_QWORD *)(a1 + 40));
}

unint64_t sub_10020B1F4(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  __int128 **v16;
  __int128 *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  __n128 v34;
  uint64_t v35;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 85 * (a4 - a2) - 0x5555555555555555 * ((a5 - *a4) >> 4) + 0x5555555555555555 * ((a3 - *a2) >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = v8 + 8 * (v7 / 0x55);
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 48 * (v7 % 0x55);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 85 * (((uint64_t)a2 - v9) >> 3)
        - 0x5555555555555555 * ((a3 - *a2) >> 4)
        + 0x5555555555555555 * ((uint64_t)(v10 - *(_QWORD *)v9) >> 4);
  v34.n128_u64[0] = v8 + 8 * (v7 / 0x55);
  v34.n128_u64[1] = v10;
  sub_100AAF210(&v34, v11);
  if (v6 >= 1)
  {
    v12 = v34;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100AAF210(&v34, v6);
      sub_100AAF2AC((char **)v9, (char *)v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], (char *)v34.n128_u64[0], v34.n128_i64[1], &v34);
      v18 = v35;
      while (v10 != v18)
      {
        v19 = *(void **)(v10 + 24);
        if (v19)
        {
          *(_QWORD *)(v10 + 32) = v19;
          operator delete(v19);
        }
        v10 += 48;
        if (v10 - *(_QWORD *)v9 == 4080)
        {
          v20 = *(_QWORD *)(v9 + 8);
          v9 += 8;
          v10 = v20;
        }
      }
      v21 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v21;
      while ((sub_1004A527C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100AAF210(&v34, v6);
      v13 = v34;
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (__int128 **)(v15 + 8 * (v14 / 0x55));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[3 * (v14 % 0x55)];
      v34 = v12;
      sub_100AAF4C4((__int128 **)v13.n128_u64[0], (__int128 *)v13.n128_u64[1], v16, v17, (uint64_t)&v34);
      v22 = v34.n128_u64[1];
      v23 = a1[1];
      if (a1[2] == v23)
      {
        v25 = 0;
      }
      else
      {
        v24 = a1[5] + a1[4];
        v25 = *(_QWORD *)(v23 + 8 * (v24 / 0x55)) + 48 * (v24 % 0x55);
      }
      if (v25 != v34.n128_u64[1])
      {
        v26 = (_QWORD *)v34.n128_u64[0];
        do
        {
          v27 = *(void **)(v22 + 24);
          if (v27)
          {
            *(_QWORD *)(v22 + 32) = v27;
            operator delete(v27);
          }
          v22 += 48;
          if (v22 - *v26 == 4080)
          {
            v28 = v26[1];
            ++v26;
            v22 = v28;
          }
        }
        while (v22 != v25);
      }
      a1[5] -= v6;
      while ((sub_100AAF19C(a1, 1) & 1) != 0)
        ;
    }
  }
  v29 = a1[4];
  v30 = a1[1];
  v31 = (_QWORD *)(v30 + 8 * (v29 / 0x55));
  if (a1[2] == v30)
    v32 = 0;
  else
    v32 = *v31 + 48 * (v29 % 0x55);
  v34.n128_u64[0] = (unint64_t)v31;
  v34.n128_u64[1] = v32;
  sub_100AAF210(&v34, v11);
  return v34.n128_u64[0];
}

void sub_10020B514(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_10020B5B4(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_10020B5B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100067A88(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

BOOL sub_10020B608(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 8 * (*(_QWORD *)(a1 + 56) >> 6));
  if (*(_QWORD *)(a1 + 40) == v4)
    v6 = 0;
  else
    v6 = *v5 + ((*(_QWORD *)(a1 + 56) & 0x3FLL) << 6);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (uint64_t *)(v9 + 8 * (v8 >> 6));
  if (*(_QWORD *)(a1 + 40) == v9)
    v11 = 0;
  else
    v11 = *v10 + ((v8 & 0x3F) << 6);
  v12 = a3[3];
  if (v11 != v12)
  {
    v13 = *v10;
    v14 = 1.79769313e308;
    v15 = v11;
    v16 = v10;
    while (1)
    {
      v17 = v15;
      if (v15 == v13)
        v17 = *(v16 - 1) + 4096;
      v18 = vabdd_f64(*(double *)(v17 - 56), a4);
      if (v18 < v14 && v18 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v15;
        v13 = *v16;
        v19 = v15;
        if (v15 == *v16)
          v19 = *(v16 - 1) + 4096;
        v14 = v18;
        if (*(double *)(v19 - 56) == a4)
          break;
      }
      if (v15 == v13)
      {
        v20 = *--v16;
        v13 = v20;
        v15 = v20 + 4096;
      }
      v15 -= 64;
      v12 = a3[3];
      if (v15 == v12)
        return v12 != *(_QWORD *)(a2 + 24);
    }
    v12 = a3[3];
  }
  return v12 != *(_QWORD *)(a2 + 24);
}

uint64_t sub_10020B72C(uint64_t a1, float *a2, float *a3, __n128 a4, __n128 a5)
{
  double v5;
  float v6;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  double v30;
  int v31;
  double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v5 = a5.n128_f64[0];
  v6 = a4.n128_f32[0];
  v10 = *(_QWORD *)(a1 + 488);
  if (v10)
    (*(void (**)(uint64_t, float *, float *, __n128, __n128))(*(_QWORD *)v10 + 208))(v10, a2, a3, a4, a5);
  if (fabsf(*a2) > 75.0 || fabsf(a2[1]) > 75.0 || fabsf(a2[2]) > 75.0)
    return 0;
  result = 0;
  if (*a3 <= 0.01 && a3[1] <= 0.01 && a3[2] <= 0.01)
  {
    v12 = *(_QWORD *)(a1 + 504);
    if (*(_QWORD *)(a1 + 496) != v12
      && vabdd_f64(*(double *)(v12 - 16), v5) < 30.0
      && vabds_f32(*(float *)(v12 - 32), v6) < 2.0)
    {
      return 0;
    }
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v52 = 0;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = v5;
    *(float *)&v33 = v6;
    v31 = 3;
    (*(void (**)(uint64_t, int *, double *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v31, &v32, 1, 0xFFFFFFFFLL, 0);
    v14 = *a2;
    v13 = *((_DWORD *)a2 + 1);
    v15 = *((_DWORD *)a2 + 2);
    v16 = *(_QWORD *)(a1 + 504);
    v17 = *(_QWORD *)(a1 + 512);
    if (v16 >= v17)
    {
      v19 = *(_QWORD *)(a1 + 496);
      v20 = (uint64_t)(v16 - v19) >> 5;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 59)
        sub_100259694();
      v22 = v17 - v19;
      if (v22 >> 4 > v21)
        v21 = v22 >> 4;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
        v23 = 0x7FFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
        v23 = (unint64_t)sub_1018BFA78(v23);
      else
        v24 = 0;
      v25 = v23 + 32 * v20;
      v26 = v23 + 32 * v24;
      *(float *)v25 = v6;
      *(float *)(v25 + 4) = v14;
      *(_DWORD *)(v25 + 8) = v13;
      *(_DWORD *)(v25 + 12) = v15;
      *(double *)(v25 + 16) = v5;
      *(_QWORD *)(v25 + 24) = 0;
      v18 = v25 + 32;
      v28 = *(char **)(a1 + 496);
      v27 = *(char **)(a1 + 504);
      if (v27 != v28)
      {
        do
        {
          v29 = *((_OWORD *)v27 - 1);
          *(_OWORD *)(v25 - 32) = *((_OWORD *)v27 - 2);
          *(_OWORD *)(v25 - 16) = v29;
          v25 -= 32;
          v27 -= 32;
        }
        while (v27 != v28);
        v27 = *(char **)(a1 + 496);
      }
      *(_QWORD *)(a1 + 496) = v25;
      *(_QWORD *)(a1 + 504) = v18;
      *(_QWORD *)(a1 + 512) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(float *)v16 = v6;
      *(float *)(v16 + 4) = v14;
      *(_DWORD *)(v16 + 8) = v13;
      *(_DWORD *)(v16 + 12) = v15;
      *(double *)(v16 + 16) = v5;
      v18 = v16 + 32;
      *(_QWORD *)(v16 + 24) = 0;
    }
    *(_QWORD *)(a1 + 504) = v18;
    objc_msgSend(*(id *)(a1 + 264), "nextFireDelay");
    if (v30 == 1.79769313e308)
      objc_msgSend(*(id *)(a1 + 264), "setNextFireDelay:", *(double *)(a1 + 408));
    return 1;
  }
  return result;
}

uint64_t sub_10020B9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128), a4, a4 + 160);
  if ((result & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle location notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Pedometer Assistance: failed to handle location notification", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return sub_10021FA34(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10020BBB4(uint64_t a1, uint64_t a2, char *a3)
{
  int v5;
  uint64_t v6;
  int v8;

  sub_100010F30(*(_QWORD *)(a1 + 8), a2, a3);
  sub_100172494(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2);
  v8 = v5;
  if (sub_100214D00())
  {
    if (v8 == 1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v6 + 144) && !*(_BYTE *)(v6 + 145))
        sub_10021FA34(v6, v6 + 96);
    }
  }
  return 1;
}

void sub_10020BC40(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a2 + 96) = v2;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 224);
  v3 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a2 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a2 + 64) = v4;
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[6];
  *(_OWORD *)(a2 + 208) = a1[5];
  *(_OWORD *)(a2 + 224) = v7;
  *(_OWORD *)(a2 + 176) = v6;
  *(_OWORD *)(a2 + 192) = v5;
  v9 = a1[1];
  v8 = a1[2];
  *(_OWORD *)(a2 + 128) = *a1;
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v8;
  if (*(_BYTE *)(a2 + 8))
    sub_1000786F8(a2);
  else
    *(_BYTE *)(a2 + 8) = 1;
}

void sub_10020BC9C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  char *v21;
  int v22;
  int v23;
  _DWORD v24[4];
  uint8_t buf[8];
  _BYTE v26[10];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
    v23 = *(unsigned __int8 *)(a1 + 186);
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48));
    v4 = *(unsigned __int8 *)(a1 + 188);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    v6 = *(unsigned __int8 *)(a1 + 256);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48));
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 216))(*(_QWORD *)(a1 + 48));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 80))(*(_QWORD *)(a1 + 168));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 224))(*(_QWORD *)(a1 + 48));
    *(_DWORD *)buf = 68291842;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v27 = 1026;
    v28 = v22;
    v29 = 1026;
    v30 = v23;
    v31 = 1026;
    v32 = v3;
    v33 = 1026;
    v34 = v4;
    v35 = 1026;
    v36 = v5;
    v37 = 1026;
    v38 = v6;
    v39 = 1026;
    v40 = v7;
    v41 = 1026;
    v42 = v8;
    v43 = 1026;
    v44 = v9;
    v45 = 1026;
    v46 = v10;
    v47 = 1026;
    v48 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"updateHarvestingAllowed\", \"isHarvestingEnabled\":%{public}hhd, \"fHarvestingAllowed\":%{public}hhd, \"isLocationServicesEnabled\":%{public}hhd, \"fThermalLevelAcceptableLowCpu\":%{public}hhd, \"isInPrivateMode\":%{public}hhd, \"fBatterySaverModeEnabled\":%{public}hhd, \"hasAuthorizedClients\":%{public}hhd, \"isGpsControllerSimulationEnabled\":%{public}hhd, \"isHarvestingAllowedForLocationSimulation\":%{public}hhd, \"isGpsControllerSimulationEnabled\":%{public}hhd, \"isLocationControllerSimulationEnabled\":%{public}hhd}", buf, 0x54u);
  }
  sub_1001E4804(buf);
  LOBYTE(v24[0]) = 0;
  v12 = sub_1001E4874(*(uint64_t *)buf, "IsHarvestingForced", (BOOL *)v24);
  if (LOBYTE(v24[0]))
    v13 = v12;
  else
    v13 = 0;
  v14 = *(std::__shared_weak_count **)v26;
  if (*(_QWORD *)v26)
  {
    v15 = (unint64_t *)(*(_QWORD *)v26 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  v17 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Harvesting is forced to be allowed,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v24[0] = 67240192;
    v24[1] = v13;
    v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Harvesting is forced to be allowed,%{public}d", v24, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLHarvestController::updateHarvestingAllowed()", "%s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  if (v13)
  {
    *(_BYTE *)(a1 + 186) = 1;
    return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: disabled\"}";
    goto LABEL_68;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48)) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: location services disabled\"}";
    goto LABEL_68;
  }
  if (!*(_BYTE *)(a1 + 188))
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: thermal level unacceptable\"}";
    goto LABEL_68;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: in private mode\"}";
    goto LABEL_68;
  }
  if (*(_BYTE *)(a1 + 256))
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: battery saver mode enabled\"}";
    goto LABEL_68;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48)) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 186))
      return;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021459F8);
    v18 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      goto LABEL_69;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v26 = 2082;
    *(_QWORD *)&v26[2] = "";
    v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: no authorized clients\"}";
    goto LABEL_68;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 216))(*(_QWORD *)(a1 + 48))
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 186))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v18 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_69;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v26 = 2082;
      *(_QWORD *)&v26[2] = "";
      v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: gps simulation enabled\"}";
      goto LABEL_68;
    }
  }
  else
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 80))(*(_QWORD *)(a1 + 168))
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) & 1) != 0)
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 224))(*(_QWORD *)(a1 + 48))
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) & 1) != 0)
      {
        if (!*(_BYTE *)(a1 + 186))
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_1021459F8);
          v20 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v26 = 2082;
            *(_QWORD *)&v26[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvesting now allowed\"}", buf, 0x12u);
          }
          *(_BYTE *)(a1 + 186) = 1;
        }
        return;
      }
      if (!*(_BYTE *)(a1 + 186))
        return;
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v18 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_69;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v26 = 2082;
      *(_QWORD *)&v26[2] = "";
      v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: location simulation enabled\"}";
LABEL_68:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v19, buf, 0x12u);
LABEL_69:
      *(_BYTE *)(a1 + 186) = 0;
      return;
    }
    if (*(_BYTE *)(a1 + 186))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v18 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_69;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v26 = 2082;
      *(_QWORD *)&v26[2] = "";
      v19 = "{\"msg%{public}.0s\":\"Harvesting not allowed: gps simulation enabled (gps monitor)\"}";
      goto LABEL_68;
    }
  }
}

void sub_10020C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10020C634(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

void sub_10020C63C(uint64_t a1, double *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSDate *v9;
  NSObject *v10;
  NSObject *v11;
  double v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _DWORD v33[3];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  uint8_t buf[4];
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  int v127;

  sub_100197040();
  if (sub_100195F08())
  {
    sub_1010CFE98((double *)(a1 + 144), (uint64_t)a2);
    if (sub_100D7B998(a1 + 912))
    {
      v32 = *(_QWORD *)(a1 + 648);
      v4 = *(_OWORD *)(a1 + 616);
      v29 = *(_OWORD *)(a1 + 600);
      v30 = v4;
      v31 = *(_OWORD *)(a1 + 632);
      v5 = *(_OWORD *)(a1 + 552);
      v25 = *(_OWORD *)(a1 + 536);
      v26 = v5;
      v6 = *(_OWORD *)(a1 + 584);
      v27 = *(_OWORD *)(a1 + 568);
      v28 = v6;
      v7 = *(_OWORD *)(a1 + 488);
      v21 = *(int8x16_t *)(a1 + 472);
      v22 = v7;
      v8 = *(_OWORD *)(a1 + 520);
      v23 = *(_OWORD *)(a1 + 504);
      v24 = v8;
      if (BYTE8(v22))
      {
        v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *a2);
        objc_msgSend(*(id *)(a1 + 1176), "writeToHealthRunningSpeed:startDate:endDate:", v9, v9, *(double *)&v22);
      }
      else
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_102198D98);
        v10 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[PaceController] Not writing to HK, invalid running speed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_102198D98);
          LOWORD(v33[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[PaceController] Not writing to HK, invalid running speed", v33, 2);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
      }
      if (*(_BYTE *)(a1 + 1184))
      {
        sub_1006B3280(&v21, (uint64_t)buf);
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_102198DB8);
        if (qword_1023118B0)
          operator new();
        PB::Base::~Base((PB::Base *)buf);
      }
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_102198D98);
      v11 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        HIDWORD(v20) = HIBYTE(v32);
        *(_DWORD *)buf = 134223872;
        v81 = v21.i64[0];
        v82 = 2048;
        v83 = v21.i64[1];
        v84 = 2048;
        v85 = v22;
        v86 = 2048;
        v87 = *((_QWORD *)&v24 + 1);
        v88 = 2048;
        v89 = *((_QWORD *)&v25 + 1);
        v90 = 2048;
        v91 = v26;
        v92 = 2048;
        v93 = *((_QWORD *)&v26 + 1);
        v94 = 2048;
        v95 = v23;
        v96 = 2048;
        v97 = *((_QWORD *)&v23 + 1);
        v98 = 2048;
        v99 = v27;
        v100 = 2048;
        v101 = *((_QWORD *)&v27 + 1);
        v102 = 1026;
        v103 = BYTE1(v24);
        v104 = 1026;
        v105 = v24;
        v106 = 2048;
        v107 = v28;
        v108 = 2048;
        v109 = *((_QWORD *)&v28 + 1);
        v110 = 2048;
        v111 = *((_QWORD *)&v29 + 1);
        v112 = 2048;
        v113 = v29;
        v114 = 1026;
        v115 = BYTE8(v22);
        v116 = 2048;
        v117 = v25;
        v118 = 2048;
        v119 = v30;
        v120 = 2048;
        v121 = *((_QWORD *)&v30 + 1);
        v122 = 2048;
        v123 = v31;
        v124 = 2048;
        v125 = *((_QWORD *)&v31 + 1);
        v126 = 1026;
        v127 = HIBYTE(v32);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF],startTime,%.2f,endTime,%.2f,runningSpeed,%.2f,deltaPedDist,%.2f,deltaOdoDist,%.2f,deltaPedTime,%.2f,deltaOdoTime,%.2f,pedSpeed,%.2f,odoSpeed,%.2f,algDelay,%.2f,biasFactor,%.2f,isValidPedometerSpeed,%{public}d,isValidOdometerSpeed,%{public}d,stateCovariance,%.2f,processNoise,%.2f,epsPed,%.2f,epsOdo,%.2f,isValidRunningSpeed,%{public}d,deltaCalPedDist,%.2f,measNoiseOdo,%.3f,measNoisePed,%.3f,kalmanGainOdo,%.2f,kalmanGainPed,%.2f,isTrackRunOdometer,%{public}d", buf, 0xE2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_102198D98);
        v33[0] = 134223872;
        *(_QWORD *)&v33[1] = v21.i64[0];
        v34 = 2048;
        v35 = v21.i64[1];
        v36 = 2048;
        v37 = v22;
        v38 = 2048;
        v39 = *((_QWORD *)&v24 + 1);
        v40 = 2048;
        v41 = *((_QWORD *)&v25 + 1);
        v42 = 2048;
        v43 = v26;
        v44 = 2048;
        v45 = *((_QWORD *)&v26 + 1);
        v46 = 2048;
        v47 = v23;
        v48 = 2048;
        v49 = *((_QWORD *)&v23 + 1);
        v50 = 2048;
        v51 = v27;
        v52 = 2048;
        v53 = *((_QWORD *)&v27 + 1);
        v54 = 1026;
        v55 = BYTE1(v24);
        v56 = 1026;
        v57 = v24;
        v58 = 2048;
        v59 = v28;
        v60 = 2048;
        v61 = *((_QWORD *)&v28 + 1);
        v62 = 2048;
        v63 = *((_QWORD *)&v29 + 1);
        v64 = 2048;
        v65 = v29;
        v66 = 1026;
        v67 = BYTE8(v22);
        v68 = 2048;
        v69 = v25;
        v70 = 2048;
        v71 = v30;
        v72 = 2048;
        v73 = *((_QWORD *)&v30 + 1);
        v74 = 2048;
        v75 = v31;
        v76 = 2048;
        v77 = *((_QWORD *)&v31 + 1);
        v78 = 1026;
        v79 = HIBYTE(v32);
        LODWORD(v20) = 226;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "[RunningSpeedKF],startTime,%.2f,endTime,%.2f,runningSpeed,%.2f,deltaPedDist,%.2f,deltaOdoDist,%.2f,deltaPedTime,%.2f,deltaOdoTime,%.2f,pedSpeed,%.2f,odoSpeed,%.2f,algDelay,%.2f,biasFactor,%.2f,isValidPedometerSpeed,%{public}d,isValidOdometerSpeed,%{public}d,stateCovariance,%.2f,processNoise,%.2f,epsPed,%.2f,epsOdo,%.2f,isValidRunningSpeed,%{public}d,deltaCalPedDist,%.2f,measNoiseOdo,%.3f,measNoisePed,%.3f,kalmanGainOdo,%.2f,kalmanGainPed,%.2f,isTrackRunOdometer,%{public}d", v33, v20);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
  }
  v12 = *a2;
  v13 = *(_DWORD *)(a1 + 1168);
  v14 = sub_1002445A8((uint64_t)(a2 + 1));
  sub_10020CCE8((_QWORD **)(a1 + 8), (uint64_t)a2, v13, v14, v12);
  *(_QWORD *)(a1 + 1144) = v15;
}

void sub_10020CCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  PB::Base::~Base((PB::Base *)&a65);
  _Unwind_Resume(a1);
}

void sub_10020CCE8(_QWORD **a1, uint64_t a2, int a3, unsigned int a4, double a5)
{
  double v9;
  double v10;
  int v11;
  double v12;
  BOOL v13;
  char v15;
  BOOL v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _BOOL4 v44;
  double v45;
  NSObject *v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  double v50;
  double v51;
  float v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  double v58;
  double v59;
  float v60;
  _QWORD *v61;
  _QWORD *v62;
  const char *v63;
  uint8_t *v64;
  double v65;
  const char *v66;
  double v67;
  double v68;
  double v69;
  int v70;
  const char *v71;
  __int16 v72;
  double v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  double v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  double v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  _QWORD *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  _QWORD *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  double v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  const char *v97;
  __int16 v98;
  const char *v99;
  __int16 v100;
  _QWORD *v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  double v105;
  __int16 v106;
  const char *v107;
  __int16 v108;
  double v109;
  __int16 v110;
  const char *v111;
  __int16 v112;
  double v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  double v117;
  __int16 v118;
  const char *v119;
  __int16 v120;
  double v121;
  __int16 v122;
  const char *v123;
  __int16 v124;
  double v125;
  __int16 v126;
  const char *v127;
  __int16 v128;
  double v129;
  __int16 v130;
  const char *v131;
  __int16 v132;
  _QWORD *v133;
  uint8_t buf[4];
  const char *v135;
  __int16 v136;
  double v137;
  __int16 v138;
  const char *v139;
  __int16 v140;
  double v141;
  __int16 v142;
  const char *v143;
  __int16 v144;
  double v145;
  __int16 v146;
  const char *v147;
  __int16 v148;
  _QWORD *v149;
  __int16 v150;
  const char *v151;
  __int16 v152;
  _QWORD *v153;
  __int16 v154;
  const char *v155;
  __int16 v156;
  double v157;
  __int16 v158;
  const char *v159;
  __int16 v160;
  const char *v161;
  __int16 v162;
  const char *v163;
  __int16 v164;
  _QWORD *v165;
  __int16 v166;
  const char *v167;
  __int16 v168;
  double v169;
  __int16 v170;
  const char *v171;
  __int16 v172;
  double v173;
  __int16 v174;
  const char *v175;
  __int16 v176;
  double v177;
  __int16 v178;
  const char *v179;
  __int16 v180;
  double v181;
  __int16 v182;
  const char *v183;
  __int16 v184;
  double v185;
  __int16 v186;
  const char *v187;
  __int16 v188;
  double v189;
  __int16 v190;
  const char *v191;
  __int16 v192;
  double v193;
  __int16 v194;
  const char *v195;
  __int16 v196;
  _QWORD *v197;

  v9 = *(double *)(a2 + 80);
  v10 = *(double *)(a2 + 208);
  if (!*((_BYTE *)a1 + 128))
  {
    a1[6] = 0;
    a1[7] = 0;
    *((_DWORD *)a1 + 30) = 1;
    *((double *)a1 + 2) = a5 + 5.0 + 15.0;
    *((double *)a1 + 3) = a5;
    *((double *)a1 + 4) = a5;
    *((double *)a1 + 5) = a5 + -2.56;
    *((_BYTE *)a1 + 128) = 1;
  }
  if (v9 == 0.0)
  {
    v11 = 0;
    *((_DWORD *)a1 + 30) = 0;
  }
  else
  {
    v11 = *((_DWORD *)a1 + 30);
    if (v11 > 2)
    {
      if (a5 - *((double *)a1 + 8) <= 7.68)
      {
        v11 = 1;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  if (a3 < 1)
  {
LABEL_9:
    v11 = 0;
    *((_DWORD *)a1 + 30) = 0;
  }
LABEL_10:
  v12 = *((double *)a1 + 7);
  if (v10 == 0.0 || v12 == 0.0)
  {
    v13 = v10 != 0.0;
    if (v12 != 0.0)
      v13 = 1;
  }
  else
  {
    v13 = vabdd_f64(1.0 / v10, 1.0 / v12) > 1.0 / v12 * 0.15;
  }
  if (a3 < 1)
  {
    v16 = !v13;
    if (a3 == -1)
      v16 = 0;
    if (!v16)
    {
      *((_DWORD *)a1 + 30) = 1;
      *((double *)a1 + 2) = a5 + 5.0 + 15.0;
      *((double *)a1 + 3) = a5;
    }
    *((double *)a1 + 4) = a5;
  }
  else
  {
    v15 = v9 > 0.0 && v11 == 0 || v13;
    if ((v15 & 1) != 0)
    {
      *((_DWORD *)a1 + 30) = 1;
      *((double *)a1 + 2) = a5 + 5.0 + 15.0;
      *((double *)a1 + 3) = a5;
    }
  }
  sub_1002309A8((uint64_t)a1, a5, v9);
  v68 = -1.0;
  v69 = -1.0;
  v17 = sub_1002184B0((uint64_t)a1);
  if (a3 >= 1 && v9 > 0.0)
  {
    v18 = v17;
    if (v17 > 0.0)
    {
      v19 = a5 - sub_100AD1770(v9);
      if (v19 >= v18)
        v20 = v19;
      else
        v20 = v18;
      v21 = sub_100218518(a1, a5);
      if (v21 - v20 <= 15.0)
      {
        v26 = 2;
LABEL_61:
        *((_DWORD *)a1 + 30) = v26;
        v37 = v26;
        goto LABEL_62;
      }
      v22 = sub_100AD17E0((uint64_t)a1, *a1, v20, v21);
      v69 = v22;
      if (v20 <= v21 + -20.0)
        v20 = v21 + -20.0;
      v23 = sub_100AD17E0((uint64_t)a1, *a1, v20, v21);
      v67 = v20;
      v68 = v23;
      v24 = *((double *)a1 + 5);
      v25 = *((double *)a1 + 1);
      if (*((int *)a1 + 30) >= 3)
        v22 = *((double *)a1 + 11);
      else
        *((double *)a1 + 14) = v23;
      v27 = a5 - v24;
      *((_DWORD *)a1 + 30) = 3;
      v28 = 1.0;
      v29 = 1.0;
      if (v25 != 0.0)
        v29 = 1.0 - exp(-v27 / v25);
      *((double *)a1 + 10) = v29;
      *((double *)a1 + 11) = v22;
      *((_DWORD *)a1 + 18) = 3;
      v30 = fmax(v25, 15.0);
      v31 = a1[14];
      if (v30 != 0.0)
        v28 = 1.0 - exp(-v27 / v30);
      *((double *)a1 + 13) = v28;
      a1[14] = v31;
      *((_DWORD *)a1 + 24) = 3;
      sub_1000DC950((uint64_t)(a1 + 9), &v69);
      sub_1000DC950((uint64_t)(a1 + 12), &v68);
      v32 = *((double *)a1 + 11);
      v33 = *((double *)a1 + 14);
      if (v32 == 0.0 || v33 == 0.0)
      {
        if (v32 == 0.0 && v33 == 0.0)
          goto LABEL_57;
      }
      else if (vabdd_f64(1.0 / v33, 1.0 / v32) <= 1.0 / v32 * 0.15)
      {
LABEL_57:
        *((double *)a1 + 8) = v21;
        goto LABEL_58;
      }
      v34 = vabdd_f64(v32, v9);
      if (vabdd_f64(v33, v9) < v34 && vabdd_f64(v68, v9) < v34)
      {
        v35 = *((double *)a1 + 1);
        v36 = 1.0;
        if (v35 != 0.0)
          v36 = 1.0 - exp(-v27 / v35);
        *((double *)a1 + 10) = v36;
        *((double *)a1 + 11) = v33;
        *((_DWORD *)a1 + 18) = 3;
        *((_DWORD *)a1 + 30) = 4;
        *((double *)a1 + 2) = a5;
        *((double *)a1 + 3) = v67;
      }
      goto LABEL_57;
    }
  }
LABEL_58:
  v37 = *((_DWORD *)a1 + 30);
  if (v37 >= 3)
  {
    v26 = 0;
    v38 = *((double *)a1 + 11);
    if (v38 > 1.6777 || v38 < 0.0909)
      goto LABEL_61;
  }
LABEL_62:
  *((_DWORD *)a1 + 31) = 0;
  v39 = v9;
  if (v9 > 0.0)
  {
    v39 = v9;
    if (a3 == 2)
    {
      v39 = v9;
      if (v37 >= 3)
      {
        *((_DWORD *)a1 + 31) = 1;
        v39 = *((double *)a1 + 11);
      }
    }
  }
  v40 = sub_100218448((uint64_t)a1);
  v41 = v40;
  if (a5 + -120.0 >= v40)
    v42 = a5 + -120.0;
  else
    v42 = v40;
  v43 = sub_100218518(a1, a5);
  v44 = 0;
  v45 = 0.0;
  if (a3 == 2 && v41 > 0.0 && v43 - v42 > 15.0)
  {
    v45 = sub_100AD17E0((uint64_t)a1, *a1, v42, v43);
    v44 = v45 < 1.6777 && v45 > 0.0909;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_102168E08);
  v46 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v47 = *((_DWORD *)a1 + 30);
    if (v47 < 3)
    {
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v48 = a1[11];
      v49 = a1[14];
    }
    v50 = (float)v47;
    v51 = (float)*((int *)a1 + 31);
    v52 = v45;
    v54 = a1[3];
    v53 = a1[4];
    *(_DWORD *)buf = 136323074;
    v135 = "PaceFusion_Epoch_Time";
    v136 = 2048;
    v137 = a5;
    v138 = 2080;
    v139 = "PaceFusion_Epoch_PedometerPace";
    v140 = 2048;
    v141 = v9;
    v142 = 2080;
    v143 = "PaceFusion_Epoch_PedometerPaceUncalibrated";
    v144 = 2048;
    v145 = v10;
    v146 = 2080;
    v147 = "PaceFusion_Epoch_SmoothOdometerPace";
    v148 = 2048;
    v149 = v48;
    v150 = 2080;
    v151 = "PaceFusion_Epoch_SmoothShortOdometerPace";
    v152 = 2048;
    v153 = v49;
    v154 = 2080;
    v155 = "PaceFusion_Epoch_LongMeanOdometerPace";
    v156 = 2048;
    v157 = v69;
    v158 = 2080;
    v159 = "PaceFusion_Epoch_ShortMeanOdometerPace";
    v160 = 2048;
    v161 = *(const char **)&v68;
    v162 = 2080;
    v163 = "PaceFusion_Epoch_PaceResetTime";
    v164 = 2048;
    v165 = v54;
    v166 = 2080;
    v167 = "PaceFusion_Epoch_FinalFusedPace";
    v168 = 2048;
    v169 = v39;
    v170 = 2080;
    v171 = "PaceFusion_Epoch_OdometerPaceQuality";
    v172 = 2048;
    v173 = (float)a3;
    v174 = 2080;
    v175 = "PaceFusion_Epoch_MeanPaceState";
    v176 = 2048;
    v177 = v50;
    v178 = 2080;
    v179 = "PaceFusion_Epoch_PaceFusionOutput";
    v180 = 2048;
    v181 = v51;
    v182 = 2080;
    v183 = "PaceFusion_Epoch_DoRequestPureGpsOdometerPace";
    v184 = 2048;
    v185 = (double)a4;
    v186 = 2080;
    v187 = "PaceFusion_Epoch_IsPureGpsOdometerPaceAvailable";
    v188 = 2048;
    v189 = (double)v44;
    v190 = 2080;
    v191 = "PaceFusion_Epoch_PureGpsOdometerPace";
    v192 = 2048;
    v193 = v52;
    v194 = 2080;
    v195 = "PaceFusion_Epoch_PureGpsOdometerPaceResetTime";
    v196 = 2048;
    v197 = v53;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", buf, 0x142u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102168E08);
    v55 = *((_DWORD *)a1 + 30);
    if (v55 < 3)
    {
      v56 = 0;
      v57 = 0;
    }
    else
    {
      v56 = a1[11];
      v57 = a1[14];
    }
    v58 = (float)v55;
    v59 = (float)*((int *)a1 + 31);
    v60 = v45;
    v62 = a1[3];
    v61 = a1[4];
    v70 = 136323074;
    v71 = "PaceFusion_Epoch_Time";
    v72 = 2048;
    v73 = a5;
    v74 = 2080;
    v75 = "PaceFusion_Epoch_PedometerPace";
    v76 = 2048;
    v77 = v9;
    v78 = 2080;
    v79 = "PaceFusion_Epoch_PedometerPaceUncalibrated";
    v80 = 2048;
    v81 = v10;
    v82 = 2080;
    v83 = "PaceFusion_Epoch_SmoothOdometerPace";
    v84 = 2048;
    v85 = v56;
    v86 = 2080;
    v87 = "PaceFusion_Epoch_SmoothShortOdometerPace";
    v88 = 2048;
    v89 = v57;
    v90 = 2080;
    v91 = "PaceFusion_Epoch_LongMeanOdometerPace";
    v92 = 2048;
    v93 = v69;
    v94 = 2080;
    v95 = "PaceFusion_Epoch_ShortMeanOdometerPace";
    v96 = 2048;
    v97 = *(const char **)&v68;
    v98 = 2080;
    v99 = "PaceFusion_Epoch_PaceResetTime";
    v100 = 2048;
    v101 = v62;
    v102 = 2080;
    v103 = "PaceFusion_Epoch_FinalFusedPace";
    v104 = 2048;
    v105 = v39;
    v106 = 2080;
    v107 = "PaceFusion_Epoch_OdometerPaceQuality";
    v108 = 2048;
    v109 = (float)a3;
    v110 = 2080;
    v111 = "PaceFusion_Epoch_MeanPaceState";
    v112 = 2048;
    v113 = v58;
    v114 = 2080;
    v115 = "PaceFusion_Epoch_PaceFusionOutput";
    v116 = 2048;
    v117 = v59;
    v118 = 2080;
    v119 = "PaceFusion_Epoch_DoRequestPureGpsOdometerPace";
    v120 = 2048;
    v121 = (double)a4;
    v122 = 2080;
    v123 = "PaceFusion_Epoch_IsPureGpsOdometerPaceAvailable";
    v124 = 2048;
    v125 = (double)v44;
    v126 = 2080;
    v127 = "PaceFusion_Epoch_PureGpsOdometerPace";
    v128 = 2048;
    v129 = v60;
    v130 = 2080;
    v131 = "PaceFusion_Epoch_PureGpsOdometerPaceResetTime";
    v132 = 2048;
    v133 = v61;
    LODWORD(v65) = 322;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", (const char *)&v70, v65, v66, v67, *(const char **)&v68, v69);
    v64 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "double CLPedometerPaceFusion::computeFusedPace(CFAbsoluteTime, const CLExtendedStepCountEntry &, CLPedometer::FusionOdometerQuality, BOOL)", "%s\n", v63);
    if (v64 != buf)
      free(v64);
  }
  *((double *)a1 + 6) = v9;
  *((double *)a1 + 7) = v10;
  *((double *)a1 + 5) = a5;
}

id sub_10020D6F0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onMotionStateCoprocessorData:", a1);
}

id sub_10020D6FC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onKFFilteredPressure:", a1);
}

void sub_10020D748(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t sub_10020D788(uint64_t a1)
{

  sub_100261F44(a1 + 1208);
  if (*(char *)(a1 + 975) < 0)
    operator delete(*(void **)(a1 + 952));
  sub_100261F44(a1 + 848);
  return sub_100261F44(a1 + 728);
}

void sub_10020D7D4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_10020D7E4(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

uint64_t sub_10020D7EC(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

uint64_t sub_10020D7F4(uint64_t a1)
{
  return sub_100261F44(a1 + 40);
}

void sub_10020D7FC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_BYTE *sub_10020D83C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *result;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 64);
  a1[7] = *(_QWORD *)(a2 + 56);
  a1[8] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a1 + 9;
  if (*(char *)(a2 + 95) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  v7 = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_OWORD *)result = v7;
  return result;
}

void sub_10020D8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D8C0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10020D8E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10020D908(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10020D92C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000080B0(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_10020D974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10020D988(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a1 + 32);
  if (*(double *)(a1 + 96) > 0.0)
    v2[28] = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v2 + 72))(v2, a1 + 40);
}

void sub_10020D9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD);
  id v7;
  NSObject *v8;
  _QWORD v9[5];
  char v10;
  _QWORD v11[5];
  char v12;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = sub_100127B9C();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A34A8;
  v11[3] = &unk_1021468D0;
  v11[4] = v4;
  v12 = a2;
  sub_1000A57FC(v5, (uint64_t)v11);
  v6 = *(void (***)(_QWORD, _QWORD))(a1 + 40);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v7 = objc_msgSend(v6, "copy");
      v8 = *(NSObject **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1005D0ED4;
      v9[3] = &unk_102147770;
      v9[4] = v7;
      v10 = a2;
      dispatch_async(v8, v9);
    }
    else
    {
      v6[2](v6, a2);
    }

  }
}

void sub_10020DA90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  void (*v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 __p;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v6 = sub_10000E9B8;
  v7 = &unk_10217CCA0;
  v3 = *(_QWORD *)(a1 + 32);
  v10 = v2;
  v8 = v3;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 88);
  }
  v9 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && *(_QWORD *)(v4 + 8) != -1)
    v6((uint64_t)v5);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
}

void sub_10020DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020DB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  id v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  _QWORD v12[8];
  std::__shared_weak_count *v13;
  __int128 __p;
  uint64_t v15;

  v6 = *(id **)(a1 + 32);
  v7 = objc_msgSend(*v6, "silo");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_10020DA90;
  v12[3] = &unk_10217CCD8;
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  v12[6] = v6;
  v12[7] = v9;
  v13 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12[4] = a2;
  if (*(char *)(a1 + 79) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 72);
  }
  v12[5] = a3;
  objc_msgSend(v7, "async:", v12);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void sub_10020DC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  _Unwind_Resume(exception_object);
}

void sub_10020DCA0(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 6;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 66);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10020DD08(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 21;
  v3 = sub_10020820C(v2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, 2);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, _BOOL8))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }
}

void sub_10020DD70(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  __int128 **v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 **v9[2];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(__int128 ***)(a1 + 48);
  v9[0] = *(__int128 ***)(a1 + 40);
  v9[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_10008BC2C(v3, v9, a2);
  if (v4)
  {
    v7 = (unint64_t *)(v4 + 1);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*((void (**)(__int128 **))*v4 + 2))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
}

void sub_10020DE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10020DE14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10020DD70;
  v11[3] = &unk_102153610;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[4] = v2;
  v11[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  objc_msgSend(v3, "async:", v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10020DED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

double sub_10020DEE8(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 156) += **(_DWORD **)(a1 + 40);
  result = **(double **)(a1 + 48) + *(double *)(v1 + 160);
  *(double *)(v1 + 160) = result;
  return result;
}

void sub_10020DF14(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer set", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100021EB0(v1);
}

void sub_10020E0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 848);
  if (v5)
  {
    sub_10184C00C(v5);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
      sub_10184C08C(*(_QWORD *)(v4 + 848));
      return;
    }
LABEL_6:
    sub_10025FD1C();
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

id sub_10020E128(uint64_t a1)
{
  uint64_t v1;
  int v2;
  id result;
  uint64_t (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "floatValue", CFAbsoluteTimeGetCurrent(), 0);
  LODWORD(v6) = v2;
  result = objc_msgSend(*(id *)v1, "silo");
  v4 = *(uint64_t (**)(uint64_t *, _QWORD))(v1 + 16);
  if (v4)
    return (id)v4(&v5, *(_QWORD *)(v1 + 8));
  return result;
}

void sub_10020E184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(a1 + 40);
  if (*(_BYTE *)(v1 + v2 + 224))
  {
    v4 = *(_DWORD *)(v1 + 192);
    if ((v4 & 2) != 0)
      v5 = 2;
    else
      v5 = v4 & 1;
    if ((_DWORD)v2 == 2)
      v6 = -3;
    else
      v6 = ~((_DWORD)v2 == 1);
    *(_DWORD *)(v1 + 192) = v4 & v6;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218B728);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(int *)(a1 + 40);
      v9 = *(unsigned int *)(v1 + 192);
      v11[0] = 68289794;
      v11[1] = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2050;
      v15 = v8;
      v16 = 2050;
      v17 = v5;
      v18 = 2050;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: executing arrow demotion timer\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"previousState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newMask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)v11, 0x30u);
    }
    if ((*(_DWORD *)(v1 + 192) & 2) != 0)
      v10 = 2;
    else
      v10 = *(_DWORD *)(v1 + 192) & 1;
    if (v10 != (_DWORD)v5)
      sub_100091AEC(v1);
  }
}

void sub_10020E2F8(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend(a2, "isAuthorizedForServiceTypeMask:", 16);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Received Motion Calibration & Distance\", \"permission\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  sub_100238F48(v2 + 6624, v3);
  v5 = v3 && *(_DWORD *)(v2 + 8924) != 2 && *(_BYTE *)(v2 + 10192) == 0;
  sub_100238F40(v2 + 6624, v5);
}

void sub_10020E438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8256);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v3, a2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v3);
  v5 = (void **)&v4;
  sub_100279AA4(&v5);
}

void sub_10020E498(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1 + 8;
  sub_100279AA4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_10020E4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v8;
  __int128 v9;
  uint8_t buf[4];
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning,#cterror,#ctcl,triggerCellMonitorRefresh,error,%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LODWORD(v9) = 138412290;
      *(_QWORD *)((char *)&v9 + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#Warning,#cterror,#ctcl,triggerCellMonitorRefresh,error,%@", &v9, 12, v9);
LABEL_19:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)_block_invoke", "%s\n", v5);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh,success", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,triggerCellMonitorRefresh,success", &v9, 2, v9);
      goto LABEL_19;
    }
  }
  return sub_10001BE8C(v3, a2 == 0);
}

void sub_10020E73C(uint64_t a1)
{
  sub_100019970(*(_QWORD *)(a1 + 32));
}

NSDictionary *__cdecl sub_10020E744(id a1)
{
  return (NSDictionary *)&off_10221FC78;
}

uint64_t sub_10020E750(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 620) += *(_DWORD *)(result + 40);
  return result;
}

void sub_10020E768(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8[2];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(uint64_t **)(a1 + 48);
  v8[0] = *(uint64_t **)(a1 + 40);
  v8[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 1);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1000523DC(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)(v3 + 1);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(uint64_t *))(*v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
}

void sub_10020E7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10020E80C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10020E768;
  v11[3] = &unk_1021B87B8;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[4] = v2;
  v11[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  objc_msgSend(v3, "async:", v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10020E8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10020E8E0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char *v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;

  (*(void (**)(uint64_t, uint64_t, uint64_t, float, double))(*(_QWORD *)a2 + 208))(a2, a1 + 40, a1 + 52, *(float *)(a1 + 64), *(double *)(a1 + 32));
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(float *)(a1 + 40);
    v5 = *(float *)(a1 + 44);
    v6 = *(float *)(a1 + 48);
    v7 = *(float *)(a1 + 52);
    v8 = *(float *)(a1 + 56);
    v9 = *(float *)(a1 + 60);
    v10 = *(float *)(a1 + 64);
    *(_DWORD *)buf = 134350592;
    v34 = v4;
    v35 = 2050;
    v36 = v5;
    v37 = 2050;
    v38 = v6;
    v39 = 2050;
    v40 = v7;
    v41 = 2050;
    v42 = v8;
    v43 = 2050;
    v44 = v9;
    v45 = 2050;
    v46 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLGBE] SPU bias estimate inserted: bias,%{public}f,%{public}f,%{public}f,variance,%{public}f,%{public}f,%{public}f,temperature,%{public}f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v11 = *(float *)(a1 + 40);
    v12 = *(float *)(a1 + 44);
    v13 = *(float *)(a1 + 48);
    v14 = *(float *)(a1 + 52);
    v15 = *(float *)(a1 + 56);
    v16 = *(float *)(a1 + 60);
    v17 = *(float *)(a1 + 64);
    v19 = 134350592;
    v20 = v11;
    v21 = 2050;
    v22 = v12;
    v23 = 2050;
    v24 = v13;
    v25 = 2050;
    v26 = v14;
    v27 = 2050;
    v28 = v15;
    v29 = 2050;
    v30 = v16;
    v31 = 2050;
    v32 = v17;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "[CLGBE] SPU bias estimate inserted: bias,%{public}f,%{public}f,%{public}f,variance,%{public}f,%{public}f,%{public}f,temperature,%{public}f", &v19, 72);
    sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)_block_invoke", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
}

uint64_t sub_10020EB6C(uint64_t a1, uint64_t a2)
{
  return sub_10018AE0C(*(_QWORD *)(a1 + 32), a2, *(const __CFString **)(a1 + 48), *(const __CFDictionary **)(a1 + 56));
}

void sub_10020EB7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];
  _QWORD v10[3];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 32);
  v10[0] = off_1021CD720;
  v10[1] = v1;
  v10[2] = v1;
  v11 = v10;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    sub_10025FD1C();
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v10);
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  if ((v3 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#tt, failed to send command to start time transfer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v8[0] = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#tt, failed to send command to start time transfer", v8, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLGnssTimeTransfer::startTimeTransfer()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_10020ED70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020EDB4(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 32);
  if (v1[1680])
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 240))(*(_QWORD *)(result + 32), 0);
    return sub_100033A54((uint64_t)v1, 28);
  }
  return result;
}

void sub_10020EE00(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2 && *(_QWORD *)(v2 + 8) != -1)
    sub_100008D50((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

__n128 sub_10020EE44(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *a2;
  *(_QWORD *)(v2 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v2 + 72) = v3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return result;
}

void sub_10020EE64(uint64_t a1, double a2, double a3)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 112) = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 120) = a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10020EE84(uint64_t a1, int a2)
{
  NSObject *v3;
  id v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  id v9;

  if (a2)
  {
    sub_1000429A0(*(_QWORD *)(a1 + 40), a1 + 48);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Not sending due to CLCM provisional intermediation\", \"client\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
    }
  }
}

uint64_t sub_10020EFA0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_10020EFB4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_10020EFC8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_10020EFDC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10020EFF0(uint64_t a1, void *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 48);
  if (sub_1007C6874(v4, *(void **)(a1 + 32), a2))
  {
    v5 = (_QWORD *)(v4 + 976);
    if (a2)
    {
      objc_msgSend(a2, "cppClientKey");
    }
    else
    {
      __p = 0;
      v16 = 0;
      v17 = 0;
    }
    v6 = sub_1001987C8(v5, (unsigned __int8 *)&__p);
    v7 = v6;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p);
      if (!v7)
        return;
    }
    else if (!v6)
    {
      return;
    }
    for (i = (_QWORD *)*((_QWORD *)v7 + 7); i; i = (_QWORD *)*i)
    {
      v9 = (std::__shared_weak_count *)i[4];
      if (v9)
      {
        v10 = std::__shared_weak_count::lock(v9);
        v16 = v10;
        if (v10)
        {
          v11 = v10;
          v12 = (void *)i[3];
          __p = v12;
          if (v12)
            sub_10002580C((id *)v12, *(void **)(a1 + 40));
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
  }
}

void sub_10020F0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020F11C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4[2];
  void *v5[4];
  void *v6[2];
  void *v7[8];
  void *v8[2];
  _OWORD v9[2];
  uint64_t v10;
  void *__p[2];
  void *v12[4];
  void *v13[2];
  void *v14[5];
  __int128 v15;
  _OWORD v16[4];

  v3 = *(_QWORD *)(a1 + 40);
  if (sub_1007C6874(v3, *(void **)(a1 + 32), a2))
  {
    memset(v14, 0, 35);
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v12, 0, sizeof(v12));
    v15 = 0u;
    memset(v16, 0, 59);
    if (a2)
    {
      objc_msgSend(a2, "clientName");
      if (SHIBYTE(v12[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      *(_OWORD *)v8 = 0uLL;
      *(_OWORD *)v6 = 0uLL;
      memset(v7, 0, sizeof(v7));
      memset(v5, 0, sizeof(v5));
      *(_OWORD *)v4 = 0uLL;
    }
    *(_OWORD *)__p = *(_OWORD *)v4;
    v12[0] = v5[0];
    HIBYTE(v5[0]) = 0;
    LOBYTE(v4[0]) = 0;
    if (SHIBYTE(v12[3]) < 0)
      operator delete(v12[1]);
    *(_OWORD *)&v12[1] = *(_OWORD *)&v5[1];
    v12[3] = v5[3];
    HIBYTE(v5[3]) = 0;
    LOBYTE(v5[1]) = 0;
    if (SHIBYTE(v14[0]) < 0)
      operator delete(v13[0]);
    *(_OWORD *)v13 = *(_OWORD *)v6;
    v14[0] = v7[0];
    HIBYTE(v7[0]) = 0;
    LOBYTE(v6[0]) = 0;
    if (SHIBYTE(v14[3]) < 0)
      operator delete(v14[1]);
    *(_OWORD *)&v14[1] = *(_OWORD *)&v7[1];
    v14[3] = v7[3];
    HIBYTE(v7[3]) = 0;
    LOBYTE(v7[1]) = 0;
    LOWORD(v14[4]) = v7[4];
    BYTE2(v14[4]) = BYTE2(v7[4]);
    if (SBYTE7(v16[0]) < 0)
      operator delete((void *)v15);
    v15 = *(_OWORD *)&v7[5];
    *(void **)&v16[0] = v7[7];
    HIBYTE(v7[7]) = 0;
    LOBYTE(v7[5]) = 0;
    if (SHIBYTE(v16[1]) < 0)
      operator delete(*((void **)&v16[0] + 1));
    *(_OWORD *)((char *)v16 + 8) = *(_OWORD *)v8;
    *((_QWORD *)&v16[1] + 1) = *(_QWORD *)&v9[0];
    BYTE7(v9[0]) = 0;
    LOBYTE(v8[0]) = 0;
    if (SBYTE7(v16[3]) < 0)
    {
      operator delete(*(void **)&v16[2]);
      v16[2] = *(_OWORD *)((char *)v9 + 8);
      *(_QWORD *)&v16[3] = *((_QWORD *)&v9[1] + 1);
      HIBYTE(v9[1]) = 0;
      BYTE8(v9[0]) = 0;
      WORD4(v16[3]) = v10;
      BYTE10(v16[3]) = BYTE2(v10);
      if (SBYTE7(v9[0]) < 0)
        operator delete(v8[0]);
    }
    else
    {
      v16[2] = *(_OWORD *)((char *)v9 + 8);
      *(_QWORD *)&v16[3] = *((_QWORD *)&v9[1] + 1);
      HIBYTE(v9[1]) = 0;
      BYTE8(v9[0]) = 0;
      WORD4(v16[3]) = v10;
      BYTE10(v16[3]) = BYTE2(v10);
    }
    if (SHIBYTE(v7[7]) < 0)
      operator delete(v7[5]);
    if (SHIBYTE(v7[3]) < 0)
      operator delete(v7[1]);
    if (SHIBYTE(v7[0]) < 0)
      operator delete(v6[0]);
    if (SHIBYTE(v5[3]) < 0)
      operator delete(v5[1]);
    if (SHIBYTE(v5[0]) < 0)
      operator delete(v4[0]);
    LODWORD(v4[0]) = 2;
    (*(void (**)(uint64_t, void **, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, v4, __p, 0, 0xFFFFFFFFLL, 0);
    if (SBYTE7(v16[3]) < 0)
      operator delete(*(void **)&v16[2]);
    if (SHIBYTE(v16[1]) < 0)
      operator delete(*((void **)&v16[0] + 1));
    if (SBYTE7(v16[0]) < 0)
      operator delete((void *)v15);
    if (SHIBYTE(v14[3]) < 0)
      operator delete(v14[1]);
    if (SHIBYTE(v14[0]) < 0)
      operator delete(v13[0]);
    if (SHIBYTE(v12[3]) < 0)
      operator delete(v12[1]);
    if (SHIBYTE(v12[0]) < 0)
      operator delete(__p[0]);
  }
}

void sub_10020F470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100010174((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_10020F488(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  if (sub_1007C6874(v4, *(void **)(a1 + 32), a2))
  {
    v5 = objc_msgSend(a2, "legacyClientKey");
    if (v5 && *(_QWORD *)(a1 + 40))
    {
      objc_msgSend(*(id *)(v4 + 1080), "setObject:forKeyedSubscript:");
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v8 = *(_QWORD *)(a1 + 40);
        v7 = *(_QWORD *)(a1 + 48);
        v12 = 68289794;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2114;
        v17 = v7;
        v18 = 2114;
        v19 = v5;
        v20 = 2114;
        v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil\", \"legacyClientKey\":%{public, location:escape_only}@, \"authSharedlegacyClientKey\":%{public, location:escape_only}@, \"authContext\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v9 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v11 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 48);
        v12 = 68289794;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2114;
        v17 = v10;
        v18 = 2114;
        v19 = v5;
        v20 = 2114;
        v21 = v11;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil", "{\"msg%{public}.0s\":\"cacheAuthorizationContextForClient attempting to set auth context for client, but one is nil\", \"legacyClientKey\":%{public, location:escape_only}@, \"authSharedlegacyClientKey\":%{public, location:escape_only}@, \"authContext\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x30u);
      }
    }
  }
}

_BYTE *sub_10020F6AC(uint64_t a1)
{
  return sub_10019DBAC(*(_BYTE **)(a1 + 32));
}

_BYTE *sub_10020F6B4(uint64_t a1)
{
  return sub_10019DBAC(*(_BYTE **)(a1 + 32));
}

void sub_10020F6BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10020F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10020F75C(uint64_t a1)
{
  return sub_10006028C(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

id sub_10020F76C(uint64_t a1)
{
  void *v1;
  double v2;

  v1 = *(void **)(a1 + 32);
  v2 = sub_100078B88();
  return sub_10006AAB4(v1, 0, v2);
}

void sub_10020F794(uint64_t a1)
{
  sub_100031898(*(_QWORD *)(a1 + 32));
}

void sub_10020F79C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == -536723200)
    sub_100063264(*(_QWORD **)(a1 + 32), *(_DWORD *)(a1 + 48));
}

uint64_t sub_10020F7C0(uint64_t a1, uint64_t a2)
{
  return sub_10005D694(*(_QWORD *)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48));
}

void sub_10020F7D0(id a1, __CFRunLoopTimer *a2)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_102163348);
}

uint64_t sub_10020F7E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020F804(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020F824(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10020F844(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_100010174(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10020F878(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_100010174(result);
    operator delete();
  }
  return result;
}

id sub_10020F8AC(_QWORD *a1)
{
  return objc_msgSend(objc_loadWeak((id *)(a1[4] + 16)), "onAvengerAdvertisement:reconciledInformation:", a1[5], a1[6]);
}

id sub_10020F8D8(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16)), "onAggressiveScanStarted");
}

id sub_10020F8F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_processReceivedWiFiDeviceLinkScore:", *(unsigned int *)(a1 + 40));
}

void sub_10020F904(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v2)
  {
    sub_1002291E8(v2, 1, *(unsigned __int8 *)(a1 + 40));
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "ignoring indoor give up - shutting down", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring indoor give up - shutting down", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorGivesUpWithLocation:]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_10020FACC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021BCA48);
  v2 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v8 = 68289282;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2114;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian simplebeacon difference\", \"diff\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    v4 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian simplebeacon difference error\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021BCA48);
    }
    v6 = qword_1022A0038;
    if (os_signpost_enabled((os_log_t)qword_1022A0038))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian simplebeacon difference error", "{\"msg%{public}.0s\":\"#durian simplebeacon difference error\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "didReceiveBeaconDifference:", *(_QWORD *)(a1 + 32));
  }
}

void sub_10020FCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020FACC;
  block[3] = &unk_10212BBA8;
  block[4] = a2;
  block[5] = a3;
  block[6] = v3;
  dispatch_async(v4, block);
}

id sub_10020FD50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "processMonitor:didProvideUpdate:forProcessHandle:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_10020FD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[8];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020FD50;
  v6[3] = &unk_102150F38;
  v6[4] = v4;
  v6[5] = a2;
  v6[6] = a4;
  v6[7] = a3;
  dispatch_async(v5, v6);
}

uint64_t sub_10020FDBC(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218E860);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218E860);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_10020FFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020FFC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 180);
}

uint64_t sub_10020FFC8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100CAC19C(a1 - 352);
  if ((result & 1) == 0)
    return sub_100066C34(a1 + 112, a2);
  return result;
}

uint64_t sub_100210008(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100203518(a1 - 352);
  if ((result & 1) == 0)
    return sub_1002061B0(a1 + 256, a2);
  return result;
}

uint64_t sub_100210048(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100203518(a1 - 352);
  if ((result & 1) == 0)
    return sub_100066C34(a1 + 256, a2);
  return result;
}

uint64_t sub_100210088(uint64_t a1, uint64_t a2)
{
  return sub_100153DEC(a1 + 13472, a2);
}

void sub_100210094(uint64_t a1, uint64_t a2)
{
  sub_100018570(a1 - 152, a2);
}

void sub_10021009C(uint64_t a1, uint64_t *a2)
{
  sub_100227C48(a1 + 12696, *a2, a2[1]);
}

uint64_t sub_1002100B0(uint64_t a1, uint64_t a2)
{
  return sub_100063DE0(a1 - 152, a2);
}

void sub_1002100B8(uint64_t a1, uint64_t a2, float a3)
{
  sub_100062660(a1 - 152, a2, a3);
}

uint64_t sub_1002100C0(uint64_t a1, uint64_t a2)
{
  return sub_100051430(a1 - 152, a2);
}

BOOL sub_1002100CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 552) != 0;
}

uint64_t sub_1002100DC(uint64_t a1)
{
  int v2;

  v2 = 0;
  return sub_1001B7864(a1 - 120, &v2, 1);
}

BOOL sub_100210108(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "indoord") != 0;
}

uint64_t sub_100210128(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 - 120) + 152))(a1 - 120, &v3, a2, 0, 0xFFFFFFFFLL, 0);
}

void sub_100210164(uint64_t a1, uint64_t *a2)
{
  sub_10003B410(a1 - 120, a2);
}

void sub_10021016C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002F624(a1 - 120, a2, a3);
}

uint64_t sub_100210174(uint64_t a1)
{
  return sub_100229148(a1 - 120);
}

id sub_10021017C(uint64_t a1, int a2)
{
  return sub_10001C408(a1 - 120, a2);
}

void sub_100210184(uint64_t a1)
{
  sub_10018781C(a1 - 120);
}

_QWORD *sub_10021018C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1017E1308(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_100210224(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1017E147C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1002102BC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_100DC7268(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_100210340(_QWORD *a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100259C18(a1, a2);
    v4 = (_BYTE *)a1[1];
    v5 = &v4[24 * a2];
    do
    {
      *v4 = 0;
      v4[20] = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_10021039C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002103B8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10136C380((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10021042C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10029A964((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t *sub_1002104A0(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_1002105DC(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000145B0(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100210524(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *sub_1002105DC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_100210784(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **sub_10021083C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1002108FC(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10036C1BC((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          sub_10121CDD8(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10036C1BC((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_10036C210((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_101752FD4(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100210A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10036C210((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_100210A64(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 24);
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_OWORD *sub_100210AFC(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x98uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)((char *)v6 + 104) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)((char *)v6 + 120) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_100210BBC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_10007CDDC(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_100210C24(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_10008A9F0((uint64_t **)a1, v4);
  sub_100261F44((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_100210CA8(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[2];
  v7 = a1[1];
  if (v6 == v7)
    v8 = 0;
  else
    v8 = 32 * (v6 - v7) - 1;
  v9 = a1[4];
  v10 = a1[5];
  v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_10051C824(a1);
    v9 = a1[4];
    v10 = a1[5];
    v7 = a1[1];
    v11 = v9 + v10;
  }
  v12 = *(_QWORD *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11;
  *(_QWORD *)v12 = *a2;
  *(_DWORD *)(v12 + 8) = *a3;
  v13 = v10 + 1;
  a1[5] = v13;
  v14 = v9 + v13;
  v15 = (_QWORD *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14)
    v16 = *v15 + 16 * v14;
  else
    v16 = *(v15 - 1) + 4096;
  return v16 - 16;
}

void sub_100210D6C(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_100211030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10021107C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_100210D6C((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(v7 + 8 * (v6 >> 8));
  v10 = *v9 + 16 * v6;
  if (v8 == v7)
    v10 = 0;
  if (v10 == *v9)
    v10 = *(v9 - 1) + 4096;
  *(_QWORD *)(v10 - 16) = *a2;
  *(_QWORD *)(v10 - 8) = *a3;
  v11 = v6 - 1;
  v12 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  if (v8 == v7)
    return 0;
  else
    return *(_QWORD *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11;
}

uint64_t sub_100211128(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)v7 + 16 * v4);
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 8));
    v11 = (_QWORD *)(*(_QWORD *)v10 + 16 * v9);
  }
  sub_1006F0E34((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1002111B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1002111C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10142A9C8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8));
  v9 = v7 & 0xF;
  v10 = v8 + 800 * (v7 & 0xF);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v11;
  v12 = *(_OWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v10 + 80) = v14;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 48) = v13;
  v15 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v10 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v10 + 112) = v16;
  *(_OWORD *)(v10 + 128) = v17;
  *(_OWORD *)(v10 + 96) = v15;
  memcpy((void *)(v10 + 160), (const void *)(a2 + 160), 0x201uLL);
  *(_QWORD *)(v10 + 680) = *(_QWORD *)(a2 + 680);
  v18 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(v10 + 688) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = v8 + 800 * v9;
  result = *(__n128 *)(a2 + 744);
  v23 = *(_OWORD *)(a2 + 760);
  v24 = *(_OWORD *)(a2 + 776);
  *(_BYTE *)(v21 + 792) = *(_BYTE *)(a2 + 792);
  v25 = *(_OWORD *)(a2 + 712);
  v26 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(v21 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(v21 + 712) = v25;
  *(_OWORD *)(v21 + 760) = v23;
  *(_OWORD *)(v21 + 776) = v24;
  *(_OWORD *)(v21 + 728) = v26;
  *(__n128 *)(v21 + 744) = result;
  ++a1[5];
  return result;
}

void sub_1002112FC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x19;
  v4 = v2 - 25;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002115C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100211610(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x11;
  v4 = v2 - 17;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF68uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF68uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF68uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002118D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100211924(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E62008(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1002119AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100211C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100211CC0(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1002119AC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  v9 = a2[1];
  *v8 = *a2;
  v8[1] = v9;
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 >> 7));
  v15 = *v14 + 32 * (v12 & 0x7F);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4096;
  return v15 - 32;
}

void sub_100211D84(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1400uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1400uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1400uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10021204C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_100212098(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 23 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006CF8B0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x17)) + 176 * (v7 % 0x17);
  v9 = *a2;
  v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v9;
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  result = (__n128)a2[7];
  v15 = a2[8];
  v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(__n128 *)(v8 + 112) = result;
  *(_OWORD *)(v8 + 128) = v15;
  ++a1[5];
  return result;
}

uint64_t *sub_100212174(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t **v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_8:
    sub_100263950("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return (uint64_t *)(v2 + 5);
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void sub_1002121CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_1002121E8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100212210(uint64_t a1)
{
  return sub_100090E54(a1 + 24);
}

void sub_100212218(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_10025E6A0(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

uint64_t sub_10021232C(uint64_t a1)
{
  sub_10136C4B4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100212360(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      sub_10012D8CC(a1, v5, (uint64_t)v5);
      v5 += 11;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1002123C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002123D8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

uint64_t *sub_100212418(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_10021244C(a1, a2);
  if (result)
  {
    sub_1002123D8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_10021244C(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unsigned __int8 *sub_100212538(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_101002F84(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_101003024((uint64_t)v26, 0);
  return i;
}

void sub_1002127B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_101003024((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1002127D0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_1002A20A8((uint64_t)&v6, v3);
  return v2;
}

_QWORD *sub_100212818(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100212A28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100212A3C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100212C48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100212C5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100126C34(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_100212CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_100212C5C(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

char *sub_100212D50(uint64_t a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v9 = sub_100129380((uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_10009483C((_QWORD *)v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = (char *)operator new(0x78uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_QWORD *)v15 + 2) = *a3;
  v17 = a4[3];
  *(_OWORD *)(v15 + 56) = a4[2];
  *(_OWORD *)(v15 + 72) = v17;
  v18 = a4[5];
  *(_OWORD *)(v15 + 88) = a4[4];
  *(_OWORD *)(v15 + 104) = v18;
  v19 = a4[1];
  *(_OWORD *)(v15 + 24) = *a4;
  *(_OWORD *)(v15 + 40) = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_38:
    *v27 = v15;
    goto LABEL_39;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_100212F9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100212FB0(_QWORD *a1, uint64_t *a2)
{
  uint64_t *result;

  result = sub_1000141C0(a1, a2);
  if (result)
  {
    sub_100059290(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void sub_100212FE4(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  signed __int32 v20;
  uint64_t v21;
  signed __int32 v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  signed __int32 v26;
  __n128 *v27;
  signed __int32 v28;
  __n128 *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  signed __int32 v34;
  signed __int32 v35;
  __n128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  uint64_t v42;
  signed __int32 v43;
  unint64_t v44;
  signed __int32 v45;
  __n128 *v46;
  __n128 *v47;
  signed __int32 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  signed __int32 v53;
  signed __int32 v54;
  __n128 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 *v64;
  __n128 *v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __n128 *v80;
  BOOL v82;
  uint64_t v83;
  _OWORD *v84;
  __n128 *v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  int v102;
  _OWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int64_t v112;
  uint64_t v113;
  _OWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  uint64_t v128;
  unint64_t v129;
  _OWORD *v130;
  int v131;
  _OWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __n128 *v138;
  signed __int32 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __int32 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __int128 v153;
  __n128 v154;
  __n128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  __n128 v166;
  __n128 v167;
  __int128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __n128 v176;
  __int128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __n128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _BYTE v210[28];
  _BYTE v211[28];
  _BYTE v212[28];
  __n128 v213;
  __n128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __n128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _BYTE v222[28];
  __int128 v223;
  _BYTE v224[28];
  __int128 v225;
  __int128 v226;
  __int128 v227;

void sub_100213B88(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  const void **v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

_QWORD *sub_100213F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v10[0] = off_1021CD790;
  v10[1] = v2;
  v11 = v10;
  v8[0] = off_1021CD810;
  v8[1] = v3;
  v9 = v8;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v10, v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_100214020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v4 = (va_list)v10;
  if (v10 == (_QWORD *)va)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_101945840(v2, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_100214070(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD **v2;
  uint64_t v3;

  v2 = **(_QWORD ****)(a1 + 8);
  v3 = ((uint64_t (*)(_QWORD **, _QWORD))(*v2)[5])(v2, *a2);
  return sub_10002A7F0(v2[1], v3);
}

void sub_1002140AC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_100E8C4A0(a1 + 8, a2, a3);
}

void sub_1002140B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100F9977C(a1 + 8, a2, a3);
}

void sub_1002140BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100E8C5F8(a1 + 8, a2, a3);
}

uint64_t sub_1002140C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 8, (uint64_t)&v4);
}

BOOL sub_1002140F4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) != 1;
}

BOOL sub_10021410C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == 1;
}

uint64_t sub_100214124(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  return sub_10023195C(v2, 6, (uint64_t)&v4);
}

void sub_100214154(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_100214164(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100214170(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_100214190(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_1002141AC(int *a1, int **a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  v5 = v4 >= 0x19;
  v6 = v4 - 25;
  if (v5)
  {
    switch(v6)
    {
      case 0u:
        a1[2] = **a2;
        result = 1;
        break;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        return result;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

uint64_t sub_10021420C(int *a1, uint64_t **a2)
{
  int v2;

  v2 = *a1 ^ (*a1 >> 31);
  if ((v2 - 8) >= 0x16)
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return 0;
      case 7:
        return sub_1006B1DA4(a2, (uint64_t)(a1 + 2));
      default:
        sub_10055A5D8();
    }
  }
  return 0;
}

__n128 sub_10021426C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021CD720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100214284(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1019536EC();
  if ((a2 & 0x80000000) != 0)
    sub_101953714();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_10195373C();
  return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t sub_1002142BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_10195345C(a1, a2, a3);
  if ((a2 & 0x80000000) != 0)
    sub_101953480(a1, a2, a3);
  if (*(_DWORD *)(a1 + 16) <= (int)a2)
    sub_1019534A4(a1, a2, a3);
  return *(_QWORD *)(v3 + 8 * a2);
}

__n128 sub_1002142F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = sub_10012D080(*a1, (uint64_t *)a2);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v3 + 64) = v5;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    result = *(__n128 *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 120) = v7;
    *(_OWORD *)(v3 + 104) = v6;
    *(__n128 *)(v3 + 88) = result;
    *(_BYTE *)(v3 + 144) = 1;
  }
  return result;
}

double sub_100214380(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  unint64_t v5;
  double Current;
  double v7;
  unint64_t v8;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 16) && (v4 = sub_1001047C0(), v5 = v4 - *(_QWORD *)a1, v4 >= *(_QWORD *)a1))
  {
    *a2 = 1;
    return (double)(v5 + *(_QWORD *)(a1 + 8)) * 0.000000001;
  }
  else
  {
    *a2 = 0;
    v10 = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v7 = sub_100073658((int *)&v10 + 1, &v10, Current);
    LODWORD(v7) = HIDWORD(v10);
    LODWORD(v8) = v10;
    return (double)v8 / 1000.0 + (double)*(unint64_t *)&v7 * 604800.0;
  }
}

double sub_100214420(uint64_t a1)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  int v18;
  int v19;
  _DWORD v20[2];
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021802A0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4 = (uint64_t)*(double *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 112);
    v7 = *(_QWORD *)(a1 + 120);
    v8 = *(_QWORD *)(a1 + 128);
    v10 = *(_QWORD *)(a1 + 136);
    v9 = *(_QWORD *)(a1 + 144);
    v11 = *(_DWORD *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 820);
    v13 = *(_DWORD *)(a1 + 824);
    v14 = *(_DWORD *)(a1 + 828);
    v15 = *(_DWORD *)(a1 + 832);
    v16 = *(float *)(a1 + 836);
    v17 = *(float *)(a1 + 840);
    v18 = *(_DWORD *)(a1 + 844);
    v19 = *(unsigned __int8 *)(a1 + 1088);
    v20[0] = 68293123;
    v21 = 2082;
    v20[1] = 0;
    v22 = "";
    v23 = 2049;
    v24 = v4;
    v25 = 2049;
    v26 = v5;
    v27 = 2049;
    v28 = v9;
    v29 = 2049;
    v30 = v6;
    v31 = 2049;
    v32 = v7;
    v33 = 2049;
    v34 = v8;
    v35 = 2049;
    v36 = v10;
    v37 = 1025;
    v38 = v11;
    v39 = 1025;
    v40 = v12;
    v41 = 1025;
    v42 = v13;
    v43 = 1025;
    v44 = v14;
    v45 = 1025;
    v46 = v15;
    v47 = 2049;
    v48 = v16;
    v49 = 2049;
    v50 = v17;
    v51 = 1025;
    v52 = v18;
    v53 = 1025;
    v54 = v19;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd GnssSessionData log\", \"sessionDuration\":%{private}lld, \"fEpochCount\":%{private}lld, \"yieldCount\":%{private}lld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\", \"ttff\":%{private}d, \"mcc\":%{private}d, \"mnc\":%{private}d, \"sid\":%{private}d, \"nid\":%{private}d, \"transFreq\":\"%{private}f\", \"transBW\":\"%{private}f\", \"transBand\":%{private}d, \"isEmergency\":%{private}d}", (uint8_t *)v20, 0x96u);
  }
  return result;
}

uint64_t sub_1002145C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1002145D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1002145E4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  unsigned int v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    v4 = 2 * (v3 & 1u);
    if ((v3 & 2) != 0)
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
        v5 = *(_QWORD *)(qword_1023107E8 + 8);
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214950(v5, a2);
      v8 = (int)v6;
      if (v6 >= 0x80)
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, v7);
      else
        v9 = 1;
      v4 = (v4 | 1) + v8 + v9;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

uint64_t sub_10021466C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

uint64_t sub_1002146A4(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9, a2);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 1;
      }
      if (v7 < 0)
        v6 = v8;
      v4 = (v4 + v10 + v6 + 1);
    }
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

uint64_t sub_100214740(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  uint64_t v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_55;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_1023107F8 + 8);
  v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0)
      v8 += 9;
    if ((v7 & 4) != 0)
      v7 = v8 + 9;
    else
      v7 = v8;
  }
  *(_DWORD *)(v6 + 32) = v7;
  v4 = v7 + 2;
  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v10 = 2;
    }
    v4 += v10;
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v12 = 2;
    }
    v4 += v12;
    if ((v3 & 8) == 0)
      goto LABEL_36;
    goto LABEL_30;
  }
  if ((v3 & 8) != 0)
  {
LABEL_30:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v13 & 0x80000000) != 0)
    {
      v14 = 11;
    }
    else if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v14 = 2;
    }
    v4 += v14;
  }
LABEL_36:
  if ((v3 & 0x10) != 0)
    v15 = v4 + 2;
  else
    v15 = v4;
  if ((v3 & 0x20) != 0)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v16)
      v16 = *(_QWORD *)(qword_1023107F8 + 24);
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002145E4(v16, a2);
    v18 = (int)v17;
    if (v17 >= 0x80)
      v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    else
      v19 = 1;
    v15 += v18 + v19 + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
  if ((v3 & 0x40) != 0)
  {
    v20 = *(_QWORD *)(a1 + 32);
    if (!v20)
      v20 = *(_QWORD *)(qword_1023107F8 + 32);
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214B2C(v20, a2);
    v23 = (int)v21;
    if (v21 >= 0x80)
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, v22);
    else
      v24 = 1;
    v15 += v23 + v24 + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
  v5 = v15 + 2;
  if ((v3 & 0x80) == 0)
    v5 = v15;
LABEL_55:
  v25 = v5 + 2;
  if ((v3 & 0x100) == 0)
    v25 = v5;
  if ((v3 & 0x200) != 0)
    v25 += 2;
  if ((v3 & 0x400) != 0)
    v25 += 2;
  if ((v3 & 0xFF00) != 0)
    result = v25;
  else
    result = v5;
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

uint64_t sub_100214950(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  unsigned int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;

  v3 = *(_DWORD *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_40;
  }
  v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v3 = *(_DWORD *)(a1 + 56);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 += v11 + v7 + 1;
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0)
        goto LABEL_5;
LABEL_21:
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v14 & 0x80000000) != 0)
      {
        v15 = 11;
      }
      else if (v14 >= 0x80)
      {
        v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
        v3 = *(_DWORD *)(a1 + 56);
      }
      else
      {
        v15 = 2;
      }
      v4 += v15;
      if ((v3 & 0x10) == 0)
        goto LABEL_33;
      goto LABEL_27;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(a1 + 24)) ^ (*(int *)(a1 + 24) >> 31));
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    v3 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    v13 = 2;
  }
  v4 += v13;
  if ((v3 & 8) != 0)
    goto LABEL_21;
LABEL_5:
  if ((v3 & 0x10) != 0)
  {
LABEL_27:
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v16 & 0x80000000) != 0)
    {
      v17 = 11;
    }
    else if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
      v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      v17 = 2;
    }
    v4 += v17;
  }
LABEL_33:
  v18 = v4 + 5;
  if ((v3 & 0x20) == 0)
    v18 = v4;
  if ((v3 & 0x40) != 0)
    v18 += 2;
  if ((v3 & 0x80) != 0)
    v5 = v18 + 2;
  else
    v5 = v18;
LABEL_40:
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
      if ((v19 & 0x80000000) != 0)
      {
        v20 = 11;
      }
      else if (v19 >= 0x80)
      {
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
        v3 = *(_DWORD *)(a1 + 56);
      }
      else
      {
        v20 = 2;
      }
      v5 = (v20 + v5);
    }
    if ((v3 & 0x200) != 0)
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v21 & 0x80000000) != 0)
      {
        v22 = 11;
      }
      else if (v21 >= 0x80)
      {
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 1;
      }
      else
      {
        v22 = 2;
      }
      v5 = (v22 + v5);
    }
  }
  *(_DWORD *)(a1 + 52) = v5;
  return v5;
}

uint64_t sub_100214B2C(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      v4 = *(_QWORD *)(qword_1023107F0 + 8);
    v5 = *(unsigned __int8 *)(v4 + 36);
    if (*(_BYTE *)(v4 + 36))
    {
      v6 = (v5 << 31 >> 31) & 9;
      if ((v5 & 2) != 0)
        v6 += 9;
      if ((v5 & 4) != 0)
        v5 = v6 + 9;
      else
        v5 = v6;
    }
    *(_DWORD *)(v4 + 32) = v5;
    v3 = v5 + 2;
  }
  else
  {
    v3 = 0;
  }
  v7 = *(_DWORD *)(a1 + 24);
  v8 = (v7 + v3);
  if (v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214950(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9), a2);
      v11 = (int)v10;
      if (v10 >= 0x80)
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
      else
        v12 = 1;
      v8 = (v11 + v8 + v12);
      ++v9;
    }
    while (v9 < *(int *)(a1 + 24));
  }
  *(_DWORD *)(a1 + 40) = v8;
  return v8;
}

uint64_t sub_100214C04(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

_QWORD *sub_100214C30@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PedometerAssistanceDisabledState");
}

_QWORD *sub_100214C40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "PedometerAssistanceAsleepState");
}

void sub_100214C50(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
    sub_10018C87C(v3, a2, a3);
  else
    sub_1005728AC(a3, (uint64_t)a2);
}

uint64_t sub_100214C64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  sub_10022A734(v3[5], a2);
  return ((uint64_t (*)(uint64_t **))(*v3)[3])(v3);
}

void sub_100214CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100214CDC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 144);
  *a2 = *(_QWORD *)(result + 136);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_100214D00()
{
  return 1;
}

id sub_100214D10(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 88), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "resetRetryCounters:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
}

uint64_t sub_100214D5C(uint64_t a1, int a2, unsigned int a3, double *a4)
{
  uint64_t v5;
  NSObject *v6;
  double v7;
  uint64_t result;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v5 = a3;
  if (a3 < 8)
  {
    v9 = sub_10021514C(a1, a2);
    result = 0;
    v7 = dbl_101CA3EB8[v9] * dbl_101CA3EE8[2 * v5 + 1];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu", buf, 0xCu);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v11 = 134217984;
      v12 = v5;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu", &v11);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupActivityStateProbabilityGivenOutdoor(const CMMotionContext::MotionType, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    result = 0xFFFFFFFFLL;
  }
  *a4 = v7;
  return result;
}

uint64_t sub_100214F54(uint64_t a1, int a2, unsigned int a3, double *a4)
{
  uint64_t v5;
  NSObject *v6;
  double v7;
  uint64_t result;
  int v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;

  v5 = a3;
  if (a3 < 8)
  {
    v9 = sub_10021514C(a1, a2);
    result = 0;
    v7 = dbl_101CA3F58[v9] * dbl_101CA3EE8[2 * v5 + 1];
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6058);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,lookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu", buf, 0xCu);
    }
    v7 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6058);
      v11 = 134217984;
      v12 = v5;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,lookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu", &v11);
      sub_100512490("Generic", 1, 0, 0, "int32_t CLOutdoorEstimatorLookupTables::lookupActivityStateProbabilityGivenIndoor(const CMMotionContext::MotionType, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double &) const", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    result = 0xFFFFFFFFLL;
  }
  *a4 = v7;
  return result;
}

uint64_t sub_10021514C(uint64_t a1, int a2)
{
  if (a2 <= 127)
  {
    if (a2 > 31)
    {
      if (a2 != 32)
      {
        if (a2 == 64)
          return 3;
        return 0;
      }
    }
    else
    {
      if (a2 == 4)
        return 1;
      if (a2 != 16)
        return 0;
    }
    return 2;
  }
  if (a2 >= 0x2000)
  {
    if (a2 != 0x2000 && a2 != 12288 && a2 != 0x4000)
      return 0;
    return 5;
  }
  if (a2 == 128)
    return 4;
  if (a2 == 4096)
    return 5;
  return 0;
}

void sub_1002151E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  NSObject *v7;
  char *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  int v12;
  NSObject *v13;
  void **v14;
  void **v15;
  char *v16;
  void *__p[2];
  uint64_t v18;
  _WORD v19[24];
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  void **v25;
  __int16 v26;
  int v27;
  _BYTE buf[12];
  __int16 v29;
  int v30;

  sub_100130768((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 808))
  {
    buf[0] = *(_BYTE *)(a2 + 48);
    buf[1] = 1;
    sub_100C58788(a1, buf, (uint64_t)v19);
    sub_10055B0CC(a3 + 1760, (uint64_t)v19);
    if (*(_BYTE *)(a3 + 1808))
    {
      v6 = *(_DWORD *)(a3 + 1784);
      if (v6)
      {
        *(_DWORD *)(*(_QWORD *)(a3 + 6496) + 200) += v6;
        *(_BYTE *)(a3 + 6149) = 1;
      }
      if (v23)
      {
        if (SHIBYTE(v22) < 0)
        {
          sub_100115CE4(__p, (void *)v21, *((unint64_t *)&v21 + 1));
        }
        else
        {
          *(_OWORD *)__p = v21;
          v18 = v22;
        }
        v9 = (uint64_t **)(*(_QWORD *)(a3 + 6496) + 104);
        *(_QWORD *)buf = __p;
        v10 = sub_10055D064(v9, (const void **)__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        ++*((_DWORD *)v10 + 14);
        v11 = (uint64_t **)(*(_QWORD *)(a3 + 6496) + 104);
        *(_QWORD *)buf = __p;
        v12 = *((_DWORD *)sub_10055D064(v11, (const void **)__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf) + 14);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10217C030);
        v13 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          v14 = __p;
          if (v18 < 0)
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v14;
          v29 = 1024;
          v30 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#alsquery alsRequestReasonTally, reason: %s tally: %d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10217C030);
          v15 = __p;
          if (v18 < 0)
            v15 = (void **)__p[0];
          v24 = 136315394;
          v25 = v15;
          v26 = 1024;
          v27 = v12;
          v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#alsquery alsRequestReasonTally, reason: %s tally: %d", (const char *)&v24, 18);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::AlsQuery::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v16);
          if (v16 != buf)
            free(v16);
        }
        if (SHIBYTE(v18) < 0)
          operator delete(__p[0]);
      }
    }
    if (v23 && SHIBYTE(v22) < 0)
      operator delete((void *)v21);
    if (v20)
      sub_100067AC4((uint64_t)v19);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#alsquery, skip, should not compute location from scan event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v19[0] = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#alsquery, skip, should not compute location from scan event", v19, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::AlsQuery::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v8);
      if (v8 != buf)
        free(v8);
    }
  }
}

void sub_100215640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a16 < 0)
    operator delete(__p);
  sub_100C59784((uint64_t)&a18);
  sub_10055829C(v18);
  _Unwind_Resume(a1);
}

void sub_100215690(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _BYTE *v6;
  int v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  NSObject *v24;
  double v25;
  NSObject *v26;
  const char *v27;
  double v28;
  double v29;
  int v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int16 v36;
  _OWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  char *v44;
  NSObject *v45;
  int v46;
  double v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  __int16 v56;
  _OWORD *v57;
  uint64_t v58;
  _OWORD *v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  const char *v68;
  double v69;
  char *v70;
  uint64_t v71;
  const char *v72;
  char *v73;
  double v74;
  char *v75;
  uint8_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91[2];
  char v92;
  _BYTE v93[816];
  int v94;
  const char *v95;
  _BYTE buf[24];
  void *v97;
  char v98;
  void *v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *__p;
  char v105;

  v4 = (uint64_t *)a1;
  v6 = (_BYTE *)(a1 + 6448);
  sub_1001307C4((_DWORD *)a3, a1);
  if (!*v6)
    return;
  v7 = *(unsigned __int8 *)(a2 + 48);
  v8 = *((double *)v4 + 807);
  if (sub_100182290((uint64_t)(v4 + 176)))
  {
    v9 = *((_OWORD *)v4 + 97);
    *(_OWORD *)(a3 + 5144) = *((_OWORD *)v4 + 96);
    *(_OWORD *)(a3 + 5160) = v9;
    *(_OWORD *)(a3 + 5176) = *((_OWORD *)v4 + 98);
    v10 = *((_OWORD *)v4 + 93);
    *(_OWORD *)(a3 + 5080) = *((_OWORD *)v4 + 92);
    *(_OWORD *)(a3 + 5096) = v10;
    v11 = *((_OWORD *)v4 + 95);
    *(_OWORD *)(a3 + 5112) = *((_OWORD *)v4 + 94);
    *(_OWORD *)(a3 + 5128) = v11;
    v12 = *((_OWORD *)v4 + 89);
    *(_OWORD *)(a3 + 5016) = *((_OWORD *)v4 + 88);
    *(_OWORD *)(a3 + 5032) = v12;
    v13 = *((_OWORD *)v4 + 91);
    *(_OWORD *)(a3 + 5048) = *((_OWORD *)v4 + 90);
    *(_QWORD *)(a3 + 5192) = v4[198];
    *(_OWORD *)(a3 + 5064) = v13;
  }
  if (*((_BYTE *)v4 + 1400))
  {
    *(_QWORD *)buf = sub_100129380(a3 + 3248);
    *(_QWORD *)v93 = v4[163];
    v14 = sub_10009483C(buf, v93);
    if (!v14)
    {
      sub_1019402B4(v14, v15, v16, v17, v18, v19, v20, v21, v76, v77, v78, v79, (uint64_t)v80, (uint64_t)v81, v82, v83, v84, *((uint64_t *)&v84 + 1), v85,
        v86,
        (uint64_t)v87,
        (uint64_t)v88,
        v89,
        v90);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifi1PostPositionCalculationStateUpdate.mm", 547, "operator()");
      __break(1u);
LABEL_134:
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
LABEL_58:
      v40 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, location update not in progress, will not issue scan", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v4[10] != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        *(_WORD *)v93 = 0;
        LODWORD(v77) = 2;
        v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#post-wifi-position-calculation-state-update, location update not in progress, will not issue scan", v93, v77);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v44);
        goto LABEL_138;
      }
      return;
    }
    v22 = sub_100219C3C((uint64_t)(v4 + 163));
    sub_100223BA8(a3 + 3248, v22);
  }
  if (v4[141])
    *(_BYTE *)(a3 + 6148) = 0;
  if (sub_100217A84(a3 + 6040) && !sub_1000709AC((_DWORD *)(a3 + 6040)))
  {
    if (v7 == v6[72] && *(_BYTE *)(a3 + 1624))
      sub_10003A974(a3 + 6040, 5, 5u, v8);
    if (v7 == 10 || v7 == v6[73])
    {
      if (*(_BYTE *)(a3 + 1624))
        v23 = 6;
      else
        v23 = 11;
      sub_10003A974(a3 + 6040, 5, v23, v8);
    }
  }
  if (!sub_10007099C((_DWORD *)v4 + 1510))
  {
    v4 = &qword_1022A0000;
    if (qword_1022A0050 == -1)
      goto LABEL_58;
    goto LABEL_134;
  }
  if (sub_1000709AC((_DWORD *)v4 + 1510))
  {
    sub_100221C84((__int128 *)v4 + 390, a3 + 6040, *((_DWORD *)v4 + 1557), (uint64_t)(v4 + 176), v6[46], (uint64_t)buf, (_DWORD *)v4[807]);
    *(_QWORD *)v93 = a3 + 6240;
    *(_QWORD *)&v93[8] = a3 + 6040;
    *(_QWORD *)&v93[16] = a3 + 6228;
    sub_101137530((uint64_t)v93, (__int128 *)buf);
    if (v105 < 0)
      operator delete(__p);
    if (v103 < 0)
      operator delete(v102);
    if (*(_DWORD *)(a3 + 6240) == 3)
    {
      if (*(double *)(a3 + 6288) < *(double *)(a3 + 6248))
      {
        *(_QWORD *)(a3 + 6288) = v4[807];
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v24 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(double *)(a3 + 6288) - *(double *)(a3 + 6248);
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v74 = *(double *)(a3 + 6288) - *(double *)(a3 + 6248);
          *(_DWORD *)v93 = 134349056;
          *(double *)&v93[4] = v74;
          v75 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", v93, 12);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v75);
          if (v75 != buf)
            free(v75);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v26 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v27 = sub_1000A9998(0xCu);
        v28 = *(double *)(a3 + 6288) - *(double *)(a3 + 6248);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithPendingAls, type, %{public}s, tte, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v67 = qword_1022A0058;
        v68 = sub_1000A9998(0xCu);
        v69 = *(double *)(a3 + 6288) - *(double *)(a3 + 6248);
        *(_DWORD *)v93 = 136446466;
        *(_QWORD *)&v93[4] = v68;
        *(_WORD *)&v93[12] = 2050;
        *(double *)&v93[14] = v69;
        LODWORD(v77) = 22;
        v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v67, 0, "@EmerFlow, ScanRequest5GHzWithPendingAls, type, %{public}s, tte, %{public}.1f", v93, v77);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v70);
        if (v70 != buf)
          free(v70);
      }
      v29 = *((double *)v4 + 807);
      v30 = sub_1006F5F9C(a3 + 6040);
      sub_10006F7CC((char *)(a3 + 6040), (uint64_t)v91);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4[818] + 16))(&v86, v4[818], 12);
      sub_101137494((uint64_t)buf, 12, v30, 1, (__int128 *)v91, (uint64_t)&v86, v29);
      sub_101136D10(a3 + 1664, (uint64_t)buf);
      if (v101 && v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      if (v98 < 0)
        operator delete(v97);
      if ((_BYTE)v90 && v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      if (v92 < 0)
        operator delete(v91[0]);
      v31 = (uint64_t **)(*(_QWORD *)(a3 + 6496) + 56);
      *(_QWORD *)buf = a3 + 1688;
      v32 = sub_10055D064(v31, (const void **)(a3 + 1688), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      ++*((_DWORD *)v32 + 14);
      v33 = *(_QWORD *)(a3 + 6496);
      sub_1015A2E04(buf, "total");
      *(_QWORD *)v93 = buf;
      v34 = sub_10006F6DC((uint64_t **)(v33 + 56), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
      ++*((_DWORD *)v34 + 14);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v35 = *(_QWORD *)(a3 + 6496);
      if (*(_BYTE *)(a3 + 1744))
        v36 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
      else
        v36 = 0;
      sub_100558AC8(*(char *)(a3 + 1664), v36, buf);
      *(_QWORD *)v93 = buf;
      v37 = sub_10006F6DC((uint64_t **)(v35 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
      ++*((_DWORD *)v37 + 14);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v38 = *(_QWORD *)(a3 + 6496);
      sub_1015A2E04(buf, "total");
      *(_QWORD *)v93 = buf;
      v39 = sub_10006F6DC((uint64_t **)(v38 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
      ++*((_DWORD *)v39 + 14);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      return;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v43 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, #emergency location update in progress, skipping state transition logic", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      *(_WORD *)v93 = 0;
      v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#post-wifi-position-calculation-state-update, #emergency location update in progress, skipping state transition logic", v93, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v44);
LABEL_138:
      if (v44 != buf)
        free(v44);
      return;
    }
    return;
  }
  if (*((_BYTE *)v4 + 808))
  {
    if (*((_BYTE *)v4 + 1624))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v41 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = sub_10021CA10((uint64_t)&buf[8], a2);
        v42 = sub_100134FD4((int *)buf);
        *(_DWORD *)v93 = 136446210;
        *(_QWORD *)&v93[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", v93, 0xCu);
        sub_100126D5C((uint64_t)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v71 = qword_1022A0058;
        *(_DWORD *)v93 = sub_10021CA10((uint64_t)&v93[8], a2);
        v72 = sub_100134FD4((int *)v93);
        v94 = 136446210;
        v95 = v72;
        v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 0, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", &v94, 12);
        sub_100126D5C((uint64_t)v93);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v73);
        if (v73 != buf)
          free(v73);
      }
      sub_10001ECE4((int *)(a3 + 6040));
      return;
    }
    if (sub_10043DDC8(a3 + 6040) == 1 && *(char *)(a2 + 48) >= 7)
    {
      if (sub_100217A98((unsigned int *)(a3 + 6040)) == 4)
      {
        v46 = v6[73];
        if (v46 != 255)
          goto LABEL_90;
      }
      else
      {
        if (v6[44] && sub_100217A98((unsigned int *)(a3 + 6040)) == 2 && !v6[2])
        {
          LOBYTE(v46) = 10;
LABEL_90:
          sub_10001947C(2u);
          v47 = *((double *)v4 + 807);
          v48 = sub_1006F5F9C(a3 + 6040);
          v49 = sub_1000709AC((_DWORD *)(a3 + 6040));
          sub_10006F7CC((char *)(a3 + 6040), (uint64_t)&v84);
          v50 = (char)v46;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4[818] + 16))(&v79, v4[818], v50);
          sub_101137494((uint64_t)buf, v50, v48, v49, &v84, (uint64_t)&v79, v47);
          sub_101136D10(a3 + 1664, (uint64_t)buf);
          sub_101136DAC((uint64_t)buf);
          if ((_BYTE)v83 && v80)
          {
            v81 = v80;
            operator delete(v80);
          }
          if (SHIBYTE(v85) < 0)
            operator delete((void *)v84);
          v51 = (uint64_t **)(*(_QWORD *)(a3 + 6496) + 56);
          *(_QWORD *)buf = a3 + 1688;
          v52 = sub_10055D064(v51, (const void **)(a3 + 1688), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          ++*((_DWORD *)v52 + 14);
          v53 = *(_QWORD *)(a3 + 6496);
          sub_1015A2E04(buf, "total");
          *(_QWORD *)v93 = buf;
          v54 = sub_10006F6DC((uint64_t **)(v53 + 56), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
          ++*((_DWORD *)v54 + 14);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v55 = *(_QWORD *)(a3 + 6496);
          if (*(_BYTE *)(a3 + 1744))
            v56 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
          else
            v56 = 0;
          sub_100558AC8(*(char *)(a3 + 1664), v56, buf);
          *(_QWORD *)v93 = buf;
          v57 = sub_10006F6DC((uint64_t **)(v55 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
          ++*((_DWORD *)v57 + 14);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v58 = *(_QWORD *)(a3 + 6496);
          sub_1015A2E04(buf, "total");
          *(_QWORD *)v93 = buf;
          v59 = sub_10006F6DC((uint64_t **)(v58 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v93);
          ++*((_DWORD *)v59 + 14);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          sub_1006F5FBC(a3 + 6040);
          goto LABEL_118;
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v60 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, dont issue a scan\"}", buf, 0x12u);
        }
        sub_10003A974(a3 + 6040, 5, 4u, v8);
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v61 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, stop after fast scan\"}", buf, 0x12u);
      }
      sub_10001ECE4((int *)(a3 + 6040));
    }
LABEL_118:
    if ((int)sub_10043DDC8(a3 + 6040) >= 2)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v62 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v63 = sub_10043DDC8(a3 + 6040);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, failed to achieve an accurate wifi location\", \"number_of_requested_scans\":%{public}d}", buf, 0x18u);
      }
      sub_10001ECE4((int *)(a3 + 6040));
    }
    if (sub_10007099C((_DWORD *)v4 + 204) && !sub_10007099C((_DWORD *)(a3 + 6040)))
      sub_10001947C(5u);
    v64 = *(_DWORD *)(a3 + 6096);
    if (v64 == 2)
    {
      v65 = 0;
      v66 = 3;
    }
    else
    {
      if (v64 != 3)
        return;
      v65 = 11;
      v66 = 5;
    }
    sub_10003A974(a3 + 6040, v66, v65, v8);
    return;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v45 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    *(_WORD *)v93 = 0;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic", v93, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v44);
    goto LABEL_138;
  }
}

void sub_1002167DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100216930(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  NSObject *v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  sub_100130820((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448)
    && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) >= 1)
    && *(_BYTE *)(a1 + 808))
  {
    v4 = *(double *)(a1 + 6232);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v9 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiTimer, set, scan, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7[0] = 67240192;
      v7[1] = (int)v4;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, set, scan, %{public}d", v7, 8);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    if (!*(_BYTE *)(a2 + 1952))
      *(_BYTE *)(a2 + 1952) = 1;
    *(double *)(a2 + 1944) = v4;
  }
}

void sub_100216B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100216B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  sub_10013087C(a3, a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 6544) + 40))(*(_QWORD *)(a1 + 6544), a2);
}

void sub_100216BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100216BC4(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  BOOL v6;
  _BYTE v7[16];
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *__p[2];
  char v13;
  uint64_t v14[4];
  char v15;
  void *v16;
  char v17;

  sub_100130938(a3, a1);
  if (*(_BYTE *)(a1 + 6451))
    v6 = *a2 == 0;
  else
    v6 = 0;
  if (v6)
  {
    sub_1015A2E04(__p, "registrant");
    sub_100225558((uint64_t)v14, 4, 0, (__int128 *)__p, *(double *)(a1 + 6456));
    if (v13 < 0)
      operator delete(__p[0]);
    sub_100221BA8((uint64_t)v7, v14);
    sub_100D784BC((uint64_t)(a3 + 708), (uint64_t)v7);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete(v8);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete((void *)v14[2]);
  }
}

void sub_100216CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  sub_10055A600((uint64_t)&a10);
  sub_10055A600((uint64_t)&a34);
  sub_10055829C(v34);
  _Unwind_Resume(a1);
}

void sub_100216CF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;

  sub_100130994((_DWORD *)a2, a1);
  sub_10017F954(a1, (uint64_t)"request", a2);
  if (*(_DWORD *)(a2 + 1564))
  {
    v4 = *(double *)(a1 + 6456);
    if (*(_BYTE *)(a2 + 1624))
    {
      sub_100225584(a2 + 6040, 2, v4);
      sub_10003A974(a2 + 6040, 5, 3u, v4);
    }
    else
    {
      sub_100225584(a2 + 6040, 1, v4);
    }
    ++*(_DWORD *)(*(_QWORD *)(a2 + 6496) + 204);
  }
}

void sub_100216DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100216DBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  int v5;
  unsigned int v6;

  sub_100130994((_DWORD *)a2, a1);
  sub_10017F954(a1, (uint64_t)"scan", a2);
  if (*(_DWORD *)(a2 + 1564))
  {
    v4 = *(double *)(a1 + 6456);
    ++*(_DWORD *)(*(_QWORD *)(a2 + 6496) + 204);
    if (*(_BYTE *)(a2 + 1624))
    {
      v5 = *(_DWORD *)(a2 + 6096);
      sub_100225584(a2 + 6040, 2, v4);
      if (v5 < 3)
        v6 = 5;
      else
        v6 = 6;
      sub_10003A974(a2 + 6040, 5, v6, v4);
    }
    else
    {
      sub_100225584(a2 + 6040, 1, v4);
    }
  }
}

void sub_100216E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100216E98(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  double v5;
  BOOL v6;
  double v7[5];

  v3 = 2 * *(_DWORD *)(a2 + 156) + 63;
  *(_DWORD *)(a2 + 84) = v3;
  if (*(double *)(a1 + 3372) >= 0.0 && *(double *)(a2 + 20) >= 0.0)
  {
    v4 = a1 + 3352;
    sub_1002433B8((uint64_t)v7);
    sub_10011E258(v7, v4, a2);
    v6 = v5 <= 35000.0 && *(_DWORD *)(a2 + 156) == 1;
    v3 = *(_DWORD *)(a2 + 84);
    if (v6)
      ++v3;
  }
  if (v3 >= 80)
    v3 = 80;
  *(_DWORD *)(a2 + 84) = v3;
}

void sub_100216F30(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_100130B38(v4, a1);
  if (*(_BYTE *)(a1 + 6448) && *(_BYTE *)(a1 + 6451))
    sub_1000AF4B4(a1, a1, a2);
  else
    sub_100130C4C((uint64_t)a2, (uint64_t)v4);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_100217004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100217020(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  _BYTE v5[2208];
  _BYTE v6[3528];

  sub_100130B38(a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    if (*(_BYTE *)(a1 + 808))
    {
      sub_1000AF4B4(a1, a1, v4);
      sub_100125B54((uint64_t)a2, (uint64_t)v4);
      sub_100125F78((uint64_t)(a2 + 202), (uint64_t)v5);
      sub_1001262B0((uint64_t)(a2 + 754), (uint64_t)v6);
      sub_100126B34((uint64_t)v6);
      sub_100126A1C((uint64_t)v5);
      sub_100126D5C((uint64_t)v4);
    }
  }
}

void sub_100217110(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100217134(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10013128C(v4, (uint64_t)a1);
  if (a1[6448] && a1[809])
    sub_10006DF18((uint64_t)a1, a1[1657], a2);
  else
    sub_100130C4C(a2, (uint64_t)v4);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_100217204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100217220(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _OWORD *v5;
  void *__p[2];
  char v7;
  void **v8;

  sub_10013128C((_DWORD *)a2, a1);
  if (!*(_BYTE *)(a1 + 6451))
  {
    if (!*(_BYTE *)(a2 + 1987))
      *(_BYTE *)(a2 + 1987) = 1;
    v4 = *(_QWORD *)(a2 + 6496);
    ++*(_DWORD *)(v4 + 240);
    sub_1015A2E04(__p, "wifiPoweredOff");
    v8 = __p;
    v5 = sub_10006F6DC((uint64_t **)(v4 + 256), (const void **)__p, (uint64_t)&unk_101B9EB60, (_OWORD **)&v8);
    ++*((_DWORD *)v5 + 14);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_1002172D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_10055829C(v15);
  _Unwind_Resume(a1);
}

void sub_100217304(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  _BYTE v19[2208];
  _BYTE v20[3528];

  sub_10013128C((_DWORD *)a3, a1);
  if (*(_BYTE *)(a1 + 6448)
    && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) >= 1)
    && *(_BYTE *)(a1 + 808))
  {
    sub_10006DF18(a1, 1, (uint64_t)&v15);
    sub_100125B54(a3, (uint64_t)&v15);
    sub_100125F78(a3 + 808, (uint64_t)v19);
    sub_1001262B0(a3 + 3016, (uint64_t)v20);
    sub_100126B34((uint64_t)v20);
    sub_100126A1C((uint64_t)v19);
    sub_100126D5C((uint64_t)&v15);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 6544) + 24))(&v15, *(_QWORD *)(a1 + 6544), *(char *)(a2 + 48));
    v6 = v15;
    if (!v18)
      v6 = 0;
    sub_100558AC8(*(char *)(a2 + 48), v6 | (v18 << 8), v12);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a3 + 6496);
    if (v7)
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_100115CE4(__p, v12[0], (unint64_t)v12[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v12;
        v11 = v13;
      }
      sub_100EFF344(v8, (__int128 *)__p, *(_DWORD *)(a3 + 1564));
      if (SHIBYTE(v11) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = v12;
      v9 = sub_10055D064((uint64_t **)(v8 + 176), (const void **)v12, (uint64_t)&unk_101B9EB60, (__int128 **)&v14);
      ++*((_DWORD *)v9 + 14);
    }
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (v18)
    {
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
    }
  }
}

void sub_100217510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28)
  {
    if (a25)
      operator delete(a25);
  }
  sub_10055829C(v28);
  _Unwind_Resume(a1);
}

void sub_100217588(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE v36[25];
  __int16 v37;
  char v38;
  _QWORD v39[4];
  int v40;
  _QWORD v41[2];
  __int16 v42;
  char v43;
  _OWORD v44[2];
  __int128 v45;
  int v46;
  __int128 v47;
  _BYTE v48[808];
  uint64_t v49;
  uint64_t v50;
  _DWORD v51[202];
  uint64_t v52;
  uint64_t v53;

  sub_100130B94(v51, a1);
  if (*(_BYTE *)(a1 + 6448) && *(_BYTE *)(a1 + 808))
  {
    v4 = *(_DWORD *)(a1 + 3352);
    v47 = *(_OWORD *)(a1 + 3356);
    v5 = *(_QWORD *)(a1 + 3372);
    v6 = *(_QWORD *)(a1 + 3380);
    v7 = *(_QWORD *)(a1 + 3388);
    v8 = *(_QWORD *)(a1 + 3396);
    v9 = *(_QWORD *)(a1 + 3404);
    v10 = *(_QWORD *)(a1 + 3412);
    v11 = *(_QWORD *)(a1 + 3420);
    v12 = *(_QWORD *)(a1 + 3428);
    v13 = *(_DWORD *)(a1 + 3436);
    v14 = *(_QWORD *)(a1 + 3440);
    v45 = *(_OWORD *)(a1 + 3448);
    v46 = *(_DWORD *)(a1 + 3464);
    v18 = *(_QWORD *)(a1 + 3468);
    v19 = v14;
    v15 = *(_DWORD *)(a1 + 3476);
    v44[0] = *(_OWORD *)(a1 + 3480);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3489);
    v42 = *(_WORD *)(a1 + 3505);
    v43 = *(_BYTE *)(a1 + 3507);
    v41[0] = sub_100223460(a1 + 3248);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    v40 = 1065353216;
    for (i = *(_QWORD **)(a1 + 1120); i; i = (_QWORD *)*i)
      sub_1000AF824((uint64_t)v39, i + 2, i + 2);
    v20 = v4;
    v21 = v47;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = v19;
    v32 = v45;
    v33 = v46;
    v34 = v18;
    v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)v36 = v44[0];
    v38 = v43;
    v37 = v42;
    sub_1000491C8(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1002234B8((_QWORD *)(a1 + 1144), (uint64_t)v48, a2);
    sub_100126B34((uint64_t)&v50);
    sub_100126A1C((uint64_t)&v49);
    sub_100126D5C((uint64_t)v48);
    sub_100067AC4((uint64_t)v39);
  }
  else
  {
    sub_100130C4C(a2, (uint64_t)v51);
  }
  sub_100126B34((uint64_t)&v53);
  sub_100126A1C((uint64_t)&v52);
  sub_100126D5C((uint64_t)v51);
}

void sub_1002177FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_10055829C((uint64_t)&a50);
  sub_100067AC4((uint64_t)&a31);
  sub_10055829C((uint64_t)&STACK[0x1AD8]);
  _Unwind_Resume(a1);
}

double sub_100217844@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_100130BF0((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    if (*(_BYTE *)(a1 + 809))
    {
      sub_100223558(a1, (uint64_t)v6);
      v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 1888) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }
  return result;
}

void sub_1002178B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

double sub_1002178CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_100130BF0((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448) && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) >= 1))
  {
    if (*(_BYTE *)(a1 + 808))
    {
      sub_100223558(a1, (uint64_t)v6);
      v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 1888) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }
  return result;
}

void sub_100217964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100217978(_QWORD *a1, double *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double *v11;

  v2 = a1[2];
  if (a1[3] == v2)
    return 0;
  v3 = a1[5];
  v4 = (_QWORD *)(v2 + 8 * (v3 >> 8));
  v5 = (double *)(*v4 + 16 * v3);
  v6 = *(_QWORD *)(v2 + (((a1[6] + v3) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*((_BYTE *)a1 + 48) + v3);
  if (v5 == (double *)v6)
    return 0;
  v7 = 1.79769313e308;
  v8 = -1.79769313e308;
  do
  {
    v9 = v5[1];
    if (v9 >= *a2 + -30.0 && v9 <= *a2)
    {
      if (*v5 > v8)
        v8 = *v5;
      if (*v5 < v7)
        v7 = *v5;
    }
    v5 += 2;
    if ((double *)((char *)v5 - *v4) == (double *)4096)
    {
      v11 = (double *)v4[1];
      ++v4;
      v5 = v11;
    }
  }
  while (v5 != (double *)v6);
  return v8 != -1.79769313e308 && v7 != 1.79769313e308 && vabdd_f64(v8, v7) < 2.5;
}

uint64_t sub_100217A4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

BOOL sub_100217A54(_DWORD *a1)
{
  return !*a1 && a1[1] == 1;
}

BOOL sub_100217A74(_DWORD *a1)
{
  return *a1 == 1;
}

BOOL sub_100217A84(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 56);
  return v1 && v1 < 5;
}

uint64_t sub_100217A98(unsigned int *a1)
{
  return *a1;
}

BOOL sub_100217AA0(_DWORD *a1)
{
  return *a1 == 1 || *a1 == 6;
}

BOOL sub_100217AB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152);
}

uint64_t sub_100217AC4()
{
  sub_100197040();
  return sub_1001B796C();
}

BOOL sub_100217AD8()
{
  return sub_10019CFA0() == 1;
}

id sub_100217AF4(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetIsBroadConnection");
}

uint64_t sub_100217B18(uint64_t a1)
{
  return sub_1001240F8(a1 + 80);
}

_QWORD *sub_100217B20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1015A2E04(a2, (&off_102191228)[*(_QWORD *)(a1 + 184) + 1]);
}

__n128 sub_100217B3C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

char *sub_100217B68@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[207] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 23), *((_QWORD *)result + 24));
  *(_OWORD *)a2 = *(_OWORD *)(result + 184);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 25);
  return result;
}

uint64_t sub_100217B94(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t *sub_100217BA0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = 0;
  if (result[1] != *result)
  {
    v3 = result;
    do
    {
      result = sub_100210524((uint64_t **)a2, &v4, (uint64_t *)&v4);
      ++v4;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 5));
  }
  return result;
}

void sub_100217C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100217C40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

BOOL sub_100217C48()
{
  return sub_10019CFA0() == 1;
}

id sub_100217C64(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "syncgetIsBroadConnection");
}

uint64_t sub_100217C88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  double *v23;
  uint64_t v24;
  double v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;

  if (!*(_BYTE *)(a1 + 1058))
    return 0;
  if (*(_BYTE *)(a1 + 1113) || *(_BYTE *)(a2 + 48) == 0)
    return 0;
  result = 0;
  if ((*(_QWORD *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a2 + 96) <= 0.0)
    return result;
  v6 = *(_QWORD *)(a1 + 608);
  if (!v6)
    return 0;
  v7 = v6 + *(_QWORD *)(a1 + 600) - 1;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8));
  v9 = v7 & 0xF;
  if (!*(_BYTE *)(v8 + 304 * (v7 & 0xF) + 48))
    return 0;
  result = 0;
  v10 = v8 + 304 * (v7 & 0xF);
  v12 = *(double *)(v10 + 96);
  v11 = (double *)(v10 + 96);
  v13 = v12;
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 <= 0.0)
    return result;
  if (vabdd_f64(*(double *)(a2 + 32), *(double *)(v8 + 304 * (v7 & 0xF) + 32)) > 4.5)
    return 0;
  if (*(_BYTE *)(a1 + 756))
    v14 = 2.07892474;
  else
    v14 = 1.0;
  if ((CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 176)) & 1) != 0)
  {
    v15 = sub_10011E634((double *)(a1 + 136), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(v8 + 304 * v9 + 56), *(double *)(v8 + 304 * v9 + 64), 0.0);
    result = 0;
    v16 = (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v17 = v15 < 0.0 && ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v15 >= 0.0)
      v16 = 0;
    v18 = (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v16;
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
      v18 = 1;
    if (((v18 | v17) & 1) != 0 || v15 > v14 * 8.86651914)
      return result;
    v19 = v15 + -4.26495435;
    if (v19 < 0.0)
      v19 = 0.0;
    if (v19 / *v11 <= v14 * 0.832554611)
      goto LABEL_56;
    return 0;
  }
  v20 = *(_QWORD *)(a1 + 576);
  if (*(_QWORD *)(a1 + 584) != v20)
  {
    v21 = *(_QWORD *)(a1 + 600);
    v22 = (_QWORD *)(v20 + 8 * (v21 >> 4));
    v23 = (double *)(*v22 + 304 * (v21 & 0xF));
    v24 = *(_QWORD *)(v20 + (((*(_QWORD *)(a1 + 608) + v21) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 304 * ((*(_DWORD *)(a1 + 608) + (_DWORD)v21) & 0xF);
    while (v23 != (double *)v24)
    {
      v25 = sub_10011E634((double *)(a1 + 136), *(double *)(a2 + 56), *(double *)(a2 + 64), v23[7], v23[8], 0.0);
      result = 0;
      v26 = (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
      v27 = v25 < 0.0 && ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
      if (v25 >= 0.0)
        v26 = 0;
      v28 = (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v26;
      if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
        v28 = 1;
      if (((v28 | v27) & 1) != 0 || v25 > v14 * 8.86651914)
        return result;
      v29 = v25 + -4.26495435;
      if (v29 < 0.0)
        v29 = 0.0;
      if (v29 / v23[12] > v14 * 0.832554611)
        return 0;
      v23 += 38;
      if ((double *)((char *)v23 - *v22) == (double *)4864)
      {
        v30 = (double *)v22[1];
        ++v22;
        v23 = v30;
      }
    }
  }
LABEL_56:
  if (*(_BYTE *)(a2 + 144))
  {
    v31 = *(double *)(a2 + 152);
    if (v31 >= 0.0)
    {
      v32 = *(double *)(a2 + 160);
      if (v32 > 0.0)
      {
        if (v31 > v14 * 2.01287076)
          return 0;
        v33 = v31 + -0.968226852;
        if (v33 < 0.0)
          v33 = 0.0;
        if (v33 / v32 > v14 * 0.832554611)
          return 0;
      }
    }
  }
  if (*(_BYTE *)(a1 + 88)
    && *(_BYTE *)(a1 + 312)
    && ((CLMotionActivity::isTypeWalking(*(unsigned int *)(a1 + 320)) & 1) != 0
     || (CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 320), v34) & 1) != 0
     || (CLMotionActivity::isTypeCycling(*(unsigned int *)(a1 + 320)) & 1) != 0
     || CLMotionActivity::isTypeSwimming(*(unsigned int *)(a1 + 320))))
  {
    return (!CLMotionActivity::isTypeWalking(*(unsigned int *)(a1 + 320))
         || (CLMotionActivity::isTypePedestrian(*(unsigned int *)(a1 + 176)) & 1) == 0 && *(_DWORD *)(a1 + 176) != 62)
        && (!CLMotionActivity::isTypeRunning(*(unsigned int *)(a1 + 320), v35)
         || (CLMotionActivity::isTypePedestrian(*(unsigned int *)(a1 + 176)) & 1) == 0 && *(_DWORD *)(a1 + 176) != 62)
        && (!CLMotionActivity::isTypeCycling(*(unsigned int *)(a1 + 320))
         || (CLMotionActivity::isTypeCycling(*(unsigned int *)(a1 + 176)) & 1) == 0)
        && (!CLMotionActivity::isTypeSwimming(*(unsigned int *)(a1 + 320))
         || (CLMotionActivity::isTypeSwimming(*(unsigned int *)(a1 + 176)) & 1) == 0);
  }
  result = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 176));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_1002180E4(uint64_t a1)
{
  uint64_t result;

  sub_100197040();
  if ((sub_1000C4240() & 1) != 0)
    return (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0
         || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 8) != 0)
        && *(_BYTE *)(a1 + 1696) != 0;
  sub_100197040();
  if ((sub_100081BD0() & 1) != 0)
    return (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0
         || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 8) != 0)
        && *(_BYTE *)(a1 + 1696) != 0;
  sub_100197040();
  if ((sub_10075C028() & 1) != 0)
    return (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0
         || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 8) != 0)
        && *(_BYTE *)(a1 + 1696) != 0;
  sub_100197040();
  result = sub_10011E0F0();
  if ((_DWORD)result)
    return (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 2) != 0
         || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56)) & 8) != 0)
        && *(_BYTE *)(a1 + 1696) != 0;
  return result;
}

uint64_t sub_10021816C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v3))
    v4 = sub_100219C4C(*(_QWORD *)(a1 + 80));
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v4;
}

void sub_1002181F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100218208(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM StepCountHistory ORDER BY startTime ASC LIMIT 1");
  return 2;
}

void sub_1002182F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100218314(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD v8[11];
  _QWORD *v9;
  __int16 v10;

  v5 = a1 + 14;
  v4 = a1[14];
  v9 = a1 + 14;
  (*(void (**)(_QWORD *))(v4 + 16))(a1 + 14);
  v10 = 256;
  memset(v8, 0, sizeof(v8));
  v6 = (*(uint64_t (**)(_QWORD *, _OWORD *))(*a1 + 176))(a1, v8);
  if (!(_DWORD)v6)
    *a2 = *((_QWORD *)&v8[0] + 1);
  (*(void (**)(_QWORD *))(*v5 + 24))(v5);
  return v6;
}

void sub_1002183BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10187E514(v1 - 56);
  _Unwind_Resume(a1);
}

BOOL sub_1002183D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 16) == 0.0
      && *(_DWORD *)(a2 + 24) == *(_DWORD *)(a3 + 24)
      && *(double *)(a2 + 72) == *(double *)(a3 + 72)
      && *(_DWORD *)(a2 + 144) == *(_DWORD *)(a3 + 144)
      && *(_DWORD *)(a2 + 148) == *(_DWORD *)(a3 + 148)
      && *(double *)(a2 + 32) == *(double *)(a3 + 32)
      && *(double *)(a2 + 80) == *(double *)(a3 + 80);
}

double sub_100218448(uint64_t a1)
{
  _BOOL4 v1;
  double result;
  uint64_t v3;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  v1 = sub_100AD19A8(*(_QWORD **)a1, (uint64_t)&v5, v4, *(double *)(a1 + 32) + 5.0);
  result = -1.0;
  if (v1)
  {
    v3 = *((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1) == *(_QWORD *)v6)
      v3 = *(_QWORD *)(v6 - 8) + 4032;
    return *(double *)(v3 - 192);
  }
  return result;
}

double sub_1002184B0(uint64_t a1)
{
  _BOOL4 v1;
  double result;
  uint64_t v3;
  _OWORD v4[2];
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  v1 = sub_100AD19A8(*(_QWORD **)a1, (uint64_t)&v5, v4, *(double *)(a1 + 24) + 5.0);
  result = -1.0;
  if (v1)
  {
    v3 = *((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1) == *(_QWORD *)v6)
      v3 = *(_QWORD *)(v6 - 8) + 4032;
    return *(double *)(v3 - 192);
  }
  return result;
}

double sub_100218518(_QWORD **a1, double a2)
{
  double v2;
  uint64_t v4;
  uint64_t v6;

  v2 = a2;
  v6 = 0;
  if (!sub_1002185C0(a2, (uint64_t)a1, *a1, (double *)&v6))
  {
    v4 = (*a1)[8];
    if (v4)
      return *(double *)(*(_QWORD *)((*a1)[4] + 8 * ((v4 + (*a1)[7] - 1) / 0x15uLL))
                       + 192 * ((v4 + (*a1)[7] - 1) % 0x15uLL));
    else
      return -1.79769313e308;
  }
  return v2;
}

BOOL sub_1002185C0(double a1, uint64_t a2, _QWORD *a3, double *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  result = sub_100AD19A8(a3, (uint64_t)&v31, &v29, a1);
  if (result)
  {
    v7 = *((_QWORD *)&v32 + 1);
    v8 = *(_QWORD *)v32;
    v9 = *((_QWORD *)&v32 + 1) - *(_QWORD *)v32;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 6);
    v11 = v10 - 1;
    if (v9 < 193)
    {
      v15 = ((21 - v10) * (unsigned __int128)0x8618618618618619) >> 64;
      v16 = v15 + ((21 - v10 - v15) >> 1);
      v13 = *(_QWORD *)(v32 - 8 * (v16 >> 4));
      v14 = v13 + 192 * (v10 - 21 + 21 * (v16 >> 4)) + 3840;
      if (v14 == *((_QWORD *)&v30 + 1))
        return 0;
      v12 = -(uint64_t)(v16 >> 4);
    }
    else
    {
      v12 = v11 / 0x15;
      v13 = *(_QWORD *)(v32 + 8 * (v11 / 0x15));
      v14 = v13 + 192 * (v11 % 0x15);
      if (v14 == *((_QWORD *)&v30 + 1))
        return 0;
    }
    if (v14 == v13)
      v14 = *(_QWORD *)(v32 + 8 * v12 - 8) + 4032;
    if (*(double *)(v14 - 192) > a1)
      return 0;
    v17 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) == v8)
      v17 = *(_QWORD *)(v32 - 8) + 4032;
    if (*(double *)(v17 - 192) <= a1)
      return 0;
    if (v9 < 193)
    {
      v21 = ((21 - v10) * (unsigned __int128)0x8618618618618619) >> 64;
      v22 = (v21 + ((21 - v10 - v21) >> 1)) >> 4;
      v18 = -(uint64_t)v22;
      v19 = *(_QWORD *)(v32 - 8 * v22);
      v20 = v19 + 192 * (v10 - 21 + 21 * v22) + 3840;
    }
    else
    {
      v18 = v11 / 0x15;
      v19 = *(_QWORD *)(v32 + 8 * (v11 / 0x15));
      v20 = v19 + 192 * (v11 % 0x15);
    }
    if (v20 == v19)
      v20 = *(_QWORD *)(v32 + 8 * v18 - 8) + 4032;
    if (v9 < 193)
    {
      v26 = 21 - v10;
      v27 = ((21 - v10) * (unsigned __int128)0x8618618618618619) >> 64;
      v28 = (v27 + ((v26 - v27) >> 1)) >> 4;
      v23 = -(uint64_t)v28;
      v24 = *(_QWORD *)(v32 - 8 * v28);
      v25 = v24 + 192 * (21 * v28 - v26) + 3840;
    }
    else
    {
      v23 = v11 / 0x15;
      v24 = *(_QWORD *)(v32 + 8 * (v11 / 0x15));
      v25 = v24 + 192 * (v11 % 0x15);
    }
    if (v25 == v24)
      v25 = *(_QWORD *)(v32 + 8 * v23 - 8) + 4032;
    if (*((_QWORD *)&v32 + 1) == v8)
      v7 = *(_QWORD *)(v32 - 8) + 4032;
    *a4 = sub_1002446AC(*(double *)(v20 - 192), *(double *)(v25 - 144), *(double *)(v7 - 192), *(double *)(v7 - 144), a1);
    return 1;
  }
  return result;
}

uint64_t sub_100218884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 448), &v7);
  v4 = sub_10003A094(&v7, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1002188F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL sub_10021891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 32) <= *(double *)(a2 + 32);
}

BOOL sub_100218930(uint64_t a1, double *a2, double a3, double a4)
{
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  uint8_t *v9;
  double v12;
  double v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  uint8_t buf[4];
  double v19;
  __int16 v20;
  double v21;

  v12 = 0.0;
  v13 = 0.0;
  *a2 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      result = sub_100208740(a1, &v13, a3);
      if (!result)
        return result;
      result = sub_100208740(a1, &v12, a4);
      if (!result)
        return result;
      *a2 = v12 - v13;
    }
    return 1;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v19 = a3;
    v20 = 2050;
    v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v14 = 134349312;
    v15 = a3;
    v16 = 2050;
    v17 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", &v14, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::getOdometerDistance(CFAbsoluteTime, CFAbsoluteTime, double &) const", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

uint64_t sub_100218B50(uint64_t a1)
{
  if (sub_100CDEAF8(a1))
    return 1;
  if (*(_DWORD *)(a1 + 160) == 1)
    return CLMotionActivity::isTypeIndoorPedestrian(*(unsigned int *)(a1 + 168));
  return 0;
}

uint64_t sub_100218B9C(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *a2 = 0u;
  a2[1] = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v8, &v6);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1) == *((_QWORD *)&v7 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v9 == *((_QWORD *)&v9 + 1))
        v4 = *(_QWORD *)(v9 - 8) + 4096;
      v5 = *(_OWORD *)(v4 - 16);
      *a2 = *(_OWORD *)(v4 - 32);
      a2[1] = v5;
      return 1;
    }
  }
  return result;
}

uint64_t sub_100218C24(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *a2 = 0;
  a2[1] = 0;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v7, &v5);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1) == *((_QWORD *)&v6 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v8 == *((_QWORD *)&v8 + 1))
        v4 = *(_QWORD *)(v8 - 8) + 4096;
      *(_OWORD *)a2 = *(_OWORD *)(v4 - 16);
      return 1;
    }
  }
  return result;
}

BOOL sub_100218CAC(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 8));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 16 * v4;
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 >> 8));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 16 * v9;
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 4096;
      v19 = vabdd_f64(*(double *)(v18 - 16), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 4096;
        v15 = v19;
        if (*(double *)(v20 - 16) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 4096;
      }
      v16 -= 16;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

uint64_t sub_100218DC8(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v8, &v6);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1) == *((_QWORD *)&v7 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v9 == *((_QWORD *)&v9 + 1))
        v4 = *(_QWORD *)(v9 - 8) + 4080;
      v5 = *(_OWORD *)(v4 - 24);
      a2[2] = *(_QWORD *)(v4 - 8);
      *(_OWORD *)a2 = v5;
      return 1;
    }
  }
  return result;
}

BOOL sub_100218E5C(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 8 * (*(_QWORD *)(a1 + 56) >> 7));
  if (*(_QWORD *)(a1 + 40) == v4)
    v6 = 0;
  else
    v6 = *v5 + 32 * (*(_QWORD *)(a1 + 56) & 0x7FLL);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (uint64_t *)(v9 + 8 * (v8 >> 7));
  if (*(_QWORD *)(a1 + 40) == v9)
    v11 = 0;
  else
    v11 = *v10 + 32 * (v8 & 0x7F);
  v12 = a3[3];
  if (v11 != v12)
  {
    v13 = *v10;
    v14 = 1.79769313e308;
    v15 = v11;
    v16 = v10;
    while (1)
    {
      v17 = v15;
      if (v15 == v13)
        v17 = *(v16 - 1) + 4096;
      v18 = vabdd_f64(*(double *)(v17 - 32), a4);
      if (v18 < v14 && v18 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v15;
        v13 = *v16;
        v19 = v15;
        if (v15 == *v16)
          v19 = *(v16 - 1) + 4096;
        v14 = v18;
        if (*(double *)(v19 - 32) == a4)
          break;
      }
      if (v15 == v13)
      {
        v20 = *--v16;
        v13 = v20;
        v15 = v20 + 4096;
      }
      v15 -= 32;
      v12 = a3[3];
      if (v15 == v12)
        return v12 != *(_QWORD *)(a2 + 24);
    }
    v12 = a3[3];
  }
  return v12 != *(_QWORD *)(a2 + 24);
}

BOOL sub_100218F80(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0xAA));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 24 * (v4 % 0xAA);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0xAA));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 24 * (v9 % 0xAA);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 4080;
      v19 = vabdd_f64(*(double *)(v18 - 24), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 4080;
        v15 = v19;
        if (*(double *)(v20 - 24) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 4080;
      }
      v16 -= 24;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

BOOL sub_1002190C4(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 8 * (*(_QWORD *)(a1 + 56) >> 4));
  if (*(_QWORD *)(a1 + 40) == v4)
    v6 = 0;
  else
    v6 = *v5 + 320 * (*(_QWORD *)(a1 + 56) & 0xFLL);
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (uint64_t *)(v9 + 8 * (v8 >> 4));
  if (*(_QWORD *)(a1 + 40) == v9)
    v11 = 0;
  else
    v11 = *v10 + 320 * (v8 & 0xF);
  v12 = a3[3];
  if (v11 != v12)
  {
    v13 = *v10;
    v14 = 1.79769313e308;
    v15 = v11;
    v16 = v10;
    while (1)
    {
      v17 = v15;
      if (v15 == v13)
        v17 = *(v16 - 1) + 5120;
      v18 = vabdd_f64(*(double *)(v17 - 320), a4);
      if (v18 < v14 && v18 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v15;
        v13 = *v16;
        v19 = v15;
        if (v15 == *v16)
          v19 = *(v16 - 1) + 5120;
        v14 = v18;
        if (*(double *)(v19 - 320) == a4)
          break;
      }
      if (v15 == v13)
      {
        v20 = *--v16;
        v13 = v20;
        v15 = v20 + 5120;
      }
      v15 -= 320;
      v12 = a3[3];
      if (v15 == v12)
        return v12 != *(_QWORD *)(a2 + 24);
    }
    v12 = a3[3];
  }
  return v12 != *(_QWORD *)(a2 + 24);
}

uint64_t sub_1002191FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v15, &v13);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1) == *((_QWORD *)&v14 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v16 == *((_QWORD *)&v16 + 1))
        v4 = *(_QWORD *)(v16 - 8) + 4032;
      v5 = *(_OWORD *)(v4 - 168);
      v6 = *(_OWORD *)(v4 - 136);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(v4 - 152);
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)a2 = v5;
      v7 = *(_OWORD *)(v4 - 120);
      v8 = *(_OWORD *)(v4 - 104);
      v9 = *(_OWORD *)(v4 - 72);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(v4 - 88);
      *(_OWORD *)(a2 + 96) = v9;
      *(_OWORD *)(a2 + 48) = v7;
      *(_OWORD *)(a2 + 64) = v8;
      v10 = *(_OWORD *)(v4 - 56);
      v11 = *(_OWORD *)(v4 - 40);
      v12 = *(_OWORD *)(v4 - 24);
      *(_QWORD *)(a2 + 160) = *(_QWORD *)(v4 - 8);
      *(_OWORD *)(a2 + 128) = v11;
      *(_OWORD *)(a2 + 144) = v12;
      *(_OWORD *)(a2 + 112) = v10;
      return 1;
    }
  }
  return result;
}

BOOL sub_1002192D8(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x18));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 168 * (v4 % 0x18);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0x18));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 168 * (v9 % 0x18);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 4032;
      v19 = vabdd_f64(*(double *)(v18 - 168), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 4032;
        v15 = v19;
        if (*(double *)(v20 - 168) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 4032;
      }
      v16 -= 168;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

uint64_t sub_10021941C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v14, &v12);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) == *((_QWORD *)&v13 + 1))
    {
      return 0;
    }
    else
    {
      if (*(_QWORD *)v15 == *((_QWORD *)&v15 + 1))
        v4 = *(_QWORD *)(v15 - 8) + 3952;
      v5 = *(_OWORD *)(v4 - 136);
      *(_OWORD *)a2 = *(_OWORD *)(v4 - 152);
      *(_OWORD *)(a2 + 16) = v5;
      v6 = *(_OWORD *)(v4 - 120);
      v7 = *(_OWORD *)(v4 - 104);
      v8 = *(_OWORD *)(v4 - 72);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v4 - 88);
      *(_OWORD *)(a2 + 80) = v8;
      *(_OWORD *)(a2 + 32) = v6;
      *(_OWORD *)(a2 + 48) = v7;
      v9 = *(_OWORD *)(v4 - 56);
      v10 = *(_OWORD *)(v4 - 40);
      v11 = *(_OWORD *)(v4 - 24);
      *(_QWORD *)(a2 + 144) = *(_QWORD *)(v4 - 8);
      *(_OWORD *)(a2 + 112) = v10;
      *(_OWORD *)(a2 + 128) = v11;
      *(_OWORD *)(a2 + 96) = v9;
      return 1;
    }
  }
  return result;
}

BOOL sub_1002194F0(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x1A));
  if (*(_QWORD *)(a1 + 40) == v5)
    v7 = 0;
  else
    v7 = *v6 + 152 * (v4 % 0x1A);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (uint64_t *)(v10 + 8 * (v9 / 0x1A));
  if (*(_QWORD *)(a1 + 40) == v10)
    v12 = 0;
  else
    v12 = *v11 + 152 * (v9 % 0x1A);
  v13 = a3[3];
  if (v12 != v13)
  {
    v14 = *v11;
    v15 = 1.79769313e308;
    v16 = v12;
    v17 = v11;
    while (1)
    {
      v18 = v16;
      if (v16 == v14)
        v18 = *(v17 - 1) + 3952;
      v19 = vabdd_f64(*(double *)(v18 - 112), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v16;
        v14 = *v17;
        v20 = v16;
        if (v16 == *v17)
          v20 = *(v17 - 1) + 3952;
        v15 = v19;
        if (*(double *)(v20 - 112) == a4)
          break;
      }
      if (v16 == v14)
      {
        v21 = *--v17;
        v14 = v21;
        v16 = v21 + 3952;
      }
      v16 -= 152;
      v13 = a3[3];
      if (v16 == v13)
        return v13 != *(_QWORD *)(a2 + 24);
    }
    v13 = a3[3];
  }
  return v13 != *(_QWORD *)(a2 + 24);
}

__n128 sub_10021963C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v3 = *a3;
  v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  result = (__n128)a3[7];
  v9 = a3[8];
  v10 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v10;
  *(__n128 *)(a2 + 112) = result;
  *(_OWORD *)(a2 + 128) = v9;
  return result;
}

BOOL sub_100219670(uint64_t a1)
{
  return *(_BYTE *)(a1 + 136) && *(_DWORD *)(a1 + 88) > 0;
}

void sub_100219690(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  double v9;
  NSObject *v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  int v30;
  double v31;
  int v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint8_t buf[4];
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;

  v31 = 0.0;
  v8 = sub_100218314(*(_QWORD **)(a1 + 128), &v31);
  v9 = *a2;
  if (!v8)
  {
    if (v9 < v31)
      v9 = v31;
    *a2 = v9;
  }
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  sub_100087DE0(*(_QWORD *)(a1 + 128), 0, a4, v9, *a3);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8900);
  v10 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a2;
    v12 = *a3;
    v13 = *(_DWORD *)a4;
    v14 = *(_QWORD *)(a4 + 8);
    v15 = *(_QWORD *)(a4 + 16);
    v16 = *(_DWORD *)(a4 + 32);
    v17 = *(_DWORD *)(a4 + 36);
    v18 = *(_QWORD *)(a4 + 40);
    *(_DWORD *)buf = 134219776;
    v49 = v11;
    v50 = 2048;
    v51 = v12;
    v52 = 1024;
    v53 = v13;
    v54 = 2048;
    v55 = v14;
    v56 = 2048;
    v57 = v15;
    v58 = 1024;
    v59 = v16;
    v60 = 1024;
    v61 = v17;
    v62 = 2048;
    v63 = v18;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Query (%f, %f): %d, %f, %f, %d, %d, %f", buf, 0x46u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8900);
    v19 = *a2;
    v20 = *a3;
    v21 = *(_DWORD *)a4;
    v22 = *(_QWORD *)(a4 + 8);
    v23 = *(_QWORD *)(a4 + 16);
    v24 = *(_DWORD *)(a4 + 32);
    v25 = *(_DWORD *)(a4 + 36);
    v26 = *(_QWORD *)(a4 + 40);
    v32 = 134219776;
    v33 = v19;
    v34 = 2048;
    v35 = v20;
    v36 = 1024;
    v37 = v21;
    v38 = 2048;
    v39 = v22;
    v40 = 2048;
    v41 = v23;
    v42 = 1024;
    v43 = v24;
    v44 = 1024;
    v45 = v25;
    v46 = 2048;
    v47 = v26;
    LODWORD(v29) = 70;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Query (%f, %f): %d, %f, %f, %d, %d, %f", COERCE_DOUBLE(&v32), v29, v30, v31);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "CLStepDistance CLStepCountNotifier::query(CFAbsoluteTime &, CFAbsoluteTime &) const", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
}

uint64_t sub_100219944(uint64_t a1)
{
  uint64_t result;
  double v2[8];

  LODWORD(result) = (*(uint64_t (**)(_QWORD, double *, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v2, *(double *)(a1 + 112));
  if (v2[1] == 0.0)
    return 0;
  else
    return result;
}

void sub_100219984(uint64_t a1, void *aBlock)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = _Block_copy(aBlock);
  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000C42C;
  v5[3] = &unk_1021380D0;
  v5[4] = v3;
  v5[5] = a1;
  sub_1000A57FC(v4, (uint64_t)v5);
}

BOOL sub_1002199F0(uint64_t a1, double a2, double a3)
{
  double v3;

  v3 = *(double *)(a1 + 40);
  return vabdd_f64(a2, v3) > a3 || v3 < 0.0;
}

uint64_t sub_100219A0C(uint64_t a1)
{
  return (*(unsigned int *)(a1 + 664) < 0x39uLL) & (0x110000000000C20uLL >> *(_DWORD *)(a1 + 664));
}

uint64_t sub_100219A2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_100219A3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 187);
}

uint64_t sub_100219A44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 185);
}

const char *sub_100219A4C()
{
  return "IdleState";
}

const char *sub_100219A58()
{
  return "NotAllowedState";
}

_QWORD *sub_100219A64@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "RavenControllerBestEffortState");
}

BOOL sub_100219A74(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 3;
}

BOOL sub_100219A84(uint64_t a1)
{
  return *(double *)(a1 + 152) != 1.79769313e308;
}

uint64_t sub_100219A9C(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_DWORD *)(a1 + 76) == -1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197BD0);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "fScore is not initialized!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197BD0);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "fScore is not initialized!", v5, 2);
      sub_100512490("Generic", 1, 0, 0, "int CLWifiAPLocation::score() const", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return *(unsigned int *)(a1 + 76);
}

BOOL sub_100219C3C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 1;
}

uint64_t sub_100219C4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

void sub_100219C54(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1232);
  if (v2)
    sub_10023FCD4(v2, a2);
}

BOOL sub_100219C64(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) & 0xFFFFFFFB) == 0;
}

uint64_t sub_100219C74(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  _BOOL4 v5;

  if (*(double *)(a1 + 20) <= 0.0)
    return 0;
  result = 0;
  if (*(double *)(a1 + 36) > 0.0)
  {
    v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }
  return result;
}

BOOL sub_100219D08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  CFTypeRef cf;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_100527038(cf, a3);
  if (!v6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v20 = v8;
      v21 = 2112;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v15 = 138412546;
      v16 = v11;
      v17 = 2112;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v15, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CLNameValuePair &, int) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_100219F40(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;

  *a3 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
  if ((_DWORD)v4 && *a3)
    CFAutorelease(*a3);
  return v4;
}

#error "100219FF8: call analysis failed (funcsize=70)"

CFIndex sub_10021A0E4(uint64_t a1, CFStringRef key)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFTypeID v4;
  CFIndex Count;

  v2 = (const __CFArray *)CFPreferencesCopyValue(key, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID())
    Count = CFArrayGetCount(v3);
  else
    Count = 1;
  CFRelease(v3);
  return Count;
}

BOOL sub_10021A15C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  char *v20;
  id v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  id v33;
  _BYTE v34[128];
  __int128 v35;

  result = sub_10021A518(a1);
  if (result)
  {
    if ((objc_msgSend(*(id *)(a1 + 8), "wifiAssociated") & 1) != 0)
      return 0;
    v5 = *(void **)(a1 + 8);
    if (!v5)
      goto LABEL_45;
    objc_msgSend(v5, "lastPrefetchTimestamp");
    if (!buf[0])
      goto LABEL_45;
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      objc_msgSend(v6, "lastPrefetchTimestamp");
      v6 = *(void **)(a1 + 8);
    }
    else
    {
      v35 = 0uLL;
    }
    v7 = objc_msgSend(v6, "lastIndoorError");
    if (!*(_BYTE *)v7)
      sub_1018ECB3C((uint64_t)v7, v8, v9);
    if ((_BYTE)v35 && v7[1] < *((uint64_t *)&v35 + 1))
    {
      return 0;
    }
    else
    {
LABEL_45:
      if (objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"))
      {
        if (objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded"))
        {
          v10 = objc_msgSend(*(id *)(a1 + 8), "locationGroups");
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v29;
            do
            {
              v13 = 0;
              do
              {
                if (*(_QWORD *)v29 != v12)
                  objc_enumerationMutation(v10);
                v14 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v13);
                if (objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "containsObject:", objc_msgSend(CFSTR("G"), "stringByAppendingString:", objc_msgSend(v14, "groupId"))))
                {
                  v15 = objc_msgSend(v14, "getLocationIds");
                  if (*v15 == v15[1])
                  {
                    if (qword_1022A0040 != -1)
                      dispatch_once(&qword_1022A0040, &stru_102129DE0);
                    v16 = qword_1022A0048;
                    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
                    {
                      v17 = objc_msgSend(v14, "groupId");
                      *(_DWORD *)buf = 138412290;
                      v33 = v17;
                      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Skipping location group %@ - it has no floors", buf, 0xCu);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0040 != -1)
                        dispatch_once(&qword_1022A0040, &stru_102129DE0);
                      v18 = qword_1022A0048;
                      v19 = objc_msgSend(v14, "groupId");
                      LODWORD(v35) = 138412290;
                      *(_QWORD *)((char *)&v35 + 4) = v19;
                      LODWORD(v27) = 12;
                      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "#Warning Skipping location group %@ - it has no floors", &v35, v27);
                      sub_100512490("Generic", 1, 0, 2, "BOOL CLIndoorLogic::shouldBackoffFromWifiOnlyDownloadError(std::chrono::steady_clock::time_point) const", "%s\n", v20);
                      if (v20 != (char *)buf)
                        free(v20);
                    }
                  }
                  else if ((+[CLLocationContextUtil isIndoor:](CLLocationContextUtil, "isIndoor:", objc_msgSend(v14, "locationContext")) & 1) != 0)
                  {
                    return 0;
                  }
                }
                v13 = (char *)v13 + 1;
              }
              while (v11 != v13);
              v21 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
              v11 = v21;
            }
            while (v21);
          }
        }
      }
      v22 = objc_msgSend(*(id *)(a1 + 8), "lastIndoorError");
      v25 = v22;
      if (!*v22)
        sub_1018ECB3C((uint64_t)v22, v23, v24);
      if (sub_10021A518(a1))
        v26 = 300000000000;
      else
        v26 = (uint64_t)objc_msgSend(*(id *)(a1 + 16), "errorBackoffDuration");
      return *((_QWORD *)v25 + 1) + v26 > a2;
    }
  }
  return result;
}

BOOL sub_10021A518(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "lastIndoorError"))
    return 0;
  v2 = objc_msgSend(*(id *)(a1 + 8), "lastIndoorError");
  if (!*(_BYTE *)v2)
    sub_1018ECB3C((uint64_t)v2, v3, v4);
  return v2[4] == 4;
}

uint64_t sub_10021A56C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_102305B00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102305B00))
  {
    sub_100197040();
    byte_102305AF8 = (sub_1001B796C() & 8) != 0;
    __cxa_guard_release(&qword_102305B00);
  }
  return byte_102305AF8;
}

void sub_10021A5CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102305B00);
  _Unwind_Resume(a1);
}

double sub_10021A5E4(uint64_t a1)
{
  int v2;
  double v3;
  double v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v2 = sub_10007C9C8(a1);
  if ((v2 - 1) < 2)
    return *(double *)(a1 + 1144);
  v3 = 0.0;
  if (v2 != 3)
    return v3;
  sub_100197040();
  if ((sub_100195F08() & 1) == 0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102198D98);
    v5 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[PaceController] getPace - invalid output configuration!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return v3;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102198D98);
    v13[0] = 0;
    v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "[PaceController] getPace - invalid output configuration!", v13, 2);
    v8 = v7;
    sub_100512490("Generic", 1, 0, 0, "double CLPedometer::PaceController::getPace() const", "%s\n", v6);
LABEL_26:
    if (v8 != buf)
      free(v8);
    return v3;
  }
  if (*(_BYTE *)(a1 + 496))
  {
    v4 = *(double *)(a1 + 488);
    if (v4 == 0.0)
      return 0.0;
    else
      return 1.0 / v4;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_102198D98);
  v9 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[PaceController] getPace - RunningSpeedKF pace invalid", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_102198D98);
    v13[0] = 0;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 1, "[PaceController] getPace - RunningSpeedKF pace invalid", v13, 2);
    v8 = v12;
    sub_100512490("Generic", 1, 0, 2, "double CLPedometer::PaceController::getPace() const", "%s\n", v11);
    goto LABEL_26;
  }
  return v3;
}

void sub_10021A8E8(uint64_t a1)
{
  double Current;
  double v3;
  double v4;
  double v6;
  double v7;
  NSObject *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  double v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = fabs(Current);
  v4 = 315360000.0;
  if ((*(_QWORD *)&Current & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 > 2.22044605e-16)
  {
    v6 = *(double *)(a1 + 2272);
    v7 = fabs(v6);
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 > 2.22044605e-16)
      v4 = vabdd_f64(Current, v6);
  }
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,durationSinceStartMonitoringTimeSec,%{private}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
      v22 = 134283521;
      v23 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#gnssca,AssistanceFileCountMetrics,durationSinceStartMonitoringTimeSec,%{private}.3lf", &v22, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitAssistanceFileDownloadMetrics()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  if (fabs(v4) <= *(double *)(a1 + 2264))
  {
    sub_10018A798(a1);
  }
  else
  {
    v10 = (double *)(a1 + 2272);
    v11 = sub_10073C788();
    sub_100741864(v11, (int *)(a1 + 2176));
    sub_101751EB0(a1);
    *(_OWORD *)(a1 + 2192) = 0u;
    *(_OWORD *)(a1 + 2176) = 0u;
    *(CFAbsoluteTime *)(a1 + 2272) = CFAbsoluteTimeGetCurrent();
    v12 = sub_1001FD94C();
    sub_10018A534(v12, CFSTR("AssistanceFileMetricsStartMonitoringCFAbsTime"), (const void *)(a1 + 2272));
    v13 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 944))(v13);
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
      v14 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v15 = *v10;
        *(_DWORD *)buf = 134283521;
        v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Restore TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CE0B0);
        v16 = *v10;
        v22 = 134283521;
        v23 = v16;
        LODWORD(v21) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#gnssca,AssistanceFileCountMetrics,Restore TimeOfLastAssistanceFileMetricsUploadInSeconds,%{private}lf", &v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitAssistanceFileDownloadMetrics()", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
  }
}

uint64_t *sub_10021ACB8(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *result;
  unsigned __int8 v10[8];
  uint64_t v11;

  v1 = a1 + 1288;
  v2 = (unsigned __int8 *)(a1 + 1320);
  v3 = *(_QWORD *)(a1 + 1296);
  v4 = *(unsigned __int8 *)(a1 + 1320);
  if (!v3)
    goto LABEL_12;
  v5 = a1 + 1296;
  do
  {
    v6 = *(unsigned __int8 *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 1296 || v4 < *(unsigned __int8 *)(v5 + 32))
  {
LABEL_12:
    v10[0] = *(_BYTE *)(a1 + 1320);
    v11 = 0;
    sub_1017532AC((uint64_t **)(a1 + 1288), v10, (uint64_t)v10);
  }
  result = sub_100212174(v1, v2);
  ++*result;
  return result;
}

uint64_t sub_10021AD54(double *a1)
{
  uint64_t result;
  double v3;

  result = 0;
  v3 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 25.0)
            {
              if (v3 >= 30.0)
              {
                if (v3 >= 35.0)
                {
                  if (v3 >= 40.0)
                  {
                    if (v3 >= 45.0)
                    {
                      if (v3 >= 50.0)
                      {
                        if (v3 >= 55.0)
                        {
                          if (v3 >= 60.0)
                          {
                            if (v3 >= 65.0)
                            {
                              if (v3 >= 70.0)
                              {
                                if (v3 >= 75.0)
                                {
                                  if (v3 >= 80.0)
                                  {
                                    if (v3 >= 85.0)
                                    {
                                      if (v3 >= 90.0)
                                      {
                                        if (v3 >= 95.0)
                                        {
                                          if (v3 >= 100.0)
                                          {
                                            if (v3 >= 110.0)
                                            {
                                              if (v3 >= 120.0)
                                              {
                                                if (v3 >= 130.0)
                                                {
                                                  if (v3 >= 140.0)
                                                  {
                                                    if (v3 >= 150.0)
                                                    {
                                                      if (v3 >= 160.0)
                                                      {
                                                        if (v3 >= 170.0)
                                                        {
                                                          if (v3 >= 180.0)
                                                          {
                                                            if (v3 >= 190.0)
                                                            {
                                                              if (v3 >= 200.0)
                                                                return 31;
                                                              else
                                                                return 30;
                                                            }
                                                            else
                                                            {
                                                              return 29;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            return 28;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          return 27;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        return 26;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      return 25;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    return 24;
                                                  }
                                                }
                                                else
                                                {
                                                  return 23;
                                                }
                                              }
                                              else
                                              {
                                                return 22;
                                              }
                                            }
                                            else
                                            {
                                              return 21;
                                            }
                                          }
                                          else
                                          {
                                            return 20;
                                          }
                                        }
                                        else
                                        {
                                          return 19;
                                        }
                                      }
                                      else
                                      {
                                        return 18;
                                      }
                                    }
                                    else
                                    {
                                      return 17;
                                    }
                                  }
                                  else
                                  {
                                    return 16;
                                  }
                                }
                                else
                                {
                                  return 15;
                                }
                              }
                              else
                              {
                                return 14;
                              }
                            }
                            else
                            {
                              return 13;
                            }
                          }
                          else
                          {
                            return 12;
                          }
                        }
                        else
                        {
                          return 11;
                        }
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_10021B038(uint64_t a1)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  const char *v41;
  uint8_t *v42;
  int v43;
  int v44;
  double v45;
  _BYTE v46[12];
  __int128 v47;
  double v48;
  __int16 v49;
  int v50;
  uint8_t buf[8];
  std::__shared_weak_count *v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  int v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;

  *(_DWORD *)(a1 + 2484) = *(_DWORD *)(a1 + 2544);
  *(_QWORD *)(a1 + 2476) = *(_QWORD *)(a1 + 2552);
  *(_DWORD *)(a1 + 2472) = *(_DWORD *)(a1 + 2548);
  *(_DWORD *)(a1 + 2496) = *(_DWORD *)(a1 + 2560);
  v2 = *(int **)(a1 + 2576);
  v3 = *(int **)(a1 + 2568);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = v2 - v3;
    do
    {
      v6 = *v3++;
      v4 += v6;
    }
    while (v3 != v2);
    v7 = (double)v4 / (double)(unint64_t)v5;
    *(float *)(a1 + 2492) = v7;
  }
  v8 = *(int **)(a1 + 2600);
  v9 = *(int **)(a1 + 2592);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = v8 - v9;
    do
    {
      v12 = *v9++;
      v10 += v12;
    }
    while (v9 != v8);
    v13 = (double)v10 / (double)(unint64_t)v11;
    *(float *)(a1 + 2488) = v13;
  }
  sub_1001E4804(buf);
  LOBYTE(v43) = 0;
  v14 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v43);
  if ((_BYTE)v43)
    v15 = v14;
  else
    v15 = 0;
  v16 = v52;
  if (!v52)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v52->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      return;
  }
  else
  {
LABEL_16:
    if (!v15)
      return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_DWORD *)(a1 + 2500);
    v21 = *(_DWORD *)(a1 + 2504);
    v22 = *(_DWORD *)(a1 + 2508);
    v23 = *(_DWORD *)(a1 + 2512);
    v24 = *(_DWORD *)(a1 + 2484);
    v25 = *(float *)(a1 + 2480);
    v26 = *(float *)(a1 + 2476);
    v27 = *(_DWORD *)(a1 + 2472);
    v28 = *(float *)(a1 + 2492);
    v29 = *(float *)(a1 + 2488);
    v30 = *(_DWORD *)(a1 + 2496);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)&buf[4] = v20;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = v21;
    HIWORD(v52) = 1024;
    v53 = v22;
    v54 = 1024;
    v55 = v23;
    v56 = 1024;
    v57 = v24;
    v58 = 2048;
    v59 = v25;
    v60 = 2048;
    v61 = v26;
    v62 = 1024;
    v63 = v27;
    v64 = 2048;
    v65 = v28;
    v66 = 2048;
    v67 = v29;
    v68 = 1024;
    v69 = v30;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,prepareCellularAWDMetrics,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,EpochCountForLastLongestCampedCellularBand,%d", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v31 = *(_DWORD *)(a1 + 2504);
    v32 = *(_DWORD *)(a1 + 2508);
    v33 = *(_DWORD *)(a1 + 2512);
    v34 = *(_DWORD *)(a1 + 2484);
    v35 = *(float *)(a1 + 2480);
    v36 = *(float *)(a1 + 2476);
    v37 = *(_DWORD *)(a1 + 2472);
    v38 = *(float *)(a1 + 2492);
    v39 = *(float *)(a1 + 2488);
    v40 = *(_DWORD *)(a1 + 2496);
    LOWORD(v44) = 1024;
    HIWORD(v44) = v31;
    LOWORD(v45) = HIWORD(v33);
    WORD1(v45) = 1024;
    HIDWORD(v45) = v34;
    *(_WORD *)v46 = 2048;
    *(double *)&v46[2] = v35;
    *(_WORD *)&v46[10] = 2048;
    LODWORD(v47) = HIDWORD(v36);
    WORD2(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 6) = v37;
    WORD5(v47) = 2048;
    HIDWORD(v47) = LODWORD(v38);
    v48 = v39;
    v49 = 1024;
    v50 = v40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,prepareCellularAWDMetrics,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,EpochCountForLastLongestCampedCellularBand,%d", &v43, 84, 67111680, v44, v32, v45, *(double *)v46, *(_DWORD *)&v46[8], *(double *)&v47, *((double *)&v47 + 1),
      HIDWORD(v38));
    v42 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::prepareCellularAWDMetrics()", "%s\n", v41);
    if (v42 != buf)
      free(v42);
  }
}

void sub_10021B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021B438(uint64_t a1)
{
  id v2;
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  _QWORD v12[5];
  uint8_t buf[1640];

  v2 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  objc_msgSend(v2, "registerDelegate:inSilo:", sub_1001E5288(a1 + 2440), objc_msgSend(*(id *)a1, "silo"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100021C7C;
  v12[3] = &unk_1021CE010;
  v12[4] = a1;
  objc_msgSend(v2, "fetchLocationClientKeysWithReply:", v12);
  if (!*(_QWORD *)(a1 + 2416))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssawd,creating fOrientationDispatcher,onSessionStart()", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,creating fOrientationDispatcher,onSessionStart()", &v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(*(id *)a1, "silo");
    operator new();
  }
  result = sub_1001B7910();
  if ((result & 0x40) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,subscribing to device orientation,onSessionStart(),non-alwaysOnOrientation device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,subscribing to device orientation,onSessionStart(),non-alwaysOnOrientation device", &v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    v5 = sub_10040C9DC();
    return sub_1000A4FD8(v5, 0, *(_QWORD *)(a1 + 2416), -1.0);
  }
  return result;
}

void sub_10021B7F8()
{
  operator delete();
}

uint64_t sub_10021B824(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 856) = 0;
  if (a2 <= 0xC && ((0x17FFu >> a2) & 1) != 0)
    *(_DWORD *)(result + 856) = dword_101CDBB50[a2];
  return result;
}

void sub_10021B850(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;

  sub_10024455C();
  sub_10021B88C(a4, v7, a2, a3);
}

void sub_10021B88C(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v4 = a4[1];
  v13 = *a4;
  v14 = v4;
  v5 = a4[3];
  v15 = a4[2];
  v16 = v5;
  if (!*a3)
  {
    v7 = sub_100127B9C();
    v8[1] = 3221225472;
    v9 = v13;
    v10 = v14;
    v11 = v15;
    v8[0] = _NSConcreteStackBlock;
    v8[2] = sub_10020D988;
    v8[3] = &unk_1021660F0;
    v8[4] = a1;
    v12 = v16;
    sub_1000A50A8(v7, (uint64_t)v8);
  }
}

double sub_10021B91C(uint64_t a1, int a2, double *a3)
{
  double result;
  double v5;
  CFRunLoopTimerRef v6;
  __CFRunLoop *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  CFRunLoopTimerContext context;
  uint8_t buf[1640];

  result = 0.0;
  if (!a2)
  {
    v5 = *a3;
    if (*a3 <= 0.0)
    {
      *(_BYTE *)(a1 + 28) = 0;
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 56))(a1, v5);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 0);
      *(_BYTE *)(a1 + 48) = 0;
    }
    else
    {
      sub_100244568();
      if (sub_1000A42B0() && !*(_QWORD *)(a1 + 88))
      {
        context.version = 0;
        context.info = (void *)a1;
        memset(&context.retain, 0, 24);
        v6 = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_100A41C68, &context);
        *(_QWORD *)(a1 + 56) = v6;
        if (v6)
        {
          sub_100127B9C();
          v7 = (__CFRunLoop *)sub_1001AD8D0();
          CFRunLoopAddTimer(v7, *(CFRunLoopTimerRef *)(a1 + 56), kCFRunLoopCommonModes);
        }
        else
        {
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_102166168);
          v8 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Could not create timer", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_102166168);
            v12 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "Could not create timer", &v12, 2);
            v11 = (uint8_t *)v10;
            sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLCompass::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v10);
            if (v11 != buf)
              free(v11);
          }
        }
        v9 = sub_100244568();
        *(double *)(a1 + 72) = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
      }
      *(_BYTE *)(a1 + 48) = 1;
      if (!*(_BYTE *)(a1 + 64))
        sub_10021BBF8(a1);
    }
    return *(double *)(a1 + 32);
  }
  return result;
}

BOOL sub_10021BB94(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 83))
    return *(_BYTE *)(a1 + 84) != 0;
  if (*(double *)(a1 + 72) <= 0.0)
    return 0;
  return CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 72) < 432000.0;
}

uint64_t sub_10021BBF8(uint64_t a1)
{
  _BOOL8 v2;
  NSObject *v3;
  int v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  _BOOL4 v13;
  __int16 v14;
  int v15;

  v2 = sub_10021BB94(a1);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_102166168);
  v3 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 83);
    *(_DWORD *)buf = 67109376;
    v13 = v2;
    v14 = 1024;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Cover attached,%d,forced,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_102166168);
    v6 = *(unsigned __int8 *)(a1 + 83);
    v9[0] = 67109376;
    v9[1] = v2;
    v10 = 1024;
    v11 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Cover attached,%d,forced,%d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCompass::startCompass()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 0, 0);
  return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)a1 + 48))(a1, v2);
}

void sub_10021BDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldb;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double v20;

  __ldb = *(unsigned int *)(a1 + 12);
  if ((_DWORD)__ldb != *(_DWORD *)(a2 + 8))
    sub_1019248A4();
  if (a1 == a3)
    sub_101924854();
  if (a2 == a3)
    sub_10192487C();
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  sub_100079AC4((_DWORD *)a3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 12));
  if (__ldb <= v8)
    v9 = v8;
  else
    v9 = __ldb;
  if (v9 <= v7)
    v9 = v7;
  v10 = *(const double **)(a1 + 32);
  if (v9 > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, v7, v8, __ldb, 1.0, v10, v7, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), *(_DWORD *)(a3 + 8));
  }
  else if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = *(double **)(a2 + 32);
    v13 = *(_QWORD *)(a3 + 32);
    do
    {
      if ((_DWORD)v7)
      {
        v14 = 0;
        v15 = (double *)v10;
        do
        {
          v16 = 0.0;
          if ((_DWORD)__ldb)
          {
            v17 = __ldb;
            v18 = v12;
            v19 = v15;
            do
            {
              v20 = *v18++;
              v16 = v16 + *v19 * v20;
              v19 += v7;
              --v17;
            }
            while (v17);
          }
          *(double *)(v13 + 8 * (v11 * v7 + v14++)) = v16;
          ++v15;
        }
        while (v14 != v7);
      }
      ++v11;
      v12 += __ldb;
    }
    while (v11 != v8);
  }
}

uint64_t sub_10021BF50(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;

  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021B6378;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    v9 = "this->max_num_rows_ >= num_rows";
    v10 = 422;
LABEL_11:
    v11 = "cnmatrixbase.h";
    v12 = "SetMatrixSize";
    goto LABEL_15;
  }
  v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    v9 = "this->max_num_cols_ >= num_cols";
    v10 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
LABEL_14:
    v11 = "cnmatrix.h";
    v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = sub_100214284(a2, v7);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  return a1;
}

void sub_10021C074(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1021B63D0;
  _Unwind_Resume(a1);
}

uint64_t sub_10021C08C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const char *v9;
  int v10;
  const char *v11;
  const char *v12;

  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021B62F0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    v9 = "this->max_num_rows_ >= num_rows";
    v10 = 422;
LABEL_11:
    v11 = "cnmatrixbase.h";
    v12 = "SetMatrixSize";
    goto LABEL_15;
  }
  v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    v9 = "this->max_num_cols_ >= num_cols";
    v10 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v9 = "this->max_num_rows_ >= A.NumRows()";
    v10 = 567;
LABEL_14:
    v11 = "cnmatrix.h";
    v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v9 = "this->max_num_cols_ >= A.NumCols()";
    v10 = 568;
    goto LABEL_14;
  }
  if (v6)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v7) = sub_100214284(a2, v7);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  return a1;
}

void sub_10021C1B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1021B6348;
  _Unwind_Resume(a1);
}

uint64_t sub_10021C1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_101953680(a1, a2, a3);
  v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0)
    sub_1019536A4(a1, a2, a3);
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16))
    sub_1019536C8(a1, a2, a3);
  return v3 + 8 * v4;
}

_DWORD *sub_10021C208(_DWORD *result, int a2, int a3)
{
  if (a2 < 0)
    sub_101953540();
  if (a3 < 0)
    sub_101953568();
  if (a3 * a2 != result[4])
    sub_1019535E0();
  if (result[6] < a2)
    sub_101953590();
  if (result[7] < a3)
    sub_1019535B8();
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

_DWORD *sub_10021C264(_DWORD *result, unsigned int a2, unsigned int a3)
{
  if (result[6] < a2)
    sub_1019186D8();
  if (result[7] < a3)
    sub_101918700();
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

_DWORD *sub_10021C2A0(_DWORD *result, unsigned int a2, int a3)
{
  if (result[6] < a2)
    sub_101953608();
  if (a3 < 0)
    sub_101953630();
  if (result[7] < a3)
    sub_101953658();
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

unsigned __int16 *sub_10021C2E4(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[12 * (v3 - v2)];
  v5 = *a2;
  *((_QWORD *)v4 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_10021C350()
{
  if (qword_1023061E8 != -1)
    dispatch_once(&qword_1023061E8, &stru_102164698);
  return qword_102311110;
}

_QWORD *sub_10021C390(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = off_102193EE8;
  return result;
}

uint64_t sub_10021C3A4(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

double sub_10021C3B8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102193C90;
  *(_QWORD *)&result = 15;
  *(_QWORD *)(a1 + 8) = 15;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_10021C3D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193678;
  sub_100109DDC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_10021C41C(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(_BYTE **)v1 = 0;
        *(_QWORD *)(v1 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v1 = 0;
        *(_BYTE *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10021C460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 13993);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      v7 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_BYTE *)(a1 + 16) = v7;
      v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*(_BYTE *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *(_BYTE *)(a2 + 17);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(_BYTE *)(a1 + 17) = v8;
    v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v9 = *(_BYTE *)(a2 + 18);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(_BYTE *)(a1 + 18) = v9;
    if ((*(_DWORD *)(a2 + 24) & 8) == 0)
      return;
LABEL_8:
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) |= 8u;
    *(_QWORD *)(a1 + 8) = v6;
  }
}

void sub_10021C550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021C568(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_DWORD *)(result + 15) = 0;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10021C580(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_102152020;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

double sub_10021C5A0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102151F30;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

uint64_t sub_10021C5C0(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;

  v3 = (_BYTE *)(a1 + 8);
  v30 = a1 + 8;
  v5 = *(_DWORD *)a2;
  v4 = a2 + 8;
  switch(v5 ^ (v5 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 0xD:
    case 0x11:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      break;
    case 3:
    case 0xC:
    case 0xE:
    case 0x17:
      *v3 = *(_BYTE *)v4;
      break;
    case 4:
    case 9:
    case 0xB:
    case 0xF:
    case 0x13:
    case 0x16:
    case 0x19:
    case 0x1A:
      *(_DWORD *)v3 = *(_DWORD *)v4;
      break;
    case 5:
    case 6:
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a2 + 96))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v7 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v7;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v8 = *(_OWORD *)(a2 + 40);
        v9 = *(_OWORD *)(a2 + 56);
        v10 = *(_OWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = v10;
        *(_OWORD *)(a1 + 56) = v9;
        *(_OWORD *)(a1 + 40) = v8;
        *(_BYTE *)(a1 + 96) = 1;
      }
      break;
    case 7:
      sub_1002142F4(&v30, v4);
      break;
    case 8:
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      break;
    case 0xA:
    case 0x14:
    case 0x15:
      *(_QWORD *)v3 = *(_QWORD *)v4;
      break;
    case 0x10:
      v17 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)v3 = *(_OWORD *)v4;
      *(_OWORD *)(a1 + 24) = v17;
      v18 = *(_OWORD *)(v4 + 32);
      v19 = *(_OWORD *)(v4 + 48);
      v20 = *(_OWORD *)(v4 + 80);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(v4 + 64);
      *(_OWORD *)(a1 + 88) = v20;
      *(_OWORD *)(a1 + 40) = v18;
      *(_OWORD *)(a1 + 56) = v19;
      v21 = *(_OWORD *)(v4 + 96);
      v22 = *(_OWORD *)(v4 + 112);
      v23 = *(_OWORD *)(v4 + 128);
      *(_OWORD *)(a1 + 148) = *(_OWORD *)(v4 + 140);
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 136) = v23;
      *(_OWORD *)(a1 + 104) = v21;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a2 + 688) = 0u;
      v25 = *(_OWORD *)(a2 + 720);
      v24 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
      *(_OWORD *)(a1 + 720) = v25;
      *(_OWORD *)(a1 + 736) = v24;
      v26 = *(_BYTE *)(a2 + 800);
      v27 = *(_OWORD *)(a2 + 784);
      v28 = *(_OWORD *)(a2 + 752);
      *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
      *(_OWORD *)(a1 + 784) = v27;
      *(_BYTE *)(a1 + 800) = v26;
      *(_OWORD *)(a1 + 752) = v28;
      break;
    case 0x12:
      *(_OWORD *)v3 = *(_OWORD *)v4;
      break;
    case 0x18:
      v11 = *(_QWORD *)v4;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(v4 + 8);
      *(_QWORD *)v3 = v11;
      v12 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      v14 = *(_OWORD *)(a2 + 80);
      v13 = *(_OWORD *)(a2 + 96);
      v15 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 64) = v15;
      v16 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = v16;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      break;
    default:
      sub_10055A5D8();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

void sub_10021C7D8(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1002141AC(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 25;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_10021C868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021C884(int *a1, uint64_t *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;

  v4 = a2;
  if ((sub_10021420C(a1, &v4) & 1) == 0)
  {
    v5 = sub_10021CA68((uint64_t)&v6, (uint64_t)a2);
    sub_100131B34((uint64_t)a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_10021C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021C934(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v6 = *(_OWORD *)(a2 + 7);
  v7 = *(_OWORD *)(a2 + 9);
  v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(v9, (void *)a2[15], a2[16]);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 15);
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_OWORD *)v9 = v10;
  }
  return 24;
}

void sub_10021C9F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021CA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_10012D700(a1, a2);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a2 + 48);
  sub_10031F08C((_BYTE *)(v3 + 56), a2 + 56);
  return 7;
}

void sub_10021CA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10021CA68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = sub_10012D080(a1, (uint64_t *)a2);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v3 + 64) = v4;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v5 = *(_OWORD *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v3 + 120) = v7;
    *(_OWORD *)(v3 + 104) = v6;
    *(_OWORD *)(v3 + 88) = v5;
    *(_BYTE *)(v3 + 144) = 1;
  }
  return 7;
}

uint64_t sub_10021CAF4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_1000192DC(result);
  return result;
}

uint64_t sub_10021CB04(uint64_t result, int a2)
{
  int v2;

  if ((a2 - 1) > 5)
    v2 = 0;
  else
    v2 = dword_101C21CD8[a2 - 1];
  *(_DWORD *)(result + 204) = v2;
  return result;
}

double sub_10021CB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  double result;
  unsigned int v8;
  unsigned int *v9;

  v4 = a1 + 1000;
  v8 = sub_10021AD54((double *)(a2 + 24));
  v9 = &v8;
  v5 = sub_100212818(v4, &v8, (uint64_t)&unk_101B9EB60, &v9);
  ++v5[3];
  *(_DWORD *)(a1 + 968) = 0;
  result = *(double *)(a2 + 24);
  if (result >= 0.0 && (*(_QWORD *)(a2 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    ++*(_DWORD *)(a1 + 1040);
    result = result + *(double *)(a1 + 1048);
    *(double *)(a1 + 1048) = result;
  }
  return result;
}

void sub_10021CBD4(uint64_t a1)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[520];
  __int128 v14[7];
  char v15;

  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10012A33C(v13);
  memcpy((void *)(a1 + 160), v13, 0x201uLL);
  sub_1002B7674(a1 + 680, v14);
  v7 = v14[6];
  *(_OWORD *)(a1 + 760) = v14[5];
  *(_OWORD *)(a1 + 776) = v7;
  *(_BYTE *)(a1 + 792) = v15;
  v8 = v14[2];
  *(_OWORD *)(a1 + 696) = v14[1];
  *(_OWORD *)(a1 + 712) = v8;
  v9 = v14[4];
  *(_OWORD *)(a1 + 728) = v14[3];
  *(_OWORD *)(a1 + 744) = v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14[0] + 1);
  if (*((_QWORD *)&v14[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10021CCE4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (*((_DWORD *)a2 + 24) != 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "location type is not WiFi!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location type is not WiFi!", v13, 2, v13[0]);
LABEL_21:
    v12 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::receiveWifiLocationBeforeUseOfAssociatedAp(const CLDaemonLocation &)", "%s\n", v10);
    if (v12 != buf)
      free(v12);
    return;
  }
  if (*(double *)((char *)a2 + 76) > 0.0)
  {
    v2 = *a2;
    *(_OWORD *)(a1 + 56) = a2[1];
    *(_OWORD *)(a1 + 40) = v2;
    v3 = a2[2];
    v4 = a2[3];
    v5 = a2[4];
    *(_OWORD *)(a1 + 120) = a2[5];
    *(_OWORD *)(a1 + 104) = v5;
    *(_OWORD *)(a1 + 88) = v4;
    *(_OWORD *)(a1 + 72) = v3;
    v6 = a2[6];
    v7 = a2[7];
    v8 = a2[8];
    *(_OWORD *)(a1 + 180) = *(__int128 *)((char *)a2 + 140);
    *(_OWORD *)(a1 + 168) = v8;
    *(_OWORD *)(a1 + 152) = v7;
    *(_OWORD *)(a1 + 136) = v6;
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102139BD0);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location timestamp is not set!", v13, 2, v13[0]);
    goto LABEL_21;
  }
}

void sub_10021CF98(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (*((_DWORD *)a2 + 24) != 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "location type is not WiFi!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location type is not WiFi!", v13, 2, v13[0]);
LABEL_21:
    v12 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::receiveWifiLocationAfterUseOfAssociatedAp(const CLDaemonLocation &)", "%s\n", v10);
    if (v12 != buf)
      free(v12);
    return;
  }
  if (*(double *)((char *)a2 + 76) > 0.0)
  {
    v2 = *a2;
    *(_OWORD *)((char *)a1 + 212) = a2[1];
    *(_OWORD *)((char *)a1 + 196) = v2;
    v3 = a2[2];
    v4 = a2[3];
    v5 = a2[5];
    *(_OWORD *)((char *)a1 + 260) = a2[4];
    *(_OWORD *)((char *)a1 + 276) = v5;
    *(_OWORD *)((char *)a1 + 244) = v4;
    *(_OWORD *)((char *)a1 + 228) = v3;
    v6 = a2[6];
    v7 = a2[7];
    v8 = a2[8];
    a1[21] = *(__int128 *)((char *)a2 + 140);
    *(_OWORD *)((char *)a1 + 308) = v7;
    *(_OWORD *)((char *)a1 + 324) = v8;
    *(_OWORD *)((char *)a1 + 292) = v6;
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102139BD0);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location timestamp is not set!", v13, 2, v13[0]);
    goto LABEL_21;
  }
}

uint64_t sub_10021D248(uint64_t result, char a2)
{
  *(_BYTE *)(result + 509) = a2;
  return result;
}

std::string *sub_10021D250(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 512), a2);
}

uint64_t sub_10021D258(uint64_t result, char a2)
{
  *(_BYTE *)(result + 508) = a2;
  return result;
}

uint64_t sub_10021D260(uint64_t a1, double a2, long double a3)
{
  unint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  float *v9;
  float *v10;
  float *i;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  char *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  void *v40;
  BOOL v41;
  double *v42;
  double *v43;
  double v44;
  double v45;
  double *v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double *v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  double *v62;
  double *v63;
  char *v64;
  double v65;
  double v66;
  __int128 v67;
  __int128 v68;
  BOOL v69;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  _BYTE *v87;
  _BYTE *v88;
  __int128 *v89;
  char *v90;
  double v91;
  float *v92;
  char *v93;
  int64_t v94;
  unint64_t v96;
  double v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *__src;
  char *v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *__p;
  char *v111;
  char *v112;
  void *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  double *v121;
  double *v122;
  uint64_t v123;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  if (v6 < *((unsigned int *)sub_1000288A0() + 22))
    return 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  sub_100AA216C(&v121, *(const void **)a1, *(_QWORD *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5));
  v8 = sub_100AA1DAC(&v121, a2, a3);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (!v8)
    return 1;
  v10 = *(float **)a1;
  v9 = *(float **)(a1 + 8);
  if ((float *)((char *)v9 - *(_QWORD *)a1) == (float *)192)
  {
    if (v10 != v9)
    {
      for (i = v10 + 24; i != v9; i += 24)
      {
        if (i[20] < v10[20])
          v10 = i;
      }
    }
    v94 = (char *)v9 - (char *)(v10 + 24);
    if (v9 != v10 + 24)
      memmove(v10, v10 + 24, v94 - 7);
    v7 = 0;
    *(_QWORD *)(a1 + 8) = (char *)v10 + v94;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v12 = 4;
    v97 = -1.0;
    do
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
      if (v13 >= v12)
      {
        v96 = v12;
        sub_100AA1F2C(v13, v12, &v116);
        v15 = v116;
        v14 = v117;
        v98 = v117;
        while (v15 != v14)
        {
          v113 = 0;
          v114 = 0;
          v115 = 0;
          sub_10027205C(&v113, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 2);
          __p = 0;
          v111 = 0;
          v112 = 0;
          v16 = (int *)v113;
          v17 = v114;
          if (v113 == v114)
          {
            v18 = 0;
            v40 = 0;
          }
          else
          {
            v18 = 0;
            do
            {
              v19 = (_OWORD *)(*(_QWORD *)a1 + 96 * *v16);
              if (v18 >= v112)
              {
                v24 = (char *)__p;
                v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)__p) >> 5);
                v26 = v25 + 1;
                if (v25 + 1 > 0x2AAAAAAAAAAAAAALL)
                  sub_100259694();
                if (0x5555555555555556 * ((v112 - (_BYTE *)__p) >> 5) > v26)
                  v26 = 0x5555555555555556 * ((v112 - (_BYTE *)__p) >> 5);
                if (0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
                  v27 = 0x2AAAAAAAAAAAAAALL;
                else
                  v27 = v26;
                if (v27)
                {
                  v28 = (char *)sub_10067257C((uint64_t)&v112, v27);
                  v24 = (char *)__p;
                  v18 = v111;
                }
                else
                {
                  v28 = 0;
                }
                v29 = &v28[96 * v25];
                v30 = v19[1];
                *(_OWORD *)v29 = *v19;
                *((_OWORD *)v29 + 1) = v30;
                v31 = v19[2];
                v32 = v19[3];
                v33 = v19[5];
                *((_OWORD *)v29 + 4) = v19[4];
                *((_OWORD *)v29 + 5) = v33;
                *((_OWORD *)v29 + 2) = v31;
                *((_OWORD *)v29 + 3) = v32;
                if (v18 == v24)
                {
                  v39 = &v28[96 * v25];
                }
                else
                {
                  v34 = &v28[96 * v25];
                  do
                  {
                    v35 = *((_OWORD *)v18 - 5);
                    *((_OWORD *)v34 - 6) = *((_OWORD *)v18 - 6);
                    *((_OWORD *)v34 - 5) = v35;
                    v36 = *((_OWORD *)v18 - 4);
                    v37 = *((_OWORD *)v18 - 3);
                    v38 = *((_OWORD *)v18 - 2);
                    v39 = v34 - 96;
                    *(_OWORD *)(v34 - 23) = *(_OWORD *)(v18 - 23);
                    *((_OWORD *)v34 - 3) = v37;
                    *((_OWORD *)v34 - 2) = v38;
                    *((_OWORD *)v34 - 4) = v36;
                    v18 -= 96;
                    v34 -= 96;
                  }
                  while (v18 != v24);
                }
                v18 = v29 + 96;
                __p = v39;
                v111 = v29 + 96;
                v112 = &v28[96 * v27];
                if (v24)
                  operator delete(v24);
              }
              else
              {
                v20 = v19[1];
                *(_OWORD *)v18 = *v19;
                *((_OWORD *)v18 + 1) = v20;
                v21 = v19[2];
                v22 = v19[3];
                v23 = v19[5];
                *((_OWORD *)v18 + 4) = v19[4];
                *((_OWORD *)v18 + 5) = v23;
                *((_OWORD *)v18 + 2) = v21;
                *((_OWORD *)v18 + 3) = v22;
                v18 += 96;
              }
              v111 = v18;
              ++v16;
            }
            while (v16 != v17);
            v40 = __p;
          }
          v107 = 0;
          v108 = 0;
          v109 = 0;
          sub_100AA216C(&v107, v40, (uint64_t)v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v40) >> 5));
          v41 = sub_100AA1DAC((double **)&v107, a2, a3);
          if (v107)
          {
            v108 = v107;
            operator delete(v107);
          }
          if (!v41)
          {
            v42 = (double *)__p;
            v43 = (double *)((char *)__p + 96);
            v44 = *(double *)__p;
            if (__p == v111 || v43 == (double *)v111)
            {
              v60 = *((double *)__p + 1);
              v57 = *(double *)__p;
            }
            else
            {
              v45 = *(double *)__p;
              v46 = (double *)((char *)__p + 96);
              v47 = (double *)__p;
              v48 = (double *)((char *)__p + 96);
              do
              {
                v49 = *v48;
                v48 += 12;
                v50 = v49;
                if (v45 < v49)
                {
                  v45 = v50;
                  v47 = v46;
                }
                v46 = v48;
              }
              while (v48 != (double *)v111);
              v51 = *v47;
              v52 = (double *)((char *)__p + 96);
              v53 = (double *)__p;
              v54 = (double *)((char *)__p + 96);
              do
              {
                v55 = *v54;
                v54 += 12;
                v56 = v55;
                if (v55 < v44)
                {
                  v44 = v56;
                  v53 = v52;
                }
                v52 = v54;
              }
              while (v54 != (double *)v111);
              v57 = *v53;
              v58 = (double *)((char *)__p + 96);
              v59 = (double *)__p;
              do
              {
                if (v59[1] < v58[1])
                  v59 = v58;
                v58 += 12;
              }
              while (v58 != (double *)v111);
              v60 = v59[1];
              do
              {
                if (v43[1] < v42[1])
                  v42 = v43;
                v43 += 12;
              }
              while (v43 != (double *)v111);
              v44 = v51;
            }
            v61 = v42[1];
            __src = 0;
            v105 = 0;
            v106 = 0;
            v63 = *(double **)a1;
            v62 = *(double **)(a1 + 8);
            if (*(double **)a1 == v62)
            {
              v88 = 0;
              v64 = 0;
              v87 = *(_BYTE **)a1;
            }
            else
            {
              v64 = 0;
              do
              {
                v65 = *v63;
                v66 = v63[1];
                v67 = *((_OWORD *)v63 + 3);
                v100 = *((_OWORD *)v63 + 2);
                v101 = v67;
                v68 = *((_OWORD *)v63 + 5);
                v102 = *((_OWORD *)v63 + 4);
                v103 = v68;
                v99 = *((_OWORD *)v63 + 1);
                v69 = v65 > v44 || v65 < v57;
                if (!v69 && v66 <= v60 && v66 >= v61)
                {
                  if (v64 >= v106)
                  {
                    v75 = (char *)__src;
                    v76 = 0xAAAAAAAAAAAAAAABLL * ((v64 - (_BYTE *)__src) >> 5);
                    v77 = v76 + 1;
                    if (v76 + 1 > 0x2AAAAAAAAAAAAAALL)
                      sub_100259694();
                    if (0x5555555555555556 * ((v106 - (_BYTE *)__src) >> 5) > v77)
                      v77 = 0x5555555555555556 * ((v106 - (_BYTE *)__src) >> 5);
                    if (0xAAAAAAAAAAAAAAABLL * ((v106 - (_BYTE *)__src) >> 5) >= 0x155555555555555)
                      v78 = 0x2AAAAAAAAAAAAAALL;
                    else
                      v78 = v77;
                    if (v78)
                    {
                      v79 = (char *)sub_10067257C((uint64_t)&v106, v78);
                      v75 = (char *)__src;
                      v64 = v105;
                    }
                    else
                    {
                      v79 = 0;
                    }
                    v80 = &v79[96 * v76];
                    *(double *)v80 = v65;
                    *((double *)v80 + 1) = v66;
                    *((_OWORD *)v80 + 2) = v100;
                    *((_OWORD *)v80 + 3) = v101;
                    *((_OWORD *)v80 + 4) = v102;
                    *((_OWORD *)v80 + 5) = v103;
                    *((_OWORD *)v80 + 1) = v99;
                    if (v64 == v75)
                    {
                      v86 = &v79[96 * v76];
                    }
                    else
                    {
                      v81 = &v79[96 * v76];
                      do
                      {
                        v82 = *((_OWORD *)v64 - 5);
                        *((_OWORD *)v81 - 6) = *((_OWORD *)v64 - 6);
                        *((_OWORD *)v81 - 5) = v82;
                        v83 = *((_OWORD *)v64 - 4);
                        v84 = *((_OWORD *)v64 - 3);
                        v85 = *((_OWORD *)v64 - 2);
                        v86 = v81 - 96;
                        *(_OWORD *)(v81 - 23) = *(_OWORD *)(v64 - 23);
                        *((_OWORD *)v81 - 3) = v84;
                        *((_OWORD *)v81 - 2) = v85;
                        *((_OWORD *)v81 - 4) = v83;
                        v64 -= 96;
                        v81 -= 96;
                      }
                      while (v64 != v75);
                    }
                    v64 = v80 + 96;
                    __src = v86;
                    v105 = v80 + 96;
                    v106 = &v79[96 * v78];
                    if (v75)
                      operator delete(v75);
                  }
                  else
                  {
                    *(double *)v64 = v65;
                    *((double *)v64 + 1) = v66;
                    v73 = v102;
                    v72 = v103;
                    *((_OWORD *)v64 + 3) = v101;
                    *((_OWORD *)v64 + 4) = v73;
                    *((_OWORD *)v64 + 5) = v72;
                    v74 = v100;
                    *((_OWORD *)v64 + 1) = v99;
                    *((_OWORD *)v64 + 2) = v74;
                    v64 += 96;
                  }
                  v105 = v64;
                }
                v63 += 12;
              }
              while (v63 != v62);
              v63 = *(double **)a1;
              v87 = *(_BYTE **)(a1 + 8);
              v88 = __src;
            }
            v89 = sub_1000288A0();
            v90 = (char *)__src;
            if (-1431655765 * ((unint64_t)(v87 - (_BYTE *)v63) >> 5)
               + 1431655765 * ((unint64_t)(v64 - v88) >> 5) <= *((_DWORD *)v89 + 20))
            {
              v91 = 0.0;
              if (__src != v105)
              {
                v92 = (float *)__src;
                do
                {
                  v91 = v91 + v92[20];
                  v92 += 24;
                }
                while (v92 != (float *)v105);
              }
              if (v91 > v97)
              {
                sub_100675638((char *)&v118, (char *)__src, (uint64_t)v105, 0xAAAAAAAAAAAAAAABLL * ((v105 - (_BYTE *)__src) >> 5));
                v90 = (char *)__src;
                v97 = v91;
              }
            }
            if (v90)
            {
              v105 = v90;
              operator delete(v90);
            }
          }
          if (__p)
          {
            v111 = (char *)__p;
            operator delete(__p);
          }
          if (v113)
          {
            v114 = (int *)v113;
            operator delete(v113);
          }
          v15 += 24;
          v14 = v98;
        }
        *(_QWORD *)&v99 = &v116;
        sub_10025E1F0((void ***)&v99);
        v12 = v96;
      }
      v69 = v12-- > 2;
    }
    while (v69);
    v93 = v118;
    v7 = v118 != v119;
    if (&v118 != (char **)a1 && v118 != v119)
    {
      sub_100675638((char *)a1, v118, (uint64_t)v119, 0xAAAAAAAAAAAAAAABLL * ((v119 - v118) >> 5));
      v93 = v118;
    }
    if (v93)
    {
      v119 = v93;
      operator delete(v93);
    }
  }
  return v7;
}

void sub_10021D998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v37 - 200);
  if (v39)
  {
    *(_QWORD *)(v37 - 192) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021DA4C(double **a1, double a2, double a3, int a4)
{
  if (a4)
    return sub_100AA1998(a1, a2, a3);
  else
    return sub_10021D260((uint64_t)a1, a2, a3);
}

void sub_10021DA58(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  CFAbsoluteTime Current;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[94];
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,old,%{public}d,new,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v8 = a1[94];
    v11[0] = 67240448;
    v11[1] = v8;
    v12 = 1026;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 2, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,old,%{public}d,new,%{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::setLocationStreamingAllowedState(const BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v6 = a1[94];
  a1[94] = a2;
  if (v6 != a2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    (*(void (**)(unsigned __int8 *, CFAbsoluteTime))(*(_QWORD *)a1 + 96))(a1, Current);
  }
}

uint64_t sub_10021DC48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  const char *v22;
  uint8_t *v23;
  __int16 v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint8_t buf[8];
  __int128 __p;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  if (*(_BYTE *)(a1 + 72))
    v2 = *(_BYTE *)(a2 + 48) == 12;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v5 = *(uint64_t **)(a2 + 16);
  if (!v5)
    goto LABEL_33;
  v6 = (uint64_t *)(a1 + 32);
  do
  {
    *(_QWORD *)buf = v5[2];
    if (*((char *)v5 + 47) < 0)
    {
      sub_100115CE4(&__p, (void *)v5[3], v5[4]);
    }
    else
    {
      __p = *(_OWORD *)(v5 + 3);
      v30 = v5[5];
    }
    v7 = *((_OWORD *)v5 + 4);
    v31 = *((_OWORD *)v5 + 3);
    v32 = v7;
    v33 = *((_OWORD *)v5 + 5);
    v34 = v5[12];
    v8 = *v6;
    if (*v6)
    {
      v9 = a1 + 32;
      do
      {
        v10 = *(_DWORD *)(v8 + 28);
        v11 = v10 < SDWORD2(v31);
        if (v10 >= SDWORD2(v31))
          v12 = (uint64_t *)v8;
        else
          v12 = (uint64_t *)(v8 + 8);
        if (!v11)
          v9 = v8;
        v8 = *v12;
      }
      while (*v12);
      if ((uint64_t *)v9 != v6 && *(_DWORD *)(v9 + 28) <= SDWORD2(v31))
      {
        v13 = v26;
        if ((unint64_t)v26 >= v27)
        {
          v16 = sub_100279DEC((uint64_t *)&v25, (uint64_t)buf);
        }
        else
        {
          *v26 = *(_QWORD *)buf;
          v14 = v13 + 1;
          if (SHIBYTE(v30) < 0)
          {
            sub_100115CE4(v14, (void *)__p, *((unint64_t *)&__p + 1));
          }
          else
          {
            v15 = __p;
            v13[3] = v30;
            *(_OWORD *)v14 = v15;
          }
          v17 = v31;
          v18 = v32;
          v19 = v33;
          v13[10] = v34;
          *((_OWORD *)v13 + 3) = v18;
          *((_OWORD *)v13 + 4) = v19;
          *((_OWORD *)v13 + 2) = v17;
          v16 = (uint64_t)(v13 + 11);
        }
        v26 = (_QWORD *)v16;
      }
    }
    if (SHIBYTE(v30) < 0)
      operator delete((void *)__p);
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (v25 == v26)
  {
LABEL_33:
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021983E0);
    v20 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@WifiChannel, time-based 5GHz, reset channel selector due to no APs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021983E0);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiChannel, time-based 5GHz, reset channel selector due to no APs", &v24, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocation5GHzChannelTimeBasedSelector::resetTopChannelsBasedOnScanResult(const CL::Wifi1::Events::Wifi::Scan &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    sub_100FE37BC(a1 + 24);
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)buf = &v25;
  sub_100279AA4((void ***)buf);
  return v3;
}

void sub_10021DF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  a15 = &a12;
  sub_100279AA4((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10021DFA8(uint64_t a1, uint64_t a2)
{
  return sub_10021DC48(a1 + 16, a2);
}

void sub_10021DFB0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  double v20;

  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  *(_OWORD *)(a1 + 140) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  v11 = (_OWORD *)(a1 + 728);
  sub_10021CCE4(a1 + 728, (__int128 *)a1);
  v12 = *a2;
  *(_OWORD *)(a1 + 172) = a2[1];
  *(_OWORD *)(a1 + 156) = v12;
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  *(_OWORD *)(a1 + 236) = a2[5];
  *(_OWORD *)(a1 + 220) = v15;
  *(_OWORD *)(a1 + 204) = v14;
  *(_OWORD *)(a1 + 188) = v13;
  v16 = a2[6];
  v17 = a2[7];
  v18 = a2[8];
  *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 268) = v17;
  *(_OWORD *)(a1 + 284) = v18;
  *(_OWORD *)(a1 + 252) = v16;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 288) = 1;
  if (*(double *)((char *)a2 + 36) < 0.0 && *(double *)(a1 + 576) > 0.0)
  {
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 552);
    v19 = sub_10012A448();
    v20 = *(double *)(a1 + 576);
    if (v20 < *((double *)v19 + 28))
      v20 = *((double *)v19 + 28);
    *(double *)(a1 + 192) = v20;
  }
  sub_10021CF98(v11, (__int128 *)(a1 + 156));
}

BOOL sub_10021E0B4(unsigned int a1)
{
  return a1 < 0xF;
}

void sub_10021E0C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10000E0D8(a1);
  operator delete();
}

uint64_t sub_10021E0E4(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = &off_10213BBE0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10021E0FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213BCD0;
  sub_10021E164(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

double sub_10021E140(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213BCD0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return result;
}

_QWORD *sub_10021E164(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)qword_1023107F8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[4];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_10021E1D4(uint64_t result)
{
  *(_QWORD *)result = off_10213BB68;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 40) = 0;
  return result;
}

void sub_10021E204(uint64_t *a1)
{
  sub_10000E910(a1);
  operator delete();
}

uint64_t sub_10021E228(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_10213BC58;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_10021E244(_QWORD *a1)
{
  unint64_t v1;
  double result;
  uint64_t v3;
  unint64_t v4;
  double **v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double *v10;

  v1 = a1[8];
  result = 0.0;
  if (v1 >= 5)
  {
    v3 = a1[4];
    v4 = a1[7];
    v5 = (double **)(v3 + 8 * (v4 >> 8));
    v6 = *v5;
    v7 = (uint64_t)&(*v5)[2 * v4];
    v8 = *(_QWORD *)(v3 + (((v4 + v1) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v4 + v1);
    if (v8 != v7)
    {
      v9 = &(*v5)[2 * v4];
      while (1)
      {
        v9 += 2;
        if ((char *)v9 - (char *)v6 == 4096)
        {
          v10 = v5[1];
          ++v5;
          v6 = v10;
          v9 = v10;
        }
        if (v9 == (double *)v8)
          break;
        if (*v9 < *(double *)v7)
          v7 = (uint64_t)v9;
      }
    }
    return *(double *)v7;
  }
  return result;
}

_QWORD *sub_10021E2C8(_QWORD *result, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  double v28;

  v3 = result;
  v27 = a2;
  v28 = a3;
  v4 = result[4];
  if (result[5] == v4)
  {
    v5 = result + 8;
  }
  else
  {
    v5 = result + 8;
    v6 = result[7];
    v7 = (_QWORD *)(v4 + 8 * (v6 >> 8));
    v8 = *v7 + 16 * v6;
    v9 = *(_QWORD *)(v4 + (((result[8] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)result + 64) + v6);
    while (v8 != v9)
    {
      if (a3 < *(double *)(v8 + 8))
        return result;
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        v10 = v7[1];
        ++v7;
        v8 = v10;
      }
    }
  }
  result = (_QWORD *)sub_10021107C((uint64_t)(result + 3), &v27, &v28);
  if (*v5 >= 2uLL)
  {
    v11 = v3[7];
    v12 = v3[4];
    v13 = v3[5];
    v14 = (_QWORD *)(v12 + 8 * (v11 >> 8));
    v15 = *v14 + 16 * v11;
    if (v13 == v12)
      v15 = 0;
    v16 = v15 + 16;
    if (v15 + 16 - *v14 == 4096)
    {
      v17 = v14[1];
      ++v14;
      v16 = v17;
    }
    v18 = v11 + *v5;
    v19 = (_QWORD *)(v12 + 8 * (v18 >> 8));
    if (v13 == v12)
      v20 = 0;
    else
      v20 = *v19 + 16 * v18;
    v22 = (char *)sub_10050EF90(v14, v16, v28, (uint64_t)v19, v20);
    v23 = v3[7] + v3[8];
    v24 = v3[4];
    v25 = (char *)(v24 + 8 * (v23 >> 8));
    if (v3[5] == v24)
      v26 = 0;
    else
      v26 = *(_QWORD *)v25 + 16 * v23;
    return sub_10050F044(v3 + 3, v22, v21, v25, v26);
  }
  return result;
}

void sub_10021E42C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  std::string *p_p;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string *v18;
  char *v19;
  uint64_t v20;
  std::string v21;
  std::string __p;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  std::string *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = a2 + 1;
    v3 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      v5 = (_QWORD *)(a1 + 8);
      do
      {
        if (v5 != sub_100191618(a1, v3 + 4))
        {
          v6 = (_QWORD *)sub_100191734(a1, v3 + 4);
          v8 = v6[1];
          v7 = v6[2];
          v9 = v6[4];
          v3[6] = v8;
          v3[7] = v7;
          v3[9] = v9;
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102144A28);
          v10 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_QWORD *)(a1 + 16);
            sub_1000C2254(v3 + 4, &__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 134219011;
            v29 = v11;
            v30 = 2081;
            v31 = p_p;
            v32 = 2049;
            v33 = v8;
            v34 = 2049;
            v35 = v7;
            v36 = 2049;
            v37 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning, WifiCentroidOverrides (size %lu), overrode %{private}s centroid with latlon %{private}.7f, %{private}.7f, acc %{private}.1f", buf, 0x34u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102144A28);
            v16 = qword_1022A0048;
            v17 = *(_QWORD *)(a1 + 16);
            sub_1000C2254(v3 + 4, &v21);
            v18 = &v21;
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 134219011;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
            v23 = v8;
            v24 = 2049;
            v25 = v7;
            v26 = 2049;
            v27 = v9;
            LODWORD(v20) = 52;
            v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#Warning, WifiCentroidOverrides (size %lu), overrode %{private}s centroid with latlon %{private}.7f, %{private}.7f, acc %{private}.1f", &__p, v20);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v21.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidDefaultsWriteOverrides::overrideMacCentroidsIfPossible(std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v19);
            if (v19 != (char *)buf)
              free(v19);
          }
        }
        v13 = (_QWORD *)v3[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v3[2];
            v15 = *v14 == (_QWORD)v3;
            v3 = v14;
          }
          while (!v15);
        }
        v3 = v14;
      }
      while (v14 != v2);
    }
  }
}

void sub_10021E740(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  double *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  float v23;
  double v24;
  unint64_t v25;
  double v26;
  double v27;
  float *v28;
  double *v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  double *v38;
  double *v39;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_100259694();
    v13 = v5 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_10028E224(v4, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v8 = (double *)(v16 + 16);
    v19 = (char *)a1[3];
    v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = (double *)(v7 + 1);
  }
  a1[4] = v8;
  v20 = a1[3];
  if ((double *)v20 != v8 && *(v8 - 2) - *(double *)v20 >= 60.0)
  {
    v21 = 0;
    v22 = 0.0;
    v23 = -3.4028e38;
    do
    {
      if (v23 < *(float *)(v20 + 8))
        v23 = *(float *)(v20 + 8);
      v24 = *(double *)v20;
      v20 += 16;
      v22 = v22 + v24;
      ++v21;
    }
    while ((double *)v20 != v8);
    v25 = a1[8];
    v26 = *(double *)a2;
    v27 = v22 / (double)v21;
    v28 = (float *)a1[7];
    if ((unint64_t)v28 >= v25)
    {
      v30 = (float *)a1[6];
      v31 = ((char *)v28 - (char *)v30) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        sub_100259694();
      v33 = v25 - (_QWORD)v30;
      if (v33 >> 3 > v32)
        v32 = v33 >> 3;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
        v34 = 0xFFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)sub_10028E224((uint64_t)(a1 + 8), v34);
        v30 = (float *)a1[6];
        v28 = (float *)a1[7];
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[16 * v31];
      v37 = &v35[16 * v34];
      *(double *)v36 = v27;
      *((float *)v36 + 2) = v23;
      v29 = (double *)(v36 + 16);
      if (v28 != v30)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
          v36 -= 16;
          v28 -= 4;
        }
        while (v28 != v30);
        v30 = (float *)a1[6];
      }
      a1[6] = v36;
      a1[7] = v29;
      a1[8] = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(double *)v28 = v27;
      v28[2] = v23;
      v29 = (double *)(v28 + 4);
    }
    a1[7] = v29;
    v38 = (double *)a1[6];
    if (v38 != v29)
    {
      while (vabdd_f64(v26, *v38) <= 86400.0)
      {
        v38 += 2;
        if (v38 == v29)
          goto LABEL_51;
      }
      if (v38 != v29)
      {
        v39 = v38 + 2;
        if (v38 + 2 != v29)
        {
          do
          {
            if (vabdd_f64(v26, *v39) <= 86400.0)
            {
              *(_OWORD *)v38 = *(_OWORD *)v39;
              v38 += 2;
            }
            v39 += 2;
          }
          while (v39 != v29);
          v29 = (double *)a1[7];
        }
      }
      if (v38 != v29)
        a1[7] = v38;
    }
LABEL_51:
    a1[4] = a1[3];
  }
}

uint64_t sub_10021EA1C(uint64_t a1)
{
  sub_10002D5A8(*(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t sub_10021EA38(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v4;
  uint64_t v5;
  int v7;

  sub_10002E0F4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2, a3);
  v7 = v4;
  if (sub_100214D00())
  {
    if (v7 == 1)
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v5 + 144) && !*(_BYTE *)(v5 + 145))
        sub_10021FA34(v5, v5 + 96);
    }
  }
  return 1;
}

BOOL sub_10021EAA4(uint64_t a1, uint64_t a2)
{
  return sub_10021F1B4(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10021EAAC(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  void **v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 328))
    *(_BYTE *)(v2 + 328) = 0;
  v3 = *(void ***)(v2 + 344);
  v4 = *(_QWORD *)(v2 + 352);
  *(_QWORD *)(v2 + 376) = 0;
  v5 = v4 - (_QWORD)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v6 = *(_QWORD *)(v2 + 352);
      v3 = (void **)(*(_QWORD *)(v2 + 344) + 8);
      *(_QWORD *)(v2 + 344) = v3;
      v5 = v6 - (_QWORD)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    v7 = 11;
  }
  else
  {
    if (v5 >> 3 != 2)
      goto LABEL_10;
    v7 = 23;
  }
  *(_QWORD *)(v2 + 368) = v7;
LABEL_10:
  v8 = *(_QWORD **)(a1 + 8);
  v9 = (void **)v8[49];
  v10 = (void **)v8[50];
  if (v10 == v9)
  {
    v14 = v8 + 53;
    v10 = (void **)v8[49];
  }
  else
  {
    v11 = v8[52];
    v12 = &v9[v11 >> 4];
    v13 = (uint64_t)*v12 + 800 * (v11 & 0xF);
    v14 = v8 + 53;
    v15 = *(uint64_t *)((char *)v9 + (((v8[53] + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 800 * ((*((_DWORD *)v8 + 106) + (int)v11) & 0xF);
    if (v13 != v15)
    {
      do
      {
        sub_100261F44(v13 + 680);
        v13 += 800;
        if (v13 - (_QWORD)*v12 == 12800)
        {
          v16 = (uint64_t)v12[1];
          ++v12;
          v13 = v16;
        }
      }
      while (v13 != v15);
      v9 = (void **)v8[49];
      v10 = (void **)v8[50];
    }
  }
  *v14 = 0;
  v17 = (char *)v10 - (char *)v9;
  if (v17 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      v18 = v8[50];
      v9 = (void **)(v8[49] + 8);
      v8[49] = v9;
      v17 = v18 - (_QWORD)v9;
    }
    while (v17 > 0x10);
  }
  if (v17 >> 3 == 1)
  {
    v19 = 8;
  }
  else
  {
    if (v17 >> 3 != 2)
      goto LABEL_24;
    v19 = 16;
  }
  v8[52] = v19;
LABEL_24:
  v20 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v20 + 1232))
  {
    sub_100261F44(v20 + 1112);
    *(_BYTE *)(v20 + 1232) = 0;
    v20 = *(_QWORD *)(a1 + 8);
  }
  if (*(_BYTE *)(v20 + 1248))
    *(_BYTE *)(v20 + 1248) = 0;
  return 1;
}

void sub_10021EC54(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (*a3 == 2)
  {
    *(_BYTE *)(a1 + 145) = *(_DWORD *)(a4 + 40) != 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a4 + 40);
      v8 = *(unsigned __int8 *)(a1 + 145);
      *(_DWORD *)buf = 67109376;
      v17 = v7;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: condition,%d,nonPedestrianUserMotion,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9 = *(_DWORD *)(a4 + 40);
      v10 = *(unsigned __int8 *)(a1 + 145);
      v13[0] = 67109376;
      v13[1] = v9;
      v14 = 1024;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: condition,%d,nonPedestrianUserMotion,%d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleNatalimetryNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10021EE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), a4);
  if ((result & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: failed to handle motion state notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Pedometer Assistance: failed to handle motion state notification", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return sub_10021FA34(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10021EFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128) + 48))(*(_QWORD *)(a1 + 128), a4);
  if ((result & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: failed to handle step count notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: failed to handle step count notification", v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::HandleStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    return sub_10021FA34(a1, a1 + 80);
  }
  return result;
}

uint64_t sub_10021F1AC()
{
  return 1;
}

BOOL sub_10021F1B4(uint64_t a1, uint64_t a2)
{
  double v2;
  NSObject *v6;
  double v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  NSObject *v14;
  uint64_t v15;
  __int128 *v16;
  double v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  NSObject *v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  const char *v48;
  uint8_t *v49;
  double v50;
  int v51;
  _BYTE v52[24];
  double v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[4];
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  uint64_t v63;

  v2 = *(double *)(a2 + 8);
  if ((*(uint64_t *)&v2 <= -1 || ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v2 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v57 = v2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered invalid step count notification time %.3lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9 = qword_1022A0078;
      *(_DWORD *)v52 = 134217984;
      *(double *)&v52[4] = v2;
      v51 = 12;
      v11 = "#Warning Pedometer Assistance: encountered invalid step count notification time %.3lf";
      goto LABEL_66;
    }
    return result;
  }
  if (*(double *)(a2 + 40) < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a2 + 40);
      *(_DWORD *)buf = 134217984;
      v57 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered invalid step count notification rawDistance %.3lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9 = qword_1022A0078;
      v10 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)v52 = 134217984;
      *(_QWORD *)&v52[4] = v10;
      v51 = 12;
      v11 = "#Warning Pedometer Assistance: encountered invalid step count notification rawDistance %.3lf";
LABEL_66:
      v15 = 0;
      goto LABEL_67;
    }
    return result;
  }
  if (*(_BYTE *)(a2 + 152) == 1 && *(double *)(a2 + 120) == 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: ignoring zero pace in stroller cases", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v9 = qword_1022A0078;
    *(_WORD *)v52 = 0;
    v51 = 2;
    v11 = "Pedometer Assistance: ignoring zero pace in stroller cases";
    goto LABEL_33;
  }
  v16 = (__int128 *)(a1 + 152);
  if (!*(_BYTE *)(a1 + 328))
  {
    v19 = *(_OWORD *)a2;
    v20 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 184) = v20;
    *v16 = v19;
    v21 = *(_OWORD *)(a2 + 48);
    v22 = *(_OWORD *)(a2 + 64);
    v23 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 200) = v21;
    *(_OWORD *)(a1 + 216) = v22;
    v24 = *(_OWORD *)(a2 + 112);
    v25 = *(_OWORD *)(a2 + 128);
    v26 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 312) = v26;
    *(_OWORD *)(a1 + 264) = v24;
    *(_OWORD *)(a1 + 280) = v25;
    *(_BYTE *)(a1 + 328) = 1;
    goto LABEL_55;
  }
  v17 = *(double *)(a1 + 160);
  if (v2 > v17)
  {
    if (v2 - v17 > 3.84)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        v57 = v2;
        v58 = 2048;
        v59 = v17;
        v60 = 2048;
        v61 = v2 - v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: encountered unexpected step count notification time %.3lf vs. last seen notification time %.3lf for a period of %.3lf", buf, 0x20u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v9 = qword_1022A0078;
      *(_DWORD *)v52 = 134218496;
      *(double *)&v52[4] = v2;
      *(_WORD *)&v52[12] = 2048;
      *(double *)&v52[14] = v17;
      *(_WORD *)&v52[22] = 2048;
      v53 = v2 - v17;
      v51 = 32;
      v11 = "Pedometer Assistance: encountered unexpected step count notification time %.3lf vs. last seen notification t"
            "ime %.3lf for a period of %.3lf";
LABEL_33:
      v15 = 2;
LABEL_67:
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, v15, v11, v52, v51, *(_OWORD *)v52, *(_QWORD *)&v52[16], *(_QWORD *)&v53);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdatePedometerHistory(const CLStepCountEntry &)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
      return 0;
    }
    v28 = *(_OWORD *)a2;
    v29 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 184) = v29;
    *v16 = v28;
    v30 = *(_OWORD *)(a2 + 48);
    v31 = *(_OWORD *)(a2 + 64);
    v32 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 248) = v32;
    *(_OWORD *)(a1 + 200) = v30;
    *(_OWORD *)(a1 + 216) = v31;
    v33 = *(_OWORD *)(a2 + 112);
    v34 = *(_OWORD *)(a2 + 128);
    v35 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 312) = v35;
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = v34;
LABEL_55:
    sub_100212098((_QWORD *)(a1 + 336), (__int128 *)a2);
    v36 = *(_QWORD *)(a1 + 376);
    if (v36 >= 6)
    {
      ++*(_QWORD *)(a1 + 368);
      *(_QWORD *)(a1 + 376) = v36 - 1;
      sub_100A0EFD8(a1 + 336, 1);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v37 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v38 = *(double *)(a2 + 8);
      v39 = *(double *)(a2 + 120);
      v40 = *(double *)(a2 + 128);
      v41 = *(_QWORD *)(a2 + 136);
      *(_DWORD *)buf = 134218752;
      v57 = v38;
      v58 = 2048;
      v59 = v39;
      v60 = 2048;
      v61 = v40;
      v62 = 2048;
      v63 = v41;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received pedometer time,%.3lf,pace,%.3lf,lowerBound,%.3lf,upperBound,%.3lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v44 = *(_QWORD *)(a2 + 8);
      v45 = *(_QWORD *)(a2 + 120);
      v46 = *(double *)(a2 + 128);
      v47 = *(_QWORD *)(a2 + 136);
      *(_DWORD *)v52 = 134218752;
      *(_QWORD *)&v52[4] = v44;
      *(_WORD *)&v52[12] = 2048;
      *(_QWORD *)&v52[14] = v45;
      *(_WORD *)&v52[22] = 2048;
      v53 = v46;
      v54 = 2048;
      v55 = v47;
      LODWORD(v50) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: received pedometer time,%.3lf,pace,%.3lf,lowerBound,%.3lf,upperBound,%.3lf", COERCE_DOUBLE(v52), v50);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdatePedometerHistory(const CLStepCountEntry &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v27 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v57 = v2;
    v58 = 2048;
    v59 = v17;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered out-of-order step count notification time %.3lf vs. last seen notification time %.3lf", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v9 = qword_1022A0078;
    *(_DWORD *)v52 = 134218240;
    *(double *)&v52[4] = v2;
    *(_WORD *)&v52[12] = 2048;
    *(double *)&v52[14] = v17;
    v51 = 22;
    v11 = "#Warning Pedometer Assistance: encountered out-of-order step count notification time %.3lf vs. last seen notif"
          "ication time %.3lf";
    goto LABEL_66;
  }
  return result;
}

uint64_t sub_10021FA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  uint64_t result;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE buf[12];
  char v21;
  int v22;
  _BYTE *v23;
  void *__p[2];
  char v25;

  if (!a2)
    sub_1019539F0();
  v4 = *(_QWORD *)(a1 + 128);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(__p, a2);
      v14 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: could not handle exiting %s", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v18 = qword_1022A0078;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(buf, a2);
      if (v21 >= 0)
        v19 = buf;
      else
        v19 = *(_BYTE **)buf;
      v22 = 136315138;
      v23 = v19;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 0, "#Warning Pedometer Assistance: could not handle exiting %s", (const char *)&v22);
      if (v21 < 0)
        operator delete(*(void **)buf);
      goto LABEL_59;
    }
LABEL_40:
    sub_10142960C(a1);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(__p, a2);
    v6 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: entering %s", buf, 0xCu);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v15 = qword_1022A0078;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(buf, a2);
    if (v21 >= 0)
      v16 = buf;
    else
      v16 = *(_BYTE **)buf;
    v22 = 136315138;
    v23 = v16;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, 2, "Pedometer Assistance: entering %s", (const char *)&v22);
    if (v21 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::ChangeState(PedometerAssistanceState *const)", "%s\n", v17);
    if (v17 != (char *)__p)
      free(v17);
  }
  *(_QWORD *)(a1 + 128) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((result & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(__p);
      v9 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: could not handle entering %s", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v10 = qword_1022A0078;
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(buf);
      if (v21 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v22 = 136315138;
      v23 = v11;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 0, "#Warning Pedometer Assistance: could not handle entering %s", (const char *)&v22);
      if (v21 < 0)
        operator delete(*(void **)buf);
LABEL_59:
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::ChangeState(PedometerAssistanceState *const)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  return result;
}

void sub_100220000(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CDF08);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#imag,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#imag,start", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::start()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  while (v3 != v4)
  {
    *(_QWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = 0;
    v3 += 48;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 73) = 1;
  *(_DWORD *)(a1 + 76) = 0;
}

uint64_t sub_1002201C0(uint64_t result)
{
  *(_BYTE *)(result + 81) = 0;
  return result;
}

uint64_t sub_1002201C8()
{
  if (qword_102308B90 != -1)
    dispatch_once(&qword_102308B90, &stru_10218BA68);
  return qword_102311730;
}

float sub_100220208(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = sub_100219944(a2);
  v4 = 0.0;
  if ((_DWORD)v3 && *(double *)(a2 + 600) < *(double *)a2 && (sub_1014020D0(v3, (double *)a2) & 1) == 0)
  {
    v6 = *(float *)(a2 + 1380);
    v7 = *(float *)(a2 + 1384);
    v8 = 1.0;
    if (v6 > v7)
    {
      v9 = *(double *)(a2 + 560);
      v8 = (v6 - v9) / (v6 - v7);
    }
    v5 = *(float *)(a2 + 1368);
    return v5 * sub_10108B14C(v8, *(float *)(a2 + 1372));
  }
  return v4;
}

void sub_1002202A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  float v7;
  float v8;
  float v9;
  _BOOL4 v11;
  _BOOL4 v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  unsigned __int8 v22;
  float v23;
  float v24;
  float v25;
  float v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  double v31[2];
  int v32;
  float v33;
  double v34;
  double v35;
  uint64_t v36;
  int v37;
  float v38;
  float v39;
  int v40;
  int v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  uint8_t buf[4];
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v36);
  v6 = (*(_QWORD *(**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(v31, a1, a2);
  v7 = sub_100220208((uint64_t)v6, a2);
  *(float *)a3 = v7;
  v8 = v38;
  *(_DWORD *)(a3 + 12) = v37;
  *(_DWORD *)(a3 + 36) = v40;
  v9 = -1.0;
  if (v7 > 0.0)
    v9 = (float)(v7 - v8) / v8;
  *(float *)(a3 + 16) = v9;
  v11 = v8 > 2.1 && *(_BYTE *)(a1 + 8) != 0;
  v12 = v9 > 0.1 && v11;
  if (v12)
  {
    v13 = v7;
    v14 = v7;
    if (!*(_BYTE *)(a1 + 9))
    {
      v15 = *(float *)(a1 + 12);
      v16 = v8 * v15;
      if (v16 >= v7)
        v13 = v7;
      else
        v13 = v16;
      if ((float)(v15 * v39) >= v7)
        v14 = v7;
      else
        v14 = v15 * v39;
    }
    *(float *)(a3 + 20) = v13;
    *(float *)(a3 + 28) = v14;
    v17 = 1;
    *(_DWORD *)(a3 + 24) = 1;
  }
  else
  {
    v18 = *((float *)&v34 + 1);
    v19 = v33 > v8;
    if (v33 >= v8)
      v13 = v33;
    else
      v13 = v8;
    *(float *)(a3 + 20) = v13;
    *(_DWORD *)(a3 + 24) = 4 * v19;
    v20 = v18 > v39;
    if (v18 >= v39)
      v14 = v18;
    else
      v14 = v39;
    *(float *)(a3 + 28) = v14;
    v17 = 4 * v20;
  }
  *(_DWORD *)(a3 + 32) = v17;
  v21 = *(unsigned __int8 *)(a2 + 324);
  v22 = sub_10004DD7C(*(unsigned int *)(a2 + 288));
  v23 = 1.6;
  if (((v21 != 0) & v22) != 0)
    v23 = 2.1;
  if (v14 <= v23)
    v24 = v23;
  else
    v24 = *(float *)(a3 + 28);
  *(float *)(a3 + 28) = v24;
  v25 = v38;
  v26 = v33;
  *(float *)(a3 + 4) = v38;
  *(float *)(a3 + 8) = v26;
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_1021B5100);
  v27 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219520;
    v56 = v25;
    v57 = 2048;
    v58 = v26;
    v59 = 2048;
    v60 = v7;
    v61 = 2048;
    v62 = v9;
    v63 = 1024;
    v64 = v12;
    v65 = 2048;
    v66 = v13;
    v67 = 2048;
    v68 = v24;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Pedestrian, wrMets, %f,  fmMets, %f, hrMets, %f, hrwrDiff, %f, useHrMets, %d, userMets, %f, truthMets, %f", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021B5100);
    v41 = 134219520;
    v42 = v25;
    v43 = 2048;
    v44 = v26;
    v45 = 2048;
    v46 = v7;
    v47 = 2048;
    v48 = v9;
    v49 = 1024;
    v50 = v12;
    v51 = 2048;
    v52 = v13;
    v53 = 2048;
    v54 = v24;
    LODWORD(v30) = 68;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Pedestrian, wrMets, %f,  fmMets, %f, hrMets, %f, hrwrDiff, %f, useHrMets, %d, userMets, %f, truthMets, %f", COERCE_DOUBLE(&v41), v30, v31[0], v31[1], v32, v34, v35);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCaloriePedestrianModelInterface::computeMETS(const CLNatalieModelInput &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

void sub_10022067C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2[3];

  v2[0] = (uint64_t)v2;
  v2[1] = (uint64_t)v2;
  v2[2] = 0;
  sub_1000C931C(a1 + 128, a2, v2);
}

void sub_100220F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_1000CAD6C(&a25);
  sub_100D43C24((uint64_t)&a29, a30);
  sub_100D43C24((uint64_t)&a32, a33);
  if (a47 < 0)
    operator delete(__p);
  sub_1000CAD6C(&a55);
  sub_1000CAD6C(&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_100221034(uint64_t a1)
{
  uint64_t v2;

  sub_1002433B8(a1);
  *(_DWORD *)(v2 + 40) = 0xFFFF;
  *(_QWORD *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 44) = 0;
  *(_OWORD *)(v2 + 60) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v2 + 76) = _Q0;
  *(_OWORD *)(v2 + 92) = _Q0;
  *(_OWORD *)(v2 + 108) = _Q0;
  *(_DWORD *)(v2 + 124) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 156) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 164) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  sub_10012A33C(v2 + 200);
  return a1;
}

uint64_t sub_1002210BC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) < 0xCu) & (0xC02u >> *(_DWORD *)(a1 + 96));
}

void sub_1002210D8(uint64_t a1, __int128 *a2, char *__src)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  NSObject *v8;
  const char *v9;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  NSObject *v24;
  int v25;
  int v26;
  uint8_t *v27;
  _QWORD v28[2];
  uint8_t buf[4];
  int v30;

  v4 = *((_DWORD *)a2 + 24);
  v5 = v4 > 0xB;
  v6 = (1 << v4) & 0xC02;
  if (v5 || v6 == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173780);
    v24 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      v25 = *((_DWORD *)a2 + 24);
      *(_DWORD *)buf = 67240192;
      v30 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "unexpected location type %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173780);
      v26 = *((_DWORD *)a2 + 24);
      LODWORD(v28[0]) = 67240192;
      HIDWORD(v28[0]) = v26;
      v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "unexpected location type %{public}d", v28, 8, v28[0]);
      goto LABEL_25;
    }
  }
  else if (*(double *)((char *)a2 + 76) == 0.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173780);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173780);
      LOWORD(v28[0]) = 0;
      v9 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location timestamp is not set!", v28, 2, v28[0]);
LABEL_25:
      v27 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiReachIntersectionAnalytics::receiveRefLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v9);
      if (v27 != buf)
        free(v27);
    }
  }
  else if (*(double *)((char *)a2 + 20) <= 30.0)
  {
    v12 = *a2;
    *(_OWORD *)(a1 + 56) = a2[1];
    *(_OWORD *)(a1 + 40) = v12;
    v13 = a2[2];
    v14 = a2[3];
    v15 = a2[4];
    *(_OWORD *)(a1 + 120) = a2[5];
    *(_OWORD *)(a1 + 104) = v15;
    *(_OWORD *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 72) = v13;
    v16 = a2[6];
    v17 = a2[7];
    v18 = a2[8];
    *(_OWORD *)(a1 + 180) = *(__int128 *)((char *)a2 + 140);
    *(_OWORD *)(a1 + 168) = v18;
    *(_OWORD *)(a1 + 152) = v17;
    *(_OWORD *)(a1 + 136) = v16;
    memcpy((void *)(a1 + 200), __src, 0x201uLL);
    sub_100349198((_QWORD *)(a1 + 720), (uint64_t *)__src + 65);
    v20 = *(_OWORD *)(__src + 552);
    v19 = *(_OWORD *)(__src + 568);
    *(_OWORD *)(a1 + 736) = *(_OWORD *)(__src + 536);
    *(_OWORD *)(a1 + 752) = v20;
    *(_OWORD *)(a1 + 768) = v19;
    v22 = *(_OWORD *)(__src + 600);
    v21 = *(_OWORD *)(__src + 616);
    v23 = *(_OWORD *)(__src + 584);
    *(_BYTE *)(a1 + 832) = __src[632];
    *(_OWORD *)(a1 + 800) = v22;
    *(_OWORD *)(a1 + 816) = v21;
    *(_OWORD *)(a1 + 784) = v23;
  }
}

void sub_10022142C(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_10230E590);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230E590))
  {
    __cxa_atexit((void (*)(void *))sub_1013657A8, &qword_10230E580, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10230E590);
  }
  if (qword_10230E598 != -1)
    dispatch_once(&qword_10230E598, &stru_1021B17C8);
  v3 = *(_QWORD *)algn_10230E588;
  *a1 = qword_10230E580;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_1002214E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  unsigned __int8 *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a4 + 1480);
    v9[0] = 68289282;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 1026;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ilsa,CLStreamingAwareLocationProvider,onLocationStreamingControlStateNotification\", \"allowStreaming\":%{public}d}", (uint8_t *)v9, 0x18u);
  }
  v8 = *(unsigned __int8 **)(a1 + 128);
  if (v8)
    sub_10021DA58(v8, *(unsigned __int8 *)(a4 + 1480));
}

void sub_1002215E8(uint64_t a1)
{
  sub_10000E59C(a1);
  operator delete();
}

void sub_10022160C(unsigned __int16 *a1, unsigned int a2, unsigned int a3, int a4, double a5)
{
  sub_1000DBFF8(a1, a2, a3, a4, 0, a5);
}

void sub_100221614(double a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;

  v3 = a1 + -2.56;
  v4 = *(double *)(a3 + 32);
  if (v4 < a1 + -2.56)
    v4 = a1 + -2.56;
  if (v4 <= a1)
    v3 = v4;
  *(double *)(a3 + 24) = v3;
  *(double *)(a3 + 32) = a1;
}

_QWORD *sub_10022163C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

id sub_100221648(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), a2, 0);
}

id sub_10022165C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), a2, 0);
}

uint64_t sub_100221670(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 152))(*(_QWORD *)(a1 + 80));
}

void sub_100221680(double *a1, int a2, int a3)
{
  double v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  double v14;
  double v15;
  int v16;
  const char *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;

  v14 = 0.0;
  v15 = 0.0;
  sub_10001F22C(&v15, &v14, a3, a2);
  if (vabdd_f64(*a1, v15) > 0.000001 || vabdd_f64(a1[1], v14) > 0.000001)
  {
    if ((sub_10060538C((uint64_t)(a1 + 9), &v15, &v14) & 1) != 0)
    {
      v6 = v14;
      *a1 = v15;
      a1[1] = v6;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v8 = "#rte";
        if (a3)
          v8 = "#rof";
        *(_DWORD *)buf = 136315906;
        v25 = v8;
        v26 = 2050;
        v27 = v15;
        v28 = 2050;
        v29 = v14;
        v30 = 1026;
        v31 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: %s,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v9 = "#rte";
        if (a3)
          v9 = "#rof";
        v16 = 136315906;
        v17 = v9;
        v18 = 2050;
        v19 = v15;
        v20 = 2050;
        v21 = v14;
        v22 = 1026;
        v23 = a2;
        v10 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GNSS_FILE: %s,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", &v16, 38);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRteRofFileDownloadRateOnWorkoutOrFocusedNav(const BOOL, const BOOL)", "%s\n");
LABEL_29:
        if (v10 != buf)
          free(v10);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v12 = "#rte";
        if (a3)
          v12 = "#rof";
        *(_DWORD *)buf = 136315138;
        v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "GNSS_FILE: %s,could not update assistance file download rates", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
        v13 = "#rte";
        if (a3)
          v13 = "#rof";
        v16 = 136315138;
        v17 = v13;
        v10 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "GNSS_FILE: %s,could not update assistance file download rates", (const char *)&v16);
        sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateRteRofFileDownloadRateOnWorkoutOrFocusedNav(const BOOL, const BOOL)", "%s\n");
        goto LABEL_29;
      }
    }
  }
}

uint64_t sub_100221A6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102190580;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = 0x600000000;
  *(_QWORD *)(a1 + 96) = 0xCF0000004F000000;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x8000000080000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 6;
  *(_DWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  sub_1000A659C(a1 + 392);
  return a1;
}

void sub_100221B24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100221B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000A4AE0;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  sub_1000A50A8(v4, (uint64_t)v5);
}

uint64_t sub_100221BA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v6 = *(_OWORD *)(a2 + 7);
  v7 = *(_OWORD *)(a2 + 9);
  v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = (_BYTE *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(v9, (void *)a2[15], a2[16]);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 15);
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_OWORD *)v9 = v10;
  }
  return a1;
}

void sub_100221C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100221C84(__int128 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, _DWORD *a7@<D0>)
{
  NSObject *v14;
  int v15;
  int v16;
  BOOL v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  char *v40;
  NSObject *v41;
  NSObject *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  int v51;
  char *v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  double v68[3];
  _DWORD *v69[4];
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  __int128 v78;
  uint64_t v79;
  uint8_t buf[4];
  _BYTE v81[14];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v14 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v81 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "@EmerCheck, top, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v49 = *(_DWORD *)a1;
    LODWORD(v70) = 67240192;
    HIDWORD(v70) = v49;
    LODWORD(v59) = 8;
    v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, top, %{public}d", &v70, v59);
    sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v50);
    if (v50 != (char *)buf)
      free(v50);
  }
  v16 = *(_DWORD *)a1;
  v17 = sub_1000709AC((_DWORD *)a2);
  if (v16 <= 1 || !v17)
  {
    v22 = a1[5];
    *(_OWORD *)(a6 + 64) = a1[4];
    *(_OWORD *)(a6 + 80) = v22;
    *(_OWORD *)(a6 + 96) = a1[6];
    v23 = a1[1];
    *(_OWORD *)a6 = *a1;
    *(_OWORD *)(a6 + 16) = v23;
    v24 = a1[3];
    *(_OWORD *)(a6 + 32) = a1[2];
    *(_OWORD *)(a6 + 48) = v24;
    sub_100221BA8(a6 + 112, (uint64_t *)a2);
    *(_DWORD *)(a6 + 256) = 0;
    return;
  }
  v19 = a1[5];
  v64 = a1[4];
  v65 = v19;
  v66 = a1[6];
  v20 = a1[1];
  v60 = *a1;
  v61 = v20;
  v21 = a1[3];
  v62 = a1[2];
  v63 = v21;
  v70 = *(_QWORD *)a2;
  v71 = *(_BYTE *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4(&v72, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v72 = *(_OWORD *)(a2 + 16);
    v73 = *(_QWORD *)(a2 + 32);
  }
  v75 = *(_OWORD *)(a2 + 56);
  v76 = *(_OWORD *)(a2 + 72);
  v77[0] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a2 + 100);
  v74 = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_100115CE4(&v78, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v78 = *(_OWORD *)(a2 + 120);
    v79 = *(_QWORD *)(a2 + 136);
  }
  HIDWORD(v59) = a3;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v25 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v81 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "@EmerCheck, current, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v51 = *(_DWORD *)a1;
    LODWORD(v69[0]) = 67240192;
    HIDWORD(v69[0]) = v51;
    LODWORD(v59) = 8;
    v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, current, %{public}d", v69, v59);
    sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v52);
    if (v52 != (char *)buf)
      free(v52);
  }
  v69[0] = &v60;
  v69[1] = (_DWORD *)&v59 + 1;
  v69[2] = a7;
  switch(*(_DWORD *)a1)
  {
    case 2:
      if (!a5)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v35 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "@EmerCheck, support 5GHz, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v67 = 67240192;
          LODWORD(v68[0]) = 0;
          LODWORD(v59) = 8;
          v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, support 5GHz, %{public}d", &v67, v59);
          sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
          goto LABEL_156;
        }
        goto LABEL_79;
      }
      if (*(_DWORD *)(a4 + 84) >= 0x45u && !*sub_10132E524())
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v46 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          v47 = *(_DWORD *)(a4 + 84);
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v81 = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "@EmerCheck, confidence, %{public}d, above threshold", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v48 = *(_DWORD *)(a4 + 84);
          v67 = 67240192;
          LODWORD(v68[0]) = v48;
          LODWORD(v59) = 8;
          v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, confidence, %{public}d, above threshold", &v67, v59);
          sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
          goto LABEL_156;
        }
        goto LABEL_79;
      }
      LODWORD(v60) = 3;
      if (*(double *)&v63 < *((double *)&v60 + 1))
      {
        *(_QWORD *)&v63 = a7;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v27 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)v81 = *(double *)&v63 - *((double *)&v60 + 1);
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v67 = 134349056;
          v68[0] = *(double *)&v63 - *((double *)&v60 + 1);
          LODWORD(v59) = 12;
          v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", &v67, v59);
          sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v58);
          if (v58 != (char *)buf)
            free(v58);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v28 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v81 = HIDWORD(v59);
        *(_WORD *)&v81[4] = 2050;
        *(double *)&v81[6] = *(double *)&v63 - *((double *)&v60 + 1);
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithPendingAls, queryType, %{public}d, tte, %{public}.1f", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v67 = 67240448;
        LODWORD(v68[0]) = HIDWORD(v59);
        WORD2(v68[0]) = 2050;
        *(double *)((char *)v68 + 6) = *(double *)&v63 - *((double *)&v60 + 1);
        LODWORD(v59) = 18;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, ScanRequest5GHzWithPendingAls, queryType, %{public}d, tte, %{public}.1f", &v67, v59);
        sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
        break;
      }
      goto LABEL_80;
    case 4:
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v31 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithAlsReply, waiting for 5GHz scan result", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        LOWORD(v67) = 0;
        LODWORD(v59) = 2;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, ScanRequest5GHzWithAlsReply, waiting for 5GHz scan result", &v67, v59);
        sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
        break;
      }
      goto LABEL_80;
    case 5:
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v32 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@EmerWarn, ScanReply5GHzWithPendingAls, abort waiting for the preliminary ALS response", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        LOWORD(v67) = 0;
        LODWORD(v59) = 2;
        v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerWarn, ScanReply5GHzWithPendingAls, abort waiting for the preliminary ALS response", &v67, v59);
        sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
LABEL_156:
        if (v33 != (char *)buf)
          free(v33);
      }
      goto LABEL_79;
    case 6:
LABEL_79:
      sub_101137064(v69);
      goto LABEL_80;
    case 8:
      LODWORD(v60) = 9;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v34 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Done, alsreply", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_80;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      LOWORD(v67) = 0;
      LODWORD(v59) = 2;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, Done, alsreply", &v67, v59);
      sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
      break;
    default:
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v30 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v81 = v60;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@EmerWarn, unexpected state, processScanResult, %{public}d, #CloneMe", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_80;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v67 = 67240192;
      LODWORD(v68[0]) = v60;
      LODWORD(v59) = 8;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerWarn, unexpected state, processScanResult, %{public}d, #CloneMe", &v67, v59);
      sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
      break;
  }
  if (v29 != (char *)buf)
    free(v29);
LABEL_80:
  if (*(double *)(a4 + 20) > 0.0 && *((double *)&v65 + 1) < *((double *)&v60 + 1))
  {
    *((_QWORD *)&v65 + 1) = a7;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v36 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)v81 = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@EmerTick, anyfix, %{public}.1f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v67 = 134349056;
      v68[0] = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      LODWORD(v59) = 12;
      v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, anyfix, %{public}.1f", &v67, v59);
      sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v57);
      if (v57 != (char *)buf)
        free(v57);
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v37 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(_DWORD *)(a4 + 156);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v81 = v60;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "@EmerCheck, switched, %{public}d, aps, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v53 = *(_DWORD *)(a4 + 156);
    v67 = 67240448;
    LODWORD(v68[0]) = v60;
    WORD2(v68[0]) = 1026;
    *(_DWORD *)((char *)v68 + 6) = v53;
    LODWORD(v59) = 14;
    v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, switched, %{public}d, aps, %{public}d", &v67, v59);
    sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v54);
    if (v54 != (char *)buf)
      free(v54);
  }
  if (*(_DWORD *)(a4 + 156) >= 9u)
  {
    if (*(double *)&v66 < *((double *)&v60 + 1))
    {
      *(_QWORD *)&v66 = a7;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v39 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)v81 = *(double *)&v66 - *((double *)&v60 + 1);
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@EmerTick, sufficientfix, %{public}.1f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v67 = 134349056;
        v68[0] = *(double *)&v66 - *((double *)&v60 + 1);
        LODWORD(v59) = 12;
        v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, sufficientfix, %{public}.1f", &v67, v59);
        sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v40);
        if (v40 != (char *)buf)
          free(v40);
      }
    }
    goto LABEL_104;
  }
  if ((_DWORD)v60 == 9)
  {
LABEL_104:
    sub_10001ECE4((int *)&v70);
    if ((_DWORD)v60 != 9)
    {
      LODWORD(v60) = 9;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v41 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Done, conditions", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        LOWORD(v67) = 0;
        LODWORD(v59) = 2;
        v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerFlow, Done, conditions", &v67, v59);
        sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v56);
        if (v56 != (char *)buf)
          free(v56);
      }
    }
    HIDWORD(v59) = 0;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  v42 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v81 = v60;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "@EmerCheck, returned, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v67 = 67240192;
    LODWORD(v68[0]) = v60;
    LODWORD(v59) = 8;
    v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@EmerCheck, returned, %{public}d", &v67, v59);
    sub_100512490("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v55);
    if (v55 != (char *)buf)
      free(v55);
  }
  v43 = v65;
  *(_OWORD *)(a6 + 64) = v64;
  *(_OWORD *)(a6 + 80) = v43;
  *(_OWORD *)(a6 + 96) = v66;
  v44 = v61;
  *(_OWORD *)a6 = v60;
  *(_OWORD *)(a6 + 16) = v44;
  v45 = v63;
  *(_OWORD *)(a6 + 32) = v62;
  *(_OWORD *)(a6 + 48) = v45;
  sub_100221BA8(a6 + 112, &v70);
  *(_DWORD *)(a6 + 256) = HIDWORD(v59);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
}

void sub_100223248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_10055A600((uint64_t)&a33);
  _Unwind_Resume(a1);
}

double sub_1002232BC(uint64_t a1)
{
  double v2;
  NSObject *v3;
  const char *v4;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  v2 = 1.0;
  if (!sub_100217A74((_DWORD *)(a1 + 6040)))
  {
    v6 = *(_QWORD *)(a1 + 6456);
    if (sub_100217978((_QWORD *)(a1 + 3192), (double *)&v6))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102194CF0);
      v3 = qword_1022A0058;
      v2 = 30.0;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v6 = 68289282;
        v7 = 2082;
        v8 = "";
        v9 = 2050;
        v10 = 0x403E000000000000;
        v4 = "{\"msg%{public}.0s\":\"elevation is steady\", \"max_ap_age_s\":\"%{public}.09f\"}";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v6, 0x1Cu);
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102194CF0);
      v3 = qword_1022A0058;
      v2 = 5.0;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v6 = 68289282;
        v7 = 2082;
        v8 = "";
        v9 = 2050;
        v10 = 0x4014000000000000;
        v4 = "{\"msg%{public}.0s\":\"elevation is not steady\", \"max_ap_age_s\":\"%{public}.09f\"}";
        goto LABEL_11;
      }
    }
  }
  return v2;
}

unint64_t sub_100223460(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (sub_100182520(a1) && (sub_100217A4C(a1) & 1) == 0)
  {
    v4 = sub_100129380(a1);
    v3 = v4 & 0xFFFFFFFFFFFFFF00;
    v2 = v4;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

uint64_t sub_1002234B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *i;
  _QWORD *v7;
  uint64_t v9;

  for (i = *(_QWORD **)(a2 + 1200); i; i = (_QWORD *)*i)
  {
    v9 = i[2];
    v7 = sub_1000254D8(a1, &v9);
    if (!v7)
      sub_100263950("unordered_map::at: key not found");
    sub_10023C76C((uint64_t)(i + 3), *((_DWORD *)v7 + 14), *((_DWORD *)v7 + 16), *((double *)v7 + 10));
  }
  v9 = *(_QWORD *)(a2 + 6456);
  sub_100223918(a2 + 3192, (double *)&v9);
  return sub_100130C4C(a3, a2);
}

void sub_100223558(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  _DWORD *v7;
  double *v8;
  double v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  CFAbsoluteTime Current;
  char v18;
  int v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _DWORD v28[2];
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  _BOOL4 v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;

  v4 = a1 + 3356;
  v5 = *(double *)(a1 + 3428);
  v6 = *(double *)(a1 + 6456);
  v7 = (_DWORD *)(a1 + 6040);
  if (!sub_100217A74((_DWORD *)(a1 + 6040)) && !sub_100217A54(v7))
  {
LABEL_13:
    v18 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_14;
  }
  v8 = (double *)(a1 + 1428);
  v9 = v6 - v5;
  if (*(double *)(a1 + 1428) >= 0.0 || *(_BYTE *)(v4 + 3093))
    goto LABEL_5;
  v10 = 0;
  v19 = *(_DWORD *)(a1 + 6444);
  if (v19 != 1 && v19 != 6)
  {
    if (*(_QWORD *)(a1 + 1128) < 5uLL)
    {
LABEL_5:
      v10 = 0;
      goto LABEL_6;
    }
    v20 = *(double *)(v4 + 16);
    v21 = v20 >= 0.0;
    if (v20 >= 600.0)
      v21 = 0;
    v10 = v9 < 12.0 && v21;
  }
LABEL_6:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021670D0);
  v11 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *v8 < 0.0;
    v13 = *(unsigned __int8 *)(v4 + 3093);
    v14 = *(_DWORD *)(a1 + 6444);
    v15 = *(_QWORD *)(a1 + 1128);
    v16 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)buf = 67241728;
    v42 = v10;
    v43 = 1026;
    v44 = v12;
    v45 = 1026;
    v46 = v13;
    v47 = 1026;
    v48 = v14;
    v49 = 2050;
    v50 = v15;
    v51 = 2050;
    v52 = v16;
    v53 = 1026;
    v54 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiFlow, cpitile, %{public}d, didfix, %{public}d, battsaver, %{public}d, sigenv, %{public}d, aps, %{public}ld, hacc, %{public}0.1f, scanAge, %{public}d", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021670D0);
    v22 = *v8 < 0.0;
    v23 = *(unsigned __int8 *)(v4 + 3093);
    v24 = *(_DWORD *)(a1 + 6444);
    v25 = *(_QWORD *)(a1 + 1128);
    v26 = *(_QWORD *)(v4 + 16);
    v28[0] = 67241728;
    v28[1] = v10;
    v29 = 1026;
    v30 = v22;
    v31 = 1026;
    v32 = v23;
    v33 = 1026;
    v34 = v24;
    v35 = 2050;
    v36 = v25;
    v37 = 2050;
    v38 = v26;
    v39 = 1026;
    v40 = (int)v9;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, cpitile, %{public}d, didfix, %{public}d, battsaver, %{public}d, sigenv, %{public}d, aps, %{public}ld, hacc, %{public}0.1f, scanAge, %{public}d", v28, 52);
    sub_100512490("Generic", 1, 0, 2, "static std::optional<Decisions::WifiTileDownloadRequest> CL::Wifi1::Policies::TileRequest::HandleEvent::defaultDecisionLogic(const Input &)", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  if (!v10)
    goto LABEL_13;
  Current = CFAbsoluteTimeGetCurrent();
  v18 = 1;
  *(_WORD *)a2 = 1;
  *(_BYTE *)(a2 + 2) = 1;
  *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 16) = 3;
  *(CFAbsoluteTime *)(a2 + 24) = Current;
  *(_WORD *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)v4;
LABEL_14:
  *(_BYTE *)(a2 + 56) = v18;
}

uint64_t sub_1002238B4(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_10012D080(a1, a2);
  *(_QWORD *)(v8 + 40) = a2[5];
  *(_BYTE *)(v8 + 48) = a3;
  sub_10031F08C((_BYTE *)(v8 + 56), a4);
  return a1;
}

void sub_100223904(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100223918(uint64_t result, double *a2)
{
  uint64_t v2;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = (_QWORD *)result;
    v4 = *a2 + -30.0;
    v5 = result + 8;
    do
    {
      v6 = v3[5];
      if (*(double *)(*(_QWORD *)(v3[2] + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v6 + 8) >= v4)
        break;
      v3[5] = v6 + 1;
      v3[6] = v2 - 1;
      result = sub_1004A57E8(v5, 1);
      v2 = v3[6];
    }
    while (v2);
  }
  return result;
}

void sub_100223998(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *i;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v4 = *(_QWORD **)(a2 + 16);
  if (v4)
  {
    do
    {
      sub_100212FB0(a1, v4 + 2);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
      sub_10012D8CC((uint64_t)a1, i + 2, (uint64_t)(i + 2));
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[3];
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)buf = 134349312;
    v17 = v7;
    v18 = 2050;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiAps, history, %{public}lu, add, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v9 = a1[3];
    v10 = *(_QWORD *)(a2 + 24);
    v12 = 134349312;
    v13 = v9;
    v14 = 2050;
    v15 = v10;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiAps, history, %{public}lu, add, %{public}lu", &v12, 22);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Types::WifiScanHistory::addScan(const WifiScan &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
}

uint64_t sub_100223BA8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = 1;
  *(_BYTE *)(result + 97) = a2;
  return result;
}

uint64_t sub_100223BB8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_DWORD *)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = 0;
  }
  else
  {
    if (v1 > 2)
    {
      v4 = 0;
    }
    else if (*(_BYTE *)(a1 + 6))
    {
      v4 = (v1 & 7) == 0 || *(_BYTE *)(a1 + 7) == 0;
    }
    else
    {
      v4 = 1;
    }
    *(_BYTE *)(a1 + 8) = v4;
    v2 = !v4;
  }
  if (v1 == 2)
  {
    v12 = 0x90000000000;
    if (v2)
      v12 = 0xC0000000000;
    v14 = v2;
    v13 = 0x800000000;
  }
  else
  {
    v5 = 0x800000000;
    v6 = 0x90000000000;
    if (v2)
      v7 = 0xC0000000000;
    else
      v7 = 0x90000000000;
    if (v2)
    {
      v5 = 0x900000000;
      v8 = 2;
    }
    else
    {
      v8 = 0;
    }
    if (v2)
      v6 = 0xC0000000000;
    v9 = 0x800000000;
    if (v1)
    {
      v6 = 0;
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v10 = v2;
    }
    v11 = v1 == 1;
    if (v1 == 1)
      v12 = v7;
    else
      v12 = v6;
    if (v11)
      v13 = v5;
    else
      v13 = v9;
    if (v11)
      v14 = v8;
    else
      v14 = v10;
  }
  return v13 | v12 | v14;
}

uint64_t sub_100223C8C(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v2;

  if (a1[6] || a1[4] != a2)
  {
    if (a1[7] || a1[5] != a2)
    {
      return 0;
    }
    else
    {
      v2 = 1;
      a1[7] = 1;
    }
  }
  else
  {
    v2 = 1;
    a1[6] = 1;
  }
  return v2;
}

uint64_t sub_100223CDC(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 2)
    return 0;
  else
    return qword_101C054B8[v1] | qword_101C054D0[v1] | 0xC0000000000;
}

void sub_100223D18(_DWORD *a1, unsigned int a2, int a3, int a4)
{
  NSObject *v7;
  char *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  if (a4 + a3 <= a2)
  {
    ++a1[10];
    if (a2)
    {
      a1[4] += a2;
      if (a4 | a3)
      {
        ++a1[7];
        a1[1] += a4 + a3;
        if (a3)
        {
          ++a1[8];
          a1[2] += a3;
        }
        if (a4)
        {
          ++a1[9];
          a1[3] += a4;
        }
      }
    }
    else
    {
      ++a1[6];
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021497C0);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240704;
      v15 = a2;
      v16 = 1026;
      v17 = a3;
      v18 = 1026;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid ap lookup/found counts: apLookupCount: %{public}u, foundInCacheCount: %{public}u, foundInTilesCount: %{public}u", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021497C0);
      v9[0] = 67240704;
      v9[1] = a2;
      v10 = 1026;
      v11 = a3;
      v12 = 1026;
      v13 = a4;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "Invalid ap lookup/found counts: apLookupCount: %{public}u, foundInCacheCount: %{public}u, foundInTilesCount: %{public}u", v9, 20);
      sub_100512490("Generic", 1, 0, 0, "void CLWifiApLocationLookupMetrics::scanBufferApLocationLookup(unsigned int, unsigned int, unsigned int)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
}

uint64_t sub_100223F90(_QWORD *a1)
{
  if (!sub_1001FE40C(a1, (uint64_t)CFSTR("activeType")))
    sub_1002244E0((uint64_t)a1);
  return sub_1001FE338((uint64_t)a1);
}

_QWORD *sub_100223FC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "VisitMonitoring");
}

uint64_t sub_100223FD8(uint64_t result)
{
  uint64_t v1;
  int v2;
  void *v3;

  if (*(_BYTE *)(result + 276))
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 272);
    if (v2 == 1)
    {
      objc_msgSend(*(id *)(result + 264), "stopLeechingVisitsForClient:", *(_QWORD *)(result + 256));
    }
    else
    {
      if (v2)
      {
LABEL_7:
        *(_BYTE *)(v1 + 276) = 0;
LABEL_8:
        objc_msgSend(objc_msgSend(*(id *)(v1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
        v3 = *(void **)(v1 + 64);
        if (v3)
          objc_msgSend(v3, "clientName");
        sub_100248320();
      }
      objc_msgSend(*(id *)(result + 264), "stopMonitoringVisitsForClient:", *(_QWORD *)(result + 256));
    }
    if (!*(_BYTE *)(v1 + 276))
      goto LABEL_8;
    goto LABEL_7;
  }
  return result;
}

void sub_100224108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10022411C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v7;
  float v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  int v12;
  double v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;

  sub_10022B974(a1, a2);
  if (*(_BYTE *)(a2 + 352))
  {
    v5 = *(_DWORD *)(a2 + 152);
    if (v5 == 8 || v5 == 12150)
      v7 = 12150;
    else
      v7 = 17150;
    v8 = sub_1011B9874(v7);
    v9 = *(_QWORD *)(a2 + 336);
    if (v9 != 2 && (v9 == 1 || *(float *)(a3 + 20) < v8))
    {
      *(float *)(a3 + 20) = v8;
      *(_DWORD *)(a3 + 24) = 3;
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021950E0);
    v10 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(float *)(a3 + 20);
      v12 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)buf = 134218752;
      v26 = v11;
      v27 = 1024;
      v28 = v12;
      v29 = 1024;
      v30 = v9;
      v31 = 2048;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pedestrian, mets, %.2f, metsSrc, %d, locationType, %d, fixedMets, %.2f", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021950E0);
      v13 = *(float *)(a3 + 20);
      v14 = *(_DWORD *)(a3 + 24);
      v17 = 134218752;
      v18 = v13;
      v19 = 1024;
      v20 = v14;
      v21 = 1024;
      v22 = v9;
      v23 = 2048;
      v24 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Pedestrian, mets, %.2f, metsSrc, %d, locationType, %d, fixedMets, %.2f", COERCE_DOUBLE(&v17), 34);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCaloriePedestrianModelPhone::computeMETS(const CLNatalieModelInput &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_10022438C(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  if (*(unsigned __int8 *)(a1 + 32) != a2)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_1021912C0);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 32);
      v7[0] = 68289538;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = v5;
      v12 = 1026;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Background escalation manager permission changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", (uint8_t *)v7, 0x1Eu);
    }
  }
  *(_BYTE *)(a1 + 32) = a2;
  sub_100197040();
  if (sub_100241620() && sub_1001FD8B8(*(_QWORD *)(a1 + 104)) > 0.0 && *(_BYTE *)(a1 + 32))
  {
    LOBYTE(v7[0]) = 1;
    v6 = *(_QWORD *)(a1 + 208);
    if (!v6)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 48))(v6, v7);
  }
}

void sub_1002244E0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1001FE68C(a1);
  v2 = *(_QWORD *)(a1 + 48);
  sub_1007208BC(&v6, (_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100224564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100224578(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  NSObject *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  NSObject *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  if (!*a2 || (v4 = a1 + 6, a1[6]))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102150240);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v7 = a1[6] != 0;
      v8 = *a2 != 0;
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v7;
      v21 = 1026;
      v22 = v8;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "persistence && !fPersistence";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Persistent subscription persistence must be set exactly once and set to a non-null value\", \"fPersistence\":%{public}hhd, \"persistence\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102150240);
    }
    v9 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v10 = a1[6] != 0;
      v11 = *a2 != 0;
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v10;
      v21 = 1026;
      v22 = v11;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "persistence && !fPersistence";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Persistent subscription persistence must be set exactly once and set to a non-null value", "{\"msg%{public}.0s\":\"Persistent subscription persistence must be set exactly once and set to a non-null value\", \"fPersistence\":%{public}hhd, \"persistence\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102150240);
    }
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v13 = a1[6] != 0;
      v14 = *a2 != 0;
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v13;
      v21 = 1026;
      v22 = v14;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "persistence && !fPersistence";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Persistent subscription persistence must be set exactly once and set to a non-null value\", \"fPersistence\":%{public}hhd, \"persistence\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLPersistentSubscription.mm", 36, "setPersistence");
  }
  sub_100349198(v4, a2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
}

void sub_10022488C(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  if (*(_BYTE *)(a1 + 258))
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a2 + 4);
    v8 = *(_QWORD *)&a3;
    v9 = 2;
    sub_101422918(a1, &v8);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174913;
      v16 = v11;
      v17 = 2048;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedGnssAvailability,gnssAvailabilityEvidence,%{private}d,currentTime,%f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v12[0] = 67174913;
      v12[1] = v11;
      v13 = 2048;
      v14 = a3;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedGnssAvailability,gnssAvailabilityEvidence,%{private}d,currentTime,%f", v12, 18, v8);
LABEL_19:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedGnssAvailability(const CLLocationProvider_Type::PredictedGnssAvailability &, const CFAbsoluteTime)", "%s\n", v5);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffGnssAvailability", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v8) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffGnssAvailability", &v8, 2, v8);
      goto LABEL_19;
    }
  }
}

void sub_100224B54(uint64_t a1, __int128 *a2, double a3)
{
  __int128 v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  double v9;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  double v20;

  if (*(_BYTE *)(a1 + 260))
  {
    v4 = a2[1];
    v11 = *a2;
    v12 = v4;
    v9 = a3;
    v10 = 6;
    sub_1014234BC(a1, &v9);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v5 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283777;
      v18 = *((_QWORD *)&v11 + 1);
      v19 = 2048;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedCMGpsModelOutput,gpsModelOutputEvidence,%{private}f,currentTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v13 = 134283777;
      v14 = *((_QWORD *)&v11 + 1);
      v15 = 2048;
      v16 = a3;
      v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedCMGpsModelOutput,gpsModelOutputEvidence,%{private}f,currentTime,%f", &v13, 22, *(_QWORD *)&v9);
LABEL_19:
      v8 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedCMGpsModelOutput(const CLOutdoorEstimator_Type::CMGpsModelOutput &, const CFAbsoluteTime)", "%s\n", v6);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v7 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMGpsModelOutput", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v9) = 0;
      v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMGpsModelOutput", &v9, 2, *(_QWORD *)&v9);
      goto LABEL_19;
    }
  }
}

void sub_100224E14(uint64_t a1, __int128 *a2, double a3)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  double v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  double v18;

  if (*(_BYTE *)(a1 + 262))
  {
    v10 = *a2;
    v8 = a3;
    v9 = 5;
    sub_1014241F4(a1, &v8);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283777;
      v16 = *((_QWORD *)&v10 + 1);
      v17 = 2048;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedCMAlsModelOutput,alsModelOutputEvidence,%{private}f,currentTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v11 = 134283777;
      v12 = *((_QWORD *)&v10 + 1);
      v13 = 2048;
      v14 = a3;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedCMAlsModelOutput,alsModelOutputEvidence,%{private}f,currentTime,%f", &v11, 22, *(_QWORD *)&v8);
LABEL_19:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedCMAlsModelOutput(const CLOutdoorEstimator_Type::CMALSModelOutput &, const CFAbsoluteTime)", "%s\n", v5);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMAlsModelOutput", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v8) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffCMAlsModelOutput", &v8, 2, *(_QWORD *)&v8);
      goto LABEL_19;
    }
  }
}

void sub_1002250D4(uint64_t a1, int a2, double a3)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  double v8;
  int v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  double v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  double v17;

  if (*(_BYTE *)(a1 + 257))
  {
    v8 = a3;
    v9 = 1;
    v10 = a2;
    sub_10005EE04(a1, (uint64_t *)&v8);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174913;
      v15 = v10;
      v16 = 2048;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController_feedMotionActivity,activityStateEvidence,%{private}d,currentTime,%f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      v11[0] = 67174913;
      v11[1] = v10;
      v12 = 2048;
      v13 = a3;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController_feedMotionActivity,activityStateEvidence,%{private}d,currentTime,%f", v11, 18);
LABEL_19:
      v7 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimatorController::feedMotionActivity(const CMMotionContext::MotionType, const CFAbsoluteTime)", "%s\n", v5);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021ABD50);
    v6 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffMotionActivity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021ABD50);
      LOWORD(v11[0]) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimatorController,CLOutdoorEstimatorTurnOffMotionActivity", v11, 2);
      goto LABEL_19;
    }
  }
}

void sub_10022538C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102196A58;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10002FA68((uint64_t)a1);
  operator delete();
}

uint64_t sub_1002253E8(uint64_t a1, uint64_t a2)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_1000ADEA8(a1 + 512, a2, Current);
}

void *sub_100225414()
{
  unsigned __int8 v0;
  void *result;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A03F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1022A03F8))
    operator new();
  result = off_1022A03F0;
  if (*((char *)off_1022A03F0 + 23) < 0)
    return *(void **)off_1022A03F0;
  return result;
}

void sub_100225508(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

const char *sub_10022555C(int a1)
{
  if ((a1 - 1) > 6)
    return "none";
  else
    return off_10214FC20[a1 - 1];
}

double sub_100225584(uint64_t a1, int a2, double result)
{
  double v3;

  if (a2 >= 1)
  {
    v3 = *(double *)(a1 + 64);
    if (v3 != -1.0)
    {
      if (*(double *)(a1 + 80) == -1.0)
      {
        *(double *)(a1 + 80) = result - v3;
        *(_DWORD *)(a1 + 104) = a2;
      }
      if (a2 == 2 && *(double *)(a1 + 88) == -1.0)
      {
        result = result - v3;
        *(double *)(a1 + 88) = result;
        *(_DWORD *)(a1 + 104) = 2;
      }
    }
  }
  return result;
}

uint64_t sub_1002255E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
}

CFAbsoluteTime sub_1002255F0(uint64_t a1, unint64_t a2)
{
  CFAbsoluteTime result;

  result = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 112);
  if (result >= (double)a2)
  {
    if (*(_DWORD *)a1 + *(_DWORD *)(a1 + 4))
    {
      sub_101325FF4((double *)a1);
      *(_QWORD *)&result = sub_101325E3C(a1).n128_u64[0];
    }
  }
  return result;
}

BOOL sub_10022564C(uint64_t a1)
{
  _BOOL8 result;
  _DWORD *v3;

  sub_1002255F0(a1, 0x15180uLL);
  ++*(_DWORD *)(a1 + 12);
  result = sub_10018D390(*(_QWORD *)(a1 + 96));
  if (!result)
  {
    v3 = (_DWORD *)(a1 + 28);
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 24);
  if (sub_10018D33C(*(_QWORD *)(a1 + 96)))
    ++*(_DWORD *)(a1 + 16);
  result = sub_10018D26C(*(_QWORD *)(a1 + 96));
  if (result)
  {
    v3 = (_DWORD *)(a1 + 20);
LABEL_7:
    ++*v3;
  }
  return result;
}

void sub_1002256D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 - 8;
  if (!a2)
    v2 = 0;
  *(_WORD *)(v2 + 488) = 1;
}

double sub_1002256EC@<D0>(char *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void *v6;
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  NSObject *v16;
  char *v17;
  __int128 v18;
  int v19;
  void **v20;
  void **v21;
  void **v22;
  NSObject *v23;
  char *v24;
  __int128 v25;
  int v26;
  void **v27;
  void **v28;
  void *__p[2];
  char v30;
  void *__dst[2];
  uint64_t v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;

  if (a2)
    v5 = (void **)(a2 - 8);
  else
    v5 = 0;
  if (!lpsrc
  {
    v8 = &qword_1022A0000;
    if (qword_1022A00F0 != -1)
      goto LABEL_52;
    while (1)
    {
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
      {
        v10 = (char *)v5[2];
        if (v10[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v10 + 1), *((_QWORD *)v10 + 2));
        }
        else
        {
          v11 = *(_OWORD *)(v10 + 8);
          v32 = *((_QWORD *)v10 + 3);
          *(_OWORD *)__dst = v11;
        }
        v12 = SHIBYTE(v32);
        v13 = (void **)__dst[0];
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v14 = __dst;
        if (v12 < 0)
          v14 = v13;
        if (v30 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v14;
        v39 = 2081;
        v40 = v15;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
        if (v8[30] != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      }
      v16 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        v17 = (char *)v5[2];
        if (v17[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v17 + 1), *((_QWORD *)v17 + 2));
        }
        else
        {
          v18 = *(_OWORD *)(v17 + 8);
          v32 = *((_QWORD *)v17 + 3);
          *(_OWORD *)__dst = v18;
        }
        v19 = SHIBYTE(v32);
        v20 = (void **)__dst[0];
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v21 = __dst;
        if (v19 < 0)
          v21 = v20;
        if (v30 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v21;
        v39 = 2081;
        v40 = v22;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
        if (v8[30] != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      }
      v23 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v24 = (char *)v5[2];
        if (v24[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v24 + 1), *((_QWORD *)v24 + 2));
        }
        else
        {
          v25 = *(_OWORD *)(v24 + 8);
          v32 = *((_QWORD *)v24 + 3);
          *(_OWORD *)__dst = v25;
        }
        v26 = SHIBYTE(v32);
        v8 = (uint64_t *)__dst[0];
        v5 = __p;
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v27 = __dst;
        if (v26 < 0)
          v27 = (void **)v8;
        if (v30 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v27;
        v39 = 2081;
        v40 = v28;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
      }
      sub_1018F34BC();
      __break(1u);
LABEL_52:
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    }
  }
  return sub_1000408B4((uint64_t)v5, (uint64_t)v6, a3);
}

void sub_100225B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100225B7C@<X0>(char *lpsrc@<X2>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void *v6;
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  NSObject *v16;
  char *v17;
  __int128 v18;
  int v19;
  void **v20;
  void **v21;
  void **v22;
  NSObject *v23;
  char *v24;
  __int128 v25;
  int v26;
  void **v27;
  void **v28;
  void *__p[2];
  char v30;
  void *__dst[2];
  uint64_t v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;

  if (a2)
    v5 = (void **)(a2 - 8);
  else
    v5 = 0;
  if (!lpsrc
  {
    v8 = &qword_1022A0000;
    if (qword_1022A00F0 != -1)
      goto LABEL_52;
    while (1)
    {
      v9 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
      {
        v10 = (char *)v5[2];
        if (v10[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v10 + 1), *((_QWORD *)v10 + 2));
        }
        else
        {
          v11 = *(_OWORD *)(v10 + 8);
          v32 = *((_QWORD *)v10 + 3);
          *(_OWORD *)__dst = v11;
        }
        v12 = SHIBYTE(v32);
        v13 = (void **)__dst[0];
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v14 = __dst;
        if (v12 < 0)
          v14 = v13;
        if (v30 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v14;
        v39 = 2081;
        v40 = v15;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
        if (v8[30] != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      }
      v16 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        v17 = (char *)v5[2];
        if (v17[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v17 + 1), *((_QWORD *)v17 + 2));
        }
        else
        {
          v18 = *(_OWORD *)(v17 + 8);
          v32 = *((_QWORD *)v17 + 3);
          *(_OWORD *)__dst = v18;
        }
        v19 = SHIBYTE(v32);
        v20 = (void **)__dst[0];
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v21 = __dst;
        if (v19 < 0)
          v21 = v20;
        if (v30 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v21;
        v39 = 2081;
        v40 = v22;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unsupported event in state event handler", "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
        if (v8[30] != -1)
          dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      }
      v23 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
      {
        v24 = (char *)v5[2];
        if (v24[31] < 0)
        {
          sub_100115CE4(__dst, *((void **)v24 + 1), *((_QWORD *)v24 + 2));
        }
        else
        {
          v25 = *(_OWORD *)(v24 + 8);
          v32 = *((_QWORD *)v24 + 3);
          *(_OWORD *)__dst = v25;
        }
        v26 = SHIBYTE(v32);
        v8 = (uint64_t *)__dst[0];
        v5 = __p;
        sub_1002E6448(lpsrc, (uint64_t)__p);
        v27 = __dst;
        if (v26 < 0)
          v27 = (void **)v8;
        if (v30 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        *(_DWORD *)buf = 68290051;
        v34 = 0;
        v35 = 2082;
        v36 = "";
        v37 = 2081;
        v38 = v27;
        v39 = 2081;
        v40 = v28;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "derivedEventData != __null";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unsupported event in state event handler\", \"State\":%{private, location:escape_only}s, \"Received Event\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
        if (v30 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v32) < 0)
          operator delete(__dst[0]);
      }
      sub_1018F34BC();
      __break(1u);
LABEL_52:
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    }
  }
  return sub_100029CC8((uint64_t)v5, (uint64_t)v6, a3);
}

void sub_100225FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022600C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 288);
}

uint64_t sub_100226014(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 289);
}

BOOL sub_10022601C()
{
  return sub_10019CFA0() == 1;
}

id sub_100226038(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetHasAuthorizedClients");
}

void sub_10022605C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint8_t *v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  __int128 *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  void **v34;
  NSObject *v35;
  void **v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  NSObject *v57;
  int v58;
  int v59;
  const char *v60;
  uint8_t *v61;
  void ***v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint8_t *v66;
  const char *v67;
  const char *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint8_t *v73;
  const char *v74;
  uint8_t *v75;
  const char *v76;
  uint8_t *v77;
  const char *v78;
  uint8_t *v79;
  const char *v80;
  uint8_t *v81;
  uint64_t v82;
  void **v83;
  const char *v84;
  uint8_t *v85;
  uint64_t v86;
  void **v87;
  const char *v88;
  uint8_t *v89;
  uint8_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107[2];
  char v108;
  int v109;
  unint64_t v110;
  __int16 v111;
  void **v112;
  __int128 v113;
  char v114;
  uint8_t buf[24];
  __int16 __p;
  __int128 *__p_2;

  if (*(_BYTE *)(a1 + 136))
  {
    if (*(_QWORD *)(a1 + 112))
      goto LABEL_166;
    v4 = (uint8_t *)&qword_1022A0000;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v5 = (uint8_t *)&qword_1022A0000;
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "onClientNotification";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      LODWORD(v113) = 136446210;
      *(_QWORD *)((char *)&v113 + 4) = "onClientNotification";
      LODWORD(v91) = 12;
      v4 = buf;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v113);
      v64 = (uint8_t *)v63;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v63);
      if (v64 != buf)
        free(v64);
    }
    if (*(_QWORD *)(a1 + 112))
    {
LABEL_166:
      sub_1001A885C(a4, (uint64_t)v107);
      switch(*a3)
      {
        case 0:
          if (!*(_QWORD *)(a1 + 112))
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v11 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "kNotificationReset";
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102182050);
              LODWORD(v113) = 136446210;
              *(_QWORD *)((char *)&v113 + 4) = "kNotificationReset";
              LODWORD(v91) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v113);
              v77 = (uint8_t *)v76;
              sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v76);
              if (v77 != buf)
                free(v77);
            }
            if (!*(_QWORD *)(a1 + 112))
            {
              sub_101928008((uint64_t)buf, v12, v13, v14, v15, v16, v17, v18, v90, v91, v92, v93, v94, (uint64_t)v95, v96, v97, (uint64_t)v98, v99, v100,
                v101,
                v102,
                v103,
                v104,
                v105);
              goto LABEL_116;
            }
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v19 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Reset received; sending reset notification",
              buf,
              2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            LOWORD(v113) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Reset received; sending reset notification",
              &v113,
              2);
            v66 = (uint8_t *)v65;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v65);
            if (v66 != buf)
              free(v66);
          }
          if (*(_QWORD *)(a1 + 176))
            objc_msgSend(*(id *)(a1 + 192), "setObject:forKeyedSubscript:", 0);
          *(_DWORD *)buf = 2;
          (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
          goto LABEL_103;
        case 1:
          if (!*(_QWORD *)(a1 + 112))
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v4 = (uint8_t *)&qword_1022A0000;
            v37 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "kNotificationUninstallation";
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102182050);
              LODWORD(v113) = 136446210;
              *(_QWORD *)((char *)&v113 + 4) = "kNotificationUninstallation";
              LODWORD(v91) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v113);
              v79 = (uint8_t *)v78;
              sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v78);
              if (v79 != buf)
                free(v79);
            }
            if (!*(_QWORD *)(a1 + 112))
            {
              sub_1019282D0((uint64_t)buf, v38, v39, v40, v41, v42, v43, v44, v90, v91, v92, v93, v94, (uint64_t)v95, v96, v97, (uint64_t)v98, v99, v100,
                v101,
                v102,
                v103,
                v104,
                v105);
              goto LABEL_116;
            }
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v45 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            sub_1001A8D50(a4);
            v46 = a4 + 104;
            if (*(char *)(a4 + 127) < 0)
              v46 = *(_QWORD *)(a4 + 104);
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Removing fences for uninstalled app %{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v70 = qword_1022A0068;
            sub_1001A8D50(a4);
            v71 = a4 + 104;
            if (*(char *)(a4 + 127) < 0)
              v71 = *(_QWORD *)(a4 + 104);
            LODWORD(v113) = 136446210;
            *(_QWORD *)((char *)&v113 + 4) = v71;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v70, 2, "Removing fences for uninstalled app %{public}s", &v113, 12);
            v73 = (uint8_t *)v72;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v72);
            if (v73 != buf)
              free(v73);
          }
          sub_1001A8D50(a4);
          sub_100D3B430(a1, a4 + 104);
          sub_100D3AAE4(a1, (__int128 *)v107, 0);
          goto LABEL_103;
        case 2:
          v24 = *(_QWORD *)(a1 + 112);
          if (v24)
            goto LABEL_40;
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v4 = (uint8_t *)&qword_1022A0000;
          v25 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "kNotificationAuthorization";
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            LODWORD(v113) = 136446210;
            *(_QWORD *)((char *)&v113 + 4) = "kNotificationAuthorization";
            LODWORD(v91) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v113);
            v75 = (uint8_t *)v74;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v74);
            if (v75 != buf)
              free(v75);
          }
          v24 = *(_QWORD *)(a1 + 112);
          if (v24)
          {
LABEL_40:
            v104 = 0;
            v105 = 0;
            v106 = 0;
            sub_1000C8140(v24, (uint64_t)v107, &v104);
          }
          sub_10192816C((uint64_t)buf, v26, v27, v28, v29, v30, v31, v32, v90, v91, v92, v93, v94, (uint64_t)v95, v96, v97, (uint64_t)v98, v99, v100,
            v101,
            v102,
            v103,
            v104,
            v105);
          goto LABEL_116;
        case 4:
          v4 = (uint8_t *)&qword_1022A0000;
          if (*(_QWORD *)(a1 + 112))
            goto LABEL_80;
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v47 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "kNotificationLocationServicesStatus";
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            LODWORD(v113) = 136446210;
            *(_QWORD *)((char *)&v113 + 4) = "kNotificationLocationServicesStatus";
            LODWORD(v91) = 12;
            v5 = buf;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: sMessage, %{public}s, fFenceDatabase is NULL", &v113);
            v81 = (uint8_t *)v80;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v80);
            if (v81 != buf)
              free(v81);
          }
          if (*(_QWORD *)(a1 + 112))
          {
LABEL_80:
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v55 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              if (*(_DWORD *)(a4 + 188) == 1)
                v56 = "enabled";
              else
                v56 = "disabled";
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Location services is now %{public}s; sending enable/disable notification",
                buf,
                0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_102182050);
              if (*(_DWORD *)(a4 + 188) == 1)
                v67 = "enabled";
              else
                v67 = "disabled";
              LODWORD(v113) = 136446210;
              *(_QWORD *)((char *)&v113 + 4) = v67;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Location services is now %{public}s; sending enable/disable notification",
                &v113,
                12);
              v69 = (uint8_t *)v68;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v68);
              if (v69 != buf)
                free(v69);
            }
            if (*(_QWORD *)(a1 + 176))
              objc_msgSend(*(id *)(a1 + 192), "setObject:forKeyedSubscript:", 0);
            __p = 256;
            memset(buf, 0, sizeof(buf));
            if (*(_DWORD *)(a4 + 188) != 1)
            {
              HIBYTE(__p) = 0;
              sub_100944858(*(_QWORD *)(a1 + 112));
            }
            LODWORD(v113) = 3;
            (*(void (**)(uint64_t, __int128 *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v113, buf, 1, 0xFFFFFFFFLL, 0);
            sub_100D39C70(a1);
            *(_QWORD *)&v113 = buf;
            v62 = (void ***)&v113;
            goto LABEL_102;
          }
          sub_101927EA4((uint64_t)buf, v48, v49, v50, v51, v52, v53, v54, v90, v91, v92, v93, v94, (uint64_t)v95, v96, v97, (uint64_t)v98, v99, v100,
            v101,
            v102,
            v103,
            v104,
            v105);
LABEL_116:
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceAuthorizationManager.mm", *(_DWORD *)buf, "onClientNotification");
          break;
        default:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102182050);
          v57 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            v58 = *a3;
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v58;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown client notification %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_102182050);
            v59 = *a3;
            LODWORD(v113) = 67240192;
            DWORD1(v113) = v59;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Got unknown client notification %{public}d", &v113, 8);
            v61 = (uint8_t *)v60;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v60);
            if (v61 != buf)
              free(v61);
          }
          goto LABEL_103;
      }
    }
    else
    {
      sub_101927D10();
    }
    __break(1u);
    dispatch_once(&qword_1022A0060, &stru_102182050);
    v33 = *((_QWORD *)v5 + 13);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v34 = v107;
      if (v108 < 0)
        v34 = (void **)v107[0];
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Fence: Removing denied fences,%{public}lu, for bundle,%{public}s.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)v4 + 12) != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v82 = *((_QWORD *)v5 + 13);
      v83 = v107;
      if (v108 < 0)
        v83 = (void **)v107[0];
      v109 = 134349314;
      v110 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
      v111 = 2082;
      v112 = v83;
      LODWORD(v91) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, 2, "Fence: Removing denied fences,%{public}lu, for bundle,%{public}s.", &v109, v91);
      v85 = (uint8_t *)v84;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v84);
      if (v85 != buf)
        free(v85);
    }
    if (v97 != v6)
      sub_100944B6C(*(_QWORD *)(a1 + 112), (uint64_t *)(v97 + 32));
    *(_DWORD *)buf = 1;
    (*(void (**)(uint64_t, uint8_t *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v113, 0, 0xFFFFFFFFLL, 0);
    sub_100D3AAE4(a1, (__int128 *)v107, 0);
    if (v101 != v100)
    {
      if (*((_QWORD *)v4 + 12) != -1)
        dispatch_once(&qword_1022A0060, &stru_102182050);
      v35 = *((_QWORD *)v5 + 13);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        v36 = v107;
        if (v108 < 0)
          v36 = (void **)v107[0];
        *(_DWORD *)buf = 134349314;
        *(_QWORD *)&buf[4] = 0xEF7BDEF7BDEF7BDFLL * ((v101 - v100) >> 3);
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Fence: Adding authorized fences,%{public}lu, for bundle,%{public}s.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((_QWORD *)v4 + 12) != -1)
          dispatch_once(&qword_1022A0060, &stru_102182050);
        v86 = *((_QWORD *)v5 + 13);
        v87 = v107;
        if (v108 < 0)
          v87 = (void **)v107[0];
        v109 = 134349314;
        v110 = 0xEF7BDEF7BDEF7BDFLL * ((v101 - v100) >> 3);
        v111 = 2082;
        v112 = v87;
        LODWORD(v91) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v86, 2, "Fence: Adding authorized fences,%{public}lu, for bundle,%{public}s.", &v109, v91);
        v89 = (uint8_t *)v88;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v88);
        if (v89 != buf)
          free(v89);
      }
      *(_DWORD *)buf = 0;
      (*(void (**)(uint64_t, uint8_t *, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v100, 0, 0xFFFFFFFFLL, 0);
      sub_100D3AAE4(a1, (__int128 *)v107, 1);
    }
    sub_100D43C24((uint64_t)&v94, v95);
    sub_100D43C24((uint64_t)&v97, v98);
    *(_QWORD *)buf = &v100;
    sub_10091BBB0((void ***)buf);
    *(_QWORD *)buf = &v113;
    sub_10091BBB0((void ***)buf);
    *(_QWORD *)buf = &v104;
    v62 = (void ***)buf;
LABEL_102:
    sub_10091BBB0(v62);
LABEL_103:
    if (v108 < 0)
    {
      v23 = v107[0];
      goto LABEL_105;
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v20 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(unsigned __int8 *)(a1 + 136);
      sub_1001A885C(a4, (uint64_t)&v113);
      v22 = v114 >= 0 ? &v113 : (__int128 *)v113;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v21;
      __p = 2082;
      __p_2 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ignoring notification\", \"WasUnlockedSinceBoot\":%{public}hhd, \"client\":%{public, location:escape_only}s}", buf, 0x22u);
      if (v114 < 0)
      {
        v23 = (void *)v113;
LABEL_105:
        operator delete(v23);
      }
    }
  }
}

void sub_100227B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44)
{
  sub_100D43C24((uint64_t)&a13, a14);
  sub_100D43C24((uint64_t)&a16, a17);
  a44 = &a19;
  sub_10091BBB0((void ***)&a44);
  a44 = (char *)&a36;
  sub_10091BBB0((void ***)&a44);
  a44 = &a23;
  sub_10091BBB0((void ***)&a44);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100227C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  *(_QWORD *)&v3 = a2;
  BYTE8(v3) = a3;
  *(_DWORD *)(a1 + 116) = (int)*((float *)&a3 + 1);
  *(_DWORD *)(a1 + 120) = llroundf((float)((float)*(unint64_t *)((char *)&v3 + 1) * 0.000001) / 60.0);
  sub_10003060C(a1, a1 + 72);
}

void sub_100227C8C(uint64_t a1)
{
  const char *v2;
  int v3;
  NSObject *v4;
  int v5;
  int *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int *v10;
  char *v11;
  char *v12;
  const char *v13;
  _DWORD v14[2];
  __int16 v15;
  char *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  char *v20;

  if (*(_BYTE *)(a1 + 1948) && (*(_DWORD *)(a1 + 1944) & 0x80000000) != 0)
  {
    v2 = (const char *)(a1 + 1952);
    if (*(char *)(a1 + 1975) < 0)
      v2 = *(const char **)v2;
    v3 = open(v2, 526, 420);
    *(_DWORD *)(a1 + 1944) = v3;
    if (v3 < 0)
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v4 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_DWORD *)(a1 + 1944);
        v6 = __error();
        v7 = strerror(*v6);
        *(_DWORD *)buf = 67109378;
        v18 = v5;
        v19 = 2080;
        v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Unable to open nmea fifo FD %d %s.", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v8 = qword_1022A0008;
        v9 = *(_DWORD *)(a1 + 1944);
        v10 = __error();
        v11 = strerror(*v10);
        v14[0] = 67109378;
        v14[1] = v9;
        v15 = 2080;
        v16 = v11;
        LODWORD(v13) = 18;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 2, "Unable to open nmea fifo FD %d %s.", v14, v13);
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::openNmeaPipe()", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
    }
  }
}

void sub_100227EA8(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5, double *a6, double *a7)
{
  _BOOL8 v14;
  NSObject *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint8_t buf[4];
  _BYTE v39[18];
  __int16 v40;
  double v41;
  __int128 v42;

  v14 = sub_100020150(a3, a4);
  if (v14)
  {
    if (*(_BYTE *)(a1 + 120))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A97F8);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, already initialized", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A97F8);
        LOWORD(v30) = 0;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, already initialized", &v30, 2);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiAltitudeKalmanFilter::initializeKalmanFilter(const CFAbsoluteTime &, const double &, const double &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &)", "%s\n", v16);
LABEL_11:
        if (v16 != (char *)buf)
          free(v16);
      }
    }
    else
    {
      if (!sub_10121CEE0(v14, a2, a5, a4, a6, a7))
        return;
      v17 = (_QWORD *)(a5 + 8);
      sub_10012D660((uint64_t)buf, v17);
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v39[4]
                                  + (((unint64_t)(*((_QWORD *)&v42 + 1) + v42 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (BYTE8(v42) + v42 - 1));
      sub_1004A4854(buf);
      sub_10012D660((uint64_t)buf, v17);
      v19 = *(double *)(*(_QWORD *)(*(_QWORD *)&v39[4]
                                  + (((unint64_t)(*((_QWORD *)&v42 + 1) + v42 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (BYTE8(v42) + v42 - 1)
                      + 8);
      sub_1004A4854(buf);
      if (*a2 >= 0.0)
      {
        if (v19 >= 0.0)
        {
          *(double *)(a1 + 64) = *a2;
          *(double *)(a1 + 72) = *a2;
          *(double *)(a1 + 80) = v19;
          *(double *)a1 = *a3;
          v24 = *((double *)sub_10012A448() + 7) * *a4;
          *(double *)(a1 + 8) = v24 * v24;
          *(_QWORD *)(a1 + 112) = v18;
          *(_BYTE *)(a1 + 120) = 1;
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A97F8);
          v25 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            v26 = *a2;
            v27 = *a3;
            *(_DWORD *)buf = 134284289;
            *(double *)v39 = v26;
            *(_WORD *)&v39[8] = 2049;
            *(double *)&v39[10] = v19;
            v40 = 2049;
            v41 = v27;
            LOWORD(v42) = 2050;
            *(double *)((char *)&v42 + 2) = v24;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, initialized, wifi timestamp, %{private}0.3f, relative altitude timestamp, %{private}0.3f, initial altitude, %{private}0.3f, initial uncertainty, %{public}0.3f.", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A97F8);
            v28 = *a2;
            v29 = *a3;
            v30 = 134284289;
            v31 = v28;
            v32 = 2049;
            v33 = v19;
            v34 = 2049;
            v35 = v29;
            v36 = 2050;
            v37 = v24;
            v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, initialized, wifi timestamp, %{private}0.3f, relative altitude timestamp, %{private}0.3f, initial altitude, %{private}0.3f, initial uncertainty, %{public}0.3f.", &v30, 42);
            sub_100512490("Generic", 1, 0, 2, "void CLWifiAltitudeKalmanFilter::initializeKalmanFilter(const CFAbsoluteTime &, const double &, const double &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &)", "%s\n", v16);
            goto LABEL_11;
          }
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A97F8);
          v23 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)v39 = v19;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not initialize, relative altitude timestamp %{private}0.3f was negative.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021A97F8);
            v30 = 134283521;
            v31 = v19;
            v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, did not initialize, relative altitude timestamp %{private}0.3f was negative.", &v30, 12);
            sub_100512490("Generic", 1, 0, 2, "void CLWifiAltitudeKalmanFilter::initializeKalmanFilter(const CFAbsoluteTime &, const double &, const double &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &)", "%s\n", v16);
            goto LABEL_11;
          }
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A97F8);
        v20 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v21 = *a2;
          *(_DWORD *)buf = 134283521;
          *(double *)v39 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not initialize, wifi measurement timestamp %{private}0.3f was negative.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A97F8);
          v22 = *a2;
          v30 = 134283521;
          v31 = v22;
          v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, kalmanFilter, did not initialize, wifi measurement timestamp %{private}0.3f was negative.", &v30, 12);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiAltitudeKalmanFilter::initializeKalmanFilter(const CFAbsoluteTime &, const double &, const double &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &)", "%s\n", v16);
          goto LABEL_11;
        }
      }
    }
  }
}

void sub_100228564(uint64_t a1, int a2, const void **a3, double a4)
{
  char v8;
  int v9;
  NSObject *v10;
  const void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  const void **v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  const void *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;

  sub_100228830(a1, a4);
  if (a2)
  {
    sub_10019C3A8((uint64_t **)a1, a3, (uint64_t)a3);
    v9 = v8 & 1;
  }
  else
  {
    v9 = 0;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102173668);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v11 = a3;
    if (*((char *)a3 + 23) < 0)
      v11 = *a3;
    v12 = "owned";
    v13 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 136381443;
    v29 = v11;
    v14 = "add";
    if (a2)
      v12 = "wild";
    v30 = 2081;
    v31 = v12;
    if (!v9)
      v14 = "skip";
    v32 = 2080;
    v33 = v14;
    v34 = 2050;
    v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TaMetricEvent, onAvengerAdvertisement, id, %{private}s, %{private}s, %s, %{public}ld", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102173668);
    if (*((char *)a3 + 23) < 0)
      a3 = (const void **)*a3;
    v15 = "owned";
    v16 = *(_QWORD *)(a1 + 16);
    v20 = 136381443;
    v21 = a3;
    if (a2)
      v15 = "wild";
    v22 = 2081;
    v23 = v15;
    if (v9)
      v17 = "add";
    else
      v17 = "skip";
    v24 = 2080;
    v25 = v17;
    v26 = 2050;
    v27 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TaMetricEvent, onAvengerAdvertisement, id, %{private}s, %{private}s, %s, %{public}ld", &v20, 42);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::handleOnAdvertisement(BOOL, std::string, CFAbsoluteTime)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (v9)
    sub_100B403BC(a1, "unique", a4);
}

void sub_100228830(uint64_t a1, double a2)
{
  _QWORD *v4;
  const mach_header_64 *v5;
  mach_header_64 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  NSObject *v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _BYTE *v23;
  const char *v24;
  uint8_t *v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  int v40;
  const char *v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD v44[5];
  _QWORD v45[5];
  _QWORD v46[4];
  __int128 __p;
  uint64_t v48;
  int v49;
  _QWORD v50[5];
  int v51;
  int v52;
  _BYTE *v53;
  __int16 v54;
  int v55;
  _BYTE __dst[24];
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  uint8_t buf[4];
  _BYTE *v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;

  if (*(double *)(a1 + 64) < a2)
  {
    v4 = (_QWORD *)(a1 + 32);
    v5 = &_mh_execute_header;
    do
    {
      v6 = (mach_header_64 *)v5;
      v7 = *(_DWORD *)(a1 + 48);
      v8 = *(_DWORD *)(a1 + 52);
      v9 = *(_DWORD *)(a1 + 56);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102173668);
      v10 = v8 + v7 + v9;
      v11 = qword_1022A0048;
      v5 = v6;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_BYTE **)(a1 + 16);
        v13 = *(_QWORD *)(a1 + 40);
        v14 = *(_DWORD *)(a1 + 48);
        v15 = *(_DWORD *)(a1 + 52);
        v16 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 134350336;
        v65 = v12;
        v66 = 2050;
        v67 = v13;
        v68 = 1026;
        v69 = v14;
        v70 = 1026;
        v71 = v15;
        v72 = 1026;
        v73 = v16;
        v74 = 1026;
        v75 = v10;
        _os_log_impl(v6, v11, OS_LOG_TYPE_DEFAULT, "TaMetric, daily, unique, %{public}ld, detected, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, %{public}d", buf, 0x2Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v30 = *(_QWORD *)(a1 + 16);
        v31 = *(_QWORD *)(a1 + 40);
        v32 = *(_DWORD *)(a1 + 48);
        v33 = *(_DWORD *)(a1 + 52);
        v34 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)__dst = 134350336;
        *(_QWORD *)&__dst[4] = v30;
        *(_WORD *)&__dst[12] = 2050;
        *(_QWORD *)&__dst[14] = v31;
        *(_WORD *)&__dst[22] = 1026;
        v57 = v32;
        v58 = 1026;
        v59 = v33;
        v60 = 1026;
        v61 = v34;
        v62 = 1026;
        v63 = v10;
        LODWORD(v43) = 46;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, v6, qword_1022A0048, 0, "TaMetric, daily, unique, %{public}ld, detected, %{public}ld, suspicious, %{public}d, %{public}d, %{public}d, %{public}d", __dst, v43);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::checkToSend(CFAbsoluteTime)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      if (!*(_BYTE *)(a1 + 76))
      {
        v50[0] = _NSConcreteStackBlock;
        v50[1] = 3221225472;
        v50[2] = sub_100B453D4;
        v50[3] = &unk_10215F390;
        v50[4] = a1;
        v51 = v10;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.daily"), v50);
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v17 = *(_QWORD **)(a1 + 24);
        if (v17 != v4)
        {
          do
          {
            if (*((char *)v17 + 55) < 0)
            {
              sub_100115CE4(__dst, (void *)v17[4], v17[5]);
            }
            else
            {
              *(_OWORD *)__dst = *((_OWORD *)v17 + 2);
              *(_QWORD *)&__dst[16] = v17[6];
            }
            v57 = *((_DWORD *)v17 + 14);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102173668);
            v18 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v19 = __dst;
              if (__dst[23] < 0)
                v19 = *(_BYTE **)__dst;
              *(_DWORD *)buf = 136380931;
              v65 = v19;
              v66 = 1026;
              LODWORD(v67) = v57;
              _os_log_impl(v6, v18, OS_LOG_TYPE_DEFAULT, "TaMetric, detecteddaily, id, %{private}s, detections, %{public}d", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_102173668);
              v23 = __dst;
              if (__dst[23] < 0)
                v23 = *(_BYTE **)__dst;
              v52 = 136380931;
              v53 = v23;
              v54 = 1026;
              v55 = v57;
              LODWORD(v43) = 18;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, v6, qword_1022A0048, 0, "TaMetric, detecteddaily, id, %{private}s, detections, %{public}d", &v52, v43);
              v25 = (uint8_t *)v24;
              sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::checkToSend(CFAbsoluteTime)", "%s\n", v24);
              if (v25 != buf)
                free(v25);
            }
            if (!*(_BYTE *)(a1 + 76))
            {
              v46[0] = _NSConcreteStackBlock;
              v46[1] = 3321888768;
              v46[2] = sub_100B454F4;
              v46[3] = &unk_102173638;
              if ((__dst[23] & 0x80000000) != 0)
              {
                sub_100115CE4(&__p, *(void **)__dst, *(unint64_t *)&__dst[8]);
              }
              else
              {
                __p = *(_OWORD *)__dst;
                v48 = *(_QWORD *)&__dst[16];
              }
              v49 = v57;
              AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.dailydetections"), v46);
              if (SHIBYTE(v48) < 0)
                operator delete((void *)__p);
            }
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            v20 = (_QWORD *)v17[1];
            if (v20)
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v21 = (_QWORD *)v17[2];
                v22 = *v21 == (_QWORD)v17;
                v17 = v21;
              }
              while (!v22);
            }
            v17 = v21;
          }
          while (v21 != v4);
        }
      }
      if (*(double *)(a1 + 80) < a2)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *(_DWORD *)(a1 + 88);
          *(_DWORD *)buf = 67240192;
          LODWORD(v65) = v27;
          _os_log_impl(v6, v26, OS_LOG_TYPE_DEFAULT, "TaMetric, weekly, numberOfAlertsPerWeek, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          v37 = *(_DWORD *)(a1 + 88);
          *(_DWORD *)__dst = 67240192;
          *(_DWORD *)&__dst[4] = v37;
          LODWORD(v43) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, v6, qword_1022A0048, 0, "TaMetric, weekly, numberOfAlertsPerWeek, %{public}d", __dst, v43);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::checkToSend(CFAbsoluteTime)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
        if (!*(_BYTE *)(a1 + 76))
        {
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472;
          v45[2] = sub_100B455DC;
          v45[3] = &unk_102131FE8;
          v45[4] = a1;
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.weekly"), v45);
        }
        *(double *)(a1 + 80) = *(double *)(a1 + 80) + 604800.0;
        *(_DWORD *)(a1 + 88) = 0;
      }
      if (*(double *)(a1 + 96) < a2)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102173668);
        v28 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v29 = *(_DWORD *)(a1 + 104);
          *(_DWORD *)buf = 67240192;
          LODWORD(v65) = v29;
          _os_log_impl(v6, v28, OS_LOG_TYPE_DEFAULT, "TaMetric, monthly, numberOfAlertsPerMonth, %{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102173668);
          v40 = *(_DWORD *)(a1 + 104);
          *(_DWORD *)__dst = 67240192;
          *(_DWORD *)&__dst[4] = v40;
          LODWORD(v43) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, v6, qword_1022A0048, 0, "TaMetric, monthly, numberOfAlertsPerMonth, %{public}d", __dst, v43);
          v42 = (uint8_t *)v41;
          sub_100512490("Generic", 1, 0, 2, "void CLTrackingAvoidanceMetrics::checkToSend(CFAbsoluteTime)", "%s\n", v41);
          if (v42 != buf)
            free(v42);
        }
        if (!*(_BYTE *)(a1 + 76))
        {
          v44[0] = _NSConcreteStackBlock;
          v44[1] = 3221225472;
          v44[2] = sub_100B4565C;
          v44[3] = &unk_102131FE8;
          v44[4] = a1;
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.ta.monthly"), v44);
        }
        *(double *)(a1 + 96) = *(double *)(a1 + 96) + 2592000.0;
        *(_DWORD *)(a1 + 104) = 0;
      }
      sub_100B3FE8C(a1, 1);
    }
    while (*(double *)(a1 + 64) < a2);
    sub_100B403BC(a1, "sent", a2);
  }
}

void sub_100229108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100229148(uint64_t a1)
{
  void *__p[2];
  char v4;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "debounceTimer"), "setNextFireDelay:", 1.79769313e308);
  sub_100029448(a1);
  sub_1015A2E04(__p, "force stop immediately");
  sub_10003B410(a1, (uint64_t *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  sub_10023EC78((uint64_t *)(a1 + 648), (uint64_t *)__p);
  return sub_10023ECF4((uint64_t)__p);
}

void sub_1002291CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002291E8(uint64_t a1, int a2, uint64_t a3)
{
  std::chrono::steady_clock::time_point v6;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_100243EFC(*(_QWORD *)(a1 + 144), a3);
  if (a2 == 1)
  {
    sub_100028BE8(*(_QWORD *)(a1 + 144), v6.__d_.__rep_);
  }
  else if (!a2)
  {
    sub_10024FEF0(*(_QWORD *)(a1 + 144));
  }
}

uint64_t sub_100229260@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100229284(uint64_t a1)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[33];
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;

  v14[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v14[8] = _Q0;
  v16 = 0uLL;
  v15 = 0;
  v17 = _Q0;
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  WORD2(v20) = 1;
  DWORD2(v20) = 0;
  __p = 0;
  v24 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v25 = 0;
  v26 = 0xBFF0000000000000;
  v7 = *(_OWORD *)v14;
  v8 = *(unint64_t *)&v14[16];
  v9 = v17;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  sub_100349198((_QWORD *)(a1 + 64), &v18);
  v10 = v21;
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)v22;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v22[17];
  if (v14 != (_BYTE *)a1)
    sub_100F5F1C8((char *)(a1 + 152), (char *)__p, (uint64_t)v24, 0x8E38E38E38E38E39 * ((v24 - (_BYTE *)__p) >> 3));
  *(_QWORD *)(a1 + 176) = v26;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1002293C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10110BD0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002293D4(uint64_t a1)
{
  sub_10000E494(a1);
  operator delete();
}

void sub_1002293F8(uint64_t a1)
{
  sub_10000E434(a1);
  operator delete();
}

uint64_t sub_10022941C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_100229434(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_10022944C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  char v6;
  BOOL v7;

  v4 = *(_DWORD *)(a2 + 1392);
  sub_100197040();
  result = sub_100195F08();
  v6 = 0;
  if ((_DWORD)result && v4)
  {
    if (*(_BYTE *)(a2 + 352))
      v7 = *(_DWORD *)(a2 + 152) == 90603;
    else
      v7 = 1;
    v6 = v7;
  }
  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_1002294AC(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  char *v14;
  int v15;
  double v16;
  uint8_t buf[4];
  double v18;

  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102174508);
  v6 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteController::feedNatalie called, rawMets, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102174508);
    v15 = 134217984;
    v16 = a3;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "CLExerciseMinuteController::feedNatalie called, rawMets, %f", COERCE_DOUBLE(&v15));
    sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteController::feedNatalie(double, const CLNatalieModelInput &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  result = sub_10022944C(a1, a2);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(a1 + 24);
    v10 = a1 + 40;
    do
    {
      v11 = *(unsigned __int8 *)(v8 + 32);
      v12 = v11 >= v9;
      if (v11 >= v9)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (v12)
        v10 = v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 40 && v9 >= *(unsigned __int8 *)(v10 + 32))
      return (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(v10 + 40) + 16))(*(_QWORD *)(v10 + 40), a2, a3);
  }
  return result;
}

uint64_t sub_1002296CC()
{
  sub_100197040();
  return sub_100081BD0() ^ 1;
}

void sub_1002296E8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  int v6;
  double v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  _QWORD v27[5];
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  double v69;
  __int16 v70;
  int v71;

  if (*(_QWORD *)(a1 + 512))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "NETWORK: scheduleRetryTimer, retry timer already scheduled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v28) = 0;
      v3 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: scheduleRetryTimer, retry timer already scheduled", &v28, 2);
LABEL_25:
      v26 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::scheduleRetryTimer(const char *)", "%s\n", v3);
      if (v26 != buf)
        free(v26);
    }
  }
  else
  {
    v6 = sub_10000B248(a1);
    if (v6)
    {
      if (*(_BYTE *)(a1 + 524))
        v7 = sub_100517068(*(_DWORD *)(a1 + 352), 8, 5);
      else
        v7 = 10.0;
      v8 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
      *(_QWORD *)(a1 + 512) = v8;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100718CC0;
      v27[3] = &unk_10212ECA0;
      v27[4] = a1;
      objc_msgSend(v8, "setHandler:", v27);
      objc_msgSend(*(id *)(a1 + 512), "setNextFireDelay:", v7);
    }
    else
    {
      sub_10001FAA8(a1, (uint64_t)"scheduleRetryTimer");
      v7 = -1.0;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 512);
      v11 = *(_DWORD *)(a1 + 352);
      v12 = *(_QWORD *)(a1 + 432);
      v13 = *(_QWORD *)(a1 + 184);
      v14 = *(_QWORD *)(a1 + 224);
      v15 = *(_QWORD *)(a1 + 264);
      v16 = *(_QWORD *)(a1 + 304);
      v17 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)buf = 136317698;
      v51 = a2;
      v52 = 2048;
      v53 = v10;
      v54 = 1024;
      v55 = v11;
      v56 = 2048;
      v57 = v12;
      v58 = 2048;
      v59 = v13;
      v60 = 2048;
      v61 = v14;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v16;
      v66 = 2048;
      v67 = v17;
      v68 = 2048;
      v69 = v7;
      v70 = 1024;
      v71 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d", buf, 0x68u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v18 = *(_QWORD *)(a1 + 512);
      v19 = *(_DWORD *)(a1 + 352);
      v20 = *(_QWORD *)(a1 + 432);
      v21 = *(_QWORD *)(a1 + 184);
      v22 = *(_QWORD *)(a1 + 224);
      v23 = *(_QWORD *)(a1 + 264);
      v24 = *(_QWORD *)(a1 + 304);
      v25 = *(_QWORD *)(a1 + 344);
      v28 = 136317698;
      v29 = a2;
      v30 = 2048;
      v31 = v18;
      v32 = 1024;
      v33 = v19;
      v34 = 2048;
      v35 = v20;
      v36 = 2048;
      v37 = v21;
      v38 = 2048;
      v39 = v22;
      v40 = 2048;
      v41 = v23;
      v42 = 2048;
      v43 = v24;
      v44 = 2048;
      v45 = v25;
      v46 = 2048;
      v47 = v7;
      v48 = 1024;
      v49 = v6;
      v3 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d", &v28, 104);
      goto LABEL_25;
    }
  }
}

void sub_100229B0C(uint64_t a1, double a2, double a3)
{
  double Current;

  Current = j__CFAbsoluteTimeGetCurrent();
  if (!*(_BYTE *)(a1 + 472))
    *(_BYTE *)(a1 + 472) = 1;
  *(double *)(a1 + 464) = Current;
  *(double *)(a1 + 336) = a2;
  *(double *)(a1 + 344) = a3;
  if (*(char *)(a1 + 391) < 0)
  {
    **(_BYTE **)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 391) = 0;
  }
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
}

id sub_100229B78(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102152998);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,CLGnssAssistanceSignalEnv,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,CLGnssAssistanceSignalEnv,start", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 0);
}

id sub_100229D1C(_DWORD *a1)
{
  NSObject *v2;
  id result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102152998);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,CLGnssAssistanceSignalEnv,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,CLGnssAssistanceSignalEnv,stop", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::stop()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
  a1[12] = 0;
  return result;
}

void sub_100229EC0(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (!*a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 48);
      v8 = *a4;
      *(_DWORD *)buf = 67240448;
      v17 = v7;
      v18 = 1026;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLSE,priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102152998);
      v9 = *(_DWORD *)(a1 + 48);
      v10 = *a4;
      v13[0] = 67240448;
      v13[1] = v9;
      v14 = 1026;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::onSigEnvNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    if (*(_DWORD *)(a1 + 48) != *a4)
    {
      *(_DWORD *)(a1 + 48) = *a4;
      sub_10022A0B8(a1);
    }
  }
}

uint64_t sub_10022A0B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (!*(_BYTE *)(result + 64))
  {
    v1 = result;
    *(double *)(result + 56) = sub_1001FCBB4();
    v3 = *(_DWORD *)(v1 + 48);
    v2 = *(_QWORD *)(v1 + 40);
    if (!v2)
      sub_10025FD1C();
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v3);
  }
  return result;
}

void sub_10022A110(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (sub_1001FCBB4() - *(double *)(a1 + 56) > 60.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,refresh,updateRefTime", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102152998);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,refresh,updateRefTime", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    sub_10022A0B8(a1);
  }
}

void sub_10022A2C4(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    v4 = a1[39];
    v5 = a1[26];
    v6 = *((_DWORD *)a1 + 54);
    v7 = a1[29];
    v8 = a1[30];
    *(_DWORD *)buf = 134219264;
    v31 = v3;
    v32 = 2048;
    v33 = v4;
    v34 = 2048;
    v35 = v7;
    v36 = 2048;
    v37 = v5;
    v38 = 1024;
    v39 = v6;
    v40 = 2048;
    v41 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ExtendedSteps,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v9 = *a1;
    v10 = a1[39];
    v11 = a1[26];
    v12 = *((_DWORD *)a1 + 54);
    v13 = a1[29];
    v14 = a1[30];
    v18 = 134219264;
    v19 = v9;
    v20 = 2048;
    v21 = v10;
    v22 = 2048;
    v23 = v13;
    v24 = 2048;
    v25 = v11;
    v26 = 1024;
    v27 = v12;
    v28 = 2048;
    v29 = v14;
    LODWORD(v17) = 58;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "ExtendedSteps,%f,firstStepTime,%f,lastStepTime,%f,rawPace,%f,incrementalSteps,%u,odometerSpeed,%f", COERCE_DOUBLE(&v18), v17);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logExtendedStep(const CLWorkoutPredictorExtendedStep &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_10022A4F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10219C750);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    v5 = *(_DWORD *)(a1 + 20);
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 134219520;
    v32 = v3;
    v33 = 1024;
    v34 = v4;
    v35 = 1024;
    v36 = v5;
    v37 = 1024;
    v38 = v6;
    v39 = 2048;
    v40 = v7;
    v41 = 2048;
    v42 = v3;
    v43 = 1024;
    v44 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Elevation,%f,ascended,%d,descended,%d,gradeType,%d,verticalSpeed,%f,startTime,%f,source,%d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10219C750);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = *(_DWORD *)(a1 + 20);
    v12 = *(_DWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_DWORD *)(a1 + 40);
    v17 = 134219520;
    v18 = v9;
    v19 = 1024;
    v20 = v10;
    v21 = 1024;
    v22 = v11;
    v23 = 1024;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v9;
    v29 = 1024;
    v30 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Elevation,%f,ascended,%d,descended,%d,gradeType,%d,verticalSpeed,%f,startTime,%f,source,%d", COERCE_DOUBLE(&v17), 56);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logElevation(const CLWorkoutPredictorElevation &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
}

void sub_10022A734(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1000CE1B8(*a1, a2);
}

void sub_10022A73C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  NSObject *v9;
  void *v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  NSObject *v25;
  void *v26;
  char *v27;
  void *__p;
  _BYTE *v29;
  int v30;
  void **v31;
  __int16 v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  double v37;
  int v38;
  void **v39;
  __int16 v40;
  unint64_t v41;
  _BYTE buf[48];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[94];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return;
  sub_100092C24((uint64_t)a2, (uint64_t *)&__p);
  v5 = __p;
  *(_QWORD *)(a1 + 168) = *((_QWORD *)__p + 23);
  *(_BYTE *)(a1 + 176) = 1;
  sub_100217B20((uint64_t)v5, buf);
  v6 = (v3 - v2) >> 6;
  v7 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v7);
  v8 = 0xAAAAAAAAAAAAAAABLL * v6;
  *(_OWORD *)v7 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)&buf[16];
  if (v5[23] != -1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AE860);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0)
        v10 = *v7;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using latest sample out of %zu samples", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021AE860);
      if (*(char *)(a1 + 207) < 0)
        v7 = (void **)*v7;
      v38 = 136380931;
      v39 = v7;
      v40 = 2048;
      v41 = v8;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using latest sample out of %zu samples", &v38, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::inferLocationOfInterestType(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v27);
      goto LABEL_41;
    }
    goto LABEL_12;
  }
  sub_100014168(a1, (uint64_t)buf);
  sub_10018FFD0((uint64_t)buf, (uint64_t)&v38);
  v12 = (char *)__p;
  v11 = v29;
  if (v29 == __p)
    goto LABEL_12;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    v15 = &v12[v13];
    if (*(_QWORD *)&v12[v13 + 184] != -1)
      break;
LABEL_20:
    ++v14;
    v13 += 192;
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 6) <= v14)
      goto LABEL_12;
  }
  v16 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)buf = *(_OWORD *)(v15 + 8);
  *(_OWORD *)&buf[16] = v16;
  v17 = *(_OWORD *)(v15 + 40);
  v18 = *(_OWORD *)(v15 + 56);
  v19 = *(_OWORD *)(v15 + 88);
  v44 = *(_OWORD *)(v15 + 72);
  v45 = v19;
  *(_OWORD *)&buf[32] = v17;
  v43 = v18;
  v20 = *(_OWORD *)(v15 + 104);
  v21 = *(_OWORD *)(v15 + 120);
  v22 = *(_OWORD *)(v15 + 136);
  *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)(v15 + 148);
  v47 = v21;
  v48[0] = v22;
  v46 = v20;
  sub_10011E258((double *)(a1 + 96), (uint64_t)&v38, (uint64_t)buf);
  v24 = v23;
  if (v23 > *((double *)sub_1000521B8() + 8))
  {
    v12 = (char *)__p;
    v11 = v29;
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)&v12[v13 + 184];
  *(_BYTE *)(a1 + 176) = 1;
  sub_100217B20((uint64_t)&v12[v13], buf);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)&buf[16];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AE860);
  v25 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v26 = (void *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0)
      v26 = *v7;
    *(_DWORD *)buf = 136381443;
    *(_QWORD *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v14 + 1;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v8;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using sample %d / %zu, distance %.1fm", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AE860);
    if (*(char *)(a1 + 207) < 0)
      v7 = (void **)*v7;
    v30 = 136381443;
    v31 = v7;
    v32 = 1024;
    v33 = v14 + 1;
    v34 = 2048;
    v35 = v8;
    v36 = 2048;
    v37 = v24;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiCentroidCalculator, inferred associated AP LOI type %{private}s using sample %d / %zu, distance %.1fm", &v30, 38);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::inferLocationOfInterestType(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v27);
LABEL_41:
    if (v27 != buf)
      free(v27);
  }
LABEL_12:
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_10022AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_10022ACAC@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  sub_10005196C(a1);
  sub_100052DA8(a1);
  sub_100052010(a1);
  sub_100051F38(a1);
  sub_100039FA8(a1);
  sub_10022A73C(a1, (uint64_t *)(a1 + 136));
  v4 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v5;
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v7;
  return result;
}

BOOL sub_10022AD14(uint64_t a1, _QWORD *a2)
{
  int v3;
  NSObject *v4;
  std::string *v5;
  uint64_t v7;
  std::string *p_buf;
  std::string *v9;
  std::string buf;
  int v11;
  std::string *v12;
  __int16 v13;
  int v14;
  std::string __p[68];

  v3 = sub_1000517A0(a1, a2);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AE860);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_1000C2254((_QWORD *)(a1 + 72), __p);
    v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, AP %{private}s has %{public}d moves", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AE860);
    v7 = qword_1022A0048;
    sub_1000C2254((_QWORD *)(a1 + 72), &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v11 = 136380931;
    v12 = p_buf;
    v13 = 1026;
    v14 = v3;
    v9 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 2, "WifiCentroidCalculator, AP %{private}s has %{public}d moves", &v11, 18);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiCentroidCalculator::isMovingAp(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", (const char *)v9);
    if (v9 != __p)
      free(v9);
  }
  return v3 > *((_DWORD *)sub_1000521B8() + 22);
}

void sub_10022AF5C()
{
  operator new();
}

void sub_10022B008(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_10022B044(uint64_t a1)
{
  sub_10000A170(a1);
  operator delete();
}

uint64_t sub_10022B068()
{
  if (qword_102305618 != -1)
    dispatch_once(&qword_102305618, &stru_10215A6C8);
  return qword_102310D30;
}

uint64_t sub_10022B0A8(uint64_t result)
{
  BOOL v1;

  if (!*(_BYTE *)(result + 12))
  {
LABEL_8:
    *(_BYTE *)(result + 15) = 0;
    return result;
  }
  if (*(double *)(result + 16) > 20.0)
  {
LABEL_3:
    v1 = 1;
LABEL_7:
    *(_BYTE *)(result + 15) = v1;
    return result;
  }
  if (*(_BYTE *)(result + 13))
  {
    if (*(_BYTE *)(result + 14))
    {
      v1 = *(_DWORD *)(result + 24) != 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(result + 24) != 1 || *(_BYTE *)(result + 14))
    goto LABEL_3;
  return result;
}

void sub_10022B10C(char *a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  sub_100045E54((uint64_t)a1);
  a1[1536] = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,start\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100020444(a1);
  sub_10001146C((uint64_t)a1);
  a1[76] = 1;
}

uint64_t sub_10022B208(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int v6;
  uint64_t result;
  NSObject *v9;
  _BOOL4 v10;
  double v11;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  BOOL v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;

  v6 = *(_DWORD *)(a2 + 96);
  result = 1;
  if (v6 > 0xB || ((1 << v6) & 0x850) == 0)
  {
    v14 = *(unsigned __int8 *)(a1 + 11672);
    v15 = v6 != 10 || v14 == 0;
    if (v15 && (v6 || !*(_BYTE *)(a2 + 516)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v16 = qword_1022A0078;
      v17 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v17)
      {
        v18 = *(_DWORD *)(a2 + 96);
        v19 = 68289282;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 1026;
        LODWORD(v24) = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"type\":%{public}d}", (uint8_t *)&v19, 0x18u);
        result = 0;
      }
    }
  }
  if (*(double *)(a2 + 20) > 10000.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v9 = qword_1022A0078;
    v10 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v10)
    {
      v11 = *(double *)(a2 + 20);
      v19 = 68289538;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = v11;
      v25 = 2050;
      v26 = 0x40C3880000000000;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"horizontal accuracy\":\"%{public}f\", \"maximum accuracy\":\"%{public}f\"}", (uint8_t *)&v19, 0x26u);
      result = 0;
    }
  }
  if (a3 > 10.0 || a3 < 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v12 = qword_1022A0078;
    v13 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v13)
    {
      v19 = 68289538;
      v20 = 0;
      v21 = 2082;
      v22 = "";
      v23 = 2050;
      v24 = a3;
      v25 = 2050;
      v26 = 0x4024000000000000;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"age\":\"%{public}f\", \"maxAge\":\"%{public}f\"}", (uint8_t *)&v19, 0x26u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10022B4D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 11552) = a2;
  return result;
}

uint64_t sub_10022B4D8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  double v5;
  uint64_t v6;
  double *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  int v21;
  unsigned int v22;
  int v23;
  _DWORD v25[2];
  __int16 v26;
  const char *v27;

  v4 = (const void *)(a2 + 160);
  v5 = sub_1001FC7BC(a2, a2 + 160);
  v6 = sub_10022B208(a1, a2, v5);
  if ((v6 & 1) != 0)
  {
    v7 = (double *)(a1 + 8236);
    v8 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 8232) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 8216) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 8296) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 8280) = v11;
    *(_OWORD *)(a1 + 8264) = v10;
    *(_OWORD *)(a1 + 8248) = v9;
    v12 = *(_OWORD *)(a2 + 140);
    v13 = *(_OWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 8344) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 8328) = v14;
    *(_OWORD *)(a1 + 8312) = v13;
    *(_OWORD *)(a1 + 8356) = v12;
    memcpy((void *)(a1 + 8376), v4, 0x201uLL);
    sub_100349198((_QWORD *)(a1 + 8896), (uint64_t *)(a2 + 680));
    v15 = *(_OWORD *)(a2 + 696);
    v16 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 8944) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 8928) = v16;
    *(_OWORD *)(a1 + 8912) = v15;
    v17 = *(_OWORD *)(a2 + 744);
    v18 = *(_OWORD *)(a2 + 760);
    v19 = *(_OWORD *)(a2 + 776);
    *(_BYTE *)(a1 + 9008) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 8992) = v19;
    *(_OWORD *)(a1 + 8976) = v18;
    *(_OWORD *)(a1 + 8960) = v17;
    *(_DWORD *)(a1 + 9020) = 0;
    *(_DWORD *)(a1 + 9020) = 4 * (*(_DWORD *)(a2 + 96) == 6);
    if (*(_DWORD *)(a2 + 84) > 0x44u)
    {
      if (*(_DWORD *)(a1 + 8300) > 0x4Eu)
        v21 = 4;
      else
        v21 = 3;
      *(_DWORD *)(a1 + 9016) = v21;
    }
    else
    {
      *(_DWORD *)(a1 + 9016) = 2;
      if (*v7 < 65.0)
        *v7 = 65.0;
    }
    if (*(double *)(a1 + 8252) > 0.0)
    {
      v22 = *(_DWORD *)(a1 + 8300);
      if (v22 > 0x44)
      {
        if (v22 > 0x4E)
          v23 = 4;
        else
          v23 = 3;
      }
      else
      {
        v23 = 2;
      }
      *(_DWORD *)(a1 + 9020) = v23;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v25[0] = 68289026;
      v25[1] = 0;
      v26 = 2082;
      v27 = "";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition CPI: invalid assistance location\"}", (uint8_t *)v25, 0x12u);
    }
  }
  return v6;
}

void sub_10022B740(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  _BOOL4 v6;
  double v7;
  float v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL4 v20;
  int v21;
  _OWORD v22[8];
  _OWORD v23[2];
  _BYTE v24[513];
  __int128 v25[7];
  char v26;

  v4 = sub_1001FCBB4();
  v5 = vabdd_f64(v4, *(double *)(a1 + 11608));
  if (*(double *)(a2 + 96) <= 0.0)
  {
    v20 = v5 < 1.5;
    v21 = sub_1001240F8(*(_QWORD *)(a1 + 480));
    sub_10023ECF8(a1 + 72, 0, v21, *(_DWORD *)(a1 + 11552), v20, v4, -1.0, -1.0);
    *(_BYTE *)(a1 + 1572) = 0;
  }
  else
  {
    v6 = v5 < 1.5;
    v7 = *(double *)(a2 + 32);
    v8 = *(double *)(a2 + 152);
    v9 = sub_1001240F8(*(_QWORD *)(a1 + 480));
    sub_10023ECF8(a1 + 72, 0, v9, *(_DWORD *)(a1 + 11552), v6, v7, v8, -1.0);
    sub_10084B8FC(a2, 0, 0, (uint64_t)v22);
    v10 = v22[7];
    *(_OWORD *)(a1 + 5704) = v22[6];
    *(_OWORD *)(a1 + 5720) = v10;
    *(_OWORD *)(a1 + 5736) = v23[0];
    v11 = v22[3];
    *(_OWORD *)(a1 + 5640) = v22[2];
    *(_OWORD *)(a1 + 5656) = v11;
    v12 = v22[5];
    *(_OWORD *)(a1 + 5672) = v22[4];
    *(_OWORD *)(a1 + 5688) = v12;
    v13 = v22[1];
    *(_OWORD *)(a1 + 5608) = v22[0];
    *(_OWORD *)(a1 + 5624) = v13;
    *(_OWORD *)(a1 + 5748) = *(_OWORD *)((char *)v23 + 12);
    memcpy((void *)(a1 + 5768), v24, 0x201uLL);
    sub_1002B7674(a1 + 6288, v25);
    v14 = v25[3];
    *(_OWORD *)(a1 + 6352) = v25[4];
    v15 = v25[6];
    *(_OWORD *)(a1 + 6368) = v25[5];
    *(_OWORD *)(a1 + 6384) = v15;
    v16 = v25[2];
    *(_OWORD *)(a1 + 6304) = v25[1];
    *(_OWORD *)(a1 + 6320) = v16;
    *(_BYTE *)(a1 + 6400) = v26;
    *(_OWORD *)(a1 + 6336) = v14;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v25[0] + 1);
    if (*((_QWORD *)&v25[0] + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v25[0] + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_10022B910(CLAvengerScannerClient *a1)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    -[OS_dispatch_queue scanForNearbyOwner](a1->_queue, "scanForNearbyOwner");
  }
  else
  {
    sub_1005E0980(a1);
    -[CBCentralManager performTemporaryAggressiveScanForFindMyAccessoryManager:](a1->_centralManager, "performTemporaryAggressiveScanForFindMyAccessoryManager:", CLISP_ME_TOKEN);
    sub_1005E0840((uint64_t)a1);
  }
}

uint64_t sub_10022B974(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  const char *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10218CAA8);
  v5 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v6 = "Walk";
    if (v4)
      v6 = "Run";
    *(_DWORD *)buf = 136315138;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Pedestrian, Using %s model", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10218CAA8);
    v9 = "Walk";
    if (v4)
      v9 = "Run";
    v12 = 136315138;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Pedestrian, Using %s model", (const char *)&v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCaloriePedestrianModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = 24;
  if (v4)
    v7 = 8;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + v7) + 16))(*(_QWORD *)(a1 + v7), a2);
}

uint64_t sub_10022BB94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  sub_100DC732C(a2, (_QWORD *)a1);
  sub_100217BA0(*(uint64_t **)a1, (uint64_t)__p);
  sub_10022C3A0(a1 + 16, (_QWORD *)a1, (uint64_t)__p);
  sub_100008848((uint64_t)__p, (_QWORD *)__p[1]);
  sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
  v3 = sub_1000CC740((uint64_t)__p);
  sub_100033C18(v3, a1 + 168);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_WORD *)(a1 + 264) = 0;
  sub_1002210B8(a1 + 272);
  return a1;
}

void sub_10022BC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  sub_100DC61C4(v16);
  sub_100261F44(v15);
  _Unwind_Resume(a1);
}

void sub_10022BC90(uint64_t a1, __int128 *a2, char *a3)
{
  if (sub_1002210BC((uint64_t)a2))
    sub_1002210D8(a1 + 272, a2, a3);
}

__int16 *sub_10022BCE4(__int16 *result, uint64_t a2)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long double v7;
  long double v8;
  BOOL v9;
  BOOL v10;
  __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  double v14[5];

  v3 = result;
  result[132] = 0;
  if (!*((_BYTE *)result + 152))
    goto LABEL_14;
  result = (__int16 *)sub_10018FDEC((double *)result + 7);
  if (!(_DWORD)result)
    goto LABEL_14;
  v4 = **(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  if (v4 == v5)
  {
    v9 = 1;
  }
  else
  {
    v6 = v4 + 96;
    do
    {
      sub_1002433B8((uint64_t)v14);
      v7 = sub_10011E634(v14, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(v6 - 88), *(double *)(v6 - 80), 0.0);
      v8 = (double)*(int *)(v6 - 48);
      v9 = v7 < v8;
      v10 = v7 >= v8 || v6 == v5;
      v6 += 96;
    }
    while (!v10);
  }
  *((_BYTE *)v3 + 265) = v9;
  *((_BYTE *)v3 + 264) = v9;
  v11 = sub_10023E9F4();
  result = (__int16 *)sub_101339E20((uint64_t)v11);
  if ((_DWORD)result)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 8) - **(_QWORD **)v3) >> 5);
    result = sub_10023E9F4();
    if (v12 > *((int *)result + 1))
    {
LABEL_14:
      *((_BYTE *)v3 + 264) = 1;
LABEL_15:
      *((_OWORD *)v3 + 11) = *(_OWORD *)(a2 + 4);
      v13 = *(_QWORD *)(a2 + 20);
      goto LABEL_16;
    }
  }
  if (*((_BYTE *)v3 + 264))
    goto LABEL_15;
  if (!*((_BYTE *)v3 + 152))
    sub_10028DF3C();
  v13 = *((_QWORD *)v3 + 11);
  *((_OWORD *)v3 + 11) = *((_OWORD *)v3 + 4);
LABEL_16:
  *((_QWORD *)v3 + 25) = v13;
  return result;
}

BOOL sub_10022BE00(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL8 result;
  _BYTE v6[32];
  uint64_t v7;

  v4 = (unsigned __int16)*sub_10023E9F4();
  if (v4 == 2)
  {
    result = sub_10018FDEC((double *)(a1 + 168));
    if (result)
    {
      *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 176);
      *(_QWORD *)(a2 + 20) = *(_QWORD *)(a1 + 200);
      *(_WORD *)(a2 + 182) = 2;
      if (!*(_BYTE *)(a1 + 264))
        *(_DWORD *)(a2 + 156) = -1431655765 * ((*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5);
      return 1;
    }
  }
  else if (v4 == 1 && *(_BYTE *)(a1 + 152))
  {
    result = sub_10018FDEC((double *)(a1 + 56));
    if (result)
    {
      sub_10022C2E4(a1, v6);
      *(_OWORD *)(a2 + 4) = *(_OWORD *)&v6[8];
      *(_QWORD *)(a2 + 20) = v7;
      *(_DWORD *)(a2 + 156) = -1431655765 * ((*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5);
      result = 1;
      *(_WORD *)(a2 + 182) = 1;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

_QWORD *sub_10022BEF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100C7686C(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
  v3 = *a1;
  v4 = (__n128 *)a1[1];
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 5));
  a1[3] = 0;
  v6 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  if (v4 == (__n128 *)v3)
    v7 = 0;
  else
    v7 = v5;
  sub_100212FE4(v3, v4, v7, 1);
  if (*a1 != a1[1])
  {
    sub_10022BFF0(a1, (void **)&v10, *(double *)(*a1 + 8), *(double *)(*a1 + 16));
    v8 = *v6;
    if (*v6)
    {
      a1[4] = v8;
      operator delete(v8);
      *v6 = 0;
      a1[4] = 0;
      a1[5] = 0;
    }
    *(_OWORD *)(a1 + 3) = v10;
    a1[5] = v11;
  }
  return a1;
}

void sub_10022BFC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022BFF0(uint64_t *a1@<X0>, void **a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  double v25[5];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v9 = (uint64_t)(a2 + 2);
    do
    {
      v27 = 0;
      v28 = 0;
      v26 = 0;
      sub_1002433B8((uint64_t)v25);
      sub_10011E780(v25, (double *)&v28, (double *)&v27, (double *)&v26, a3, a4, 0.0, *(double *)(v4 + 8), *(double *)(v4 + 16), 0.0);
      v11 = v27;
      v10 = v28;
      v12 = (double)*(int *)(v4 + 48);
      v14 = (char *)a2[1];
      v13 = (char *)a2[2];
      if (v14 >= v13)
      {
        v16 = (char *)*a2;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*a2) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_1002596A8(v9, v20);
          v16 = (char *)*a2;
          v14 = (char *)a2[1];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[24 * v17];
        *(_QWORD *)v22 = v11;
        *((_QWORD *)v22 + 1) = v10;
        *((double *)v22 + 2) = v12;
        v23 = v22;
        if (v14 != v16)
        {
          do
          {
            v24 = *(_OWORD *)(v14 - 24);
            *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v14 -= 24;
          }
          while (v14 != v16);
          v16 = (char *)*a2;
        }
        v15 = v22 + 24;
        *a2 = v23;
        a2[1] = v22 + 24;
        a2[2] = &v21[24 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v14 = v27;
        *((_QWORD *)v14 + 1) = v10;
        v15 = v14 + 24;
        *((double *)v14 + 2) = v12;
      }
      a2[1] = v15;
      v4 += 96;
    }
    while (v4 != v5);
  }
}

void sub_10022C1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022C1D8(uint64_t a1)
{
  return sub_10022CD54(a1 + 16);
}

__n128 sub_10022C1E0(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  char v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];

  v4 = a2[7];
  v30 = a2[6];
  v31 = v4;
  v32[0] = a2[8];
  *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)((char *)a2 + 140);
  v5 = a2[3];
  v26 = a2[2];
  v27 = v5;
  v6 = a2[5];
  v28 = a2[4];
  v29 = v6;
  v7 = a2[1];
  *(_OWORD *)v25 = *a2;
  *(_OWORD *)&v25[16] = v7;
  sub_10022C2E4(a1, &v22);
  *(_OWORD *)&v25[4] = v23;
  *(_QWORD *)&v25[20] = v24;
  v8 = a2[5];
  v17 = a2[4];
  v18 = v8;
  v9 = a2[3];
  v15 = a2[2];
  v16 = v9;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a2 + 140);
  v10 = a2[8];
  v11 = a2[6];
  v20 = a2[7];
  *(_OWORD *)v21 = v10;
  v19 = v11;
  v12 = a2[1];
  *(_OWORD *)v14 = *a2;
  *(_OWORD *)&v14[16] = v12;
  *(_OWORD *)&v14[4] = *(_OWORD *)(a1 + 176);
  *(_QWORD *)&v14[20] = *(_QWORD *)(a1 + 200);
  sub_100B49220(a1 + 272, (uint64_t)a2, (uint64_t)v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5), (uint64_t)v14, *(_BYTE *)(a1 + 264), *(_BYTE *)(a1 + 265), *(double *)(a1 + 160));
  return result;
}

void sub_10022C2E4(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  if (*(_BYTE *)(a1 + 152) && (v4 = (_OWORD *)(a1 + 56), sub_10018FDEC((double *)(a1 + 56))))
  {
    if (!*(_BYTE *)(a1 + 152))
      sub_10028DF3C();
    v5 = v4[3];
    a2[2] = v4[2];
    a2[3] = v5;
    v6 = v4[5];
    a2[4] = v4[4];
    a2[5] = v6;
    v7 = v4[1];
    *a2 = *v4;
    a2[1] = v7;
  }
  else
  {
    sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
    v8 = sub_1000CC740((uint64_t)__p);
    sub_100033C18(v8, (uint64_t)a2);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_10022C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022C3A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_100DC7190((uint64_t *)(a1 + 16), a3);
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(double *)(a1 + 144) = sub_10022CA40((uint64_t **)a1, (_QWORD *)(a1 + 16));
  return a1;
}

void sub_10022C410(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100008848(v2, *(_QWORD **)(v1 + 24));
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022C438(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  long double v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  unint64_t v36;
  char *v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  _BYTE buf[1632];

  v2 = (uint64_t **)a1;
  if (*(double *)(a1 + 144) == 0.0)
  {
    sub_1002102BC(buf, *(_QWORD **)(a1 + 16), (_QWORD *)(a1 + 24));
    v3 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v3;
      operator delete(v3);
    }
    v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 16);
    v48 = (_QWORD *)(a1 + 24);
    if (v5 == (_QWORD *)(a1 + 24))
    {
      v4 = 0;
    }
    else
    {
      v6 = a2;
      v4 = 0;
      v46 = a2 + 16;
      do
      {
        v7 = v5[4];
        v8 = **v2;
        if (v7 >= 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - v8) >> 5))
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_102186B38);
          v22 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - **v2) >> 5);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v7;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] out of bound candidate index %{public}lu from %{public}lu input centroids", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_102186B38);
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5);
            v51 = 134349312;
            v52 = v7;
            v53 = 2050;
            v54 = v36;
            LODWORD(v45) = 22;
            v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "[WifiReachIntersection] out of bound candidate index %{public}lu from %{public}lu input centroids", &v51, v45);
            sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)", "%s\n", v37);
            if (v37 != buf)
              free(v37);
          }
          v6 = a2;
          v2 = (uint64_t **)a1;
        }
        else
        {
          v9 = *(uint64_t **)v6;
          v10 = *(uint64_t **)(v6 + 8);
          v47 = v5[4];
          if (*(uint64_t **)v6 == v10)
          {
LABEL_12:
            v6 = a2;
            v20 = *(_QWORD **)(a2 + 8);
            v19 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v20 >= v19)
            {
              v24 = *(_QWORD **)a2;
              v25 = ((uint64_t)v20 - *(_QWORD *)a2) >> 3;
              v26 = v25 + 1;
              v27 = v47;
              if ((unint64_t)(v25 + 1) >> 61)
                sub_100259694();
              v28 = v19 - (_QWORD)v24;
              if (v28 >> 2 > v26)
                v26 = v28 >> 2;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                v29 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v29 = v26;
              if (v29)
              {
                v30 = (char *)sub_10025E6A0(v46, v29);
                v6 = a2;
                v2 = (uint64_t **)a1;
                v24 = *(_QWORD **)a2;
                v20 = *(_QWORD **)(a2 + 8);
                v27 = v47;
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[8 * v25];
              *(_QWORD *)v31 = v27;
              v21 = v31 + 8;
              while (v20 != v24)
              {
                v32 = *--v20;
                *((_QWORD *)v31 - 1) = v32;
                v31 -= 8;
              }
              *(_QWORD *)v6 = v31;
              *(_QWORD *)(v6 + 8) = v21;
              *(_QWORD *)(v6 + 16) = &v30[8 * v29];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v20 = v47;
              v21 = v20 + 1;
            }
            *(_QWORD *)(v6 + 8) = v21;
          }
          else
          {
            v11 = v8 + 96 * v7;
            v12 = (double *)(v11 + 8);
            v13 = (double *)(v11 + 16);
            v14 = (int *)(v11 + 48);
            while (1)
            {
              v15 = *v9;
              v16 = **v2;
              sub_1002433B8((uint64_t)buf);
              v17 = sub_1010B916C(*v12, *v13, *(double *)(v16 + 96 * v15 + 8), *(double *)(v16 + 96 * v15 + 16));
              v18 = *(_DWORD *)(v16 + 96 * v15 + 48);
              v4 |= v17 <= (double)(v18 + *v14);
              if (v17 + (double)v18 <= (double)*v14)
                break;
              ++v9;
              v2 = (uint64_t **)a1;
              if (v9 == v10)
                goto LABEL_12;
            }
            v6 = a2;
            v2 = (uint64_t **)a1;
          }
        }
        v33 = (_QWORD *)v5[1];
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)v5[2];
            v35 = *v34 == (_QWORD)v5;
            v5 = v34;
          }
          while (!v35);
        }
        v5 = v34;
      }
      while (v34 != v48);
    }
    if ((unint64_t)v2[4] >= 2 && (v4 & 1) == 0)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102186B38);
      v38 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
      {
        v39 = v2[4];
        v40 = v2[18];
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] no intersection for %{public}zu centroid(s) after passing pairwise intersection check %{public}f > 0; something is wrong",
          buf,
          0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102186B38);
        v42 = *(_QWORD *)(a1 + 32);
        v43 = *(_QWORD *)(a1 + 144);
        v51 = 134349312;
        v52 = v42;
        v53 = 2050;
        v54 = v43;
        LODWORD(v45) = 22;
        v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "[WifiReachIntersection] no intersection for %{public}zu centroid(s) after passing pairwise intersection check %{public}f > 0; something is wrong",
                        &v51,
                        v45);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)", "%s\n", v44);
        if (v44 != buf)
          free(v44);
      }
      v4 = 0;
    }
  }
  return v4 & 1;
}

double sub_10022CA40(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;
  double result;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  unint64_t v25;
  _WORD v26[8];
  uint8_t buf[1632];

  v2 = a2[2];
  if (!v2)
    return 0.0;
  if (v2 == 1)
    return 1.0;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v8 = 0;
    v20 = (v2 - 1) * v2;
LABEL_39:
    v25 = v20 >> 1;
    result = 1.0;
    if (v8 != v25)
      return (double)v8 / (double)v25;
    return result;
  }
  v8 = 0;
  do
  {
    v9 = (_QWORD *)v6[1];
    v10 = v9;
    v11 = v6;
    if (v9)
    {
      do
      {
        v12 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v11[2];
        v13 = *v12 == (_QWORD)v11;
        v11 = v12;
      }
      while (!v13);
    }
    if (v12 != v5)
    {
      do
      {
        v14 = v6[4];
        v15 = **a1;
        v16 = v12[4];
        sub_1002433B8((uint64_t)buf);
        if (sub_1010B916C(*(double *)(v15 + 96 * v14 + 8), *(double *)(v15 + 96 * v14 + 16), *(double *)(v15 + 96 * v16 + 8), *(double *)(v15 + 96 * v16 + 16)) <= (double)(*(_DWORD *)(v15 + 96 * v16 + 48)+ *(_DWORD *)(v15 + 96 * v14 + 48)))++v8;
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v12[2];
            v13 = *v18 == (_QWORD)v12;
            v12 = v18;
          }
          while (!v13);
        }
        v12 = v18;
      }
      while (v18 != v5);
      v9 = (_QWORD *)v6[1];
    }
    if (v9)
    {
      do
      {
        v19 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v6[2];
        v13 = *v19 == (_QWORD)v6;
        v6 = v19;
      }
      while (!v13);
    }
    v6 = v19;
  }
  while (v19 != v5);
  v20 = (a2[2] - 1) * a2[2];
  if (v8 <= v20 >> 1)
    goto LABEL_39;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102186B38);
  v21 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] pairwise intersection count is more than the total possibility; something is wrong.",
      buf,
      2u);
  }
  v22 = sub_1001BFF7C(115, 0);
  result = 1.0;
  if (v22)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102186B38);
    v26[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "[WifiReachIntersection] pairwise intersection count is more than the total possibility; something is wrong.",
      v26,
      2);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 0, "static double CLWifiReachIntersection::ReachIntersection::computePairwiseIntersectionRatio(const std::shared_ptr<ReachIntersectionInputCentroids> &, const std::set<size_t> &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
    return 1.0;
  }
  return result;
}

uint64_t sub_10022CD54(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  void *v43[3];
  void *v44;
  char *v45;
  char *v46;
  void *__p;
  _BYTE *v48;
  uint64_t v49;
  _OWORD v50[6];

  if (*(_BYTE *)(a1 + 136))
    return 1;
  sub_1015A2E04(&__p, "ff:ff:ff:ff:ff:ff");
  v3 = sub_1000CC740((uint64_t)&__p);
  sub_100033C18(v3, (uint64_t)v50);
  v4 = *(unsigned __int8 *)(a1 + 136);
  v5 = v50[3];
  v6 = v50[4];
  v7 = v50[1];
  *(_OWORD *)(a1 + 72) = v50[2];
  *(_OWORD *)(a1 + 88) = v5;
  v8 = v50[5];
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 40) = v50[0];
  *(_OWORD *)(a1 + 56) = v7;
  if (!v4)
    *(_BYTE *)(a1 + 136) = 1;
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  __p = 0;
  v48 = 0;
  v49 = 0;
  if (sub_10022C438(a1, (uint64_t)&__p))
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v9 = __p;
    v10 = v48;
    if (__p == v48)
    {
      v33 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = (_OWORD *)(**(_QWORD **)a1 + 96 * *v9);
        if (v11 >= v46)
        {
          v17 = (char *)v44;
          v18 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v44) >> 5);
          v19 = v18 + 1;
          if (v18 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v46 - (_BYTE *)v44) >> 5) > v19)
            v19 = 0x5555555555555556 * ((v46 - (_BYTE *)v44) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v46 - (_BYTE *)v44) >> 5) >= 0x155555555555555)
            v20 = 0x2AAAAAAAAAAAAAALL;
          else
            v20 = v19;
          if (v20)
          {
            v21 = (char *)sub_10067257C((uint64_t)&v46, v20);
            v17 = (char *)v44;
            v11 = v45;
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[96 * v18];
          v23 = v12[1];
          *(_OWORD *)v22 = *v12;
          *((_OWORD *)v22 + 1) = v23;
          v24 = v12[2];
          v25 = v12[3];
          v26 = v12[5];
          *((_OWORD *)v22 + 4) = v12[4];
          *((_OWORD *)v22 + 5) = v26;
          *((_OWORD *)v22 + 2) = v24;
          *((_OWORD *)v22 + 3) = v25;
          if (v11 == v17)
          {
            v32 = &v21[96 * v18];
          }
          else
          {
            v27 = &v21[96 * v18];
            do
            {
              v28 = *((_OWORD *)v11 - 5);
              *((_OWORD *)v27 - 6) = *((_OWORD *)v11 - 6);
              *((_OWORD *)v27 - 5) = v28;
              v29 = *((_OWORD *)v11 - 4);
              v30 = *((_OWORD *)v11 - 3);
              v31 = *((_OWORD *)v11 - 1);
              v32 = v27 - 96;
              *((_OWORD *)v27 - 2) = *((_OWORD *)v11 - 2);
              *((_OWORD *)v27 - 1) = v31;
              *((_OWORD *)v27 - 4) = v29;
              *((_OWORD *)v27 - 3) = v30;
              v11 -= 96;
              v27 -= 96;
            }
            while (v11 != v17);
          }
          v11 = v22 + 96;
          v44 = v32;
          v45 = v22 + 96;
          v46 = &v21[96 * v20];
          if (v17)
            operator delete(v17);
        }
        else
        {
          v13 = v12[1];
          *(_OWORD *)v11 = *v12;
          *((_OWORD *)v11 + 1) = v13;
          v14 = v12[2];
          v15 = v12[3];
          v16 = v12[5];
          *((_OWORD *)v11 + 4) = v12[4];
          *((_OWORD *)v11 + 5) = v16;
          *((_OWORD *)v11 + 2) = v14;
          *((_OWORD *)v11 + 3) = v15;
          v11 += 96;
        }
        v45 = v11;
        ++v9;
      }
      while (v9 != v10);
      v33 = (double *)v44;
    }
    sub_10022BFF0((uint64_t *)&v44, v43, v33[1], v33[2]);
    v41 = 0.0;
    v42 = 0.0;
    v40 = 0;
    if (sub_100DC5E4C((double **)v43, &v41, (double *)&v40))
    {
      v38 = 0;
      v39 = 0;
      v37 = 0;
      sub_1002433B8((uint64_t)v50);
      sub_10008111C((double *)v50, (double *)&v39, (double *)&v38, (double *)&v37, v33[1], v33[2], v33[3], v42, v41, 0.0);
      v35 = v38;
      *(_QWORD *)(a1 + 48) = v39;
      *(_QWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = v40;
    }
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
    if (v44)
    {
      v45 = (char *)v44;
      operator delete(v44);
    }
  }
  else if (v48 - (_BYTE *)__p == 8)
  {
    v34 = **(_QWORD **)a1 + 96 * *(_QWORD *)__p;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v34 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v34 + 32);
  }
  v1 = sub_10018FDEC((double *)(a1 + 40));
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_10022D080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_10022D0EC(_BYTE *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v6;

  v6 = (_QWORD *)sub_1001B5A2C((uint64_t)a1, a2, a3, a4, a5);
  *v6 = off_10218E6C0;
  v6[6] = 0;
  a1[56] = sub_100236AAC();
  a1[57] = sub_100236A54();
  a1[58] = sub_100236A94();
  sub_10022AF5C();
}

void sub_10022D1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022D1EC()
{
  if (qword_102308C10 != -1)
    dispatch_once(&qword_102308C10, &stru_10218C9F0);
  return qword_102311740;
}

uint64_t sub_10022D22C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8);
  v2 = v1[31];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

void sub_10022D290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022D2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int isStatic;

  v3 = *(_QWORD *)(a1 + 256);
  if (!v3)
    return 0;
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    isStatic = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 256);
    if (isStatic)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return 0;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2);
}

uint64_t sub_10022D31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BYTE v22[96];
  __int128 v23;
  __int128 v24;
  _BYTE v25[28];
  _BYTE v26[520];
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;

  sub_10021CBD4(a2);
  if (!*(_BYTE *)(a1 + 1112))
    return 0;
  v4 = a1 + 984;
  sub_10003CA9C(a1 + 984);
  *(_DWORD *)v22 = 0xFFFF;
  *(_OWORD *)&v22[4] = 0uLL;
  *(_OWORD *)&v22[20] = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v22[36] = _Q0;
  *(_OWORD *)&v22[52] = _Q0;
  *(_OWORD *)&v22[68] = _Q0;
  *(_DWORD *)&v22[84] = 0;
  v23 = 0uLL;
  *(_QWORD *)&v22[88] = 0xBFF0000000000000;
  LODWORD(v24) = 0;
  *(_QWORD *)((char *)&v24 + 4) = 0xBFF0000000000000;
  HIDWORD(v24) = 0x7FFFFFFF;
  memset(v25, 0, 25);
  sub_10012A33C(v26);
  if ((sub_1001FD98C(a1 + 984, "CLGnssRefPosMaintenance_Latitude", &v22[4]) & 1) != 0
    && sub_1001FD98C(v4, "CLGnssRefPosMaintenance_Longitude", &v22[12])
    && sub_1001FD98C(v4, "CLGnssRefPosMaintenance_HorizontalAcc", &v22[20])
    && sub_1001FD98C(v4, "CLGnssRefPosMaintenance_Altitude", &v22[28])
    && sub_1001FD98C(v4, "CLGnssRefPosMaintenance_VerticalAcc", &v22[36])
    && sub_1001FD98C(v4, "CLGnssRefPosMaintenance_Timestamp", &v22[76])
    && sub_1001E4B84(v4, "CLGnssRefPosMaintenance_Confidence", &v22[84]))
  {
    v10 = 1;
    *(_DWORD *)&v25[4] = 1;
    v11 = v24;
    *(_OWORD *)(a2 + 96) = v23;
    *(_OWORD *)(a2 + 112) = v11;
    *(_OWORD *)(a2 + 140) = *(_OWORD *)&v25[12];
    v12 = *(_OWORD *)&v22[48];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v22[32];
    *(_OWORD *)(a2 + 48) = v12;
    v13 = *(_OWORD *)&v22[80];
    *(_OWORD *)(a2 + 64) = *(_OWORD *)&v22[64];
    *(_OWORD *)(a2 + 80) = v13;
    v14 = *(_OWORD *)&v22[16];
    *(_OWORD *)a2 = *(_OWORD *)v22;
    *(_OWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v25;
    memcpy((void *)(a2 + 160), v26, 0x201uLL);
    sub_100349198((_QWORD *)(a2 + 680), &v27);
    v15 = v34;
    *(_OWORD *)(a2 + 760) = v33;
    *(_OWORD *)(a2 + 776) = v15;
    *(_BYTE *)(a2 + 792) = v35;
    v16 = v30;
    *(_OWORD *)(a2 + 696) = v29;
    *(_OWORD *)(a2 + 712) = v16;
    v17 = v32;
    *(_OWORD *)(a2 + 728) = v31;
    *(_OWORD *)(a2 + 744) = v17;
  }
  else
  {
    v10 = 0;
  }
  v18 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v10;
}

void sub_10022D570(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 680);
  _Unwind_Resume(a1);
}

BOOL sub_10022D584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  _BYTE v33[14];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  if (!*(_BYTE *)(a1 + 1112))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,cannot read as device is locked", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    *(_WORD *)v27 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,getReferencePositionFromDisk,cannot read as device is locked", v27, 2, *(_QWORD *)v27);
LABEL_40:
    v21 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::getReferencePositionFromDisk(GNSS::DaemonLocation &)", "%s\n", v18);
    if (v21 != buf)
      free(v21);
    return 0;
  }
  v4 = sub_10022D31C(a1, a2);
  if ((v4 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,no ref pos data", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    *(_WORD *)v27 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,getReferencePositionFromDisk,no ref pos data", v27, 2, *(_QWORD *)v27);
    goto LABEL_40;
  }
  if (sub_1014AE938(v4, a2))
  {
    if (!*(_BYTE *)(a1 + 1136))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a2 + 76);
        v7 = *(_DWORD *)(a2 + 96);
        v8 = *(_QWORD *)(a2 + 20);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)v33 = v6;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v7;
        v34 = 2050;
        v35 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,getReferencePositionFromDisk,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v22 = *(_QWORD *)(a2 + 76);
        v23 = *(_DWORD *)(a2 + 96);
        v24 = *(_QWORD *)(a2 + 20);
        *(_DWORD *)v27 = 134349568;
        *(_QWORD *)&v27[4] = v22;
        v28 = 1026;
        v29 = v23;
        v30 = 2050;
        v31 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefPosMaintenance,getReferencePositionFromDisk,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", v27, 28);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::getReferencePositionFromDisk(GNSS::DaemonLocation &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a2 + 76);
      v11 = *(_QWORD *)(a2 + 4);
      v12 = *(_QWORD *)(a2 + 12);
      v13 = *(_QWORD *)(a2 + 28);
      v14 = *(_QWORD *)(a2 + 20);
      v15 = *(_QWORD *)(a2 + 36);
      *(_DWORD *)buf = 68290563;
      *(_DWORD *)v33 = 0;
      *(_WORD *)&v33[4] = 2082;
      *(_QWORD *)&v33[6] = "";
      v34 = 2050;
      v35 = v10;
      v36 = 2049;
      v37 = v11;
      v38 = 2049;
      v39 = v12;
      v40 = 2050;
      v41 = v13;
      v42 = 2050;
      v43 = v14;
      v44 = 2050;
      v45 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,getReferencePositionFromDisk\", \"timestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x4Eu);
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v20 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,Invalid position assistance", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    *(_WORD *)v27 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,getReferencePositionFromDisk,Invalid position assistance", v27, 2, *(_QWORD *)v27);
    goto LABEL_40;
  }
  return result;
}

void sub_10022DB58(uint64_t a1)
{
  sub_10000DAC8(a1);
  operator delete();
}

double sub_10022DB7C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = a1 + 1528;
  if (a2 == 3)
    v3 = a1;
  *(_DWORD *)(a3 + 84) = *(_DWORD *)(v3 + 84);
  *(_QWORD *)(a3 + 128) = *(_QWORD *)(v3 + 128);
  result = *(double *)(v3 + 88);
  *(double *)(a3 + 88) = result;
  return result;
}

BOOL sub_10022DBA4(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218DF60);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v6 = sub_100B30608(v5, buf);
    v7 = *(_QWORD *)(a1 + 3064);
    v8 = sub_100B303DC();
    v9 = sub_100B309E0(v8);
    *(_DWORD *)buf = 134218752;
    v27 = v6;
    v28 = 2048;
    v29 = a2;
    v30 = 2048;
    v31 = v7;
    v32 = 2050;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%.1lf,DeadReckoning,%.2lf,fLastAccessoryPropagationTime,%.2lf,propagation_us,%{public}.3f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DF60);
    v12 = qword_1022A02D8;
    v13 = sub_1005FECEC();
    v14 = *(_QWORD *)(a1 + 3064);
    v15 = sub_100B303DC();
    v18 = 134218752;
    v19 = v13;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v14;
    v24 = 2050;
    v25 = sub_100B309E0(v15);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "%.1lf,DeadReckoning,%.2lf,fLastAccessoryPropagationTime,%.2lf,propagation_us,%{public}.3f", &v18, 42);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL PropagationDataHistory::shallPropagateGPS(const CFTimeInterval)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  v10 = *(double *)(a1 + 3064);
  return v10 < 0.0 || vabdd_f64(a2, v10) > 3.0;
}

uint64_t sub_10022DDF8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  char v5;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[28];
  __int128 v18;
  uint64_t v19;
  int v20;
  const char *v21;
  _BYTE buf[12];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  __int128 __p;
  uint64_t v30;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = sub_10006F7A0(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, requestLocationUpdate, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v7 = qword_1022A0058;
    v20 = 136446210;
    v21 = sub_10006F7A0(a2);
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "@WifiLogic, entry, requestLocationUpdate, %{public}s", &v20, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationProvider::requestLocationUpdate(const CLWifiLocationUpdateRequest &)", "%s\n", v8);
    if (v8 != buf)
      free(v8);
  }
  sub_100221BA8((uint64_t)buf, a2);
  v10 = *(_QWORD *)buf;
  v11 = buf[8];
  v13 = v24;
  v12 = v23;
  v23 = 0uLL;
  *(_OWORD *)&v17[12] = *(_OWORD *)((char *)v28 + 12);
  *(_OWORD *)v17 = v28[0];
  v16 = v27;
  v15 = v26;
  v14 = v25;
  v19 = v30;
  v18 = __p;
  v24 = 0;
  __p = 0uLL;
  v30 = 0;
  v9 = 24;
  v5 = sub_1001312E8(a1, &v9);
  sub_100126D5C((uint64_t)&v9);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  return v5 & 1;
}

void sub_10022E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100126D5C((uint64_t)va);
  sub_10055A600((uint64_t)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_10022E0A8(uint64_t a1, _OWORD *a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  uint8_t *v12;
  NSObject *v13;
  double v14;
  uint8_t *v15;
  _OWORD v16[8];
  _OWORD v17[2];
  _WORD v18[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 1080))
  {
    sub_10144A490(a1);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v9 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "VEHICULAR: Error retrieving LOIs. CLRoutineMonitor is not supported", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v18[0] = 0;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 16, "VEHICULAR: Error retrieving LOIs. CLRoutineMonitor is not supported", v18, 2);
    v12 = v11;
    sub_100512490("Generic", 1, 0, 0, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)", "%s\n", v10);
LABEL_21:
    if (v12 != buf)
      free(v12);
    return;
  }
  if (*(_BYTE *)(a1 + 1106))
  {
    v4 = objc_alloc((Class)CLLocation);
    v5 = a2[7];
    v16[6] = a2[6];
    v16[7] = v5;
    v17[0] = a2[8];
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a2 + 140);
    v6 = a2[3];
    v16[2] = a2[2];
    v16[3] = v6;
    v7 = a2[5];
    v16[4] = a2[4];
    v16[5] = v7;
    v8 = a2[1];
    v16[0] = *a2;
    v16[1] = v8;
    objc_msgSend(v4, "initWithClientLocation:", v16);
    objc_msgSend(*(id *)(a1 + 1080), "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:", 150.0);
    return;
  }
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021B7120);
  v13 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "VEHICULAR: Error retrieving LOIs, since device is locked", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v18[0] = 0;
    v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "VEHICULAR: Error retrieving LOIs, since device is locked", v18, 2);
    v12 = v15;
    sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateFastSuppressionMode(const CLClientLocation &)", "%s\n", v14);
    goto LABEL_21;
  }
}

void sub_10022E3FC(uint64_t a1)
{
  sub_100040378(a1);
  operator delete();
}

uint64_t sub_10022E420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v5 = (uint64_t *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 96);
  if (a2)
  {
    if (v4)
      sub_10194204C((_QWORD *)(a1 + 96));
  }
  else if (!v4)
  {
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v9[0] = 68290562;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "state_transition";
    v14 = 2082;
    v15 = "DaemonClient";
    v16 = 2050;
    v17 = a1;
    v18 = 2082;
    v19 = "visibilityAssertion";
    v20 = 2050;
    v21 = v7;
    v22 = 2050;
    v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":\"%{public}p\", \"new\":\"%{public}p\"}", (uint8_t *)v9, 0x4Eu);
  }
  result = *v5;
  *v5 = a2;
  return result;
}

double sub_10022E580(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double result;

  v2 = mach_absolute_time();
  v3 = sub_100127828(v2 - *(_QWORD *)(a1 + 16));
  v4 = 24;
  if (!*(_BYTE *)(a1 + 48))
    v4 = 32;
  result = v3 + *(double *)(a1 + v4);
  *(double *)(a1 + v4) = result;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

void sub_10022E5D4(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  double *v9;
  double Current;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  double v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  __int128 v21;
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;

  v2 = *(_DWORD *)(a2 + 96);
  v3 = v2 == 11 || v2 == 4;
  if (v3 && *(double *)(a2 + 20) > 0.0)
  {
    if (*(_DWORD *)(a2 + 84) > 0x45u)
    {
      v9 = (double *)(a1 + 852);
      Current = CFAbsoluteTimeGetCurrent();
      if (*v9 > 0.0 && (v11 = v9[7], sub_100182290(a1 + 832)) && Current - v11 <= 1800.0)
      {
        sub_10011E258((double *)(a1 + 1000), a2, a1 + 832);
        v13 = v12;
        if (v12 < 0.0 || v12 > *v9)
        {
          *(_DWORD *)(a2 + 84) = 69;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          v14 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
          {
            v15 = *v9;
            v16 = *(_DWORD *)(a2 + 84);
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)v23 = 0;
            *(_WORD *)&v23[4] = 2082;
            *(_QWORD *)&v23[6] = "";
            v24 = 2050;
            v25 = v13;
            v26 = 2050;
            v27 = v15;
            v28 = 1026;
            v29 = v16;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,crossCheckWiFiLocationWithCell,fail\", \"distFromWifiToCell\":\"%{public}f\", \"crossCheckThreshold\":\"%{public}f\", \"confidence\":%{public}d}", buf, 0x2Cu);
          }
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v18 = *((_QWORD *)v9 + 7);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v23 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,no valid recent cell location available,lastCellTimeStamp,%{public}.1lf", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          v19 = *((_QWORD *)v9 + 7);
          LODWORD(v21) = 134349056;
          *(_QWORD *)((char *)&v21 + 4) = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,no valid recent cell location available,lastCellTimeStamp,%{public}.1lf", &v21, 12, v21);
          goto LABEL_42;
        }
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,already low confidence", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        LOWORD(v21) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,already low confidence", &v21, 2, v21);
LABEL_42:
        v20 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateWiFiConfidenceWithCellCrossCheck(GNSS::DaemonLocation &)", "%s\n", v6);
        if (v20 != buf)
          free(v20);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,not valid wifi location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      LOWORD(v21) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,not valid wifi location", &v21, 2, v21);
      goto LABEL_42;
    }
  }
}

BOOL sub_10022EA84(uint64_t a1, uint64_t a2)
{
  double v2;
  NSObject *v4;
  const char *v5;
  _BOOL8 result;
  double v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;

  if (*(double *)(a1 + 52) <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v4 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return 1;
    v10 = 68289026;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,isNotRepeatedLocationAssistance,no cached location\"}";
    goto LABEL_14;
  }
  v2 = *(double *)(a2 + 76) - *(double *)(a1 + 108);
  if (v2 < 0.0 || v2 > 6.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v4 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return 1;
    v10 = 68289026;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v5 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,isNotRepeatedLocationAssistance,new assistance not recent\"}";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v10, 0x12u);
    return 1;
  }
  if (*(double *)(a2 + 36) > 0.0)
  {
    v7 = *(double *)(a1 + 68);
    if (v7 < 0.0 || v7 > 0.0 && vabdd_f64(*(double *)(a2 + 28), *(double *)(a1 + 60)) > 1.0)
      return 1;
  }
  if (*(_DWORD *)(a2 + 84) > *(_DWORD *)(a1 + 116))
    return 1;
  sub_10011E258((double *)(a1 + 1000), a2, a1 + 32);
  if (v8 > 1.0)
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v9 = qword_1022A0078;
  result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v10 = 68289026;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,isNotRepeatedLocationAssistance,same location\"}", (uint8_t *)&v10, 0x12u);
    return 0;
  }
  return result;
}

BOOL sub_10022ECE8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMotion,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssAssistanceMotion,start", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10001334C((_BYTE *)a1);
  sub_10022F4AC((_BYTE *)a1);
  return sub_100238468((_QWORD *)(a1 + 472), (uint64_t)sub_100A0CEF8, (uint64_t)objc_msgSend(*(id *)a1, "silo"), a1, 10.0, 1.0);
}

void sub_10022EEB4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (*a3 == 2)
  {
    *(_BYTE *)(a1 + 88) = *(_DWORD *)(a4 + 40) == 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a4 + 40);
      v8 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)buf = 67109376;
      v17 = v7;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "bodyMetrics.condition,%d,fIsAbleBodied,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v9 = *(_DWORD *)(a4 + 40);
      v10 = *(unsigned __int8 *)(a1 + 88);
      v13[0] = 67109376;
      v13[1] = v9;
      v14 = 1024;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "bodyMetrics.condition,%d,fIsAbleBodied,%d", v13, 14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onNatalimetryNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

uint64_t sub_10022F0A4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  BOOL v4;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if (*(_BYTE *)(result + 1113))
    v4 = 0;
  else
    v4 = *a3 == 0;
  if (v4)
  {
    v6 = (_QWORD *)result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a4 + 8);
      v9 = *(_DWORD *)(a4 + 24);
      v10 = *(_QWORD *)(a4 + 32);
      v11 = *(_QWORD *)(a4 + 40);
      *(_DWORD *)buf = 134349825;
      v29 = v8;
      v30 = 1025;
      v31 = v9;
      v32 = 2049;
      v33 = v10;
      v34 = 2049;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "STEPCT,startTime,%{public}.3lf,count,%{private}u,distance,%{private}.3lf,rawDistance,%{private}.3lf", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v14 = *(_QWORD *)(a4 + 8);
      v15 = *(_DWORD *)(a4 + 24);
      v16 = *(_QWORD *)(a4 + 32);
      v17 = *(_QWORD *)(a4 + 40);
      v20 = 134349825;
      v21 = v14;
      v22 = 1025;
      v23 = v15;
      v24 = 2049;
      v25 = v16;
      v26 = 2049;
      v27 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "STEPCT,startTime,%{public}.3lf,count,%{private}u,distance,%{private}.3lf,rawDistance,%{private}.3lf", &v20, 38);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    sub_100212098(v6 + 64, (__int128 *)a4);
    v12 = v6[69];
    if (v12 >= 0x33)
    {
      v13 = v6[68];
      v6[69] = v12 - 1;
      v6[68] = v13 + 1;
      sub_100A0EFD8((uint64_t)(v6 + 64), 1);
    }
    return sub_1000709BC((uint64_t)v6);
  }
  return result;
}

_BYTE *sub_10022F300(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[496])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "turning off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "turning off", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::turnOffStepCountAiding()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 61) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 61) + 8), 0);
    v1[496] = 0;
  }
  return result;
}

_BYTE *sub_10022F4AC(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[497])
  {
    v1 = result;
    result = (_BYTE *)sub_100236AC4();
    if ((_DWORD)result)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "turning on", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102165788);
        v5[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "turning on", v5, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::turnOnStepCountAiding()", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
      result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 61) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 61) + 8), 0, 0);
      v1[496] = 1;
    }
  }
  return result;
}

unint64_t sub_10022F668(unint64_t result, uint64_t a2)
{
  _QWORD *v4;
  int64x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if (*(_BYTE *)(a2 + 48))
  {
    if (*(double *)(a2 + 96) > 0.0 && (*(_QWORD *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v4 = (_QWORD *)result;
      v5 = (int64x2_t *)(result + 568);
      sub_100A0DF14((_QWORD *)(result + 568), (__int128 *)a2);
      if (v4[76] >= 0x1FuLL)
        sub_100A0E000(v5);
      v6 = v4[72];
      v7 = v4[75];
      v8 = (uint64_t *)(v6 + 8 * (v7 >> 4));
      if (v4[73] == v6)
      {
        v11 = 0;
        v14 = 0;
      }
      else
      {
        v9 = *v8 + 304 * (v4[75] & 0xFLL);
        v10 = *(_QWORD *)(v6 + (((v4[76] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 304 * ((*((_DWORD *)v4 + 152) + (_DWORD)v7) & 0xF);
        if (v9 == v10)
        {
          v11 = 0;
        }
        else
        {
          v11 = 0;
          v12 = v8;
          do
          {
            if (*(double *)(a2 + 32) - *(double *)(v9 + 32) <= 20.0)
              break;
            v9 += 304;
            if (v9 - *v12 == 4864)
            {
              v13 = v12[1];
              ++v12;
              v9 = v13;
            }
            ++v11;
          }
          while (v9 != v10);
        }
        v14 = *v8 + 304 * (v4[75] & 0xFLL);
      }
      v15 = (char *)v8;
      v16 = v14;
      sub_100A0FA74((uint64_t **)&v15, v11);
      return sub_100A0E060(v5, (char *)v8, v14, v15, v16);
    }
  }
  return result;
}

uint64_t sub_10022F7B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 760) = a2;
  return result;
}

void sub_10022F7C0(uint64_t a1, __n128 a2, uint64_t a3, int *a4, unsigned int *a5)
{
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  unsigned int *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  NSObject *v20;
  int v21;
  int v22;
  uint8_t *v23;
  double v24;
  __n128 v25;
  int v26;
  int v27;
  int isStatic;
  int v29;
  BOOL v30;
  int v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const char *v37;
  uint8_t *v38;
  __n128 v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  if (!*(_BYTE *)(a1 + 464))
    return;
  if (*(_BYTE *)(a1 + 466) || *(_BYTE *)(a1 + 1113))
    sub_10000C784(a1);
  v8 = *a4;
  if (!*a4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationMovementCoarse", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning unexpected kNotificationMovementCoarse");
      goto LABEL_40;
    }
    return;
  }
  if (v8 == 1)
  {
    v12 = (unsigned int *)(a1 + 176);
    if (*(_DWORD *)(a1 + 188) == 1 && a5[3] != 1)
      *(double *)(a1 + 456) = sub_1001FCBB4();
    a2.n128_u64[0] = *(_QWORD *)(a1 + 176);
    v39 = a2;
    *(_OWORD *)v12 = *(_OWORD *)a5;
    v13 = *((_OWORD *)a5 + 1);
    v14 = *((_OWORD *)a5 + 2);
    v15 = *((_OWORD *)a5 + 4);
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a5 + 3);
    *(_OWORD *)(a1 + 240) = v15;
    *(_OWORD *)(a1 + 192) = v13;
    *(_OWORD *)(a1 + 208) = v14;
    v16 = *((_OWORD *)a5 + 5);
    v17 = *((_OWORD *)a5 + 6);
    v18 = *((_OWORD *)a5 + 7);
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a5 + 16);
    *(_OWORD *)(a1 + 272) = v17;
    *(_OWORD *)(a1 + 288) = v18;
    *(_OWORD *)(a1 + 256) = v16;
    if (CLMotionActivity::isTypeStatic(*a5) && !a5[1])
    {
      if (CLMotionActivity::isTypeStatic(v39.n128_u32[0]))
      {
        if (CLMotionActivity::isTypeInVehicle(*v12, v19))
          *v12 = 5;
        else
          *v12 = 0;
      }
      else
      {
        *(_QWORD *)v12 = v39.n128_u64[0];
      }
    }
    if (!*(_BYTE *)(a1 + 88) && CLMotionActivity::isTypePedestrian(*v12))
      *v12 = 3;
    v24 = sub_1001FCBB4();
    if (sub_1002199F0(a1 + 1064, v24, 6.0))
      goto LABEL_73;
    v26 = *(_DWORD *)(a1 + 176);
    v27 = *(_DWORD *)(a1 + 180);
    isStatic = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 176));
    v29 = *(_DWORD *)(a1 + 1064);
    if (isStatic)
    {
      if (v29 == 1)
      {
        if (*v12 == 1)
        {
          v26 = 10;
        }
        else if (*v12 == 2)
        {
          v26 = 11;
        }
      }
      goto LABEL_65;
    }
    if (v29)
    {
      if (v29 == 1)
      {
        v27 = 2;
        v26 = 5;
      }
      else if (v29 == 3 && *(_DWORD *)(a1 + 1068) == 3)
      {
        v30 = CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 176)) == 0;
        v31 = 6;
LABEL_59:
        if (v30)
          v26 = v31;
        v27 = 2;
      }
LABEL_65:
      if (v26 != *v12 || v27 != *(_DWORD *)(a1 + 180))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102165788);
        v32 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v33 = *(_DWORD *)(a1 + 176);
          v34 = *(_DWORD *)(a1 + 180);
          *(_DWORD *)buf = 67109888;
          v49 = v33;
          v50 = 1024;
          v51 = v34;
          v52 = 1024;
          v53 = v26;
          v54 = 1024;
          v55 = v27;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "overwritingDueToRouteHints.origType,%d,origConfidence,%d,newType,%d,newConfidence,%d", buf, 0x1Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102165788);
          v35 = *(_DWORD *)(a1 + 176);
          v36 = *(_DWORD *)(a1 + 180);
          v40 = 67109888;
          v41 = v35;
          v42 = 1024;
          v43 = v36;
          v44 = 1024;
          v45 = v26;
          v46 = 1024;
          v47 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "overwritingDueToRouteHints.origType,%d,origConfidence,%d,newType,%d,newConfidence,%d", &v40, 26, v39.n128_u32[0], v39.n128_u32[2]);
          v38 = (uint8_t *)v37;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v37);
          if (v38 != buf)
            free(v38);
        }
        *(_DWORD *)(a1 + 176) = v26;
        *(_DWORD *)(a1 + 180) = v27;
      }
LABEL_73:
      sub_10002E0F4(a1 + 120, a1 + 176, v25);
      sub_1000709BC(a1);
      return;
    }
    v30 = CLMotionActivity::isTypePedestrian(*v12) == 0;
    v31 = 4;
    goto LABEL_59;
  }
  if (v8 == 2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationContextSpectator", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning unexpected kNotificationContextSpectator", &v40, 2);
LABEL_40:
      v23 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v10);
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *a4;
      *(_DWORD *)buf = 67109120;
      v49 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v22 = *a4;
      v40 = 67109120;
      v41 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Unhandled notification,%d", &v40);
      goto LABEL_40;
    }
  }
}

void sub_10022FE84(unint64_t a1, uint64_t a2)
{
  float v4;
  unint64_t v5;
  float v6;
  NSObject *v7;
  int v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  double v25[86];
  std::__shared_weak_count *v26;
  _DWORD v27[2];
  __int16 v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  uint64_t v37;

  if (*(_BYTE *)(a2 + 48))
  {
    sub_10084B8FC(a2, 0, 0, (uint64_t)v25);
    sub_100172494(a1 + 120, (uint64_t)v25);
    if (*(_BYTE *)(a2 + 144))
    {
      v4 = *(double *)(a2 + 152);
      *(float *)buf = v4;
      sub_10007D084(a1 + 768, (float *)buf);
      if (*(_BYTE *)(a1 + 312))
      {
        if (CLMotionActivity::isTypeSwimming(*(unsigned int *)(a1 + 320)))
        {
          v5 = *(_QWORD *)(a1 + 832);
          if (v5 >= *(_QWORD *)(a1 + 776))
          {
            v6 = v5 ? *(float *)(a1 + 784) / (float)v5 : 0.0;
            if (v6 > 4.4704)
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102165788);
              v7 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v8 = *(_DWORD *)(a1 + 320);
                v9 = *(_QWORD *)(a1 + 832);
                if (v9)
                  v10 = *(float *)(a1 + 784) / (float)v9;
                else
                  v10 = 0.0;
                v11 = *(_QWORD *)(a2 + 160);
                *(_DWORD *)buf = 67109632;
                v33 = v8;
                v34 = 2048;
                v35 = v10;
                v36 = 2048;
                v37 = v11;
                _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Overriding false fitness session sessionType,%d,averageSpeed,%.3lf,speedUnc,%.3lf", buf, 0x1Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102165788);
                v18 = *(_DWORD *)(a1 + 320);
                v19 = *(_QWORD *)(a1 + 832);
                if (v19)
                  v20 = (float)(*(float *)(a1 + 784) / (float)v19);
                else
                  v20 = 0.0;
                v21 = *(_QWORD *)(a2 + 160);
                v27[0] = 67109632;
                v27[1] = v18;
                v28 = 2048;
                v29 = v20;
                v30 = 2048;
                v31 = v21;
                LODWORD(v24) = 28;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Overriding false fitness session sessionType,%d,averageSpeed,%.3lf,speedUnc,%.3lf", v27, v24, v25[0]);
                v23 = (uint8_t *)v22;
                sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v22);
                if (v23 != buf)
                  free(v23);
              }
              *(_BYTE *)(a1 + 312) = 0;
              CLMotionActivity::init((CLMotionActivity *)(a1 + 320));
              *(_QWORD *)(a1 + 176) = 0;
            }
          }
        }
      }
    }
    v12 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  *(_BYTE *)(a1 + 1112) = sub_100217C88(a1, a2);
  sub_10022F668(a1, a2);
  if (sub_1001FCBB4() - *(double *)(a1 + 560) > 6.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "refresh,updateContext", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      LOWORD(v25[0]) = 0;
      LODWORD(v24) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "refresh,updateContext", v25, *(_QWORD *)&v24);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_1000709BC(a1);
  }
}

void sub_100230308(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

BOOL sub_100230330(uint64_t a1)
{
  return sub_100219670(a1 + 2064);
}

uint64_t sub_100230338(uint64_t a1, uint64_t a2)
{
  return sub_100231314(*(_QWORD *)(a1 + 8), a2, (__int128 *)(a1 + 176));
}

float sub_100230348(uint64_t a1, uint64_t a2, char a3, double a4)
{
  double v5;
  double *v6;
  double v7;
  double v9;
  double v10;
  unsigned int v11;
  int v12;
  float v13;
  float v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  NSObject *v19;
  double v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  double v24;
  uint8_t *v25;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  int v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;

  HIDWORD(v30) = 0;
  v5 = *(double *)a2;
  if (*(double *)a2 <= a4)
  {
    v6 = (double *)(a1 + 8);
    v7 = *(double *)(a1 + 8);
    if (v5 > v7)
    {
      if ((a3 & 1) == 0)
      {
        v9 = v5 - v7;
        v10 = fmin(v9, 60.0);
        v11 = *(_DWORD *)(a2 + 8) - *(_DWORD *)(a1 + 16);
        if (v11 >= 0x12C)
          v12 = 300;
        else
          v12 = *(_DWORD *)(a2 + 8) - *(_DWORD *)(a1 + 16);
        if (v9 > 180.0)
          v11 = v12;
        if (v10 > 0.0)
        {
          v13 = (float)v11 / 100.0;
          v14 = (float)(v13 * 23.94) / v10;
          *((float *)&v30 + 1) = v14;
          if (qword_10229FC90 != -1)
            dispatch_once(&qword_10229FC90, &stru_1021A75C8);
          v15 = qword_10229FC98;
          if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
          {
            v16 = *(_QWORD *)(a1 + 64);
            *(_DWORD *)buf = 134218752;
            v40 = v13;
            v41 = 2048;
            v42 = v10;
            v43 = 2048;
            v44 = v14;
            v45 = 2048;
            v46 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Climbing,deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC90 != -1)
              dispatch_once(&qword_10229FC90, &stru_1021A75C8);
            v27 = *(_QWORD *)(a1 + 64);
            v31 = 134218752;
            v32 = v13;
            v33 = 2048;
            v34 = v10;
            v35 = 2048;
            v36 = *((float *)&v30 + 1);
            v37 = 2048;
            v38 = v27;
            LODWORD(v30) = 42;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Climbing,deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu", COERCE_DOUBLE(&v31), v30);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 2, "float CLCalorieClimbingModel::estimateClimbingMETs(CFAbsoluteTime, const CLCoarseElevationChangeEntry &, BOOL)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          if (*(double *)a2 - *v6 >= 180.0)
          {
            do
            {
              sub_1000BFB54((_QWORD *)(a1 + 72), (float *)&v30 + 1);
              v10 = v10 + -2.55999994;
            }
            while (v10 > 0.0);
          }
          else
          {
            do
            {
              sub_1000BFB54((_QWORD *)(a1 + 24), (float *)&v30 + 1);
              v10 = v10 + -2.55999994;
            }
            while (v10 > 0.0);
          }
        }
      }
      *(_OWORD *)v6 = *(_OWORD *)a2;
    }
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (v17)
  {
    v18 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*(_QWORD *)(a1 + 56) & 0x3FFLL));
    ++*(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 64) = v17 - 1;
    sub_1004128C0(a1 + 24, 1);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A75C8);
    v19 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(double *)(a1 + 64);
      *(_DWORD *)buf = 134218240;
      v40 = v18;
      v41 = 2048;
      v42 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Climbing,epochMets,%f,bufferLength,%lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A75C8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Climbing,epochMets,%f,bufferLength,%lu", &v31);
LABEL_38:
      v25 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "float CLCalorieClimbingModel::estimateClimbingMETs(CFAbsoluteTime, const CLCoarseElevationChangeEntry &, BOOL)", "%s\n", v21);
      if (v25 != buf)
        free(v25);
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 112);
    if (!v22)
      return 0.0;
    v18 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + ((*(_QWORD *)(a1 + 104) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*(_QWORD *)(a1 + 104) & 0x3FFLL));
    ++*(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 112) = v22 - 1;
    sub_1004128C0(a1 + 72, 1);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021A75C8);
    v23 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(double *)(a1 + 112);
      *(_DWORD *)buf = 134218240;
      v40 = v18;
      v41 = 2048;
      v42 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Climbing,epochMets,%f,historicalBufferLength,%lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021A75C8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Climbing,epochMets,%f,historicalBufferLength,%lu", &v31);
      goto LABEL_38;
    }
  }
  return v18;
}

double sub_10023095C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = sub_100230348(a1, a2 + 1024, *(_BYTE *)(a2 + 352), *(double *)(a2 + 112));
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a3 + 32) = 3;
  return result;
}

void sub_1002309A8(uint64_t a1, double a2, double a3)
{
  double v6;
  float v7;
  double v8;
  double v9;
  BOOL v10;

  v10 = a3 < 0.372823626;
  v6 = 1.0;
  if (!v10)
  {
    v6 = 0.0;
    if (a3 < 0.559235454)
    {
      v7 = sub_1002446AC(0.559235454, 0.0, 0.372823626, 1.0, a3);
      v6 = v7;
    }
  }
  v8 = (1.0 - v6) * 45.0 + 15.0;
  v9 = *(double *)(a1 + 16);
  v10 = v9 + 20.0 > a2 && v9 < a2;
  if (v10)
    v8 = 6.66666667;
  *(double *)(a1 + 8) = v8;
}

id sub_100230A48(id result, uint64_t a2, int *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  void *v8;
  NSString *v9;
  id v10;
  uint64_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[8];
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;

  if (*a3 <= 4 && ((1 << *a3) & 0x15) != 0)
  {
    v5 = result;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received an authorization notification %{public}d. Checking bundle permissions.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v12 = *a3;
      v15[0] = 67240192;
      v15[1] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Received an authorization notification %{public}d. Checking bundle permissions.", v15, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v8 = (void *)*((_QWORD *)v5 + 1288);
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle");
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_10020E2F8;
    v19 = &unk_10214D390;
    v20 = v5;
    result = objc_msgSend(v8, "getAuthorizationContextOfNonZonalClient:withReply:", v9, buf);
    if (!*a3)
    {
      v10 = objc_msgSend(objc_msgSend(*((id *)v5 + 4), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
      if (byte_10230331F >= 0)
        v11 = &qword_102303308;
      else
        v11 = (uint64_t *)qword_102303308;
      return objc_msgSend(v10, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
    }
  }
  return result;
}

void sub_100230CC0(uint64_t a1, uint64_t a2, int *a3, const void *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*a3 == 1)
  {
    sub_1001D44D4((_QWORD *)(a1 + 4592), a4);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "MotionStateMediator received unhandled step count notification, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v7 = *a3;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "MotionStateMediator received unhandled step count notification, %d", v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

uint64_t sub_100230EB8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6;

  v6 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_10219D0E0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0xBFF0000000000000;
  *(_OWORD *)(v6 + 104) = xmmword_101BB5688;
  *(_OWORD *)(v6 + 120) = unk_101BB5698;
  *(_OWORD *)(v6 + 136) = xmmword_101BB56A8;
  *(_OWORD *)(v6 + 72) = xmmword_101BB5668;
  *(_OWORD *)(v6 + 88) = unk_101BB5678;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0x3F947AE147AE147BLL;
  *(_QWORD *)(v6 + 168) = 0;
  if ((sub_1002479B0() & 1) == 0)
    *(_QWORD *)(a1 + 160) = 0x3F9999999999999ALL;
  *(_BYTE *)(a1 + 56) = sub_1001E4BF4() & 1;
  return a1;
}

void sub_100230F60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

void sub_100230FAC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  double v16;
  sqlite3_stmt *v17;
  double v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  uint64_t v24;
  sqlite3_stmt *v25;
  uint64_t v26;
  _WORD v27[8];
  uint8_t buf[8];
  _BYTE v29[32];
  double v30;

  if (sub_10008950C(a1 + 72))
  {
    sub_100231280(a1, a2, (uint64_t)v29);
    v5 = v4;
    if (v4 == 2)
    {
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10219DAB8);
      v6 = qword_10229FD78;
      if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Error setting elevation offsets.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10219DAB8);
        v27[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Error setting elevation offsets.", v27, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLElevationRecorderDb::insertRecordUL(const CLSignificantElevation &, BOOL)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      v10 = *(double *)(a2 + 24);
      v9 = *(double *)(a2 + 32);
      v11 = *(_DWORD *)(a1 + 552);
      v13 = *(_DWORD *)(a2 + 40);
      v12 = *(_DWORD *)(a2 + 44);
      v14 = *(_DWORD *)(a1 + 556);
      v15 = *(double *)(a2 + 48);
      v16 = v30;
      sub_100087AF4((_QWORD *)(a1 + 432), buf);
      v17 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
      if (v10 < v16 && v5 == 0)
        v19 = v16;
      else
        v19 = v10;
      if (sub_1000890C4(v17, 1, v19))
      {
        v20 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
        if (sub_1000890C4(v20, 2, v9))
        {
          v21 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
          if (sub_10023C77C(v21, 3, v11 + v13))
          {
            v22 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
            if (sub_10023C77C(v22, 4, v14 + v12))
            {
              v23 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
              if (sub_1000890C4(v23, 5, v15))
              {
                v24 = *(_QWORD *)(a1 + 80);
                v25 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
                sub_10023C9B0(v24, v25);
              }
            }
          }
        }
      }
      v26 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
  }
}

void sub_100231254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

double sub_100231280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  double result;
  _OWORD *v9;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a3);
  result = *(double *)(a1 + 536);
  if (result == 1.79769313e308 || *(double *)(a2 + 24) < result)
  {
    v9 = (_OWORD *)(a1 + 512);
    if (v6 == 1)
    {
      result = 0.0;
      *(_OWORD *)(a1 + 544) = 0u;
      *(_OWORD *)(a1 + 560) = 0u;
      *v9 = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
    }
    else if (!v6)
    {
      result = *(double *)(a3 + 40);
      *(_QWORD *)(a1 + 544) = 0;
      *v9 = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
      *(double *)(a1 + 552) = result;
      *(_QWORD *)(a1 + 568) = 0;
      *(_QWORD *)(a1 + 560) = 0;
    }
  }
  return result;
}

uint64_t sub_100231314(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _BYTE v9[64];

  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  *(_OWORD *)(a1 + 92) = *(__int128 *)((char *)a3 + 44);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  result = sub_10005E574(a1, a2);
  if ((_DWORD)result)
  {
    sub_1009F1E5C(a1, *(int *)(a2 + 1056));
    sub_1009F18E0((int *)a1, a2, (uint64_t)v9);
    return (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v9);
  }
  return result;
}

void sub_10023138C(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  uint8_t *v12;
  void *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD v17[5];
  int v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,triggerCellMonitorRefresh", &v18, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (a2 == 1)
    {
      v5 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 2);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh for SimTwo", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_37;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v18) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,triggerCellMonitorRefresh for SimTwo", &v18, v16);
    }
    else
    {
      if (a2)
      {
        v5 = 0;
LABEL_37:
        v13 = *(void **)(a1 + 16);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_10020E4B4;
        v17[3] = &unk_102130FC8;
        v17[4] = a1;
        objc_msgSend(v13, "refreshCellMonitor:completion:", v5, v17);
        return;
      }
      v5 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", 1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ctcl,triggerCellMonitorRefresh for SimOne", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_37;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      LOWORD(v18) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,triggerCellMonitorRefresh for SimOne", &v18, v16);
    }
    v12 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v7);
    if (v12 != buf)
      free(v12);
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v21 = "triggerCellMonitorRefresh";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl %s fCTClient is null ", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v18 = 136315138;
    v19 = "triggerCellMonitorRefresh";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl %s fCTClient is null ", (const char *)&v18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLCoreTelephonyClient::triggerCellMonitorRefresh(SimInstance)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_1002318FC()
{
  operator new();
}

void sub_100231938()
{
  operator delete();
}

uint64_t sub_10023195C(uint64_t result, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v3 = *(_QWORD *)(result + 8);
  if (!v3)
    return result;
  v6 = result;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = (unsigned __int8 *)(*(_QWORD *)v6 + v7);
    if (*v9 != *(unsigned __int8 *)(v6 + 16) || v9[1] != a2)
      goto LABEL_7;
    v10 = v9[2];
    v11 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v9 + 2);
    result = (*((uint64_t (**)(uint64_t, uint64_t))v9 + 1))(v6, a3);
    if ((result & 1) != 0)
      break;
    v3 = *(_QWORD *)(v6 + 8);
LABEL_7:
    ++v8;
    v7 += 24;
    if (v3 <= v8)
      return result;
  }
  if (*(unsigned __int8 *)(v6 + 17) <= 1u && *(unsigned __int8 *)(v6 + 16) != v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219C448);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int8 *)(v6 + 17);
      v14 = *(unsigned __int8 *)(v6 + 16);
      *(_DWORD *)buf = 67109888;
      v24 = v13;
      v25 = 1024;
      v26 = a2;
      v27 = 1024;
      v28 = v14;
      v29 = 1024;
      v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[FSM] %u,event,%u,transition,from,%u,to,%u", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10219C448);
      v15 = *(unsigned __int8 *)(v6 + 16);
      LOWORD(v19) = 1024;
      HIWORD(v19) = a2;
      v20 = v15;
      v21 = 1024;
      v22 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "[FSM] %u,event,%u,transition,from,%u,to,%u", &v18, 26, 67109888, v19);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CMFiniteStateMachine::signal(uint8_t, const void *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  *(_BYTE *)(v6 + 16) = v10;
  return v11(v6, a3);
}

void sub_100231BE8(uint64_t a1)
{
  sub_100212C5C(a1 + 8);
}

uint64_t sub_100231BF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100CAC19C(a1);
  if ((result & 1) == 0)
    return sub_100066C34(a1 + 464, a2);
  return result;
}

BOOL sub_100231C2C(_QWORD *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;

  v4 = (uint64_t)(a1 + 66);
  sub_1001D4784(a1 + 69, a2);
  v6 = a2[2];
  sub_1000D796C(a1 + 60, &v6);
  (*(void (**)(_QWORD, double))(*(_QWORD *)a1[82] + 40))(a1[82], v6);
  sub_100241838(v4, v6);
  sub_1000D86B4((uint64_t)(a1 + 83), v6);
  result = sub_100CDEAF8((uint64_t)a1);
  if (result)
    return sub_1004C5730(a1[82]);
  return result;
}

BOOL sub_100231CBC(uint64_t a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v11;
  int8x8_t v12;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _WORD v21[8];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;

  v4 = a3 / a2;
  v11 = a2 == 0.0;
  v5 = 0.0;
  if (!v11)
    v5 = v4;
  v6 = *(_DWORD *)(a1 + 2016);
  switch(v6)
  {
    case 2:
      if (v5 < 2.5)
      {
        *(_DWORD *)(a1 + 2020) = 3;
        goto LABEL_25;
      }
      if (a4 == 0.0)
      {
        if (qword_10229FCD0 != -1)
          goto LABEL_43;
        while (1)
        {
          v14 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "How can we generate pedometer distance with no time at all?", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
            v21[0] = 0;
            LODWORD(v20) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "How can we generate pedometer distance with no time at all?", v21, v20);
            v19 = (uint8_t *)v18;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLStepDistanceFusion::updateVehicularStateMachine(double, double, double)", "%s\n", v18);
            if (v19 != buf)
              free(v19);
          }
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
          v15 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289539;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 2082;
            v27 = "assert";
            v28 = 2081;
            v29 = "false";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
          }
          v16 = qword_10229FCD8;
          if (os_signpost_enabled((os_log_t)qword_10229FCD8))
          {
            *(_DWORD *)buf = 68289539;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 2082;
            v27 = "assert";
            v28 = 2081;
            v29 = "false";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
          }
          v17 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289539;
            v23 = 0;
            v24 = 2082;
            v25 = "";
            v26 = 2082;
            v27 = "assert";
            v28 = 2081;
            v29 = "false";
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/StepCount/CLStepDistanceFusion.mm", 1174, "updateVehicularStateMachine");
LABEL_43:
          dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
        }
      }
      v9 = *(_DWORD *)(a1 + 2020) - 1;
      *(_DWORD *)(a1 + 2020) = v9;
      v11 = a3 / a4 > 13.0 || v5 > 6.0 || v9 == 0;
      if (!v11)
        goto LABEL_25;
      *(_QWORD *)(a1 + 2016) = 0x800000001;
LABEL_24:
      v6 = 1;
      return v6 == 1;
    case 1:
      if (v5 >= 2.5)
      {
        *(_DWORD *)(a1 + 2020) = 8;
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 2020) - 1;
        *(_DWORD *)(a1 + 2020) = v8;
        if (!v8)
        {
          *(_QWORD *)(a1 + 2016) = 0x300000002;
LABEL_25:
          v6 = 2;
          return v6 == 1;
        }
      }
      goto LABEL_24;
    case 0:
      v7 = *(_DWORD *)(a1 + 2020) - 1;
      *(_DWORD *)(a1 + 2020) = v7;
      if (v7)
      {
        v6 = 0;
      }
      else
      {
        v12 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v5 < 2.5), 0x1FuLL)), (int8x8_t)0x300000002, (int8x8_t)0x800000001);
        *(int8x8_t *)(a1 + 2016) = v12;
        v6 = v12.i32[0];
      }
      break;
  }
  return v6 == 1;
}

BOOL sub_100232184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  __int128 v16;

  v4 = *(uint64_t **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v3 = (__int128 *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  if (v5 == v6)
    v7 = 0;
  else
    v7 = -858993459 * ((unint64_t)(v5 - *v4) >> 6)
       + 2 * ((_DWORD)v4 - *(_QWORD *)(a3 + 16))
       + 858993459 * ((unint64_t)(v6 - **(_QWORD **)(a3 + 16)) >> 6);
  if (v7 >= 5)
    v7 = 5;
  v16 = *v3;
  sub_100AAD33C((uint64_t **)&v16, -(uint64_t)v7);
  if (v5 == *((_QWORD *)&v16 + 1))
    return 0;
  v8 = 0;
  v9 = *v4;
  do
  {
    v10 = v5;
    if (v5 == v9)
      v10 = *(v4 - 1) + 5120;
    v11 = *(_DWORD *)(v10 - 104);
    v12 = *(_BYTE *)(v10 - 160) & 0xFD;
    if (v11)
      v13 = 1;
    else
      v13 = v12 == 1;
    if (v13)
      ++v8;
    if (v5 == v9)
    {
      v14 = *--v4;
      v9 = v14;
      v5 = v14 + 5120;
    }
    v5 -= 320;
  }
  while (v5 != *((_QWORD *)&v16 + 1));
  return v8 > 2;
}

uint64_t sub_100232288(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[56], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 4))(a4, a1, a2, a3);
}

_QWORD *sub_1002322D8(_QWORD *result, uint64_t a2, _DWORD *a3, const void *a4)
{
  if (*a3 == 1)
    return sub_1001D44D4(result, a4);
  return result;
}

uint64_t sub_1002322F0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[56], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 4))(a4, a1, a2, a3);
}

void sub_100232340(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if ((*a3 | 4) == 7)
    sub_100241184(a1, a4);
}

void sub_10023235C(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[5];
  v3 = a1[6];
  a1[9] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[6];
      v2 = (void **)(a1[5] + 8);
      a1[5] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[8] = v6;
  }
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t sub_1002323D4(uint64_t a1)
{
  void *v2;

  sub_10023240C(a1);
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10023240C(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    if (compression_stream_destroy((compression_stream *)(a1 + 32)))
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v1 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "ProtobufCompressor,failed to destroy stream", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v3[0] = 0;
        v2 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufCompressor,failed to destroy stream", v3, 2);
        sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::destroyStream()", "%s\n", v2);
        if (v2 != (char *)buf)
          free(v2);
      }
    }
  }
}

void sub_1002325A8(uint64_t a1)
{
  sub_100229284(a1 + 3832);
}

void sub_1002325B0(_BYTE *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[96];
  int v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  void *__p;
  char v18;
  std::__shared_weak_count *v19;
  id v20;

  if (a1[667] && (a1[668] || a1[669]) && sub_10022DBA4((uint64_t)(a1 + 2000), *(double *)(a2 + 504)))
  {
    sub_10011D234((uint64_t)v13, a2);
    v14 = 1;
    sub_100232700((uint64_t)a1, (uint64_t)v13);

    v4 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v18 < 0)
      operator delete(__p);
    v7 = v16;
    if (v16)
    {
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1002326EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100232700(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t result;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  double v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v6 = sub_100B30608(v5, buf);
    v7 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v8 = *(_QWORD *)(a2 + 504);
    v9 = *(_QWORD *)(a1 + 4032);
    v10 = *(_QWORD *)(a1 + 2504);
    v11 = sub_100B303DC();
    v12 = sub_100B309E0(v11);
    *(_DWORD *)buf = 134350338;
    v37 = v6;
    v38 = 2082;
    v39 = v7;
    v40 = 2050;
    v41 = v8;
    v42 = 2050;
    v43 = v9;
    v44 = 2050;
    v45 = v10;
    v46 = 2050;
    v47 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%{public}.1lf,DeadReckoning,%{public}s,%{public}.2lf,Propagating solution,lastGPSTime,%{public}.2lf,lastAccessoryTime,%{public}.2lf,propagation_us,%{public}.3f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v15 = qword_1022A0028;
    v16 = sub_1005FECEC();
    v17 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v18 = *(_QWORD *)(a2 + 504);
    v19 = *(_QWORD *)(a1 + 4032);
    v20 = *(_QWORD *)(a1 + 2504);
    v21 = sub_100B303DC();
    v24 = 134350338;
    v25 = v16;
    v26 = 2082;
    v27 = v17;
    v28 = 2050;
    v29 = v18;
    v30 = 2050;
    v31 = v19;
    v32 = 2050;
    v33 = v20;
    v34 = 2050;
    v35 = sub_100B309E0(v21);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "%{public}.1lf,DeadReckoning,%{public}s,%{public}.2lf,Propagating solution,lastGPSTime,%{public}.2lf,lastAccessoryTime,%{public}.2lf,propagation_us,%{public}.3f", &v24, 62);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::publishPropagatedCoordinates(CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v13 = sub_10022DB7C(a1 + 2000, *(_DWORD *)(a2 + 96), a2);
  result = (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 288) + 200))(*(_QWORD *)(a1 + 288), a2, v13);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a2 + 516) = 1;
    *(_DWORD *)(a2 + 696) = 1;
    *(_DWORD *)buf = 27;
    return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1002329E4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (*(_DWORD *)a2 == 1)
  {
    v4 = *(unsigned __int8 *)(a2 + 4);
    v5 = *(unsigned __int8 *)(a1 + 704);
    *(_BYTE *)(a1 + 704) = v4;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got notification gps active state,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = *(unsigned __int8 *)(a2 + 4);
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Got notification gps active state,%{public}d", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onGpsActiveNotification(const CLLocationProvider_Type::TechnologyStatus &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (v4 != v5)
      sub_100193388(a1);
    sub_100400A08(a1 + 768, *(unsigned __int8 *)(a1 + 704), v4 != v5);
  }
}

void sub_100232BDC(uint64_t a1, _BYTE *a2)
{
  int v4;
  NSObject *v5;
  int v6;
  _QWORD *v7;
  char v8;
  int v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;

  sub_1001477A8(a1);
  v4 = (char)*a2;
  if (v4 != 2 && v4 < *(char *)(a1 + 161))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v6 = (char)*a2;
      v15[0] = 68289282;
      v15[1] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 1026;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stopping all location providers above threshold\", \"threshold\":%{public}d}", (uint8_t *)v15, 0x18u);
    }
    v7 = *(_QWORD **)(a1 + 240);
    if (v7 != (_QWORD *)(a1 + 248))
    {
      v8 = 0;
      do
      {
        v9 = *((char *)v7 + 900);
        if (v9 <= *(char *)(a1 + 161) && v9 > (char)*a2)
        {
          sub_1006A4CCC(a1, *((_DWORD *)v7 + 10));
          v8 = 1;
        }
        v11 = (_QWORD *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v7[2];
            v13 = *v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v13);
        }
        v7 = v12;
      }
      while (v12 != (_QWORD *)(a1 + 248));
      if ((v8 & 1) != 0)
        sub_100193388(a1);
    }
    v14 = *a2;
    if (v14 == 255)
    {
      objc_msgSend(*(id *)(a1 + 656), "setNextFireDelay:", 1.79769313e308);
      LOBYTE(v14) = *a2;
    }
    *(_BYTE *)(a1 + 161) = v14;
  }
}

void sub_100232D90(uint64_t a1, uint64_t *a2, std::string::size_type *a3, double *a4, int *a5, double *a6, BOOL *a7, int *a8, double a9, uint64_t a10, int a11)
{
  void *v20;
  void *v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  char *v27;
  char **v28;
  char *v29;
  char **v30;
  int v31;
  int v32;
  NSObject *v33;
  char *v34;
  NSObject *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  NSObject *v59;
  double *v60;
  int *v61;
  double *v62;
  BOOL *v63;
  int v64;
  NSObject *v65;
  _BOOL4 v66;
  void *v67;
  double v68;
  double v69;
  BOOL v70;
  uint64_t *v71;
  double v72;
  int *v73;
  NSObject *v74;
  std::string::size_type v75;
  double v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  _BYTE *v85;
  char *v86;
  char *v87;
  double v88;
  double v89;
  int v90;
  int v91;
  uint64_t *v92;
  double v93;
  char *v94;
  double v95;
  float *v96;
  float *v97;
  float v98;
  NSObject *v99;
  char *v100;
  char *v101;
  _QWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  unint64_t v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  std::string::size_type v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  NSObject *v120;
  BOOL *v121;
  double *v122;
  int *v123;
  float *v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  double v134;
  double v135;
  uint64_t *v136;
  double v137;
  char *v138;
  char *v139;
  _DWORD *v140;
  char *v141;
  int v142;
  double v143;
  int *v144;
  int v145;
  double v146;
  double v147;
  NSObject *v148;
  int v149;
  int v150;
  double *v151;
  char *v152;
  int v153;
  double v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  BOOL v164;
  double v165;
  double v166;
  double v167;
  uint64_t *v168;
  double v169;
  double v170;
  double v171;
  double v172;
  char *v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  _QWORD *v184;
  uint64_t v185;
  double *v186;
  uint64_t v187;
  double v189;
  double v190;
  uint64_t v191;
  double *v192;
  double *v193;
  double v194;
  double v195;
  double v196;
  double *v197;
  double v198;
  double v199;
  double v200;
  uint64_t *v201;
  double v202;
  char v203;
  uint64_t *v204;
  int v205;
  int v206;
  double v207;
  uint64_t v208;
  NSObject *v209;
  unint64_t v210;
  char *v211;
  std::string::size_type v212;
  double v213;
  unint64_t v214;
  char *v215;
  _BOOL4 v216;
  char *v217;
  char *v218;
  char *v219;
  int v220;
  char *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  int v225;
  uint64_t *v226;
  int *v227;
  int v228;
  double *v229;
  int *v230;
  double *v231;
  BOOL *v232;
  std::string v233;
  void *v234;
  _BYTE *v235;
  uint64_t v236;
  void *v237;
  char *v238;
  unint64_t i;
  void *v240;
  char *v241;
  void *v242;
  void *v243;
  unsigned __int8 v244;
  uint64_t v245;
  int v246;
  int v247;
  uint64_t v248;
  std::string __p;
  char *v250;
  _BYTE v251[10];
  __int16 v252;
  _BOOL4 v253;
  _BYTE buf[32];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;

  v248 = 0;
  v246 = 0;
  *(double *)&v245 = 1.0;
  *a7 = 0;
  *a8 = 0;
  *a6 = -200.0;
  if (*a2 != a2[1])
  {
    v244 = 0;
    sub_100671924(a2, &v244, (uint64_t)&v242);
    v21 = v242;
    v20 = v243;
    if (v244)
      v22 = 0;
    else
      v22 = -1431655765 * ((unint64_t)((_BYTE *)v243 - (_BYTE *)v242) >> 5);
    *(_DWORD *)(a10 + 116) = -1431655765 * ((unint64_t)((_BYTE *)v243 - (_BYTE *)v242) >> 5);
    *(_DWORD *)(a10 + 152) = v22;
    if (v20 == v21)
    {
LABEL_200:
      if (v20)
      {
        v243 = v20;
        operator delete(v20);
      }
      return;
    }
    v227 = a5;
    v231 = a6;
    v232 = a7;
    v229 = a4;
    v230 = a8;
    sub_100670CD0((uint64_t **)&v242, &v244, a11, (char **)&v240);
    v24 = (char *)v240;
    v23 = v241;
    if (v240 == v241)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v35 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, validRssiApCollection is empty", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, validRssiApCollection is empty", &__p, 2);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v36);
        if (v36 != buf)
          free(v36);
      }
      goto LABEL_197;
    }
    v226 = a2;
    v25 = (char *)v240 + 96;
    v26 = v240;
    if ((char *)v240 + 96 != v241)
    {
      v26 = v240;
      do
      {
        if (v26[18] < *((_DWORD *)v25 + 18))
          v26 = v25;
        v25 += 96;
      }
      while (v25 != v241);
    }
    v247 = v26[18];
    if (a1)
    {
      *(_DWORD *)(a10 + 112) = *(_QWORD *)(a1 + 16);
      sub_100670FEC((const void ***)a1, &v234, a11, (uint64_t)&v237);
      v27 = (char *)v237;
      if (v237 != &v238)
      {
        v28 = (char **)v237;
        while (1)
        {
          v29 = v28[1];
          v30 = v28;
          if (v29)
          {
            do
            {
              v28 = (char **)v29;
              v29 = *(char **)v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v28 = (char **)v30[2];
              v70 = *v28 == (char *)v30;
              v30 = v28;
            }
            while (!v70);
          }
          if (v28 == &v238)
            break;
          if (v27[55] < 0)
          {
            sub_100115CE4(buf, *((void **)v27 + 4), *((_QWORD *)v27 + 5));
          }
          else
          {
            *(_OWORD *)buf = *((_OWORD *)v27 + 2);
            *(_QWORD *)&buf[16] = *((_QWORD *)v27 + 6);
          }
          v31 = *((_DWORD *)v27 + 14);
          *(_DWORD *)&buf[24] = v31;
          if (*((char *)v28 + 55) < 0)
          {
            sub_100115CE4(&__p, v28[4], (unint64_t)v28[5]);
            v31 = *(_DWORD *)&buf[24];
          }
          else
          {
            __p = *(std::string *)(v28 + 4);
          }
          v32 = *((_DWORD *)v28 + 14);
          LODWORD(v250) = v32;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (v31 < v32)
            v27 = (char *)v28;
        }
      }
      v246 = *((_DWORD *)v27 + 14);
      sub_10067224C((uint64_t ***)&v240, (const void ***)&v237, &v247, &v246, (double *)&v248, (long double *)&v245);
      sub_100090AE4((uint64_t)&v237, v238);
      v24 = (char *)v240;
      v23 = v241;
    }
    else
    {
      *(double *)&v245 = 1.0;
      v248 = 0;
    }
    v237 = 0;
    v238 = 0;
    for (i = 0; v24 != v23; v24 += 96)
    {
      sub_100033B80((uint64_t)v24, (uint64_t)buf);
      v37 = v238;
      if ((unint64_t)v238 >= i)
      {
        v43 = (char *)v237;
        v44 = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
        v45 = v44 + 1;
        if (v44 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((uint64_t)(i - (_QWORD)v237) >> 5) > v45)
          v45 = 0x5555555555555556 * ((uint64_t)(i - (_QWORD)v237) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - (_QWORD)v237) >> 5) >= 0x155555555555555)
          v46 = 0x2AAAAAAAAAAAAAALL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_10067257C((uint64_t)&i, v46);
          v43 = (char *)v237;
          v37 = v238;
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[96 * v44];
        v49 = *(_OWORD *)&buf[16];
        *(_OWORD *)v48 = *(_OWORD *)buf;
        *((_OWORD *)v48 + 1) = v49;
        v50 = v255;
        v51 = v256;
        v52 = v258;
        *((_OWORD *)v48 + 4) = v257;
        *((_OWORD *)v48 + 5) = v52;
        *((_OWORD *)v48 + 2) = v50;
        *((_OWORD *)v48 + 3) = v51;
        if (v37 == v43)
        {
          v58 = &v47[96 * v44];
        }
        else
        {
          v53 = &v47[96 * v44];
          do
          {
            v54 = *((_OWORD *)v37 - 5);
            *((_OWORD *)v53 - 6) = *((_OWORD *)v37 - 6);
            *((_OWORD *)v53 - 5) = v54;
            v55 = *((_OWORD *)v37 - 4);
            v56 = *((_OWORD *)v37 - 3);
            v57 = *((_OWORD *)v37 - 2);
            v58 = v53 - 96;
            *(_OWORD *)(v53 - 23) = *(_OWORD *)(v37 - 23);
            *((_OWORD *)v53 - 3) = v56;
            *((_OWORD *)v53 - 2) = v57;
            *((_OWORD *)v53 - 4) = v55;
            v37 -= 96;
            v53 -= 96;
          }
          while (v37 != v43);
        }
        v42 = v48 + 96;
        v237 = v58;
        v238 = v48 + 96;
        i = (unint64_t)&v47[96 * v46];
        if (v43)
          operator delete(v43);
      }
      else
      {
        v38 = *(_OWORD *)&buf[16];
        *(_OWORD *)v238 = *(_OWORD *)buf;
        *((_OWORD *)v37 + 1) = v38;
        v39 = v255;
        v40 = v256;
        v41 = v258;
        *((_OWORD *)v37 + 4) = v257;
        *((_OWORD *)v37 + 5) = v41;
        *((_OWORD *)v37 + 2) = v39;
        *((_OWORD *)v37 + 3) = v40;
        v42 = v37 + 96;
      }
      v238 = v42;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v59 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "@WifiCalc, zaxis, num accessPointsToUseInCalculation, %{private}lu", buf, 0xCu);
    }
    v60 = v229;
    v61 = v230;
    v62 = v231;
    v63 = v232;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((v238 - (_BYTE *)v237) >> 5);
      v211 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@WifiCalc, zaxis, num accessPointsToUseInCalculation, %{private}lu", &__p, 12);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v211);
      if (v211 != buf)
        free(v211);
      v60 = v229;
      v61 = v230;
      v62 = v231;
      v63 = v232;
    }
    v64 = v244;
    *v63 = v244 ^ 1;
    v225 = v64;
    if (!v64)
    {
      *v63 = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5) >= (int)sub_10067158C(a11);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v65 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v66 = *v63;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "@WifiCalc, zaxis, hasSufficientData, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v216 = *v232;
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v216;
        v217 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "@WifiCalc, zaxis, hasSufficientData, %d", &__p);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v217);
        if (v217 != buf)
          free(v217);
        v60 = v229;
        v61 = v230;
        v62 = v231;
        v63 = v232;
      }
    }
    v67 = v237;
    if (v238 - (_BYTE *)v237 == 96)
    {
      *a3 = *((_QWORD *)v237 + 2);
      v68 = *((double *)v67 + 5);
      v69 = v68 * *((double *)sub_10012A448() + 32);
      *v60 = v69;
      v70 = v69 > 0.0 && !*v63;
      if (v70)
      {
        v71 = sub_10012A448();
        v72 = *v60;
        if (*v60 < *((double *)v71 + 28))
          v72 = *((double *)v71 + 28);
        *v60 = v72;
      }
      v73 = (int *)v237;
      *v61 = -1431655765 * ((unint64_t)(v238 - (_BYTE *)v237) >> 5);
      *v62 = (double)v73[14];
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v74 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v75 = *a3;
        v76 = *v60;
        v77 = 0xAAAAAAAAAAAAAAABLL * ((v226[1] - *v226) >> 5);
        *(_DWORD *)buf = 134284545;
        *(_QWORD *)&buf[4] = v75;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v76;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v77;
        LOWORD(v255) = 2048;
        *(_QWORD *)((char *)&v255 + 2) = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
        WORD5(v255) = 1024;
        HIDWORD(v255) = v225 == 0;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v212 = *a3;
        v213 = *v229;
        v214 = 0xAAAAAAAAAAAAAAABLL * ((v226[1] - *v226) >> 5);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284545;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v212;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v213;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v250 = (char *)v214;
        *(_WORD *)v251 = 2048;
        *(_QWORD *)&v251[2] = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
        v252 = 1024;
        v253 = v225 == 0;
        LODWORD(v224) = 48;
        v215 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", &__p, v224);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v215);
        if (v215 != buf)
          free(v215);
        v61 = v230;
        v63 = v232;
      }
      v78 = v237;
      *((_DWORD *)v237 + 21) = 1065353216;
      sub_1000C2254(v78 + 9, &__p);
      v79 = *(_QWORD *)(a10 + 200);
      v80 = *(_QWORD *)(a10 + 192);
      if (v80 >= v79)
      {
        v128 = *(_QWORD *)(a10 + 184);
        v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - v128) >> 3);
        v130 = v129 + 1;
        if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - v128) >> 3);
        if (2 * v131 > v130)
          v130 = 2 * v131;
        if (v131 >= 0x555555555555555)
          v132 = 0xAAAAAAAAAAAAAAALL;
        else
          v132 = v130;
        *(_QWORD *)&v255 = a10 + 200;
        if (v132)
          v133 = (char *)sub_1002596A8(a10 + 200, v132);
        else
          v133 = 0;
        v156 = &v133[24 * v129];
        *(_QWORD *)buf = v133;
        *(_QWORD *)&buf[8] = v156;
        *(_QWORD *)&buf[24] = &v133[24 * v132];
        v157 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v156 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v156 = v157;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)&buf[16] = v156 + 24;
        sub_100074D44((uint64_t *)(a10 + 184), buf);
        v158 = *(_QWORD *)(a10 + 192);
        sub_100074DB8((uint64_t)buf);
        v159 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a10 + 192) = v158;
        if (v159 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v81 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v80 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v80 = v81;
        *(_QWORD *)(a10 + 192) = v80 + 24;
      }
      if ((void **)(a10 + 160) != &v237)
        sub_100675638((char *)(a10 + 160), (char *)v237, (uint64_t)v238, 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5));
      v160 = v247;
      v161 = *((_DWORD *)v67 + 14);
      v162 = v248;
      v163 = *v61;
      v164 = *v63;
      *(_DWORD *)(a10 + 40) = v246;
      *(_DWORD *)(a10 + 44) = v160;
      *(_DWORD *)(a10 + 48) = v161;
      *(double *)(a10 + 56) = (double)v161;
      *(_BYTE *)(a10 + 64) = 0;
      *(_QWORD *)(a10 + 72) = 0;
      *(_QWORD *)(a10 + 80) = v162;
      *(_DWORD *)(a10 + 108) = v163;
      *(_BYTE *)(a10 + 144) = v164;
      goto LABEL_194;
    }
    v82 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5));
    if (v238 == v237)
      v83 = 0;
    else
      v83 = v82;
    sub_1006757C8((uint64_t)v237, v238, v83, 1);
    v84 = v238;
    while (1)
    {
      v85 = v237;
      if (0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 5) <= *((unsigned int *)sub_10012A448() + 52))
        break;
      v84 = v238 - 96;
      v238 -= 96;
    }
    v87 = (char *)v237;
    v86 = v238;
    if (v237 == v238)
      goto LABEL_195;
    do
    {
      v88 = *((double *)v87 + 8);
      *((_DWORD *)v87 + 21) = 0;
      v89 = *((double *)v87 + 5);
      if (v89 > 0.0)
      {
        v91 = *((_DWORD *)v87 + 13);
        v90 = *((_DWORD *)v87 + 14);
        v92 = sub_10012A448();
        sub_100234A78((double *)v92 + 45, (double)v90, (double)v91, v89, a9 - v88);
        *(float *)&v93 = v93;
        *((_DWORD *)v87 + 21) = LODWORD(v93);
      }
      v87 += 96;
    }
    while (v87 != v86);
    v94 = (char *)v237;
    v87 = v238;
    if (v237 == v238)
      goto LABEL_195;
    v95 = 0.0;
    v96 = (float *)v237;
    do
    {
      v95 = v95 + v96[21];
      v96 += 24;
    }
    while (v96 != (float *)v238);
    if (v95 <= 0.0)
    {
LABEL_194:
      v87 = (char *)v237;
LABEL_195:
      if (v87)
      {
        v238 = v87;
        operator delete(v87);
      }
LABEL_197:
      if (v240)
      {
        v241 = (char *)v240;
        operator delete(v240);
      }
      v20 = v242;
      goto LABEL_200;
    }
    v97 = (float *)v237;
    do
    {
      v98 = v97[21] / v95;
      v97[21] = v98;
      v97 += 24;
    }
    while (v97 != (float *)v87);
    if ((void **)(a10 + 160) != &v237)
      sub_100675638((char *)(a10 + 160), v94, (uint64_t)v87, 0xAAAAAAAAAAAAAAABLL * ((v87 - v94) >> 5));
    v228 = sub_10066EFA8(&v237);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v99 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = v228;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, isMultimodal, %{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67174657;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v228;
      LODWORD(v224) = 8;
      v218 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, isMultimodal, %{private}d", &__p, v224);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v218);
      if (v218 != buf)
        free(v218);
    }
    v234 = 0;
    v235 = 0;
    v236 = 0;
    sub_10066FCD0((uint64_t *)&v237, &v234);
    if (v234 != v235)
      sub_100675638((char *)&v237, (char *)v234, (uint64_t)v235, 0xAAAAAAAAAAAAAAABLL * ((v235 - (_BYTE *)v234) >> 5));
    v100 = (char *)v237;
    v101 = v238;
    if (v237 != v238)
    {
      v102 = (_QWORD *)(a10 + 184);
      do
      {
        v103 = *((_OWORD *)v100 + 1);
        *(_OWORD *)buf = *(_OWORD *)v100;
        *(_OWORD *)&buf[16] = v103;
        v104 = *((_OWORD *)v100 + 2);
        v105 = *((_OWORD *)v100 + 3);
        v106 = *((_OWORD *)v100 + 5);
        v257 = *((_OWORD *)v100 + 4);
        v258 = v106;
        v255 = v104;
        v256 = v105;
        sub_1000C2254((_QWORD *)&v257 + 1, &v233);
        v108 = *(_QWORD *)(a10 + 192);
        v107 = *(_QWORD *)(a10 + 200);
        if (v108 >= v107)
        {
          v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - *v102) >> 3);
          v111 = v110 + 1;
          if (v110 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_100259694();
          v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v102) >> 3);
          if (2 * v112 > v111)
            v111 = 2 * v112;
          if (v112 >= 0x555555555555555)
            v113 = 0xAAAAAAAAAAAAAAALL;
          else
            v113 = v111;
          *(_QWORD *)v251 = a10 + 200;
          if (v113)
            v114 = (char *)sub_1002596A8(a10 + 200, v113);
          else
            v114 = 0;
          v115 = (std::string::size_type)&v114[24 * v110];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
          __p.__r_.__value_.__l.__size_ = v115;
          v250 = &v114[24 * v113];
          v116 = *(_OWORD *)&v233.__r_.__value_.__l.__data_;
          *(_QWORD *)(v115 + 16) = *((_QWORD *)&v233.__r_.__value_.__l + 2);
          *(_OWORD *)v115 = v116;
          memset(&v233, 0, sizeof(v233));
          __p.__r_.__value_.__r.__words[2] = v115 + 24;
          sub_100074D44((uint64_t *)(a10 + 184), &__p);
          v117 = *(_QWORD *)(a10 + 192);
          sub_100074DB8((uint64_t)&__p);
          v118 = SHIBYTE(v233.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a10 + 192) = v117;
          if (v118 < 0)
            operator delete(v233.__r_.__value_.__l.__data_);
        }
        else
        {
          v109 = *(_OWORD *)&v233.__r_.__value_.__l.__data_;
          *(_QWORD *)(v108 + 16) = *((_QWORD *)&v233.__r_.__value_.__l + 2);
          *(_OWORD *)v108 = v109;
          *(_QWORD *)(a10 + 192) = v108 + 24;
        }
        v100 += 96;
      }
      while (v100 != v101);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v119 = &qword_1022A0000;
    v120 = qword_1022A0048;
    v122 = v231;
    v121 = v232;
    v123 = v227;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, num aps after outlier rejection, %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((v238 - (_BYTE *)v237) >> 5);
      v219 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, num aps after outlier rejection, %lu", &__p);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v219);
      if (v219 != buf)
        free(v219);
      v122 = v231;
      v121 = v232;
      v123 = v227;
    }
    v124 = (float *)v237;
    v125 = 0.0;
    v126 = 0.0;
    while (v124 != (float *)v238)
    {
      v127 = v124[21];
      v126 = v126 + v127 * *((double *)v124 + 2);
      v125 = v125 + v127;
      v124 += 24;
    }
    v134 = v126 / v125;
    if (v125 <= 0.0)
      v135 = 0.0;
    else
      v135 = v134;
    v136 = &qword_1022A0000;
    v137 = sub_10066DE44((uint64_t *)&v237, v135);
    if (v137 < 0.0)
    {
LABEL_265:
      if (v234)
      {
        v235 = v234;
        operator delete(v234);
      }
      goto LABEL_194;
    }
    v138 = (char *)v237;
    v139 = v238;
    v140 = v237;
    if (v237 != v238)
    {
      v141 = (char *)v237 + 96;
      v140 = v237;
      if ((char *)v237 + 96 != v238)
      {
        v140 = v237;
        do
        {
          if (v140[14] < *((_DWORD *)v141 + 14))
            v140 = v141;
          v141 += 96;
        }
        while (v141 != v238);
      }
    }
    v142 = v140[14];
    *v123 = v142;
    v143 = 0.0;
    if (v138 != v139)
    {
      v144 = (int *)v138;
      do
      {
        v143 = v143 + (double)v144[14];
        v144 += 24;
      }
      while (v144 != (int *)v139);
    }
    *v122 = v143 / (double)(0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 5));
    if (*(double *)sub_10012A448() >= (double)v142
      || (v145 = *v123, v146 = *v122, (double)v145 - v146 > *((double *)sub_10012A448() + 2))
      && (v147 = *v122, v147 < *((double *)sub_10012A448() + 1)))
    {
      *v121 = 0;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v148 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v149 = *v123;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v149;
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, maxRssi, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v220 = *v227;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v220;
      v221 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, maxRssi, %d", &__p);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v221);
      if (v221 != buf)
        free(v221);
      v123 = v227;
      v119 = &qword_1022A0000;
      v136 = &qword_1022A0000;
    }
    v150 = v247;
    if (*v123 != v247)
      *v232 = 0;
    v151 = (double *)v237;
    v152 = v238;
    if (v237 == v238)
    {
      v153 = 0;
      v155 = (char *)v237;
    }
    else
    {
      v153 = 0;
      do
      {
        v154 = v151[5];
        if (v154 > *((double *)sub_10012A448() + 45))
          ++v153;
        v151 += 12;
      }
      while (v151 != (double *)v152);
      v151 = (double *)v237;
      v155 = v238;
    }
    v165 = *((double *)sub_10012A448() + 39);
    v166 = *((double *)sub_10012A448() + 28);
    v167 = *(double *)&v245;
    v168 = sub_10012A448();
    v169 = (double)v153 / (double)(0xAAAAAAAAAAAAAAABLL * ((v155 - (char *)v151) >> 5));
    v170 = v137 * exp(v169 * v165);
    if (v137 >= v170)
      v170 = v137;
    if (v166 < v170)
      v170 = v166;
    v171 = v170 * v167;
    if (*((double *)v168 + 28) >= v171)
      v172 = v171;
    else
      v172 = *((double *)v168 + 28);
    if (!v228)
    {
LABEL_253:
      v203 = *v232;
      if (v172 >= 0.0)
      {
        if (*v232)
        {
          v203 = 1;
        }
        else
        {
          v204 = sub_10012A448();
          if (v172 < *((double *)v204 + 28))
            v172 = *((double *)v204 + 28);
          v203 = *v232;
        }
        *v229 = v172;
        *(double *)a3 = v135;
      }
      v205 = -1431655765 * ((unint64_t)(v238 - (_BYTE *)v237) >> 5);
      *v230 = v205;
      v206 = *v227;
      v207 = *v231;
      v208 = v248;
      *(_DWORD *)(a10 + 40) = v246;
      *(_DWORD *)(a10 + 44) = v150;
      *(_DWORD *)(a10 + 48) = v206;
      *(double *)(a10 + 56) = v207;
      *(_BYTE *)(a10 + 64) = v228;
      *(double *)(a10 + 72) = v169;
      *(_QWORD *)(a10 + 80) = v208;
      *(_DWORD *)(a10 + 108) = v205;
      *(_BYTE *)(a10 + 144) = v203;
      if (v136[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v209 = v119[9];
      if (os_log_type_enabled(v209, OS_LOG_TYPE_DEBUG))
      {
        v210 = 0xAAAAAAAAAAAAAAABLL * ((v226[1] - *v226) >> 5);
        *(_DWORD *)buf = 134284545;
        *(double *)&buf[4] = v135;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v172;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v210;
        LOWORD(v255) = 2048;
        *(_QWORD *)((char *)&v255 + 2) = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
        WORD5(v255) = 1024;
        HIDWORD(v255) = v225 == 0;
        _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v136[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v222 = 0xAAAAAAAAAAAAAAABLL * ((v226[1] - *v226) >> 5);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284545;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v135;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v172;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v250 = (char *)v222;
        *(_WORD *)v251 = 2048;
        *(_QWORD *)&v251[2] = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)v237) >> 5);
        v252 = 1024;
        v253 = v225 == 0;
        LODWORD(v224) = 48;
        v223 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", &__p, v224);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v223);
        if (v223 != buf)
          free(v223);
      }
      goto LABEL_265;
    }
    memset(buf, 0, 24);
    v173 = (char *)v240;
    v174 = v241;
    if (v240 == v241)
    {
      v186 = 0;
    }
    else
    {
      v175 = 0;
      do
      {
        v176 = *((_QWORD *)v173 + 3);
        if ((unint64_t)v175 >= *(_QWORD *)&buf[16])
        {
          v177 = *(_QWORD **)buf;
          v178 = ((uint64_t)v175 - *(_QWORD *)buf) >> 3;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 61)
            sub_100259694();
          v180 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
          if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2 > v179)
            v179 = v180 >> 2;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
            v181 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            v182 = (char *)sub_10025E6A0((uint64_t)&buf[16], v181);
            v177 = *(_QWORD **)buf;
            v175 = *(_QWORD **)&buf[8];
          }
          else
          {
            v182 = 0;
          }
          v183 = &v182[8 * v178];
          *(_QWORD *)v183 = v176;
          v184 = v183 + 8;
          while (v175 != v177)
          {
            v185 = *--v175;
            *((_QWORD *)v183 - 1) = v185;
            v183 -= 8;
          }
          *(_QWORD *)buf = v183;
          *(_QWORD *)&buf[8] = v184;
          *(_QWORD *)&buf[16] = &v182[8 * v181];
          if (v177)
            operator delete(v177);
          v175 = v184;
          v136 = &qword_1022A0000;
        }
        else
        {
          *v175++ = v176;
        }
        *(_QWORD *)&buf[8] = v175;
        v173 += 96;
      }
      while (v173 != v174);
      v186 = *(double **)buf;
      v187 = *(_QWORD *)buf + 8;
      if (*(_QWORD **)buf != v175 && v187 != (_QWORD)v175)
      {
        v189 = **(double **)buf;
        v190 = **(double **)buf;
        v191 = *(_QWORD *)buf + 8;
        v192 = *(double **)buf;
        v193 = (double *)(*(_QWORD *)buf + 8);
        do
        {
          v194 = *v193++;
          v195 = v194;
          if (v190 < v194)
          {
            v190 = v195;
            v192 = (double *)v191;
          }
          v191 = (uint64_t)v193;
        }
        while (v193 != (double *)v175);
        v196 = *v192;
        v197 = (double *)(*(_QWORD *)buf + 8);
        do
        {
          v198 = *v197++;
          v199 = v198;
          if (v198 < v189)
          {
            v189 = v199;
            v186 = (double *)v187;
          }
          v187 = (uint64_t)v197;
        }
        while (v197 != (double *)v175);
        goto LABEL_247;
      }
    }
    v196 = *v186;
LABEL_247:
    v200 = *v186;
    v201 = sub_10012A448();
    v202 = v196 - v200;
    if (*((double *)v201 + 28) < v196 - v200)
      v202 = *((double *)v201 + 28);
    if (v172 < v202)
      v172 = v202;
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_253;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v33 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, apCollection is empty", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, apCollection is empty", &__p, 2);
    sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v34);
    if (v34 != buf)
      free(v34);
  }
}

void sub_100234910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  if (a35)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void sub_100234A78(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a5 >= 0.0)
    v5 = a5;
  else
    v5 = 0.0;
  if (a1[8] > v5)
  {
    v7 = a1[2];
    if (v7 < a2)
      a2 = a1[2];
    if (a2 >= a1[3])
      v8 = a2;
    else
      v8 = a1[3];
    v9 = *a1;
    if (*a1 > a4)
      a4 = *a1;
    if (a1[1] <= a3)
      v10 = a3;
    else
      v10 = a1[1];
    exp(-(a4 - v9) / a1[4]);
    exp(-(v10 - v9) / a1[5]);
    v11 = -(v7 - v8);
    v12 = a1[6];
    v13 = a1[9];
    v14 = v11 / v12;
    if (v13 <= v5)
    {
      exp(-(v5 - v13) / a1[7]);
      exp(v14);
    }
    else
    {
      exp(v11 / v12);
    }
  }
}

_BYTE *sub_100234B84(_BYTE *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AF638);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "feed assistance time when starting GPS session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "feed assistance time when starting GPS session", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100071E60((uint64_t)a1);
  return sub_100234ED4(a1);
}

_BYTE *sub_100234D28(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[16])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistered for time notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "unregistered for time notifications", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::unregisterForTimeNotifications()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v1 + 8), 0);
    v1[16] = 0;
  }
  return result;
}

_BYTE *sub_100234ED4(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!result[16])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registered for time notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "registered for time notifications", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::registerForTimeNotifications()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v1 + 8), 0, 0);
    v1[16] = 1;
  }
  return result;
}

void sub_100235088(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  BOOL v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a2 + 48))
  {
    v3 = sub_1001FCBB4();
    v4 = *(double *)(a1 + 56);
    v6 = v4 > 0.0;
    v5 = vabdd_f64(v3, v4);
    v6 = v6 && v5 <= 15.0;
    if (!v6)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceTime,refresh,feedAssistanceTime", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AF638);
        v10[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssAssistanceTime,refresh,feedAssistanceTime", v10, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      sub_100071E60(a1);
      *(double *)(a1 + 56) = v3;
    }
  }
}

uint64_t sub_100235254(CFDictionaryRef theDict, BOOL *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t v9[16];
  uint8_t buf[1640];

  sub_1001C1D6C((int)v9, theDict);
  v3 = sub_1001E48E4((uint64_t)v9, (uint64_t)CFSTR("kCellMonitorRefreshResultKey"), a2);
  if ((v3 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021AADC0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "copyValuesFromCellMonitorRefreshResultDictionary, couldn't get dictionary values", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AADC0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "copyValuesFromCellMonitorRefreshResultDictionary, couldn't get dictionary values", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCoreTelephonyUtils::copyValuesFromCellMonitorRefreshResultDictionary(CFDictionaryRef, BOOL &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  sub_10011A5A8(v9);
  return v3;
}

void sub_100235420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_100235440(char a1)
{
  char v2;
  void *values;
  void *keys;

  v2 = a1;
  values = (void *)sub_10023EC34(&v2);
  keys = CFSTR("kCellMonitorRefreshResultKey");
  return CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

char *sub_1002354C4(char *__dst, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v7;
  }
  v8 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v9;
  }
  *((_QWORD *)__dst + 6) = a4;
  return __dst;
}

void sub_10023554C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100235568(uint64_t a1)
{
  sub_100235654(a1);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1002355A0(unsigned int *a1, uint64_t a2)
{
  NSDictionary *v3;
  NSErrorUserInfoKey v4;
  uint64_t v5;

  if (a2)
  {
    v4 = NSDebugDescriptionErrorKey;
    v5 = a2;
    v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
  }
  else
  {
    v3 = 0;
  }
  +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, v3);
  sub_100008150(a1);
}

void sub_100235654(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40))
  {
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, 0);
    sub_100008150((unsigned int *)a1);
  }
}

id *sub_1002356B0(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  id v34[2];
  int v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v43[24];
  double v44;

  v34[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v34[1] = 0;
  if (*(double *)(a1 + 248) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v34);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DD40);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DD40);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v35, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 3);
    v8 = v44;
    v9 = v7 - v44;
    if (v7 - v44 < 0.0)
      v9 = -(v7 - v44);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DD40);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 3);
        *(_DWORD *)buf = 134349312;
        v40 = v44;
        v41 = 2050;
        v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DD40);
        v25 = *((_QWORD *)a2 + 3);
        v35 = 134349312;
        v36 = v44;
        v37 = 2050;
        v38 = v25;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v35, 22);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 3);
      v8 = v44;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DD40);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 3);
          *(_DWORD *)buf = 134217984;
          v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10219DD40);
          v28 = *((double *)a2 + 3);
          v35 = 134217984;
          v36 = v28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v35));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10219DD40);
        v18 = v33;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v40 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10219DD40);
        v35 = 134217984;
        v36 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v35));
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = v22;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v34);
}

void sub_100235DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100235E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 24);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 288))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100555498(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10215A448);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10215A448);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSignificantElevation>::addSuspectRecord(const T &) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1008B1F38(v12, a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10215A448);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10215A448);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_1002361E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100236210(uint64_t a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  double v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  double v38;
  char v39[8];
  double v40;
  id v41[2];
  int v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  double v47;
  __int16 v48;
  uint64_t v49;

  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v41);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v39);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8598);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B8598);
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v42, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *((double *)a2 + 1);
    v8 = v40;
    v9 = v7 - v40;
    if (v7 - v40 < 0.0)
      v9 = -(v7 - v40);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8598);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a2 + 1);
        *(_DWORD *)buf = 134349312;
        v47 = v40;
        v48 = 2050;
        v49 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B8598);
        v30 = *((_QWORD *)a2 + 1);
        v42 = 134349312;
        v43 = v40;
        v44 = 2050;
        v45 = v30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v42, 22);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *((double *)a2 + 1);
      v8 = v40;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B8598);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *((double *)a2 + 1);
          *(_DWORD *)buf = 134217984;
          v47 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B8598);
          v33 = *((double *)a2 + 1);
          v42 = 134217984;
          v43 = v33;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v42));
          v35 = (uint8_t *)v34;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v34);
          if (v35 != buf)
            free(v35);
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v38 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_1021B8598);
        v18 = v38;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v47 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B8598);
        v42 = 134217984;
        v43 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v42));
        v37 = (uint8_t *)v36;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)a1 + 144))(a1, v39, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *a2;
  v22 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v21;
  v23 = a2[3];
  v24 = a2[4];
  v25 = a2[6];
  *(_OWORD *)(a1 + 304) = a2[5];
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 272) = v23;
  *(_OWORD *)(a1 + 288) = v24;
  v26 = a2[7];
  v27 = a2[8];
  v28 = a2[10];
  *(_OWORD *)(a1 + 368) = a2[9];
  *(_OWORD *)(a1 + 384) = v28;
  *(_OWORD *)(a1 + 336) = v26;
  *(_OWORD *)(a1 + 352) = v27;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v41);
}

void sub_100236980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  sub_100131740(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1002369AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100235E20(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_1004FA404(a1);
    }
  }
  return result;
}

uint64_t sub_100236A00(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100012D94(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_10148D7A8(a1);
    }
  }
  return result;
}

uint64_t sub_100236A54()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_1001B7910();
  if ((v0 & 0x4000000) == 0 || qword_1023140D8 || (sub_1001B7910() & 0x2000000) != 0)
    return (v0 >> 26) & 1;
  v2 = sub_1019569D4();
  return sub_100236A94(v2);
}

unint64_t sub_100236A94()
{
  return ((unint64_t)sub_1001B7910() >> 37) & 1;
}

unint64_t sub_100236AAC()
{
  return ((unint64_t)sub_1001B7910() >> 27) & 1;
}

unint64_t sub_100236AC4()
{
  if (qword_1023140D8)
    return 1;
  else
    return ((unint64_t)sub_1001B7910() >> 25) & 1;
}

void sub_100236AF0()
{
  operator new();
}

void sub_100236B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100236BD8(uint64_t a1)
{
  sub_10000EC54(a1);
  operator delete();
}

_QWORD *sub_100236BFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char __str[512];

  snprintf(__str, 0x200uLL, "Act Dur(s), %.2f, Step Dur(s), %.2f, Step Counts, %d, Step Begin, %.2f, Step End, %.2f, distance, %.2f, Speed, %.2f, Grade type, %d, vertical speed, %.3f, HR, %f, HRConf, %f, coarse elevation, %d, rawHR, %f, rawHRConf, %f", *(double *)(a1 + 128) - *(double *)(a1 + 120), *(double *)(a1 + 136), *(_DWORD *)(a1 + 400), *(double *)(a1 + 1336), *(double *)(a1 + 1344), *(double *)(a1 + 624), *(double *)(a1 + 648), *(_DWORD *)(a1 + 832), *(double *)(a1 + 840), *(double *)(a1 + 560), *(double *)(a1 + 568), *(_DWORD *)(a1 + 1032), *(double *)(a1 + 1312), *(double *)(a1 + 1320));
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100236CCC(uint64_t a1, double a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  NSObject *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  double v96;
  uint64_t v97;
  char *v98;
  double v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unsigned __int128 v107;
  int v108;
  double v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  uint8_t buf[4];
  double v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;

  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  *(double *)(a1 + 120) = a2;
  *(double *)(a1 + 128) = a2;
  *(double *)(a1 + 112) = a2;
  if (((*(uint64_t (**)(_QWORD, __int128 *, __int128 *, __n128))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v106, &v104, (__n128)*(unint64_t *)&a2) & 1) != 0)
  {
    v4 = *((_QWORD *)&v107 + 1);
    v7 = v107;
    v6 = v7 >> 64;
    v5 = (_QWORD *)v7;
    if (*((_QWORD *)&v107 + 1) == *(_QWORD *)v107)
      v6 = *(_QWORD *)(v107 - 8) + 3944;
    v8 = *(_OWORD *)(v6 - 232);
    v9 = *(_OWORD *)(v6 - 200);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v6 - 216);
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 144) = v8;
    v10 = *(_OWORD *)(v6 - 184);
    v11 = *(_OWORD *)(v6 - 168);
    v12 = *(_OWORD *)(v6 - 136);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v6 - 152);
    *(_OWORD *)(a1 + 240) = v12;
    *(_OWORD *)(a1 + 192) = v10;
    *(_OWORD *)(a1 + 208) = v11;
    v13 = *(_OWORD *)(v6 - 120);
    v14 = *(_OWORD *)(v6 - 104);
    v15 = *(_OWORD *)(v6 - 72);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(v6 - 88);
    *(_OWORD *)(a1 + 304) = v15;
    *(_OWORD *)(a1 + 256) = v13;
    *(_OWORD *)(a1 + 272) = v14;
    v16 = *(_OWORD *)(v6 - 56);
    v17 = *(_OWORD *)(v6 - 40);
    v18 = *(_OWORD *)(v6 - 24);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(v6 - 8);
    *(_OWORD *)(a1 + 336) = v17;
    *(_OWORD *)(a1 + 352) = v18;
    *(_OWORD *)(a1 + 320) = v16;
    if (v4 == *v5)
    {
      v21 = *--v5;
      v19 = *(double *)(v21 + 3712);
      *(_QWORD *)&v107 = v5;
      v4 = *v5 + 3944;
    }
    else
    {
      v19 = *(double *)(v4 - 232);
    }
    *(double *)(a1 + 120) = v19;
    *(double *)(a1 + 128) = v19;
    v22 = v4 - 232;
    *((_QWORD *)&v107 + 1) = v22;
    if (v22 == *((_QWORD *)&v105 + 1))
    {
      v20 = v19;
    }
    else
    {
      if (v22 == *v5)
        v22 = *(v5 - 1) + 3944;
      v20 = *(double *)(v22 - 232);
      *(double *)(a1 + 120) = v20;
    }
  }
  else
  {
    v20 = *(double *)(a1 + 120);
    v19 = *(double *)(a1 + 128);
  }
  if (v19 - v20 < 0.1)
  {
    v23 = -2.56;
LABEL_22:
    v20 = v19 + v23;
    *(double *)(a1 + 120) = v20;
    goto LABEL_23;
  }
  if (v19 - v20 > 10.24)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v24 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(double *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 128);
      *(_DWORD *)buf = 134218240;
      v119 = v25;
      v120 = 2048;
      v121 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "ModelInput, Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021499D0);
      v96 = *(double *)(a1 + 120);
      v97 = *(_QWORD *)(a1 + 128);
      v108 = 134218240;
      v109 = v96;
      v110 = 2048;
      v111 = v97;
      LODWORD(v99) = 22;
      v98 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ModelInput, Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)", COERCE_DOUBLE(&v108), v99);
      sub_100512490("Generic", 1, 0, 2, "void CLNatalieModelInput::setTime(CFAbsoluteTime)", "%s\n", v98);
      if (v98 != (char *)buf)
        free(v98);
    }
    v19 = *(double *)(a1 + 128);
    v23 = -10.24;
    goto LABEL_22;
  }
LABEL_23:
  *(double *)(a1 + 136) = v19 - v20;
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  if ((*(unsigned int (**)(_QWORD, __int128 *, __int128 *, double))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v102, &v100, a2))
  {
    v27 = *((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1) != *((_QWORD *)&v101 + 1))
    {
      v28 = (uint64_t *)v103;
      v29 = *(_QWORD *)v103;
      v30 = *(_QWORD *)v103;
      v32 = *((_QWORD *)&v103 + 1);
      v31 = (uint64_t *)v103;
      while (1)
      {
        v33 = *((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1) == v29)
          v33 = *(_QWORD *)(v103 - 8) + 4048;
        v34 = v32;
        if (v32 == v30)
          v34 = *(v31 - 1) + 4048;
        if (*(double *)(v33 - 168) - *(double *)(v34 - 168) > 0.0)
        {
          v35 = *((_QWORD *)&v103 + 1);
          if (*((_QWORD *)&v103 + 1) == v29)
            v35 = *(_QWORD *)(v103 - 8) + 4048;
          v36 = v32;
          if (v32 == v30)
            v36 = *(v31 - 1) + 4048;
          if (*(double *)(v35 - 168) - *(double *)(v36 - 168) < 60.0)
          {
            v37 = *((_QWORD *)&v103 + 1);
            if (*((_QWORD *)&v103 + 1) == v29)
              v37 = *(_QWORD *)(v103 - 8) + 4048;
            v38 = v32;
            if (v32 == v30)
              v38 = *(v31 - 1) + 4048;
            if (*(double *)(v37 - 168) - *(double *)(v38 - 168) > *(double *)(a1 + 128) - *(double *)(a1 + 120) + -1.0)
              break;
          }
        }
        if (v32 == v30)
        {
          v39 = *--v31;
          v30 = v39;
          v32 = v39 + 4048;
        }
        v32 -= 176;
        if (v32 == *((_QWORD *)&v101 + 1))
          goto LABEL_93;
      }
      if (*((_QWORD *)&v103 + 1) == v29)
      {
        v44 = *(_QWORD **)(v103 - 8);
        v40 = v44 + 484;
        v41 = v44 + 485;
        v42 = v44 + 486;
        v43 = v44 + 506;
      }
      else
      {
        v40 = (_QWORD *)(*((_QWORD *)&v103 + 1) - 176);
        v41 = (uint64_t *)(*((_QWORD *)&v103 + 1) - 168);
        v42 = (uint64_t *)(*((_QWORD *)&v103 + 1) - 160);
        v43 = (_QWORD *)*((_QWORD *)&v103 + 1);
      }
      v45 = *v42;
      v46 = *v41;
      *(_QWORD *)(a1 + 376) = *v40;
      *(_QWORD *)(a1 + 384) = v46;
      *(_QWORD *)(a1 + 392) = v45;
      v47 = v32;
      if (v32 == v30)
        v47 = *(v31 - 1) + 4048;
      *(_DWORD *)(a1 + 400) = *((_DWORD *)v43 - 38) - *(_DWORD *)(v47 - 152);
      v48 = v27;
      if (v27 == v29)
        v48 = *(v28 - 1) + 4048;
      v49 = *(double *)(v48 - 144);
      v50 = v32;
      if (v32 == v30)
        v50 = *(v31 - 1) + 4048;
      *(double *)(a1 + 408) = v49 - *(double *)(v50 - 144);
      v51 = v27;
      if (v27 == v29)
        v51 = *(v28 - 1) + 4048;
      v52 = *(double *)(v51 - 136);
      v53 = v32;
      if (v32 == v30)
        v53 = *(v31 - 1) + 4048;
      *(double *)(a1 + 416) = v52 - *(double *)(v53 - 136);
      v54 = v27;
      if (v27 == v29)
        v54 = *(v28 - 1) + 4048;
      v55 = *(_DWORD *)(v54 - 112);
      v56 = v32;
      if (v32 == v30)
        v56 = *(v31 - 1) + 4048;
      *(_DWORD *)(a1 + 440) = v55 - *(_DWORD *)(v56 - 112);
      v57 = v27;
      if (v27 == v29)
        v57 = *(v28 - 1) + 4048;
      v58 = *(_DWORD *)(v57 - 108);
      v59 = v32;
      if (v32 == v30)
        v59 = *(v31 - 1) + 4048;
      *(_DWORD *)(a1 + 444) = v58 - *(_DWORD *)(v59 - 108);
      if (v27 == v29)
      {
        v63 = *(v28 - 1);
        v60 = (_QWORD *)(v63 + 3944);
        v61 = (uint64_t *)(v63 + 3952);
        v62 = v63 + 4048;
      }
      else
      {
        v60 = (_QWORD *)(v27 - 104);
        v61 = (uint64_t *)(v27 - 96);
        v62 = v27;
      }
      v64 = *v61;
      *(_QWORD *)(a1 + 448) = *v60;
      *(_QWORD *)(a1 + 456) = v64;
      v65 = v32;
      if (v32 == v30)
        v65 = *(v31 - 1) + 4048;
      *(double *)(a1 + 464) = *(double *)(v62 - 88) - *(double *)(v65 - 88);
      *(_DWORD *)(a1 + 472) = -1;
      *(_QWORD *)(a1 + 480) = 0;
      if (v27 == *v28)
      {
        v68 = *(v28 - 1);
        v66 = (_BYTE *)(v68 + 3984);
        v67 = v68 + 4048;
      }
      else
      {
        v66 = (_BYTE *)(v27 - 64);
        v67 = v27;
      }
      *(_BYTE *)(a1 + 488) = *v66;
      *(_BYTE *)(a1 + 489) = *(_BYTE *)(v67 - 63);
      *(_QWORD *)(a1 + 504) = 0;
      *(_QWORD *)(a1 + 512) = 0;
      *(_QWORD *)(a1 + 496) = 0;
      v69 = *v28;
      v70 = v27;
      if (v27 == *v28)
        v70 = *(v28 - 1) + 4048;
      v71 = *(_DWORD *)(v70 - 32);
      v72 = *v31;
      v73 = v32;
      if (v32 == *v31)
        v73 = *(v31 - 1) + 4048;
      *(_DWORD *)(a1 + 520) = v71 - *(_DWORD *)(v73 - 32);
      if (v27 == v69)
      {
        v77 = *(v28 - 1);
        v74 = (_DWORD *)(v77 + 4020);
        v75 = (char *)(v77 + 4024);
        v76 = v77 + 4048;
      }
      else
      {
        v74 = (_DWORD *)(v27 - 28);
        v75 = (char *)(v27 - 24);
        v76 = v27;
      }
      v78 = *v75;
      *(_DWORD *)(a1 + 524) = *v74;
      *(_BYTE *)(a1 + 528) = v78;
      v79 = v32;
      if (v32 == v72)
        v79 = *(v31 - 1) + 4048;
      *(double *)(a1 + 136) = *(double *)(v76 - 168) - *(double *)(v79 - 168);
      v80 = v27;
      if (v27 == v69)
        v80 = *(v28 - 1) + 4048;
      *(_QWORD *)(a1 + 1344) = *(_QWORD *)(v80 - 168);
      v81 = v32;
      if (v32 == v72)
        v81 = *(v31 - 1) + 4048;
      *(_QWORD *)(a1 + 1336) = *(_QWORD *)(v81 - 168);
      if (v27 == v69)
      {
        v83 = *(v28 - 1);
        v82 = (_BYTE *)(v83 + 4038);
        v27 = v83 + 4048;
      }
      else
      {
        v82 = (_BYTE *)(v27 - 10);
      }
      *(_BYTE *)(a1 + 542) = *v82;
      v84 = *(_DWORD *)(v27 - 32);
      if (v32 == v72)
        v32 = *(v31 - 1) + 4048;
      *(_DWORD *)(a1 + 520) = v84 - *(_DWORD *)(v32 - 32);
    }
  }
LABEL_93:
  if (*(double *)(a1 + 136) < 0.1)
    *(_QWORD *)(a1 + 136) = 0x3FF0000000000000;
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1 + 552, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), a1 + 1304, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a1 + 808, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a1 + 1024, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), a1 + 872, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a1 + 616, a2);
  if (*(double *)(a1 + 616) > 0.0)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_1021499D0);
    v85 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v86 = *(_QWORD *)(a1 + 616);
      v87 = *(_QWORD *)(a1 + 624);
      v88 = *(_QWORD *)(a1 + 648);
      v89 = *(_QWORD *)(a1 + 640);
      *(_DWORD *)buf = 134219008;
      v119 = a2;
      v120 = 2048;
      v121 = v86;
      v122 = 2048;
      v123 = v87;
      v124 = 2048;
      v125 = v88;
      v126 = 2048;
      v127 = v89;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_1021499D0);
      v91 = *(_QWORD *)(a1 + 616);
      v92 = *(_QWORD *)(a1 + 624);
      v93 = *(_QWORD *)(a1 + 648);
      v94 = *(_QWORD *)(a1 + 640);
      v108 = 134219008;
      v109 = a2;
      v110 = 2048;
      v111 = v91;
      v112 = 2048;
      v113 = v92;
      v114 = 2048;
      v115 = v93;
      v116 = 2048;
      v117 = v94;
      LODWORD(v99) = 52;
      v95 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f", COERCE_DOUBLE(&v108), v99, *(double *)&v100, *((double *)&v100 + 1), *(double *)&v101);
      sub_100512490("Generic", 1, 0, 2, "void CLNatalieModelInput::setTime(CFAbsoluteTime)", "%s\n", v95);
      if (v95 != (char *)buf)
        free(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a1 + 1040, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a1 + 1224, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a1 + 1208, a2);
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), a1 + 1248, a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), a1 + 1280, a2);
}

double sub_10023773C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  double v9;
  double result;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  int v18;
  __int128 v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10214B3B0);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 400);
    v6 = *(_QWORD *)(a1 + 408);
    v7 = *(_DWORD *)(a1 + 152);
    v8 = *(_DWORD *)(a1 + 320);
    v9 = *(float *)(a1 + 296);
    *(_DWORD *)buf = 67110144;
    v25 = v5;
    v26 = 2048;
    v27 = v6;
    v28 = 1024;
    v29 = v7;
    v30 = 1024;
    v31 = v8;
    v32 = 2048;
    v33 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Dummy, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10214B3B0);
    v11 = *(_QWORD *)(a1 + 408);
    v12 = *(_DWORD *)(a1 + 152);
    v13 = *(_DWORD *)(a1 + 320);
    v14 = *(float *)(a1 + 296);
    LOWORD(v19) = 2048;
    *(_QWORD *)((char *)&v19 + 2) = v11;
    WORD5(v19) = 1024;
    HIDWORD(v19) = v12;
    v20 = 1024;
    v21 = v13;
    v22 = 2048;
    v23 = v14;
    LODWORD(v17) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Dummy, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f", &v18, v17, 67110144, (_DWORD)v19, *((double *)&v19 + 1));
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieDummyModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 32) = 3;
  return result;
}

float sub_10023797C(float *a1, uint64_t a2)
{
  float *v3;
  float v4;
  float v5;
  unsigned int v6;
  float v7;
  char isTypeStatic;
  float v9;

  v3 = (float *)((char *)&unk_101C2E348 + 20 * *(unsigned int *)a1);
  v4 = a1[5];
  if (v4 >= 18.0)
    v5 = (float)((float)((float)(*v3 + (float)((float)(v3[2] * a1[2]) * 100.0)) + (float)(v3[1] * a1[3]))
               + (float)(v3[3] * v4))
       / (float)(a1[3] * 24.0);
  else
    v5 = (float)((float)((float)((float)(*v3 + (float)((float)(v3[2] * a1[2]) * 100.0)) + (float)(v3[1] * a1[3]))
                       + (float)(v3[3] * v4))
               / (float)(a1[3] * 24.0))
       + 0.001;
  v6 = *((_DWORD *)a1 + 10);
  sub_100197040();
  if (sub_100195F08() && v6)
  {
    v7 = fminf(v5, 1.0);
    if ((_DWORD)a2)
    {
      isTypeStatic = CLMotionActivity::isTypeStatic(a2);
      v9 = fmaxf(v7, 1.0);
      if ((isTypeStatic & 1) == 0)
        return v9;
    }
  }
  else
  {
    v7 = fminf(v5, 2.1);
    if ((_DWORD)a2 && (CLMotionActivity::isTypeStatic(a2) & 1) == 0)
      return fmaxf(v7, 1.3);
  }
  return v7;
}

void sub_100237A64(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  char v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  char v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  _DWORD v28[2];
  __int16 v29;
  int v30;
  __int16 v31;
  char v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  uint8_t buf[4];
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  char v54;
  __int16 v55;
  int v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_10219ACE8);
  v3 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a2 + 1);
    v5 = *(unsigned __int8 *)(a2 + 2);
    v6 = *(_BYTE *)(a2 + 3);
    v7 = *(unsigned __int16 *)(a2 + 4);
    v8 = *(float *)(a2 + 32);
    v9 = *(float *)(a2 + 8);
    v10 = *(float *)(a2 + 12);
    v11 = *(float *)(a2 + 16);
    v12 = *(float *)(a2 + 20);
    v13 = *(float *)(a2 + 24);
    v14 = *(float *)(a2 + 28);
    *(_DWORD *)buf = 67242752;
    v50 = v4;
    v51 = 1026;
    v52 = v5;
    v53 = 258;
    v54 = v6;
    v55 = 1026;
    v56 = v7;
    v57 = 2050;
    v58 = v8;
    v59 = 2050;
    v60 = v9;
    v61 = 2050;
    v62 = v10;
    v63 = 2050;
    v64 = v11;
    v65 = 2050;
    v66 = v12;
    v67 = 2050;
    v68 = v13;
    v69 = 2050;
    v70 = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabled,%{public}d,Proactive,%{public}u,EndCondition,%{public}hhu,SampleInterval,%{public}d,Temperature,%{public}f,DynamicBias.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e,Covariance.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e", buf, 0x5Du);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_10219ACE8);
    v15 = *(unsigned __int8 *)(a2 + 1);
    v16 = *(unsigned __int8 *)(a2 + 2);
    v17 = *(_BYTE *)(a2 + 3);
    v18 = *(unsigned __int16 *)(a2 + 4);
    v19 = *(float *)(a2 + 32);
    v20 = *(float *)(a2 + 8);
    v21 = *(float *)(a2 + 12);
    v22 = *(float *)(a2 + 16);
    v23 = *(float *)(a2 + 20);
    v24 = *(float *)(a2 + 24);
    v25 = *(float *)(a2 + 28);
    v28[0] = 67242752;
    v28[1] = v15;
    v29 = 1026;
    v30 = v16;
    v31 = 258;
    v32 = v17;
    v33 = 1026;
    v34 = v18;
    v35 = 2050;
    v36 = v19;
    v37 = 2050;
    v38 = v20;
    v39 = 2050;
    v40 = v21;
    v41 = 2050;
    v42 = v22;
    v43 = 2050;
    v44 = v23;
    v45 = 2050;
    v46 = v24;
    v47 = 2050;
    v48 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Enabled,%{public}d,Proactive,%{public}u,EndCondition,%{public}hhu,SampleInterval,%{public}d,Temperature,%{public}f,DynamicBias.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e,Covariance.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e", v28, 93);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitGyroBiasData(const CMMotionCoprocessorReply::GyroBiasData *)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
}

void sub_100237D40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 1256);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)a2[1];
    v9 = *a2;
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_100237DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100237DE0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_DWORD *)(a1 + 436) & 0xFFFFFFFE) == 2)
    return 0;
  result = sub_10022D2A8(a1, a2);
  if ((_DWORD)result)
  {
    sub_101134428((_QWORD *)a1, a2, 0);
    return 1;
  }
  return result;
}

void sub_100237E34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  void **v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  void **v17;
  void *v18[2];
  char v19;
  void *__p;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void **v24;

  ++*(_DWORD *)(a1 + 360);
  switch(a3)
  {
    case 4:
      v8 = qword_102301CC8;
      v9 = qword_102301CD0;
      while (v8 != v9)
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48), v8);
        v8 += 24;
      }
      if (*(_DWORD *)(a4 + 188) != 1)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
        v15 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        {
          __p = (void *)68289026;
          v21 = 2082;
          v22 = "";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location services disabled, clearing all local cache\"}", (uint8_t *)&__p, 0x12u);
        }
        sub_100591838(a1);
      }
      break;
    case 2:
      if (!*(_BYTE *)(a4 + 97))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        return;
      }
      sub_1001A885C(a4, (uint64_t)v18);
      if (sub_100304CA0(qword_102301CC8, qword_102301CD0, (unsigned __int8 **)v18) == qword_102301CD0)
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021459F8);
        v16 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v17 = v18;
          if (v19 < 0)
            v17 = (void **)v18[0];
          __p = (void *)68289282;
          v21 = 2082;
          v22 = "";
          v23 = 2082;
          v24 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onManagerNotification: auth changed received for SS not used in harvesting. skip auth caching.\", \"SystemService\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        }
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 48);
        sub_1001A885C(a4, (uint64_t)&__p);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 56))(v10, &__p);
        if (SBYTE3(v24) < 0)
          operator delete(__p);
      }
      if (v19 < 0)
      {
        v14 = v18[0];
        goto LABEL_38;
      }
      break;
    case 0:
      v6 = qword_102301CC8;
      v7 = qword_102301CD0;
      while (v6 != v7)
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48), v6);
        v6 += 24;
      }
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
      {
        __p = (void *)68289026;
        v21 = 2082;
        v22 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location services reset, clearing all local cache\"}", (uint8_t *)&__p, 0x12u);
      }
      v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "vendor", sub_100591838(a1)), "proxyForService:", CFSTR("CLClientManager"));
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 48) + 416))(&__p);
      v13 = SBYTE3(v24) >= 0 ? &__p : (void **)__p;
      objc_msgSend(v12, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
      if (SBYTE3(v24) < 0)
      {
        v14 = __p;
LABEL_38:
        operator delete(v14);
      }
      break;
  }
}

void sub_100238208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100238258()
{
  if (qword_10230D438 != -1)
    dispatch_once(&qword_10230D438, &stru_1021A75E8);
  return qword_102311CF0;
}

uint64_t sub_100238298(uint64_t result)
{
  if (!*(_BYTE *)(result + 1065))
  {
    if (!*(_BYTE *)(result + 1024))
      sub_1019456B4();
    if (!*(_QWORD *)(result + 1032))
      operator new();
  }
  return result;
}

void sub_1002383E4(uint64_t a1, ...)
{
  _QWORD *v1;
  va_list v2;
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list v9;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, va_list);
  v3 = v9;
  if (v9 == v2)
  {
    v4 = 4;
    va_copy(v3, va);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  sub_101945840(v1, (uint64_t *)va1);
  operator delete();
}

void sub_100238444(uint64_t a1)
{
  sub_10000A110(a1);
  operator delete();
}

BOOL sub_100238468(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  NSObject *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  NSObject *v15;
  _BOOL8 result;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  int v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  if (*a1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350080;
      v35 = a5;
      v36 = 2050;
      v37 = a6;
      v38 = 2050;
      v39 = a2;
      v40 = 2050;
      v41 = a3;
      v42 = 2050;
      v43 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = 134350080;
      v25 = a5;
      v26 = 2050;
      v27 = a6;
      v28 = 2050;
      v29 = a2;
      v30 = 2050;
      v31 = a3;
      v32 = 2050;
      v33 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", &v24, 52);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssSensorAdapter<CLAccelerometer, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_22;
  v12 = (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v13 = ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a5 >= 0.0)
  {
    v13 = 0;
    v12 = 0;
  }
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v12 = 1;
  v14 = (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v12;
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v14 = 1;
  if (a6 > a5 || ((v14 | v13) & 1) != 0 || a6 <= 0.0)
  {
LABEL_22:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v35 = a5;
      v36 = 2050;
      v37 = a6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v24 = 134349312;
      v25 = a5;
      v26 = 2050;
      v27 = a6;
      LODWORD(v23) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", &v24, v23);
      v19 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLAccelerometer, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v20);
      goto LABEL_39;
    }
  }
  else
  {
    if (sub_10024095C())
      operator new();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor controller", buf, 2u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      LOWORD(v24) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Could not get the sensor controller", &v24, v23);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLAccelerometer, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v18);
LABEL_39:
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

void sub_1002389FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_100238A38(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    ((void (*)(uint64_t))a1[1])(v1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "GNSS_SEN,Tried stopping when not running", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Tried stopping when not running", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssSensorAdapter<CLAccelerometer, 0>::stop() [SensorType = CLAccelerometer, notification = 0]", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_100238BDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100238BE8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a1)
  {
    v2 = sub_10024095C();
    if (v2)
    {
      sub_1000A4A6C(v2, 0, a1);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor to deregister from", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Could not get the sensor to deregister from", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLAccelerometer, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_SEN,Invalid dispatcher passed to Deleter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "GNSS_SEN,Invalid dispatcher passed to Deleter", v9, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLAccelerometer, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100238ED4(_QWORD *a1)
{
  sub_10000E8B0(a1);
  operator delete();
}

void sub_100238EF8(uint64_t a1)
{
  sub_10000ACF0(a1);
  operator delete();
}

void sub_100238F1C(uint64_t a1)
{
  sub_10000B1E8(a1);
  operator delete();
}

void sub_100238F40(uint64_t a1, int a2)
{
  sub_10022438C(*(_QWORD *)(a1 + 1432), a2);
}

uint64_t sub_100238F48(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1336) = a2;
  return result;
}

id *sub_100238F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  _BYTE v20[12];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  _BYTE buf[18];
  __int16 v28;
  const char *v29;

  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1757;
      v28 = 2080;
      v29 = "location.horizontalAccuracy > 0.0";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v21 = 136315650;
      v22 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm";
      v23 = 1024;
      v24 = 1757;
      v25 = 2080;
      v26 = "location.horizontalAccuracy > 0.0";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v21, 28, *(const char **)v20);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 0, "void CLWifiTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    sub_100512450();
  }
  sub_100131938(&v21, (uint64_t)"CLWifiTilesManager::updateTileLocationRelevancy", 0);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if (*(_BYTE *)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
    if (*(double *)(a2 + 20) >= 0.0 && vabdd_f64(v5, *(double *)(a2 + 76)) <= 3600.0)
    {
      sub_10002ADEC(*(_QWORD *)(a1 + 480), a2, (uint64_t)*(double *)&qword_1022FDCC8, (char **)buf, v5);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: location not relevant", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        *(_WORD *)v20 = 0;
        LODWORD(v19) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: location not relevant", v20, v19);
        v8 = (char *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)", "%s\n", v7);
LABEL_25:
        if (v8 != buf)
          free(v8);
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v10 = v4 + 8;
      if (*(char *)(v4 + 31) < 0)
        v10 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WIFITILE: tiles, %s, not active", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v13 = *(_QWORD *)(v4 + 8);
      v12 = v4 + 8;
      v11 = v13;
      if (*(char *)(v12 + 23) >= 0)
        v11 = v12;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)&v20[4] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "WIFITILE: tiles, %s, not active", v20);
      v8 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)", "%s\n", v14);
      goto LABEL_25;
    }
  }
  return sub_100131740((id *)&v21);
}

void sub_100239494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_1002394C4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  std::string __p;
  __int16 v11;
  char v12;
  unint64_t v13;
  int v14;
  CFAbsoluteTime Current;
  __int16 v16;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if ((*(_DWORD *)(v6 + 148) & 0x80000000) == 0)
  {
    v7 = v6;
    v11 = 0;
    v13 = 0xBFF0000000000000;
    Current = CFAbsoluteTimeGetCurrent();
    v16 = 1;
    v12 = 0;
    v14 = *(_DWORD *)(v7 + 148);
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
    v8 = *(double *)(a2 + 4);
    v9 = *(double *)(a2 + 12);
    sub_1015A2E04(&__p, "");
    sub_100096CB4(a1, v7, &__p, (uint64_t)&v11, v8, v9, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100239594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002395B0(uint64_t a1)
{
  sub_100006C24(a1);
  operator delete();
}

uint64_t sub_1002395D4(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102146100);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLTelephonyService, Refresh Cell Monitor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLTelephonyService, Refresh Cell Monitor", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::refreshCellMonitor()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_10023138C(a1 + 176, 255);
  return 1;
}

uint64_t sub_100239774(uint64_t **a1, uint64_t a2, int *a3)
{
  int v4;
  uint64_t v6;

  v4 = a2;
  v6 = ((uint64_t (*)(uint64_t **, uint64_t, int *, void *))(*a1)[12])(a1, a2, a3, &unk_1022A25B0);
  sub_100081FA4(a1, v4, a3, 1);
  ((void (*)(uint64_t **))(*a1)[29])(a1);
  return v6;
}

uint64_t *sub_1002397E0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t *sub_1002397F4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_10050F530((uint64_t)a1, v2);
  return a1;
}

void sub_100239828()
{
  operator new();
}

void sub_100239878(uint64_t a1)
{
  sub_10008EA5C(a1, (uint64_t *)(a1 + 64));
}

uint64_t sub_100239880(uint64_t a1, double *a2)
{
  return sub_10018D154(a1, a2, (uint64_t *)(a1 + 64));
}

void sub_100239888()
{
  operator new();
}

void sub_100239934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100239970(uint64_t a1)
{
  sub_10001D9F4(a1);
  operator delete();
}

uint64_t sub_100239994(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  char *v12;
  int v13;
  double v14;
  uint8_t buf[4];
  double v16;

  *(_QWORD *)a1 = off_1021CD4D8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = 0;
  if ((*(_QWORD *)(a2 + 88) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(_BYTE *)(a1 + 16) = 1;
    sub_100239D2C(a1);
  }
  else
  {
    v3 = *(double *)(a2 + 72);
    v4 = sub_1001FCBB4();
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v5 + 84))
    {
      v6 = *(double *)(*(_QWORD *)(a1 + 8) + 88) - sub_1001FCBB4();
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v7 = v6 + 10.0;
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#tt,fContinuousPulsingModeOn,1,timeUntilNextInterval,%f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD660);
        v13 = 134217984;
        v14 = v7;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt,fContinuousPulsingModeOn,1,timeUntilNextInterval,%f", COERCE_DOUBLE(&v13));
        sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::IdleState::IdleState(CLGnssTimeTransfer &)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
    }
    else
    {
      v7 = v3 - (v4 - *(double *)(v5 + 88));
    }
    if (v7 >= 1.0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 48), "setNextFireDelay:", v7);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay, %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CD660);
        v13 = 134217984;
        v14 = v7;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, timer setNextFireDelay, %f", COERCE_DOUBLE(&v13));
        sub_100512490("Generic", 1, 0, 2, "CLGnssTimeTransfer::IdleState::IdleState(CLGnssTimeTransfer &)", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 16) = 1;
      sub_100239D2C(a1);
    }
  }
  return a1;
}

void sub_100239D2C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  double v9;
  __int16 v10;
  int v11;
  uint8_t buf[4];
  double v13;
  __int16 v14;
  int v15;

  sub_10023A0A0(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 84))
    v3 = 3.0;
  else
    v3 = 30.0;
  objc_msgSend(*(id *)(v2 + 48), "setNextFireDelay:", v3);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 84);
    *(_DWORD *)buf = 134218240;
    v13 = v3;
    v14 = 1024;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt, timer setNextFireDelay,%f,continuousMode,%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 84);
    v8 = 134218240;
    v9 = v3;
    v10 = 1024;
    v11 = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#tt, timer setNextFireDelay,%f,continuousMode,%d", COERCE_DOUBLE(&v8), 18);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssTimeTransfer::IdleState::enableTT()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
}

_UNKNOWN **sub_100239F30(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v5;
    v12 = 1026;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, state event\", \"state\":%{public, location:escape_only}s, \"enabled\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  if (a2 && *(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 17))
  else
    return *(_UNKNOWN ***)(***(_QWORD ***)(a1 + 8) - 8);
}

BOOL sub_10023A068(_BYTE *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  a1[84] = a2;
  v2 = *(_QWORD *)a1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 24))(*(_QWORD *)a1);
  return sub_10002A7F0(*(_QWORD **)(v2 + 8), v3);
}

void sub_10023A0A0(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020EB7C;
  block[3] = &unk_10212ECA0;
  block[4] = a1;
  dispatch_async(v2, block);
}

_UNKNOWN **sub_10023A108(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#tt, start event\", \"state\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  v4 = a1[1];
  *(_QWORD *)(v4 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(v4 + 80) = 0;
}

void sub_10023A210(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssInterference,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssInterference,start", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssInterference::start()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_10023A3A8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssInterference,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD1C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssInterference,stop", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssInterference::stop()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_BYTE *)(a1 + 16) = 0;
}

float sub_10023A53C(uint64_t a1, float *a2)
{
  float result;

  result = *(float *)(a1 + 20);
  *a2 = result;
  return result;
}

float sub_10023A548(uint64_t a1, float *a2)
{
  float result;

  result = *(float *)(a1 + 24);
  *a2 = result;
  return result;
}

void sub_10023A554(uint64_t a1, uint8_t a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 1496);
  if (v2)
  {
    buf[0] = a2;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 48))(v2, buf);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFA30);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,Time transfer state callback is not set.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CFA30);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#tt,Time transfer state callback is not set.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDeviceFacade::notifyClientTimeTransferState(BOOL)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_10023A6F8(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 1280);
  if ((v1 & 0x20) != 0 || !*(_BYTE *)(result + 1288))
    v2 = v1 | 0x20;
  else
    v2 = v1 & 0xFFFFFFDF;
  *(_DWORD *)(result + 1284) = v2;
  return result;
}

_QWORD *sub_10023A71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10021018C((_QWORD *)(a1 + 1472), a2);
  return sub_100210224((_QWORD *)(a1 + 1504), a3);
}

void sub_10023A74C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t v6;
  uint64_t v7;
  _WORD v8[8];
  _OWORD v9[2];
  uint64_t v10;
  uint8_t buf[16];
  __int128 v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 1560))
  {
    if ((*(_BYTE *)(a2 + 224) & 0x20) != 0)
    {
      v13 = 0;
      *(_OWORD *)buf = 0u;
      v12 = 0u;
      v6 = *(_QWORD *)(a2 + 40);
      if (!v6)
        v6 = *(_QWORD *)(qword_102311908 + 40);
      sub_100244514(v6, (double *)buf);
      v9[0] = *(_OWORD *)buf;
      v9[1] = v12;
      v10 = v13;
      v7 = *(_QWORD *)(a1 + 1560);
      if (!v7)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 48))(v7, v9);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v2 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,Indication missing power measurement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,Indication missing power measurement", v8, 2);
        v4 = (uint8_t *)v3;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePowerMeasurementIndication(const proto::gpsd::Indication &)", "%s\n", v3);
        if (v4 != buf)
          free(v4);
      }
    }
  }
}

void sub_10023A93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  _BYTE v11[24];
  _BYTE *v12;

  sub_100270E34((uint64_t)v11, a2);
  sub_100270E34((uint64_t)v9, a3);
  sub_10023A71C(a1, (uint64_t)v11, (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  sub_10023A554(a1, 1u);
}

void sub_10023AA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023AA98(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _DWORD v16[4];
  uint8_t buf[8];
  std::__shared_weak_count *v18;

  v1 = result;
  if (*(_BYTE *)(result + 1664))
  {
    sub_1000FF154(result + 2576);
    v2 = sub_100103BB0(24);
    if ((v2 & 1) == 0)
      sub_10180AC90(v2, v3, v4);
    v5 = *(_DWORD *)(v1 + 2972);
    *(_DWORD *)(v1 + 2596) = 24;
    *(_DWORD *)(v1 + 2972) = v5 | 0x200004;
    v6 = *(_QWORD *)(v1 + 2744);
    if (!v6)
      operator new();
    *(_DWORD *)(v6 + 20) |= 1u;
    *(_BYTE *)(v6 + 8) = 1;
    sub_1001E4804(buf);
    v16[0] = 0;
    if (sub_1001E4B84(*(uint64_t *)buf, "GpsSimulatorTestModeDefaultWeek", v16))
      v7 = v16[0];
    else
      v7 = 2049;
    v8 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,setConfigSimulatorMode,week,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v16[0] = 67240192;
      v16[1] = v7;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#Warning,setConfigSimulatorMode,week,%{public}d", v16, 8);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStartConfig()", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    *(_DWORD *)(v6 + 20) |= 2u;
    *(_DWORD *)(v6 + 12) = v7;
    result = sub_1000FF8D8(v1 + 2176, 2);
  }
  if (*(_BYTE *)(v1 + 1706))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsd,preStartConfig,resending airborne", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v16[0]) = 0;
      LODWORD(v15) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,preStartConfig,resending airborne", v16, v15);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStartConfig()", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 272))(v1, 1);
  }
  return result;
}

void sub_10023AE94()
{
  operator delete();
}

uint64_t sub_10023AED0(uint64_t result)
{
  _BYTE *v1;
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 1706))
  {
    v1 = (_BYTE *)result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,preStopConfig,stopping airborne", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v4[0] = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,preStopConfig,stopping airborne", v4, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStopConfig()", "%s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
    result = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v1 + 272))(v1, 0);
    v1[1706] = 1;
  }
  return result;
}

void sub_10023B084(uint64_t a1, double *a2, double a3)
{
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;

  if (*(_BYTE *)(a1 + 234) || !*(_BYTE *)(a1 + 232))
  {
    sub_100231BE8(a1 + 168);
  }
  else
  {
    sub_1012A23D8(a1 + 168, (uint64_t)a2, a3);
    v6 = *a2;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v7 = vabdd_f64(a3, v6);
    v8 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
      *(_DWORD *)buf = 134283777;
      v22 = *(double *)&v9;
      v23 = 2049;
      v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fence: fLastScanResult, %{private}lu, age, %{private}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
      v17 = 134283777;
      v18 = *(double *)&v11;
      v19 = 2049;
      v20 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: fLastScanResult, %{private}lu, age, %{private}.1lf", &v17, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiScan(const CFAbsoluteTime, const CLWifiService_Type::ScanResult &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    if (v7 >= 120.0)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      v10 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283521;
        v22 = v7;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Fence: scan result is too old, request one more scan, age, %{private}.1lf ", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102183140);
        v17 = 134283521;
        v18 = v7;
        LODWORD(v16) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: scan result is too old, request one more scan, age, %{private}.1lf ", &v17, v16);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitorWifi::handleWifiScan(const CFAbsoluteTime, const CLWifiService_Type::ScanResult &)", "%s\n", v14);
        if (v15 != buf)
          free(v15);
      }
    }
    else if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    {
      *(double *)(a1 + 400) = a3;
    }
  }
}

uint64_t sub_10023B45C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *(void **)(a1 + 952);
  if (v2)
  {
    *(_QWORD *)(a1 + 960) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 928);
  if (v3)
  {
    *(_QWORD *)(a1 + 936) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 888);
  if (v4)
  {
    *(_QWORD *)(a1 + 896) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 864);
  if (v5)
  {
    *(_QWORD *)(a1 + 872) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(_QWORD *)(a1 + 488) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 456);
  if (v7)
  {
    *(_QWORD *)(a1 + 464) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 432);
  if (v8)
  {
    *(_QWORD *)(a1 + 440) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 408);
  if (v9)
  {
    *(_QWORD *)(a1 + 416) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 384);
  if (v10)
  {
    *(_QWORD *)(a1 + 392) = v10;
    operator delete(v10);
  }
  sub_100067A50(a1 + 344);
  sub_10007CDDC(a1 + 320, *(_QWORD **)(a1 + 328));
  sub_10007CDDC(a1 + 296, *(_QWORD **)(a1 + 304));
  v11 = *(void **)(a1 + 272);
  if (v11)
  {
    *(_QWORD *)(a1 + 280) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 248);
  if (v12)
  {
    *(_QWORD *)(a1 + 256) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 216);
  if (v13)
  {
    *(_QWORD *)(a1 + 224) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 192);
  if (v14)
  {
    *(_QWORD *)(a1 + 200) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 168);
  if (v15)
  {
    *(_QWORD *)(a1 + 176) = v15;
    operator delete(v15);
  }
  sub_100008848(a1 + 96, *(_QWORD **)(a1 + 104));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

id *sub_10023B598(const char *a1, uint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8[6];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;

  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v16 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLCellTilesManager.mm";
      v17 = 1024;
      v18 = 1582;
      v19 = 2080;
      v20 = "location.horizontalAccuracy > 0.0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v9 = 136315650;
      v10 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLCellTilesManager.mm";
      v11 = 1024;
      v12 = 1582;
      v13 = 2080;
      v14 = "location.horizontalAccuracy > 0.0";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v9, 28, v8[0]);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100512450();
  }
  v8[0] = (const char *)_NSConcreteStackBlock;
  v8[1] = (const char *)3221225472;
  v8[2] = (const char *)sub_100053A80;
  v8[3] = (const char *)&unk_102154608;
  v8[4] = a1;
  v8[5] = (const char *)a2;
  return sub_1000537FC((uint64_t)a1, (uint64_t)"updateTileLocationRelevancy", (uint64_t)v8);
}

void sub_10023B7F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  BOOL v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  if (*(_BYTE *)(a2 + 352) && CLMotionActivity::isTypeIndoorPedestrian(*(unsigned int *)(a2 + 152)))
  {
    v6 = *(double *)(a2 + 1040);
    v7 = *(double *)(a2 + 1104);
    v8 = v7 <= 0.447039278 || v7 > 7.14285711;
    v9 = v7 * 2.23693991;
    v10 = 0.0;
    if (v8)
      v11 = 0.0;
    else
      v11 = v9;
    v12 = *(double *)(a2 + 1192) * 2.23693991;
    v13 = 0.0;
    v14 = 0.0;
    if (v6 > 0.0)
    {
      if (v11 >= 1.0)
      {
        if ((float)((float)((float)((float)(v11 * -0.793) + (float)((float)(v11 * 0.3564) * v11)) + 3.142)
                   * *(float *)(a1 + 16)) <= 8.0)
          v15 = (float)((float)((float)(v11 * -0.793) + (float)((float)(v11 * 0.3564) * v11)) + 3.142)
              * *(float *)(a1 + 16);
        else
          v15 = 8.0;
        v10 = v15;
      }
      else
      {
        v15 = 2.1;
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      *(float *)(a3 + 20) = v15;
      *(_DWORD *)(a3 + 24) = 3;
      *(float *)(a3 + 28) = v10;
      *(_QWORD *)(a3 + 32) = 3;
      if (v12 > 0.0)
        v16 = 1;
      else
        v16 = 2;
      sub_10006011C(v16, v12, v11, 2.5);
      v18 = v15 * v17;
      if (v18 <= 20.0)
        v19 = v18;
      else
        v19 = 20.0;
      *(float *)(a3 + 20) = v19;
      sub_10006011C(v16, v12, v11, 2.5);
      v21 = v10 * v20;
      if (v21 > 20.0)
        v21 = 20.0;
      *(float *)(a3 + 28) = v21;
      v14 = v19;
      v13 = v21;
    }
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213CF70);
    v22 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(_QWORD *)(a2 + 112);
      *(_DWORD *)buf = 134219264;
      v41 = v23;
      v42 = 2048;
      v43 = v6;
      v44 = 2048;
      v45 = v11;
      v46 = 2048;
      v47 = v12;
      v48 = 2048;
      v49 = v14;
      v50 = 2048;
      v51 = v13;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Walk,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,userMets,%f,truthMets,%f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213CF70);
      v24 = *(_QWORD *)(a2 + 112);
      v28 = 134219264;
      v29 = v24;
      v30 = 2048;
      v31 = v6;
      v32 = 2048;
      v33 = v11;
      v34 = 2048;
      v35 = v12;
      v36 = 2048;
      v37 = v14;
      v38 = 2048;
      v39 = v13;
      LODWORD(v27) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Walk,fitness machine,computeTime,%.3f,startTime,%.3f,wr,%f,vertSpeed,%f,userMets,%f,truthMets,%f", COERCE_DOUBLE(&v28), v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieWalkModel::computeFitnessMachineMETS(const CLNatalieModelInput &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
}

void sub_10023BB98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10005F9C0(a2, *(unsigned __int8 *)(a1 + 9), a3, *(float *)(a1 + 16));
}

uint64_t sub_10023BBAC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = sub_10024095C();
    if (v2)
      sub_1000A4A6C(v2, 0, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t sub_10023BBF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = sub_1000A6A30();
    if (v2)
      sub_1000A4A6C(v2, 0, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t sub_10023BC34(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (result)
  {
    v1 = result;
    v2 = sub_1002433D4();
    if (v2)
    {
      v3 = v2;
      if ((sub_1001B7910() & 0x10) != 0)
      {
        v4 = 4;
        goto LABEL_8;
      }
      if ((sub_1001B7910() & 8) != 0)
      {
        v4 = 1;
LABEL_8:
        sub_1000A4A6C(v3, v4, v1);
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t sub_10023BC98(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = sub_1000824CC();
    if (v2)
      sub_1000A4A6C(v2, 0, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t sub_10023BCDC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = sub_10021C350();
    if (v2)
      sub_1000A4A6C(v2, 0, v1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t sub_10023BD20(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 264))
    sub_1001B7BB8();
  return a1 + 264;
}

void sub_10023BDA4(uint64_t a1)
{
  *(_BYTE *)(a1 + 306) = objc_msgSend((id)sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("includePrivateData")), "BOOLValue");
  sub_100052EC8(a1);
}

uint64_t sub_10023BDD8(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 256))
    sub_100C9AC14();
  return a1 + 256;
}

void sub_10023BE5C(_QWORD *a1, int a2)
{
  uint64_t v8;
  __int128 v9;
  __int16 v10;
  uint64_t v11;

  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  v10 = 0;
  v11 = 0;
  if (a2)
  {
    sub_10023BD20((uint64_t)a1);
    sub_1001B3AF0();
  }
  objc_msgSend((id)sub_1001FE40C(a1, (uint64_t)CFSTR("distanceThreshold")), "doubleValue");
  *((_QWORD *)&v9 + 1) = v8;
  sub_10023BDD8((uint64_t)a1);
  sub_1001B3AF0();
}

void sub_10023BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10023C004(uint64_t a1)
{
  sub_10002BEDC(a1);
  operator delete();
}

uint64_t sub_10023C028(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _QWORD v9[7];

  if (*a3 == 36)
  {
    v5 = result;
    if (*(_BYTE *)(result + 4663) || *(_QWORD *)(result + 4680))
    {
      sub_100166054(v9);
      sub_10010F434((uint64_t)v8);
      sub_100007540(v6, (uint64_t)v8, v7, a4, (uint64_t)v9);
      sub_1001668A0(v5, (uint64_t)v9, 0);
      return sub_100166004(v9);
    }
  }
  return result;
}

void sub_10023C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_10023C0C0(_QWORD *a1)
{
  *a1 = off_10217C480;
  operator delete();
}

uint64_t sub_10023C0E0(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  char v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint8_t *v18;
  int v19;
  _QWORD *v20;
  uint8_t buf[4];
  _QWORD *v22;
  __int16 v23;
  _QWORD *v24;

  if ((*(_DWORD *)(a1 + 28) - 1) >= 4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136315138;
      v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning data set %s is not changeable - not storing", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      v7 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v7 = (_QWORD *)*v7;
      v19 = 136315138;
      v20 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning data set %s is not changeable - not storing", (const char *)&v19);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::store()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
      return 0;
    }
    return result;
  }
  if (!*(_BYTE *)(a1 + 24))
    return 1;
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 95))
      goto LABEL_5;
LABEL_25:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136315138;
      v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Store %s is configured for in-memory mode - not storing and marking the store as unmodified", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_51;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "Store %s is configured for in-memory mode - not storing and marking the store as unmodified", &v19);
    goto LABEL_57;
  }
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_25;
LABEL_5:
  v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    v3 = (_QWORD *)(a1 + 96);
    if (v2 == 1)
    {
      if (*(char *)(a1 + 119) < 0)
        v3 = (_QWORD *)*v3;
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 832))(a1, v3, 1) & 1) == 0)
        return 0;
      goto LABEL_42;
    }
    if (*(char *)(a1 + 119) < 0)
      v3 = (_QWORD *)*v3;
    result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 832))(a1, v3, 2);
    if ((_DWORD)result)
    {
LABEL_42:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v16 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v16 = (_QWORD *)*v16;
        v17 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v17 = (_QWORD *)*v17;
        *(_DWORD *)buf = 136315394;
        v22 = v16;
        v23 = 2080;
        v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s stored to disk %s", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_51;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%s stored to disk %s", &v19, 22);
LABEL_57:
      v18 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::store()", "%s\n", v12);
      if (v18 != buf)
        free(v18);
LABEL_51:
      *(_BYTE *)(a1 + 24) = 0;
      return 1;
    }
  }
  else
  {
    v13 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 832))(a1, v13, 0);
    result = 0;
    if ((v14 & 1) != 0)
      goto LABEL_42;
  }
  return result;
}

void sub_10023C63C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  void **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = (void **)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 16);
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v12) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      sub_100259694();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v12) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_100357184(v4, v16);
    else
      v17 = 0;
    v18 = &v17[40 * v13];
    v19 = &v17[40 * v16];
    v20 = *a2;
    v21 = a2[1];
    *((_QWORD *)v18 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    v10 = v18 + 40;
    v23 = (char *)a1[3];
    v22 = (char *)a1[4];
    if (v22 != v23)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 40);
        v25 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      v22 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = (char *)(v7 + 40);
  }
  a1[4] = v10;
}

uint64_t sub_10023C76C(uint64_t result, int a2, int a3, double a4)
{
  *(_DWORD *)(result + 72) = a2;
  *(double *)(result + 80) = a4;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

BOOL sub_10023C77C(sqlite3_stmt *a1, int a2, int a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;

  v6 = sqlite3_bind_int(a1, a2, a3);
  v11 = v6;
  if (v6)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1025;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}u, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v9 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 1025;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private}u, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x38u);
    }
  }
  return v6 == 0;
}

BOOL sub_10023C9B0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = sqlite3_step(a2);
  v6 = v5;
  v7 = (_DWORD)v5 == 101;
  if ((_DWORD)v5 != 101)
  {
    sub_100635B40(v5, (uint64_t)"sqlite3_step()", v5, a2);
    sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v6);
  }
  v8 = sqlite3_reset(a2);
  v9 = v8;
  if ((_DWORD)v8)
  {
    sub_100635B40(v8, (uint64_t)"sqlite3_reset()", v8, a2);
    sub_1006361F0(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v9);
    v7 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v7;
}

void sub_10023CA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10023CAB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  _DWORD v57[3];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  _BYTE buf[32];
  __int128 v99;
  __int128 v100;
  _BYTE v101[32];
  _BYTE v102[32];
  uint64_t v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;

  *(_DWORD *)(a3 + 124) = 0;
  *(_WORD *)(a3 + 128) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 132) = 1000;
  sub_100197040();
  if (sub_100195F08())
  {
    v8 = 2;
    if (*(_BYTE *)(a2 + 352))
    {
      if (sub_100D7B9E0(*(_QWORD *)(a2 + 344)))
        v8 = 0;
      else
        v8 = 2;
    }
    sub_100FE4E48(a1, a2, (uint64_t)buf, v6, v7);
    v9 = *(_OWORD *)&v102[16];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)v102;
    *(_OWORD *)(a3 + 112) = v9;
    *(_QWORD *)(a3 + 128) = v103;
    v10 = v100;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v10;
    v11 = *(_OWORD *)&v101[16];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v101;
    *(_OWORD *)(a3 + 80) = v11;
    v12 = *(_OWORD *)&buf[16];
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_OWORD *)(a3 + 16) = v12;
    if (qword_10229FED0 != -1)
      dispatch_once(&qword_10229FED0, &stru_102198400);
    v13 = qword_10229FED8;
    if (os_log_type_enabled((os_log_t)qword_10229FED8, (os_log_type_t)v8))
    {
      v15 = *(_QWORD *)a3;
      v14 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a3 + 24);
      v17 = *(_QWORD *)(a3 + 32);
      v18 = *(unsigned __int8 *)(a3 + 40);
      v19 = *(_QWORD *)(a3 + 48);
      v20 = *(_DWORD *)(a3 + 56);
      v21 = *(_DWORD *)(a3 + 60);
      v22 = *(unsigned __int8 *)(a3 + 64);
      v23 = *(_QWORD *)(a3 + 72);
      v24 = *(_QWORD *)(a3 + 80);
      v25 = *(_QWORD *)(a3 + 88);
      v26 = *(_QWORD *)(a3 + 96);
      v27 = *(_QWORD *)(a3 + 104);
      v28 = *(_QWORD *)(a3 + 112);
      v29 = *(unsigned __int8 *)(a3 + 16);
      v30 = *(unsigned __int8 *)(a3 + 120);
      v31 = *(_DWORD *)(a3 + 124);
      v32 = *(unsigned __int8 *)(a3 + 129);
      v33 = *(unsigned __int8 *)(a3 + 128);
      v34 = *(_DWORD *)(a3 + 132);
      *(_DWORD *)buf = 134354176;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v16;
      LOWORD(v99) = 2048;
      *(_QWORD *)((char *)&v99 + 2) = v17;
      WORD5(v99) = 1026;
      HIDWORD(v99) = v18;
      LOWORD(v100) = 2048;
      *(_QWORD *)((char *)&v100 + 2) = v19;
      WORD5(v100) = 1026;
      HIDWORD(v100) = v20;
      *(_WORD *)v101 = 1026;
      *(_DWORD *)&v101[2] = v21;
      *(_WORD *)&v101[6] = 1026;
      *(_DWORD *)&v101[8] = v22;
      *(_WORD *)&v101[12] = 2050;
      *(_QWORD *)&v101[14] = v23;
      *(_WORD *)&v101[22] = 2050;
      *(_QWORD *)&v101[24] = v24;
      *(_WORD *)v102 = 2050;
      *(_QWORD *)&v102[2] = v25;
      *(_WORD *)&v102[10] = 2050;
      *(_QWORD *)&v102[12] = v26;
      *(_WORD *)&v102[20] = 2050;
      *(_QWORD *)&v102[22] = v27;
      *(_WORD *)&v102[30] = 2050;
      v103 = v28;
      v104 = 1026;
      v105 = v29;
      v106 = 1026;
      v107 = v30;
      v108 = 1026;
      v109 = v31;
      v110 = 1026;
      v111 = v32;
      v112 = 1026;
      v113 = v33;
      v114 = 1026;
      v115 = v34;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v8, "RunningPower,startTime,%{public}.2f,powerWattage,%.2f,userWeight,%.2f,userHeight,%.2f,isWeightSet,%{public}d,workrateMETs,%.2f,activityTypeWithoutOverride,%{public}d,activityType,%{public}d,isWorkoutSelected,%{public}d,currentPace,%{public}.2f,currentCadence,%{public}.2f,horizSpeed,%{public}.3f,verticalSpeed,%{public}.3f,grade,%{public}.2f,eta,%{public}.2f,isValid,%{public}d,isGradeOnsetEscalated,%{public}d,gradeOnsetCounter,%{public}d,isRunning,%{public}d,isArmConstrainedStateValid,%{public}d,elevationSource,%{public}d", buf, 0xACu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FED0 != -1)
        dispatch_once(&qword_10229FED0, &stru_102198400);
      v36 = *(_QWORD *)a3;
      v35 = *(_QWORD *)(a3 + 8);
      v37 = *(_QWORD *)(a3 + 24);
      v38 = *(_QWORD *)(a3 + 32);
      v39 = *(unsigned __int8 *)(a3 + 40);
      v40 = *(_QWORD *)(a3 + 48);
      v41 = *(_DWORD *)(a3 + 56);
      v42 = *(_DWORD *)(a3 + 60);
      v43 = *(unsigned __int8 *)(a3 + 64);
      v45 = *(_QWORD *)(a3 + 72);
      v44 = *(_QWORD *)(a3 + 80);
      v46 = *(_QWORD *)(a3 + 88);
      v47 = *(_QWORD *)(a3 + 96);
      v48 = *(_QWORD *)(a3 + 104);
      v49 = *(_QWORD *)(a3 + 112);
      v50 = *(unsigned __int8 *)(a3 + 16);
      v51 = *(unsigned __int8 *)(a3 + 120);
      v52 = *(_DWORD *)(a3 + 124);
      v53 = *(unsigned __int8 *)(a3 + 129);
      v54 = *(unsigned __int8 *)(a3 + 128);
      v55 = *(_DWORD *)(a3 + 132);
      v57[0] = 134354176;
      *(_QWORD *)&v57[1] = v35;
      v58 = 2048;
      v59 = v36;
      v60 = 2048;
      v61 = v37;
      v62 = 2048;
      v63 = v38;
      v64 = 1026;
      v65 = v39;
      v66 = 2048;
      v67 = v40;
      v68 = 1026;
      v69 = v41;
      v70 = 1026;
      v71 = v42;
      v72 = 1026;
      v73 = v43;
      v74 = 2050;
      v75 = v45;
      v76 = 2050;
      v77 = v44;
      v78 = 2050;
      v79 = v46;
      v80 = 2050;
      v81 = v47;
      v82 = 2050;
      v83 = v48;
      v84 = 2050;
      v85 = v49;
      v86 = 1026;
      v87 = v50;
      v88 = 1026;
      v89 = v51;
      v90 = 1026;
      v91 = v52;
      v92 = 1026;
      v93 = v53;
      v94 = 1026;
      v95 = v54;
      v96 = 1026;
      v97 = v55;
      v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FED8, v8, "RunningPower,startTime,%{public}.2f,powerWattage,%.2f,userWeight,%.2f,userHeight,%.2f,isWeightSet,%{public}d,workrateMETs,%.2f,activityTypeWithoutOverride,%{public}d,activityType,%{public}d,isWorkoutSelected,%{public}d,currentPace,%{public}.2f,currentCadence,%{public}.2f,horizSpeed,%{public}.3f,verticalSpeed,%{public}.3f,grade,%{public}.2f,eta,%{public}.2f,isValid,%{public}d,isGradeOnsetEscalated,%{public}d,gradeOnsetCounter,%{public}d,isRunning,%{public}d,isArmConstrainedStateValid,%{public}d,elevationSource,%{public}d", v57, 172);
      sub_100512490("Generic", 1, 0, 2, "CLPower::ModelOutput CLPowerEstimator::computeAndLogPower(const CLNatalieModelInput &)", "%s\n", v56);
      if (v56 != buf)
        free(v56);
    }
    sub_1006B2F68(a3, (uint64_t)buf);
    if (*(_BYTE *)(a1 + 64))
    {
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_102198420);
      if (qword_1023118B0)
        operator new();
    }
    PB::Base::~Base((PB::Base *)buf);
  }
}

void sub_10023CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  PB::Base::~Base((PB::Base *)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10023CFD8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10218B458;
  *(double *)(a1 + 24) = a4 + 60.0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = CFStringCreateWithFormat(0, 0, CFSTR("%s.%lx"), a2, a3);
  return a1;
}

void *sub_10023D040(uint64_t a1, const void *a2)
{
  return sub_1001D44D4((_QWORD *)(a1 + 488), a2);
}

void sub_10023D048(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;

  sub_100240EE8((__n128 *)(a1 + 312), a2);
  v4 = *(_QWORD **)(a1 + 6352);
  if (v4)
    sub_10021E740(v4, a2);
}

id sub_10023D088(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100043F7C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_10023D0D4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100043FC8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_10023D120(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10002F2F8(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

double sub_10023D16C(uint64_t a1, int a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double result;
  double v6;
  double *v8;
  double *v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16) + 80 * a2;
  v3 = *(double **)(v2 + 32);
  v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    result = 1.79769313e308;
  }
  else
  {
    result = 1.79769313e308;
    do
    {
      v6 = v3[6];
      if (v6 < result && v6 > 0.0)
        result = v3[6];
      v8 = (double *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308)
    return 0.0;
  return result;
}

double sub_10023D200(uint64_t a1, int a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double result;
  double v6;
  double *v8;
  double *v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16) + 80 * a2;
  v3 = *(double **)(v2 + 32);
  v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    result = 1.79769313e308;
  }
  else
  {
    result = 1.79769313e308;
    do
    {
      v6 = v3[7];
      if (v6 < result && v6 > 0.0)
        result = v3[7];
      v8 = (double *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308)
    return 0.0;
  return result;
}

void sub_10023D294(uint64_t a1)
{
  sub_10001AA00(a1);
  operator delete();
}

uint64_t sub_10023D2B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

void sub_10023D2C0(uint64_t a1)
{
  sub_10001B020(a1);
  operator delete();
}

void sub_10023D2E4(uint64_t a1)
{
  sub_100017278(a1);
  operator delete();
}

void sub_10023D308(uint64_t a1)
{
  sub_10001F1B8(a1);
  operator delete();
}

BOOL sub_10023D32C(__IOHIDServiceClient *a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  const __CFString *v8;
  id v9;
  NSObject *v10;
  CFTypeRef v11;
  void *v12;
  char *v13;
  _BOOL8 result;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  const __CFString *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  __IOHIDServiceClient *v29;
  uint8_t buf[4];
  const __CFString *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  __IOHIDServiceClient *v35;
  _BYTE v36[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, v36, 16);
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)v21;
  while (2)
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(_QWORD *)v21 != v6)
        objc_enumerationMutation(a2);
      v8 = *(const __CFString **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
      v9 = objc_msgSend(a2, "objectForKeyedSubscript:", v8);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543875;
        v31 = v8;
        v32 = 2113;
        v33 = v9;
        v34 = 2049;
        v35 = a1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Checking matching property %{public}@ = %{private}@ for service ref %{private}p", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v24 = 138543875;
        v25 = v8;
        v26 = 2113;
        v27 = v9;
        v28 = 2049;
        v29 = a1;
        LODWORD(v19) = 32;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Checking matching property %{public}@ = %{private}@ for service ref %{private}p", &v24, v19);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      v11 = IOHIDServiceClientCopyProperty(a1, v8);
      if (!v11)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v15 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543875;
          v31 = v8;
          v32 = 2114;
          v33 = v9;
          v34 = 2049;
          v35 = a1;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Invalid matching property %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v24 = 138543875;
        v25 = v8;
        v26 = 2114;
        v27 = v9;
        v28 = 2049;
        v29 = a1;
        LODWORD(v19) = 32;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Invalid matching property %{public}@ = %{public}@ for service ref %{private}p", &v24, v19);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        return 0;
      }
      v12 = (void *)v11;
      if (!CFEqual(v11, v9))
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        v17 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543875;
          v31 = v8;
          v32 = 2114;
          v33 = v12;
          v34 = 2049;
          v35 = a1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property mismatch! %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102165728);
          v24 = 138543875;
          v25 = v8;
          v26 = 2114;
          v27 = v12;
          v28 = 2049;
          v29 = a1;
          LODWORD(v19) = 32;
          v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Property mismatch! %{public}@ = %{public}@ for service ref %{private}p", &v24, v19);
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "%s\n", v18);
          if (v18 != (char *)buf)
            free(v18);
        }
        CFRelease(v12);
        return 0;
      }
      CFRelease(v12);
    }
    v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, v36, 16);
    result = 1;
    if (v5)
      continue;
    break;
  }
  return result;
}

id sub_10023D8C0(uint64_t a1)
{
  const void *v2;
  void *v3;
  id result;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v3 = *(void **)(a1 + 160);
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 160), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7)), "setDirty:", 1);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_10023D9C4@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x11)
    v2 = "EventUnknown";
  else
    v2 = (&off_102157AD0)[a1];
  return sub_1015A2E04(a2, v2);
}

uint64_t sub_10023D9F0(unsigned __int8 *a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[801];
    v5[0] = 68289794;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = 0;
    v10 = 1026;
    v11 = v3;
    v12 = 1026;
    v13 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssConnect\", \"connect\":%{public}hhd, \"fEngaged\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v5, 0x24u);
  }
  a1[801] = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 56))(*(_QWORD *)a1);
}

uint64_t sub_10023DB00(unsigned __int8 *a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[801];
    v5[0] = 68289794;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = 1;
    v10 = 1026;
    v11 = v3;
    v12 = 1026;
    v13 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssConnect\", \"connect\":%{public}hhd, \"fEngaged\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v5, 0x24u);
  }
  a1[801] = 1;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 48))(*(_QWORD *)a1);
}

uint64_t sub_10023DC14(uint64_t a1)
{
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "clientStart";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  *(_BYTE *)(a1 + 776) = 1;
  return sub_10006028C(a1 + 2624, 2);
}

void sub_10023DD10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 1232);
  if (v2)
    sub_10023F2E4(v2);
  v3 = *(_QWORD *)(a1 + 1240);
  if (v3)
    sub_1011A731C(v3);
  sub_1001924EC((_DWORD *)a1);
}

void sub_10023DD48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 1232);
  if (v2)
    sub_10023F4D8(v2);
  v3 = *(_QWORD *)(a1 + 1240);
  if (v3)
    sub_1011A7228(v3);
  sub_1001924EC((_DWORD *)a1);
}

void sub_10023DD80(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v11[0] = 68289282;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"handleassistancesignalenv\":%{public}d}", (uint8_t *)v11, 0x18u);
  }
  v5 = a1[131];
  if (v5)
    sub_10022B4D0(v5, a2);
  v6 = a1[134];
  if (v6)
    sub_10022F7B8(v6, a2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 120))(*a1, a2);
  v7 = a1[147];
  if (v7)
    sub_1002433B0(v7, a2);
  v8 = a1[154];
  if (v8)
    sub_10023FE98(v8, a2);
  sub_10021CB04(*a1 + 8, a2);
  v9 = a1[319];
  if (v9)
    sub_1002424F0(v9, a2);
  v10 = a1[156];
  if (v10)
    sub_100F6DEE4(v10, a2);
}

uint64_t sub_10023DEF4(uint64_t a1, double a2)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  char v27;
  __int128 v28;
  char v29;
  __int128 v30;
  char v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  *(double *)(a1 + 2784) = a2;
  v20 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  v21 = 1;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v26 = _Q1;
  v27 = 0;
  v28 = _Q1;
  v29 = 0;
  v30 = _Q1;
  v31 = 0;
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0u;
  v35 = 1065353216;
  v36 = 0x100000005;
  v37 = 0;
  v8 = *(_QWORD *)(a1 + 1048);
  if (v8)
    sub_10022B740(v8, (uint64_t)v17);
  v9 = *(_QWORD *)(a1 + 1072);
  if (v9)
    sub_10022FE84(v9, (uint64_t)v17);
  v10 = *(_QWORD *)(a1 + 1056);
  if (v10)
    sub_100235088(v10, (uint64_t)v17);
  v11 = *(_QWORD *)(a1 + 1088);
  if (v11)
    sub_10022A110(v11);
  v12 = *(_QWORD *)(a1 + 1160);
  if (v12)
    sub_1017E1870(v12, (uint64_t)v17);
  v13 = *(_QWORD *)(a1 + 1240);
  if (v13)
    sub_1011A6DE0(v13, (uint64_t)v17);
  v14 = *(_QWORD *)(a1 + 1184);
  if (v14)
    sub_100041480(v14, *(_QWORD *)a1 + 8);
  v15 = *(_QWORD *)(a1 + 1208);
  if (v15)
    sub_1002201C0(v15);
  return sub_100067A50((uint64_t)v33 + 8);
}

void sub_10023E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_100067A50((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_10023E030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1 && (v4 = *(int *)(a2 + 8), v4 < 3))
      v5 = dword_101BE4828[v4];
    else
      v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "feedRhythmicGnssStatus,eventType,%{public}d,eventStatus,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v9 = *(unsigned __int8 *)(a2 + 4);
    v11[0] = 67240448;
    v11[1] = v5;
    v12 = 1026;
    v13 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "feedRhythmicGnssStatus,eventType,%{public}d,eventStatus,%{public}d", v11, 14);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::feedRhythmicGnssStatus(const CLLocationProvider_Type::CLRhythmicGnssStatusUpdate &)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v8 = *(_QWORD *)(a1 + 1184);
  if (v8)
    sub_10003A15C(v8, v5, *(unsigned __int8 *)(a2 + 4));
}

uint64_t sub_10023E250(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_10023DD10(a1);
  v2 = *(_BYTE **)(a1 + 1056);
  if (v2)
    sub_100234B84(v2);
  v3 = *(_QWORD *)(a1 + 1096);
  if (v3)
    sub_10023A210(v3);
  v4 = *(char **)(a1 + 1048);
  if (v4)
    sub_10022B10C(v4);
  v5 = *(_BYTE **)(a1 + 760);
  if (v5)
    sub_10023A068(v5, *(_BYTE *)(a1 + 2617));
  v6 = *(_QWORD *)(a1 + 1208);
  if (v6)
    sub_100220000(v6);
  v7 = *(_QWORD *)(a1 + 1160);
  if (v7)
    sub_1017E1868(v7);
  v8 = *(_QWORD *)(a1 + 1248);
  if (v8)
    sub_100F6E730(v8);
  result = *(_QWORD *)(a1 + 1256);
  if (result)
    return sub_100A0EB88(result);
  return result;
}

void sub_10023E2DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[151];
  if (v2)
    sub_10173C074(v2);
  v3 = (uint64_t *)a1[95];
  if (v3)
    sub_10171D0DC(v3);
  v4 = a1[131];
  if (v4)
    sub_1000314C4(v4);
  v5 = a1[137];
  if (v5)
    sub_10023A3A8(v5);
  if (a1[132])
    sub_100234D24();
  v6 = a1[156];
  if (v6)
    sub_100F6E85C(v6);
}

void sub_10023E348(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssStopTimer\", \"run\":%{public}hhd}", (uint8_t *)v4, 0x18u);
  }
  sub_10001C98C(a1 + 2624, 16);
  *(_BYTE *)(a1 + 800) = 0;
  v3 = *(_QWORD *)(a1 + 1184);
  if (v3)
    sub_10003A15C(v3, 3, 0);
}

uint64_t sub_10023E450(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  _BYTE v30[32];
  __int128 v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)&v22[0] = 68289282;
    WORD4(v22[0]) = 2082;
    *(_QWORD *)((char *)v22 + 10) = "";
    WORD1(v22[1]) = 2082;
    *(_QWORD *)((char *)&v22[1] + 4) = "deviceStart";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v22, 0x1Cu);
  }
  sub_100010204(*(_QWORD *)a1 + 8);
  v5 = *(_BYTE **)a1;
  v5[1096] = *(_BYTE *)(a1 + 2545);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1 + 604);
  v6 = *(_QWORD *)(a1 + 1184);
  if (v6)
    sub_10003A15C(v6, 4, 1);
  *(_QWORD *)v30 = 0;
  *(_OWORD *)&v30[16] = 0u;
  *(_OWORD *)&v28[16] = 0u;
  *(_QWORD *)v28 = 0;
  v23 = 0u;
  v24 = 0u;
  memset(v22, 0, sizeof(v22));
  DWORD2(v24) = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v28[8] = _Q1;
  v29 = _Q1;
  *(_OWORD *)&v30[8] = _Q1;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v34 = 1065353216;
  v35 = 0x100000005uLL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v12 = v23;
  v13 = v24;
  v14 = v26;
  *(_OWORD *)(a1 + 128) = v25;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  v15 = v27;
  v16 = *(_OWORD *)v28;
  v17 = v29;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)&v28[16];
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 160) = v15;
  *(_OWORD *)(a1 + 176) = v16;
  v18 = *(_OWORD *)v30;
  v19 = *(_OWORD *)&v30[16];
  v20 = v31;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)&v32[0];
  *(_OWORD *)(a1 + 240) = v19;
  *(_OWORD *)(a1 + 256) = v20;
  *(_OWORD *)(a1 + 224) = v18;
  sub_10020B514(a1 + 280, (uint64_t *)v32 + 1);
  *(_OWORD *)(a1 + 320) = v35;
  sub_100067A50((uint64_t)v32 + 8);
  result = *(_QWORD *)(a2 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_10023E678(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "deviceStop";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = a1[61];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (a1[148])
  {
    v6 = a1[137];
    if (v6)
    {
      sub_10023A53C(v6, (float *)(*a1 + 844));
      sub_10023A548(a1[137], (float *)(*a1 + 848));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssawd fGnssInterference == nullptr", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd fGnssInterference == nullptr", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssController::stopDevice(std::function<void ()>)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    sub_100068B7C(a1[148], *a1 + 8, (int *)(*a1 + 1224));
    v8 = a1[148];
    if (v8)
      sub_10003A15C(v8, 4, 0);
  }
}

int *sub_10023E928()
{
  return &dword_1022FF740;
}

BOOL sub_10023E934(uint64_t a1)
{
  unsigned __int8 *v2;

  if (qword_10230E3A0 != -1)
    dispatch_once(&qword_10230E3A0, &stru_1021AF698);
  v2 = (unsigned __int8 *)&unk_10230E398;
  if (!byte_10230E399)
    v2 = (unsigned __int8 *)(a1 + 105);
  return *v2 != 0;
}

BOOL sub_10023E99C(unsigned __int8 *a1, uint64_t a2)
{
  char v2;
  int v3;

  v2 = a2 + 1;
  switch(a2)
  {
    case -1:
      v3 = a1[83];
      goto LABEL_7;
    case 0:
      return sub_10132E53C((uint64_t)a1);
    case 1:
      v3 = a1[80];
      goto LABEL_7;
    case 2:
      v3 = a1[81];
      goto LABEL_7;
    case 3:
      v3 = a1[82];
LABEL_7:
      v2 = v3 != 0;
      break;
    default:
      return v2 & 1;
  }
  return v2 & 1;
}

__int16 *sub_10023E9F4()
{
  return &word_1022FF794;
}

int *sub_10023EA00()
{
  return &dword_1022FF760;
}

void sub_10023EA0C(uint64_t *a1, float *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  double v12;
  int v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  uint64_t *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *(_QWORD *)a2;
    v7 = a2[2];
    *(_DWORD *)buf = 136315650;
    v20 = v5;
    v21 = 2048;
    v22 = v6;
    v23 = 2048;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "AmbientLight,context,%s,startTime,%f,lux,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v8 = *(_QWORD *)a2;
    v9 = a2[2];
    v13 = 136315650;
    v14 = a1;
    v15 = 2048;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    LODWORD(v12) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "AmbientLight,context,%s,startTime,%f,lux,%f", (const char *)&v13, v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logAmbientLight(const CLOutdoorAmbientLight &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

uint64_t sub_10023EC14(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

CFTypeRef sub_10023EC34(_BYTE *a1)
{
  CFTypeRef *v1;
  CFTypeRef v2;

  v1 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a1)
    v1 = (CFTypeRef *)&kCFBooleanFalse;
  v2 = *v1;
  CFRetain(*v1);
  return v2;
}

uint64_t *sub_10023EC78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  v6 = v4;
  sub_10023ECBC((uint64_t)&v6);
  return a1;
}

uint64_t sub_10023ECBC(uint64_t a1)
{
  if (*(_QWORD *)a1)
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)a1 + 8), 18);
  return a1;
}

void sub_10023ECF8(uint64_t a1, int a2, int a3, int a4, int a5, double a6, float a7, double a8)
{
  double v16;
  unsigned int v20;
  int v21;
  _BOOL4 v22;
  double v25;
  unint64_t v26;
  int v27;
  double v28;
  double v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  int v40;
  double v41;
  _BYTE v42[10];
  double v43;
  _BYTE v44[10];
  __int16 v45;
  int v46;
  uint8_t buf[16];
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;

  if (sub_100195F08())
    v16 = 15.0;
  else
    v16 = 5.0;
  if (a8 <= 10.0 || a2 == 0)
  {
    if ((a8 > 10.0 || a8 < 0.0) && a2 == 0)
    {
      v22 = 0;
      *(_DWORD *)(a1 + 140) = 0;
      v21 = 1;
    }
    else
    {
      v21 = 0;
      v20 = *(_DWORD *)(a1 + 140) + 1;
      *(_DWORD *)(a1 + 140) = v20;
      v22 = v20 > 0x28;
    }
  }
  else
  {
    v21 = 0;
    *(_DWORD *)(a1 + 140) = 0;
    v22 = 1;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    if (!*(_BYTE *)(a1 + 4) || !a3 || a7 > 15.0)
    {
      *(_DWORD *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 120) = xmmword_101CDDAF0;
      *(_DWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      sub_10023235C((_QWORD *)(a1 + 8));
      *(_DWORD *)(a1 + 140) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      goto LABEL_50;
    }
    *(double *)(a1 + 128) = v16;
    if (a7 < 0.0)
      goto LABEL_40;
    v25 = a7;
    if (*(_QWORD *)(a1 + 80))
    {
      if (a6 - *(double *)(a1 + 96) < 3.0)
      {
        *(double *)buf = v25;
        sub_100ADB200(a1 + 8, (double *)buf);
        *(double *)(a1 + 96) = a6;
        v26 = *(_QWORD *)(a1 + 80);
        if (v26 >= *(_QWORD *)(a1 + 16) && (!v26 || *(double *)(a1 + 24) / (double)v26 < 0.1))
          *(_QWORD *)(a1 + 128) = 0x403F000000000000;
        goto LABEL_40;
      }
      sub_10023235C((_QWORD *)(a1 + 8));
    }
    *(double *)buf = v25;
    sub_100ADB200(a1 + 8, (double *)buf);
    *(double *)(a1 + 96) = a6;
LABEL_40:
    if (*(int *)(a1 + 112) >= 4)
      *(_QWORD *)(a1 + 128) = 0x403F000000000000;
    if (*(_DWORD *)(a1 + 136) >= 5u)
      *(_QWORD *)(a1 + 128) = 0x4056800000000000;
    if (a5 && *(double *)(a1 + 128) < 31.0)
      *(_QWORD *)(a1 + 128) = 0x403F000000000000;
    if (a4 == 2 && *(double *)(a1 + 128) < 11.0)
      *(_QWORD *)(a1 + 128) = 0x4026000000000000;
    goto LABEL_50;
  }
  if (a7 < 15.0 && *(_BYTE *)(a1 + 4) != 0 && a3 != 0)
  {
    *(_DWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 120) = xmmword_101CDDAF0;
    *(_DWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    sub_10023235C((_QWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 140) = 0;
    *(_BYTE *)(a1 + 88) = 1;
    *(double *)(a1 + 128) = v16;
  }
LABEL_50:
  if (a3)
  {
    if (*(_BYTE *)(a1 + 144))
      *(_BYTE *)(a1 + 88) = 1;
    if (*(_BYTE *)(a1 + 145))
    {
      v27 = 0;
      *(_BYTE *)(a1 + 88) = 0;
      v28 = a6 - *(double *)(a1 + 104);
      goto LABEL_63;
    }
  }
  v29 = *(double *)(a1 + 104);
  v28 = a6 - v29;
  if (*(_BYTE *)(a1 + 88) && (v30 = *(double *)(a1 + 128), a6 - *(double *)(a1 + 120) > v30))
  {
    if (v29 <= 0.0)
      goto LABEL_60;
    if (v28 > v30)
    {
      if (v28 <= v30 + v30)
      {
LABEL_61:
        v27 = 1;
        goto LABEL_63;
      }
LABEL_60:
      ++*(_DWORD *)(a1 + 136);
      goto LABEL_61;
    }
    v27 = 0;
    *(_DWORD *)(a1 + 136) = 0;
  }
  else
  {
    v27 = 0;
  }
LABEL_63:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CFE10);
  v31 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v32 = *(_QWORD *)(a1 + 128);
    v33 = *(unsigned __int8 *)(a1 + 88);
    v34 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v22;
    *(_WORD *)&buf[14] = 1024;
    v48 = v21;
    v49 = 2048;
    v50 = a8;
    v51 = 1024;
    v52 = a3;
    v53 = 2048;
    v54 = v32;
    v55 = 1024;
    v56 = a4;
    v57 = 1024;
    v58 = v33;
    v59 = 1024;
    v60 = v27;
    v61 = 2048;
    v62 = v28;
    v63 = 1024;
    v64 = v34;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CPI,isLowPower,%d,isLowForAWhile,%d,isNotLowForAWhile,%d,ageOfPowerMode,%.1lf,isWiFiPowered,%d,scanInterval,%.1lf,signalEnv,%d,enabled,%d,requestAScan,%d,timeSinceLastWifiLoc,%.1lf,fEmptyResultCounter,%d", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CFE10);
    v35 = *(_QWORD *)(a1 + 128);
    v36 = *(unsigned __int8 *)(a1 + 88);
    v37 = *(_DWORD *)(a1 + 136);
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = v22;
    HIWORD(v41) = 1024;
    *(double *)v42 = a8;
    *(_WORD *)&v42[8] = 1024;
    LOWORD(v43) = HIWORD(v36);
    WORD1(v43) = 1024;
    HIDWORD(v43) = v27;
    *(_WORD *)v44 = 2048;
    *(double *)&v44[2] = v28;
    v45 = 1024;
    v46 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CPI,isLowPower,%d,isLowForAWhile,%d,isNotLowForAWhile,%d,ageOfPowerMode,%.1lf,isWiFiPowered,%d,scanInterval,%.1lf,signalEnv,%d,enabled,%d,requestAScan,%d,timeSinceLastWifiLoc,%.1lf,fEmptyResultCounter,%d", &v40, 80, 67111680, v41, v21, *(double *)&v42[2], a3, v35 >> 16, a4, v43,
      *(_DWORD *)v44);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLGpsCpiHandler::manageCPI(CFTimeInterval, float, const BOOL, const CFTimeInterval, const BOOL, CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const BOOL)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  if (v27)
  {
    *(_OWORD *)buf = xmmword_101BBE180;
    LOBYTE(v48) = 0;
    sub_1006DD604(a1 + 152, (uint64_t *)buf);
    *(double *)(a1 + 120) = a6;
  }
}

void sub_10023F264(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_101CDDAF0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_10023235C((_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 140) = 0;
}

uint64_t sub_10023F2A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;

  v3 = *(_DWORD *)(a2 + 96);
  if (v3 == 11 || v3 == 4)
  {
    *(_QWORD *)(result + 104) = *(_QWORD *)(a3 + 344);
    if (*(_DWORD *)(a2 + 84) > 0x44u)
      v5 = 0;
    else
      v5 = *(_DWORD *)(result + 112) + 1;
    *(_DWORD *)(result + 112) = v5;
    *(_DWORD *)(result + 136) = 0;
  }
  return result;
}

void sub_10023F2E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    v10 = sub_100762AD8();
    v11 = 1026;
    v12 = sub_100762C38();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "L5Context,start,L5AntennaHasContentionWithCell,%{public}d,L5AntennaHasContentionWithWiFi24,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v3 = qword_1022A0078;
    v6[0] = 67240448;
    v6[1] = sub_100762AD8();
    v7 = 1026;
    v8 = sub_100762C38();
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v3, 1, "L5Context,start,L5AntennaHasContentionWithCell,%{public}d,L5AntennaHasContentionWithWiFi24,%{public}d", v6, 14);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (!*(_BYTE *)(a1 + 51))
  {
    *(_BYTE *)(a1 + 51) = 1;
    sub_100240068(a1);
  }
}

void sub_10023F4D8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[8];
  void *v9;
  uint64_t v10;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "L5Context,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    LOWORD(v7[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,stop", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::stop()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 51))
  {
    v3 = *(_DWORD *)(a1 + 60);
    *(_QWORD *)buf = 0;
    v9 = 0;
    v10 = 0;
    *(_DWORD *)a1 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v7[0] = v3;
      (*(void (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v4 + 48))(v4, v7, buf);
      if (*(_QWORD *)buf)
      {
        v9 = *(void **)buf;
        operator delete(*(void **)buf);
      }
    }
    *(_BYTE *)(a1 + 51) = 0;
  }
}

void sub_10023F6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10023F6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  v5 = *(_DWORD *)(a4 + 1448);
  v6 = *(unsigned __int8 *)(a4 + 1452);
  v7 = *(_DWORD *)(a4 + 1456);
  v8 = *(_QWORD *)(a4 + 1464);
  v9 = *(unsigned __int8 *)(a4 + 1472);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241472;
    v34 = v5;
    v35 = 1026;
    v36 = v7;
    v37 = 1026;
    v38 = v8 & 1;
    v39 = 1026;
    v40 = (v8 >> 1) & 1;
    v41 = 1026;
    v42 = v6;
    v43 = 1026;
    v44 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "L5Context,RhythmicModeNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v21 = 67241472;
    v22 = v5;
    v23 = 1026;
    v24 = v7;
    v25 = 1026;
    v26 = v8 & 1;
    v27 = 1026;
    v28 = (v8 >> 1) & 1;
    v29 = 1026;
    v30 = v6;
    v31 = 1026;
    v32 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,RhythmicModeNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", &v21, 38);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v11 = *(unsigned __int8 *)(a1 + 57);
  v12 = (v8 & 1) == 0 && (v8 & 2) != 0 && v6;
  *(_BYTE *)(a1 + 57) = v12;
  if (v12 != v11)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(unsigned __int8 *)(a1 + 57);
      *(_DWORD *)buf = 67240192;
      v34 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "L5Context,onlyRhythmicGnss,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v17 = *(unsigned __int8 *)(a1 + 57);
      v21 = 67240192;
      v22 = v17;
      LODWORD(v20) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "L5Context,onlyRhythmicGnss,%{public}d", &v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    sub_100240068(a1);
  }
}

unint64_t sub_10023FA84()
{
  int v0;
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  const mach_header_64 *v6;
  NSObject *v7;
  char *v8;
  uint64_t v10;
  _DWORD v11[4];
  uint8_t buf[8];
  std::__shared_weak_count *v13;

  HIDWORD(v10) = -1;
  sub_1001E4804(buf);
  v0 = sub_1001E4B84(*(uint64_t *)buf, "GnssForceL5Desire", (_DWORD *)&v10 + 1);
  v1 = v0;
  v2 = v13;
  if (!v13)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (v0)
      goto LABEL_6;
LABEL_18:
    v6 = 0;
    v5 = 0;
    return v5 | (unint64_t)v6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v1)
    goto LABEL_18;
LABEL_6:
  if (HIDWORD(v10) >= 3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = HIDWORD(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "L5Context,unhandled defaults,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v11[0] = 67240192;
      v11[1] = HIDWORD(v10);
      LODWORD(v10) = 8;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "L5Context,unhandled defaults,%{public}d", v11, v10);
      sub_100512490("Generic", 1, 0, 0, "static std::optional<CLGnssBandUseType> CLGnssL5Context::checkForSettingsOverride()", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    goto LABEL_18;
  }
  v5 = (unint64_t)HIDWORD(v10) << 8;
  v6 = &_mh_execute_header;
  return v5 | (unint64_t)v6;
}

void sub_10023FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10023FCD4(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  _DWORD v6[4];
  uint8_t buf[4];
  int v8;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5Context,AccHigh,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v6[0] = 67240192;
    v6[1] = a2;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,AccHigh,%{public}d", v6, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedHighDesiredAccuracy(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if (*(unsigned __int8 *)(a1 + 52) != a2)
  {
    *(_BYTE *)(a1 + 52) = a2;
    sub_100240068(a1);
  }
}

void sub_10023FE98(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "L5Context,SignalEnvironmentType,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v9[0] = 67240192;
    v9[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "L5Context,SignalEnvironmentType,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::feedSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(unsigned __int8 *)(a1 + 49);
  v6 = (a2 - 3) < 2;
  *(_BYTE *)(a1 + 49) = v6;
  if (v5 != v6)
    sub_100240068(a1);
}

void sub_100240068(uint64_t a1)
{
  unint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[8];
  void *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 51))
  {
    v2 = sub_10023FA84();
    if ((v2 & 0xFF00000000) != 0)
    {
      v3 = v2;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "L5Context,forcing L5 band use to %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102184B58);
        v7[0] = 67240192;
        v7[1] = v3;
        v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "L5Context,forcing L5 band use to %{public}d", v7, 8);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::tickL5Enablement()", "%s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
      }
      *(_QWORD *)buf = 0;
      v9 = 0;
      v10 = 0;
      *(_DWORD *)a1 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v7[0] = v3;
        (*(void (**)(uint64_t, _DWORD *, uint8_t *))(*(_QWORD *)v5 + 48))(v5, v7, buf);
        if (*(_QWORD *)buf)
        {
          v9 = *(void **)buf;
          operator delete(*(void **)buf);
        }
      }
    }
    else if (sub_100241698())
    {
      sub_100DA2570((int *)a1);
    }
    else
    {
      sub_1000224AC((int *)a1);
    }
  }
}

void sub_1002402D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1002402F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id result;
  void *v7;
  _QWORD v8[7];

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v5, "isValidCKP");
  if ((_DWORD)result)
  {
    v7 = *(void **)(a1 + 136);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10020EFF0;
    v8[3] = &unk_102153D50;
    v8[5] = a3;
    v8[6] = a1;
    v8[4] = v5;
    return objc_msgSend(v7, "iterateIdentitiesRelatedToKeyPath:withBlock:", v5, v8);
  }
  return result;
}

BOOL sub_100240384(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272) != 0;
}

void sub_100240394(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;

  if ((sub_10011E0F0() & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Considering whether to mark client, %@, for always power use", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14 = 138412290;
      v15 = a2;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Considering whether to mark client, %@, for always power use", &v14, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markAlwaysAuthorizationUsedForClient(CLClientKeyPath *)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    v5 = sub_1002406D0(a1, a2);
    if (v5)
    {
      v6 = v5;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = sub_1002488A8(v6);
        *(_DWORD *)buf = 138412546;
        v19 = a2;
        v20 = 2080;
        v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Not marking client %@ as having used Always-powers (not Always authorized (%s))", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v10 = qword_1022A01D8;
        v11 = sub_1002488A8(v6);
        v14 = 138412546;
        v15 = a2;
        v16 = 2080;
        v17 = v11;
        LODWORD(v13) = 22;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "Not marking client %@ as having used Always-powers (not Always authorized (%s))", &v14, v13);
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::markAlwaysAuthorizationUsedForClient(CLClientKeyPath *)", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
    }
  }
}

id sub_1002406D0(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v3 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](sub_10019F2A0(a1, a2), "objectAtIndexedSubscript:", 1), "intValue");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = a2;
    v11 = 2050;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client Effective registration result\", \"Client\":%{public, location:escape_only}@, \"registration\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v6, 0x26u);
  }
  return v3;
}

NSMutableSet *sub_1002407E4(uint64_t a1)
{
  NSMutableSet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = objc_opt_new(NSMutableSet);
  v3 = *(_QWORD **)(a1 + 728);
  if (v3 != (_QWORD *)(a1 + 736))
  {
    do
    {
      v4 = v3 + 4;
      if (*((char *)v3 + 55) < 0)
        v4 = (_QWORD *)*v4;
      -[NSMutableSet addObject:](v2, "addObject:", -[CLClientKeyPath legacyClientKey](+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "legacyClientKey"));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 736));
  }
  return v2;
}

uint64_t sub_1002408AC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10019C2CC;
  v4[3] = &unk_102153C10;
  v4[4] = &v5;
  v4[5] = a1;
  objc_msgSend(v1, "iterateAllAnchorKeyPathsWithBlock:", v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_10024093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100240954(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1061);
}

uint64_t sub_10024095C()
{
  if (qword_1023061E0 != -1)
    dispatch_once(&qword_1023061E0, &stru_102163610);
  return qword_102311108;
}

void sub_10024099C(const char *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7[6];
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;

  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102197898);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm";
      v16 = 1024;
      v17 = 2700;
      v18 = 2080;
      v19 = "location.horizontalAccuracy > 0.0";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102197898);
      v8 = 136315650;
      v9 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm";
      v10 = 1024;
      v11 = 2700;
      v12 = 2080;
      v13 = "location.horizontalAccuracy > 0.0";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v8, 28, v7[0]);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100512450();
  }
  v7[0] = (const char *)_NSConcreteStackBlock;
  v7[1] = (const char *)3221225472;
  v7[2] = (const char *)sub_1001C75F0;
  v7[3] = (const char *)&unk_102154608;
  v7[4] = a1;
  v7[5] = (const char *)a2;
  sub_1001CD7EC((uint64_t)a1, (uint64_t)"updateTileLocationRelevancy", (uint64_t)v7);
}

uint64_t sub_100240BF8(uint64_t a1, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  NSObject *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  char *v14;
  char *v15;
  __n128 v17;
  void *v18[2];
  char v19;
  _BYTE __p[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  _BYTE *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  v2 = *(_QWORD **)(a1 + 112);
  v3 = (_QWORD *)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 120))
    return 0;
  LODWORD(v4) = 0;
  a2.n128_u64[0] = 136315906;
  v17 = a2;
  do
  {
    v5 = sub_1000753C8(v2[10]);
    v6 = sub_1000782F4(v2[10]);
    v4 = (v4 + v6);
    if (v6)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v2[10] + 16))(__p);
        v8 = __p;
        if (v24 < 0)
          v8 = *(_BYTE **)__p;
        *(_DWORD *)buf = v17.n128_u32[0];
        v28 = v8;
        v29 = 1024;
        v30 = 1;
        v31 = 1024;
        v32 = v4;
        v33 = 2048;
        v34 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p", buf, 0x22u);
        if (SHIBYTE(v24) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v12 = qword_1022A0028;
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v2[10] + 16))(v18);
        v13 = v18;
        if (v19 < 0)
          v13 = (void **)v18[0];
        *(_DWORD *)__p = v17.n128_u32[0];
        *(_QWORD *)&__p[4] = v13;
        v21 = 1024;
        v22 = 1;
        v23 = 1024;
        v24 = v4;
        v25 = 2048;
        v26 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p", __p, 34, v17.n128_u32[0], (const void *)v17.n128_u64[1]);
        v15 = v14;
        if (v19 < 0)
          operator delete(v18[0]);
        sub_100512490("Generic", 1, 0, 2, "unsigned int CLTilesManager::getNumOfActiveDownloads()", "%s\n", v15);
        if (v15 != (char *)buf)
          free(v15);
      }
    }
    v9 = (_QWORD *)v2[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v2[2];
        v11 = *v10 == (_QWORD)v2;
        v2 = v10;
      }
      while (!v11);
    }
    v2 = v10;
  }
  while (v10 != v3);
  return v4;
}

void sub_100240EE8(__n128 *a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  double v14;
  __n128 v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  double v19;
  uint8_t buf[4];
  unint64_t v21;
  __int16 v22;
  double v23;

  v15 = *a2;
  v3 = a1[8].n128_u64[1];
  if (v3)
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v3 + 48))(v3, &v15);
  v4 = a1[3].n128_u64[1];
  if (v4)
  {
    v5 = v4 + a1[3].n128_u64[0] - 1;
    v6 = (void **)a1[1].n128_u64[1];
    v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v15.n128_f64[0])
    {
      v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[2].n128_u64[0];
          v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218C9D0);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v21 = v15.n128_u64[0];
            v22 = 2048;
            v23 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10218C9D0);
            v16 = 134218240;
            v17 = v15.n128_u64[0];
            v18 = 2048;
            v19 = v7;
            LODWORD(v14) = 22;
            v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v16), v14);
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLAmbientLightSensor_Type::CLALSLuxResult>::add(const T &) [T = CLAmbientLightSensor_Type::CLALSLuxResult]", "%s\n", v13);
            if (v13 != (char *)buf)
              free(v13);
          }
          goto LABEL_17;
        }
        v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_100211924((__n128 *)a1[1].n128_u64, &v15);
  a1[6] = v15;
}

void sub_100241184(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  _OWORD v18[4];
  int v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  double v26;

  if (sub_1000BE7C4(a1 + 8, a2, (uint64_t)v18))
  {
    v3 = *(_QWORD *)(a1 + 440);
    if (v3)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 48))(v3, v18);
    v4 = *(_QWORD *)(a1 + 312);
    if (!v4)
      goto LABEL_18;
    v5 = v4 + *(_QWORD *)(a1 + 304) - 1;
    v6 = *(void ***)(a1 + 280);
    v7 = (*(double **)((char *)v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)))[8 * (v5 & 0x3F) + 1];
    if (v7 <= *((double *)v18 + 1))
      goto LABEL_18;
    v8 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 312) = 0;
    v9 = v8 - (_QWORD)v6;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v10 = *(_QWORD *)(a1 + 288);
        v6 = (void **)(*(_QWORD *)(a1 + 280) + 8);
        *(_QWORD *)(a1 + 280) = v6;
        v9 = v10 - (_QWORD)v6;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      v11 = 32;
    }
    else
    {
      if (v9 >> 3 != 2)
      {
LABEL_13:
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214D488);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          v24 = *((_QWORD *)&v18[0] + 1);
          v25 = 2048;
          v26 = v7;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v19 = 134218240;
          v20 = *((_QWORD *)&v18[0] + 1);
          v21 = 2048;
          v22 = v7;
          LODWORD(v17) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v19), v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLElevationChangeEntry>::add(const T &) [T = CLElevationChangeEntry]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
LABEL_18:
        sub_1000BE730((_QWORD *)(a1 + 272), (uint64_t)v18);
        v13 = v18[1];
        *(_OWORD *)(a1 + 352) = v18[0];
        *(_OWORD *)(a1 + 368) = v13;
        v14 = v18[3];
        *(_OWORD *)(a1 + 384) = v18[2];
        *(_OWORD *)(a1 + 400) = v14;
        return;
      }
      v11 = 64;
    }
    *(_QWORD *)(a1 + 304) = v11;
    goto LABEL_13;
  }
}

uint64_t sub_100241430()
{
  if ((sub_1001DC634() & 1) != 0 || (sub_1001DC5AC() & 1) != 0 || sub_1000FDBD0())
    return 1;
  else
    return sub_10075B95C();
}

uint64_t sub_100241464()
{
  unsigned int v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if ((sub_1001937D8() & 1) != 0 || sub_1000FDB0C() || sub_10075B95C())
  {
    if (qword_102303E10 != -1)
      dispatch_once(&qword_102303E10, &stru_102151510);
    v0 = byte_102303E08;
  }
  else
  {
    v0 = 0;
  }
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "SupportPeriodicRefPosMaintenance", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_100241550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100241568()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  v0 = sub_1000FDB0C();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "EnableGnssB13FilterInAllSessions", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_10024160C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100241620()
{
  _BOOL8 result;

  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  result = 1;
  if ((dword_102303CA8 - 89) > 0x2C
    || ((1 << (dword_102303CA8 - 89)) & 0x1FFFFFFC3FCFLL) == 0)
  {
    return dword_102303CA8 == 258;
  }
  return result;
}

uint64_t sub_100241698()
{
  uint64_t result;

  result = sub_1002416E0();
  if ((_DWORD)result)
  {
    result = sub_1001DC794();
    if ((_DWORD)result)
      return !sub_1000FDB3C();
  }
  return result;
}

uint64_t sub_1002416C0()
{
  uint64_t result;

  result = sub_1001DC794();
  if ((_DWORD)result)
    return !sub_1000FDB3C();
  return result;
}

uint64_t sub_1002416E0()
{
  unsigned int v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  v0 = 0;
  switch(dword_102303CA8)
  {
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 189:
    case 198:
    case 200:
    case 206:
    case 208:
    case 214:
    case 216:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 226:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
    case 238:
    case 239:
    case 241:
      goto LABEL_6;
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 199:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 207:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 215:
    case 217:
    case 224:
    case 225:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 240:
      break;
    default:
      if ((dword_102303CA8 - 115) <= 0xA && ((1 << (dword_102303CA8 - 115)) & 0x601) != 0)
LABEL_6:
        v0 = 1;
      break;
  }
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "GnssSupportsL5", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_100241824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100241838(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  double v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  double *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  double v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;

  v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  v5 = a2 > 0.0;
  if (v4 <= a2)
    v5 = 0;
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10217E880);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(double *)(a1 + 104);
      v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)buf = 134218752;
      v34 = v7 - v4;
      v35 = 2048;
      v36 = v4;
      v37 = 2048;
      v38 = v7;
      v39 = 1024;
      v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10217E880);
      v20 = *(double *)(a1 + 104);
      v21 = *(unsigned __int8 *)(a1 + 121);
      v25 = 134218752;
      v26 = v20 - v4;
      v27 = 2048;
      v28 = v4;
      v29 = 2048;
      v30 = v20;
      v31 = 1024;
      v32 = v21;
      LODWORD(v24) = 38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", COERCE_DOUBLE(&v25), v24);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [T = CLExtendedStepCountEntry]", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = (char *)(v10 + 8 * (v9 >> 4));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = (char *)(*(_QWORD *)v12 + 320 * (*(_QWORD *)(a1 + 56) & 0xFLL));
  v14 = (char *)(v10 + 8 * (v9 >> 4));
LABEL_15:
  v15 = (double *)v13;
  while (1)
  {
    v16 = v11 == v10
        ? 0
        : *(_QWORD *)(v10 + (((*(_QWORD *)(a1 + 64) + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 320 * ((*(_DWORD *)(a1 + 64) + (_DWORD)v9) & 0xF);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0)
      break;
    v15 += 40;
    v13 += 320;
    if ((char *)(*(_QWORD *)v14 + 5120) == v13)
    {
      v17 = (char *)*((_QWORD *)v14 + 1);
      v14 += 8;
      v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10)
    v18 = 0;
  else
    v18 = (char *)(*(_QWORD *)v12 + 320 * (*(_QWORD *)(a1 + 56) & 0xFLL));
  return sub_1000DDB44((_QWORD *)(a1 + 24), v12, v18, v14, v13);
}

double sub_100241B84(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v10;
  uint64_t v11;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (a2)
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021694E0);
    v4 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unrecognized magnetometer notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021694E0);
      v13[0] = 67240192;
      v13[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 17, "Unrecognized magnetometer notification %{public}d", v13, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_100017A44(a1, a3);
    if (*a3 > 0.0 && !*(_QWORD *)(a1 + 40))
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      operator new();
    }
    if (*a3 <= 0.0 && *(_QWORD *)(a1 + 40))
    {
      v10 = sub_1002201C8();
      sub_1000A4A6C(v10, 0, *(_QWORD *)(a1 + 40));
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)(a1 + 40) = 0;
    }
    return *a3;
  }
  return v5;
}

void sub_100241E10()
{
  operator delete();
}

uint64_t sub_100241E3C(_QWORD *a1, int *a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _WORD v16[8];
  uint8_t buf[4];

  if (!*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,GnssProviderInternal", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,GnssProviderInternal", v16, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  sub_10003DFD4((uint64_t)a1);
  switch(*a2)
  {
    case 28:
      sub_100853644(a1 + 15, 0);
      break;
    case 29:
      sub_100852EB8(a1 + 15, 0);
      break;
    case 30:
    case 31:
    case 32:
    case 33:
    case 36:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return 1;
    case 34:
      sub_100219C54((uint64_t)(a1 + 15), 0);
      break;
    case 35:
      sub_100853964(a1 + 15, 0);
      break;
    case 37:
      sub_100854040((uint64_t)(a1 + 15), 0);
      break;
    case 38:
      *(_DWORD *)buf = 38;
      (*(void (**)(_QWORD *, uint8_t *))(*a1 + 120))(a1, buf);
      sub_100853C84((uint64_t)(a1 + 15), 0);
      break;
    case 44:
      sub_100855640((uint64_t)(a1 + 15), 0);
      break;
    case 45:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "kNotificationGNSSStatusIndication unregistered", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v16[0] = 0;
        LODWORD(v15) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "kNotificationGNSSStatusIndication unregistered", v16, v15);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      break;
    default:
      if (!*a2)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "stopLocation in location notification", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102189B38);
          v16[0] = 0;
          LODWORD(v15) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "stopLocation in location notification", v16, v15);
          v14 = (uint8_t *)v13;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v13);
          if (v14 != buf)
            free(v14);
        }
        sub_100E06780((uint64_t)a1);
        *(_DWORD *)buf = *a2;
        v6 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
        sub_10004FFE4((uint64_t)a1, 0, v6, a2);
      }
      break;
  }
  return 1;
}

void sub_10024233C(_BYTE *a1)
{
  int v2;
  int v3;

  if (a1[3304])
  {
    v2 = 1;
  }
  else
  {
    v3 = 0;
    v2 = sub_1001B7864((uint64_t)a1, &v3, 1) != 0;
  }
  if (a1[3305] != v2)
    sub_1002423A0(a1, v2);
}

void sub_1002423A0(_BYTE *a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  _BYTE v14[688];
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  int v17;
  char v18;
  void *v19;
  char v20;
  std::__shared_weak_count *v21;
  id v22;

  sub_100129CA0((uint64_t)v14);
  v17 = 1;
  v18 = a2;
  v13 = 11;
  (*(void (**)(_BYTE *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v13, v14, 1, 0xFFFFFFFFLL, 0);
  a1[3305] = a2;

  v4 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v20 < 0)
    operator delete(v19);
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1002424DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002424F0(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM,Set signal environment,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GPSODOM,Set signal environment,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::setSignalEnvironment(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_DWORD *)(a1 + 760) = a2;
}

void sub_1002426A0(uint64_t a1, int *a2, double *a3, double a4)
{
  int v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  double *v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  int v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  void (*v25)(void);
  NSObject *v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  NSObject *v37;
  int v38;
  int v39;
  const char *v40;
  uint8_t *v41;
  int v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  int v54;
  const char *v55;
  uint8_t *v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[10];
  _BYTE v63[10];
  double v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  uint8_t buf[4];
  _BYTE v72[10];
  _BYTE v73[10];
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;

  v8 = *a2;
  if (*a2 == 11)
  {
    sub_100D72EB4(a1 + 904, *((unsigned __int8 *)a3 + 137));
  }
  else if (v8 == 7)
  {
    *(double *)(a1 + 1760) = a4;
    sub_100D73064(a1 + 904, a4);
  }
  else if (v8 == 1)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      v10 = *(unsigned __int8 *)a3;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v72 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fence: Got kNotificationPower, isWifiPowered, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v39 = *(unsigned __int8 *)a3;
      v61 = 67240192;
      *(_DWORD *)v62 = v39;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Got kNotificationPower, isWifiPowered, %{public}d", &v61, 8);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    if (!*(_BYTE *)a3)
    {
      sub_100ED2B74(a1 + 1312, 0);
      *(_QWORD *)(a1 + 684) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 272))(*(_QWORD *)(a1 + 1768));
    }
  }
  if (*(_BYTE *)(a1 + 612))
  {
    v11 = *(_QWORD *)(a1 + 256);
    switch(*a2)
    {
      case 1:
        sub_100D72B50((_BYTE *)(a1 + 904), *(unsigned __int8 *)a3, a4);
        return;
      case 3:
        v15 = a3 + 13;
        sub_10023B084(a1 + 904, a3 + 13, a4);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v16 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3);
          v18 = a3[13];
          v19 = *(_DWORD *)(a1 + 684);
          v20 = *(_DWORD *)(a1 + 688);
          *(_DWORD *)buf = 134284801;
          *(_QWORD *)v72 = v17;
          *(_WORD *)&v72[8] = 2049;
          *(double *)v73 = v18;
          *(_WORD *)&v73[8] = 2049;
          v74 = a4 - v18;
          v75 = 2050;
          v76 = v11;
          v77 = 1026;
          v78 = v19;
          v79 = 1026;
          v80 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Fence: monitor, got kNotificationScan, result, %{private}lu, time, %{private}.1lf, age, %{private}.1lf, numFences, %{public}lu, locationCount, %{public}d, %{public}d", buf, 0x36u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v46 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a3 + 15) - *((_QWORD *)a3 + 14)) >> 3);
          v47 = a3[13];
          v48 = *(_DWORD *)(a1 + 684);
          v49 = *(_DWORD *)(a1 + 688);
          v61 = 134284801;
          *(_QWORD *)v62 = v46;
          *(_WORD *)&v62[8] = 2049;
          *(double *)v63 = v47;
          *(_WORD *)&v63[8] = 2049;
          v64 = a4 - v47;
          v65 = 2050;
          v66 = v11;
          v67 = 1026;
          v68 = v48;
          v69 = 1026;
          v70 = v49;
          LODWORD(v60) = 54;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: monitor, got kNotificationScan, result, %{private}lu, time, %{private}.1lf, age, %{private}.1lf, numFences, %{public}lu, locationCount, %{public}d, %{public}d", &v61, v60);
          v51 = (uint8_t *)v50;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
        if (((a4 - *v15 >= 15.0) & ~(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 24))(*(_QWORD *)(a1 + 1768))) != 0)
          goto LABEL_28;
        return;
      case 4:
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v12 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
        {
          v13 = *(_DWORD *)(a1 + 684);
          v14 = *(_DWORD *)(a1 + 688);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v72 = v13;
          *(_WORD *)&v72[4] = 1026;
          *(_DWORD *)&v72[6] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "scan result, count, wait, %{public}d, retry, %{public}d, error", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v42 = *(_DWORD *)(a1 + 684);
          v43 = *(_DWORD *)(a1 + 688);
          v61 = 67240448;
          *(_DWORD *)v62 = v42;
          *(_WORD *)&v62[4] = 1026;
          *(_DWORD *)&v62[6] = v43;
          LODWORD(v60) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "scan result, count, wait, %{public}d, retry, %{public}d, error", &v61, v60);
          v45 = (uint8_t *)v44;
          sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v44);
          if (v45 != buf)
            free(v45);
        }
LABEL_28:
        if (!v11)
          return;
        if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768)))
          return;
        v21 = *(_DWORD *)(a1 + 684);
        if (v21 < 1 || !sub_10016E59C(a1))
          return;
        if (!*(_DWORD *)(a1 + 444))
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v26 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)v72 = 0x4014000000000000;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Fence: no reachability, expedite watchdog, %{public}.1lf", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v61 = 134349056;
            *(_QWORD *)v62 = 0x4014000000000000;
            LODWORD(v60) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: no reachability, expedite watchdog, %{public}.1lf", &v61, v60);
            v53 = (uint8_t *)v52;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v52);
            if (v53 != buf)
              free(v53);
          }
          *(_DWORD *)(a1 + 688) = 2;
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) != 0
            || *(_DWORD *)(a1 + 684) != 1)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v27 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v28 = *(_DWORD *)(a1 + 684);
              v29 = *(_DWORD *)(a1 + 688);
              v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768));
              *(_DWORD *)buf = 67240704;
              *(_DWORD *)v72 = v28;
              *(_WORD *)&v72[4] = 1026;
              *(_DWORD *)&v72[6] = v29;
              *(_WORD *)v73 = 1026;
              *(_DWORD *)&v73[2] = v30;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Fence: skip urgent, watchdog already active, %{public}d,%{public}d, %{public}d", buf, 0x14u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v31 = qword_1022A0068;
              v32 = *(_DWORD *)(a1 + 684);
              v33 = *(_DWORD *)(a1 + 688);
              v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768));
              v61 = 67240704;
              *(_DWORD *)v62 = v32;
              *(_WORD *)&v62[4] = 1026;
              *(_DWORD *)&v62[6] = v33;
              *(_WORD *)v63 = 1026;
              *(_DWORD *)&v63[2] = v34;
              LODWORD(v60) = 20;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "Fence: skip urgent, watchdog already active, %{public}d,%{public}d, %{public}d", &v61, v60);
              v36 = (uint8_t *)v35;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v35);
              if (v36 != buf)
                free(v36);
            }
            goto LABEL_70;
          }
          goto LABEL_68;
        }
        v22 = *(_DWORD *)(a1 + 688);
        if (v22 <= 1)
        {
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v23 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(_DWORD *)(a1 + 688);
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v72 = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %{public}d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v54 = *(_DWORD *)(a1 + 688);
            v61 = 67240192;
            *(_DWORD *)v62 = v54;
            LODWORD(v60) = 8;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %{public}d", &v61, v60);
            v56 = (uint8_t *)v55;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v55);
            if (v56 != buf)
              free(v56);
          }
          v25 = *(void (**)(void))(**(_QWORD **)(a1 + 1768) + 296);
          goto LABEL_69;
        }
        if (v21 == 1
          && v22 == 2
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768)) & 1) == 0)
        {
          sub_100197040();
          if ((sub_100195F08() & 1) == 0)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v37 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v38 = *(_DWORD *)(a1 + 688);
              *(_DWORD *)buf = 67240704;
              *(_DWORD *)v72 = v38;
              *(_WORD *)&v72[4] = 1026;
              *(_DWORD *)&v72[6] = 2;
              *(_WORD *)v73 = 2050;
              *(_QWORD *)&v73[2] = 0x4014000000000000;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Fence: expedite location watchdog due to empty / error scan , %{public}d, %{public}d, kUrgentWatchdogActivation, %{public}.1lf", buf, 0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_1021826B0);
              v57 = *(_DWORD *)(a1 + 688);
              v61 = 67240704;
              *(_DWORD *)v62 = v57;
              *(_WORD *)&v62[4] = 1026;
              *(_DWORD *)&v62[6] = 2;
              *(_WORD *)v63 = 2050;
              *(_QWORD *)&v63[2] = 0x4014000000000000;
              LODWORD(v60) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: expedite location watchdog due to empty / error scan , %{public}d, %{public}d, kUrgentWatchdogActivation, %{public}.1lf", &v61, v60);
              v59 = (uint8_t *)v58;
              sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v58);
              if (v59 != buf)
                free(v59);
            }
LABEL_68:
            v25 = *(void (**)(void))(**(_QWORD **)(a1 + 1768) + 232);
LABEL_69:
            v25();
LABEL_70:
            ++*(_DWORD *)(a1 + 688);
            return;
          }
        }
        break;
      case 8:
        sub_100D73934((double *)(a1 + 904), a4);
        return;
      case 9:
        sub_100D7306C((double *)(a1 + 904), a4);
        return;
      default:
        return;
    }
  }
}

uint64_t sub_1002433B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 744) = a2;
  return result;
}

double sub_1002433B8(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  result = 6335439.33;
  *(_OWORD *)a1 = xmmword_101C3F5E0;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_1002433D4()
{
  if (qword_10230D288 != -1)
    dispatch_once(&qword_10230D288, &stru_1021A4948);
  return qword_102311CD0;
}

uint64_t sub_100243414(uint64_t a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v9, Dictionary);
  HIBYTE(v8) = 0;
  if ((sub_1001E4874((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_10003899C(a1, HIBYTE(v8), (uint64_t)v9);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v10 = 136446210;
      v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v10, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return sub_10011A5A8(v9);
}

void sub_100243610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100243630(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1015A2E04(__p, "com.apple.locationd.activity");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_100243690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002436AC(_QWORD *a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  char *v6;
  uint64_t v7;
  _BYTE v8[16];
  int v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1001C1D6C((int)v8, Dictionary);
  HIBYTE(v7) = 0;
  if ((sub_1001E4874((uint64_t)v8, "kCLConnectionMessageSubscribeKey", (BOOL *)&v7 + 7) & 1) != 0)
  {
    sub_100007DC0(a1, HIBYTE(v7));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
      v9 = 136446210;
      v10 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v7) = 12;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v9, v7);
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessagePressureBias(std::shared_ptr<CLConnectionMessage>)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return sub_10011A5A8(v8);
}

void sub_1002438A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_1002438C4(uint64_t a1, uint64_t a2, int *a3, UInt8 *a4)
{
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;

  if (*a3)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102174FD8);
    v5 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_ERROR))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67109120;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected notification in onPressureBias,notification,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102174FD8);
      v7 = *a3;
      LODWORD(v11[0]) = 67109120;
      HIDWORD(v11[0]) = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 16, "Unexpected notification in onPressureBias,notification,%d", v11);
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  else
  {
    sub_100119F3C(buf);
    sub_1002446CC(a4, (uint64_t)buf);
    v11[0] = sub_10011A5AC((uint64_t)buf);
    sub_1000144B8(a1, v11);
    sub_10011A5A8(buf);
  }
}

void sub_100243AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100243AD8(uint64_t a1, double a2)
{
  NSObject *v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  int v6;
  uint64_t v7;
  CFAbsoluteTime v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  CFAbsoluteTime v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  CFAbsoluteTime v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  if (*(double *)(a1 + 2968) < 0.0)
  {
    *(double *)(a1 + 2968) = a2;
    ++*(_DWORD *)(a1 + 236);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021A3690);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v5 = *(_QWORD *)(a1 + 2968);
      v6 = *(_DWORD *)(a1 + 236);
      *(_DWORD *)buf = 134349568;
      v19 = Current;
      v20 = 2050;
      v21 = v5;
      v22 = 1026;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,sessions,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021A3690);
      v7 = qword_1022A0008;
      v8 = CFAbsoluteTimeGetCurrent();
      v9 = *(_QWORD *)(a1 + 2968);
      v10 = *(_DWORD *)(a1 + 236);
      v12 = 134349568;
      v13 = v8;
      v14 = 2050;
      v15 = v9;
      v16 = 1026;
      v17 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,sessions,%{public}d", &v12, 28);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryAWD::locationSessionStart(const CFTimeInterval)", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    *(_WORD *)(a1 + 3024) = 0;
  }
}

uint64_t sub_100243CEC()
{
  return 1;
}

uint64_t sub_100243CF4(uint64_t a1, NSObject *a2, _DWORD *a3)
{
  NSObject *v5;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (!*a3)
  {
    if ((*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24)) < 1)
    {
      if (!objc_msgSend(*(id *)(a1 + 8), "state")
        && (objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded") & 1) == 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v5 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "No more clients but availability tiles still loaded - clearing", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v8[0] = 0;
          v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "No more clients but availability tiles still loaded - clearing", v8, 2);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLIndoorLogic::registerForNotificationInternal(std::chrono::steady_clock::time_point, const CLLocationProvider_Type::Notification &)", "%s\n", v7);
          if (v7 != (char *)buf)
            free(v7);
        }
        objc_msgSend(*(id *)(a1 + 8), "clearLocationGroups");
      }
    }
    else
    {
      sub_10003C3FC(a1, a2);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24)))
      sub_10001E7A0(a1, 1);
  }
  return 1;
}

uint64_t sub_100243EFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "gpsAssistanceRequested");
  if ((_DWORD)result != (_DWORD)a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "onGpsAssistanceRequest, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "onGpsAssistanceRequest, %d", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onGpsAssistanceRequest(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(a1 + 8), "setGpsAssistanceRequested:", a2);
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "gpsFusionRequested");
    if ((result & 1) == 0)
      return (*(uint64_t (**)(_QWORD, id))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), objc_msgSend(*(id *)(a1 + 8), "gpsAssistanceRequested"));
  }
  return result;
}

void sub_1002440F0(uint64_t a1)
{
  void *__p[2];
  char v3;

  objc_msgSend(*(id *)(a1 + 8), "setPipelinedVenues:", 0);
  sub_1015A2E04(__p, "killdaemon");
  sub_1001CEC00(a1, 0, (uint64_t *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_100243EFC(a1, 0);
  if (objc_msgSend(*(id *)(a1 + 8), "state") == 2)
  {
    sub_1015A2E04(__p, "pipelined killed");
    sub_1001CE878(a1, (uint64_t *)__p);
    if (v3 < 0)
      operator delete(__p[0]);
  }
}

void sub_100244198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002441B8(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[8];
  char v8;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "New pipelined client", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6[0] = 0;
    v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "New pipelined client", v6, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onClientAddition(std::chrono::steady_clock::time_point)", "%s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24)))
    sub_10001E7A0(a1, 1);
  sub_1015A2E04(buf, "onClientAddition");
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v8 < 0)
    operator delete(*(void **)buf);
}

void sub_10024439C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002443C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  v3 = sub_10023C0E0(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_100244428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10024443C(_DWORD *a1, unsigned int (*a2)(uint64_t, uint64_t (***)()), uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;

  if (!a1[30])
    sub_10007A0C8((uint64_t)(a1 + 16), (uint64_t)(a1 + 2));
  v6 = a1[18];
  v7 = a1[19];
  if (v6 <= v7)
    v8 = a1[19];
  else
    v8 = a1[18];
  if (v7)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = v8;
  return sub_100079478((uint64_t)a1, v10, (uint64_t)(a1 + 16), a2, a3);
}

id sub_1002444A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setNextFireTime:");
}

uint64_t sub_1002444AC(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(result + 36);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 8);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_8:
      *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
      if ((v2 & 8) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
  if ((v2 & 2) != 0)
    goto LABEL_8;
LABEL_4:
  if ((v2 & 8) == 0)
    return result;
LABEL_9:
  v3 = *(_DWORD *)(result + 28) - 1;
  if (v3 <= 5)
    *(_BYTE *)a2 = 0x30404020100uLL >> (8 * v3);
  return result;
}

double sub_100244514(uint64_t a1, double *a2)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 48);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a1 + 8);
    *a2 = result;
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = *(double *)(a1 + 16);
  a2[1] = result;
  if ((v2 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0)
      return result;
LABEL_9:
    result = *(double *)(a1 + 32);
    a2[3] = result;
    return result;
  }
LABEL_8:
  result = *(double *)(a1 + 24);
  a2[2] = result;
  if ((v2 & 8) != 0)
    goto LABEL_9;
  return result;
}

id sub_10024455C()
{
  return +[CLSilo main](CLSilo, "main");
}

uint64_t sub_100244568()
{
  if (qword_1023086C8 != -1)
    dispatch_once(&qword_1023086C8, &stru_1021881D8);
  return qword_102311718;
}

BOOL sub_1002445A8(uint64_t a1)
{
  return *(double *)(a1 + 80) <= 2.33333325 && (*(_BYTE *)(a1 + 152) & 0xFD) == 1;
}

BOOL sub_1002445CC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 1152);
  if (v2 == 2)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(a1 + 1160) = 3;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 1160) - 1;
      *(_QWORD *)(a1 + 1160) = v8;
      if (!v8)
      {
        v2 = 1;
        *(_DWORD *)(a1 + 1152) = 1;
        v7 = 12;
        goto LABEL_21;
      }
    }
    v2 = 2;
    return v2 == 2;
  }
  if (v2 == 1)
  {
    if ((_DWORD)a2)
    {
      v6 = *(_QWORD *)(a1 + 1160) - 1;
      *(_QWORD *)(a1 + 1160) = v6;
      if (!v6)
      {
        v2 = 2;
        *(_DWORD *)(a1 + 1152) = 2;
        v7 = 3;
LABEL_21:
        *(_QWORD *)(a1 + 1160) = v7;
        return v2 == 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 1160) = 12;
    }
    v2 = 1;
    return v2 == 2;
  }
  if (v2)
    return v2 == 2;
  v3 = *(_QWORD *)(a1 + 1160) - 1;
  *(_QWORD *)(a1 + 1160) = v3;
  if (!v3)
  {
    if ((_DWORD)a2)
      v4 = 2;
    else
      v4 = 1;
    *(_DWORD *)(a1 + 1152) = v4;
    v5 = 12;
    if ((_DWORD)a2)
      v5 = 3;
    *(_QWORD *)(a1 + 1160) = v5;
  }
  return a2;
}

uint64_t sub_100244694(uint64_t result)
{
  *(_DWORD *)(result + 1152) = 0;
  *(_QWORD *)(result + 1160) = 8;
  return result;
}

uint64_t sub_1002446A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1168) = a2;
  return result;
}

double sub_1002446AC(double a1, double a2, double a3, double a4, double a5)
{
  return (a5 - a1) / (a3 - a1) * a4 + (1.0 - (a5 - a1) / (a3 - a1)) * a2;
}

void sub_1002446CC(UInt8 *bytes, uint64_t a2)
{
  CFDataRef v3;

  v3 = CFDataCreate(kCFAllocatorDefault, bytes, 29);
  sub_10011B54C(a2, "kCMPressureBiasId", (uint64_t)v3);
  CFRelease(v3);
}

BOOL sub_10024471C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102183AA8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102183AA8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100244AA4(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1002480A0();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FB3C9;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102183AA8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

uint64_t sub_100244F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FB3C8);
}

_BYTE *sub_100244F14(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100043F7C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100244FF0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000B3638(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100245070(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint8_t buf[32];
  __int128 v46;
  __int128 v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0u;
        v47 = 0u;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100248130();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FB2E1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

uint64_t sub_1002454D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FB2E0);
}

_BYTE *sub_1002454E4(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100043FC8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_1002455C0()
{
  return 1;
}

uint64_t sub_1002455C8(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  return 1;
}

uint64_t sub_100245630(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _DWORD *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_DWORD **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

void sub_100245694(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_10007D1A0(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_100245A68(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D6648);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021D6648);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100245A68(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10007D1A0(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100245B44()
{
  return 1;
}

uint64_t sub_100245B4C(uint64_t a1, int *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

void sub_100245BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102142C28);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102142C28);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_100245E20(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000B072C((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102148DD8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102148DD8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_1002461A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148DD8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102148DD8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::removeClient(int) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10024641C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[102];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 192);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1004FC90C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A4440;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102140238);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140238);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

uint64_t sub_100246898(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[1624];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[21] = 0;
        *(_QWORD *)&buf[16] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1002481C8();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FC921;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102199E18);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102199E18);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

uint64_t sub_100246CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FC920);
}

_BYTE *sub_100246D10(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10002F2F8(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100246DEC(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  *(_OWORD *)((char *)a3 + 13) = *(__int128 *)((char *)v11 + 13);
  *a3 = v12;
  return 1;
}

void sub_100246E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021495C8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021495C8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1002470C8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214C0B0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214C0B0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100247450(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_DWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100696360();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A3AE9;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C0B0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C0B0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

uint64_t sub_1002478AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3AE8);
}

double sub_1002478C0(uint64_t a1, int a2, double *a3)
{
  uint64_t v6;
  double *v7;

  sub_10021B91C(a1, a2, a3);
  if (!a2)
  {
    if (*a3 <= 0.0)
    {
      if (*(_BYTE *)(a1 + 184))
        sub_100A104D4(a1);
      if (*(_QWORD *)(a1 + 192))
        v7 = (double *)&unk_101C039A8;
      else
        v7 = a3;
      v6 = a1;
    }
    else
    {
      v6 = a1;
      v7 = a3;
    }
    sub_100015BFC(v6, v7);
  }
  *(double *)(a1 + 264) = *a3;
  return *a3;
}

uint64_t sub_100247944(uint64_t result, double *a2)
{
  double v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v2 = a2[7];
  if (v2 == -1.0)
  {
    v6 = 0;
    v4 = 0u;
    v5 = 0u;
    v3 = 0u;
    v2 = -1.0;
  }
  else
  {
    v3 = *(_OWORD *)a2;
    v4 = *((_OWORD *)a2 + 1);
    v5 = *((_OWORD *)a2 + 2);
    v6 = *((_QWORD *)a2 + 6);
  }
  *(_OWORD *)(result + 200) = v3;
  *(_OWORD *)(result + 216) = v4;
  *(_OWORD *)(result + 232) = v5;
  *(_QWORD *)(result + 248) = v6;
  *(double *)(result + 256) = v2;
  return result;
}

unint64_t sub_1002479B0()
{
  if ((sub_1001B7910() & 0x20) != 0)
    return 1;
  else
    return ((unint64_t)sub_1001B7910() >> 4) & 1;
}

id sub_1002479D8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onAmbientLightSensorData:", a1);
}

void sub_1002479E4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (*(_BYTE *)(a1 + 88))
    {
      v2 = *(_DWORD *)(a1 + 40);
      v3 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v3 | 1;
      *(_BYTE *)(a2 + 16) = v2 > 0;
      if (v2 >= 1)
      {
        *(_DWORD *)(a2 + 24) = v3 | 3;
        v4 = *(_QWORD *)(a2 + 8);
        if (!v4)
          operator new();
        sub_10002A05C(a1, v4);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 24) |= 1u;
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "pWas,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWas,Invalid pointer", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceAssociationStateToProtobuf(const CLWifiService_Type::AssociationState &, CLP::LogEntry::PrivateData::WifiAssociationState *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100247C18()
{
  operator delete();
}

BOOL sub_100247C44(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL8 result;

  v4 = sub_100176004((int *)(a1 + 1332));
  if (!sub_10002A324(v4))
    sub_1018FAE00();
  v5 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 24) = v4;
  v6 = *(_QWORD *)(a1 + 1336);
  *(_DWORD *)(a2 + 36) = v5 | 6;
  *(_QWORD *)(a2 + 16) = v6;
  v7 = sub_100175DA4((int *)(a1 + 1328));
  result = sub_10002A324(v7);
  if (!result)
    sub_1018FADD8();
  *(_DWORD *)(a2 + 36) |= 8u;
  *(_DWORD *)(a2 + 28) = v7;
  return result;
}

uint64_t sub_100247CC4(char *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v1 = *a1 + 1;
  if (v1 < 0xE)
    return dword_101CA00E8[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi scan type: %{public}d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *a1;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled wifi scan type: %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiScanType ConvertCLWifiServiceScanTypeToProtobuf(const CLWifiService_Type::ScanType &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

BOOL sub_100247EA0(void *a1)
{
  unsigned __int8 v2;
  const char *v3;
  const char *v4;
  const char *v6;

  v2 = atomic_load((unsigned __int8 *)&qword_102304A58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102304A58))
  {
    sub_1015A2E04(&qword_102304A28, "com.apple.NanoUniverse.AegirProxyApp");
    sub_1015A2E04(qword_102304A40, "com.apple.weather");
    __cxa_atexit((void (*)(void *))sub_1007B6260, &qword_102304A28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102304A58);
  }
  v3 = (const char *)objc_msgSend(objc_msgSend(a1, "clientAnchor"), "UTF8String");
  v4 = "";
  if (v3)
    v4 = v3;
  v6 = v4;
  return sub_10035ADB0((unsigned __int8 *)&qword_102304A28, (unsigned __int8 *)&qword_102304A58, &v6)
       - (unsigned __int8 *)&qword_102304A28 != 48;
}

void sub_100247F80(_Unwind_Exception *a1)
{
  if (byte_102304A3F < 0)
    sub_1019080A8();
  __cxa_guard_abort(&qword_102304A58);
  _Unwind_Resume(a1);
}

float sub_100247FB0(float a1, float a2, float a3)
{
  return (float)((float)((float)(a3 * -287.05) / 101320.0) / 9.8067)
       * powf(a1 / 101320.0, (float)((float)(a2 * 287.05) / 9.8067) + -1.0);
}

id sub_100248010(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[12];

  v4 = *a2;
  v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return objc_msgSend(a4, "onOdometerNotification:data:", v4, v12);
}

float sub_10024806C(float a1, float a2)
{
  return (float)(1.0 - powf(a1 / a2, 0.19026)) * 44331.0;
}

void sub_1002480A0()
{
  operator new();
}

void sub_100248130()
{
  operator new();
}

void sub_1002481C8()
{
  operator new();
}

void sub_100248260()
{
  operator new();
}

void sub_1002482FC()
{
  operator delete();
}

void sub_100248320()
{
  operator new();
}

id sub_100248464(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC214DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BC214DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102154768);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLClientManager_Type::Name, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100248810(void *a1)
{
  return objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("IncidentalUseMode")), "unsignedIntValue");
}

NSString *sub_10024882C(void *a1)
{
  unsigned __int8 *v2;

  if (objc_msgSend(a1, "length") != (id)6)
    return 0;
  v2 = (unsigned __int8 *)objc_msgSend(a1, "bytes");
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%02X:%02X:%02X:%02X:%02X:%02X"), *v2, v2[1], v2[2], v2[3], v2[4], v2[5]);
}

const char *sub_1002488A8(unsigned int a1)
{
  if (a1 > 8)
    return "UNKNOWN";
  else
    return off_102141148[a1];
}

const char *sub_1002488CC(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

void sub_1002499D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  PB::Base::~Base((PB::Base *)&a51);
  _Unwind_Resume(a1);
}

void sub_10024A70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_10024AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_10024C18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10024CF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10024D9B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10024F20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 68))
  {
    if (!*(_BYTE *)(a2 + 68))
    {
      v5 = *(_DWORD *)(a1 + 64);
      v6 = *(_DWORD *)(a2 + 64);
      v4 = v5 < v6;
      if (v5 == v6)
      {
        if (!*(_BYTE *)(a1 + 32))
          sub_1018ECB14();
        if (!*(_BYTE *)(a2 + 32))
          sub_1018ECB14();
        return *(_QWORD *)(a1 + 40) < *(_QWORD *)(a2 + 40);
      }
      return v4;
    }
    return 1;
  }
  if (!*(_BYTE *)(a2 + 68))
    return 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      v2 = *(_QWORD *)(a1 + 56);
      v3 = *(_QWORD *)(a2 + 56);
      if (v2 != v3)
        return v3 < v2;
      goto LABEL_13;
    }
    return 0;
  }
  if (*(_BYTE *)(a2 + 48))
    return 1;
LABEL_13:
  if (!*(_BYTE *)(a1 + 32))
  {
    if (!*(_BYTE *)(a2 + 32))
      return *(_DWORD *)(a1 + 64) < *(_DWORD *)(a2 + 64);
    return 1;
  }
  if (!*(_BYTE *)(a2 + 32))
    return 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  v4 = v7 < v8;
  if (v7 == v8)
    return *(_DWORD *)(a1 + 64) < *(_DWORD *)(a2 + 64);
  return v4;
}

uint64_t sub_10024F2DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      v2 = *(_QWORD *)(result + 40);
      if (v2 <= *(_QWORD *)(a2 + 40))
        v2 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(result + 40) = v2;
    }
    else
    {
      *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(result + 32) = 1;
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(_BYTE *)(result + 48))
    {
      v3 = *(_QWORD *)(a2 + 56);
      if (v3 >= *(_QWORD *)(result + 56))
        v3 = *(_QWORD *)(result + 56);
      *(_QWORD *)(result + 56) = v3;
    }
    else
    {
      *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(result + 48) = 1;
    }
  }
  *(_BYTE *)(result + 68) = (*(unsigned __int8 *)(result + 68) | *(unsigned __int8 *)(a2 + 68)) != 0;
  return result;
}

uint64_t sub_10024F368(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10024F398(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10024F4B8()
{
  operator delete();
}

void sub_10024F574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002397F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10024F778(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  *(_QWORD *)a1 = off_102129C70;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 40) = 0;
  sub_1015A2E04(__p, "CLIndoorLogicOSTransaction");
  sub_100D82360(a1 + 48, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = objc_alloc_init(CLIndoorState);
  *(_QWORD *)(a1 + 16) = objc_alloc_init((Class)CLIndoorSettings);
  return a1;
}

void sub_10024F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024F83C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102129C70;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_100D823D4(a1 + 48);
  return a1;
}

void sub_10024F88C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10024F8A0(uint64_t a1)
{
  sub_10024F83C(a1);
  operator delete();
}

uint64_t sub_10024F8C4(uint64_t a1)
{
  if (sub_10021A518(a1))
    return 300000000000;
  else
    return (uint64_t)objc_msgSend(*(id *)(a1 + 16), "errorBackoffDuration");
}

id sub_10024F904(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "pipelinedEnabled");
}

const char *sub_10024F90C(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 3)
    return (&off_102129E38)[a1];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Corrupt Run: got %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Corrupt Run: got %{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "const char *to_string(ProviderState)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "Unknown ProviderState";
}

void sub_10024FAD4(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  __int16 v16;
  char v17[8];
  uint64_t v18;
  unsigned int v19;
  uint8_t buf[8];
  char v21;

  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    if ((objc_msgSend(*(id *)(a1 + 8), "pipelinedDidStartLocalizing") & 1) != 0)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "We got a pipelined error, but believe it's still running", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v16 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "We got a pipelined error, but believe it's still running", &v16, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::afterIndoorError(std::chrono::steady_clock::time_point, NSError *)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 24);
      sub_1015A2E04(buf, "pipeline error, seeded not started");
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
      if (v21 < 0)
        operator delete(*(void **)buf);
      sub_1015A2E04(buf, "afterError");
      sub_1001CEC00(a1, 0, (uint64_t *)buf);
      if (v21 < 0)
        operator delete(*(void **)buf);
    }
    sub_1015A2E04(buf, "afterIndoorError");
    sub_1001CE878(a1, (uint64_t *)buf);
    if (v21 < 0)
    {
      operator delete(*(void **)buf);
      if (a3)
        goto LABEL_29;
    }
    else if (a3)
    {
LABEL_29:
      v14 = objc_msgSend(a3, "code");
LABEL_32:
      v15 = *(void **)(a1 + 8);
      v18 = a2;
      v19 = v14;
      v17[0] = 1;
      objc_msgSend(v15, "setLastIndoorError:", v17);
      return;
    }
    v14 = -1;
    goto LABEL_32;
  }
  v9 = *(_QWORD *)(a1 + 24);
  sub_1015A2E04(buf, "pipeline error, not seeded");
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 16))(v9, buf);
  if (v21 < 0)
    operator delete(*(void **)buf);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "We got a pipelined error after we decided to shut things down.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v16 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "We got a pipelined error after we decided to shut things down.", &v16, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::afterIndoorError(std::chrono::steady_clock::time_point, NSError *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

void sub_10024FEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10024FEF0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  void **v5;
  __int16 v6;
  _BYTE v7[24];
  void *__p[2];
  char v9;

  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    v2 = *(void **)(a1 + 8);
    v7[0] = 0;
    objc_msgSend(v2, "setLastIndoorError:", v7);
    if (v7[0])
      v7[0] = 0;
    objc_msgSend(*(id *)(a1 + 8), "setPipelinedDidStartLocalizing:", 1);
    sub_1015A2E04(__p, "transient");
    sub_1001CEC00(a1, 1, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, "onNoGoodIndoorEstimate_Transient");
    sub_1001CE674(a1, (uint64_t *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "We got an update after we decided to shut things down.", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v6 = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "We got an update after we decided to shut things down.", &v6, 2);
      v5 = (void **)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onNoGoodIndoorEstimate_Transient()", "%s\n", v4);
      if (v5 != __p)
        free(v5);
    }
  }
}

void sub_10025010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100250134(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  NSObject *v10;
  int v11;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24)))
  {
    v3 = *(void **)(a1 + 8);
    v2 = *(void **)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = objc_msgSend(v3, "state");
    if (v5)
    {
      if (v5 == 2)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v10 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
          *(_DWORD *)buf = 67109120;
          v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "requesting provider to stop, clients = %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v13 = qword_1022A0048;
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
          LODWORD(v17[0]) = 67109120;
          HIDWORD(v17[0]) = v14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "requesting provider to stop, clients = %d", v17);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void stopProviderRequest(CLIndoorState *, CLIndoorSettings *, CLIndoorLogicDelegate *)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      else if (v5 == 1)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v6 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ignoring request to stop - already stopping", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_29;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        LOWORD(v17[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring request to stop - already stopping", v17, 2, v17[0]);
        goto LABEL_21;
      }
      objc_msgSend(v3, "setState:", 1);
      objc_msgSend(v2, "debounceInterval");
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
LABEL_29:
      objc_msgSend(*(id *)(a1 + 8), "setLatestReason:", 0);
      goto LABEL_30;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ignoring request to stop. already stopped", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    LOWORD(v17[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring request to stop. already stopped", v17, 2, v17[0]);
LABEL_21:
    v9 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void stopProviderRequest(CLIndoorState *, CLIndoorSettings *, CLIndoorLogicDelegate *)", "%s\n", v7);
    if (v9 != buf)
      free(v9);
    goto LABEL_29;
  }
LABEL_30:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 208))(*(_QWORD *)(a1 + 24)) & 1) == 0)
    sub_10001E7A0(a1, 0);
  return 1;
}

id sub_100250598(uint64_t a1, NSObject *a2, void *a3)
{
  id v6;
  NSObject *v7;
  const char *v8;
  id v9;
  NSObject *v10;
  id v11;
  id result;
  uint64_t v13;
  const char *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  const char *v20;
  char *v21;
  int v22;
  const char *v23;
  __int16 v24;
  id v25;
  _BYTE buf[12];
  __int16 v27;
  id v28;
  char v29;

  v6 = *(id *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = objc_msgSend(objc_alloc((Class)CLIndoorSettings), "initWithSettings:", a3);
  if ((objc_msgSend(objc_msgSend(v6, "disabledVenues"), "isEqualToSet:", objc_msgSend(*(id *)(a1 + 16), "disabledVenues")) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 8), "clearLocationGroups");
    if (objc_msgSend(*(id *)(a1 + 8), "state") == 2
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 112))(*(_QWORD *)(a1 + 24)))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v8 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        v9 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "disabledVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v8;
        v27 = 2082;
        v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Notice Reloading availability tiles (currently seeded = %{public}s). Set of disabled venues has changed to %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v17 = qword_1022A0048;
        v18 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        v19 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "disabledVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
        v22 = 136446466;
        v23 = v18;
        v24 = 2082;
        v25 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#Notice Reloading availability tiles (currently seeded = %{public}s). Set of disabled venues has changed to %{public}s", &v22, 22);
        v21 = (char *)v20;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::resetSettings(std::chrono::steady_clock::time_point, NSDictionary *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      sub_1015A2E04(buf, "reset");
      sub_1001CEC00(a1, 0, (uint64_t *)buf);
      if (v29 < 0)
        operator delete(*(void **)buf);
      sub_1015A2E04(buf, "settings reset, disabledVenues changed");
      sub_1001CE878(a1, (uint64_t *)buf);
      if (v29 < 0)
        operator delete(*(void **)buf);
      sub_1015A2E04(buf, "settings reset, disabledVenues changed");
      sub_100173544(a1, (uint64_t)a2, buf);
      if (v29 < 0)
        operator delete(*(void **)buf);
      sub_1015A2E04(buf, "settings reset, disabledVenues changed");
      sub_10017194C(a1, a2, (uint64_t *)buf);
      if (v29 < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v11 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "disabledVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Set of disabled venues has changed to %{public}s.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v13 = qword_1022A0048;
        v14 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "disabledVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
        v22 = 136446210;
        v23 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "#Notice Set of disabled venues has changed to %{public}s.", &v22, 12);
        v16 = (char *)v15;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::resetSettings(std::chrono::steady_clock::time_point, NSDictionary *)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
  }
  if ((objc_msgSend(*(id *)(a1 + 16), "pipelinedEnabled") & 1) == 0)
  {
    sub_1015A2E04(buf, "settings reset, pipelined disabled\n");
    sub_1001737B8(a1, (uint64_t)a2, (uint64_t *)buf);
    if (v29 < 0)
      operator delete(*(void **)buf);
  }
  if ((objc_msgSend(objc_msgSend(v6, "indoorAvailabilityTilesServerUrl"), "isEqualToString:", objc_msgSend(*(id *)(a1 + 16), "indoorAvailabilityTilesServerUrl")) & 1) == 0)(*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
  result = objc_msgSend(a3, "objectForKeyedSubscript:", off_1022A03D0[0]);
  if (result)
    result = objc_msgSend(result, "BOOLValue");
  *(_BYTE *)(a1 + 40) = (_BYTE)result;
  return result;
}

void sub_100250B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100250BB4(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 16), "setTilePrefetchRelevancyWindow:", a2);
}

void sub_100250BC0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v3;
  std::string *v4;
  void **v5;
  std::string *v6;
  std::string v7;
  void *__p[2];
  unsigned __int8 v9;

  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "indoorAvailabilityTilesServerUrl"), "UTF8String"));
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (size_t)__p[1];
  v4 = &v7;
  sub_100259584((uint64_t)&v7, v3 + 1);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if (v3)
  {
    if ((v9 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 47;
  v6 = std::string::append(&v7, "availability.pb.gz");
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_100250CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100250CE4(std::string *a1@<X8>)
{
  void *v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  std::string v6;
  void *__p[2];
  unsigned __int8 v8;
  void *v9[2];
  char v10;

  sub_1015A2E04(v9, "/");
  sub_1015A2E04(__p, "availability.pb");
  v2 = sub_100225414();
  std::operator+<char>(&v6, v2, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v6, (const std::string::value_type *)v3, v4);
  *a1 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_100250DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_100250DF0(std::string *a1@<X8>)
{
  void *v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  std::string v6;
  void *__p[2];
  unsigned __int8 v8;
  void *v9[2];
  char v10;

  sub_1015A2E04(v9, "/");
  sub_1015A2E04(__p, "availability.pb.gz");
  v2 = sub_100225414();
  std::operator+<char>(&v6, v2, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v6, (const std::string::value_type *)v3, v4);
  *a1 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_100250EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100250EFC()
{
  return 60;
}

uint64_t sub_100250F04()
{
  return 168;
}

uint64_t sub_100250F0C()
{
  return 24;
}

id sub_100250F14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 16), "tilePrefetchActivityInterval");
}

uint64_t sub_100250F1C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t result;

  v2 = (unint64_t)objc_msgSend(*(id *)(a1 + 16), "tilePrefetchPredictionActivityCycleAllowance");
  v3 = v2;
  v4 = HIDWORD(v2);
  LODWORD(result) = objc_msgSend(*(id *)(a1 + 8), "tilePrefetchPredictionActivityCycleAllowance");
  if (v3)
    return v4;
  else
    return result;
}

_BYTE *sub_100250F60(uint64_t a1)
{
  NSObject *v2;
  _BYTE *result;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing cached last fix", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Clearing cached last fix", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::clearLocationData()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  result = objc_msgSend(*(id *)(a1 + 8), "latestPosition");
  if (*result)
    *result = 0;
  return result;
}

void sub_100251108(uint64_t a1, NSObject *a2, CLMotionActivity *a3)
{
  int v6;
  int v7;
  id v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[4];
  uint8_t buf[8];
  char v20;

  objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
  v7 = v6;
  v8 = objc_msgSend(*(id *)(a1 + 8), "navModeEstimator");
  v10 = sub_10002E0F4((uint64_t)v8, (uint64_t)a3, v9);
  objc_msgSend(*(id *)(a1 + 8), "setLatestNavModeEstimate:", v10, v11);
  objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
  v13 = v12;
  if (v7 != v12)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67174657;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "updateLatestMotionActivity state,%{private}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v18[0] = 67174657;
      v18[1] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "updateLatestMotionActivity state,%{private}d", v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::updateLatestMotionActivity(std::chrono::steady_clock::time_point, const CLMotionActivity &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    v15 = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
    if (v13 == 2)
    {
      if (v15)
      {
        sub_1015A2E04(buf, "motion");
        sub_1001CEC00(a1, 2, (uint64_t *)buf);
        if (v20 < 0)
          operator delete(*(void **)buf);
      }
    }
  }
  sub_10025D1A8((uint64_t)objc_msgSend(*(id *)(a1 + 8), "fitnessModeStateMachine"), a3, (uint64_t)a2);
  sub_1015A2E04(buf, "updateLatestMotionActivity");
  sub_10017194C(a1, a2, (uint64_t *)buf);
  if (v20 < 0)
    operator delete(*(void **)buf);
}

void sub_100251388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002513B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v11;
  void **v12;
  _WORD v13[8];
  void *__p[2];
  char v15;
  _BYTE v16[24];

  v7 = *(void **)(a1 + 8);
  v16[0] = 0;
  objc_msgSend(v7, "setLastIndoorError:", v16);
  if (v16[0])
    v16[0] = 0;
  sub_100243EFC(a1, a4);
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    sub_1015A2E04(__p, "pipelined YIELD OK");
    sub_1001CE674(a1, (uint64_t *)__p);
    if (v15 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, "pipelineyeild");
    sub_1001CEC00(a1, 1, (uint64_t *)__p);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning We thought pipeline couldn't figure out it's position but it did. This means we got an update after we decided to shut things down. ", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning We thought pipeline couldn't figure out it's position but it did. This means we got an update after we decided to shut things down. ", v13, 2);
      v12 = (void **)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onUpdateFromPipeline(std::chrono::steady_clock::time_point, const CLLocationProvider_Type::NotificationData &, BOOL)", "%s\n", v11);
      if (v12 != __p)
        free(v12);
    }
  }
  objc_msgSend(*(id *)(a1 + 8), "setPipelinedDidStartLocalizing:", 1);
  v9 = *(_QWORD *)(a1 + 24);
  LODWORD(__p[0]) = 0;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 184))(v9, __p, a3, 0, 0xFFFFFFFFLL, 0);
}

void sub_100251610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100251638(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "kNotificationSleep - stopLocationImmediately()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "kNotificationSleep - stopLocationImmediately()", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onStatusNotification_Sleep(int, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100026094(a1);
}

void sub_1002517D0(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "kNotificationWake - startProvider()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "kNotificationWake - startProvider()", v14, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onStatusNotification_Wake(std::chrono::steady_clock::time_point, int, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  objc_msgSend(*(id *)(a1 + 8), "resetNavModeEstimator");
  if ((*(int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24)) >= 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Start location in wake notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v14[0] = 0;
      LODWORD(v13) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Start location in wake notification", v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onStatusNotification_Wake(std::chrono::steady_clock::time_point, int, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    sub_10003C3FC(a1, a2);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "kNotificationWake - startProvider() done", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v14[0] = 0;
    LODWORD(v13) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "kNotificationWake - startProvider() done", v14, v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onStatusNotification_Wake(std::chrono::steady_clock::time_point, int, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_100251BE8(uint64_t a1, NSObject *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  NSObject *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t *v18;
  const char *v19;
  NSObject *v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t *v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  const char *v34;
  int v35;
  _BYTE v36[10];
  uint64_t *v37;
  _BYTE buf[14];
  uint64_t *v39;
  char v40;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v11 = objc_msgSend(*(id *)(a1 + 8), "state");
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = a5;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@IndoorAvl, update, %{public}d, state, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v27 = qword_1022A0048;
    v28 = objc_msgSend(*(id *)(a1 + 8), "state");
    v35 = 67240448;
    *(_DWORD *)v36 = a5;
    *(_WORD *)&v36[4] = 1026;
    *(_DWORD *)&v36[6] = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "@IndoorAvl, update, %{public}d, state, %{public}d", &v35, 14);
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  switch(a5)
  {
    case 0:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v12 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v13 = a3;
        if (*((char *)a3 + 23) < 0)
          v13 = (uint64_t *)*a3;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Got status update none from: %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v35 = 136315138;
        *(_QWORD *)v36 = a3;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning Got status update none from: %s", (const char *)&v35);
        v15 = (char *)v14;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v14);
        goto LABEL_83;
      }
      break;
    case 1:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v16 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v17 = a3;
        if (*((char *)a3 + 23) < 0)
          v17 = (uint64_t *)*a3;
        v18 = a4;
        if (*((char *)a4 + 23) < 0)
          v18 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v17;
        *(_WORD *)&buf[12] = 2080;
        v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Started downloading %s to %s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        if (*((char *)a4 + 23) < 0)
          a4 = (uint64_t *)*a4;
        v35 = 136315394;
        *(_QWORD *)v36 = a3;
        *(_WORD *)&v36[8] = 2080;
        v37 = a4;
        LODWORD(v34) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Started downloading %s to %s", (const char *)&v35, v34);
        v15 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v19);
        goto LABEL_83;
      }
      break;
    case 2:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v21 = a4;
        if (*((char *)a4 + 23) < 0)
          v21 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Downloaded availability tile to %{private}s - decompressing", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*((char *)a4 + 23) < 0)
          a4 = (uint64_t *)*a4;
        v35 = 136380675;
        *(_QWORD *)v36 = a4;
        LODWORD(v34) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "Downloaded availability tile to %{private}s - decompressing", &v35, v34);
        v32 = (char *)v31;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      objc_msgSend(*(id *)(a1 + 8), "clearLocationGroups");
      if (objc_msgSend(*(id *)(a1 + 8), "state"))
      {
        sub_1015A2E04(buf, "onAvlFileUpdated CLFileUpdate::kUpdateStatusCompleted");
        sub_100173544(a1, (uint64_t)a2, buf);
        if (v40 < 0)
          operator delete(*(void **)buf);
        if (objc_msgSend(*(id *)(a1 + 8), "state") == 2)
        {
          sub_1015A2E04(buf, "onAvlFileUpdateStatusCompleted");
          sub_10017194C(a1, a2, (uint64_t *)buf);
          if (v40 < 0)
            operator delete(*(void **)buf);
        }
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Don't need to reload availability tile - not running", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          LOWORD(v35) = 0;
          LODWORD(v34) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Don't need to reload availability tile - not running", &v35, v34);
          v15 = (char *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v33);
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v23 = a3;
        if (*((char *)a3 + 23) < 0)
          v23 = (uint64_t *)*a3;
        v24 = a4;
        if (*((char *)a4 + 23) < 0)
          v24 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2082;
        v39 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Failed to download %{public}s to %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        if (*((char *)a4 + 23) < 0)
          a4 = (uint64_t *)*a4;
        v35 = 136446466;
        *(_QWORD *)v36 = a3;
        *(_WORD *)&v36[8] = 2082;
        v37 = a4;
        LODWORD(v34) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning Failed to download %{public}s to %{public}s", &v35, v34);
        v15 = (char *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onAvlFileUpdated(std::chrono::steady_clock::time_point, std::string, std::string, CLFileUpdate::UpdateStatus)", "%s\n", v25);
LABEL_83:
        if (v15 != buf)
          free(v15);
      }
      break;
    default:
      return;
  }
}

