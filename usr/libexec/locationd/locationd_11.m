uint64_t sub_1006AB494(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_10214C660 + v4))(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10214CAC0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_1006AB520(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB52C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB538(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB544(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float sub_1006AB550(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

double sub_1006AB55C(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void *sub_1006AB568(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_1006AB594(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void sub_1006AB5A0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        sub_1001F8644((uint64_t)(v4 - 32));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1006AB614@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1006AB68C(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
}

_QWORD *sub_1006AB63C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return sub_1006AB68C(v2, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
}

void sub_1006AB664(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  sub_1006AB5A0(&v1);
}

_QWORD *sub_1006AB68C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_100593090(result, a4);
    result = (_QWORD *)sub_1006AB710((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1006AB6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1006AB5A0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AB710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      sub_1001F869C(a4 + v7 + 8, a2 + v7 + 8);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1006AB774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      sub_1001F8644(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AB798(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_100357184(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  sub_1001F8F88((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v14[2] = v11 + 40;
  sub_1006AB998(a1, v14);
  v12 = a1[1];
  sub_1006ABA28((uint64_t)v14);
  return v12;
}

void sub_1006AB888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006ABA28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AB89C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_10214C660 + v4))(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10214CB30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_1006AB928(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB934(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB940(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_1006AB94C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float sub_1006AB958(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

double sub_1006AB964(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 sub_1006AB970(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_1006AB98C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t *sub_1006AB998(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 40);
    v4 -= 40;
    *(_DWORD *)(v6 - 40) = v7;
    v6 -= 40;
    result = (uint64_t *)sub_1001F8F88(v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1006ABA28(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_1001F8644(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1006ABA78(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1006ABA78(a1, *a2);
    sub_1006ABA78(a1, a2[1]);
    sub_1006AAAD4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_1006ABAC0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v4;
        v8 = *(_DWORD *)(v4 + 32);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_1006ABB80(a1, a3, (uint64_t)v10);
    sub_1000145B0((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1006ABC74((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_1006ABB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1006ABBEC(v5, (uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1006ABBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006ABC74(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006ABBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
  }
  return sub_1005FFE38((uint64_t *)(a2 + 32), a3 + 32);
}

void sub_1006ABC58(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1006ABC74(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1006AAAD4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1006ABCB8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1006ABD54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1006ABD6C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1006ABDF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1006ABE10()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BBB1D8;
      v1[3] = unk_101BBB1E8;
      v1[4] = xmmword_101BBB1F8;
      v1[0] = xmmword_101BBB1B8;
      v1[1] = unk_101BBB1C8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1006ABEE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006ABEFC()
{
  sub_1015A2E04(qword_102303220, "t");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303220, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102303238, "LocationController");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102303238, (void *)&_mh_execute_header);
}

uint64_t sub_1006ABF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  BOOL v19;

  v4 = sub_100E3B4A4(a1, a2, a3);
  *(_QWORD *)v4 = off_10214CB80;
  *(_WORD *)(v4 + 64) = 0;
  sub_1001E4804(&v17);
  v5 = v17;
  v6 = _os_feature_enabled_impl("Workout", "AutostartRouteMaps");
  v19 = 0;
  v7 = sub_1001E4874(v5, "CLProactiveInertialOdometryIsEnabled", &v19);
  v8 = v19;
  if (!v7)
    v8 = v6;
  *(_BYTE *)(a1 + 64) = v8;
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1001E4804(&v17);
  v19 = 0;
  v12 = sub_1001E4874(v17, "CLProactiveInertialOdometryAlwaysOnPolicyOverride", &v19) ^ 1;
  if (v19)
    LOBYTE(v12) = 1;
  *(_BYTE *)(a1 + 65) = v12;
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1006AC0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_100E3B4D0(v2);
  _Unwind_Resume(a1);
}

void sub_1006AC0EC(uint64_t a1, double a2)
{
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v4 = 1;
    if (*(_BYTE *)(a1 + 33))
    {
      if (a2 - *(double *)(a1 + 40) > 600.0)
      {
        if (*(_BYTE *)(a1 + 48))
          v4 = 1;
        else
          v4 = *(_BYTE *)(a1 + 65) != 0;
      }
    }
  }
  *(_BYTE *)(a1 + 32) = v4;
  if (v3 != v4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214CBB0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)buf = 67240192;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#pbio, CLProactiveInertialOdometrySubscription_Watch, fPolicyStateIsSubscribe, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214CBB0);
      v7 = *(unsigned __int8 *)(a1 + 32);
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#pbio, CLProactiveInertialOdometrySubscription_Watch, fPolicyStateIsSubscribe, %{public}d", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLProactiveInertialOdometrySubscription_Watch::_updateSubscriptionState(const CFTimeInterval)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_1006AC2F8(_QWORD *a1)
{
  sub_100E3B4D0(a1);
  operator delete();
}

void sub_1006AC31C(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1006AC3EC(id a1)
{
  qword_102303288 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWifiLocationProviderSilo"));
}

uint64_t sub_1006AC4A0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006ACCA0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023032A8 != -1)
    dispatch_once(&qword_1023032A8, block);
  return qword_102310B68;
}

void sub_1006AC840(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  int v8;
  BOOL v9;
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, emergencyState", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v7 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, emergencyState", &v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v9 = sub_100CD597C(a2);
  v8 = 23;
  sub_1001312E8(a1, (uint64_t)&v8);
  sub_100126D5C((uint64_t)&v8);
}

void sub_1006AC9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006ACA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10055A600((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006ACC78(id a1)
{
  sub_100197040();
  if ((sub_1001B796C() & 2) != 0)
    byte_102303298 = 1;
}

void sub_1006ACCA0()
{
  operator new();
}

void sub_1006ACCE8()
{
  operator delete();
}

void sub_1006ACD0C(uint64_t a1, uint64_t a2)
{
  sub_100794E90(a2, a1);
}

void sub_1006ACDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1006ACDF8(uint64_t a1, void *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  const char *v40;
  int v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  const char *v47;
  uint8_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  id v53;
  id v54;
  int v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char *v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _QWORD v70[5];
  _QWORD v71[5];
  uint64_t v72[3];
  uint64_t v73;
  __int128 v74;
  uint8_t buf[1640];

  v8 = (_QWORD *)sub_1006DAF10(a1, "wifi", a2);
  *v8 = off_10214CC20;
  v8[15] = *a3;
  v9 = v8 + 15;
  v10 = a3[1];
  v8[16] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  sub_1006B13E4(a4, &v74);
  *(_OWORD *)v72 = v74;
  v74 = 0uLL;
  sub_1015A2E04(buf, "");
  sub_1006B0F44(a1 + 168, v72, (__int128 *)buf);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  v13 = (std::__shared_weak_count *)v72[1];
  if (v72[1])
  {
    v14 = (unint64_t *)(v72[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v65 = sub_100129E88(a1 + 224);
  v66 = a1 + 168;
  v67 = a1 + 3752;
  v68 = a1;
  sub_1004C091C((_QWORD *)(a1 + 3752), (uint64_t)a2);
  v19 = 0;
  while (1)
  {
    v20 = (&off_10214CE60)[v19];
    LOBYTE(v73) = 0;
    sub_1001E4804(buf);
    v21 = sub_1001E4874(*(uint64_t *)buf, v20, (BOOL *)&v73);
    v22 = v21;
    v23 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_21;
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v22)
      {
LABEL_22:
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v26 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%s is deprecated. setting this has no effect", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10214CDD0);
          LODWORD(v74) = 136315138;
          *(_QWORD *)((char *)&v74 + 4) = v20;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "%s is deprecated. setting this has no effect", (const char *)&v74);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 0, "void errorOnDeprecatedDefaultWrites()", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
      }
    }
    else
    {
LABEL_21:
      if (v21)
        goto LABEL_22;
    }
    if (++v19 == 7)
    {
      v29 = 0;
      while (2)
      {
        v30 = (&off_10214CE98)[v29];
        v73 = 0;
        sub_1001E4804(buf);
        v31 = sub_1001FD98C(*(uint64_t *)buf, v30, &v73);
        v32 = v31;
        v33 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_39;
        v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          if (v32)
          {
LABEL_40:
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10214CDD0);
            v36 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v30;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%s is deprecated. setting this has no effect", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_10214CDD0);
              LODWORD(v74) = 136315138;
              *(_QWORD *)((char *)&v74 + 4) = v30;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "%s is deprecated. setting this has no effect", (const char *)&v74);
              v38 = (uint8_t *)v37;
              sub_100512490("Generic", 1, 0, 0, "void errorOnDeprecatedDefaultWrites()", "%s\n", v37);
              if (v38 != buf)
                free(v38);
            }
          }
        }
        else
        {
LABEL_39:
          if (v31)
            goto LABEL_40;
        }
        if (++v29 != 3)
          continue;
        break;
      }
      v39 = 0;
      while (2)
      {
        v40 = (&off_10214CEB0)[v39];
        LODWORD(v73) = 0;
        sub_1001E4804(buf);
        v41 = sub_1001E4B84(*(uint64_t *)buf, v40, &v73);
        v42 = v41;
        v43 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_57;
        v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
          if (v42)
          {
LABEL_58:
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10214CDD0);
            v46 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v40;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%s is deprecated. setting this has no effect", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_10214CDD0);
              LODWORD(v74) = 136315138;
              *(_QWORD *)((char *)&v74 + 4) = v40;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "%s is deprecated. setting this has no effect", (const char *)&v74);
              v48 = (uint8_t *)v47;
              sub_100512490("Generic", 1, 0, 0, "void errorOnDeprecatedDefaultWrites()", "%s\n", v47);
              if (v48 != buf)
                free(v48);
            }
          }
        }
        else
        {
LABEL_57:
          if (v41)
            goto LABEL_58;
        }
        if (++v39 == 2)
        {
          LOBYTE(v73) = 0;
          sub_1001E4804(buf);
          sub_1001E4874(*(uint64_t *)buf, "ClearAls", (BOOL *)&v73);
          v49 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if ((_BYTE)v73)
          {
            sub_10136B5B4((_QWORD *)*a4);
            sub_1013695E8(*a4);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10214CDD0);
            v52 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "WlpMetric, ClearAls", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_10214CDD0);
              LOWORD(v74) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, ClearAls", &v74, 2, v65, v66, v9);
              v64 = (uint8_t *)v63;
              sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::CLWifiLocationProvider(id<CLIntersiloUniverse>, std::shared_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v63);
              if (v64 != buf)
                free(v64);
            }
          }
          v53 = objc_msgSend(*(id *)(v68 + 40), "newTimer");
          *(_QWORD *)(v68 + 136) = v53;
          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472;
          v71[2] = sub_1006ADA94;
          v71[3] = &unk_10212ECA0;
          v71[4] = v68;
          objc_msgSend(v53, "setHandler:", v71);
          v54 = objc_msgSend(*(id *)(v68 + 40), "newTimer");
          *(_QWORD *)(v68 + 144) = v54;
          v70[0] = _NSConcreteStackBlock;
          v70[1] = 3221225472;
          v70[2] = sub_1006ADC64;
          v70[3] = &unk_10212ECA0;
          v70[4] = v68;
          objc_msgSend(v54, "setHandler:", v70);
          sub_1004C095C(v67);
          v69 = 0;
          sub_1001E4804(buf);
          v55 = sub_1001E4874(*(uint64_t *)buf, "AlwaysAlsRequestEverything", &v69);
          if (v69)
            v56 = v55;
          else
            v56 = 0;
          v57 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_89;
          v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            if (v56)
LABEL_90:
              *(_BYTE *)(v68 + 360) = 1;
          }
          else
          {
LABEL_89:
            if (v56)
              goto LABEL_90;
          }
          sub_100D2544C(buf);
          sub_100D25B78(*(uint64_t *)buf);
          v60 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          sub_100D97258();
        }
        continue;
      }
    }
  }
}

void sub_1006AD990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  sub_1004C0924(a15);
  sub_100126B34(a11);
  sub_1006AE004(a12);
  v17 = *(_QWORD *)(a16 + 160);
  *(_QWORD *)(a16 + 160) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_100261F44(a13);
  sub_1006DB4AC(a16);
  _Unwind_Resume(a1);
}

void sub_1006ADA94(uint64_t a1)
{
  sub_1006ADA9C(*(_QWORD *)(a1 + 32));
}

void sub_1006ADA9C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  _DWORD v6[202];
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, clienttimer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v5 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, clienttimer", &v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onClientTimer()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  v6[0] = 27;
  sub_1001312E8(a1, (uint64_t)v6);
  sub_100126D5C((uint64_t)v6);
}

void sub_1006ADC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void sub_1006ADC64(uint64_t a1)
{
  sub_1006ADC6C(*(_QWORD *)(a1 + 32));
}

void sub_1006ADC6C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  _DWORD v6[202];
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, wsbtimer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v5 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, wsbtimer", &v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onWsbTimer()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  v6[0] = 28;
  sub_1001312E8(a1, (uint64_t)v6);
  sub_100126D5C((uint64_t)v6);
}

void sub_1006ADE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void sub_1006ADE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onCellLocationProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214CDB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214CDB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006AE2D8(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006ADFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AE004(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_100261F44(a1 + 16);
  return sub_100261F44(a1);
}

uint64_t sub_1006AE03C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_10214CC20;
  sub_1006DB4DC(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
  objc_msgSend(*(id *)(a1 + 136), "invalidate");
  objc_msgSend(*(id *)(a1 + 144), "invalidate");

  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_1004C0BC4((_QWORD *)(a1 + 3752));
  if (*(_QWORD *)(a1 + 160))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@WifiLogic, unregistering for leeched Cell location notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiLogic, unregistering for leeched Cell location notification", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual CLWifiLocationProvider::~CLWifiLocationProvider()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 5);
  }
  sub_1004C0924(a1 + 3752);
  sub_100126B34(a1 + 224);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  sub_100261F44(a1 + 184);
  sub_100261F44(a1 + 168);
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 120);
  sub_1006DB4AC(a1);
  return a1;
}

void sub_1006AE2A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1006AE2B4(uint64_t a1)
{
  sub_1006AE03C(a1);
  operator delete();
}

void sub_1006AE2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  _BYTE v36[513];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _BYTE buf[12];
  char v47;
  int v48;
  _BYTE *v49;
  __int128 __p;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  _BYTE v59[513];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    sub_100B9444C(a4, &__p);
    v7 = (SBYTE7(v51) & 0x80u) == 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@WifiLogic, Cell location notification received, %{private}s", buf, 0xCu);
    if (SBYTE7(v51) < 0)
      operator delete((void *)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v22 = qword_1022A0058;
    sub_100B9444C(a4, buf);
    if (v47 >= 0)
      v23 = buf;
    else
      v23 = *(_BYTE **)buf;
    v48 = 136380675;
    v49 = v23;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v22, 2, "@WifiLogic, Cell location notification received, %{private}s", &v48, 12);
    v25 = v24;
    if (v47 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onCellLocationProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
    if (v25 != (char *)&__p)
      free(v25);
  }
  v8 = *(_OWORD *)(a4 + 112);
  v56 = *(_OWORD *)(a4 + 96);
  v57 = v8;
  v58[0] = *(_OWORD *)(a4 + 128);
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a4 + 140);
  v9 = *(_OWORD *)(a4 + 48);
  v52 = *(_OWORD *)(a4 + 32);
  v53 = v9;
  v10 = *(_OWORD *)(a4 + 80);
  v54 = *(_OWORD *)(a4 + 64);
  v55 = v10;
  v11 = *(_OWORD *)(a4 + 16);
  __p = *(_OWORD *)a4;
  v51 = v11;
  memcpy(v59, (const void *)(a4 + 160), sizeof(v59));
  v12 = *(_QWORD *)(a4 + 680);
  v13 = *(_QWORD *)(a4 + 688);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_OWORD *)(a4 + 776);
  v66 = *(_OWORD *)(a4 + 760);
  v67 = v16;
  v17 = *(_OWORD *)(a4 + 712);
  v62 = *(_OWORD *)(a4 + 696);
  v63 = v17;
  v18 = *(_OWORD *)(a4 + 744);
  v64 = *(_OWORD *)(a4 + 728);
  v65 = v18;
  v68 = *(_BYTE *)(a4 + 792);
  v27 = __p;
  v28 = v51;
  v31 = v54;
  v32 = v55;
  v29 = v52;
  v30 = v53;
  *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v58 + 12);
  v35[0] = v58[0];
  v33 = v56;
  v34 = v57;
  memcpy(v36, v59, sizeof(v36));
  v37 = v12;
  v38 = v13;
  v60 = 0;
  v61 = 0;
  v19 = *(_OWORD *)(a4 + 776);
  v43 = *(_OWORD *)(a4 + 760);
  v44 = v19;
  v45 = *(_BYTE *)(a4 + 792);
  v20 = *(_OWORD *)(a4 + 712);
  v39 = *(_OWORD *)(a4 + 696);
  v40 = v20;
  v21 = *(_OWORD *)(a4 + 728);
  v42 = *(_OWORD *)(a4 + 744);
  v41 = v21;
  v26 = 16;
  sub_1001312E8(a1, (uint64_t)&v26);
  sub_100126D5C((uint64_t)&v26);
}

void sub_1006AE644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_100126D5C((uint64_t)va);
  sub_100261F44(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AE668(uint64_t a1, unsigned int *a2)
{
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  unsigned int v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[808];
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  int v49[202];

  sub_10003DFD4(a1);
  v49[0] = 0;
  if (*a2 > 0x16 || ((1 << *a2) & 0x400019) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v18 = sub_1001B49F8(*a2);
      *(_DWORD *)buf = 136446210;
      v42 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "@WifiLoc, miscunregister, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v23 = qword_1022A0058;
      v24 = sub_1001B49F8(*a2);
      v33 = 136446210;
      v34 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 2, "@WifiLoc, miscunregister, %{public}s", &v33, 12);
      v16 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v25);
      goto LABEL_44;
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_1001B49F8(*a2);
      v33 = 0;
      v7 = sub_1001B7864(a1, &v33, 1);
      v33 = 3;
      v8 = sub_1001B7864(a1, &v33, 1);
      v33 = 4;
      v9 = sub_1001B7864(a1, &v33, 1);
      *(_DWORD *)buf = 136446978;
      v42 = v6;
      v43 = 1026;
      v44 = v7;
      v45 = 1026;
      v46 = v8;
      v47 = 1026;
      v48 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiLogic, entry, unregister, notification, %{public}s, lsb, %{public}d, %{public}d, %{public}d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v10 = qword_1022A0058;
      v11 = sub_1001B49F8(*a2);
      v31 = 0;
      v12 = sub_1001B7864(a1, &v31, 1);
      v31 = 3;
      v13 = sub_1001B7864(a1, &v31, 1);
      v31 = 4;
      v14 = sub_1001B7864(a1, &v31, 1);
      v33 = 136446978;
      v34 = v11;
      v35 = 1026;
      v36 = v12;
      v37 = 1026;
      v38 = v13;
      v39 = 1026;
      v40 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "@WifiLogic, entry, unregister, notification, %{public}s, lsb, %{public}d, %{public}d, %{public}d", &v33, 30);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
LABEL_44:
      if (v16 != buf)
        free(v16);
    }
  }
  v19 = *a2;
  if (!*a2)
  {
LABEL_21:
    *(_DWORD *)buf = 0;
    if (!sub_1001B7864(a1, (int *)buf, 1))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 96))(*(_QWORD *)(a1 + 120), 7);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v20 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WifiEntry, unregister for odometer notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        LOWORD(v33) = 0;
        LODWORD(v30) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiEntry, unregister for odometer notification", &v33, v30);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
    }
    *(_DWORD *)buf = 0;
    if (!sub_1001B7864(a1, (int *)buf, 1))
    {
      *(_DWORD *)buf = 3;
      if (!sub_1001B7864(a1, (int *)buf, 1))
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120), 0);
        *(_DWORD *)buf = 22;
        if (!sub_1001B7864(a1, (int *)buf, 1))
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 3);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 1);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120), 6);
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v21 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WifiEntry, noregistrants", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10214CDD0);
          LOWORD(v33) = 0;
          LODWORD(v30) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiEntry, noregistrants", &v33, v30);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
      }
    }
    *(_DWORD *)buf = *a2;
    sub_1006B1814(v49, (int *)buf);
    sub_100130CBC((uint64_t)v32, (uint64_t)v49);
    sub_1001312E8(a1, (uint64_t)v32);
    sub_100126D5C((uint64_t)v32);
    goto LABEL_40;
  }
  if (v19 != 22)
  {
    if (v19 != 3)
      goto LABEL_40;
    goto LABEL_21;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 64))(*(_QWORD *)(a1 + 120), 12);
  *(_DWORD *)buf = 0;
  if (!sub_1001B7864(a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = 3;
    if (!sub_1001B7864(a1, (int *)buf, 1))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 3);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 2);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120), 6);
    }
  }
LABEL_40:
  sub_100126D5C((uint64_t)v49);
  return 1;
}

void sub_1006AEE94(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9C0]);
  _Unwind_Resume(a1);
}

id sub_1006AEF0C(uint64_t a1)
{
  sub_1006DB4DC(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
  objc_msgSend(*(id *)(a1 + 136), "invalidate");
  return objc_msgSend(*(id *)(a1 + 144), "invalidate");
}

uint64_t sub_1006AEF78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144) && *(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return sub_100127554(a1);
}

_BYTE *sub_1006AEFB0(_BYTE *a1)
{
  _BYTE v3[8];
  void *__p;
  char v5;
  char v6;

  v3[0] = 0;
  v6 = 0;
  sub_10031F08C(a1, (uint64_t)v3);
  if (v6 && v5 < 0)
    operator delete(__p);
  return a1;
}

void sub_1006AF000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006AF024(int *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  const char *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _BYTE buf[12];
  __int16 v13;
  void **v14;
  char v15;
  int v16;
  const char *v17;
  __int16 v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100CF2150(*a1);
    sub_100CF1FAC(a2 + 8, __p);
    v6 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v5;
    v13 = 2081;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@WifiLogic, wifi notification %{private}s, associated state, %{private}s", buf, 0x16u);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v7 = qword_1022A0058;
    v8 = sub_100CF2150(*a1);
    sub_100CF1FAC(a2 + 8, buf);
    if (v15 >= 0)
      v9 = buf;
    else
      v9 = *(_BYTE **)buf;
    v16 = 136380931;
    v17 = v8;
    v18 = 2081;
    v19 = v9;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 0, "@WifiLogic, wifi notification %{private}s, associated state, %{private}s", &v16, 22);
    v11 = v10;
    if (v15 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void logAssociatedStateFromWifiNotification(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)__p)
      free(v11);
  }
}

void sub_1006AF270(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  CFAbsoluteTime Current;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  double v34;
  double v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  CFAbsoluteTime v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  CFAbsoluteTime v51;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67240192;
    LODWORD(v45) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, odometer, %{public}d,", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v19 = *a3;
    v36 = 67240192;
    LODWORD(v37) = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, odometer, %{public}d,", &v36, 8);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (*a3 == 7)
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v10 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a4 + 8);
      v12 = *(_DWORD *)(a4 + 16);
      v13 = *(_DWORD *)(a4 + 20);
      *(_DWORD *)buf = 134349824;
      v45 = v11;
      v46 = 1026;
      v47 = v12;
      v48 = 1026;
      v49 = v13;
      v50 = 2050;
      v51 = Current;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "received odometer update entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u,now,%{public}.lf", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(_DWORD *)(a4 + 16);
      v24 = *(_DWORD *)(a4 + 20);
      v36 = 134349824;
      v37 = v22;
      v38 = 1026;
      v39 = v23;
      v40 = 1026;
      v41 = v24;
      v42 = 2050;
      v43 = Current;
      LODWORD(v32) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "received odometer update entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u,now,%{public}.lf", &v36, v32);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v14 = *(double *)(a4 + 8);
    if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 < 0.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214CEC0);
      v15 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v16 = *(_QWORD *)(a4 + 8);
        v17 = *(_DWORD *)(a4 + 16);
        v18 = *(_DWORD *)(a4 + 20);
        *(_DWORD *)buf = 134349568;
        v45 = v16;
        v46 = 1026;
        v47 = v17;
        v48 = 1026;
        v49 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,received invalid elevation entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214CEC0);
        v27 = *(_QWORD *)(a4 + 8);
        v28 = *(_DWORD *)(a4 + 16);
        v29 = *(_DWORD *)(a4 + 20);
        v36 = 134349568;
        v37 = v27;
        v38 = 1026;
        v39 = v28;
        v40 = 1026;
        v41 = v29;
        LODWORD(v32) = 24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#Warning,received invalid elevation entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u", &v36, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
    }
    else
    {
      v34 = (float)((float)(uint64_t)(*(unsigned int *)(a4 + 16) - (unint64_t)*(unsigned int *)(a4 + 20)) / 100.0);
      v35 = v14;
      v33 = 18;
      sub_1001312E8(a1, (uint64_t)&v33);
      sub_100126D5C((uint64_t)&v33);
    }
  }
}

void sub_1006AF7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006AF7DC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint8_t v11[808];
  uint8_t buf[4];
  int v13[202];

  v13[0] = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, motion", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v10 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, motion", &v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*a3)
  {
    *(_DWORD *)buf = *a4;
    sub_1006B21B0(v13, (int *)buf);
    sub_10021C5C0((uint64_t)v11, (uint64_t)v13);
    sub_1001312E8(a1, (uint64_t)v11);
    sub_100126D5C((uint64_t)v11);
  }
  sub_100126D5C((uint64_t)v13);
}

void sub_1006AF9C4(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9A0]);
  _Unwind_Resume(a1);
}

void sub_1006AF9F0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  _DWORD v10[202];
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, signalEnvironment", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v9 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, signalEnvironment", &v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v10[2] = *a4;
  v10[0] = 15;
  sub_1001312E8(a1, (uint64_t)v10);
  sub_100126D5C((uint64_t)v10);
}

void sub_1006AFBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void sub_1006AFBC4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  __int16 v19;
  uint8_t v20[808];
  uint8_t buf[4];
  int v22[202];

  v22[0] = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, clientNotify", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v19 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, clientNotify", &v19, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*a3 == 4)
  {
    *(_DWORD *)buf = *(_DWORD *)(a4 + 188) == 1;
    sub_1006B22B4(v22, (int *)buf);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v11 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WifiLogic, entry, event, location services toggle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v19 = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiLogic, entry, event, location services toggle", &v19, v18);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    if (*(_DWORD *)(a4 + 188) == 1)
      goto LABEL_28;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v12 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@WifiLogic, #Warning Location Services disabled, clearing database entries", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
    {
LABEL_27:
      sub_1006B0184();
LABEL_28:
      sub_10021C5C0((uint64_t)v20, (uint64_t)v22);
      sub_1001312E8(a1, (uint64_t)v20);
      sub_100126D5C((uint64_t)v20);
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v19 = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiLogic, #Warning Location Services disabled, clearing database entries", &v19, v18);
    v10 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
LABEL_41:
    if (v10 != buf)
      free(v10);
    goto LABEL_27;
  }
  if (!*a3)
  {
    *(_DWORD *)buf = 2;
    sub_1006B22B4(v22, (int *)buf);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v8 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@WifiLogic, entry, event, privacy reset", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_27;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v19 = 0;
    LODWORD(v18) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiLogic, entry, event, privacy reset", &v19, v18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v9);
    goto LABEL_41;
  }
LABEL_29:
  sub_100126D5C((uint64_t)v22);
}

void sub_1006B0148(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9A0]);
  _Unwind_Resume(a1);
}

void sub_1006B0184()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  sub_100D2544C(&v3);
  sub_100D259E0(v3);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_1006B01EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006B0200(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint8_t v12[808];
  int buf[408];
  int v14[202];

  v14[0] = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, alsNotify", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v11 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, alsNotify", &v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v10 != (uint8_t *)buf)
      free(v10);
  }
  v8 = *a3;
  if (*a3 == 1)
  {
    *(_QWORD *)buf = *(_QWORD *)a4;
    sub_1006B25D4((uint64_t)v14, buf);
    goto LABEL_13;
  }
  if (v8 == 2)
  {
    if (!*(_DWORD *)(a4 + 4))
    {
      buf[0] = *(_DWORD *)a4;
      sub_1006B24C8(v14, buf);
    }
    goto LABEL_13;
  }
  if (v8 == 3)
  {
    buf[0] = *(_DWORD *)a4;
    sub_1006B23C4(v14, buf);
LABEL_13:
    sub_10021C5C0((uint64_t)v12, (uint64_t)v14);
    sub_1001312E8(a1, (uint64_t)v12);
    sub_100126D5C((uint64_t)v12);
  }
  sub_100126D5C((uint64_t)v14);
}

void sub_1006B0434(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9A0]);
  _Unwind_Resume(a1);
}

void sub_1006B0468(uint64_t a1, uint64_t a2, int *a3, int32x2_t *a4)
{
  int v6;
  NSObject *v7;
  __int32 v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  __int32 v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  __int32 v20;
  const char *v21;
  uint8_t *v22;
  _BYTE v23[808];
  int v24;
  __int32 v25;
  int32x2_t buf;
  int v27[202];

  v27[0] = 0;
  v6 = *a3;
  if (*a3 > 14)
  {
    if (v6 == 15)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v12 = a4->u8[0];
        buf.i32[0] = 67240192;
        buf.i32[1] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, batterysaver, %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v20 = a4->u8[0];
        v24 = 67240192;
        v25 = v20;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, batterysaver, %{public}d", &v24, 8);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v21);
        if (v22 != (uint8_t *)&buf)
          free(v22);
      }
      buf.i8[0] = a4->i8[0];
      sub_1006B27E4((uint64_t)v27, &buf);
      goto LABEL_30;
    }
    if (v6 == 16)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v9 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        buf.i16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, heartbeat", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        LOWORD(v24) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, heartbeat", &v24, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v16);
        if (v17 != (uint8_t *)&buf)
          free(v17);
      }
      sub_1006B29C8(v27);
      goto LABEL_30;
    }
  }
  else
  {
    if (v6 == 3)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v10 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        buf.i16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, wake", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        LOWORD(v24) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, wake", &v24, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v18);
        if (v19 != (uint8_t *)&buf)
          free(v19);
      }
      sub_1006B28E8(v27);
      goto LABEL_30;
    }
    if (v6 == 6)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v7 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v8 = a4->i32[1];
        buf.i32[0] = 67240192;
        buf.i32[1] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, reach, %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v13 = a4->i32[1];
        v24 = 67240192;
        v25 = v13;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, reach, %{public}d", &v24, 8);
        v15 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v14);
        if (v15 != (uint8_t *)&buf)
          free(v15);
      }
      buf = vrev64_s32(*a4);
      sub_1006B26E0((uint64_t)v27, &buf);
LABEL_30:
      sub_10021C5C0((uint64_t)v23, (uint64_t)v27);
      sub_1001312E8(a1, (uint64_t)v23);
      sub_100126D5C((uint64_t)v23);
    }
  }
  sub_100126D5C((uint64_t)v27);
}

void sub_1006B0A74(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_1006B0AB8(uint64_t a1, uint64_t a2, _DWORD *a3, uint8_t *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _BYTE v11[808];
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;
  _DWORD v15[202];

  v15[0] = 0;
  if (*a3 == 5)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a4;
      *(_DWORD *)buf = 67240192;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, companionnearby, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v8 = *a4;
      v12[0] = 67240192;
      v12[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, entry, companionnearby, %{public}d", v12, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_100197040();
    if (sub_100195F08())
    {
      buf[0] = *a4;
      sub_1006B2AA8((uint64_t)v15, buf);
      sub_10021C5C0((uint64_t)v11, (uint64_t)v15);
      sub_1001312E8(a1, (uint64_t)v11);
      sub_100126D5C((uint64_t)v11);
    }
  }
  sub_100126D5C((uint64_t)v15);
}

void sub_1006B0CC4(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_1006B0CF0()
{
  operator new();
}

void sub_1006B0D98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1006B0DD4()
{
  operator new();
}

void sub_1006B0E84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1006B0EC0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006B0EEC(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1006B0F18(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1006B0F44(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE *v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v6 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_100B15990((_QWORD *)a1, &v16);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1006B1054(a2, &v15);
  *(_OWORD *)(a1 + 16) = v15;
  v12 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v12, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v12 = v13;
  }
  return a1;
}

void sub_1006B1024(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006B1054@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = sub_1006B10AC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1006B1098(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006B10AC(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = off_10214CE20;
  a1[1] = 0;
  sub_100FE3800((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1006B10E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1006B10F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214CE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006B110C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214CE20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006B1140(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1006B1150(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1006B117C(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 13;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 26;
LABEL_7:
    a1[4] = v8;
  }
  sub_1006B121C(a1);
  result = sub_1006B134C((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006B121C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_10047F918((uint64_t)a1, 0);
    sub_10047F974(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1006B128C((uint64_t)a1);
}

void sub_1006B128C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1006B134C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1006B128C(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1006B13B8(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

_QWORD *sub_1006B13E4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1006B143C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1006B1428(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006B143C(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_10214CF10;
  a1[1] = 0;
  sub_1006B14F4((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1006B1488(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1006B149C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214CF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006B14B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214CF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006B14E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1006B14F4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = a3[1];
  v9 = *a3;
  v10 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1009FD29C(a2, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1006B1578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1006B158C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  double result;

  v3 = *a1;
  sub_1006B15D8(a2, *a1);
  *(_QWORD *)(a2 + 40) = v3[5];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)v3 + 48);
  *(_QWORD *)&result = sub_1005C7FFC(a2 + 56, (uint64_t)(v3 + 7)).n128_u64[0];
  return result;
}

void sub_1006B15D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_1006B1678(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_1006B1678(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10012758C(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

__n128 sub_1006B16CC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __n128 result;

  v3 = *a1;
  v4 = **a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)*a1 + 8);
  *(_QWORD *)a2 = v4;
  v5 = a2 + 16;
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)v5);
  v6 = *((_OWORD *)v3 + 1);
  *(_QWORD *)(v5 + 16) = v3[4];
  *(_OWORD *)v5 = v6;
  *((_BYTE *)v3 + 39) = 0;
  *((_BYTE *)v3 + 16) = 0;
  v7 = *(_OWORD *)((char *)v3 + 100);
  v8 = *(_OWORD *)(v3 + 11);
  v9 = *(_OWORD *)(v3 + 9);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(v3 + 7);
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(_OWORD *)(a2 + 100) = v7;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v3 + 5);
  v10 = (void **)(a2 + 120);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*v10);
  result = *(__n128 *)(v3 + 15);
  *(_QWORD *)(a2 + 136) = v3[17];
  *(__n128 *)v10 = result;
  *((_BYTE *)v3 + 143) = 0;
  *((_BYTE *)v3 + 120) = 0;
  return result;
}

void sub_1006B1788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 96) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)(v4 + 8) = *(_QWORD *)a2;
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 72) = v8;
    *(_OWORD *)(v4 + 56) = v7;
    *(_OWORD *)(v4 + 40) = v6;
    *(_BYTE *)(v4 + 96) = 1;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
}

void sub_1006B1814(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B18C0(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 26;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B18A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B18C0(int *a1, int **a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  v5 = v4 >= 0x1A;
  v6 = v4 - 26;
  if (v5)
  {
    switch(v6)
    {
      case 0u:
        a1[2] = **a2;
        result = 1;
        break;
      case 1u:
      case 2u:
      case 3u:
        return result;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B1920(int *a1)
{
  _DWORD v2[202];

  if ((sub_1006B19B8(a1) & 1) == 0)
  {
    v2[0] = 1;
    sub_100131B34((uint64_t)a1, (uint64_t)v2);
    sub_100126D5C((uint64_t)v2);
  }
}

void sub_1006B199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B19B8(int *a1)
{
  int v1;

  v1 = *a1 ^ (*a1 >> 31);
  if ((v1 - 2) < 0x1C || v1 == 0)
    return 0;
  if (v1 != 1)
    sub_10055A5D8();
  return 1;
}

void sub_1006B1A1C(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  int v5;
  char v6;

  v4 = a2;
  if ((sub_1006B1AC8(a1, &v4) & 1) == 0)
  {
    v6 = *a2;
    v5 = 3;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B1AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1AC8(uint64_t a1, _BYTE **a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 - 4 < 0x1A || v2 < 3)
    return 0;
  if (v2 != 3)
    sub_10055A5D8();
  *(_BYTE *)(a1 + 8) = **a2;
  return 1;
}

void sub_1006B1B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  v4 = a2;
  if ((sub_1006B1BFC(a1, &v4) & 1) == 0)
  {
    v6 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8 = *(_DWORD *)(a2 + 24);
    v5 = 8;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B1BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1BFC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  result = 0;
  v4 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if ((v4 - 9) >= 0x15)
  {
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        return result;
      case 8:
        v5 = *a2;
        sub_1000ADC24((uint64_t *)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(v5 + 16);
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v5 + 24);
        result = 1;
        break;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B1C88(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B1D34(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 4;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B1D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1D34(int *a1, int **a2)
{
  unsigned int v2;

  v2 = *a1 ^ (*a1 >> 31);
  if (v2 - 5 < 0x19 || v2 < 4)
    return 0;
  if (v2 != 4)
    sub_10055A5D8();
  a1[2] = **a2;
  return 1;
}

uint64_t sub_1006B1DA4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = *a1;
  sub_1006B15D8(a2, *a1);
  *(_QWORD *)(a2 + 40) = v3[5];
  *(_BYTE *)(a2 + 48) = *((_BYTE *)v3 + 48);
  sub_1005C7FFC(a2 + 56, (uint64_t)(v3 + 7));
  return 1;
}

void sub_1006B1DF4(int *a1)
{
  _DWORD v2[202];

  if ((sub_1006B1E8C(a1) & 1) == 0)
  {
    v2[0] = 2;
    sub_100131B34((uint64_t)a1, (uint64_t)v2);
    sub_100126D5C((uint64_t)v2);
  }
}

void sub_1006B1E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1E8C(int *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (*a1 >> 31);
  if (v1 - 3 < 0x1B || v1 < 2)
    return 0;
  if (v1 != 2)
    sub_10055A5D8();
  return 1;
}

void sub_1006B1EF0(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = a2;
  if ((sub_1006B1FE8(a1, &v5) & 1) == 0)
  {
    LOBYTE(v7) = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v8 = *(_OWORD *)(a2 + 8);
      v4 = *(_OWORD *)(a2 + 48);
      v10 = *(_OWORD *)(a2 + 32);
      v7 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v11 = v4;
      v12 = *(_OWORD *)(a2 + 64);
      v13 = *(_QWORD *)(a2 + 80);
      v14 = 1;
    }
    v6 = 5;
    sub_100131B34((uint64_t)a1, (uint64_t)&v6);
    sub_100126D5C((uint64_t)&v6);
  }
}

void sub_1006B1FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B1FE8(int *a1, uint64_t *a2)
{
  uint64_t result;
  int v4;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  if ((v4 - 6) >= 0x18)
  {
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return result;
      case 5:
        sub_1005C7FFC((uint64_t)(a1 + 2), *a2);
        result = 1;
        break;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B2050(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v5 = a2;
  if ((sub_1006B2148(a1, &v5) & 1) == 0)
  {
    LOBYTE(v7) = 0;
    v14 = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v8 = *(_OWORD *)(a2 + 8);
      v4 = *(_OWORD *)(a2 + 48);
      v10 = *(_OWORD *)(a2 + 32);
      v7 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v11 = v4;
      v12 = *(_OWORD *)(a2 + 64);
      v13 = *(_QWORD *)(a2 + 80);
      v14 = 1;
    }
    v6 = 6;
    sub_100131B34((uint64_t)a1, (uint64_t)&v6);
    sub_100126D5C((uint64_t)&v6);
  }
}

void sub_1006B212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2148(int *a1, uint64_t *a2)
{
  uint64_t result;
  int v4;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  if ((v4 - 7) >= 0x17)
  {
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        return result;
      case 6:
        sub_1005C7FFC((uint64_t)(a1 + 2), *a2);
        result = 1;
        break;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B21B0(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B225C(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 11;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B2240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B225C(int *a1, int **a2)
{
  uint64_t v2;

  v2 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return v2;
    case 0xB:
      a1[2] = **a2;
      v2 = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return v2;
}

void sub_1006B22B4(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B2360(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 9;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B2344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2360(int *a1, int **a2)
{
  uint64_t result;
  int v4;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  if ((v4 - 10) >= 0x14)
  {
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        return result;
      case 9:
        a1[2] = **a2;
        result = 1;
        break;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B23C4(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B2470(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 19;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2470(int *a1, int **a2)
{
  uint64_t v2;

  v2 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return v2;
    case 0x13:
      a1[2] = **a2;
      v2 = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return v2;
}

void sub_1006B24C8(int *a1, int *a2)
{
  int *v4;
  _DWORD v5[202];

  v4 = a2;
  if ((sub_1006B2574(a1, &v4) & 1) == 0)
  {
    v5[2] = *a2;
    v5[0] = 22;
    sub_100131B34((uint64_t)a1, (uint64_t)v5);
    sub_100126D5C((uint64_t)v5);
  }
}

void sub_1006B2558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2574(int *a1, int **a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = 0;
  v4 = *a1 ^ (*a1 >> 31);
  v5 = v4 >= 0x16;
  v6 = v4 - 22;
  if (v5)
  {
    switch(v6)
    {
      case 0u:
        a1[2] = **a2;
        result = 1;
        break;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        return result;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B25D4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;

  v4 = a2;
  if ((sub_1006B2680(a1, &v4) & 1) == 0)
  {
    v6 = *a2;
    v5 = 20;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B2664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2680(uint64_t a1, _QWORD **a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  result = 0;
  v4 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  v5 = v4 >= 0x14;
  v6 = v4 - 20;
  if (v5)
  {
    switch(v6)
    {
      case 0u:
        *(_QWORD *)(a1 + 8) = **a2;
        result = 1;
        break;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
        return result;
      default:
        sub_10055A5D8();
    }
  }
  return result;
}

void sub_1006B26E0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;

  v4 = a2;
  if ((sub_1006B278C(a1, &v4) & 1) == 0)
  {
    v6 = *a2;
    v5 = 10;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B278C(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;

  v2 = 0;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return v2;
    case 0xA:
      *(_QWORD *)(a1 + 8) = **a2;
      v2 = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return v2;
}

void sub_1006B27E4(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  int v5;
  char v6;

  v4 = a2;
  if ((sub_1006B2890(a1, &v4) & 1) == 0)
  {
    v6 = *a2;
    v5 = 12;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B2874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2890(uint64_t a1, _BYTE **a2)
{
  uint64_t v2;

  v2 = 0;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return v2;
    case 0xC:
      *(_BYTE *)(a1 + 8) = **a2;
      v2 = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return v2;
}

void sub_1006B28E8(int *a1)
{
  _DWORD v2[202];

  if ((sub_1006B2980(a1) & 1) == 0)
  {
    v2[0] = 13;
    sub_100131B34((uint64_t)a1, (uint64_t)v2);
    sub_100126D5C((uint64_t)v2);
  }
}

void sub_1006B2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2980(int *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1 ^ (*a1 >> 31);
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return result;
    case 13:
      result = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

void sub_1006B29C8(int *a1)
{
  _DWORD v2[202];

  if ((sub_1006B2A60(a1) & 1) == 0)
  {
    v2[0] = 17;
    sub_100131B34((uint64_t)a1, (uint64_t)v2);
    sub_100126D5C((uint64_t)v2);
  }
}

void sub_1006B2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2A60(int *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1 ^ (*a1 >> 31);
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return result;
    case 17:
      result = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

void sub_1006B2AA8(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  int v5;
  char v6;

  v4 = a2;
  if ((sub_1006B2B54(a1, &v4) & 1) == 0)
  {
    v6 = *a2;
    v5 = 14;
    sub_100131B34(a1, (uint64_t)&v5);
    sub_100126D5C((uint64_t)&v5);
  }
}

void sub_1006B2B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100126D5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2B54(uint64_t a1, _BYTE **a2)
{
  uint64_t v2;

  v2 = 0;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return v2;
    case 0xE:
      *(_BYTE *)(a1 + 8) = **a2;
      v2 = 1;
      break;
    default:
      sub_10055A5D8();
  }
  return v2;
}

char *sub_1006B2BAC(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_10025E660(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = a2[2];
      a2 = (_QWORD *)*a2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1006B2C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006B2C20@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = sub_1006B2C78(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1006B2C64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006B2C78(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = off_10214CF60;
  a1[1] = 0;
  sub_10104B430((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1006B2CB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1006B2CC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214CF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006B2CD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214CF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006B2D0C(uint64_t a1)
{
  return sub_10104B594(a1 + 24);
}

void sub_1006B2D18()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1006B2DB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1006B2DCC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1006B2E58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2E70()
{
  sub_100197040();
  return sub_100195F08();
}

double sub_1006B2F68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int8x16_t v4;
  double result;
  int v6;
  int v7;
  int v8;

  v3 = sub_101679A68(a2);
  v4 = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)a1;
  *(int8x16_t *)(v3 + 64) = v4;
  *(int32x2_t *)v4.i8 = vrev64_s32(*(int32x2_t *)(a1 + 56));
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 104) = v4.i64[0];
  *(int8x16_t *)(v3 + 24) = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
  result = *(double *)(a1 + 88);
  v4.i64[0] = *(_QWORD *)(a1 + 96);
  *(double *)(v3 + 40) = result;
  v6 = *(_DWORD *)(v3 + 128);
  *(_BYTE *)(v3 + 124) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v3 + 125) = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(v3 + 123) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v3 + 80) = v4.i64[0];
  *(_BYTE *)(v3 + 121) = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(v3 + 120) = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(v3 + 122) = *(_BYTE *)(a1 + 129);
  v7 = *(_DWORD *)(a1 + 124);
  v8 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(v3 + 128) = v6 | 0x3FFBFF;
  *(_DWORD *)(v3 + 112) = v8;
  *(_DWORD *)(v3 + 116) = v7;
  return result;
}

double sub_1006B301C@<D0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int32 v7;
  __int32 v8;
  const __CFString *v9;
  char *CStringPtr;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  __n128 __p;
  char v23;

  sub_101616618((uint64_t)a2);
  a2[5] = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  a2[4].i64[0] = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 72);
  a2[7].i64[1] = *(_QWORD *)(a1 + 64);
  v7 = a2[9].i32[2];
  a2[6].i32[0] = *(_DWORD *)(a1 + 24);
  a2[2].i64[1] = v5;
  a2[3].i64[0] = v4;
  a2[2].i64[0] = v6;
  a2[1] = vextq_s8(*(int8x16_t *)(a1 + 80), *(int8x16_t *)(a1 + 80), 8uLL);
  v8 = *(_DWORD *)(a1 + 96);
  a2[9].i32[2] = v7 | 0x8C1FF;
  a2[8].i32[3] = v8;
  v9 = *(const __CFString **)(a1 + 104);
  if (v9)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(v9, 0x8000100u);
    if (CStringPtr)
    {
      sub_1015A2E04(&__p, CStringPtr);
      sub_1006B31B8((uint64_t)a2, &__p);
      if (v23 < 0)
        operator delete((void *)__p.n128_u64[0]);
    }
  }
  v11 = a2[9].i32[2];
  a2[9].i16[2] = *(_WORD *)(a1 + 112);
  v12 = *(_DWORD *)(a1 + 148);
  a2[8].i32[2] = *(_DWORD *)(a1 + 144);
  a2[9].i32[0] = v12;
  v13 = *(unsigned __int8 *)(a1 + 152);
  a2[6].i64[1] = *(_QWORD *)(a1 + 156);
  v14 = *(unsigned __int8 *)(a1 + 165);
  a2[6].i32[1] = *(unsigned __int8 *)(a1 + 166);
  a2[7].i32[0] = *(unsigned __int8 *)(a1 + 164);
  a2[7].i32[1] = v14;
  v15 = *(_DWORD *)(a1 + 168);
  a2[9].i32[2] = v11 | 0x773E00;
  a2[8].i32[0] = v15;
  a2[8].i32[1] = v13;
  sub_1016181AC((uint64_t)a2);
  v16 = a2->i64[1];
  v17 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(v16 + 32) |= 1u;
  *(_QWORD *)(v16 + 8) = v17;
  v18 = a2->i64[1];
  v19 = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v18 + 32) |= 2u;
  *(_QWORD *)(v18 + 16) = v19;
  v20 = a2->i64[1];
  result = *(double *)(a1 + 136);
  *(_BYTE *)(v20 + 32) |= 4u;
  *(double *)(v20 + 24) = result;
  return result;
}

void sub_1006B3184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  PB::Base *v15;

  if (a15 < 0)
    operator delete(__p);
  sub_1016166A0(v15);
  _Unwind_Resume(a1);
}

__n128 sub_1006B31B8(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_1006B3338(a1);
  v4 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t sub_1006B3208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  double v7;

  result = sub_101618210(a2);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_WORD *)(result + 72);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(result + 48) = v4;
  *(_BYTE *)(result + 69) = *(_BYTE *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(result + 70) = *(_BYTE *)(a1 + 88);
  v7 = *(double *)(a1 + 96);
  *(_QWORD *)(result + 8) = v6;
  *(double *)(result + 16) = v7;
  *(_WORD *)(result + 72) = v5 | 0x7FF;
  *(_BYTE *)(result + 68) = v7 != 0.0;
  return result;
}

__n128 sub_1006B3280@<Q0>(int8x16_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int v9;
  int v10;
  int v11;
  __n128 result;
  char v13;

  v3 = sub_10167B100(a2);
  v4 = a1->i64[0];
  v5 = a1->i64[1];
  *(_QWORD *)(v3 + 152) = a1[1].i64[0];
  *(_QWORD *)(v3 + 160) = v4;
  *(int8x16_t *)(v3 + 136) = vextq_s8(a1[2], a1[2], 8uLL);
  *(_QWORD *)(v3 + 56) = a1[3].i64[1];
  *(_QWORD *)(v3 + 64) = v5;
  v6 = a1[5];
  *(int8x16_t *)(v3 + 24) = a1[4];
  *(int8x16_t *)(v3 + 40) = vextq_s8(v6, v6, 8uLL);
  v7 = a1[7];
  *(int8x16_t *)(v3 + 8) = a1[6];
  *(int8x16_t *)(v3 + 120) = vextq_s8(v7, v7, 8uLL);
  v8 = a1[9];
  *(int8x16_t *)(v3 + 72) = a1[8];
  v9 = *(_DWORD *)(v3 + 188);
  *(_BYTE *)(v3 + 184) = a1[1].i8[8];
  *(_WORD *)(v3 + 182) = a1[3].i16[0];
  v10 = a1[11].i32[0];
  v11 = a1[11].u8[5];
  *(_DWORD *)(v3 + 168) = a1[11].u8[4];
  *(_DWORD *)(v3 + 172) = v11;
  *(_DWORD *)(v3 + 176) = v10;
  *(_BYTE *)(v3 + 180) = a1[11].i8[6];
  *(int8x16_t *)(v3 + 104) = v8;
  result = (__n128)a1[10];
  *(__n128 *)(v3 + 88) = result;
  v13 = a1[11].i8[7];
  *(_DWORD *)(v3 + 188) = v9 | 0xFFFFFFF;
  *(_BYTE *)(v3 + 181) = v13;
  return result;
}

uint64_t sub_1006B3338(uint64_t result)
{
  if (!*(_QWORD *)(result + 72))
    operator new();
  return result;
}

void sub_1006B3398(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

double sub_1006B33E0(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;
  unsigned int v9;
  unsigned int *v10;

  v2 = *(void ***)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 14;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 28;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  v7 = *(_QWORD **)(a1 + 56);
  *(_DWORD *)(a1 + 72) = 4;
  sub_100008848(a1 + 48, v7);
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v9 = 0;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 1;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 2;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 3;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 4;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 5;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 6;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 7;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 8;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 9;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  v9 = 10;
  v10 = &v9;
  sub_10021083C((uint64_t **)(a1 + 48), &v9, (uint64_t)&unk_101B9EB60, &v10)[5] = (uint64_t *)0xBFF0000000000000;
  result = -1.0;
  *(_OWORD *)(a1 + 80) = xmmword_101BBBED0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_1006B36A4(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_DWORD *)(a1 + 72) = 4;
  *(_OWORD *)(a1 + 80) = xmmword_101BBBED0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  sub_1006B33E0(a1);
  return a1;
}

void sub_1006B3704(uint64_t a1, double *a2, __int128 *a3)
{
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  NSObject *v12;
  double v13;
  unsigned int v14;
  int v15;
  int v16;
  double v17;
  unsigned int v18;
  int v19;
  int v20;
  const char *v21;
  char *v22;
  int v23;
  double v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  _BYTE buf[24];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6 >= 0x12D)
  {
    ++*(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 40) = v6 - 1;
    sub_1006B5478(a1, 1);
  }
  *(double *)buf = *a2;
  v7 = a3[4];
  v38 = a3[5];
  v8 = a3[7];
  v39 = a3[6];
  v40 = v8;
  v9 = *a3;
  v34 = a3[1];
  v10 = a3[3];
  v35 = a3[2];
  v36 = v10;
  v37 = v7;
  v41 = *((_QWORD *)a3 + 16);
  *(_OWORD *)&buf[8] = v9;
  sub_1006B39B4((_QWORD *)a1, (uint64_t)buf);
  v11 = *(_DWORD *)(a1 + 72);
  sub_1006B3A84(a1, a2, (unsigned int *)a3);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
  v12 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a2;
    v14 = *(_DWORD *)a3;
    v15 = *((_DWORD *)a3 + 1);
    v16 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 134350080;
    *(double *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v14;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v15;
    LOWORD(v34) = 1026;
    *(_DWORD *)((char *)&v34 + 2) = v11;
    WORD3(v34) = 1026;
    DWORD2(v34) = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#motion,dynamics mode on motion update,mct,%{public}.3f,type,%{public}d,confidence,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d", buf, 0x24u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
    v17 = *a2;
    v18 = *(_DWORD *)a3;
    v19 = *((_DWORD *)a3 + 1);
    v20 = *(_DWORD *)(a1 + 72);
    v23 = 134350080;
    v24 = v17;
    v25 = 1026;
    v26 = v18;
    v27 = 1026;
    v28 = v19;
    v29 = 1026;
    v30 = v11;
    v31 = 1026;
    v32 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#motion,dynamics mode on motion update,mct,%{public}.3f,type,%{public}d,confidence,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d", &v23, 36);
    v22 = (char *)v21;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionMotionActivity::motionActivityUpdate(const CFTimeInterval &, const CLMotionActivity &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_1006B39A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

__n128 sub_1006B39B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 28 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006B54D4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1C)) + 144 * (v7 % 0x1C);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  result = *(__n128 *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(__n128 *)(v8 + 80) = result;
  *(_OWORD *)(v8 + 96) = v13;
  ++a1[5];
  return result;
}

uint64_t sub_1006B3A84(uint64_t a1, double *a2, unsigned int *a3)
{
  int isVehicularHighConfidence;
  int v7;
  uint64_t **v8;
  double v9;
  uint64_t result;
  int isTypeStatic;
  int v12;
  uint64_t v13;
  __n128 v14;
  int v15;
  int v16;
  int isTypeRunning;
  unsigned int v18;
  unsigned int *v19;

  if (CLMotionActivity::isTypeDriving(*a3))
  {
    isVehicularHighConfidence = CLMotionActivity::isVehicularHighConfidence(a3[25]);
    if ((int)a3[1] > 0)
      v7 = 1;
    else
      v7 = isVehicularHighConfidence;
    v8 = (uint64_t **)(a1 + 48);
    if (v7 == 1)
    {
      *(_DWORD *)(a1 + 72) = 7;
      v9 = *a2;
      v18 = 7;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 6;
      v9 = *a2;
      v18 = 6;
    }
    goto LABEL_7;
  }
  isTypeStatic = CLMotionActivity::isTypeStatic(*a3);
  if ((int)a3[1] > 0)
    v12 = isTypeStatic;
  else
    v12 = 0;
  if (v12 == 1)
  {
LABEL_12:
    *(_DWORD *)(a1 + 72) = 1;
    v9 = *a2;
    v18 = 1;
    v19 = &v18;
    result = (uint64_t)sub_10021083C((uint64_t **)(a1 + 48), &v18, (uint64_t)&unk_101B9EB60, &v19);
    goto LABEL_34;
  }
  if (CLMotionActivity::isTypeCycling(*a3))
  {
    *(_DWORD *)(a1 + 72) = 6;
    v9 = *a2;
    v18 = 6;
    v19 = &v18;
    result = (uint64_t)sub_10021083C((uint64_t **)(a1 + 48), &v18, (uint64_t)&unk_101B9EB60, &v19);
    goto LABEL_34;
  }
  if ((CLMotionActivity::isTypePedestrian(*a3) & 1) == 0
    && !CLMotionActivity::isTypeIndoorPedestrian(*a3))
  {
    if ((CLMotionActivity::isTypeUnclassifiedMoving(*a3) & 1) != 0
      || ((v15 = CLMotionActivity::isTypeStatic(*a3), !a3[1]) ? (v16 = v15) : (v16 = 0), v16 == 1))
    {
      if (CLMotionActivity::isTypeInVehicle(*a3, v14))
        goto LABEL_12;
      result = sub_1006B4864(a1, a2, 600.0);
      if ((result & 1) != 0)
        return result;
    }
LABEL_33:
    *(_DWORD *)(a1 + 72) = 4;
    v9 = *a2;
    v18 = 4;
    v19 = &v18;
    result = (uint64_t)sub_10021083C((uint64_t **)(a1 + 48), &v18, (uint64_t)&unk_101B9EB60, &v19);
    goto LABEL_34;
  }
  if ((int)a3[1] < 1)
  {
    *(_DWORD *)(a1 + 72) = 3;
    v9 = *a2;
    v18 = 3;
    v19 = &v18;
    result = (uint64_t)sub_10021083C((uint64_t **)(a1 + 48), &v18, (uint64_t)&unk_101B9EB60, &v19);
    goto LABEL_34;
  }
  if (CLMotionActivity::isTypeWalking(*a3))
    goto LABEL_33;
  isTypeRunning = CLMotionActivity::isTypeRunning(*a3, v13);
  v8 = (uint64_t **)(a1 + 48);
  if (isTypeRunning)
  {
    *(_DWORD *)(a1 + 72) = 5;
    v9 = *a2;
    v18 = 5;
  }
  else
  {
    *(_DWORD *)(a1 + 72) = 3;
    v9 = *a2;
    v18 = 3;
  }
LABEL_7:
  v19 = &v18;
  result = (uint64_t)sub_10021083C(v8, &v18, (uint64_t)&unk_101B9EB60, &v19);
LABEL_34:
  *(double *)(result + 40) = v9;
  return result;
}

uint64_t sub_1006B3DC4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = a1[5];
  if (v4 >= 0x12D)
  {
    ++a1[4];
    a1[5] = v4 - 1;
    sub_1006B5478((uint64_t)a1, 1);
  }
  sub_1006B39B4(a1, a2);
  return sub_1006B3A84((uint64_t)a1, (double *)a2, (unsigned int *)(a2 + 8));
}

uint64_t **sub_1006B3E28(uint64_t a1, uint64_t **a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t **result;
  unsigned int v6;
  unsigned int *v7;

  v6 = a3;
  v4 = *a2;
  v7 = &v6;
  result = sub_10021083C((uint64_t **)(a1 + 48), &v6, (uint64_t)&unk_101B9EB60, &v7);
  result[5] = v4;
  *(_DWORD *)(a1 + 72) = v6;
  return result;
}

BOOL sub_1006B3E90(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = a1[5];
  if (v2)
  {
    v3 = (_OWORD *)(*(_QWORD *)(a1[1] + 8 * ((v2 + a1[4] - 1) / 0x1CuLL)) + 144 * ((v2 + a1[4] - 1) % 0x1CuLL));
    v4 = v3[4];
    v6 = v3[1];
    v5 = v3[2];
    a2[3] = v3[3];
    a2[4] = v4;
    a2[1] = v6;
    a2[2] = v5;
    v7 = v3[8];
    v9 = v3[5];
    v8 = v3[6];
    a2[7] = v3[7];
    a2[8] = v7;
    a2[5] = v9;
    a2[6] = v8;
    *a2 = *v3;
  }
  return v2 != 0;
}

void sub_1006B3F0C(uint64_t a1, uint64_t **a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int isTypePedestrian;
  uint64_t v10;
  _BOOL4 v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  const char *v15;
  char *v16;
  double v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t **v20;
  uint64_t *v22;
  NSObject *v23;
  uint64_t *v24;
  uint64_t *v25;
  const char *v26;
  double v27;
  uint64_t *v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t **v35;
  unsigned int v36;
  NSObject *v37;
  uint64_t *v38;
  int v39;
  int v40;
  char v41;
  char v42;
  double v43;
  double v44;
  uint64_t *v45;
  int v46;
  int v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  _BYTE buf[12];
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;

  *(_QWORD *)(a1 + 80) = *a2;
  v6 = *a3;
  v7 = a3[1];
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a3 + 8);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  v8 = *(_DWORD *)(a1 + 72);
  isTypePedestrian = CLMotionActivity::isTypePedestrian(*((unsigned int *)a3 + 2));
  v10 = *((unsigned int *)a3 + 2);
  if (!isTypePedestrian)
  {
    if (!CLMotionActivity::isTypeCycling(v10) || *(_DWORD *)(a1 + 72) == 6)
    {
      if (!*((_DWORD *)a3 + 2) && (*(_DWORD *)(a1 + 72) - 5) <= 1)
      {
        *(_DWORD *)(a1 + 72) = 3;
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
        v12 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
        {
          v13 = *a2;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#workout,workout ended from a running or cycling session, reverting dynamics mode to moving pedestrian,mct,%{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01B0 != -1)
            dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
          v14 = *a2;
          v51 = 134349056;
          v52 = v14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#workout,workout ended from a running or cycling session, reverting dynamics mode to moving pedestrian,mct,%{public}.3f", &v51, 12);
          v16 = (char *)v15;
          sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionMotionActivity::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v15);
          goto LABEL_44;
        }
      }
      goto LABEL_50;
    }
    *(_DWORD *)(a1 + 72) = 6;
    v34 = *a2;
    v51 = 6;
    *(_QWORD *)buf = &v51;
    v35 = sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
LABEL_47:
    v35[5] = v34;
    goto LABEL_50;
  }
  if (CLMotionActivity::isTypeWalking(v10))
    v11 = *(_DWORD *)(a1 + 72) != 4;
  else
    v11 = 0;
  v51 = 4;
  *(_QWORD *)buf = &v51;
  v17 = *((double *)sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
  if (CLMotionActivity::isTypeRunning(*((unsigned int *)a3 + 2), v18))
    v19 = *(_DWORD *)(a1 + 72) != 5;
  else
    v19 = 0;
  v51 = 5;
  *(_QWORD *)buf = &v51;
  v20 = sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  if (v17 <= 0.0 && v11)
  {
    *(_DWORD *)(a1 + 72) = 4;
    v22 = *a2;
    v51 = 4;
    *(_QWORD *)buf = &v51;
    sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v22;
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
    v23 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#workout,setting dynamics walking mode for the first time,mct,%{public}.3f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
      v25 = *a2;
      v51 = 134349056;
      v52 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#workout,setting dynamics walking mode for the first time,mct,%{public}.3f", &v51, 12);
      v16 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionMotionActivity::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v26);
LABEL_44:
      if (v16 != buf)
        free(v16);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  v27 = *((double *)v20 + 5);
  if (v27 > 0.0 || !v19)
  {
    v36 = *(_DWORD *)(a1 + 72);
    if (v36 <= 0xA && ((1 << v36) & 0x7C7) != 0)
      goto LABEL_50;
    v41 = !v11;
    if (v17 <= 0.0)
      v41 = 1;
    if ((v41 & 1) != 0)
    {
      v42 = !v19;
      if (v27 <= 0.0)
        v42 = 1;
      if ((v42 & 1) != 0)
        goto LABEL_50;
      v51 = 5;
      *(_QWORD *)buf = &v51;
      if (*((double *)sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) <= 0.0)
        goto LABEL_50;
      v43 = *(double *)a2;
      v51 = 5;
      *(_QWORD *)buf = &v51;
      if (v43 - *((double *)sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) <= 10.0)
        goto LABEL_50;
      *(_DWORD *)(a1 + 72) = 5;
      v34 = *a2;
      v51 = 5;
      *(_QWORD *)buf = &v51;
      v35 = sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    }
    else
    {
      v51 = 4;
      *(_QWORD *)buf = &v51;
      if (*((double *)sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) <= 0.0)
        goto LABEL_50;
      v44 = *(double *)a2;
      v51 = 4;
      *(_QWORD *)buf = &v51;
      if (v44 - *((double *)sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) <= 10.0)
        goto LABEL_50;
      *(_DWORD *)(a1 + 72) = 4;
      v34 = *a2;
      v51 = 4;
      *(_QWORD *)buf = &v51;
      v35 = sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
    }
    goto LABEL_47;
  }
  *(_DWORD *)(a1 + 72) = 5;
  v29 = *a2;
  v51 = 5;
  *(_QWORD *)buf = &v51;
  sub_10021083C((uint64_t **)(a1 + 48), &v51, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v29;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
  v30 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *a2;
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#workout,setting dynamics running mode for the first time,mct,%{public}.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
    v32 = *a2;
    v51 = 134349056;
    v52 = v32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#workout,setting dynamics running mode for the first time,mct,%{public}.3f", &v51, 12);
    v16 = (char *)v33;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionMotionActivity::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v33);
    goto LABEL_44;
  }
LABEL_50:
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
  v37 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v38 = *a2;
    v39 = *((_DWORD *)a3 + 2);
    v40 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v38;
    v60 = 1026;
    v61 = v39;
    v62 = 1026;
    v63 = v8;
    v64 = 1026;
    v65 = v40;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#workout,dynamics mode on workout update,mct,%{public}.3f,workoutType,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
    v45 = *a2;
    v46 = *((_DWORD *)a3 + 2);
    v47 = *(_DWORD *)(a1 + 72);
    v51 = 134349824;
    v52 = v45;
    v53 = 1026;
    v54 = v46;
    v55 = 1026;
    v56 = v8;
    v57 = 1026;
    v58 = v47;
    LODWORD(v50) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#workout,dynamics mode on workout update,mct,%{public}.3f,workoutType,%{public}d,old dynamics mode,%{public}d,new dynamics mode,%{public}d", &v51, v50);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionMotionActivity::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
}

void sub_1006B4858(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1006B4864(uint64_t a1, double *a2, double a3)
{
  uint64_t **v6;
  double v7;
  int v8;
  NSObject *v10;
  double v11;
  int v12;
  uint64_t *v13;
  double v14;
  int v15;
  const char *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  double v33;

  v18 = 0;
  v6 = (uint64_t **)(a1 + 48);
  v19 = 9;
  *(_QWORD *)buf = &v19;
  v7 = -1.0;
  if (*((double *)sub_10021083C((uint64_t **)(a1 + 48), &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) <= -1.0)
  {
    v8 = 0;
  }
  else
  {
    v8 = 9;
    v19 = 9;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 9;
  }
  v19 = 8;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 8;
    v19 = 8;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 8;
  }
  v19 = 7;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 7;
    v19 = 7;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 7;
  }
  v19 = 6;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 6;
    v19 = 6;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 6;
  }
  v19 = 5;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 5;
    v19 = 5;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 5;
  }
  v19 = 4;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 4;
    v19 = 4;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 4;
  }
  v19 = 3;
  *(_QWORD *)buf = &v19;
  if (*((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) > v7)
  {
    v8 = 3;
    v19 = 3;
    *(_QWORD *)buf = &v19;
    v7 = *((double *)sub_10021083C(v6, &v19, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
    v18 = 3;
  }
  if (v7 <= 0.0 || a3 >= 0.0 && vabdd_f64(*a2, v7) > a3)
    return 0;
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
  v10 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a2;
    v12 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = v11;
    v28 = 1026;
    v29 = v12;
    v30 = 1026;
    v31 = v8;
    v32 = 2050;
    v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#motion,last known non-static dynamics mode used,mct,%{public}.3f,current dynamics mode,%{public}d,last non-static dynamics mode,%{public}d,last non-static dynamics mct,%{public}.3f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_10214CFA0);
    v14 = *a2;
    v15 = *(_DWORD *)(a1 + 72);
    v19 = 134349824;
    v20 = v14;
    v21 = 1026;
    v22 = v15;
    v23 = 1026;
    v24 = v8;
    v25 = 2050;
    v26 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "#motion,last known non-static dynamics mode used,mct,%{public}.3f,current dynamics mode,%{public}d,last non-static dynamics mode,%{public}d,last non-static dynamics mct,%{public}.3f", &v19, 34);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionMotionActivity::setDynamicsModeToLastKnownNonStatic(const CFTimeInterval &, const double)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  *(_DWORD *)(a1 + 72) = v8;
  v13 = *(uint64_t **)a2;
  *(_QWORD *)buf = &v18;
  sub_10021083C(v6, &v18, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5] = v13;
  return 1;
}

void sub_1006B4DD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1006B4DE4(_QWORD *a1, double *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;

  v2 = a1[5];
  if (!v2)
    return 0;
  if (*a2 >= 0.0)
  {
    v7 = v2 + a1[4] - 1;
    v8 = *(_QWORD *)(a1[1] + 8 * (v7 / 0x1C));
    v9 = sub_100B303DC();
    v12 = 1;
    v10 = sub_100B30608(v9, &v12);
    v11 = *(double *)(v8 + 144 * (v7 % 0x1C));
    if (v11 < 0.0 || v10 >= v11 && v10 - v11 > *a2)
      return 0;
  }
  v5 = a1[5] + a1[4] - 1;
  return *(_BYTE *)(*(_QWORD *)(a1[1] + 8 * (v5 / 0x1C)) + 144 * (v5 % 0x1C) + 56) != 0;
}

uint64_t sub_1006B4F00(_QWORD *a1, double *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;

  v2 = a1[5];
  if (!v2)
    return 0;
  if (*a2 >= 0.0)
  {
    v8 = v2 + a1[4] - 1;
    v9 = *(_QWORD *)(a1[1] + 8 * (v8 / 0x1C));
    v10 = sub_100B303DC();
    v13 = 1;
    v11 = sub_100B30608(v10, &v13);
    v12 = *(double *)(v9 + 144 * (v8 % 0x1C));
    if (v12 < 0.0 || v11 >= v12 && v11 - v12 > *a2)
      return 0;
  }
  v5 = a1[5] + a1[4] - 1;
  if (CLMotionActivity::isTypeStatic(*(unsigned int *)(*(_QWORD *)(a1[1] + 8 * (v5 / 0x1C))
                                                                    + 144 * (v5 % 0x1C)
                                                                    + 8))
    && (v6 = a1[5] + a1[4] - 1, *(int *)(*(_QWORD *)(a1[1] + 8 * (v6 / 0x1C)) + 144 * (v6 % 0x1C) + 12) > 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1006B506C(uint64_t a1, double *a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char isVehicularHighConfidence;
  char v13;
  uint64_t v15;
  double v16;
  _OWORD v17[9];
  int v18;

  CLMotionActivity::getInit((CLMotionActivity *)a1);
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v5 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((v4 + *(_QWORD *)(a1 + 32) - 1) / 0x1CuLL))
                + 144 * ((v4 + *(_QWORD *)(a1 + 32) - 1) % 0x1CuLL));
  v17[0] = *v5;
  v6 = v5[4];
  v8 = v5[1];
  v7 = v5[2];
  v17[3] = v5[3];
  v17[4] = v6;
  v17[1] = v8;
  v17[2] = v7;
  v9 = v5[8];
  v11 = v5[5];
  v10 = v5[6];
  v17[7] = v5[7];
  v17[8] = v9;
  v17[5] = v11;
  v17[6] = v10;
  if (*a2 >= 0.0)
  {
    v15 = sub_100B303DC();
    v18 = 1;
    v16 = sub_100B30608(v15, &v18);
    if (*(double *)v17 < 0.0 || v16 >= *(double *)v17 && v16 - *(double *)v17 > *a2)
      return 0;
  }
  if (CLMotionActivity::isInVehicle((CLMotionActivity *)((char *)v17 + 8))
    && ((isVehicularHighConfidence = CLMotionActivity::isVehicularHighConfidence((CLMotionActivity *)((char *)v17 + 8)),
         SHIDWORD(v17[0]) > 0)
      ? (v13 = 1)
      : (v13 = isVehicularHighConfidence),
        (v13 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1006B51A0(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  double v7;
  __int128 v8;
  int v9;

  CLMotionActivity::getInit((CLMotionActivity *)a1);
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v8 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((v4 + *(_QWORD *)(a1 + 32) - 1) / 0x1CuLL))
                 + 144 * ((v4 + *(_QWORD *)(a1 + 32) - 1) % 0x1CuLL));
  if (*a2 >= 0.0)
  {
    v6 = sub_100B303DC();
    v9 = 1;
    v7 = sub_100B30608(v6, &v9);
    if (*(double *)&v8 < 0.0 || v7 >= *(double *)&v8 && v7 - *(double *)&v8 > *a2)
      return 0;
  }
  LODWORD(result) = CLMotionActivity::isTypePedestrian(DWORD2(v8));
  if (SHIDWORD(v8) > 0)
    return result;
  else
    return 0;
}

uint64_t sub_1006B52B4(uint64_t a1, double *a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  _OWORD v15[9];
  int v16;

  CLMotionActivity::getInit((CLMotionActivity *)a1);
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v5 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((v4 + *(_QWORD *)(a1 + 32) - 1) / 0x1CuLL))
                + 144 * ((v4 + *(_QWORD *)(a1 + 32) - 1) % 0x1CuLL));
  v15[0] = *v5;
  v6 = v5[4];
  v8 = v5[1];
  v7 = v5[2];
  v15[3] = v5[3];
  v15[4] = v6;
  v15[1] = v8;
  v15[2] = v7;
  v9 = v5[8];
  v11 = v5[5];
  v10 = v5[6];
  v15[7] = v5[7];
  v15[8] = v9;
  v15[5] = v11;
  v15[6] = v10;
  if (*a2 >= 0.0)
  {
    v13 = sub_100B303DC();
    v16 = 1;
    v14 = sub_100B30608(v13, &v16);
    if (*(double *)v15 < 0.0 || v14 >= *(double *)v15 && v14 - *(double *)v15 > *a2)
      return 0;
  }
  LODWORD(result) = CLMotionActivity::isCycling((CLMotionActivity *)((char *)v15 + 8));
  if (SHIDWORD(v15[0]) > 0)
    return result;
  else
    return 0;
}

BOOL sub_1006B53D4(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  result = 0;
  if (*(double *)(a1 + 80) >= 0.0)
  {
    v1 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v1)
    {
      if ((CLMotionActivity::isTypePedestrian(v1) & 1) != 0)
        return 1;
    }
  }
  return result;
}

BOOL sub_1006B5410(uint64_t a1)
{
  return *(double *)(a1 + 80) >= 0.0 && *(_DWORD *)(a1 + 96) && (CLMotionActivity::isTypeCycling() & 1) != 0;
}

void sub_1006B544C(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_1006B5478(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1C)
    a2 = 1;
  if (v2 < 0x38)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 28;
  }
  return v4 ^ 1u;
}

void sub_1006B54D4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1C;
  v4 = v2 - 28;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006B579C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B57E8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) < 0xBu) & (0x6FFu >> *(_DWORD *)(a1 + 8));
}

_BYTE *sub_1006B5804(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE *result;
  __int128 v41;

  v4 = (_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  v8 = a2 + 120;
  v9 = (_OWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  sub_10027205C((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)(v8 + 48);
  v12 = *(_OWORD *)(v8 + 64);
  v13 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v10 + 72) = v13;
  *(_OWORD *)(v10 + 56) = v12;
  *(_OWORD *)(v10 + 40) = v11;
  v14 = *(_OWORD *)(v8 + 112);
  v15 = *(_OWORD *)(v8 + 128);
  v16 = v4[15];
  v9[14] = v4[14];
  v9[15] = v16;
  *(_OWORD *)(v10 + 120) = v15;
  *(_OWORD *)(v10 + 104) = v14;
  v17 = v4[16];
  v18 = v4[17];
  v19 = v4[18];
  *(_OWORD *)(v10 + 212) = *(_OWORD *)(v8 + 220);
  v9[17] = v18;
  v9[18] = v19;
  v9[16] = v17;
  v20 = (_BYTE *)(v10 + 232);
  if (*(char *)(v8 + 263) < 0)
  {
    sub_100115CE4(v20, *(void **)(a2 + 360), *(_QWORD *)(a2 + 368));
  }
  else
  {
    v21 = *(_OWORD *)(v8 + 240);
    *(_QWORD *)(v10 + 248) = *(_QWORD *)(v8 + 256);
    *(_OWORD *)v20 = v21;
  }
  v22 = *(_OWORD *)(a2 + 384);
  v23 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v23;
  *(_OWORD *)(a1 + 384) = v22;
  v24 = *(_OWORD *)(a2 + 432);
  v25 = *(_OWORD *)(a2 + 448);
  v26 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v26;
  *(_OWORD *)(a1 + 432) = v24;
  *(_OWORD *)(a1 + 448) = v25;
  v27 = *(_OWORD *)(a2 + 496);
  v28 = *(_OWORD *)(a2 + 512);
  v29 = *(_OWORD *)(a2 + 528);
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  *(_OWORD *)(a1 + 496) = v27;
  v30 = *(_OWORD *)(a2 + 552);
  v31 = *(_OWORD *)(a2 + 568);
  v32 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v32;
  *(_OWORD *)(a1 + 552) = v30;
  *(_OWORD *)(a1 + 568) = v31;
  v33 = *(_OWORD *)(a2 + 616);
  v34 = *(_OWORD *)(a2 + 632);
  v35 = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 664) = v35;
  *(_OWORD *)(a1 + 616) = v33;
  *(_OWORD *)(a1 + 632) = v34;
  v36 = *(_OWORD *)(a2 + 680);
  v37 = *(_OWORD *)(a2 + 696);
  v38 = *(_OWORD *)(a2 + 712);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  *(_OWORD *)(a1 + 680) = v36;
  if (*(char *)(a2 + 759) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 736), *(void **)(a2 + 736), *(_QWORD *)(a2 + 744));
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 736);
    *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
    *(_OWORD *)(a1 + 736) = v39;
  }
  result = (_BYTE *)(a1 + 760);
  if (*(char *)(a2 + 783) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 760), *(_QWORD *)(a2 + 768));
  v41 = *(_OWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_OWORD *)result = v41;
  return result;
}

void sub_1006B59E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 759) < 0)
    operator delete(*v3);
  sub_1005A1100(v2);
  _Unwind_Resume(a1);
}

void sub_1006B5A28(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 759) < 0)
    operator delete(*(void **)(a1 + 736));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
}

NSDictionary *sub_1006B5A8C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("cell");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v1 = (_QWORD *)*v1;
  v3[2] = CFSTR("island");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  v4[2] = CFSTR("null");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

NSDictionary *sub_1006B5B40(uint64_t a1)
{
  _QWORD *v1;
  _QWORD v3[3];
  _QWORD v4[3];

  v4[0] = CFSTR("cell");
  v3[0] = CFSTR("provider");
  v3[1] = CFSTR("flow");
  v1 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v1 = (_QWORD *)*v1;
  v3[2] = CFSTR("island");
  v4[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
  v4[2] = CFSTR("sentinel");
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_1006B5BF4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1006B5C20(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006B5C4C(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

uint64_t sub_1006B5C78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v41;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v10 = *(_OWORD *)(v9 + 16);
      v11 = *(_OWORD *)(v9 + 32);
      v12 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 60) = *(_OWORD *)(v9 + 60);
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 16) = v10;
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 104) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      *(_QWORD *)(v8 + 104) = *(_QWORD *)(v9 + 104);
      *(_QWORD *)(v9 + 96) = 0;
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 88) = 0;
      v13 = *(_OWORD *)(v9 + 176);
      v15 = *(_OWORD *)(v9 + 128);
      v14 = *(_OWORD *)(v9 + 144);
      *(_OWORD *)(v8 + 160) = *(_OWORD *)(v9 + 160);
      *(_OWORD *)(v8 + 176) = v13;
      *(_OWORD *)(v8 + 128) = v15;
      *(_OWORD *)(v8 + 144) = v14;
      v16 = *(_OWORD *)(v9 + 240);
      v18 = *(_OWORD *)(v9 + 192);
      v17 = *(_OWORD *)(v9 + 208);
      *(_OWORD *)(v8 + 224) = *(_OWORD *)(v9 + 224);
      *(_OWORD *)(v8 + 240) = v16;
      *(_OWORD *)(v8 + 192) = v18;
      *(_OWORD *)(v8 + 208) = v17;
      v20 = *(_OWORD *)(v9 + 272);
      v19 = *(_OWORD *)(v9 + 288);
      v21 = *(_OWORD *)(v9 + 256);
      *(_OWORD *)(v8 + 300) = *(_OWORD *)(v9 + 300);
      *(_OWORD *)(v8 + 272) = v20;
      *(_OWORD *)(v8 + 288) = v19;
      *(_OWORD *)(v8 + 256) = v21;
      *(_OWORD *)(v8 + 112) = *(_OWORD *)(v9 + 112);
      v22 = *(_OWORD *)(v9 + 320);
      *(_QWORD *)(v8 + 336) = *(_QWORD *)(v9 + 336);
      *(_OWORD *)(v8 + 320) = v22;
      *(_QWORD *)(v9 + 328) = 0;
      *(_QWORD *)(v9 + 336) = 0;
      *(_QWORD *)(v9 + 320) = 0;
      v23 = *(_OWORD *)(v9 + 440);
      v25 = *(_OWORD *)(v9 + 392);
      v24 = *(_OWORD *)(v9 + 408);
      *(_OWORD *)(v8 + 424) = *(_OWORD *)(v9 + 424);
      *(_OWORD *)(v8 + 440) = v23;
      *(_OWORD *)(v8 + 392) = v25;
      *(_OWORD *)(v8 + 408) = v24;
      v26 = *(_OWORD *)(v9 + 344);
      v27 = *(_OWORD *)(v9 + 376);
      *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
      *(_OWORD *)(v8 + 376) = v27;
      *(_OWORD *)(v8 + 344) = v26;
      v29 = *(_OWORD *)(v9 + 472);
      v28 = *(_OWORD *)(v9 + 488);
      v30 = *(_OWORD *)(v9 + 456);
      *(_DWORD *)(v8 + 504) = *(_DWORD *)(v9 + 504);
      *(_OWORD *)(v8 + 472) = v29;
      *(_OWORD *)(v8 + 488) = v28;
      *(_OWORD *)(v8 + 456) = v30;
      v31 = *(_OWORD *)(v9 + 512);
      v32 = *(_OWORD *)(v9 + 528);
      v33 = *(_OWORD *)(v9 + 560);
      *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
      *(_OWORD *)(v8 + 560) = v33;
      *(_OWORD *)(v8 + 512) = v31;
      *(_OWORD *)(v8 + 528) = v32;
      v34 = *(_OWORD *)(v9 + 576);
      v35 = *(_OWORD *)(v9 + 592);
      v36 = *(_OWORD *)(v9 + 624);
      *(_OWORD *)(v8 + 608) = *(_OWORD *)(v9 + 608);
      *(_OWORD *)(v8 + 624) = v36;
      *(_OWORD *)(v8 + 576) = v34;
      *(_OWORD *)(v8 + 592) = v35;
      v37 = *(_OWORD *)(v9 + 640);
      v38 = *(_OWORD *)(v9 + 656);
      v39 = *(_OWORD *)(v9 + 672);
      *(_DWORD *)(v8 + 688) = *(_DWORD *)(v9 + 688);
      *(_OWORD *)(v8 + 656) = v38;
      *(_OWORD *)(v8 + 672) = v39;
      *(_OWORD *)(v8 + 640) = v37;
      v8 += 696;
      v9 += 696;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1006B5FF4((uint64_t)&v41, a2, v7, v6);
}

void sub_1006B5DF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v11 = 1;
      else
        v11 = 0xCDFA1D6CDFA1D6CELL * ((v4 - *a1) >> 3);
      v12 = v11 >> 2;
      v13 = a1[4];
      v20 = a1[4];
      *(_QWORD *)&v18 = sub_1005A9B68(v13, v11);
      *((_QWORD *)&v18 + 1) = v18 + 696 * v12;
      *(_QWORD *)&v19 = *((_QWORD *)&v18 + 1);
      *((_QWORD *)&v19 + 1) = v18 + 696 * v14;
      sub_1006B633C((uint64_t)&v18, a1[1], 0x66FD0EB66FD0EB67 * ((uint64_t)(a1[2] - a1[1]) >> 3));
      v15 = v19;
      v16 = *(_OWORD *)a1;
      v17 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v18;
      *((_OWORD *)a1 + 1) = v15;
      v18 = v16;
      v19 = v17;
      sub_1001C37C4((void **)&v18);
      v4 = a1[2];
    }
    else
    {
      v6 = 0x66FD0EB66FD0EB67 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = v7 >> 1;
      v9 = -696 * v8;
      sub_1006B61CC((uint64_t)&v18, v5, v4, v5 - 696 * v8);
      v4 = v10;
      a1[1] += v9;
      a1[2] = v10;
    }
  }
  sub_1005A9F60(a1[4], v4, a2);
  a1[2] += 696;
}

void sub_1006B5F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1001C37C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B5F44(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_1005A9BB0((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1006B6488(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1006B5FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = (_OWORD *)(a4 + v7 - 696);
      *v10 = *(_OWORD *)(a3 + v7 - 696);
      v11 = *(_OWORD *)(a3 + v7 - 680);
      v12 = *(_OWORD *)(a3 + v7 - 664);
      v13 = *(_OWORD *)(a3 + v7 - 648);
      *(_OWORD *)((char *)v10 + 60) = *(_OWORD *)(a3 + v7 - 636);
      v10[2] = v12;
      v10[3] = v13;
      v10[1] = v11;
      *(_DWORD *)(a4 + v7 - 616) = *(_DWORD *)(a3 + v7 - 616);
      sub_100006898(a4 + v7 - 608, (__n128 *)(a3 + v7 - 608));
      v14 = (_OWORD *)(a4 + v7 - 584);
      *v14 = *(_OWORD *)(a3 + v7 - 584);
      v15 = *(_OWORD *)(a3 + v7 - 568);
      v16 = *(_OWORD *)(a3 + v7 - 552);
      v17 = *(_OWORD *)(a3 + v7 - 520);
      v14[3] = *(_OWORD *)(a3 + v7 - 536);
      v14[4] = v17;
      v14[1] = v15;
      v14[2] = v16;
      v18 = *(_OWORD *)(a3 + v7 - 504);
      v19 = *(_OWORD *)(a3 + v7 - 488);
      v20 = *(_OWORD *)(a3 + v7 - 456);
      v14[7] = *(_OWORD *)(a3 + v7 - 472);
      v14[8] = v20;
      v14[5] = v18;
      v14[6] = v19;
      v21 = *(_OWORD *)(a3 + v7 - 440);
      v22 = *(_OWORD *)(a3 + v7 - 424);
      v23 = *(_OWORD *)(a3 + v7 - 408);
      *(_OWORD *)((char *)v14 + 188) = *(_OWORD *)(a3 + v7 - 396);
      v14[10] = v22;
      v14[11] = v23;
      v14[9] = v21;
      v24 = (void **)(a4 + v7 - 376);
      if (*(char *)(a4 + v7 - 353) < 0)
        operator delete(*v24);
      v25 = *(_OWORD *)(v8 - 376);
      *(_QWORD *)(v9 - 360) = *(_QWORD *)(v8 - 360);
      *(_OWORD *)v24 = v25;
      *(_BYTE *)(v8 - 353) = 0;
      *(_BYTE *)(v8 - 376) = 0;
      v26 = (_OWORD *)(v9 - 352);
      v27 = *(_OWORD *)(v8 - 256);
      v29 = *(_OWORD *)(v8 - 288);
      v28 = *(_OWORD *)(v8 - 272);
      v26[3] = *(_OWORD *)(v8 - 304);
      v26[4] = v29;
      v26[5] = v28;
      *(_OWORD *)(v9 - 256) = v27;
      v31 = *(_OWORD *)(v8 - 336);
      v30 = *(_OWORD *)(v8 - 320);
      *v26 = *(_OWORD *)(v8 - 352);
      v26[1] = v31;
      v26[2] = v30;
      v32 = *(_OWORD *)(v8 - 240);
      v33 = *(_OWORD *)(v8 - 224);
      v34 = *(_OWORD *)(v8 - 208);
      *(_DWORD *)(v9 - 192) = *(_DWORD *)(v8 - 192);
      *(_OWORD *)(v9 - 224) = v33;
      *(_OWORD *)(v9 - 208) = v34;
      *(_OWORD *)(v9 - 240) = v32;
      v35 = *(_OWORD *)(v8 - 184);
      v36 = *(_OWORD *)(v8 - 168);
      v37 = *(_OWORD *)(v8 - 152);
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(v8 - 136);
      *(_OWORD *)(v9 - 152) = v37;
      *(_OWORD *)(v9 - 168) = v36;
      *(_OWORD *)(v9 - 184) = v35;
      v38 = *(_OWORD *)(v8 - 120);
      v39 = *(_OWORD *)(v8 - 104);
      v40 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 88) = v40;
      *(_OWORD *)(v9 - 104) = v39;
      *(_OWORD *)(v9 - 120) = v38;
      v41 = *(_OWORD *)(v8 - 56);
      v42 = *(_OWORD *)(v8 - 40);
      v43 = *(_OWORD *)(v8 - 24);
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v8 - 8);
      *(_OWORD *)(v9 - 24) = v43;
      *(_OWORD *)(v9 - 40) = v42;
      *(_OWORD *)(v9 - 56) = v41;
      v7 -= 696;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_1006B61CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)a4 = *(_OWORD *)v5;
      v7 = *(_OWORD *)(v5 + 16);
      v8 = *(_OWORD *)(v5 + 32);
      v9 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a4 + 60) = *(_OWORD *)(v5 + 60);
      *(_OWORD *)(a4 + 32) = v8;
      *(_OWORD *)(a4 + 48) = v9;
      *(_OWORD *)(a4 + 16) = v7;
      *(_DWORD *)(a4 + 80) = *(_DWORD *)(v5 + 80);
      v10 = v5 + 88;
      sub_100006898(a4 + 88, (__n128 *)(v5 + 88));
      *(_OWORD *)(a4 + 112) = *(_OWORD *)(v5 + 112);
      v11 = *(_OWORD *)(v5 + 128);
      v12 = *(_OWORD *)(v5 + 144);
      v13 = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(a4 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(a4 + 176) = v13;
      *(_OWORD *)(a4 + 128) = v11;
      *(_OWORD *)(a4 + 144) = v12;
      v14 = *(_OWORD *)(v5 + 192);
      v15 = *(_OWORD *)(v5 + 208);
      v16 = *(_OWORD *)(v5 + 240);
      *(_OWORD *)(a4 + 224) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(a4 + 240) = v16;
      *(_OWORD *)(a4 + 192) = v14;
      *(_OWORD *)(a4 + 208) = v15;
      v17 = *(_OWORD *)(v5 + 256);
      v18 = *(_OWORD *)(v5 + 272);
      v19 = *(_OWORD *)(v5 + 288);
      *(_OWORD *)(a4 + 300) = *(_OWORD *)(v5 + 300);
      *(_OWORD *)(a4 + 272) = v18;
      *(_OWORD *)(a4 + 288) = v19;
      *(_OWORD *)(a4 + 256) = v17;
      v20 = (void **)(a4 + 320);
      if (*(char *)(a4 + 343) < 0)
        operator delete(*v20);
      v21 = *(_OWORD *)(v10 + 232);
      *(_QWORD *)(a4 + 336) = *(_QWORD *)(v10 + 248);
      *(_OWORD *)v20 = v21;
      *(_BYTE *)(v10 + 255) = 0;
      *(_BYTE *)(v10 + 232) = 0;
      v23 = *(_OWORD *)(v10 + 336);
      v22 = *(_OWORD *)(v10 + 352);
      v24 = *(_OWORD *)(v10 + 320);
      *(_OWORD *)(a4 + 392) = *(_OWORD *)(v10 + 304);
      *(_OWORD *)(a4 + 408) = v24;
      *(_OWORD *)(a4 + 424) = v23;
      *(_OWORD *)(a4 + 440) = v22;
      v26 = *(_OWORD *)(v10 + 272);
      v25 = *(_OWORD *)(v10 + 288);
      *(_OWORD *)(a4 + 344) = *(_OWORD *)(v10 + 256);
      *(_OWORD *)(a4 + 360) = v26;
      *(_OWORD *)(a4 + 376) = v25;
      v27 = *(_OWORD *)(v10 + 368);
      v28 = *(_OWORD *)(v10 + 384);
      v29 = *(_OWORD *)(v10 + 400);
      *(_DWORD *)(a4 + 504) = *(_DWORD *)(v10 + 416);
      *(_OWORD *)(a4 + 472) = v28;
      *(_OWORD *)(a4 + 488) = v29;
      *(_OWORD *)(a4 + 456) = v27;
      v30 = *(_OWORD *)(v10 + 424);
      v31 = *(_OWORD *)(v10 + 440);
      v32 = *(_OWORD *)(v10 + 472);
      *(_OWORD *)(a4 + 544) = *(_OWORD *)(v10 + 456);
      *(_OWORD *)(a4 + 560) = v32;
      *(_OWORD *)(a4 + 512) = v30;
      *(_OWORD *)(a4 + 528) = v31;
      v33 = *(_OWORD *)(v10 + 488);
      v34 = *(_OWORD *)(v10 + 504);
      v35 = *(_OWORD *)(v10 + 536);
      *(_OWORD *)(a4 + 608) = *(_OWORD *)(v10 + 520);
      *(_OWORD *)(a4 + 624) = v35;
      *(_OWORD *)(a4 + 576) = v33;
      *(_OWORD *)(a4 + 592) = v34;
      v36 = *(_OWORD *)(v10 + 552);
      v37 = *(_OWORD *)(v10 + 568);
      v38 = *(_OWORD *)(v10 + 584);
      *(_DWORD *)(a4 + 688) = *(_DWORD *)(v10 + 600);
      *(_OWORD *)(a4 + 656) = v37;
      *(_OWORD *)(a4 + 672) = v38;
      *(_OWORD *)(a4 + 640) = v36;
      a4 += 696;
      v5 = v10 + 608;
    }
    while (v10 + 608 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1006B633C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v3 = *(_QWORD *)(result + 16);
  if (a3)
  {
    v4 = v3 + 696 * a3;
    do
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v3 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v3 + 32) = v6;
      *(_OWORD *)(v3 + 48) = v7;
      *(_OWORD *)(v3 + 16) = v5;
      *(_DWORD *)(v3 + 80) = *(_DWORD *)(a2 + 80);
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 88) = 0;
      *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v3 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      v8 = *(_OWORD *)(a2 + 176);
      v10 = *(_OWORD *)(a2 + 128);
      v9 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(v3 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(v3 + 176) = v8;
      *(_OWORD *)(v3 + 128) = v10;
      *(_OWORD *)(v3 + 144) = v9;
      v11 = *(_OWORD *)(a2 + 240);
      v13 = *(_OWORD *)(a2 + 192);
      v12 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(v3 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(v3 + 240) = v11;
      *(_OWORD *)(v3 + 192) = v13;
      *(_OWORD *)(v3 + 208) = v12;
      v15 = *(_OWORD *)(a2 + 272);
      v14 = *(_OWORD *)(a2 + 288);
      v16 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(v3 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(v3 + 272) = v15;
      *(_OWORD *)(v3 + 288) = v14;
      *(_OWORD *)(v3 + 256) = v16;
      *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
      v17 = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(v3 + 336) = *(_QWORD *)(a2 + 336);
      *(_OWORD *)(v3 + 320) = v17;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_QWORD *)(a2 + 320) = 0;
      v18 = *(_OWORD *)(a2 + 440);
      v20 = *(_OWORD *)(a2 + 392);
      v19 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(v3 + 424) = *(_OWORD *)(a2 + 424);
      *(_OWORD *)(v3 + 440) = v18;
      *(_OWORD *)(v3 + 392) = v20;
      *(_OWORD *)(v3 + 408) = v19;
      v21 = *(_OWORD *)(a2 + 344);
      v22 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(v3 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(v3 + 376) = v22;
      *(_OWORD *)(v3 + 344) = v21;
      v24 = *(_OWORD *)(a2 + 472);
      v23 = *(_OWORD *)(a2 + 488);
      v25 = *(_OWORD *)(a2 + 456);
      *(_DWORD *)(v3 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(v3 + 472) = v24;
      *(_OWORD *)(v3 + 488) = v23;
      *(_OWORD *)(v3 + 456) = v25;
      v26 = *(_OWORD *)(a2 + 512);
      v27 = *(_OWORD *)(a2 + 528);
      v28 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(v3 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(v3 + 560) = v28;
      *(_OWORD *)(v3 + 512) = v26;
      *(_OWORD *)(v3 + 528) = v27;
      v29 = *(_OWORD *)(a2 + 576);
      v30 = *(_OWORD *)(a2 + 592);
      v31 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(v3 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(v3 + 624) = v31;
      *(_OWORD *)(v3 + 576) = v29;
      *(_OWORD *)(v3 + 592) = v30;
      v32 = *(_OWORD *)(a2 + 640);
      v33 = *(_OWORD *)(a2 + 656);
      v34 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(v3 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(v3 + 656) = v33;
      *(_OWORD *)(v3 + 672) = v34;
      *(_OWORD *)(v3 + 640) = v32;
      v3 += 696;
      a2 += 696;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t sub_1006B6488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v36[3];
  char v37;
  uint64_t v38;
  uint64_t v39;

  v4 = a4;
  v39 = a4;
  v38 = a4;
  v36[0] = a1;
  v36[1] = &v38;
  v36[2] = &v39;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v4 + 32) = v6;
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v5;
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(a2 + 80);
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 104) = 0;
      *(_QWORD *)(v4 + 88) = 0;
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v4 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      v8 = *(_OWORD *)(a2 + 176);
      v10 = *(_OWORD *)(a2 + 128);
      v9 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(v4 + 176) = v8;
      *(_OWORD *)(v4 + 128) = v10;
      *(_OWORD *)(v4 + 144) = v9;
      v11 = *(_OWORD *)(a2 + 240);
      v13 = *(_OWORD *)(a2 + 192);
      v12 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(v4 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(v4 + 240) = v11;
      *(_OWORD *)(v4 + 192) = v13;
      *(_OWORD *)(v4 + 208) = v12;
      v15 = *(_OWORD *)(a2 + 272);
      v14 = *(_OWORD *)(a2 + 288);
      v16 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(v4 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(v4 + 272) = v15;
      *(_OWORD *)(v4 + 288) = v14;
      *(_OWORD *)(v4 + 256) = v16;
      *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
      v17 = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(v4 + 336) = *(_QWORD *)(a2 + 336);
      *(_OWORD *)(v4 + 320) = v17;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_QWORD *)(a2 + 320) = 0;
      v18 = *(_OWORD *)(a2 + 440);
      v20 = *(_OWORD *)(a2 + 392);
      v19 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(v4 + 424) = *(_OWORD *)(a2 + 424);
      *(_OWORD *)(v4 + 440) = v18;
      *(_OWORD *)(v4 + 392) = v20;
      *(_OWORD *)(v4 + 408) = v19;
      v21 = *(_OWORD *)(a2 + 344);
      v22 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(v4 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(v4 + 376) = v22;
      *(_OWORD *)(v4 + 344) = v21;
      v24 = *(_OWORD *)(a2 + 472);
      v23 = *(_OWORD *)(a2 + 488);
      v25 = *(_OWORD *)(a2 + 456);
      *(_DWORD *)(v4 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(v4 + 472) = v24;
      *(_OWORD *)(v4 + 488) = v23;
      *(_OWORD *)(v4 + 456) = v25;
      v26 = *(_OWORD *)(a2 + 512);
      v27 = *(_OWORD *)(a2 + 528);
      v28 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(v4 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(v4 + 560) = v28;
      *(_OWORD *)(v4 + 512) = v26;
      *(_OWORD *)(v4 + 528) = v27;
      v29 = *(_OWORD *)(a2 + 576);
      v30 = *(_OWORD *)(a2 + 592);
      v31 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(v4 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(v4 + 624) = v31;
      *(_OWORD *)(v4 + 576) = v29;
      *(_OWORD *)(v4 + 592) = v30;
      v32 = *(_OWORD *)(a2 + 640);
      v33 = *(_OWORD *)(a2 + 656);
      v34 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(v4 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(v4 + 656) = v33;
      *(_OWORD *)(v4 + 672) = v34;
      *(_OWORD *)(v4 + 640) = v32;
      v4 += 696;
      a2 += 696;
    }
    while (a2 != a3);
    v39 = v4;
  }
  v37 = 1;
  sub_1006B6614((uint64_t)v36);
  return v4;
}

uint64_t sub_1006B6614(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1006B6648((uint64_t *)a1);
  return a1;
}

void sub_1006B6648(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 696;
      sub_1005A9904(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_1006B6698(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 864;
        sub_1005A9904((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1006B671C(uint64_t *a1, uint64_t a2, _DWORD *a3, _OWORD *a4, _BYTE *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;

  v6 = *a1;
  v7 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 5);
  v8 = v7 + 1;
  if (v7 + 1 > 0x4BDA12F684BDA1)
    sub_100259694();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0x84BDA12F684BDA13 * ((a1[2] - v6) >> 5);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x25ED097B425ED0)
    v15 = 0x4BDA12F684BDA1;
  else
    v15 = v8;
  v31 = a1 + 2;
  if (v15)
    v16 = (char *)sub_1006B6A1C(v13, v15);
  else
    v16 = 0;
  v27 = v16;
  v28 = &v16[864 * v7];
  v29 = (uint64_t)v28;
  v30 = &v16[864 * v15];
  v17 = sub_1006B6890((uint64_t)v28, a2);
  *(_DWORD *)(v17 + 696) = *a3;
  v18 = a4[1];
  *(_OWORD *)(v17 + 700) = *a4;
  *(_OWORD *)(v17 + 716) = v18;
  v19 = a4[2];
  v20 = a4[3];
  v21 = a4[5];
  *(_OWORD *)(v17 + 764) = a4[4];
  *(_OWORD *)(v17 + 780) = v21;
  *(_OWORD *)(v17 + 732) = v19;
  *(_OWORD *)(v17 + 748) = v20;
  v22 = a4[6];
  v23 = a4[7];
  v24 = a4[8];
  *(_OWORD *)(v17 + 840) = *(_OWORD *)((char *)a4 + 140);
  *(_OWORD *)(v17 + 812) = v23;
  *(_OWORD *)(v17 + 828) = v24;
  *(_OWORD *)(v17 + 796) = v22;
  *(_BYTE *)(v17 + 856) = *a5;
  v29 += 864;
  sub_1001F75C4(a1, &v27);
  v25 = a1[1];
  sub_1001F7638(&v27);
  return v25;
}

void sub_1006B687C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001F7638((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B6890(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10027205C((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 48);
  v10 = *(_OWORD *)(v7 + 64);
  v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  v12 = *(_OWORD *)(v7 + 112);
  v13 = *(_OWORD *)(v7 + 128);
  v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  v15 = *(_OWORD *)(v7 + 176);
  v16 = *(_OWORD *)(v7 + 192);
  v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  v18 = (_BYTE *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_100115CE4(v18, *(void **)(a2 + 320), *(_QWORD *)(a2 + 328));
  }
  else
  {
    v19 = *(_OWORD *)(v7 + 240);
    *(_QWORD *)(v8 + 248) = *(_QWORD *)(v7 + 256);
    *(_OWORD *)v18 = v19;
  }
  v20 = *(_OWORD *)(a2 + 344);
  v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  v22 = *(_OWORD *)(a2 + 392);
  v23 = *(_OWORD *)(a2 + 408);
  v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  v25 = *(_OWORD *)(a2 + 456);
  v26 = *(_OWORD *)(a2 + 472);
  v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  v28 = *(_OWORD *)(a2 + 512);
  v29 = *(_OWORD *)(a2 + 528);
  v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  v31 = *(_OWORD *)(a2 + 576);
  v32 = *(_OWORD *)(a2 + 592);
  v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  v34 = *(_OWORD *)(a2 + 640);
  v35 = *(_OWORD *)(a2 + 656);
  v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_1006B6A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1006B6A1C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4BDA12F684BDA2)
    sub_10025955C();
  return operator new(864 * a2);
}

uint64_t sub_1006B6A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v52[3];
  char v53;
  __int128 v54;
  __int128 v55;

  v7 = a7;
  *(_QWORD *)&v55 = a6;
  *((_QWORD *)&v55 + 1) = a7;
  v54 = v55;
  v52[0] = a1;
  v52[1] = &v54;
  v52[2] = &v55;
  if (a3 == a5)
  {
    v50 = a6;
  }
  else
  {
    do
    {
      v8 = v7 - 864;
      *(_OWORD *)v8 = *(_OWORD *)(a3 - 864);
      v9 = *(_OWORD *)(a3 - 848);
      v10 = *(_OWORD *)(a3 - 832);
      v11 = *(_OWORD *)(a3 - 816);
      *(_OWORD *)(v8 + 60) = *(_OWORD *)(a3 - 804);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(a3 - 784);
      v12 = v7 - 784;
      v13 = a3 - 776;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_QWORD *)(v12 + 8) = 0;
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(a3 - 776);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 - 760);
      *(_QWORD *)(v13 + 16) = 0;
      *(_OWORD *)v13 = 0uLL;
      v14 = *(_OWORD *)(a3 - 688);
      v16 = *(_OWORD *)(a3 - 736);
      v15 = *(_OWORD *)(a3 - 720);
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(a3 - 704);
      *(_OWORD *)(v12 + 96) = v14;
      *(_OWORD *)(v12 + 48) = v16;
      *(_OWORD *)(v12 + 64) = v15;
      v17 = *(_OWORD *)(a3 - 624);
      v19 = *(_OWORD *)(a3 - 672);
      v18 = *(_OWORD *)(a3 - 656);
      *(_OWORD *)(v12 + 144) = *(_OWORD *)(a3 - 640);
      *(_OWORD *)(v12 + 160) = v17;
      *(_OWORD *)(v12 + 112) = v19;
      *(_OWORD *)(v12 + 128) = v18;
      v21 = *(_OWORD *)(a3 - 592);
      v20 = *(_OWORD *)(a3 - 576);
      v22 = *(_OWORD *)(a3 - 608);
      *(_OWORD *)(v12 + 220) = *(_OWORD *)(a3 - 564);
      *(_OWORD *)(v12 + 192) = v21;
      *(_OWORD *)(v12 + 208) = v20;
      *(_OWORD *)(v12 + 176) = v22;
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 - 752);
      v23 = (_QWORD *)(a3 - 544);
      v24 = *(_OWORD *)(a3 - 544);
      *(_QWORD *)(v12 + 256) = *(_QWORD *)(a3 - 528);
      *(_OWORD *)(v12 + 240) = v24;
      v23[1] = 0;
      v23[2] = 0;
      *v23 = 0;
      v25 = (_OWORD *)(v7 - 520);
      v26 = *(_OWORD *)(a3 - 424);
      v28 = *(_OWORD *)(a3 - 472);
      v27 = *(_OWORD *)(a3 - 456);
      v25[5] = *(_OWORD *)(a3 - 440);
      v25[6] = v26;
      v25[3] = v28;
      v25[4] = v27;
      v29 = *(_OWORD *)(a3 - 520);
      v30 = *(_OWORD *)(a3 - 488);
      v25[1] = *(_OWORD *)(a3 - 504);
      v25[2] = v30;
      *v25 = v29;
      v32 = *(_OWORD *)(a3 - 392);
      v31 = *(_OWORD *)(a3 - 376);
      v33 = *(_OWORD *)(a3 - 408);
      *(_DWORD *)(v12 + 424) = *(_DWORD *)(a3 - 360);
      v25[8] = v32;
      v25[9] = v31;
      v25[7] = v33;
      v34 = *(_OWORD *)(a3 - 352);
      v35 = *(_OWORD *)(a3 - 336);
      v36 = *(_OWORD *)(a3 - 304);
      *(_OWORD *)(v12 + 464) = *(_OWORD *)(a3 - 320);
      *(_OWORD *)(v12 + 480) = v36;
      *(_OWORD *)(v12 + 432) = v34;
      *(_OWORD *)(v12 + 448) = v35;
      v37 = *(_OWORD *)(a3 - 288);
      v38 = *(_OWORD *)(a3 - 272);
      v39 = *(_OWORD *)(a3 - 240);
      *(_OWORD *)(v7 - 256) = *(_OWORD *)(a3 - 256);
      *(_OWORD *)(v7 - 240) = v39;
      *(_OWORD *)(v12 + 496) = v37;
      *(_OWORD *)(v12 + 512) = v38;
      v40 = *(_OWORD *)(a3 - 224);
      v41 = *(_OWORD *)(a3 - 208);
      v42 = *(_OWORD *)(a3 - 192);
      *(_DWORD *)(v7 - 176) = *(_DWORD *)(a3 - 176);
      *(_OWORD *)(v7 - 208) = v41;
      *(_OWORD *)(v7 - 192) = v42;
      *(_OWORD *)(v7 - 224) = v40;
      *(_DWORD *)(v7 - 168) = *(_DWORD *)(a3 - 168);
      v43 = *(_OWORD *)(a3 - 164);
      *(_OWORD *)(v7 - 148) = *(_OWORD *)(a3 - 148);
      *(_OWORD *)(v7 - 164) = v43;
      v44 = *(_OWORD *)(a3 - 132);
      v45 = *(_OWORD *)(a3 - 116);
      v46 = *(_OWORD *)(a3 - 100);
      *(_OWORD *)(v7 - 84) = *(_OWORD *)(a3 - 84);
      *(_OWORD *)(v7 - 100) = v46;
      *(_OWORD *)(v7 - 116) = v45;
      *(_OWORD *)(v7 - 132) = v44;
      v47 = *(_OWORD *)(a3 - 68);
      v48 = *(_OWORD *)(a3 - 52);
      v49 = *(_OWORD *)(a3 - 36);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 36) = v49;
      *(_OWORD *)(v7 - 52) = v48;
      *(_OWORD *)(v7 - 68) = v47;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 - 8);
      v7 = *((_QWORD *)&v55 + 1) - 864;
      *((_QWORD *)&v55 + 1) -= 864;
      a3 -= 864;
    }
    while (a3 != a5);
    v50 = v55;
  }
  v53 = 1;
  sub_1006B6C84((uint64_t)v52);
  return v50;
}

uint64_t sub_1006B6C84(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1006B6CB8((uint64_t *)a1);
  return a1;
}

void sub_1006B6CB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1005A9904(v3, v1);
      v1 += 864;
    }
    while (v1 != v2);
  }
}

void sub_1006B6D08(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 864;
    sub_1005A9904(v4, i - 864);
  }
}

uint64_t sub_1006B6D4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v3 = *a1;
  v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x4BDA12F684BDA1)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x25ED097B425ED0)
    v9 = 0x4BDA12F684BDA1;
  else
    v9 = v5;
  v25 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1006B6A1C(v7, v9);
  else
    v10 = 0;
  v21 = v10;
  v22 = &v10[864 * v4];
  v23 = (uint64_t)v22;
  v24 = &v10[864 * v9];
  v11 = sub_1006B6EB0((uint64_t)v22, a2);
  *(_DWORD *)(v11 + 696) = *(_DWORD *)(a2 + 696);
  v12 = *(_OWORD *)(a2 + 716);
  *(_OWORD *)(v11 + 700) = *(_OWORD *)(a2 + 700);
  *(_OWORD *)(v11 + 716) = v12;
  v13 = *(_OWORD *)(a2 + 732);
  v14 = *(_OWORD *)(a2 + 748);
  v15 = *(_OWORD *)(a2 + 780);
  *(_OWORD *)(v11 + 764) = *(_OWORD *)(a2 + 764);
  *(_OWORD *)(v11 + 780) = v15;
  *(_OWORD *)(v11 + 732) = v13;
  *(_OWORD *)(v11 + 748) = v14;
  v16 = *(_OWORD *)(a2 + 796);
  v17 = *(_OWORD *)(a2 + 812);
  v18 = *(_OWORD *)(a2 + 828);
  *(_OWORD *)(v11 + 840) = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(v11 + 812) = v17;
  *(_OWORD *)(v11 + 828) = v18;
  *(_OWORD *)(v11 + 796) = v16;
  *(_BYTE *)(v11 + 856) = *(_BYTE *)(a2 + 856);
  v23 += 864;
  sub_1001F75C4(a1, &v21);
  v19 = a1[1];
  sub_1001F7638(&v21);
  return v19;
}

void sub_1006B6E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001F7638((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B6EB0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = a2 + 80;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10027205C((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 48);
  v10 = *(_OWORD *)(v7 + 64);
  v11 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_OWORD *)(v8 + 40) = v9;
  v12 = *(_OWORD *)(v7 + 112);
  v13 = *(_OWORD *)(v7 + 128);
  v14 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(v7 + 160);
  *(_OWORD *)(v8 + 136) = v14;
  *(_OWORD *)(v8 + 120) = v13;
  *(_OWORD *)(v8 + 104) = v12;
  v15 = *(_OWORD *)(v7 + 176);
  v16 = *(_OWORD *)(v7 + 192);
  v17 = *(_OWORD *)(v7 + 208);
  *(_OWORD *)(v8 + 212) = *(_OWORD *)(v7 + 220);
  *(_OWORD *)(v8 + 200) = v17;
  *(_OWORD *)(v8 + 184) = v16;
  *(_OWORD *)(v8 + 168) = v15;
  v18 = (_BYTE *)(v8 + 232);
  if (*(char *)(v7 + 263) < 0)
  {
    sub_100115CE4(v18, *(void **)(a2 + 320), *(_QWORD *)(a2 + 328));
  }
  else
  {
    v19 = *(_OWORD *)(v7 + 240);
    *(_QWORD *)(v8 + 248) = *(_QWORD *)(v7 + 256);
    *(_OWORD *)v18 = v19;
  }
  v20 = *(_OWORD *)(a2 + 344);
  v21 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 344) = v20;
  v22 = *(_OWORD *)(a2 + 392);
  v23 = *(_OWORD *)(a2 + 408);
  v24 = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 408) = v23;
  v25 = *(_OWORD *)(a2 + 456);
  v26 = *(_OWORD *)(a2 + 472);
  v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  v28 = *(_OWORD *)(a2 + 512);
  v29 = *(_OWORD *)(a2 + 528);
  v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  v31 = *(_OWORD *)(a2 + 576);
  v32 = *(_OWORD *)(a2 + 592);
  v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  v34 = *(_OWORD *)(a2 + 640);
  v35 = *(_OWORD *)(a2 + 656);
  v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  return a1;
}

void sub_1006B7020(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006B703C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1006B70C0(result, a4);
    result = (_QWORD *)sub_1006B7114((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1006B70A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1006B6698(&a9);
  _Unwind_Resume(a1);
}

char *sub_1006B70C0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x4BDA12F684BDA2)
    sub_100259694();
  result = (char *)sub_1006B6A1C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[864 * v4];
  return result;
}

uint64_t sub_1006B7114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a4;
  v17 = a4;
  v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1006B6EB0(v4, v6);
      *(_DWORD *)(v4 + 696) = *(_DWORD *)(v6 + 696);
      v7 = *(_OWORD *)(v6 + 716);
      *(_OWORD *)(v4 + 700) = *(_OWORD *)(v6 + 700);
      *(_OWORD *)(v4 + 716) = v7;
      v8 = *(_OWORD *)(v6 + 732);
      v9 = *(_OWORD *)(v6 + 748);
      v10 = *(_OWORD *)(v6 + 780);
      *(_OWORD *)(v4 + 764) = *(_OWORD *)(v6 + 764);
      *(_OWORD *)(v4 + 780) = v10;
      *(_OWORD *)(v4 + 732) = v8;
      *(_OWORD *)(v4 + 748) = v9;
      v11 = *(_OWORD *)(v6 + 796);
      v12 = *(_OWORD *)(v6 + 812);
      v13 = *(_OWORD *)(v6 + 828);
      *(_OWORD *)(v4 + 840) = *(_OWORD *)(v6 + 840);
      *(_OWORD *)(v4 + 812) = v12;
      *(_OWORD *)(v4 + 828) = v13;
      *(_OWORD *)(v4 + 796) = v11;
      *(_BYTE *)(v4 + 856) = *(_BYTE *)(v6 + 856);
      v4 = v18 + 864;
      v18 += 864;
      v6 += 864;
    }
    while (v6 != a3);
  }
  v16 = 1;
  sub_1006B71FC((uint64_t)v15);
  return v4;
}

void sub_1006B71E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006B71FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B71FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1006B7230((uint64_t *)a1);
  return a1;
}

void sub_1006B7230(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 864;
      sub_1005A9904(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_1006B7280(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *(double *)(result + 720);
  v3 = *(double *)(a2 + 720);
  if (v2 >= 0.0 && v3 < 0.0)
    return 0;
  if (v2 < 0.0 && v3 >= 0.0)
    return 1;
  if (v2 >= 0.0 != v3 >= 0.0)
  {
LABEL_51:
    result = sub_101905234(result);
    goto LABEL_52;
  }
  v4 = *(_DWORD *)(result + 796);
  v5 = *(_DWORD *)(a2 + 796);
  if (v4 == 6 && v5 != 6)
    return 0;
  if (v4 != 6 && v5 == 6)
    return 1;
  if (v4 != v5)
  {
LABEL_52:
    result = sub_101905660(result);
    goto LABEL_53;
  }
  v7 = *(_DWORD *)(result + 8);
  if (v7 <= 9 && ((1 << v7) & 0x287) != 0 || v7 - 3 <= 2)
  {
    v8 = *(_DWORD *)(a2 + 8);
    if ((v8 > 9 || ((1 << v8) & 0x287) == 0) && v8 - 3 > 2)
      return 0;
  }
  if (v7 < 0xA && ((0x287u >> v7) & 1) != 0)
  {
    v11 = 1;
LABEL_35:
    v12 = *(_DWORD *)(a2 + 8);
    if (v12 <= 9 && ((1 << v12) & 0x287) != 0)
    {
      if ((v11 & 1) != 0)
      {
LABEL_38:
        if (v7 == 6)
        {
          if (v12 != 6)
            return 0;
LABEL_42:
          if ((v7 == 6) == (v12 == 6))
          {
            if (v2 >= v3)
              return v2 > v3;
            return 0;
          }
LABEL_53:
          v13 = sub_1019054FC(result);
          return sub_1006B746C(v13);
        }
        if (v12 != 6)
          goto LABEL_42;
        return 1;
      }
    }
    else if (v11 == v12 - 3 < 3)
    {
      goto LABEL_38;
    }
    result = sub_101905398();
    goto LABEL_51;
  }
  v9 = v7 - 3 < 3;
  if (v7 - 3 < 3)
    goto LABEL_30;
  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= 0xA)
  {
    if (v10 - 3 < 3)
      return 1;
    goto LABEL_30;
  }
  result = 1;
  if (((0x287u >> v10) & 1) == 0 && v10 - 3 > 2)
  {
LABEL_30:
    if (v7 == 9)
      v9 = 1;
    v11 = v7 == 7 || v9;
    goto LABEL_35;
  }
  return result;
}

double sub_1006B746C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  int v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[28];
  _BYTE v79[28];
  _BYTE v80[28];
  _BYTE v81[28];

  sub_1006B8B1C(a1, a2, a3, a4);
  if (sub_1006B7280(a5, a4))
  {
    sub_1006B8744((__int128 *)a4, (__int128 *)a5);
    v11 = *(_DWORD *)(a4 + 696);
    *(_DWORD *)(a4 + 696) = *(_DWORD *)(a5 + 696);
    *(_DWORD *)(a5 + 696) = v11;
    v12 = (_OWORD *)(a4 + 700);
    v70 = *(_OWORD *)(a4 + 796);
    v74 = *(_OWORD *)(a4 + 812);
    *(_OWORD *)v78 = *(_OWORD *)(a4 + 828);
    *(_OWORD *)&v78[12] = *(_OWORD *)(a4 + 840);
    v54 = *(_OWORD *)(a4 + 732);
    v58 = *(_OWORD *)(a4 + 748);
    v62 = *(_OWORD *)(a4 + 764);
    v66 = *(_OWORD *)(a4 + 780);
    v46 = *(_OWORD *)(a4 + 700);
    v50 = *(_OWORD *)(a4 + 716);
    v13 = *(_OWORD *)(a5 + 716);
    *(_OWORD *)(a4 + 700) = *(_OWORD *)(a5 + 700);
    *(_OWORD *)(a4 + 716) = v13;
    v14 = *(_OWORD *)(a5 + 732);
    v15 = *(_OWORD *)(a5 + 748);
    v16 = *(_OWORD *)(a5 + 780);
    *(_OWORD *)(a4 + 764) = *(_OWORD *)(a5 + 764);
    *(_OWORD *)(a4 + 780) = v16;
    *(_OWORD *)(a4 + 732) = v14;
    *(_OWORD *)(a4 + 748) = v15;
    v17 = *(_OWORD *)(a5 + 796);
    v18 = *(_OWORD *)(a5 + 812);
    v19 = *(_OWORD *)(a5 + 828);
    *(_OWORD *)(a4 + 840) = *(_OWORD *)(a5 + 840);
    *(_OWORD *)(a4 + 812) = v18;
    *(_OWORD *)(a4 + 828) = v19;
    *(_OWORD *)(a4 + 796) = v17;
    *(_OWORD *)(a5 + 796) = v70;
    *(_OWORD *)(a5 + 812) = v74;
    *(_OWORD *)(a5 + 828) = *(_OWORD *)v78;
    *(_OWORD *)(a5 + 840) = *(_OWORD *)&v78[12];
    *(_OWORD *)(a5 + 732) = v54;
    *(_OWORD *)(a5 + 748) = v58;
    *(_OWORD *)(a5 + 764) = v62;
    *(_OWORD *)(a5 + 780) = v66;
    *(_OWORD *)(a5 + 700) = v46;
    *(_OWORD *)(a5 + 716) = v50;
    LOBYTE(v11) = *(_BYTE *)(a4 + 856);
    *(_BYTE *)(a4 + 856) = *(_BYTE *)(a5 + 856);
    *(_BYTE *)(a5 + 856) = v11;
    if (sub_1006B7280(a4, a3))
    {
      sub_1006B8744((__int128 *)a3, (__int128 *)a4);
      v20 = *(_DWORD *)(a3 + 696);
      *(_DWORD *)(a3 + 696) = *(_DWORD *)(a4 + 696);
      *(_DWORD *)(a4 + 696) = v20;
      v21 = (_OWORD *)(a3 + 700);
      v71 = *(_OWORD *)(a3 + 796);
      v75 = *(_OWORD *)(a3 + 812);
      *(_OWORD *)v79 = *(_OWORD *)(a3 + 828);
      *(_OWORD *)&v79[12] = *(_OWORD *)(a3 + 840);
      v55 = *(_OWORD *)(a3 + 732);
      v59 = *(_OWORD *)(a3 + 748);
      v63 = *(_OWORD *)(a3 + 764);
      v67 = *(_OWORD *)(a3 + 780);
      v47 = *(_OWORD *)(a3 + 700);
      v51 = *(_OWORD *)(a3 + 716);
      v22 = *(_OWORD *)(a4 + 716);
      *(_OWORD *)(a3 + 700) = *v12;
      *(_OWORD *)(a3 + 716) = v22;
      v23 = *(_OWORD *)(a4 + 732);
      v24 = *(_OWORD *)(a4 + 748);
      v25 = *(_OWORD *)(a4 + 780);
      *(_OWORD *)(a3 + 764) = *(_OWORD *)(a4 + 764);
      *(_OWORD *)(a3 + 780) = v25;
      *(_OWORD *)(a3 + 732) = v23;
      *(_OWORD *)(a3 + 748) = v24;
      v26 = *(_OWORD *)(a4 + 796);
      v27 = *(_OWORD *)(a4 + 812);
      v28 = *(_OWORD *)(a4 + 828);
      *(_OWORD *)(a3 + 840) = *(_OWORD *)(a4 + 840);
      *(_OWORD *)(a3 + 812) = v27;
      *(_OWORD *)(a3 + 828) = v28;
      *(_OWORD *)(a3 + 796) = v26;
      *(_OWORD *)(a4 + 796) = v71;
      *(_OWORD *)(a4 + 812) = v75;
      *(_OWORD *)(a4 + 828) = *(_OWORD *)v79;
      *(_OWORD *)(a4 + 840) = *(_OWORD *)&v79[12];
      *(_OWORD *)(a4 + 732) = v55;
      *(_OWORD *)(a4 + 748) = v59;
      *(_OWORD *)(a4 + 764) = v63;
      *(_OWORD *)(a4 + 780) = v67;
      *v12 = v47;
      *(_OWORD *)(a4 + 716) = v51;
      LOBYTE(v20) = *(_BYTE *)(a3 + 856);
      *(_BYTE *)(a3 + 856) = *(_BYTE *)(a4 + 856);
      *(_BYTE *)(a4 + 856) = v20;
      if (sub_1006B7280(a3, a2))
      {
        sub_1006B8744((__int128 *)a2, (__int128 *)a3);
        v29 = *(_DWORD *)(a2 + 696);
        *(_DWORD *)(a2 + 696) = *(_DWORD *)(a3 + 696);
        *(_DWORD *)(a3 + 696) = v29;
        v30 = (_OWORD *)(a2 + 700);
        v72 = *(_OWORD *)(a2 + 796);
        v76 = *(_OWORD *)(a2 + 812);
        *(_OWORD *)v80 = *(_OWORD *)(a2 + 828);
        *(_OWORD *)&v80[12] = *(_OWORD *)(a2 + 840);
        v56 = *(_OWORD *)(a2 + 732);
        v60 = *(_OWORD *)(a2 + 748);
        v64 = *(_OWORD *)(a2 + 764);
        v68 = *(_OWORD *)(a2 + 780);
        v48 = *(_OWORD *)(a2 + 700);
        v52 = *(_OWORD *)(a2 + 716);
        v31 = *(_OWORD *)(a3 + 716);
        *(_OWORD *)(a2 + 700) = *v21;
        *(_OWORD *)(a2 + 716) = v31;
        v32 = *(_OWORD *)(a3 + 732);
        v33 = *(_OWORD *)(a3 + 748);
        v34 = *(_OWORD *)(a3 + 780);
        *(_OWORD *)(a2 + 764) = *(_OWORD *)(a3 + 764);
        *(_OWORD *)(a2 + 780) = v34;
        *(_OWORD *)(a2 + 732) = v32;
        *(_OWORD *)(a2 + 748) = v33;
        v35 = *(_OWORD *)(a3 + 796);
        v36 = *(_OWORD *)(a3 + 812);
        v37 = *(_OWORD *)(a3 + 828);
        *(_OWORD *)(a2 + 840) = *(_OWORD *)(a3 + 840);
        *(_OWORD *)(a2 + 812) = v36;
        *(_OWORD *)(a2 + 828) = v37;
        *(_OWORD *)(a2 + 796) = v35;
        *(_OWORD *)(a3 + 796) = v72;
        *(_OWORD *)(a3 + 812) = v76;
        *(_OWORD *)(a3 + 828) = *(_OWORD *)v80;
        *(_OWORD *)(a3 + 840) = *(_OWORD *)&v80[12];
        *(_OWORD *)(a3 + 732) = v56;
        *(_OWORD *)(a3 + 748) = v60;
        *(_OWORD *)(a3 + 764) = v64;
        *(_OWORD *)(a3 + 780) = v68;
        *v21 = v48;
        *(_OWORD *)(a3 + 716) = v52;
        LOBYTE(v29) = *(_BYTE *)(a2 + 856);
        *(_BYTE *)(a2 + 856) = *(_BYTE *)(a3 + 856);
        *(_BYTE *)(a3 + 856) = v29;
        if (sub_1006B7280(a2, a1))
        {
          sub_1006B8744((__int128 *)a1, (__int128 *)a2);
          v38 = *(_DWORD *)(a1 + 696);
          *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
          *(_DWORD *)(a2 + 696) = v38;
          v73 = *(_OWORD *)(a1 + 796);
          v77 = *(_OWORD *)(a1 + 812);
          *(_OWORD *)v81 = *(_OWORD *)(a1 + 828);
          *(_OWORD *)&v81[12] = *(_OWORD *)(a1 + 840);
          v57 = *(_OWORD *)(a1 + 732);
          v61 = *(_OWORD *)(a1 + 748);
          v65 = *(_OWORD *)(a1 + 764);
          v69 = *(_OWORD *)(a1 + 780);
          v49 = *(_OWORD *)(a1 + 700);
          v53 = *(_OWORD *)(a1 + 716);
          v39 = *(_OWORD *)(a2 + 716);
          *(_OWORD *)(a1 + 700) = *v30;
          *(_OWORD *)(a1 + 716) = v39;
          v40 = *(_OWORD *)(a2 + 732);
          v41 = *(_OWORD *)(a2 + 748);
          v42 = *(_OWORD *)(a2 + 780);
          *(_OWORD *)(a1 + 764) = *(_OWORD *)(a2 + 764);
          *(_OWORD *)(a1 + 780) = v42;
          *(_OWORD *)(a1 + 732) = v40;
          *(_OWORD *)(a1 + 748) = v41;
          v43 = *(_OWORD *)(a2 + 796);
          v44 = *(_OWORD *)(a2 + 812);
          v45 = *(_OWORD *)(a2 + 828);
          *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
          *(_OWORD *)(a1 + 812) = v44;
          *(_OWORD *)(a1 + 828) = v45;
          *(_OWORD *)(a1 + 796) = v43;
          *(_OWORD *)(a2 + 796) = v73;
          *(_OWORD *)(a2 + 812) = v77;
          *(_OWORD *)(a2 + 828) = *(_OWORD *)v81;
          *(_OWORD *)(a2 + 840) = *(_OWORD *)&v81[12];
          *(_OWORD *)(a2 + 732) = v57;
          *(_OWORD *)(a2 + 748) = v61;
          *(_OWORD *)(a2 + 764) = v65;
          *(_OWORD *)(a2 + 780) = v69;
          result = *(double *)&v49;
          *v30 = v49;
          *(_OWORD *)(a2 + 716) = v53;
          LOBYTE(v38) = *(_BYTE *)(a1 + 856);
          *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
          *(_BYTE *)(a2 + 856) = v38;
        }
      }
    }
  }
  return result;
}

void sub_1006B7804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 *v100;
  uint64_t v101;
  _OWORD v102[3];
  _OWORD v103[2];
  int v104;
  void *v105[2];
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[2];
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  int v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[28];
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[32];
  _BYTE v159[32];
  __int128 v160;
  _OWORD v161[10];
  _OWORD v162[2];
  __int128 __p;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  int v187;
  int v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _BYTE v197[28];
  char v198;

  if (a1 != a2)
  {
    v4 = a2;
    v6 = a2 - a1;
    v7 = (a2 - a1) / 864;
    if (a2 - a1 >= 865)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = a1 + 864 * v8;
      do
      {
        sub_1006B8F68(a1, v7, v10);
        v10 -= 864;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = (_OWORD *)(a1 + 700);
      v12 = v4;
      do
      {
        if (sub_1006B7280(v12, a1))
        {
          sub_1006B8744((__int128 *)v12, (__int128 *)a1);
          v13 = *(_DWORD *)(v12 + 696);
          *(_DWORD *)(v12 + 696) = *(_DWORD *)(a1 + 696);
          *(_DWORD *)(a1 + 696) = v13;
          v14 = *(_OWORD *)(v12 + 812);
          *(_OWORD *)&v159[16] = *(_OWORD *)(v12 + 796);
          v160 = v14;
          v161[0] = *(_OWORD *)(v12 + 828);
          *(_OWORD *)((char *)v161 + 12) = *(_OWORD *)(v12 + 840);
          v15 = *(_OWORD *)(v12 + 732);
          *(_OWORD *)v158 = *(_OWORD *)(v12 + 748);
          v16 = *(_OWORD *)(v12 + 780);
          *(_OWORD *)&v158[16] = *(_OWORD *)(v12 + 764);
          *(_OWORD *)v159 = v16;
          v17 = *(_OWORD *)(v12 + 716);
          v155 = *(_OWORD *)(v12 + 700);
          v156 = v17;
          v157 = v15;
          v18 = *(_OWORD *)(a1 + 716);
          *(_OWORD *)(v12 + 700) = *v11;
          *(_OWORD *)(v12 + 716) = v18;
          v19 = *(_OWORD *)(a1 + 732);
          v20 = *(_OWORD *)(a1 + 748);
          v21 = *(_OWORD *)(a1 + 780);
          *(_OWORD *)(v12 + 764) = *(_OWORD *)(a1 + 764);
          *(_OWORD *)(v12 + 780) = v21;
          *(_OWORD *)(v12 + 732) = v19;
          *(_OWORD *)(v12 + 748) = v20;
          v22 = *(_OWORD *)(a1 + 796);
          v23 = *(_OWORD *)(a1 + 812);
          v24 = *(_OWORD *)(a1 + 828);
          *(_OWORD *)(v12 + 840) = *(_OWORD *)(a1 + 840);
          *(_OWORD *)(v12 + 812) = v23;
          *(_OWORD *)(v12 + 828) = v24;
          *(_OWORD *)(v12 + 796) = v22;
          v25 = v160;
          *(_OWORD *)(a1 + 796) = *(_OWORD *)&v159[16];
          *(_OWORD *)(a1 + 812) = v25;
          *(_OWORD *)(a1 + 828) = v161[0];
          *(_OWORD *)(a1 + 840) = *(_OWORD *)((char *)v161 + 12);
          v26 = *(_OWORD *)v158;
          *(_OWORD *)(a1 + 732) = v157;
          *(_OWORD *)(a1 + 748) = v26;
          v27 = *(_OWORD *)v159;
          *(_OWORD *)(a1 + 764) = *(_OWORD *)&v158[16];
          *(_OWORD *)(a1 + 780) = v27;
          v28 = v156;
          *v11 = v155;
          *(_OWORD *)(a1 + 716) = v28;
          LOBYTE(v13) = *(_BYTE *)(v12 + 856);
          *(_BYTE *)(v12 + 856) = *(_BYTE *)(a1 + 856);
          *(_BYTE *)(a1 + 856) = v13;
          sub_1006B8F68(a1, v7, a1);
        }
        v12 += 864;
      }
      while (v12 != a3);
    }
    if (v6 >= 865)
    {
      v29 = v6 / 0x360uLL;
      v100 = (__int128 *)(a1 + 320);
      do
      {
        v101 = v4;
        v30 = 0;
        v31 = *(_OWORD *)(a1 + 48);
        v102[2] = *(_OWORD *)(a1 + 32);
        v103[0] = v31;
        *(_OWORD *)((char *)v103 + 12) = *(_OWORD *)(a1 + 60);
        v32 = *(_OWORD *)(a1 + 16);
        v102[0] = *(_OWORD *)a1;
        v102[1] = v32;
        v104 = *(_DWORD *)(a1 + 80);
        *(_OWORD *)v105 = *(_OWORD *)(a1 + 88);
        v106 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v33 = *(_OWORD *)(a1 + 288);
        v117 = *(_OWORD *)(a1 + 272);
        v118[0] = v33;
        *(_OWORD *)((char *)v118 + 12) = *(_OWORD *)(a1 + 300);
        v34 = *(_OWORD *)(a1 + 224);
        v113 = *(_OWORD *)(a1 + 208);
        v114 = v34;
        v35 = *(_OWORD *)(a1 + 256);
        v115 = *(_OWORD *)(a1 + 240);
        v116 = v35;
        v36 = *(_OWORD *)(a1 + 160);
        v109 = *(_OWORD *)(a1 + 144);
        v110 = v36;
        v37 = *(_OWORD *)(a1 + 192);
        v111 = *(_OWORD *)(a1 + 176);
        v112 = v37;
        v38 = *(_OWORD *)(a1 + 128);
        v107 = *(_OWORD *)(a1 + 112);
        v108 = v38;
        v119 = *v100;
        v120 = *(_QWORD *)(a1 + 336);
        *(_QWORD *)(a1 + 328) = 0;
        *(_QWORD *)(a1 + 336) = 0;
        *(_QWORD *)v100 = 0;
        v39 = *(_OWORD *)(a1 + 488);
        v129 = *(_OWORD *)(a1 + 472);
        v130 = v39;
        v131 = *(_DWORD *)(a1 + 504);
        v40 = *(_OWORD *)(a1 + 424);
        v125 = *(_OWORD *)(a1 + 408);
        v126 = v40;
        v41 = *(_OWORD *)(a1 + 456);
        v127 = *(_OWORD *)(a1 + 440);
        v128 = v41;
        v42 = *(_OWORD *)(a1 + 360);
        v121 = *(_OWORD *)(a1 + 344);
        v122 = v42;
        v43 = *(_OWORD *)(a1 + 392);
        v123 = *(_OWORD *)(a1 + 376);
        v124 = v43;
        v44 = *(_OWORD *)(a1 + 656);
        v140 = *(_OWORD *)(a1 + 640);
        v141 = v44;
        v142 = *(_OWORD *)(a1 + 672);
        v143 = *(_DWORD *)(a1 + 688);
        v45 = *(_OWORD *)(a1 + 592);
        v136 = *(_OWORD *)(a1 + 576);
        v137 = v45;
        v46 = *(_OWORD *)(a1 + 624);
        v138 = *(_OWORD *)(a1 + 608);
        v139 = v46;
        v47 = *(_OWORD *)(a1 + 528);
        v132 = *(_OWORD *)(a1 + 512);
        v133 = v47;
        v48 = *(_OWORD *)(a1 + 560);
        v134 = *(_OWORD *)(a1 + 544);
        v135 = v48;
        v144 = *(_DWORD *)(a1 + 696);
        v49 = *(_OWORD *)(a1 + 812);
        v151 = *(_OWORD *)(a1 + 796);
        v152 = v49;
        *(_OWORD *)v153 = *(_OWORD *)(a1 + 828);
        *(_OWORD *)&v153[12] = *(_OWORD *)(a1 + 840);
        v50 = *(_OWORD *)(a1 + 748);
        v147 = *(_OWORD *)(a1 + 732);
        v148 = v50;
        v51 = *(_OWORD *)(a1 + 780);
        v149 = *(_OWORD *)(a1 + 764);
        v150 = v51;
        v52 = *(_OWORD *)(a1 + 700);
        v53 = *(_OWORD *)(a1 + 716);
        v154 = *(_BYTE *)(a1 + 856);
        v54 = a1;
        v145 = v52;
        v146 = v53;
        do
        {
          v55 = v54 + 864 * v30 + 864;
          v56 = (2 * v30) | 1;
          v57 = 2 * v30 + 2;
          if (v57 < v29 && sub_1006B7280(v54 + 864 * v30 + 864, v54 + 864 * v30 + 1728))
          {
            v55 += 864;
            v56 = v57;
          }
          sub_1006B8DD8(v54, v55);
          v54 = v55;
          v30 = v56;
        }
        while (v56 <= (uint64_t)((unint64_t)(v29 - 2) >> 1));
        v4 = v101 - 864;
        if (v55 == v101 - 864)
        {
          sub_1006B8DD8(v55, (uint64_t)v102);
        }
        else
        {
          sub_1006B8DD8(v55, v101 - 864);
          sub_1006B8DD8(v4, (uint64_t)v102);
          v58 = v55 - a1 + 864;
          if (v58 >= 865)
          {
            v59 = (v58 / 0x360uLL - 2) >> 1;
            v60 = a1 + 864 * v59;
            if (sub_1006B7280(v60, v55))
            {
              v155 = *(_OWORD *)v55;
              v61 = *(_OWORD *)(v55 + 16);
              v62 = *(_OWORD *)(v55 + 32);
              v63 = *(_OWORD *)(v55 + 48);
              *(_OWORD *)&v158[12] = *(_OWORD *)(v55 + 60);
              *(_OWORD *)v158 = v63;
              v156 = v61;
              v157 = v62;
              *(_DWORD *)v159 = *(_DWORD *)(v55 + 80);
              *(_OWORD *)&v159[8] = *(_OWORD *)(v55 + 88);
              *(_QWORD *)&v159[24] = *(_QWORD *)(v55 + 104);
              *(_QWORD *)(v55 + 96) = 0;
              *(_QWORD *)(v55 + 104) = 0;
              *(_QWORD *)(v55 + 88) = 0;
              v64 = *(_OWORD *)(v55 + 176);
              v66 = *(_OWORD *)(v55 + 128);
              v65 = *(_OWORD *)(v55 + 144);
              v161[2] = *(_OWORD *)(v55 + 160);
              v161[3] = v64;
              v161[0] = v66;
              v161[1] = v65;
              v67 = *(_OWORD *)(v55 + 240);
              v69 = *(_OWORD *)(v55 + 192);
              v68 = *(_OWORD *)(v55 + 208);
              v161[6] = *(_OWORD *)(v55 + 224);
              v161[7] = v67;
              v161[4] = v69;
              v161[5] = v68;
              v71 = *(_OWORD *)(v55 + 272);
              v70 = *(_OWORD *)(v55 + 288);
              v72 = *(_OWORD *)(v55 + 256);
              *(_OWORD *)((char *)v162 + 12) = *(_OWORD *)(v55 + 300);
              v161[9] = v71;
              v162[0] = v70;
              v161[8] = v72;
              v160 = *(_OWORD *)(v55 + 112);
              v73 = *(_OWORD *)(v55 + 320);
              v164 = *(_QWORD *)(v55 + 336);
              __p = v73;
              *(_QWORD *)(v55 + 328) = 0;
              *(_QWORD *)(v55 + 336) = 0;
              *(_QWORD *)(v55 + 320) = 0;
              v74 = *(_OWORD *)(v55 + 440);
              v76 = *(_OWORD *)(v55 + 392);
              v75 = *(_OWORD *)(v55 + 408);
              v170 = *(_OWORD *)(v55 + 424);
              v171 = v74;
              v168 = v76;
              v169 = v75;
              v77 = *(_OWORD *)(v55 + 344);
              v78 = *(_OWORD *)(v55 + 376);
              v166 = *(_OWORD *)(v55 + 360);
              v167 = v78;
              v165 = v77;
              v80 = *(_OWORD *)(v55 + 472);
              v79 = *(_OWORD *)(v55 + 488);
              v81 = *(_OWORD *)(v55 + 456);
              v175 = *(_DWORD *)(v55 + 504);
              v173 = v80;
              v174 = v79;
              v172 = v81;
              v82 = *(_OWORD *)(v55 + 512);
              v83 = *(_OWORD *)(v55 + 528);
              v84 = *(_OWORD *)(v55 + 560);
              v178 = *(_OWORD *)(v55 + 544);
              v179 = v84;
              v176 = v82;
              v177 = v83;
              v85 = *(_OWORD *)(v55 + 576);
              v86 = *(_OWORD *)(v55 + 592);
              v87 = *(_OWORD *)(v55 + 624);
              v182 = *(_OWORD *)(v55 + 608);
              v183 = v87;
              v180 = v85;
              v181 = v86;
              v88 = *(_OWORD *)(v55 + 640);
              v89 = *(_OWORD *)(v55 + 656);
              v90 = *(_OWORD *)(v55 + 672);
              v187 = *(_DWORD *)(v55 + 688);
              v185 = v89;
              v186 = v90;
              v184 = v88;
              v188 = *(_DWORD *)(v55 + 696);
              v91 = *(_OWORD *)(v55 + 716);
              v189 = *(_OWORD *)(v55 + 700);
              v190 = v91;
              v92 = *(_OWORD *)(v55 + 732);
              v93 = *(_OWORD *)(v55 + 748);
              v94 = *(_OWORD *)(v55 + 780);
              v193 = *(_OWORD *)(v55 + 764);
              v194 = v94;
              v191 = v92;
              v192 = v93;
              v95 = *(_OWORD *)(v55 + 796);
              v96 = *(_OWORD *)(v55 + 812);
              v97 = *(_OWORD *)(v55 + 828);
              *(_OWORD *)&v197[12] = *(_OWORD *)(v55 + 840);
              v196 = v96;
              *(_OWORD *)v197 = v97;
              v195 = v95;
              v198 = *(_BYTE *)(v55 + 856);
              do
              {
                v98 = v60;
                sub_1006B8DD8(v55, v60);
                if (!v59)
                  break;
                v59 = (v59 - 1) >> 1;
                v60 = a1 + 864 * v59;
                v55 = v98;
              }
              while ((sub_1006B7280(v60, (uint64_t)&v155) & 1) != 0);
              sub_1006B8DD8(v98, (uint64_t)&v155);
              if (SHIBYTE(v164) < 0)
                operator delete((void *)__p);
              if (*(_QWORD *)&v159[8])
              {
                *(_QWORD *)&v159[16] = *(_QWORD *)&v159[8];
                operator delete(*(void **)&v159[8]);
              }
            }
          }
        }
        if (SHIBYTE(v120) < 0)
          operator delete((void *)v119);
        if (v105[0])
        {
          v105[1] = v105[0];
          operator delete(v105[0]);
        }
      }
      while (v29-- > 2);
    }
  }
}

void sub_1006B7E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void sub_1006B7ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  __int128 *v8;
  char *v9;
  int v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[28];
  _BYTE v88[28];
  _BYTE v89[28];
  _BYTE v90[28];

  v6 = sub_1006B7280(a2, a1);
  v7 = sub_1006B7280(a3, a2);
  if ((v6 & 1) != 0)
  {
    v8 = (__int128 *)(a1 + 700);
    if (v7)
    {
      v9 = (char *)(a1 + 856);
      sub_1006B8744((__int128 *)a1, (__int128 *)a3);
      v10 = *(_DWORD *)(a1 + 696);
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a3 + 696);
      *(_DWORD *)(a3 + 696) = v10;
      v11 = (_OWORD *)(a3 + 700);
      v79 = *(_OWORD *)(a1 + 796);
      v83 = *(_OWORD *)(a1 + 812);
      *(_OWORD *)v87 = *(_OWORD *)(a1 + 828);
      *(_OWORD *)&v87[12] = *(_OWORD *)(a1 + 840);
      v63 = *(_OWORD *)(a1 + 732);
      v67 = *(_OWORD *)(a1 + 748);
      v71 = *(_OWORD *)(a1 + 764);
      v75 = *(_OWORD *)(a1 + 780);
      v55 = *v8;
      v59 = *(_OWORD *)(a1 + 716);
      v12 = *(_OWORD *)(a3 + 716);
      *v8 = *(_OWORD *)(a3 + 700);
      *(_OWORD *)(a1 + 716) = v12;
      v13 = *(_OWORD *)(a3 + 732);
      v14 = *(_OWORD *)(a3 + 748);
      v15 = *(_OWORD *)(a3 + 780);
      *(_OWORD *)(a1 + 764) = *(_OWORD *)(a3 + 764);
      *(_OWORD *)(a1 + 780) = v15;
      *(_OWORD *)(a1 + 732) = v13;
      *(_OWORD *)(a1 + 748) = v14;
      v16 = *(_OWORD *)(a3 + 796);
      v17 = *(_OWORD *)(a3 + 812);
      v18 = *(_OWORD *)(a3 + 828);
      *(_OWORD *)(a1 + 840) = *(_OWORD *)(a3 + 840);
      *(_OWORD *)(a1 + 812) = v17;
      *(_OWORD *)(a1 + 828) = v18;
      *(_OWORD *)(a1 + 796) = v16;
    }
    else
    {
      sub_1006B8744((__int128 *)a1, (__int128 *)a2);
      v37 = *(_DWORD *)(a1 + 696);
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a2 + 696) = v37;
      v38 = (__int128 *)(a2 + 700);
      v82 = *(_OWORD *)(a1 + 796);
      v86 = *(_OWORD *)(a1 + 812);
      *(_OWORD *)v90 = *(_OWORD *)(a1 + 828);
      *(_OWORD *)&v90[12] = *(_OWORD *)(a1 + 840);
      v66 = *(_OWORD *)(a1 + 732);
      v70 = *(_OWORD *)(a1 + 748);
      v74 = *(_OWORD *)(a1 + 764);
      v78 = *(_OWORD *)(a1 + 780);
      v58 = *v8;
      v62 = *(_OWORD *)(a1 + 716);
      v39 = *(_OWORD *)(a2 + 716);
      *v8 = *(_OWORD *)(a2 + 700);
      *(_OWORD *)(a1 + 716) = v39;
      v40 = *(_OWORD *)(a2 + 732);
      v41 = *(_OWORD *)(a2 + 748);
      v42 = *(_OWORD *)(a2 + 780);
      *(_OWORD *)(a1 + 764) = *(_OWORD *)(a2 + 764);
      *(_OWORD *)(a1 + 780) = v42;
      *(_OWORD *)(a1 + 732) = v40;
      *(_OWORD *)(a1 + 748) = v41;
      v43 = *(_OWORD *)(a2 + 796);
      v44 = *(_OWORD *)(a2 + 812);
      v45 = *(_OWORD *)(a2 + 828);
      *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
      *(_OWORD *)(a1 + 812) = v44;
      *(_OWORD *)(a1 + 828) = v45;
      *(_OWORD *)(a1 + 796) = v43;
      *(_OWORD *)(a2 + 796) = v82;
      *(_OWORD *)(a2 + 812) = v86;
      *(_OWORD *)(a2 + 828) = *(_OWORD *)v90;
      *(_OWORD *)(a2 + 840) = *(_OWORD *)&v90[12];
      *(_OWORD *)(a2 + 732) = v66;
      *(_OWORD *)(a2 + 748) = v70;
      *(_OWORD *)(a2 + 764) = v74;
      *(_OWORD *)(a2 + 780) = v78;
      *(_OWORD *)(a2 + 700) = v58;
      *(_OWORD *)(a2 + 716) = v62;
      LOBYTE(v37) = *(_BYTE *)(a1 + 856);
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
      *(_BYTE *)(a2 + 856) = v37;
      if (!sub_1006B7280(a3, a2))
        return;
      v9 = (char *)(a2 + 856);
      sub_1006B8744((__int128 *)a2, (__int128 *)a3);
      v46 = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a2 + 696) = *(_DWORD *)(a3 + 696);
      *(_DWORD *)(a3 + 696) = v46;
      v11 = (_OWORD *)(a3 + 700);
      v79 = *(_OWORD *)(a2 + 796);
      v83 = *(_OWORD *)(a2 + 812);
      *(_OWORD *)v87 = *(_OWORD *)(a2 + 828);
      *(_OWORD *)&v87[12] = *(_OWORD *)(a2 + 840);
      v63 = *(_OWORD *)(a2 + 732);
      v67 = *(_OWORD *)(a2 + 748);
      v71 = *(_OWORD *)(a2 + 764);
      v75 = *(_OWORD *)(a2 + 780);
      v55 = *v38;
      v59 = *(_OWORD *)(a2 + 716);
      v47 = *(_OWORD *)(a3 + 716);
      *v38 = *(_OWORD *)(a3 + 700);
      *(_OWORD *)(a2 + 716) = v47;
      v48 = *(_OWORD *)(a3 + 732);
      v49 = *(_OWORD *)(a3 + 748);
      v50 = *(_OWORD *)(a3 + 780);
      *(_OWORD *)(a2 + 764) = *(_OWORD *)(a3 + 764);
      *(_OWORD *)(a2 + 780) = v50;
      *(_OWORD *)(a2 + 732) = v48;
      *(_OWORD *)(a2 + 748) = v49;
      v51 = *(_OWORD *)(a3 + 796);
      v52 = *(_OWORD *)(a3 + 812);
      v53 = *(_OWORD *)(a3 + 828);
      *(_OWORD *)(a2 + 840) = *(_OWORD *)(a3 + 840);
      *(_OWORD *)(a2 + 812) = v52;
      *(_OWORD *)(a2 + 828) = v53;
      *(_OWORD *)(a2 + 796) = v51;
    }
    v11[6] = v79;
    v11[7] = v83;
    v11[8] = *(_OWORD *)v87;
    *(_OWORD *)((char *)v11 + 140) = *(_OWORD *)&v87[12];
    v11[2] = v63;
    v11[3] = v67;
    v11[4] = v71;
    v11[5] = v75;
    v28 = (char *)(a3 + 856);
    *v11 = v55;
    v11[1] = v59;
    goto LABEL_10;
  }
  if (v7)
  {
    sub_1006B8744((__int128 *)a2, (__int128 *)a3);
    v19 = *(_DWORD *)(a2 + 696);
    *(_DWORD *)(a2 + 696) = *(_DWORD *)(a3 + 696);
    *(_DWORD *)(a3 + 696) = v19;
    v20 = (_OWORD *)(a2 + 700);
    v80 = *(_OWORD *)(a2 + 796);
    v84 = *(_OWORD *)(a2 + 812);
    *(_OWORD *)v88 = *(_OWORD *)(a2 + 828);
    *(_OWORD *)&v88[12] = *(_OWORD *)(a2 + 840);
    v64 = *(_OWORD *)(a2 + 732);
    v68 = *(_OWORD *)(a2 + 748);
    v72 = *(_OWORD *)(a2 + 764);
    v76 = *(_OWORD *)(a2 + 780);
    v56 = *(_OWORD *)(a2 + 700);
    v60 = *(_OWORD *)(a2 + 716);
    v21 = *(_OWORD *)(a3 + 716);
    *(_OWORD *)(a2 + 700) = *(_OWORD *)(a3 + 700);
    *(_OWORD *)(a2 + 716) = v21;
    v22 = *(_OWORD *)(a3 + 732);
    v23 = *(_OWORD *)(a3 + 748);
    v24 = *(_OWORD *)(a3 + 780);
    *(_OWORD *)(a2 + 764) = *(_OWORD *)(a3 + 764);
    *(_OWORD *)(a2 + 780) = v24;
    *(_OWORD *)(a2 + 732) = v22;
    *(_OWORD *)(a2 + 748) = v23;
    v25 = *(_OWORD *)(a3 + 796);
    v26 = *(_OWORD *)(a3 + 812);
    v27 = *(_OWORD *)(a3 + 828);
    *(_OWORD *)(a2 + 840) = *(_OWORD *)(a3 + 840);
    *(_OWORD *)(a2 + 812) = v26;
    *(_OWORD *)(a2 + 828) = v27;
    *(_OWORD *)(a2 + 796) = v25;
    *(_OWORD *)(a3 + 796) = v80;
    *(_OWORD *)(a3 + 812) = v84;
    *(_OWORD *)(a3 + 828) = *(_OWORD *)v88;
    *(_OWORD *)(a3 + 840) = *(_OWORD *)&v88[12];
    *(_OWORD *)(a3 + 732) = v64;
    *(_OWORD *)(a3 + 748) = v68;
    *(_OWORD *)(a3 + 764) = v72;
    *(_OWORD *)(a3 + 780) = v76;
    *(_OWORD *)(a3 + 700) = v56;
    *(_OWORD *)(a3 + 716) = v60;
    LOBYTE(v19) = *(_BYTE *)(a2 + 856);
    *(_BYTE *)(a2 + 856) = *(_BYTE *)(a3 + 856);
    *(_BYTE *)(a3 + 856) = v19;
    if (sub_1006B7280(a2, a1))
    {
      v28 = (char *)(a2 + 856);
      sub_1006B8744((__int128 *)a1, (__int128 *)a2);
      v29 = *(_DWORD *)(a1 + 696);
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a2 + 696) = v29;
      v81 = *(_OWORD *)(a1 + 796);
      v85 = *(_OWORD *)(a1 + 812);
      *(_OWORD *)v89 = *(_OWORD *)(a1 + 828);
      *(_OWORD *)&v89[12] = *(_OWORD *)(a1 + 840);
      v65 = *(_OWORD *)(a1 + 732);
      v69 = *(_OWORD *)(a1 + 748);
      v73 = *(_OWORD *)(a1 + 764);
      v77 = *(_OWORD *)(a1 + 780);
      v57 = *(_OWORD *)(a1 + 700);
      v61 = *(_OWORD *)(a1 + 716);
      v30 = *(_OWORD *)(a2 + 716);
      *(_OWORD *)(a1 + 700) = *v20;
      *(_OWORD *)(a1 + 716) = v30;
      v31 = *(_OWORD *)(a2 + 732);
      v32 = *(_OWORD *)(a2 + 748);
      v33 = *(_OWORD *)(a2 + 780);
      *(_OWORD *)(a1 + 764) = *(_OWORD *)(a2 + 764);
      *(_OWORD *)(a1 + 780) = v33;
      *(_OWORD *)(a1 + 732) = v31;
      *(_OWORD *)(a1 + 748) = v32;
      v34 = *(_OWORD *)(a2 + 796);
      v35 = *(_OWORD *)(a2 + 812);
      v36 = *(_OWORD *)(a2 + 828);
      *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
      *(_OWORD *)(a1 + 812) = v35;
      *(_OWORD *)(a1 + 828) = v36;
      *(_OWORD *)(a1 + 796) = v34;
      *(_OWORD *)(a2 + 796) = v81;
      *(_OWORD *)(a2 + 812) = v85;
      *(_OWORD *)(a2 + 828) = *(_OWORD *)v89;
      *(_OWORD *)(a2 + 840) = *(_OWORD *)&v89[12];
      *(_OWORD *)(a2 + 732) = v65;
      *(_OWORD *)(a2 + 748) = v69;
      *(_OWORD *)(a2 + 764) = v73;
      *(_OWORD *)(a2 + 780) = v77;
      v9 = (char *)(a1 + 856);
      *v20 = v57;
      *(_OWORD *)(a2 + 716) = v61;
LABEL_10:
      v54 = *v9;
      *v9 = *v28;
      *v28 = v54;
    }
  }
}

BOOL sub_1006B82F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[32];
  _BYTE v57[32];
  __int128 v58;
  _OWORD v59[10];
  _OWORD v60[2];
  __int128 __p;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[28];
  char v96;

  v2 = a2;
  v4 = 0x84BDA12F684BDA13 * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 864);
      if (!sub_1006B7280(a2 - 864, a1))
        return 1;
      sub_1006B8744((__int128 *)a1, v6);
      v7 = *(_DWORD *)(a1 + 696);
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(v2 - 168);
      *(_DWORD *)(v2 - 168) = v7;
      v8 = *(_OWORD *)(a1 + 812);
      *(_OWORD *)&v57[16] = *(_OWORD *)(a1 + 796);
      v58 = v8;
      v59[0] = *(_OWORD *)(a1 + 828);
      *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)(a1 + 840);
      v9 = *(_OWORD *)(a1 + 748);
      v55 = *(_OWORD *)(a1 + 732);
      *(_OWORD *)v56 = v9;
      v10 = *(_OWORD *)(a1 + 780);
      *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 764);
      *(_OWORD *)v57 = v10;
      v11 = *(_OWORD *)(a1 + 716);
      v53 = *(_OWORD *)(a1 + 700);
      v54 = v11;
      v12 = *(_OWORD *)(v2 - 148);
      *(_OWORD *)(a1 + 700) = *(_OWORD *)(v2 - 164);
      *(_OWORD *)(a1 + 716) = v12;
      v13 = *(_OWORD *)(v2 - 132);
      v14 = *(_OWORD *)(v2 - 116);
      v15 = *(_OWORD *)(v2 - 84);
      *(_OWORD *)(a1 + 764) = *(_OWORD *)(v2 - 100);
      *(_OWORD *)(a1 + 780) = v15;
      *(_OWORD *)(a1 + 732) = v13;
      *(_OWORD *)(a1 + 748) = v14;
      v16 = *(_OWORD *)(v2 - 68);
      v17 = *(_OWORD *)(v2 - 52);
      v18 = *(_OWORD *)(v2 - 36);
      *(_OWORD *)(a1 + 840) = *(_OWORD *)(v2 - 24);
      *(_OWORD *)(a1 + 812) = v17;
      *(_OWORD *)(a1 + 828) = v18;
      *(_OWORD *)(a1 + 796) = v16;
      v19 = v58;
      *(_OWORD *)(v2 - 68) = *(_OWORD *)&v57[16];
      *(_OWORD *)(v2 - 52) = v19;
      *(_OWORD *)(v2 - 36) = v59[0];
      *(_OWORD *)(v2 - 24) = *(_OWORD *)((char *)v59 + 12);
      v20 = *(_OWORD *)v56;
      *(_OWORD *)(v2 - 132) = v55;
      *(_OWORD *)(v2 - 116) = v20;
      v21 = *(_OWORD *)v57;
      *(_OWORD *)(v2 - 100) = *(_OWORD *)&v56[16];
      *(_OWORD *)(v2 - 84) = v21;
      v22 = v54;
      *(_OWORD *)(v2 - 164) = v53;
      *(_OWORD *)(v2 - 148) = v22;
      LOBYTE(v7) = *(_BYTE *)(a1 + 856);
      *(_BYTE *)(a1 + 856) = *(_BYTE *)(v2 - 8);
      result = 1;
      *(_BYTE *)(v2 - 8) = v7;
      return result;
    case 3uLL:
      sub_1006B7ED4(a1, a1 + 864, a2 - 864);
      return 1;
    case 4uLL:
      sub_1006B8B1C(a1, a1 + 864, a1 + 1728, a2 - 864);
      return 1;
    case 5uLL:
      sub_1006B746C(a1, a1 + 864, a1 + 1728, a1 + 2592, a2 - 864);
      return 1;
    default:
      v23 = a1 + 1728;
      sub_1006B7ED4(a1, a1 + 864, a1 + 1728);
      v24 = a1 + 2592;
      if (a1 + 2592 == v2)
        return 1;
      v25 = 0;
      v26 = 0;
      v52 = v2;
      break;
  }
  while (1)
  {
    if (sub_1006B7280(v24, v23))
    {
      v27 = *(_OWORD *)(v24 + 48);
      v55 = *(_OWORD *)(v24 + 32);
      *(_OWORD *)v56 = v27;
      *(_OWORD *)&v56[12] = *(_OWORD *)(v24 + 60);
      v28 = *(_OWORD *)(v24 + 16);
      v53 = *(_OWORD *)v24;
      v54 = v28;
      *(_DWORD *)v57 = *(_DWORD *)(v24 + 80);
      *(_OWORD *)&v57[8] = *(_OWORD *)(v24 + 88);
      *(_QWORD *)&v57[24] = *(_QWORD *)(v24 + 104);
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      *(_QWORD *)(v24 + 104) = 0;
      v29 = *(_OWORD *)(v24 + 288);
      v59[9] = *(_OWORD *)(v24 + 272);
      v60[0] = v29;
      *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)(v24 + 300);
      v30 = *(_OWORD *)(v24 + 224);
      v59[5] = *(_OWORD *)(v24 + 208);
      v59[6] = v30;
      v31 = *(_OWORD *)(v24 + 256);
      v59[7] = *(_OWORD *)(v24 + 240);
      v59[8] = v31;
      v32 = *(_OWORD *)(v24 + 160);
      v59[1] = *(_OWORD *)(v24 + 144);
      v59[2] = v32;
      v33 = *(_OWORD *)(v24 + 192);
      v59[3] = *(_OWORD *)(v24 + 176);
      v59[4] = v33;
      v34 = *(_OWORD *)(v24 + 128);
      v58 = *(_OWORD *)(v24 + 112);
      v59[0] = v34;
      __p = *(_OWORD *)(v24 + 320);
      v62 = *(_QWORD *)(v24 + 336);
      *(_QWORD *)(v24 + 328) = 0;
      *(_QWORD *)(v24 + 336) = 0;
      *(_QWORD *)(v24 + 320) = 0;
      v35 = *(_OWORD *)(v24 + 488);
      v71 = *(_OWORD *)(v24 + 472);
      v72 = v35;
      v73 = *(_DWORD *)(v24 + 504);
      v36 = *(_OWORD *)(v24 + 424);
      v67 = *(_OWORD *)(v24 + 408);
      v68 = v36;
      v37 = *(_OWORD *)(v24 + 456);
      v69 = *(_OWORD *)(v24 + 440);
      v70 = v37;
      v38 = *(_OWORD *)(v24 + 360);
      v63 = *(_OWORD *)(v24 + 344);
      v64 = v38;
      v39 = *(_OWORD *)(v24 + 392);
      v65 = *(_OWORD *)(v24 + 376);
      v66 = v39;
      v40 = *(_OWORD *)(v24 + 656);
      v82 = *(_OWORD *)(v24 + 640);
      v83 = v40;
      v84 = *(_OWORD *)(v24 + 672);
      v85 = *(_DWORD *)(v24 + 688);
      v41 = *(_OWORD *)(v24 + 592);
      v78 = *(_OWORD *)(v24 + 576);
      v79 = v41;
      v42 = *(_OWORD *)(v24 + 624);
      v80 = *(_OWORD *)(v24 + 608);
      v81 = v42;
      v43 = *(_OWORD *)(v24 + 528);
      v74 = *(_OWORD *)(v24 + 512);
      v75 = v43;
      v44 = *(_OWORD *)(v24 + 560);
      v76 = *(_OWORD *)(v24 + 544);
      v77 = v44;
      v86 = *(_DWORD *)(v24 + 696);
      v45 = *(_OWORD *)(v24 + 812);
      v93 = *(_OWORD *)(v24 + 796);
      v94 = v45;
      *(_OWORD *)v95 = *(_OWORD *)(v24 + 828);
      *(_OWORD *)&v95[12] = *(_OWORD *)(v24 + 840);
      v46 = *(_OWORD *)(v24 + 748);
      v89 = *(_OWORD *)(v24 + 732);
      v90 = v46;
      v47 = *(_OWORD *)(v24 + 780);
      v91 = *(_OWORD *)(v24 + 764);
      v92 = v47;
      v48 = *(_OWORD *)(v24 + 716);
      v87 = *(_OWORD *)(v24 + 700);
      v88 = v48;
      v49 = v25;
      v96 = *(_BYTE *)(v24 + 856);
      while (1)
      {
        sub_1006B8DD8(a1 + v49 + 2592, a1 + v49 + 1728);
        if (v49 == -1728)
          break;
        v50 = sub_1006B7280((uint64_t)&v53, a1 + v49 + 864);
        v49 -= 864;
        if ((v50 & 1) == 0)
        {
          v51 = a1 + v49 + 2592;
          goto LABEL_12;
        }
      }
      v51 = a1;
LABEL_12:
      sub_1006B8DD8(v51, (uint64_t)&v53);
      v2 = v52;
      if (SHIBYTE(v62) < 0)
        operator delete((void *)__p);
      if (*(_QWORD *)&v57[8])
      {
        *(_QWORD *)&v57[16] = *(_QWORD *)&v57[8];
        operator delete(*(void **)&v57[8]);
      }
      if (++v26 == 8)
        return v24 + 864 == v52;
    }
    v23 = v24;
    v25 += 864;
    v24 += 864;
    if (v24 == v2)
      return 1;
  }
}

void sub_1006B8704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006B8718(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

__n128 sub_1006B8744(__int128 *a1, __int128 *a2)
{
  __int128 *v4;
  int v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  __n128 result;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[28];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[28];
  __int128 v76;
  __int128 v77;
  __n128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  _BYTE v88[15];

  v74 = a1[2];
  *(_OWORD *)v75 = a1[3];
  *(_OWORD *)&v75[12] = *(__int128 *)((char *)a1 + 60);
  v4 = a1 + 5;
  v5 = *((_DWORD *)a1 + 20);
  v72 = *a1;
  v73 = a1[1];
  v7 = *(__int128 *)((char *)a1 + 88);
  v6 = (_QWORD *)a1 + 11;
  v46 = v7;
  v45 = *((_QWORD *)a1 + 13);
  *v6 = 0;
  *((_QWORD *)a1 + 12) = 0;
  *((_QWORD *)a1 + 13) = 0;
  v62 = a1[9];
  v63 = a1[10];
  v60 = a1[7];
  v61 = a1[8];
  v66 = a1[13];
  v67 = a1[14];
  v64 = a1[11];
  v65 = a1[12];
  *(_OWORD *)&v71[12] = *(__int128 *)((char *)v4 + 220);
  v70 = a1[17];
  *(_OWORD *)v71 = a1[18];
  v68 = a1[15];
  v69 = a1[16];
  v47 = *((_QWORD *)a1 + 40);
  v8 = *((_QWORD *)a1 + 41);
  v9 = *(_QWORD *)((char *)v4 + 255);
  v48 = *((_BYTE *)a1 + 343);
  *((_QWORD *)a1 + 41) = 0;
  *((_QWORD *)a1 + 42) = 0;
  *((_QWORD *)a1 + 40) = 0;
  v57 = *(__int128 *)((char *)a1 + 472);
  v58 = *(__int128 *)((char *)a1 + 488);
  v53 = *(__int128 *)((char *)a1 + 408);
  v54 = *(__int128 *)((char *)a1 + 424);
  v55 = *(__int128 *)((char *)a1 + 440);
  v56 = *(__int128 *)((char *)a1 + 456);
  v49 = *(__int128 *)((char *)a1 + 344);
  v50 = *(__int128 *)((char *)a1 + 360);
  v51 = *(__int128 *)((char *)a1 + 376);
  v52 = *(__int128 *)((char *)a1 + 392);
  v84 = a1[40];
  v85 = a1[41];
  v86 = a1[42];
  v80 = a1[36];
  v81 = a1[37];
  v82 = a1[38];
  v83 = a1[39];
  v76 = a1[32];
  v77 = a1[33];
  v10 = a1[35];
  v78 = (__n128)a1[34];
  *a1 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  *(__int128 *)((char *)a1 + 60) = *(__int128 *)((char *)a2 + 60);
  v14 = (void **)(a1 + 20);
  *(_QWORD *)v88 = v8;
  *(_QWORD *)&v88[7] = v9;
  v59 = *((_DWORD *)a1 + 126);
  v87 = *((_DWORD *)a1 + 172);
  a1[2] = v12;
  a1[3] = v13;
  a1[1] = v11;
  v15 = a2 + 5;
  *(_DWORD *)v4 = *((_DWORD *)a2 + 20);
  v79 = v10;
  sub_100006898((uint64_t)v6, (__n128 *)((char *)a2 + 88));
  a1[7] = v15[2];
  v16 = v15[3];
  v17 = v15[4];
  v18 = v15[6];
  a1[10] = v15[5];
  a1[11] = v18;
  a1[8] = v16;
  a1[9] = v17;
  v19 = v15[7];
  v20 = v15[8];
  v21 = v15[10];
  a1[14] = v15[9];
  a1[15] = v21;
  a1[12] = v19;
  a1[13] = v20;
  v22 = v15[11];
  v23 = v15[12];
  v24 = v15[13];
  *(__int128 *)((char *)v4 + 220) = *(_OWORD *)((char *)v15 + 220);
  a1[17] = v23;
  a1[18] = v24;
  a1[16] = v22;
  if (*((char *)a1 + 343) < 0)
    operator delete(*v14);
  v25 = a2[20];
  *((_QWORD *)a1 + 42) = *((_QWORD *)a2 + 42);
  *(_OWORD *)v14 = v25;
  *((_BYTE *)a2 + 343) = 0;
  *((_BYTE *)a2 + 320) = 0;
  v27 = *(__int128 *)((char *)a2 + 424);
  v26 = *(__int128 *)((char *)a2 + 440);
  v28 = *(__int128 *)((char *)a2 + 408);
  *(__int128 *)((char *)a1 + 392) = *(__int128 *)((char *)a2 + 392);
  *(__int128 *)((char *)a1 + 408) = v28;
  *(__int128 *)((char *)a1 + 424) = v27;
  *(__int128 *)((char *)a1 + 440) = v26;
  v30 = *(__int128 *)((char *)a2 + 360);
  v29 = *(__int128 *)((char *)a2 + 376);
  *(__int128 *)((char *)a1 + 344) = *(__int128 *)((char *)a2 + 344);
  *(__int128 *)((char *)a1 + 360) = v30;
  *(__int128 *)((char *)a1 + 376) = v29;
  v31 = *(__int128 *)((char *)a2 + 456);
  v32 = *(__int128 *)((char *)a2 + 472);
  v33 = *(__int128 *)((char *)a2 + 488);
  *((_DWORD *)a1 + 126) = *((_DWORD *)a2 + 126);
  *(__int128 *)((char *)a1 + 472) = v32;
  *(__int128 *)((char *)a1 + 488) = v33;
  *(__int128 *)((char *)a1 + 456) = v31;
  v34 = a2[32];
  v35 = a2[33];
  v36 = a2[35];
  a1[34] = a2[34];
  a1[35] = v36;
  a1[32] = v34;
  a1[33] = v35;
  v37 = a2[36];
  v38 = a2[37];
  v39 = a2[39];
  a1[38] = a2[38];
  a1[39] = v39;
  a1[36] = v37;
  a1[37] = v38;
  v40 = a2[40];
  v41 = a2[41];
  v42 = a2[42];
  *((_DWORD *)a1 + 172) = *((_DWORD *)a2 + 172);
  a1[41] = v41;
  a1[42] = v42;
  a1[40] = v40;
  a2[2] = v74;
  a2[3] = *(_OWORD *)v75;
  *(__int128 *)((char *)a2 + 60) = *(_OWORD *)&v75[12];
  *a2 = v72;
  a2[1] = v73;
  *((_DWORD *)a2 + 20) = v5;
  v43 = (void *)*((_QWORD *)a2 + 11);
  if (v43)
  {
    *((_QWORD *)a2 + 12) = v43;
    operator delete(v43);
  }
  *(__int128 *)((char *)a2 + 88) = v46;
  *((_QWORD *)a2 + 13) = v45;
  v15[12] = v70;
  v15[13] = *(_OWORD *)v71;
  *(_OWORD *)((char *)v15 + 220) = *(_OWORD *)&v71[12];
  v15[8] = v66;
  v15[9] = v67;
  v15[10] = v68;
  v15[11] = v69;
  v15[4] = v62;
  v15[5] = v63;
  v15[6] = v64;
  v15[7] = v65;
  v15[2] = v60;
  v15[3] = v61;
  if (*((char *)a2 + 343) < 0)
    operator delete(*((void **)a2 + 40));
  *((_QWORD *)a2 + 40) = v47;
  *((_QWORD *)a2 + 41) = *(_QWORD *)v88;
  *(_QWORD *)((char *)a2 + 335) = *(_QWORD *)&v88[7];
  *((_BYTE *)a2 + 343) = v48;
  *(__int128 *)((char *)a2 + 472) = v57;
  *(__int128 *)((char *)a2 + 488) = v58;
  *((_DWORD *)a2 + 126) = v59;
  *(__int128 *)((char *)a2 + 408) = v53;
  *(__int128 *)((char *)a2 + 424) = v54;
  *(__int128 *)((char *)a2 + 440) = v55;
  *(__int128 *)((char *)a2 + 456) = v56;
  *(__int128 *)((char *)a2 + 344) = v49;
  *(__int128 *)((char *)a2 + 360) = v50;
  *(__int128 *)((char *)a2 + 376) = v51;
  *(__int128 *)((char *)a2 + 392) = v52;
  a2[40] = v84;
  a2[41] = v85;
  a2[42] = v86;
  *((_DWORD *)a2 + 172) = v87;
  a2[36] = v80;
  a2[37] = v81;
  a2[38] = v82;
  a2[39] = v83;
  a2[32] = v76;
  a2[33] = v77;
  result = v78;
  a2[34] = (__int128)v78;
  a2[35] = v79;
  return result;
}

double sub_1006B8B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[28];
  _BYTE v60[28];
  _BYTE v61[28];

  sub_1006B7ED4(a1, a2, a3);
  if (sub_1006B7280(a4, a3))
  {
    sub_1006B8744((__int128 *)a3, (__int128 *)a4);
    v9 = *(_DWORD *)(a3 + 696);
    *(_DWORD *)(a3 + 696) = *(_DWORD *)(a4 + 696);
    *(_DWORD *)(a4 + 696) = v9;
    v10 = (_OWORD *)(a3 + 700);
    v53 = *(_OWORD *)(a3 + 796);
    v56 = *(_OWORD *)(a3 + 812);
    *(_OWORD *)v59 = *(_OWORD *)(a3 + 828);
    *(_OWORD *)&v59[12] = *(_OWORD *)(a3 + 840);
    v41 = *(_OWORD *)(a3 + 732);
    v44 = *(_OWORD *)(a3 + 748);
    v47 = *(_OWORD *)(a3 + 764);
    v50 = *(_OWORD *)(a3 + 780);
    v35 = *(_OWORD *)(a3 + 700);
    v38 = *(_OWORD *)(a3 + 716);
    v11 = *(_OWORD *)(a4 + 716);
    *(_OWORD *)(a3 + 700) = *(_OWORD *)(a4 + 700);
    *(_OWORD *)(a3 + 716) = v11;
    v12 = *(_OWORD *)(a4 + 732);
    v13 = *(_OWORD *)(a4 + 748);
    v14 = *(_OWORD *)(a4 + 780);
    *(_OWORD *)(a3 + 764) = *(_OWORD *)(a4 + 764);
    *(_OWORD *)(a3 + 780) = v14;
    *(_OWORD *)(a3 + 732) = v12;
    *(_OWORD *)(a3 + 748) = v13;
    v15 = *(_OWORD *)(a4 + 796);
    v16 = *(_OWORD *)(a4 + 812);
    v17 = *(_OWORD *)(a4 + 828);
    *(_OWORD *)(a3 + 840) = *(_OWORD *)(a4 + 840);
    *(_OWORD *)(a3 + 812) = v16;
    *(_OWORD *)(a3 + 828) = v17;
    *(_OWORD *)(a3 + 796) = v15;
    *(_OWORD *)(a4 + 796) = v53;
    *(_OWORD *)(a4 + 812) = v56;
    *(_OWORD *)(a4 + 828) = *(_OWORD *)v59;
    *(_OWORD *)(a4 + 840) = *(_OWORD *)&v59[12];
    *(_OWORD *)(a4 + 732) = v41;
    *(_OWORD *)(a4 + 748) = v44;
    *(_OWORD *)(a4 + 764) = v47;
    *(_OWORD *)(a4 + 780) = v50;
    *(_OWORD *)(a4 + 700) = v35;
    *(_OWORD *)(a4 + 716) = v38;
    LOBYTE(v9) = *(_BYTE *)(a3 + 856);
    *(_BYTE *)(a3 + 856) = *(_BYTE *)(a4 + 856);
    *(_BYTE *)(a4 + 856) = v9;
    if (sub_1006B7280(a3, a2))
    {
      sub_1006B8744((__int128 *)a2, (__int128 *)a3);
      v18 = *(_DWORD *)(a2 + 696);
      *(_DWORD *)(a2 + 696) = *(_DWORD *)(a3 + 696);
      *(_DWORD *)(a3 + 696) = v18;
      v19 = (_OWORD *)(a2 + 700);
      v54 = *(_OWORD *)(a2 + 796);
      v57 = *(_OWORD *)(a2 + 812);
      *(_OWORD *)v60 = *(_OWORD *)(a2 + 828);
      *(_OWORD *)&v60[12] = *(_OWORD *)(a2 + 840);
      v42 = *(_OWORD *)(a2 + 732);
      v45 = *(_OWORD *)(a2 + 748);
      v48 = *(_OWORD *)(a2 + 764);
      v51 = *(_OWORD *)(a2 + 780);
      v36 = *(_OWORD *)(a2 + 700);
      v39 = *(_OWORD *)(a2 + 716);
      v20 = *(_OWORD *)(a3 + 716);
      *(_OWORD *)(a2 + 700) = *v10;
      *(_OWORD *)(a2 + 716) = v20;
      v21 = *(_OWORD *)(a3 + 732);
      v22 = *(_OWORD *)(a3 + 748);
      v23 = *(_OWORD *)(a3 + 780);
      *(_OWORD *)(a2 + 764) = *(_OWORD *)(a3 + 764);
      *(_OWORD *)(a2 + 780) = v23;
      *(_OWORD *)(a2 + 732) = v21;
      *(_OWORD *)(a2 + 748) = v22;
      v24 = *(_OWORD *)(a3 + 796);
      v25 = *(_OWORD *)(a3 + 812);
      v26 = *(_OWORD *)(a3 + 828);
      *(_OWORD *)(a2 + 840) = *(_OWORD *)(a3 + 840);
      *(_OWORD *)(a2 + 812) = v25;
      *(_OWORD *)(a2 + 828) = v26;
      *(_OWORD *)(a2 + 796) = v24;
      *(_OWORD *)(a3 + 796) = v54;
      *(_OWORD *)(a3 + 812) = v57;
      *(_OWORD *)(a3 + 828) = *(_OWORD *)v60;
      *(_OWORD *)(a3 + 840) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a3 + 732) = v42;
      *(_OWORD *)(a3 + 748) = v45;
      *(_OWORD *)(a3 + 764) = v48;
      *(_OWORD *)(a3 + 780) = v51;
      *v10 = v36;
      *(_OWORD *)(a3 + 716) = v39;
      LOBYTE(v18) = *(_BYTE *)(a2 + 856);
      *(_BYTE *)(a2 + 856) = *(_BYTE *)(a3 + 856);
      *(_BYTE *)(a3 + 856) = v18;
      if (sub_1006B7280(a2, a1))
      {
        sub_1006B8744((__int128 *)a1, (__int128 *)a2);
        v27 = *(_DWORD *)(a1 + 696);
        *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
        *(_DWORD *)(a2 + 696) = v27;
        v55 = *(_OWORD *)(a1 + 796);
        v58 = *(_OWORD *)(a1 + 812);
        *(_OWORD *)v61 = *(_OWORD *)(a1 + 828);
        *(_OWORD *)&v61[12] = *(_OWORD *)(a1 + 840);
        v43 = *(_OWORD *)(a1 + 732);
        v46 = *(_OWORD *)(a1 + 748);
        v49 = *(_OWORD *)(a1 + 764);
        v52 = *(_OWORD *)(a1 + 780);
        v37 = *(_OWORD *)(a1 + 700);
        v40 = *(_OWORD *)(a1 + 716);
        v28 = *(_OWORD *)(a2 + 716);
        *(_OWORD *)(a1 + 700) = *v19;
        *(_OWORD *)(a1 + 716) = v28;
        v29 = *(_OWORD *)(a2 + 732);
        v30 = *(_OWORD *)(a2 + 748);
        v31 = *(_OWORD *)(a2 + 780);
        *(_OWORD *)(a1 + 764) = *(_OWORD *)(a2 + 764);
        *(_OWORD *)(a1 + 780) = v31;
        *(_OWORD *)(a1 + 732) = v29;
        *(_OWORD *)(a1 + 748) = v30;
        v32 = *(_OWORD *)(a2 + 796);
        v33 = *(_OWORD *)(a2 + 812);
        v34 = *(_OWORD *)(a2 + 828);
        *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 812) = v33;
        *(_OWORD *)(a1 + 828) = v34;
        *(_OWORD *)(a1 + 796) = v32;
        *(_OWORD *)(a2 + 796) = v55;
        *(_OWORD *)(a2 + 812) = v58;
        *(_OWORD *)(a2 + 828) = *(_OWORD *)v61;
        *(_OWORD *)(a2 + 840) = *(_OWORD *)&v61[12];
        *(_OWORD *)(a2 + 732) = v43;
        *(_OWORD *)(a2 + 748) = v46;
        *(_OWORD *)(a2 + 764) = v49;
        *(_OWORD *)(a2 + 780) = v52;
        result = *(double *)&v37;
        *v19 = v37;
        *(_OWORD *)(a2 + 716) = v40;
        LOBYTE(v27) = *(_BYTE *)(a1 + 856);
        *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
        *(_BYTE *)(a2 + 856) = v27;
      }
    }
  }
  return result;
}

__n128 sub_1006B8DD8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 result;
  __int128 v42;
  __int128 v43;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = (_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v8 = a1 + 80;
  sub_100006898(a1 + 88, (__n128 *)(a2 + 88));
  *(_OWORD *)(v8 + 32) = v7[2];
  v9 = v7[3];
  v10 = v7[4];
  v11 = v7[6];
  *(_OWORD *)(v8 + 80) = v7[5];
  *(_OWORD *)(v8 + 96) = v11;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 64) = v10;
  v12 = v7[7];
  v13 = v7[8];
  v14 = v7[10];
  *(_OWORD *)(v8 + 144) = v7[9];
  *(_OWORD *)(v8 + 160) = v14;
  *(_OWORD *)(v8 + 112) = v12;
  *(_OWORD *)(v8 + 128) = v13;
  v15 = v7[11];
  v16 = v7[12];
  v17 = v7[13];
  *(_OWORD *)(v8 + 220) = *(_OWORD *)((char *)v7 + 220);
  *(_OWORD *)(v8 + 192) = v16;
  *(_OWORD *)(v8 + 208) = v17;
  *(_OWORD *)(v8 + 176) = v15;
  v18 = (void **)(v8 + 240);
  if (*(char *)(v8 + 263) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)v18 = v19;
  *(_BYTE *)(a2 + 343) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  v21 = *(_OWORD *)(a2 + 424);
  v20 = *(_OWORD *)(a2 + 440);
  v22 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 424) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  v24 = *(_OWORD *)(a2 + 360);
  v23 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v24;
  *(_OWORD *)(a1 + 376) = v23;
  v25 = *(_OWORD *)(a2 + 456);
  v26 = *(_OWORD *)(a2 + 472);
  v27 = *(_OWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 456) = v25;
  v28 = *(_OWORD *)(a2 + 512);
  v29 = *(_OWORD *)(a2 + 528);
  v30 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v30;
  *(_OWORD *)(a1 + 512) = v28;
  *(_OWORD *)(a1 + 528) = v29;
  v31 = *(_OWORD *)(a2 + 576);
  v32 = *(_OWORD *)(a2 + 592);
  v33 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v33;
  *(_OWORD *)(a1 + 576) = v31;
  *(_OWORD *)(a1 + 592) = v32;
  v34 = *(_OWORD *)(a2 + 640);
  v35 = *(_OWORD *)(a2 + 656);
  v36 = *(_OWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 656) = v35;
  *(_OWORD *)(a1 + 672) = v36;
  *(_OWORD *)(a1 + 640) = v34;
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  v37 = *(_OWORD *)(a2 + 716);
  *(_OWORD *)(a1 + 700) = *(_OWORD *)(a2 + 700);
  *(_OWORD *)(a1 + 716) = v37;
  v38 = *(_OWORD *)(a2 + 732);
  v39 = *(_OWORD *)(a2 + 748);
  v40 = *(_OWORD *)(a2 + 780);
  *(_OWORD *)(a1 + 764) = *(_OWORD *)(a2 + 764);
  *(_OWORD *)(a1 + 780) = v40;
  *(_OWORD *)(a1 + 732) = v38;
  *(_OWORD *)(a1 + 748) = v39;
  result = *(__n128 *)(a2 + 796);
  v42 = *(_OWORD *)(a2 + 812);
  v43 = *(_OWORD *)(a2 + 828);
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 812) = v42;
  *(_OWORD *)(a1 + 828) = v43;
  *(__n128 *)(a1 + 796) = result;
  *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  return result;
}

void sub_1006B8F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  _OWORD v36[2];
  int v37;
  void *v38[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  void *__p[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  int v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[28];
  char v87;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0x84BDA12F684BDA13 * ((a3 - a1) >> 5)))
    {
      v8 = (0x97B425ED097B426 * ((a3 - a1) >> 5)) | 1;
      v9 = a1 + 864 * v8;
      v10 = 0x97B425ED097B426 * ((a3 - a1) >> 5) + 2;
      if (v10 < a2 && sub_1006B7280(a1 + 864 * v8, v9 + 864))
      {
        v9 += 864;
        v8 = v10;
      }
      if ((sub_1006B7280(v9, v4) & 1) == 0)
      {
        v11 = *(_OWORD *)(v4 + 48);
        v35[2] = *(_OWORD *)(v4 + 32);
        v36[0] = v11;
        *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)(v4 + 60);
        v12 = *(_OWORD *)(v4 + 16);
        v35[0] = *(_OWORD *)v4;
        v35[1] = v12;
        v37 = *(_DWORD *)(v4 + 80);
        *(_OWORD *)v38 = *(_OWORD *)(v4 + 88);
        v39 = *(_QWORD *)(v4 + 104);
        *(_QWORD *)(v4 + 88) = 0;
        *(_QWORD *)(v4 + 96) = 0;
        *(_QWORD *)(v4 + 104) = 0;
        *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)(v4 + 300);
        v13 = *(_OWORD *)(v4 + 288);
        v50 = *(_OWORD *)(v4 + 272);
        v51[0] = v13;
        v14 = *(_OWORD *)(v4 + 224);
        v46 = *(_OWORD *)(v4 + 208);
        v47 = v14;
        v15 = *(_OWORD *)(v4 + 256);
        v48 = *(_OWORD *)(v4 + 240);
        v49 = v15;
        v16 = *(_OWORD *)(v4 + 160);
        v42 = *(_OWORD *)(v4 + 144);
        v43 = v16;
        v17 = *(_OWORD *)(v4 + 192);
        v44 = *(_OWORD *)(v4 + 176);
        v45 = v17;
        v18 = *(_OWORD *)(v4 + 128);
        v40 = *(_OWORD *)(v4 + 112);
        v41 = v18;
        *(_OWORD *)__p = *(_OWORD *)(v4 + 320);
        v53 = *(_QWORD *)(v4 + 336);
        *(_QWORD *)(v4 + 328) = 0;
        *(_QWORD *)(v4 + 336) = 0;
        *(_QWORD *)(v4 + 320) = 0;
        v19 = *(_OWORD *)(v4 + 488);
        v62 = *(_OWORD *)(v4 + 472);
        v63 = v19;
        v20 = *(_OWORD *)(v4 + 424);
        v58 = *(_OWORD *)(v4 + 408);
        v59 = v20;
        v21 = *(_OWORD *)(v4 + 456);
        v60 = *(_OWORD *)(v4 + 440);
        v61 = v21;
        v22 = *(_OWORD *)(v4 + 360);
        v54 = *(_OWORD *)(v4 + 344);
        v55 = v22;
        v23 = *(_OWORD *)(v4 + 392);
        v56 = *(_OWORD *)(v4 + 376);
        v57 = v23;
        v64 = *(_DWORD *)(v4 + 504);
        v24 = *(_OWORD *)(v4 + 656);
        v73 = *(_OWORD *)(v4 + 640);
        v74 = v24;
        v75 = *(_OWORD *)(v4 + 672);
        v76 = *(_DWORD *)(v4 + 688);
        v25 = *(_OWORD *)(v4 + 592);
        v69 = *(_OWORD *)(v4 + 576);
        v70 = v25;
        v26 = *(_OWORD *)(v4 + 624);
        v71 = *(_OWORD *)(v4 + 608);
        v72 = v26;
        v27 = *(_OWORD *)(v4 + 528);
        v65 = *(_OWORD *)(v4 + 512);
        v66 = v27;
        v28 = *(_OWORD *)(v4 + 560);
        v67 = *(_OWORD *)(v4 + 544);
        v68 = v28;
        v77 = *(_DWORD *)(v4 + 696);
        v29 = *(_OWORD *)(v4 + 812);
        v84 = *(_OWORD *)(v4 + 796);
        v85 = v29;
        *(_OWORD *)v86 = *(_OWORD *)(v4 + 828);
        *(_OWORD *)&v86[12] = *(_OWORD *)(v4 + 840);
        v30 = *(_OWORD *)(v4 + 748);
        v80 = *(_OWORD *)(v4 + 732);
        v81 = v30;
        v31 = *(_OWORD *)(v4 + 780);
        v82 = *(_OWORD *)(v4 + 764);
        v83 = v31;
        v32 = *(_OWORD *)(v4 + 716);
        v78 = *(_OWORD *)(v4 + 700);
        v79 = v32;
        v87 = *(_BYTE *)(v4 + 856);
        do
        {
          v33 = v9;
          sub_1006B8DD8(v4, v9);
          if (v6 < v8)
            break;
          v34 = (2 * v8) | 1;
          v9 = a1 + 864 * v34;
          v8 = 2 * v8 + 2;
          if (v8 >= a2)
          {
            v8 = v34;
          }
          else if (sub_1006B7280(a1 + 864 * v34, v9 + 864))
          {
            v9 += 864;
          }
          else
          {
            v8 = v34;
          }
          v4 = v33;
        }
        while (!sub_1006B7280(v9, (uint64_t)v35));
        sub_1006B8DD8(v33, (uint64_t)v35);
        if (SHIBYTE(v53) < 0)
          operator delete(__p[0]);
        if (v38[0])
        {
          v38[1] = v38[0];
          operator delete(v38[0]);
        }
      }
    }
  }
}

void sub_1006B9218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1005A1100((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1006B922C()
{
  return os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT);
}

BOOL sub_1006B9240()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 40), OS_LOG_TYPE_INFO);
}

BOOL sub_1006B9250()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 40));
}

uint64_t sub_1006B925C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = a2;
  sub_10023CFD8(a1 + 8, (uint64_t)"CLMotionStateOverride", a1, 0.0);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 72) = 23;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Workout, Taking power assertion due to session start.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Workout, Taking power assertion due to session start.", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLMotionStateOverride::CLMotionStateOverride(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return a1;
}

void sub_1006B9444(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100E3E6C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B945C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1632];
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = *(_OWORD *)(a1 + 232);
  v3 = *(_OWORD *)(a1 + 264);
  v22 = *(_OWORD *)(a1 + 248);
  v23 = v3;
  v24 = *(_QWORD *)(a1 + 280);
  v4 = *(_OWORD *)(a1 + 168);
  v5 = *(_OWORD *)(a1 + 200);
  v18 = *(_OWORD *)(a1 + 184);
  v19 = v5;
  v20 = *(_OWORD *)(a1 + 216);
  v21 = v2;
  v6 = *(_OWORD *)(a1 + 136);
  v14 = *(_OWORD *)(a1 + 120);
  v15 = v6;
  v16 = *(_OWORD *)(a1 + 152);
  v17 = v4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1006B96A4;
  v13[3] = &unk_10214D0A0;
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLMotionStateMediator")), "syncgetDoSync:", v13);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v7 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Workout, Releasing power assertion due to session end.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Workout, Releasing power assertion due to session end.", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLMotionStateOverride::~CLMotionStateOverride()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  sub_100E3E6F0(a1 + 8);
  sub_100E3E6C8(a1 + 8);
  return a1;
}

void sub_1006B9698(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1006B96A4(uint64_t a1, uint64_t a2)
{
  sub_1006B96B4(a2, (unsigned __int8 *)(a1 + 32));
}

void sub_1006B96B4(uint64_t a1, unsigned __int8 *uu)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void **v6;
  void **v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  char *v13;
  char out[48];
  uint8_t buf[16];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 461))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring endWorkoutSession because fTriggerIndoorOutdoorOnObservedPedWorkouts is true", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      *(_WORD *)out = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Ignoring endWorkoutSession because fTriggerIndoorOutdoorOnObservedPedWorkouts is true", out, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::endWorkoutSession(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)(a1 + 8720) = 0u;
    v6 = (void **)(a1 + 8736);
    if (*(char *)(a1 + 8759) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 8752) = v17;
    BYTE7(v17) = 0;
    LOBYTE(__p[0]) = 0;
    sub_1006D24A8((_QWORD *)(a1 + 8760), (uint64_t)&v17 + 8);
    sub_100544F70((_QWORD *)&v17 + 1);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)(a1 + 8808) = 0u;
    v7 = (void **)(a1 + 8824);
    if (*(char *)(a1 + 8847) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 8840) = v17;
    BYTE7(v17) = 0;
    LOBYTE(__p[0]) = 0;
    sub_1006D1CA8((_QWORD *)(a1 + 8848), (uint64_t)&v17 + 8);
    sub_100691160((_QWORD *)&v17 + 1);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 8896) = 0;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = out;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WorkoutSession, end workout session, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v12 = 136315138;
      v13 = out;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, end workout session, %s", (const char *)&v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::endWorkoutSession(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v9 = *(_QWORD *)(a1 + 8712);
    if (v9)
    {
      sub_100764C68(v9);
      sub_1006C7878((uint64_t *)(a1 + 8712), 0);
    }
    sub_1006C0590(a1, (uint64_t *)(a1 + 464), 0);
    sub_1006C0590(a1, (uint64_t *)(a1 + 528), 0);
    sub_1006C0590(a1, (uint64_t *)(a1 + 560), 0);
    *(_BYTE *)(a1 + 128) = 0;
  }
}

void sub_1006B9B14(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  v2 = a1 + 8;
  if (a2)
  {
    sub_1015A2E04(v4, "StartOrResumeWorkout");
    if (*(int *)(a1 + 16) <= 0)
    {
      if (SHIBYTE(v5) < 0)
      {
        sub_100115CE4(__p, v4[0], (unint64_t)v4[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v4;
        v7 = v5;
      }
      sub_10002B684(v2, (uint64_t *)__p);
      if (SHIBYTE(v7) < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0)
      operator delete(v4[0]);
  }
  else
  {
    sub_100E3E6F0(a1 + 8);
  }
}

void sub_1006B9BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1006B9C64(uint64_t a1, void *a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  unsigned int v13;
  __int16 v14;
  int v15;

  v4 = (uint64_t)objc_msgSend(a2, "state") > 299;
  if (*(unsigned __int8 *)(a1 + 592) != v4)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v13 = objc_msgSend(a2, "state");
      v14 = 1024;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scuba diving state changed, submersionState, %d, isScubaDiving, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v6 = qword_10229FC78;
      v9[0] = 67109376;
      v9[1] = objc_msgSend(a2, "state");
      v10 = 1024;
      v11 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "Scuba diving state changed, submersionState, %d, isScubaDiving, %d", v9, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onSubmersionMeasurementUpdate(CLWaterSubmersionMeasurement *)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_BYTE *)(a1 + 592) = v4;
  }
}

void sub_1006B9F18(id a1)
{
  qword_102303320 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionStateMediatorSilo"));
}

uint64_t sub_1006B9FCC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006BCD9C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303340 != -1)
    dispatch_once(&qword_102303340, block);
  return qword_102310B70;
}

void sub_1006BA194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v3 = *(void **)(a1 + 664);
  if (v3)
  {
    if (!objc_msgSend(v3, "objectForKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:")))
    {
      v7 = objc_alloc_init((Class)NSMutableSet);
      objc_msgSend(*(id *)(a1 + 664), "setObject:forKeyedSubscript:", v7, +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3));

    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 664), "objectForKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3)), "addObject:", a2);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "PrepareSessionEnd, receiving addClientForPrepareSessionEnd after client list has been deleted!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "PrepareSessionEnd, receiving addClientForPrepareSessionEnd after client list has been deleted!", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::addClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_1006BA40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  int v11;
  uint8_t buf[4];
  int v13;

  v3 = *(void **)(a1 + 664);
  if (!v3)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "PrepareSessionEnd, Receiving removeClientForPrepareSessionEnd after client list has been deleted!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "PrepareSessionEnd, Receiving removeClientForPrepareSessionEnd after client list has been deleted!");
LABEL_21:
    v10 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::removeClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)", "%s\n", v8);
    if (v10 != buf)
      free(v10);
    return;
  }
  if (objc_msgSend(v3, "objectForKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:")))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 664), "objectForKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3)), "removeObject:", a2);
    return;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v9 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "PrepareSessionEnd, Client for PrepareSessionEnd of session type %d does not exist!", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "PrepareSessionEnd, Client for PrepareSessionEnd of session type %d does not exist!", &v11);
    goto LABEL_21;
  }
}

id sub_1006BA728(uint64_t a1, double a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Workout,Setting suggested stop timeout for workout,%f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8 = 134217984;
    v9 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Workout,Setting suggested stop timeout for workout,%f", COERCE_DOUBLE(&v8));
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::setWorkoutSuggestedStopTimeout(CFTimeInterval)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 320), "setNextFireDelay:", a2);
}

void sub_1006BA8FC(uint64_t a1)
{
  NSObject *v2;
  double Current;
  uint64_t v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User dismissed current workout alert.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "User dismissed current workout alert.", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::userDismissedWorkoutAlert()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD3018((_QWORD *)(a1 + 6624), Current, *(float *)(a1 + 452));
  sub_1006C4314(a1);
  v4 = *(_QWORD *)(a1 + 10208);
  if (v4)
  {
    v5 = CFAbsoluteTimeGetCurrent();
    sub_1010A8D0C(v4, v5);
  }
  sub_1006C2C28(a1);
}

id sub_1006BACFC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gfc didExit recieved in msm, stopping, current workout in session %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v5 = *(unsigned __int8 *)(a1 + 128);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "#gfc didExit recieved in msm, stopping, current workout in session %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::didExitGeoFence()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (sub_10135DC00(*(_QWORD *)(a1 + 9592), *(_QWORD *)(a1 + 9608)) != -1.0)
    sub_100DD30D4(a1 + 6624);
  return objc_msgSend(*(id *)(a1 + 10152), "stopGeoFence");
}

id sub_1006BB074(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gfc didTimeout recieved in msm, stopping, current workout in session %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v5 = *(unsigned __int8 *)(a1 + 128);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "#gfc didTimeout recieved in msm, stopping, current workout in session %{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::didTimeoutGeoFence()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 10152), "stopGeoFence");
}

void sub_1006BB2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1006BB314@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (!*(_BYTE *)(result + 128))
  {
    *(_BYTE *)(result + 128) = 1;
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_1006BB38C()
{
  operator delete();
}

id sub_1006BB3B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  id v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[5];
  std::__shared_weak_count *v10;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_1006D2978;
  v9[3] = &unk_10214DE20;
  v1 = (std::__shared_weak_count *)a1[1];
  v9[4] = *a1;
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = objc_msgSend(v9, "copy");
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1006BB470(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

id sub_1006BB4A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Added client for workout session updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Added client for workout session updates", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::registerForWorkoutSessionUpdates(id<CLMotionStateMediatorClientProtocol>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 680), "addObject:", a2);
}

id sub_1006BB66C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed client from workout session updates", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Removed client from workout session updates", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::unregisterForWorkoutSessionUpdates(id<CLMotionStateMediatorClientProtocol>)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 680), "removeObject:", a2);
}

void sub_1006BB8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1018C6C8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006BB8D0(uint64_t a1, unsigned __int8 *uu, uint64_t a3, int a4)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  NSObject *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;
  int v25;
  int v26;
  char *v27;
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char out[48];
  char v39[48];
  _BYTE buf[22];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;

  if (*(_BYTE *)(a1 + 461))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ignoring beginWorkoutSession because fTriggerIndoorOutdoorOnObservedPedWorkouts is true", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      *(_WORD *)v28 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Ignoring beginWorkoutSession because fTriggerIndoorOutdoorOnObservedPedWorkouts is true", v28, 2);
      v6 = (char *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::beginWorkoutSession(const CLMotionStateMediator_Type::WorkoutSettings &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    memset(v39, 0, 37);
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    uuid_unparse((const unsigned __int8 *)a3, v39);
    *(_OWORD *)(a1 + 8720) = *(_OWORD *)a3;
    std::string::operator=((std::string *)(a1 + 8736), (const std::string *)(a3 + 16));
    sub_1006D1EE4((_QWORD *)(a1 + 8760), (_QWORD *)(a3 + 40));
    *(_BYTE *)(a1 + 8896) = a4;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 39) >= 0)
        v12 = a3 + 16;
      else
        v12 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = out;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v39;
      v41 = 2080;
      v42 = v12;
      v43 = 1024;
      v44 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutSession, begin workout session with workoutId, %s, overallId, %s, appId, %s, allow detection, %d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      if (*(char *)(a3 + 39) >= 0)
        v19 = a3 + 16;
      else
        v19 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)v28 = 136315906;
      *(_QWORD *)&v28[4] = out;
      *(_WORD *)&v28[12] = 2080;
      *(_QWORD *)&v28[14] = v39;
      *(_WORD *)&v28[22] = 2080;
      *(_QWORD *)&v28[24] = v19;
      LOWORD(v29) = 1024;
      *(_DWORD *)((char *)&v29 + 2) = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, begin workout session with workoutId, %s, overallId, %s, appId, %s, allow detection, %d", v28, 38, v24, v25);
      v21 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::beginWorkoutSession(const CLMotionStateMediator_Type::WorkoutSettings &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v13 = *((_OWORD *)uu + 9);
    v35 = *((_OWORD *)uu + 8);
    v36 = v13;
    v37 = *((_QWORD *)uu + 20);
    v14 = *((_OWORD *)uu + 5);
    v31 = *((_OWORD *)uu + 4);
    v32 = v14;
    v15 = *((_OWORD *)uu + 7);
    v33 = *((_OWORD *)uu + 6);
    v34 = v15;
    v16 = *((_OWORD *)uu + 1);
    *(_OWORD *)v28 = *(_OWORD *)uu;
    *(_OWORD *)&v28[16] = v16;
    v17 = *((_OWORD *)uu + 3);
    v29 = *((_OWORD *)uu + 2);
    v30 = v17;
    if (*(_BYTE *)(a1 + 396) && (_QWORD)v30 == 14)
      *(_QWORD *)&v30 = *(int *)(a1 + 400);
    if (!a4)
    {
      sub_100543058((uint64_t)&v24);
      operator new();
    }
    sub_100543058((uint64_t)&v24);
    if (*(_QWORD *)(a3 + 80) >= 2uLL)
      operator new();
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v18 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "WorkoutSession, no priors but requesting detection, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v26 = 136315138;
      v27 = v39;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "WorkoutSession, no priors but requesting detection, %s", (const char *)&v26);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::beginWorkoutSession(const CLMotionStateMediator_Type::WorkoutSettings &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    sub_1006C0590(a1, (uint64_t *)(a1 + 464), 256);
  }
}

void sub_1006BBF80()
{
  operator delete();
}

uint64_t sub_1006BBFDC(uint64_t a1, unsigned __int8 *uu, int a3)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const char *v13;
  char *v14;
  int v15;
  char *v16;
  __int16 v17;
  int v18;
  _BYTE buf[32];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = out;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WorkoutSession, set current workout type in session, %s, isManualTransition, %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v15 = 136315394;
    v16 = out;
    v17 = 1024;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, set current workout type in session, %s, isManualTransition, %d", (const char *)&v15, 18);
    v14 = (char *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::setCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutSettings &, BOOL)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v7 = *((_OWORD *)uu + 9);
  v26 = *((_OWORD *)uu + 8);
  v27 = v7;
  v28 = *((_QWORD *)uu + 20);
  v8 = *((_OWORD *)uu + 5);
  v22 = *((_OWORD *)uu + 4);
  v23 = v8;
  v9 = *((_OWORD *)uu + 7);
  v24 = *((_OWORD *)uu + 6);
  v25 = v9;
  v10 = *((_OWORD *)uu + 1);
  *(_OWORD *)buf = *(_OWORD *)uu;
  *(_OWORD *)&buf[16] = v10;
  v11 = *((_OWORD *)uu + 3);
  v20 = *((_OWORD *)uu + 2);
  v21 = v11;
  if (*(_BYTE *)(a1 + 396) && (_QWORD)v21 == 14)
    *(_QWORD *)&v21 = *(int *)(a1 + 400);
  return sub_1007641E4(*(_QWORD *)(a1 + 8712), (uint64_t)buf, a3);
}

uint64_t sub_1006BC270(uint64_t a1, unsigned __int8 *uu)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  int v7;
  char *v8;
  uint8_t buf[4];
  char *v10;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v10 = out;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WorkoutSession, pause workout, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = 136315138;
    v8 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, pause workout, %s", (const char *)&v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::pauseWorkout(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  return sub_100764A9C(*(_QWORD *)(a1 + 8712));
}

uint64_t sub_1006BC46C(uint64_t a1, unsigned __int8 *uu)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const char *v11;
  uint8_t *v12;
  int v13;
  char *v14;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char out[40];

  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = out;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutSession, resume workout, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v13 = 136315138;
    v14 = out;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "WorkoutSession, resume workout, %s", (const char *)&v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::resumeWorkout(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v5 = *((_OWORD *)uu + 9);
  v23 = *((_OWORD *)uu + 8);
  v24 = v5;
  v25 = *((_QWORD *)uu + 20);
  v6 = *((_OWORD *)uu + 5);
  v19 = *((_OWORD *)uu + 4);
  v20 = v6;
  v7 = *((_OWORD *)uu + 7);
  v21 = *((_OWORD *)uu + 6);
  v22 = v7;
  v8 = *((_OWORD *)uu + 1);
  *(_OWORD *)buf = *(_OWORD *)uu;
  v16 = v8;
  v9 = *((_OWORD *)uu + 3);
  v17 = *((_OWORD *)uu + 2);
  v18 = v9;
  if (*(_BYTE *)(a1 + 396) && (_QWORD)v18 == 14)
    *(_QWORD *)&v18 = *(int *)(a1 + 400);
  return sub_1007641E4(*(_QWORD *)(a1 + 8712), (uint64_t)buf, 1);
}

void sub_1006BC890(_Unwind_Exception *a1)
{
  sub_1006BCA04((uint64_t)&STACK[0x238]);
  _Unwind_Resume(a1);
}

id sub_1006BC8D0(__int128 *a1)
{
  id v2;
  _QWORD v4[4];
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  _QWORD v8[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1006D2A80;
  v4[3] = &unk_10214DE50;
  v5 = *a1;
  if (*((char *)a1 + 39) < 0)
  {
    sub_100115CE4(&__p, *((void **)a1 + 2), *((_QWORD *)a1 + 3));
  }
  else
  {
    __p = a1[1];
    v7 = *((_QWORD *)a1 + 4);
  }
  sub_1006CCC70((uint64_t)v8, (_QWORD *)a1 + 5);
  v2 = objc_msgSend(v4, "copy");
  sub_100691160(v8);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)__p);
  return v2;
}

void sub_1006BC9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006BCA04(uint64_t a1)
{
  sub_100691160((_QWORD *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1006BCB14(unsigned __int8 *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    v15 = a2;
    v16 = 1026;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Workout, reminder mute settings, updating %{public}ld to %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v10 = 134349312;
    v11 = a2;
    v12 = 1026;
    v13 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout, reminder mute settings, updating %{public}ld to %{public}d", &v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::updateWorkoutReminderMuteSetting(CMWorkoutReminderType, BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      a1[553] = 0;
      return;
    }
    if (a2 != 1)
      return;
    v7 = a1[521];
    a1[521] = a3;
  }
  else
  {
    v7 = a1[489];
    a1[489] = a3;
  }
  if (v7 != a3)
    sub_1006C3954((uint64_t)a1);
}

void sub_1006BCD6C(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
  {
    if (sub_100C1DCF8())
      byte_102303330 = 1;
  }
}

void sub_1006BCD9C()
{
  operator new();
}

void sub_1006BCDE4()
{
  operator delete();
}

uint64_t sub_1006BCE08(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006BCE7C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303350 != -1)
    dispatch_once(&qword_102303350, block);
  return byte_102303348;
}

id sub_1006BCE7C(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLMotionStateMediator"));
  byte_102303348 = (char)result;
  return result;
}

void sub_1006BCEA8(uint64_t a1, void *a2)
{
  uint64_t v3;
  char v4;
  std::string v5;
  uint64_t v6;

  v3 = sub_1006BEFC4(a1, "CLMotionStateMediator", a2);
  *(_QWORD *)(v3 + 112) = off_10214D250;
  *(_QWORD *)v3 = off_10214D110;
  *(_QWORD *)(v3 + 120) = &off_10214D290;
  *(_BYTE *)(v3 + 128) = 0;
  sub_100B26CB0(v3 + 136);
  *(_QWORD *)(a1 + 320) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_101BBBF28;
  *(_OWORD *)(a1 + 352) = unk_101BBBF38;
  *(_OWORD *)(a1 + 368) = xmmword_101BBBF48;
  *(_OWORD *)(a1 + 380) = *(__int128 *)((char *)&xmmword_101BBBF48 + 12);
  LODWORD(v6) = 0;
  sub_1004AD1D8((unsigned __int8 *)(a1 + 396), "ForceOtherWorkoutOverride", &v6, 0);
  LODWORD(v6) = 0;
  sub_1004AD1D8((unsigned __int8 *)(a1 + 408), "ForceWorkoutLocationType", &v6, 0);
  LODWORD(v6) = 150;
  sub_1004AD1D8((unsigned __int8 *)(a1 + 420), "ForceMaxSecondsForWorkoutLocationTypeDisambiguation", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 432), "EnableForcedWorkoutLocationUpdatesFromSPI", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 0;
  sub_1004AD1D8((unsigned __int8 *)(a1 + 436), "NumAllowedIndoorOutdoorNotificationsPerHour", &v6, 0);
  LODWORD(v6) = 1155596288;
  sub_1018C2254((unsigned __int8 *)(a1 + 448), "MuteWorkoutAlertsForSecondsAfterUserDismissal", &v6, 0);
  v5.__r_.__value_.__s.__data_[0] = 0;
  sub_1018BF25C((unsigned __int8 *)&v6, "EnableALSActiveScansAOP", (unsigned __int8 *)&v5, 0);
  if (BYTE1(v6))
  {
    sub_100197040();
    v4 = sub_100761B14();
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(a1 + 460) = v4;
  v5.__r_.__value_.__s.__data_[0] = 0;
  sub_1018BF25C((unsigned __int8 *)&v6, "TriggerPhoneIndoorOutdoorOnWatchPedWorkouts", (unsigned __int8 *)&v5, 0);
  *(_WORD *)(a1 + 461) = BYTE1(v6);
  sub_1015A2E04((_QWORD *)(a1 + 464), "start");
  *(_DWORD *)(a1 + 488) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 496), "resume");
  *(_DWORD *)(a1 + 520) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 528), "end");
  *(_DWORD *)(a1 + 552) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 560), "autoPause");
  *(_BYTE *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = objc_alloc_init((Class)NSMutableDictionary);
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_WORD *)(a1 + 696) = 0;
  sub_1006D2BCC((_QWORD *)(a1 + 704), *(void **)(a1 + 32));
}

void sub_1006BE7E4()
{
  operator delete();
}

uint64_t sub_1006BEFC4(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10214DE90;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1006BF044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1006BF060(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionStateMediator::onOldMotionCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onOldMotionCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onOldMotionCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1000CE888(a2, a1, 1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006BF214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BF234(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionStateMediator::onActivePedStateCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onActivePedStateCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onActivePedStateCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100DDC168(a2 + 6624, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006BF3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BF408(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[8];
  _BYTE v9[10];
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  CLProfilingIdentify("CLMotionStateMediator::onWatchElevationCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onWatchElevationCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v9 = 2082;
      *(_QWORD *)&v9[2] = "";
      v10 = 2082;
      v11 = "activity";
      v12 = 2050;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onWatchElevationCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)buf = *(_QWORD *)(a1 + 8);
  *(_WORD *)v9 = *(_WORD *)(a1 + 54);
  *(_DWORD *)&v9[4] = *(_DWORD *)(a1 + 56);
  sub_1006C8BFC((__n128 *)(a2 + 3448), (__n128 *)buf);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006BF5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BF5F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  os_activity_scope_state_s state;
  char v8;
  _BYTE buf[40];

  CLProfilingIdentify("CLMotionStateMediator::onTier1CyclingFeaturesData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onTier1CyclingFeaturesData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "activity";
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onTier1CyclingFeaturesData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)buf = *(_OWORD *)a1;
  *(_OWORD *)&buf[16] = v6;
  *(_QWORD *)&buf[32] = *(_QWORD *)(a1 + 32);
  sub_1006C8E98(a2 + 3920, (__int128 *)buf);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_1006BF7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BF7D4(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onCalorimetryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onCalorimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onCalorimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006C98B0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006BF98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BF9AC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_OWORD *)(v1 + 7648);
  v3 = *(_OWORD *)(v1 + 7680);
  v21 = *(_OWORD *)(v1 + 7664);
  v22 = v3;
  v23 = *(_QWORD *)(v1 + 7696);
  v4 = *(_OWORD *)(v1 + 7584);
  v5 = *(_OWORD *)(v1 + 7616);
  v17 = *(_OWORD *)(v1 + 7600);
  v18 = v5;
  v19 = *(_OWORD *)(v1 + 7632);
  v20 = v2;
  v6 = *(_OWORD *)(v1 + 7520);
  v7 = *(_OWORD *)(v1 + 7552);
  v13 = *(_OWORD *)(v1 + 7536);
  v14 = v7;
  v15 = *(_OWORD *)(v1 + 7568);
  v16 = v4;
  v8 = *(_OWORD *)(v1 + 7488);
  v9 = *(_OWORD *)(v1 + 7472);
  v10 = v8;
  v11 = *(_OWORD *)(v1 + 7504);
  v12 = v6;
  *((_QWORD *)&v10 + 1) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)&v10 = 4;
  sub_1006C197C(v1, (uint64_t)&v9);
}

void sub_1006BFA74(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionStateMediator::onSkiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onSkiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onSkiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 1)
    sub_100DDC340(a4 + 6624, *a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1006BFC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BFC58(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006C9E68(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006BFE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006BFE30(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onDaemonStatus");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006CA1B8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006BFFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0008(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onCatherineNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onCatherineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onCatherineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006CA5B0((uint64_t *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006C01C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C01E0(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006CA7CC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006C0398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C03B8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006CAD14((_BYTE *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006C0570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0590(uint64_t a1, uint64_t *a2, __int16 a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t *v8;
  const char *v9;
  uint64_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t *v20;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "overriding";
    if (!HIBYTE(a3))
      v7 = "clearing override";
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315394;
    v18 = v7;
    v19 = 2080;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Workout setting, %s for %s setting", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v9 = "overriding";
    if (!HIBYTE(a3))
      v9 = "clearing override";
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = (uint64_t *)*a2;
    v13 = 136315394;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout setting, %s for %s setting", (const char *)&v13, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::overrideWorkoutReminderSetting(WorkoutReminderSetting &, std::optional<BOOL>)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (HIBYTE(a3) && *((_BYTE *)a2 + 27))
  {
    if (*((unsigned __int8 *)a2 + 26) == a3)
      return;
  }
  else if ((HIBYTE(a3) != 0) == (*((_BYTE *)a2 + 27) != 0))
  {
    return;
  }
  *((_WORD *)a2 + 13) = a3;
  sub_1006C3954(a1);
}

uint64_t sub_1006C07F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 936))(v2);
  v6 = 0;
  v3 = sub_1001FD94C();
  if (sub_1001E4B84(v3, "kMostRecentWorkoutEventWorkoutType", (_DWORD *)&v6 + 1))
    *(_QWORD *)(a1 + 9592) = SHIDWORD(v6);
  v4 = sub_1001FD94C();
  result = sub_1001E4B84(v4, "kMostRecentWorkoutEventLocationType", &v6);
  if ((_DWORD)result)
    *(_QWORD *)(a1 + 9600) = (int)v6;
  return result;
}

void sub_1006C0874(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionStateMediator::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (!*a2)
    sub_100E58DA8(a4 + 8376, *a3 == 1);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_1006C0A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0A5C(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionStateMediator::onDeviceMotionData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1006C78B4(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006C0C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0C2C(uint64_t a1, int *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006C938C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006C0DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0E04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onBacklightStateData");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onBacklightStateData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onBacklightStateData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 1)
  {
    v9 = *(_QWORD *)(a4 + 8368);
    if (v9)
      *(_BYTE *)(v9 + 216) = *(_BYTE *)(a3 + 56);
  }
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006C0FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006C0FE4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionStateMediator::onSPUStairsEscalationEvent");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onSPUStairsEscalationEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onSPUStairsEscalationEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1006C915C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006C1194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006C11BC(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1006C121C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214DE90;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1006C1290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v25;

  *(_QWORD *)a1 = off_10214D110;
  *(_QWORD *)(a1 + 112) = off_10214D250;
  *(_QWORD *)(a1 + 120) = &off_10214D290;
  objc_msgSend(*(id *)(a1 + 320), "invalidate");

  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  objc_msgSend(*(id *)(a1 + 10152), "stopGeoFence");

  *(_QWORD *)(a1 + 10152) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  objc_msgSend(*(id *)(a1 + 10528), "unregisterForWeatherUpdates:", *(_QWORD *)(a1 + 32));

  *(_QWORD *)(a1 + 10528) = 0;
  objc_msgSend(*(id *)(a1 + 10536), "unregisterForUpdates:", *(_QWORD *)(a1 + 32));

  *(_QWORD *)(a1 + 10536) = 0;
  if (sub_1000A42B0())
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10544) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10544) + 8), 1);
  objc_msgSend(*(id *)(a1 + 10552), "stopMonitoringVisitsForClient:", *(_QWORD *)(a1 + 32));

  *(_QWORD *)(a1 + 10552) = 0;
  v2 = sub_10022B068();
  sub_1015A2E04(__p, "CLMotionStateMediator");
  sub_10000782C(v2, (uint64_t *)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  v3 = *(_QWORD *)(a1 + 10248);
  if (v3)
  {
    *(_QWORD *)(a1 + 10248) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_1006C16B8(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = *(_QWORD *)(a1 + 10544);
  *(_QWORD *)(a1 + 10544) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 10520);
  *(_QWORD *)(a1 + 10520) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_100BCD638(a1 + 10328);
  v6 = *(_QWORD *)(a1 + 10312);
  *(_QWORD *)(a1 + 10312) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 10296);
  *(_QWORD *)(a1 + 10296) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 10288);
  *(_QWORD *)(a1 + 10288) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 10280);
  *(_QWORD *)(a1 + 10280) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 10272);
  *(_QWORD *)(a1 + 10272) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 10264);
  *(_QWORD *)(a1 + 10264) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 10256);
  *(_QWORD *)(a1 + 10256) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 10248);
  *(_QWORD *)(a1 + 10248) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 10240);
  *(_QWORD *)(a1 + 10240) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 10232);
  *(_QWORD *)(a1 + 10232) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 10224);
  *(_QWORD *)(a1 + 10224) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 10216);
  *(_QWORD *)(a1 + 10216) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1006C6B4C((uint64_t *)(a1 + 10208), 0);
  v18 = *(_QWORD *)(a1 + 10200);
  *(_QWORD *)(a1 + 10200) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_100691160((_QWORD *)(a1 + 8848));
  if (*(char *)(a1 + 8847) < 0)
    operator delete(*(void **)(a1 + 8824));
  sub_100544F70((_QWORD *)(a1 + 8760));
  if (*(char *)(a1 + 8759) < 0)
    operator delete(*(void **)(a1 + 8736));
  sub_1006C7878((uint64_t *)(a1 + 8712), 0);
  sub_100E586C4(a1 + 8376);
  v19 = *(_QWORD *)(a1 + 8368);
  *(_QWORD *)(a1 + 8368) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1006D558C((id **)(a1 + 8360), 0);
  sub_100E3E6C8(a1 + 8312);
  sub_100E3E6C8(a1 + 8264);
  v20 = *(_QWORD *)(a1 + 8256);
  *(_QWORD *)(a1 + 8256) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 8248);
  *(_QWORD *)(a1 + 8248) = 0;
  if (v21)
    sub_1006D8148(a1 + 8248, v21);
  sub_1006CD4F4((_QWORD *)(a1 + 6624));
  sub_100261F44(a1 + 6608);
  sub_1006D7440((_QWORD *)(a1 + 4120));
  sub_1006CD7F0((_QWORD *)(a1 + 704));
  v22 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  if (*(char *)(a1 + 551) < 0)
    operator delete(*(void **)(a1 + 528));
  if (*(char *)(a1 + 519) < 0)
    operator delete(*(void **)(a1 + 496));
  if (*(char *)(a1 + 487) < 0)
    operator delete(*(void **)(a1 + 464));
  sub_1000F34E0((_QWORD *)(a1 + 280));
  return sub_1006C121C(a1);
}

void sub_1006C16B8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8904);
  if (v2)
  {
    objc_msgSend(v2, "unregisterForData:", *(_QWORD *)(a1 + 32));

    *(_QWORD *)(a1 + 8904) = 0;
  }
  v3 = *(void **)(a1 + 8912);
  if (v3)
  {
    objc_msgSend(v3, "unregisterForData:", *(_QWORD *)(a1 + 32));

    *(_QWORD *)(a1 + 8912) = 0;
  }
}

uint64_t sub_1006C1710(uint64_t a1)
{
  return sub_1006C1290(a1 - 112);
}

uint64_t sub_1006C1718(uint64_t a1)
{
  return sub_1006C1290(a1 - 120);
}

void sub_1006C1720(uint64_t a1)
{
  sub_1006C1290(a1);
  operator delete();
}

void sub_1006C1744(uint64_t a1)
{
  sub_1006C1290(a1 - 112);
  operator delete();
}

void sub_1006C176C(uint64_t a1)
{
  sub_1006C1290(a1 - 120);
  operator delete();
}

void sub_1006C1794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  v2 = sub_1001FBB04(0);
  sub_1000A4A6C(v2, 0, *(_QWORD *)(a1 + 600));
  v3 = sub_1001FBB04(0);
  sub_1000A4A6C(v3, 9, *(_QWORD *)(a1 + 616));
  sub_100197040();
  if ((sub_1001B7910() & 0x1000000000) != 0)
  {
    v4 = sub_1001FBB04(0);
    sub_1000A4A6C(v4, 20, *(_QWORD *)(a1 + 624));
  }
  v5 = sub_1001FBB04(0);
  sub_1000A4A6C(v5, 33, *(_QWORD *)(a1 + 640));
  objc_msgSend(*(id *)(a1 + 648), "unregisterClient:forNotification:", *(_QWORD *)(a1 + 656), 3);

  objc_msgSend(*(id *)(a1 + 656), "setValid:", 0);
  if (sub_1001FBB04(0))
  {
    v6 = sub_1001FBB04(0);
    sub_1000A4A6C(v6, 47, *(_QWORD *)(a1 + 10200));
  }
  *(_BYTE *)(a1 + 108) = 1;
}

_QWORD *sub_1006C186C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1006C18E4(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  if (*a2 <= 5u)
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 6656) + 40))(*(_QWORD *)(a1 + 6656));
    sub_1000E4778(v2);
  }
  return 1;
}

uint64_t sub_1006C1918(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;

  if (*a2 == 2)
  {
    v5 = 2;
    if (!sub_1001B7864(a1, &v5, 1))
    {
      v4 = 2;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v4);
    }
  }
  return 1;
}

void sub_1006C197C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  ALActivityLog *v6;
  NSObject *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  dispatch_queue_t *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  Block_layout *v64;
  uint64_t v65;
  const char *v66;
  uint8_t *v67;
  __int128 v68[2];
  uint64_t v69;
  __int128 v70[14];
  uint64_t v71;
  _OWORD v72[14];
  uint64_t v73;
  __int128 v74[14];
  uint64_t v75;
  __int128 v76[14];
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint8_t buf[16];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[8];
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v4 = a1 + 8896;
  v5 = objc_autoreleasePoolPush();
  v6 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v6, "setTimestamp:", *(double *)(a2 + 24));
  -[ALActivityLog setWorkoutEvent:](v6, "setWorkoutEvent:", objc_alloc_init(ALCMWorkoutEvent));
  -[ALCMWorkoutEvent setWorkoutEvent:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setWorkoutEvent:", *(unsigned int *)(a2 + 16));
  -[ALCMWorkoutEvent setWorkoutType:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setWorkoutType:", +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *(_QWORD *)(a2 + 112)));
  -[ALCMWorkoutEvent setLocationType:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setLocationType:", *(unsigned int *)(a2 + 120));
  -[ALCMWorkoutEvent setStartTime:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setStartTime:", *(double *)a2);
  if (*(_QWORD *)(a2 + 16) == 1)
    -[ALCMWorkoutEvent setEndTime:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setEndTime:", *(double *)(a2 + 8));
  -[ALCMWorkoutEvent setSessionId:](-[ALActivityLog workoutEvent](v6, "workoutEvent"), "setSessionId:", objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a2 + 64, 16));
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v6);
  objc_autoreleasePoolPop(v5);
  if (*(_QWORD *)(a2 + 16) == 1)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Motion State Mediator is sending a stop event at %f", buf, 0xCu);
    }
    v9 = (double *)(a1 + 9732);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v65 = *(_QWORD *)(a2 + 8);
      v78 = 134217984;
      v79 = v65;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Motion State Mediator is sending a stop event at %f", COERCE_DOUBLE(&v78));
      v67 = (uint8_t *)v66;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::notifyWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(v4 + 25);
    *(_BYTE *)(v4 + 33) = *(_BYTE *)(v4 + 24);
    if (*(_DWORD *)(a1 + 8952))
      v10 = *(double *)(a2 + 24) - *(double *)(a1 + 9008);
    else
      v10 = 0.0;
    *(double *)(a1 + 8944) = v10;
    v11 = llround(*v9 * 10.0);
    v12 = llround(*(double *)(a1 + 9740) * 10.0);
    v13 = sub_10009ED0C();
    v14 = *(_OWORD *)(v4 + 48);
    v68[0] = *(_OWORD *)(v4 + 32);
    v68[1] = v14;
    v69 = *(_QWORD *)(v4 + 64);
    v15 = *(_OWORD *)(a1 + 9224);
    v76[12] = *(_OWORD *)(a1 + 9208);
    v76[13] = v15;
    v77 = *(_QWORD *)(a1 + 9240);
    v16 = *(_OWORD *)(a1 + 9160);
    v76[8] = *(_OWORD *)(a1 + 9144);
    v76[9] = v16;
    v17 = *(_OWORD *)(a1 + 9192);
    v76[10] = *(_OWORD *)(a1 + 9176);
    v76[11] = v17;
    v18 = *(_OWORD *)(a1 + 9096);
    v76[4] = *(_OWORD *)(a1 + 9080);
    v76[5] = v18;
    v19 = *(_OWORD *)(a1 + 9128);
    v76[6] = *(_OWORD *)(a1 + 9112);
    v76[7] = v19;
    v20 = *(_OWORD *)(a1 + 9032);
    v76[0] = *(_OWORD *)(a1 + 9016);
    v76[1] = v20;
    v21 = *(_OWORD *)(a1 + 9064);
    v76[2] = *(_OWORD *)(a1 + 9048);
    v76[3] = v21;
    v22 = *(_OWORD *)(a1 + 9424);
    v23 = *(_OWORD *)(a1 + 9456);
    v74[12] = *(_OWORD *)(a1 + 9440);
    v74[13] = v23;
    v75 = *(_QWORD *)(a1 + 9472);
    v24 = *(_OWORD *)(a1 + 9360);
    v25 = *(_OWORD *)(a1 + 9392);
    v74[8] = *(_OWORD *)(a1 + 9376);
    v74[9] = v25;
    v74[10] = *(_OWORD *)(a1 + 9408);
    v74[11] = v22;
    v26 = *(_OWORD *)(a1 + 9296);
    v27 = *(_OWORD *)(a1 + 9328);
    v74[4] = *(_OWORD *)(a1 + 9312);
    v74[5] = v27;
    v74[6] = *(_OWORD *)(a1 + 9344);
    v74[7] = v24;
    v28 = *(_OWORD *)(a1 + 9264);
    v74[0] = *(_OWORD *)(a1 + 9248);
    v74[1] = v28;
    v74[2] = *(_OWORD *)(a1 + 9280);
    v74[3] = v26;
    sub_10134D3D0(v13, v68, v76, v74);
    v29 = sub_10009ED0C();
    sub_10134D5D4(v29, v11, v12);
    *(_WORD *)(v4 + 32) = 257;
    *(_OWORD *)(a1 + 8930) = 0u;
    *(_OWORD *)(a1 + 8946) = 0u;
    *(_WORD *)(a1 + 8962) = 0;
    *(_DWORD *)(a1 + 9728) = 0xFFFF;
    *v9 = 0.0;
    *(_QWORD *)(a1 + 9740) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 9748) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 9764) = _Q1;
    *(_OWORD *)(a1 + 9780) = _Q1;
    *(_OWORD *)(a1 + 9796) = _Q1;
    *(_DWORD *)(a1 + 9812) = 0;
    *(_QWORD *)(a1 + 9816) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 9832) = 0;
    *(_QWORD *)(a1 + 9824) = 0;
    *(_DWORD *)(a1 + 9840) = 0;
    *(_QWORD *)(a1 + 9844) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 9852) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 9864) = 0;
    *(_QWORD *)(a1 + 9856) = 0;
    *(_BYTE *)(a1 + 9880) = 0;
    *(_QWORD *)(a1 + 9872) = 0;
    v35 = *(_OWORD *)(a2 + 208);
    v72[12] = *(_OWORD *)(a2 + 192);
    v72[13] = v35;
    v73 = *(_QWORD *)(a2 + 224);
    v36 = *(_OWORD *)(a2 + 144);
    v72[8] = *(_OWORD *)(a2 + 128);
    v72[9] = v36;
    v37 = *(_OWORD *)(a2 + 176);
    v72[10] = *(_OWORD *)(a2 + 160);
    v72[11] = v37;
    v38 = *(_OWORD *)(a2 + 80);
    v72[4] = *(_OWORD *)(a2 + 64);
    v72[5] = v38;
    v39 = *(_OWORD *)(a2 + 112);
    v72[6] = *(_OWORD *)(a2 + 96);
    v72[7] = v39;
    v40 = *(_OWORD *)(a2 + 16);
    v72[0] = *(_OWORD *)a2;
    v72[1] = v40;
    v41 = *(_OWORD *)(a2 + 48);
    v72[2] = *(_OWORD *)(a2 + 32);
    v72[3] = v41;
    sub_100E58B64((_QWORD *)(a1 + 8376), (uint64_t)v72);
  }
  v42 = sub_10009ED0C();
  v43 = *(_OWORD *)(a2 + 208);
  v70[12] = *(_OWORD *)(a2 + 192);
  v70[13] = v43;
  v71 = *(_QWORD *)(a2 + 224);
  v44 = *(_OWORD *)(a2 + 144);
  v70[8] = *(_OWORD *)(a2 + 128);
  v70[9] = v44;
  v45 = *(_OWORD *)(a2 + 176);
  v70[10] = *(_OWORD *)(a2 + 160);
  v70[11] = v45;
  v46 = *(_OWORD *)(a2 + 80);
  v70[4] = *(_OWORD *)(a2 + 64);
  v70[5] = v46;
  v47 = *(_OWORD *)(a2 + 112);
  v70[6] = *(_OWORD *)(a2 + 96);
  v70[7] = v47;
  v48 = *(_OWORD *)(a2 + 16);
  v70[0] = *(_OWORD *)a2;
  v70[1] = v48;
  v49 = *(_OWORD *)(a2 + 48);
  v70[2] = *(_OWORD *)(a2 + 32);
  v70[3] = v49;
  sub_10134CA84(v42, v70);
  v50 = (dispatch_queue_t *)sub_10009EC60();
  sub_100EA42AC(v50, a2, a1 + 8720, *(_BYTE *)v4);
  v51 = *(_QWORD *)(a1 + 8368);
  if (v51)
    sub_100CAEC1C(v51, a2);
  v91 = 0u;
  v92 = 0u;
  v90 = 0u;
  v89 = 0u;
  v88 = 0u;
  v52 = *(_OWORD *)(a2 + 208);
  v86[6] = *(_OWORD *)(a2 + 192);
  v86[7] = v52;
  v53 = *(_QWORD *)(a2 + 224);
  v93 = 0;
  v87 = v53;
  v54 = *(_OWORD *)(a2 + 144);
  v86[2] = *(_OWORD *)(a2 + 128);
  v86[3] = v54;
  v55 = *(_OWORD *)(a2 + 160);
  v86[5] = *(_OWORD *)(a2 + 176);
  v86[4] = v55;
  v56 = *(_OWORD *)(a2 + 80);
  v84 = *(_OWORD *)(a2 + 64);
  v85 = v56;
  v57 = *(_OWORD *)(a2 + 96);
  v86[1] = *(_OWORD *)(a2 + 112);
  v86[0] = v57;
  v58 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  v81 = v58;
  v59 = *(_OWORD *)(a2 + 32);
  v83 = *(_OWORD *)(a2 + 48);
  v82 = v59;
  uuid_copy((unsigned __int8 *)v86, (const unsigned __int8 *)(a2 + 96));
  v78 = 2;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v78, buf, 1, 0xFFFFFFFFLL, 0);
  v60 = *(_QWORD *)(a2 + 16);
  if (v60 == 3)
  {
    v61 = sub_1001FBB04(0);
    v62 = 3;
    goto LABEL_19;
  }
  if (v60 == 2)
  {
    v61 = sub_1001FBB04(0);
    v62 = 2;
LABEL_19:
    LOBYTE(v78) = v62;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)(v61 + 96) + 48))(v61 + 96, &v78);
    v60 = *(_QWORD *)(a2 + 16);
  }
  if (v60 == 6 || v60 == 1)
  {
    v63 = sub_1001FBB04(0);
    (*(void (**)(uint64_t))(*(_QWORD *)(v63 + 96) + 16))(v63 + 96);
  }
  if (sub_100F72B60(a2) == 1)
  {
    *(_DWORD *)(a1 + 8900) = 1;
    sub_1006C20A4(a1);
  }
  else if (sub_100F72B60(a2) == 2)
  {
    *(_DWORD *)(a1 + 8900) = 2;
    sub_1006C16B8(a1);
  }
  if (&_AudioServicesPlaySystemSound && *(_BYTE *)(a1 + 462))
  {
    if ((_QWORD)v81 == 2)
    {
      v64 = &stru_10214D2E0;
      goto LABEL_33;
    }
    if ((_QWORD)v81 == 3)
    {
      v64 = &stru_10214D300;
LABEL_33:
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v64);
    }
  }
  sub_1006C21E8(a1, a2);
}

id sub_1006C20A4(uint64_t a1)
{
  id result;
  void *v4;
  id v5;
  void *v6;
  id v7;
  unsigned __int8 v8;
  unsigned __int8 v9[3];

  v8 = 0;
  sub_1018BF25C(v9, "EnableBatchedSensorsDuringWorkouts", &v8, 0);
  result = (id)+[CLBatchedAccelerometerService isSupported](CLBatchedAccelerometerService, "isSupported");
  if ((_DWORD)result)
  {
    result = (id)+[CLBatchedDeviceMotionService isSupported](CLBatchedDeviceMotionService, "isSupported");
    if ((_DWORD)result && v9[1] != 0)
    {
      v4 = *(void **)(a1 + 8904);
      if (!v4)
      {
        v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBatchedAccelerometerService"));
        *(_QWORD *)(a1 + 8904) = v5;
        objc_msgSend(v5, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "silo"));
        v4 = *(void **)(a1 + 8904);
      }
      objc_msgSend(v4, "registerForData:", *(_QWORD *)(a1 + 32));
      v6 = *(void **)(a1 + 8912);
      if (!v6)
      {
        v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBatchedDeviceMotionService"));
        *(_QWORD *)(a1 + 8912) = v7;
        objc_msgSend(v7, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "silo"));
        v6 = *(void **)(a1 + 8912);
      }
      return objc_msgSend(v6, "registerForData:", *(_QWORD *)(a1 + 32));
    }
  }
  return result;
}

void sub_1006C21B8(id a1)
{
  AudioServicesPlaySystemSound(0x5A8u);
}

void sub_1006C21D0(id a1)
{
  AudioServicesPlaySystemSound(0x57Bu);
}

void sub_1006C21E8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _DWORD v37[2];
  __int16 v38;
  int v39;
  uint8_t buf[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a1 + 9896);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[snapshot] evaluating from workout event %d from state %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a1 + 9896);
    v37[0] = 67109376;
    v37[1] = v18;
    v38 = 1024;
    v39 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[snapshot] evaluating from workout event %d from state %d", v37, 14);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::updateWorkoutSnapshot(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v7 = sub_100F72D2C(a2);
  v8 = *(_OWORD *)(a1 + 10104);
  v52 = *(_OWORD *)(a1 + 10088);
  v53 = v8;
  v9 = *(_OWORD *)(a1 + 10136);
  v54 = *(_OWORD *)(a1 + 10120);
  v55 = v9;
  v10 = *(_OWORD *)(a1 + 10040);
  v48 = *(_OWORD *)(a1 + 10024);
  v49 = v10;
  v11 = *(_OWORD *)(a1 + 10072);
  v50 = *(_OWORD *)(a1 + 10056);
  v51 = v11;
  v12 = *(_OWORD *)(a1 + 9976);
  v44 = *(_OWORD *)(a1 + 9960);
  v45 = v12;
  v13 = *(_OWORD *)(a1 + 10008);
  v46 = *(_OWORD *)(a1 + 9992);
  v47 = v13;
  v14 = *(_OWORD *)(a1 + 9912);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 9896);
  v41 = v14;
  v15 = *(_OWORD *)(a1 + 9944);
  v42 = *(_OWORD *)(a1 + 9928);
  v43 = v15;
  if (v7 != 6 && v7 != *(_QWORD *)buf)
  {
    v16 = *(_QWORD *)(a2 + 24);
    v34 = *(_OWORD *)(a2 + 192);
    v35 = *(_OWORD *)(a2 + 208);
    v36 = *(_QWORD *)(a2 + 224);
    v30 = *(_OWORD *)(a2 + 128);
    v31 = *(_OWORD *)(a2 + 144);
    v32 = *(_OWORD *)(a2 + 160);
    v33 = *(_OWORD *)(a2 + 176);
    v26 = *(_OWORD *)(a2 + 64);
    v27 = *(_OWORD *)(a2 + 80);
    v28 = *(_OWORD *)(a2 + 96);
    v29 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)a2;
    v23 = *(_OWORD *)(a2 + 16);
    v24 = *(_OWORD *)(a2 + 32);
    v25 = *(_OWORD *)(a2 + 48);
    v17 = (_OWORD *)(a1 + 9904);
    *(_QWORD *)(a1 + 9896) = v7;
    if (v7)
    {
      *(_OWORD *)(a1 + 10096) = v34;
      *(_OWORD *)(a1 + 10112) = v35;
      *(_QWORD *)(a1 + 10128) = v36;
      *(_OWORD *)(a1 + 10032) = v30;
      *(_OWORD *)(a1 + 10048) = v31;
      *(_OWORD *)(a1 + 10064) = v32;
      *(_OWORD *)(a1 + 10080) = v33;
      *(_OWORD *)(a1 + 9968) = v26;
      *(_OWORD *)(a1 + 9984) = v27;
      *(_OWORD *)(a1 + 10000) = v28;
      *(_OWORD *)(a1 + 10016) = v29;
      *v17 = v22;
      *(_OWORD *)(a1 + 9920) = v23;
      *(_OWORD *)(a1 + 9936) = v24;
      *(_OWORD *)(a1 + 9952) = v25;
      *(_QWORD *)(a1 + 10136) = v16;
      *(_BYTE *)(a1 + 10144) = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 10128) = 0;
      *(_OWORD *)(a1 + 10096) = 0u;
      *(_OWORD *)(a1 + 10112) = 0u;
      *(_OWORD *)(a1 + 10064) = 0u;
      *(_OWORD *)(a1 + 10080) = 0u;
      *(_OWORD *)(a1 + 10032) = 0u;
      *(_OWORD *)(a1 + 10048) = 0u;
      *(_OWORD *)(a1 + 10000) = 0u;
      *(_OWORD *)(a1 + 10016) = 0u;
      *(_OWORD *)(a1 + 9968) = 0u;
      *(_OWORD *)(a1 + 9984) = 0u;
      *(_OWORD *)(a1 + 9936) = 0u;
      *(_OWORD *)(a1 + 9952) = 0u;
      *v17 = 0u;
      *(_OWORD *)(a1 + 9920) = 0u;
      if (*(_BYTE *)(a1 + 10144))
        *(_BYTE *)(a1 + 10144) = 0;
    }
    sub_1006C2680((double *)buf, (double *)(a1 + 9896));
  }
}

uint64_t sub_1006C2514(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD __src[40];
  _BYTE __dst[320];

  result = sub_100F72B18(a2);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 2)
    {
      LODWORD(__src[0]) = 0;
      sub_1000CED1C(a1 + 136, (uint64_t)&__src[1]);
      memset(&__src[18], 0, 176);
    }
    else
    {
      if ((_DWORD)result != 1)
      {
LABEL_7:
        v9 = 1;
        memcpy(__src, __dst, sizeof(__src));
        return (*(uint64_t (**)(uint64_t, int *, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v9, __src, 1, 0xFFFFFFFFLL, 0);
      }
      LODWORD(__src[0]) = 1;
      sub_1000CED1C(a1 + 136, (uint64_t)&__src[1]);
      v5 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&__src[33] = *(_OWORD *)(a2 + 176);
      *(_OWORD *)&__src[35] = v5;
      *(_OWORD *)&__src[37] = *(_OWORD *)(a2 + 208);
      v6 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&__src[25] = *(_OWORD *)(a2 + 112);
      *(_OWORD *)&__src[27] = v6;
      v7 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)&__src[29] = *(_OWORD *)(a2 + 144);
      *(_OWORD *)&__src[31] = v7;
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)&__src[19] = *(_OWORD *)(a2 + 64);
      __src[18] = *(_QWORD *)(a2 + 112);
      __src[39] = *(_QWORD *)(a2 + 224);
      *(_OWORD *)&__src[21] = v8;
      *(_OWORD *)&__src[23] = *(_OWORD *)(a2 + 96);
    }
    memcpy(__dst, __src, sizeof(__dst));
    goto LABEL_7;
  }
  return result;
}

void sub_1006C2680(double *a1, double *a2)
{
  __objc2_class *v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  double v8;
  NSDate *v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  NSObject *v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  NSDate *v22;
  double v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  NSDate *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  NSDate *v46;
  uint8_t buf[4];
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  NSDate *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  NSDate *v58;

  v4 = DefaultObserver;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v5 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 15);
    v8 = a1[30];
    if (!*((_BYTE *)a1 + 248))
      v8 = 1.79769313e308;
    v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v8);
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 15);
    v12 = a2[30];
    if (!*((_BYTE *)a2 + 248))
      v12 = 1.79769313e308;
    *(_DWORD *)buf = 67110402;
    v48 = LODWORD(v6);
    v49 = 1024;
    v50 = v7;
    v51 = 2112;
    v52 = v9;
    v4 = DefaultObserver;
    v53 = 1024;
    v54 = LODWORD(v10);
    v55 = 1024;
    v56 = v11;
    v57 = 2112;
    v58 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v12);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[snapshot] workout snapshot transitioned from [state %d, workout %d at %@] to [state %d, workout %d at %@]", buf, 0x2Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v18 = qword_10229FE68;
    v19 = *a1;
    v20 = *((_QWORD *)a1 + 15);
    v21 = a1[30];
    if (!*((_BYTE *)a1 + 248))
      v21 = 1.79769313e308;
    v22 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v21);
    v23 = *a2;
    v24 = *((_QWORD *)a2 + 15);
    v25 = a2[30];
    if (!*((_BYTE *)a2 + 248))
      v25 = 1.79769313e308;
    v35 = 67110402;
    v36 = LODWORD(v19);
    v37 = 1024;
    v38 = v20;
    v39 = 2112;
    v40 = v22;
    v41 = 1024;
    v42 = LODWORD(v23);
    v43 = 1024;
    v44 = v24;
    v45 = 2112;
    v46 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v25);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "[snapshot] workout snapshot transitioned from [state %d, workout %d at %@] to [state %d, workout %d at %@]", &v35, 46);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "static void CLMotionStateMediator::notifySnapshotIfNecessary(const CLMotionStateMediator_Type::WorkoutSnapshot &, const CLMotionStateMediator_Type::WorkoutSnapshot &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
    v4 = DefaultObserver;
  }
  v13 = *a2;
  if (*(_QWORD *)a1 == 1 && *(_QWORD *)&v13 == 5 || *(_QWORD *)a1 == 5 && *(_QWORD *)&v13 == 1)
  {
    if (v4[92].isa != (__objc2_class *)-1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v14 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      v15 = *a1;
      v16 = *a2;
      *(_DWORD *)buf = 67109376;
      v48 = LODWORD(v15);
      v49 = 1024;
      v50 = LODWORD(v16);
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[snapshot] sending snapshot notification from %d to %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v4[92].isa != (__objc2_class *)-1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v28 = *a1;
      v29 = *a2;
      v35 = 67109376;
      v36 = LODWORD(v28);
      v37 = 1024;
      v38 = LODWORD(v29);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "[snapshot] sending snapshot notification from %d to %d", &v35, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "static void CLMotionStateMediator::notifySnapshotIfNecessary(const CLMotionStateMediator_Type::WorkoutSnapshot &, const CLMotionStateMediator_Type::WorkoutSnapshot &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    if (notify_post((const char *)objc_msgSend(kCMWorkoutStateStopDetectionUpdateNotification, "UTF8String")))
    {
      if (v4[92].isa != (__objc2_class *)-1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v17 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[snapshot] encountered error notifying stop detection update", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v4[92].isa != (__objc2_class *)-1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        LOWORD(v35) = 0;
        LODWORD(v34) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "[snapshot] encountered error notifying stop detection update", &v35, v34);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 0, "static void CLMotionStateMediator::notifySnapshotIfNecessary(const CLMotionStateMediator_Type::WorkoutSnapshot &, const CLMotionStateMediator_Type::WorkoutSnapshot &)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
    }
  }
}

void sub_1006C2C28(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double Current;
  char *v15;
  char v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[4];
  uint8_t buf[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 9896);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[snapshot] evaluating after dismiss from state %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v17 = *(_QWORD *)(a1 + 9896);
    v20[0] = 67109120;
    v20[1] = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "[snapshot] evaluating after dismiss from state %d", v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::updateWorkoutSnapshotAfterDismiss()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  v4 = sub_100F72D98(*(_QWORD *)(a1 + 9896));
  v5 = *(_OWORD *)(a1 + 10104);
  v33 = *(_OWORD *)(a1 + 10088);
  v34 = v5;
  v6 = *(_OWORD *)(a1 + 10136);
  v35 = *(_OWORD *)(a1 + 10120);
  v36 = v6;
  v7 = *(_OWORD *)(a1 + 10040);
  v29 = *(_OWORD *)(a1 + 10024);
  v30 = v7;
  v8 = *(_OWORD *)(a1 + 10072);
  v31 = *(_OWORD *)(a1 + 10056);
  v32 = v8;
  v9 = *(_OWORD *)(a1 + 9976);
  v25 = *(_OWORD *)(a1 + 9960);
  v26 = v9;
  v10 = *(_OWORD *)(a1 + 10008);
  v27 = *(_OWORD *)(a1 + 9992);
  v28 = v10;
  v11 = *(_OWORD *)(a1 + 9912);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 9896);
  v22 = v11;
  v12 = *(_OWORD *)(a1 + 9944);
  v23 = *(_OWORD *)(a1 + 9928);
  v24 = v12;
  if (v4 != *(_QWORD *)buf)
  {
    v13 = v4;
    Current = CFAbsoluteTimeGetCurrent();
    *(_QWORD *)(a1 + 9896) = v13;
    v15 = (char *)(a1 + 10144);
    if (v13)
    {
      *(double *)(a1 + 10136) = Current;
      v16 = 1;
    }
    else
    {
      *(_QWORD *)(a1 + 10128) = 0;
      *(_OWORD *)(a1 + 10112) = 0u;
      *(_OWORD *)(a1 + 10096) = 0u;
      *(_OWORD *)(a1 + 10080) = 0u;
      *(_OWORD *)(a1 + 10064) = 0u;
      *(_OWORD *)(a1 + 10048) = 0u;
      *(_OWORD *)(a1 + 10032) = 0u;
      *(_OWORD *)(a1 + 10016) = 0u;
      *(_OWORD *)(a1 + 10000) = 0u;
      *(_OWORD *)(a1 + 9984) = 0u;
      *(_OWORD *)(a1 + 9968) = 0u;
      *(_OWORD *)(a1 + 9952) = 0u;
      *(_OWORD *)(a1 + 9936) = 0u;
      *(_OWORD *)(a1 + 9920) = 0u;
      *(_OWORD *)(a1 + 9904) = 0u;
      if (!*v15)
      {
LABEL_12:
        sub_1006C2680((double *)buf, (double *)(a1 + 9896));
        return;
      }
      v16 = 0;
    }
    *v15 = v16;
    goto LABEL_12;
  }
}

void sub_1006C2EB4(uint64_t a1, __int16 a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _WORD v22[8];
  uint8_t buf[1640];

  if (sub_1002433D4())
  {
    if ((a2 & 0x101) != 0)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v4 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabled device motion.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v22[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Enabled device motion.", v22, 2);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::startStopDeviceMotionBasedOnWorkout(CLWorkoutPredictor_Type::DeviceMotionToggleInfo)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      v5 = sub_1002433D4();
      sub_1011932BC(v5, *(_QWORD *)(a1 + 672), 0.01);
    }
    else
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v6 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disabled device motion.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v22[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Disabled device motion.", v22, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::startStopDeviceMotionBasedOnWorkout(CLWorkoutPredictor_Type::DeviceMotionToggleInfo)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      v7 = sub_1002433D4();
      sub_101193558(v7, *(_QWORD *)(a1 + 672));
    }
    v8 = (uint64_t *)(a1 + 8248);
    v9 = *(_QWORD *)(a1 + 8248);
    if ((a2 & 1) != 0)
    {
      if (!v9)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v12 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Starting turn detector", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214D4A8);
          v22[0] = 0;
          LODWORD(v21) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Starting turn detector", v22, v21);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::startStopDeviceMotionBasedOnWorkout(CLWorkoutPredictor_Type::DeviceMotionToggleInfo)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        operator new();
      }
    }
    else if (v9)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v10 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Stopping turn detector", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v22[0] = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Stopping turn detector", v22, v21);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::startStopDeviceMotionBasedOnWorkout(CLWorkoutPredictor_Type::DeviceMotionToggleInfo)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      v11 = *v8;
      *v8 = 0;
      if (v11)
        sub_1006D8148((uint64_t)v8, v11);
    }
  }
}

void sub_1006C345C()
{
  operator delete();
}

void sub_1006C3488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const std::string *v6;
  id v7;
  void *i;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  id v17;
  uint64_t v18;
  id obj;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 __p;
  uint64_t v27;
  _QWORD v28[7];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[7];
  _OWORD v33[14];
  uint64_t v34;
  _BYTE v35[128];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[7];

  v36 = *(_OWORD *)a3;
  v6 = (const std::string *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_100115CE4(&v37, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v37 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v38 = *(_QWORD *)(a3 + 32);
  }
  sub_1006CCC70((uint64_t)v39, (_QWORD *)(a3 + 40));
  v18 = a1;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = *(id *)(a1 + 680);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v35, 16);
  if (v7)
  {
    v20 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v20)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v10 = *(_OWORD *)(a2 + 208);
        v33[12] = *(_OWORD *)(a2 + 192);
        v33[13] = v10;
        v34 = *(_QWORD *)(a2 + 224);
        v11 = *(_OWORD *)(a2 + 144);
        v33[8] = *(_OWORD *)(a2 + 128);
        v33[9] = v11;
        v12 = *(_OWORD *)(a2 + 176);
        v33[10] = *(_OWORD *)(a2 + 160);
        v33[11] = v12;
        v13 = *(_OWORD *)(a2 + 80);
        v33[4] = *(_OWORD *)(a2 + 64);
        v33[5] = v13;
        v14 = *(_OWORD *)(a2 + 112);
        v33[6] = *(_OWORD *)(a2 + 96);
        v33[7] = v14;
        v15 = *(_OWORD *)(a2 + 16);
        v33[0] = *(_OWORD *)a2;
        v33[1] = v15;
        v16 = *(_OWORD *)(a2 + 48);
        v33[2] = *(_OWORD *)(a2 + 32);
        v33[3] = v16;
        v29 = v36;
        if (SHIBYTE(v38) < 0)
        {
          sub_100115CE4(&v30, (void *)v37, *((unint64_t *)&v37 + 1));
        }
        else
        {
          v30 = v37;
          v31 = v38;
        }
        sub_1006CCC70((uint64_t)v32, v39);
        v17 = sub_1006BC8D0(&v29);
        v25 = *(_OWORD *)(v18 + 8720);
        if (*(char *)(v18 + 8759) < 0)
        {
          sub_100115CE4(&__p, *(void **)(v18 + 8736), *(_QWORD *)(v18 + 8744));
        }
        else
        {
          __p = *(_OWORD *)(v18 + 8736);
          v27 = *(_QWORD *)(v18 + 8752);
        }
        sub_1006D0F34((uint64_t)v28, (_QWORD *)(v18 + 8760));
        objc_msgSend(v9, "onWorkoutSessionUpdate:withOverview:andPriors:", v33, v17, sub_1006C3820(&v25));
        sub_100544F70(v28);
        if (SHIBYTE(v27) < 0)
          operator delete((void *)__p);
        sub_100691160(v32);
        if (SHIBYTE(v31) < 0)
          operator delete((void *)v30);
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v35, 16);
    }
    while (v7);
  }
  *(_OWORD *)(v18 + 8808) = *(_OWORD *)a3;
  std::string::operator=((std::string *)(v18 + 8824), v6);
  sub_1006D184C((_QWORD *)(v18 + 8848), (_QWORD *)(a3 + 40));
  sub_100691160(v39);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
}

void sub_1006C3790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  _Unwind_Resume(exception_object);
}

id sub_1006C3820(__int128 *a1)
{
  id v2;
  _QWORD v4[4];
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  _QWORD v8[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1006D8788;
  v4[3] = &unk_10214EBD0;
  v5 = *a1;
  if (*((char *)a1 + 39) < 0)
  {
    sub_100115CE4(&__p, *((void **)a1 + 2), *((_QWORD *)a1 + 3));
  }
  else
  {
    __p = a1[1];
    v7 = *((_QWORD *)a1 + 4);
  }
  sub_1006D0F34((uint64_t)v8, (_QWORD *)a1 + 5);
  v2 = objc_msgSend(v4, "copy");
  sub_100544F70(v8);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)__p);
  return v2;
}

void sub_1006C3920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006C3954(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t result;
  _BOOL4 v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[2];
  __int16 v18;
  _BOOL4 v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  _BOOL4 v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  int v39;

  v2 = a1 + 8920;
  v3 = *(unsigned __int8 *)(a1 + 8920);
  if (*(_BYTE *)(a1 + 8920))
  {
    if (*(_BYTE *)(a1 + 10192))
      v3 = 0;
    else
      v3 = *(_DWORD *)(a1 + 376) == 0;
  }
  *(_BYTE *)(a1 + 488) = v3;
  *(_BYTE *)(a1 + 552) = 1;
  v4 = *(unsigned __int8 *)(a1 + 8922);
  if (*(_BYTE *)(a1 + 8922))
    v4 = !*(_BYTE *)(a1 + 10192) && !*(_DWORD *)(a1 + 376) && *(_BYTE *)(a1 + 8923) != 0;
  *(_BYTE *)(a1 + 520) = v4;
  *(_BYTE *)(a1 + 584) = 1;
  if (*(_BYTE *)(a1 + 491))
  {
    v5 = *(_BYTE *)(a1 + 490) != 0;
  }
  else if (*(_BYTE *)(a1 + 489))
  {
    v5 = 0;
  }
  else
  {
    v5 = v3;
  }
  if (*(_BYTE *)(a1 + 523))
  {
    v6 = *(_BYTE *)(a1 + 522) != 0;
  }
  else if (*(_BYTE *)(a1 + 521))
  {
    v6 = 0;
  }
  else
  {
    v6 = v4;
  }
  if (*(_BYTE *)(a1 + 555))
    v7 = *(_BYTE *)(a1 + 554) != 0;
  else
    v7 = *(_BYTE *)(a1 + 553) == 0;
  if (*(_BYTE *)(a1 + 587))
    v8 = *(_BYTE *)(a1 + 586) != 0;
  else
    v8 = *(_BYTE *)(a1 + 585) == 0;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v9 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_DWORD *)(a1 + 376) == 0;
    v11 = *(unsigned __int8 *)(v2 + 3);
    *(_DWORD *)buf = 67241472;
    v29 = v5;
    v30 = 1026;
    v31 = v6;
    v32 = 1026;
    v33 = v7;
    v34 = 1026;
    v35 = v8;
    v36 = 1026;
    v37 = v10;
    v38 = 1024;
    v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Workout settings, start, %{public}d, resume, %{public}d, end, %{public}d, autopause, %{public}d, valid user info, %{public}d,  fitness tracking allowed, %d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v13 = *(_DWORD *)(a1 + 376) == 0;
    v14 = *(unsigned __int8 *)(v2 + 3);
    v17[0] = 67241472;
    v17[1] = v5;
    v18 = 1026;
    v19 = v6;
    v20 = 1026;
    v21 = v7;
    v22 = 1026;
    v23 = v8;
    v24 = 1026;
    v25 = v13;
    v26 = 1024;
    v27 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout settings, start, %{public}d, resume, %{public}d, end, %{public}d, autopause, %{public}d, valid user info, %{public}d,  fitness tracking allowed, %d", v17, 38);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::updateWorkoutReminderSettings()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100DD26E4((unsigned __int8 *)(a1 + 6624), v5, v7);
  sub_100DDCDFC(a1 + 6624, v8);
  result = *(_QWORD *)(a1 + 10208);
  if (result)
    return sub_1010A8FE0(result, v6);
  return result;
}

void sub_1006C3CBC(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD handler[5];
  _WORD v16[8];
  uint8_t buf[1640];

  v3 = *(_QWORD *)(a1 + 328);
  if (a2)
  {
    if (v3)
    {
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v4 = qword_10229FF48;
      if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Wifi timer already existed, reinitializing.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF40 != -1)
          dispatch_once(&qword_10229FF40, &stru_10214DDE0);
        v16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "Wifi timer already existed, reinitializing.", v16, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::controlWifiScans(BOOL)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
      dispatch_release(*(dispatch_object_t *)(a1 + 328));
      *(_QWORD *)(a1 + 328) = 0;
    }
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v5 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Starting Wifi Scans.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v16[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "Starting Wifi Scans.", v16, v14);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::controlWifiScans(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
    *(_QWORD *)(a1 + 328) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006C415C;
    handler[3] = &unk_10212ECA0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 328), 0, 0x1DCD65000uLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 328));
  }
  else if (v3)
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v7 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Stopping Wifi Scans.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "Stopping Wifi Scans.", v16, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::controlWifiScans(BOOL)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 328));
    *(_QWORD *)(a1 + 328) = 0;
  }
}

id sub_1006C415C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10214DDE0);
  v2 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Triggering Wifi Scan.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 2, "Triggering Wifi Scan.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::controlWifiScans(BOOL)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 10272) + 16), "syncgetStartScanWithType:lowPriority:passive:requester:", 8, 0, 0, "motionworkout");
}

void sub_1006C430C(uint64_t a1, int a2)
{
  sub_1006C3CBC(a1 - 112, a2);
}

void sub_1006C4314(uint64_t a1)
{
  uint64_t v1;
  __int16 v3;
  NSObject *v4;
  int v5;
  int v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  v1 = *(_QWORD *)(a1 + 10248);
  if (v1)
  {
    if (*(_WORD *)(a1 + 696))
    {
      v3 = *(_WORD *)(a1 + 696) - 1;
      *(_WORD *)(a1 + 696) = v3;
      if (!v3)
        objc_msgSend(*(id *)(v1 + 16), "unregister:forNotification:", *(_QWORD *)(v1 + 8), 9);
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int16 *)(a1 + 696);
      *(_DWORD *)buf = 67109120;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "OneSecondHeartRateCounter %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v6 = *(unsigned __int16 *)(a1 + 696);
      v13[0] = 67109120;
      v13[1] = v6;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "OneSecondHeartRateCounter %d", v13);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::unregisterOneSecondHeartRate()", "%s\n", v7);
LABEL_22:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v10 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Attempting unregistering for 1Hz HR with uninitialized HR client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      LOWORD(v13[0]) = 0;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Attempting unregistering for 1Hz HR with uninitialized HR client", v13, 2);
      v9 = v12;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::unregisterOneSecondHeartRate()", "%s\n", v11);
      goto LABEL_22;
    }
  }
}

void sub_1006C460C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  int v4;
  int v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v1 = *(_QWORD *)(a1 + 10248);
  if (v1)
  {
    objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 9, 0);
    ++*(_WORD *)(a1 + 696);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v3 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(unsigned __int16 *)(a1 + 696);
      *(_DWORD *)buf = 67109120;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering for 1Hz HR. OneSecondHeartRateCounter %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v5 = *(unsigned __int16 *)(a1 + 696);
      v12[0] = 67109120;
      v12[1] = v5;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Registering for 1Hz HR. OneSecondHeartRateCounter %d", v12);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::registerOneSecondHeartRate()", "%s\n", v6);
LABEL_19:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Attempting registering for 1Hz HR with uninitialized HR client", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      LOWORD(v12[0]) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Attempting registering for 1Hz HR with uninitialized HR client", v12, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::registerOneSecondHeartRate()", "%s\n", v10);
      goto LABEL_19;
    }
  }
}

id sub_1006C48FC(uint64_t a1)
{
  id result;
  _QWORD v3[5];

  result = objc_alloc_init((Class)BrightnessSystemClient);
  *(_QWORD *)(a1 + 688) = result;
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1006C49A0;
    v3[3] = &unk_10214D320;
    v3[4] = a1;
    objc_msgSend(result, "registerNotificationBlock:forProperties:", v3, &off_102220408);
    return objc_msgSend(*(id *)(a1 + 688), "setProperty:forKey:", (id)CFMakeCollectable(kCFBooleanTrue), CFSTR("ActivateALS"));
  }
  return result;
}

id sub_1006C49A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  _QWORD v7[6];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend(*(id *)(v4 + 32), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1006C4A08;
  v7[3] = &unk_102131360;
  v7[4] = a3;
  v7[5] = v4;
  return objc_msgSend(v5, "async:", v7);
}

uint64_t sub_1006C4A08(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime Current;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 40);
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend(*(id *)(a1 + 32), "floatValue");
  v5 = v4;
  objc_msgSend(*(id *)(v2 + 32), "silo");
  return (*(uint64_t (**)(_QWORD, CFAbsoluteTime, _QWORD))(**(_QWORD **)(v2 + 8256) + 40))(*(_QWORD *)(v2 + 8256), COERCE_CFABSOLUTETIME(*(_QWORD *)&Current), v5);
}

void sub_1006C4A60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 688);
  if (v2)
  {
    objc_msgSend(v2, "unregisterNotificationForKeys:", &off_102220420);
    objc_msgSend(*(id *)(a1 + 688), "registerNotificationBlock:", 0);

    *(_QWORD *)(a1 + 688) = 0;
  }
}

id sub_1006C4AA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10214DDE0);
  v4 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, starting indoorOutdoor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor, starting indoorOutdoor", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::startIndoorOutdoorSession(const IndoorOutdoorSettings &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8256) + 56))(*(_QWORD *)(a1 + 8256), a2);
  return sub_1006C48FC(a1);
}

id sub_1006C4C58(uint64_t a1, uint64_t a2)
{
  return sub_1006C4AA8(a1 - 112, a2);
}

void sub_1006C4C60(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10214DDE0);
  v2 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, stopping indoorOutdoor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor, stopping indoorOutdoor", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::stopIndoorOutdoorSession()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8256) + 64))(*(_QWORD *)(a1 + 8256));
  sub_1006C4A60(a1);
}

void sub_1006C4E08(uint64_t a1)
{
  sub_1006C4C60(a1 - 112);
}

void sub_1006C4E10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFAbsoluteTime Current;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  _QWORD v29[3];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  *(_DWORD *)(a1 + 8960) = (*(_DWORD *)(a2 + 24) << 30) + (*(_DWORD *)(a2 + 32) << 27);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)a2 - 1;
  if (v7 > 3)
    v8 = 0;
  else
    v8 = qword_101BBE0D8[v7];
  v9 = *(_QWORD *)(a2 + 16);
  Current = CFAbsoluteTimeGetCurrent();
  v46 = 0u;
  v47 = 0u;
  v45 = 0u;
  v48 = 0;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  *(CFAbsoluteTime *)v29 = Current;
  v29[1] = v8;
  v29[2] = v6;
  if (qword_10229FF40 != -1)
    dispatch_once(&qword_10229FF40, &stru_10214DDE0);
  v11 = qword_10229FF48;
  if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349568;
    v24 = v8;
    v25 = 2050;
    v26 = v6;
    v27 = 2050;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "IndoorOutdoor,new location type,%{public}ld,confidence,%{public}ld,probability,%{public}f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v17 = 134349568;
    v18 = v8;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "IndoorOutdoor,new location type,%{public}ld,confidence,%{public}ld,probability,%{public}f", &v17, 32);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onIndoorOutdoorUpdate(const CLIndoorOutdoorProtocol::IndoorOutdoorEvent &, BOOL)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  *(_DWORD *)buf = 3;
  (*(void (**)(uint64_t, uint8_t *, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v29, 1, 0xFFFFFFFFLL, 0);
  if (*(_BYTE *)(a1 + 461))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  }
  else if (a3)
  {
    sub_100DDCDAC(a1 + 6624, v5);
  }
  v15 = *(_OWORD *)(a1 + 10160);
  v16 = *(_QWORD *)(a1 + 10176);
  *(CFAbsoluteTime *)v14 = Current;
  v14[1] = v8;
  v14[2] = v6;
  sub_1006C5130((_DWORD *)a1, (uint64_t)&v15, (uint64_t)v14);
  *(CFAbsoluteTime *)(a1 + 10160) = Current;
  *(_QWORD *)(a1 + 10168) = v8;
  *(_QWORD *)(a1 + 10176) = v6;
}

void sub_1006C5130(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  NSInteger v6;
  int v7;
  NSObject *v8;
  __int128 *v9;
  void **v10;
  void **v11;
  __int128 *v12;
  __int128 *v13;
  void **v14;
  void **v15;
  __int128 *v16;
  const char *v17;
  uint8_t *v18;
  void **block;
  uint64_t v20;
  void (*v21)(char *);
  void *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 __p;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int128 *v48;
  __int16 v49;
  void **v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  __int128 *v54;
  uint8_t buf[4];
  __int128 *v56;
  __int16 v57;
  void **v58;
  __int16 v59;
  void **v60;
  __int16 v61;
  __int128 *v62;

  v6 = -[NSDateComponents hour](-[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 32, +[NSDate date](NSDate, "date")), "hour");
  if (v6 == a1[2547])
  {
    v7 = a1[2546];
  }
  else
  {
    v7 = 0;
    a1[2547] = v6;
    a1[2546] = 0;
  }
  if (v7 < a1[110])
  {
    a1[2546] = v7 + 1;
    sub_1015A2E04(&v45, off_10214ED30[*(_QWORD *)(a2 + 8)]);
    sub_1015A2E04(v43, off_10214ED50[*(_QWORD *)(a2 + 16)]);
    sub_1015A2E04(&v41, (char *)-[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2), 1, 1), "UTF8String"));
    sub_1015A2E04(v39, off_10214ED30[*(_QWORD *)(a3 + 8)]);
    sub_1015A2E04(&v37, off_10214ED50[*(_QWORD *)(a3 + 16)]);
    sub_1015A2E04(v35, (char *)-[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a3), 1, 1), "UTF8String"));
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v8 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_DEFAULT))
    {
      v9 = &v45;
      if (v46 < 0)
        v9 = (__int128 *)v45;
      v10 = v43;
      if (v44 < 0)
        v10 = (void **)v43[0];
      v11 = v39;
      if (v40 < 0)
        v11 = (void **)v39[0];
      v12 = &v37;
      if (v38 < 0)
        v12 = (__int128 *)v37;
      *(_DWORD *)buf = 136315906;
      v56 = v9;
      v57 = 2080;
      v58 = v10;
      v59 = 2080;
      v60 = v11;
      v61 = 2080;
      v62 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, issuing notification old (%s, %s) new (%s, %s)", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v13 = &v45;
      if (v46 < 0)
        v13 = (__int128 *)v45;
      v14 = v43;
      if (v44 < 0)
        v14 = (void **)v43[0];
      v15 = v39;
      if (v40 < 0)
        v15 = (void **)v39[0];
      v16 = &v37;
      if (v38 < 0)
        v16 = (__int128 *)v37;
      v47 = 136315906;
      v48 = v13;
      v49 = 2080;
      v50 = v14;
      v51 = 2080;
      v52 = v15;
      v53 = 2080;
      v54 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 0, "IndoorOutdoor, issuing notification old (%s, %s) new (%s, %s)", (const char *)&v47, 42, (const char *)block, (const char *)v20);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::issueUserNotificationForIndoorOutdoorIfAllowed(CLMotionStateMediator_Type::IndoorOutdoorUpdate, CLMotionStateMediator_Type::IndoorOutdoorUpdate)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    block = _NSConcreteStackBlock;
    v20 = 3321888768;
    v21 = sub_1006C5810;
    v22 = &unk_10214D340;
    if (SHIBYTE(v42) < 0)
    {
      sub_100115CE4(&v23, (void *)v41, *((unint64_t *)&v41 + 1));
    }
    else
    {
      v23 = v41;
      v24 = v42;
    }
    if (SHIBYTE(v46) < 0)
    {
      sub_100115CE4(&v25, (void *)v45, *((unint64_t *)&v45 + 1));
    }
    else
    {
      v25 = v45;
      v26 = v46;
    }
    if (SHIBYTE(v44) < 0)
    {
      sub_100115CE4(&v27, v43[0], (unint64_t)v43[1]);
    }
    else
    {
      v27 = *(_OWORD *)v43;
      v28 = v44;
    }
    if (SHIBYTE(v36) < 0)
    {
      sub_100115CE4(&v29, v35[0], (unint64_t)v35[1]);
    }
    else
    {
      v29 = *(_OWORD *)v35;
      v30 = v36;
    }
    if (SHIBYTE(v40) < 0)
    {
      sub_100115CE4(&v31, v39[0], (unint64_t)v39[1]);
    }
    else
    {
      v31 = *(_OWORD *)v39;
      v32 = v40;
    }
    if (SHIBYTE(v38) < 0)
    {
      sub_100115CE4(&__p, (void *)v37, *((unint64_t *)&v37 + 1));
    }
    else
    {
      __p = v37;
      v34 = v38;
    }
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &block);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (SHIBYTE(v24) < 0)
      operator delete((void *)v23);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
    if (SHIBYTE(v40) < 0)
      operator delete(v39[0]);
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(v44) < 0)
      operator delete(v43[0]);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
  }
}

void sub_1006C56E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;

  if (a38 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  _Unwind_Resume(a1);
}

void sub_1006C5808(uint64_t a1, uint64_t a2, int a3)
{
  sub_1006C4E10(a1 - 112, a2, a3);
}

void sub_1006C5810(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const __CFString *v7;

  v1 = a1 + 32;
  if (a1[55] < 0)
    v1 = (_QWORD *)*v1;
  v2 = a1 + 56;
  if (a1[79] < 0)
    v2 = (_QWORD *)*v2;
  v3 = a1 + 80;
  if (a1[103] < 0)
    v3 = (_QWORD *)*v3;
  v4 = a1 + 104;
  if (a1[127] < 0)
    v4 = (_QWORD *)*v4;
  v5 = a1 + 128;
  if (a1[151] < 0)
    v5 = (_QWORD *)*v5;
  v6 = a1 + 152;
  if (a1[175] < 0)
    v6 = (_QWORD *)*v6;
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("Old indoor/outdoor state\n%s, %s, %s New\n%s, %s, %s"), v1, v2, v3, v4, v5, v6);
  CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, CFSTR("IndoorOutdoorState"), v7, 0);
  CFRelease(v7);
}

_BYTE *sub_1006C58E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *result;
  __int128 v10;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 128), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v8;
  }
  result = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
    return sub_100115CE4(result, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  v10 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)result = v10;
  return result;
}

void sub_1006C5A34(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (v2[151] < 0)
    operator delete(*v6);
  if (v2[127] < 0)
    operator delete(*v5);
  if (v2[103] < 0)
    operator delete(*v4);
  if (v2[79] < 0)
    operator delete(*v3);
  if (v2[55] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1006C5AB0(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1006C5B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  _OWORD v15[10];
  uint64_t v16;
  uint8_t buf[1640];

  uuid_copy((unsigned __int8 *)(a1 + 9712), (const unsigned __int8 *)(a2 + 96));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did Begin Workout Session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v14[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Did Begin Workout Session", v14, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onDidBeginWorkoutSession(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  v7 = *(_OWORD *)(a2 + 208);
  v15[8] = *(_OWORD *)(a2 + 192);
  v15[9] = v7;
  v16 = *(_QWORD *)(a2 + 224);
  v8 = *(_OWORD *)(a2 + 144);
  v15[4] = *(_OWORD *)(a2 + 128);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 176);
  v15[6] = *(_OWORD *)(a2 + 160);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 80);
  v15[0] = *(_OWORD *)(a2 + 64);
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 112);
  v15[2] = *(_OWORD *)(a2 + 96);
  v15[3] = v11;
  sub_1006C5D4C(a1, (uint64_t)v15);
  sub_1006C5F3C(a1);
}

id sub_1006C5D4C(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  id result;
  const char *v7;
  uint8_t *v8;
  int v9;
  double v10;
  uint8_t buf[4];
  double v12;

  sub_100DDBEB0(a1 + 6624, a2);
  v4 = sub_10135DC00(*(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 64));
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v5 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gfc started workout, starting geofence with radius %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v9 = 134349056;
    v10 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "#gfc started workout, starting geofence with radius %{public}f", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::overrideActivity(CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = (id)sub_100195F08();
  if ((_DWORD)result)
  {
    if (v4 != -1.0)
      return objc_msgSend(*(id *)(a1 + 10152), "startGeoFenceWithRadius:", v4);
  }
  return result;
}

void sub_1006C5F3C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 10208))
    sub_1006C6B4C((uint64_t *)(a1 + 10208), 0);
  operator new();
}

void sub_1006C609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

void sub_1006C60F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006C5B34(a1 - 120, a2, a3);
}

void sub_1006C6100(uint64_t a1, uint64_t a2)
{
  sub_1006C197C(a1 - 120, a2);
}

void sub_1006C6108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[16];
  void *__p[2];
  _OWORD v13[3];
  uint64_t v14;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did End Workout Session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v10[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Did End Workout Session", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onDidEndWorkoutSession(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_1006C63AC(a1, *(double *)(a2 + 8));
  if (*(_QWORD *)(a2 + 16) == 15)
  {
    sub_1000CED1C(a1 + 136, (uint64_t)buf);
    sub_1006C6574(a1, (uint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)buf), *(double *)(a2 + 8));
  }
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  v14 = 0;
  *(_OWORD *)__p = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)(a1 + 8808) = 0u;
  v7 = (void **)(a1 + 8824);
  *(_OWORD *)buf = 0u;
  if (*(char *)(a1 + 8847) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 8840) = *(_QWORD *)&v13[0];
  BYTE7(v13[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_1006D1CA8((_QWORD *)(a1 + 8848), (uint64_t)v13 + 8);
  sub_100691160((_QWORD *)v13 + 1);
  if (SBYTE7(v13[0]) < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 10208))
    sub_1006C6B4C((uint64_t *)(a1 + 10208), 0);
}

uint64_t sub_1006C63AC(uint64_t a1, double a2)
{
  uint64_t result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  result = sub_10007099C((_DWORD *)(a1 + 136));
  if ((_DWORD)result)
  {
    sub_100DDBFB0((_QWORD *)(a1 + 6624), a2);
    result = sub_100195F08();
    if ((_DWORD)result)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v5 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gfc stopped workout, stopping geofence", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "#gfc stopped workout, stopping geofence", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::clearActivityOverride(CFAbsoluteTime)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      return (uint64_t)objc_msgSend(*(id *)(a1 + 10152), "stopGeoFence");
    }
  }
  return result;
}

void sub_1006C6574(uint64_t a1, uint64_t a2, double a3)
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  double v10;
  void *v11;
  void *v12;
  double v13;
  unsigned int v14;
  double v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  id v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  __int16 v35;
  double v36;
  __int16 v37;
  unsigned int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  double v42;
  __int16 v43;
  unsigned int v44;
  _BYTE v45[128];

  v6 = objc_msgSend(*(id *)(a1 + 664), "objectForKeyedSubscript:", &off_10221B540);
  objc_msgSend(v6, "unionSet:", objc_msgSend(*(id *)(a1 + 664), "objectForKeyedSubscript:", +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2)));
  if (v6)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v45, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v30;
      v10 = 0.0;
      v28 = 67109632;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v30 != v9)
            objc_enumerationMutation(v6);
          v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v11);
          v13 = sub_100078B88();
          v14 = objc_msgSend(v12, "syncget_prepareSessionEndForSessionType:atEndTime:", a2, a3);
          v15 = sub_100078B88();
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214D4A8);
          v16 = v15 - v13;
          v17 = qword_10229FE68;
          if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v28;
            v40 = a2;
            v41 = 2048;
            v42 = v16;
            v43 = 1024;
            v44 = v14;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PrepareSessionEnd, sent client end for session, %d, duration (s), %f, success, %d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10214D4A8);
            v33 = v28;
            v34 = a2;
            v35 = 2048;
            v36 = v16;
            v37 = 1024;
            v38 = v14;
            LODWORD(v27) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "PrepareSessionEnd, sent client end for session, %d, duration (s), %f, success, %d", &v33, v27, v28);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::prepareForSessionEnd(CMWorkoutType, CFAbsoluteTime)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          if (v16 > 0.005)
          {
            if (qword_10229FE60 != -1)
              dispatch_once(&qword_10229FE60, &stru_10214D4A8);
            v18 = qword_10229FE68;
            if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v28;
              v40 = a2;
              v41 = 2048;
              v42 = v16;
              v43 = 1024;
              v44 = v14;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "PrepareSessionEnd, client response duration exceeded 5 ms threshold, sessionType, %d, duration (s), %f, success, %d", buf, 0x18u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FE60 != -1)
                dispatch_once(&qword_10229FE60, &stru_10214D4A8);
              v33 = v28;
              v34 = a2;
              v35 = 2048;
              v36 = v16;
              v37 = 1024;
              v38 = v14;
              LODWORD(v27) = 24;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "PrepareSessionEnd, client response duration exceeded 5 ms threshold, sessionType, %d, duration (s), %f, success, %d", &v33, v27, v28);
              v22 = (uint8_t *)v21;
              sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::prepareForSessionEnd(CMWorkoutType, CFAbsoluteTime)", "%s\n", v21);
              if (v22 != buf)
                free(v22);
            }
          }
          v10 = v10 + v16;
          v11 = (char *)v11 + 1;
        }
        while (v8 != v11);
        v23 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v45, 16);
        v8 = v23;
      }
      while (v23);
      if (v10 > 0.015)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v24 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          v40 = a2;
          v41 = 2048;
          v42 = v10;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "PrepareSessionEnd, total client response duration exceeded 15 ms threshold, sessionType, %d, total duration (s), %f", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214D4A8);
          v33 = 67109376;
          v34 = a2;
          v35 = 2048;
          v36 = v10;
          LODWORD(v27) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "PrepareSessionEnd, total client response duration exceeded 15 ms threshold, sessionType, %d, total duration (s), %f", &v33, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::prepareForSessionEnd(CMWorkoutType, CFAbsoluteTime)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
      }
    }
  }
}

uint64_t sub_1006C6B4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010A823C();
    operator delete();
  }
  return result;
}

void sub_1006C6B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006C6108(a1 - 120, a2, a3);
}

void sub_1006C6B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  double Current;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const char *v26;
  uint8_t *v27;
  _OWORD v28[10];
  uint64_t v29;
  int v30;
  uint64_t v31;
  uuid_t uu2;
  uuid_t dst;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[10];
  uint64_t v39;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did Set Workout Type During Workout Session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    *(_WORD *)dst = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Did Set Workout Type During Workout Session", dst, 2);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onDidSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  memset(dst, 0, sizeof(dst));
  memset(uu2, 0, sizeof(uu2));
  v7 = *(_OWORD *)(a1 + 7648);
  v8 = *(_OWORD *)(a1 + 7680);
  v38[8] = *(_OWORD *)(a1 + 7664);
  v38[9] = v8;
  v39 = *(_QWORD *)(a1 + 7696);
  v9 = *(_OWORD *)(a1 + 7584);
  v10 = *(_OWORD *)(a1 + 7616);
  v38[4] = *(_OWORD *)(a1 + 7600);
  v38[5] = v10;
  v38[6] = *(_OWORD *)(a1 + 7632);
  v38[7] = v7;
  v11 = *(_OWORD *)(a1 + 7520);
  v12 = *(_OWORD *)(a1 + 7552);
  v38[0] = *(_OWORD *)(a1 + 7536);
  v38[1] = v12;
  v38[2] = *(_OWORD *)(a1 + 7568);
  v38[3] = v9;
  v13 = *(_OWORD *)(a1 + 7488);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 7472);
  v35 = v13;
  v36 = *(_OWORD *)(a1 + 7504);
  v37 = v11;
  uuid_copy(dst, (const unsigned __int8 *)v38);
  uuid_copy(uu2, (const unsigned __int8 *)(a2 + 64));
  if (uuid_compare(dst, uu2))
  {
    v14 = *(_QWORD *)(a1 + 8712);
    if (!v14 || !*(_BYTE *)(v14 + 113) || *(_QWORD *)(a2 + 112) != 33)
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_1006C63AC(a1, Current);
      v21 = *(_OWORD *)(a2 + 208);
      v28[8] = *(_OWORD *)(a2 + 192);
      v28[9] = v21;
      v29 = *(_QWORD *)(a2 + 224);
      v22 = *(_OWORD *)(a2 + 144);
      v28[4] = *(_OWORD *)(a2 + 128);
      v28[5] = v22;
      v23 = *(_OWORD *)(a2 + 176);
      v28[6] = *(_OWORD *)(a2 + 160);
      v28[7] = v23;
      v24 = *(_OWORD *)(a2 + 80);
      v28[0] = *(_OWORD *)(a2 + 64);
      v28[1] = v24;
      v25 = *(_OWORD *)(a2 + 112);
      v28[2] = *(_OWORD *)(a2 + 96);
      v28[3] = v25;
      sub_1006C5D4C(a1, (uint64_t)v28);
      sub_1006C5F3C(a1);
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v15 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 7584);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "ignore client transistion, remaining in workout type: %ld", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v17 = *(_QWORD *)(a1 + 7584);
      v30 = 134217984;
      v31 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "ignore client transistion, remaining in workout type: %ld", &v30);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onDidSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

void sub_1006C6F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1006C6B90(a1 - 120, a2, a3);
}

uint64_t sub_1006C6FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did manual pause workout session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Did manual pause workout session", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onWorkoutSessionManualPause(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v7 = *(_QWORD *)(a1 + 10208);
  if (v7)
    sub_1010A876C(v7, *(double *)(a2 + 24));
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  return sub_1006C63AC(a1, *(double *)(a2 + 8));
}

uint64_t sub_1006C717C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1006C6FA4(a1 - 120, a2, a3);
}

id sub_1006C7184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  _OWORD v17[10];
  uint64_t v18;
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did manual resume workout session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Did manual resume workout session", v16, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onWorkoutSessionManualResume(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  v7 = *(_QWORD *)(a1 + 10208);
  if (v7)
    sub_1010A8A38(v7, *(double *)(a2 + 24));
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  v8 = *(_OWORD *)(a2 + 208);
  v17[8] = *(_OWORD *)(a2 + 192);
  v17[9] = v8;
  v18 = *(_QWORD *)(a2 + 224);
  v9 = *(_OWORD *)(a2 + 144);
  v17[4] = *(_OWORD *)(a2 + 128);
  v17[5] = v9;
  v10 = *(_OWORD *)(a2 + 176);
  v17[6] = *(_OWORD *)(a2 + 160);
  v17[7] = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v17[0] = *(_OWORD *)(a2 + 64);
  v17[1] = v11;
  v12 = *(_OWORD *)(a2 + 112);
  v17[2] = *(_OWORD *)(a2 + 96);
  v17[3] = v12;
  return sub_1006C5D4C(a1, (uint64_t)v17);
}

id sub_1006C738C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1006C7184(a1 - 120, a2, a3);
}

id sub_1006C7394(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v8;
  CFAbsoluteTime Current;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  __int16 v40;
  double v41;
  __int16 v42;
  CFAbsoluteTime v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  id v49;
  __int16 v50;
  double v51;
  __int16 v52;
  CFAbsoluteTime v53;

  sub_1000CED1C(a1 + 136, (uint64_t)buf);
  v8 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:](CMWorkout, "CMWorkoutTypeFromCLMotionActivityType:", *(unsigned int *)buf);
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)buf = 134219008;
    v45 = v11;
    v46 = 2048;
    v47 = v12;
    v48 = 2048;
    v49 = v8;
    v50 = 2048;
    v51 = a4;
    v52 = 2048;
    v53 = Current;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Detected change in activity during workout session, startTime %f, newType, %ld, oldType, %ld, previousEndTime, %f, now, %f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)(a2 + 112);
    v34 = 134219008;
    v35 = v19;
    v36 = 2048;
    v37 = v20;
    v38 = 2048;
    v39 = v8;
    v40 = 2048;
    v41 = a4;
    v42 = 2048;
    v43 = Current;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Detected change in activity during workout session, startTime %f, newType, %ld, oldType, %ld, previousEndTime, %f, now, %f", COERCE_DOUBLE(&v34), 52, (_QWORD)v23, *((double *)&v23 + 1), *(double *)&v24);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateMediator::onWorkoutSessionDetectedChangeInActivity(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionOverview &, CFAbsoluteTime)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  sub_1006C3488(a1, a2, a3);
  sub_1006C197C(a1, a2);
  sub_1006C63AC(a1, a4);
  v13 = *(_OWORD *)(a2 + 208);
  v31 = *(_OWORD *)(a2 + 192);
  v32 = v13;
  v33 = *(_QWORD *)(a2 + 224);
  v14 = *(_OWORD *)(a2 + 144);
  v27 = *(_OWORD *)(a2 + 128);
  v28 = v14;
  v15 = *(_OWORD *)(a2 + 176);
  v29 = *(_OWORD *)(a2 + 160);
  v30 = v15;
  v16 = *(_OWORD *)(a2 + 80);
  v23 = *(_OWORD *)(a2 + 64);
  v24 = v16;
  v17 = *(_OWORD *)(a2 + 112);
  v25 = *(_OWORD *)(a2 + 96);
  v26 = v17;
  return sub_1006C5D4C(a1, (uint64_t)&v23);
}

id sub_1006C764C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1006C7394(a1 - 120, a2, a3, a4);
}

uint64_t sub_1006C7654(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  v2 = result;
  if (a2)
  {
    if (*(int *)(result + 8320) <= 0)
    {
      sub_100263E50((uint64_t)v6);
      sub_100263F7C(&v7, (uint64_t)"Workout Series Predictor", 24);
      std::stringbuf::str(__p, v8);
      sub_10002B684(v2 + 8312, (uint64_t *)__p);
      if (v5 < 0)
        operator delete(__p[0]);
      *(_QWORD *)((char *)v6
      v7 = v3;
      if (v9 < 0)
        operator delete((void *)v8[8]);
      std::streambuf::~streambuf(v8);
      return std::ios::~ios(&v10);
    }
  }
  else if (*(int *)(result + 8320) >= 1)
  {
    return sub_100E3E6F0(result + 8312);
  }
  return result;
}

void sub_1006C7768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C7794(uint64_t a1, int a2)
{
  return sub_1006C7654(a1 - 120, a2);
}

uint64_t sub_1006C779C(uint64_t result, uint64_t a2)
{
  switch(*(_QWORD *)(a2 + 16))
  {
    case 0:
      *(_QWORD *)(result + 8952) = 0;
      *(_QWORD *)(result + 9008) = 0;
      goto LABEL_4;
    case 1:
    case 0xALL:
      *(_BYTE *)(result + 10320) = 0;
      break;
    case 4:
      ++*(_DWORD *)(result + 8952);
      *(_QWORD *)(result + 9008) = *(_QWORD *)(a2 + 24);
      break;
    case 8:
LABEL_4:
      *(_BYTE *)(result + 10320) = 1;
      break;
    case 0xCLL:
      ++*(_DWORD *)(result + 8956);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006C780C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = sub_1001FD94C();
  v7 = *(_QWORD *)(a2 + 112);
  sub_1005282E8(v3, "kMostRecentWorkoutEventWorkoutType", &v7);
  v4 = sub_1001FD94C();
  v7 = *(_QWORD *)(a2 + 120);
  sub_1005282E8(v4, "kMostRecentWorkoutEventLocationType", &v7);
  v5 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
}

uint64_t sub_1006C7878(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1006D8A00(result);
    operator delete();
  }
  return result;
}

void sub_1006C78B4(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  CFAbsoluteTime Current;
  int8x16_t v22;

  v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  v22 = vextq_s8(v4, v4, 4uLL);
  v8 = *(float32x4_t *)(a2 + 5);
  v5 = a2[7];
  sub_10012C97C((float32x4_t *)&v22, v8);
  v18[0] = v22;
  v18[1] = v8;
  v6 = *a2;
  v19 = v5;
  v20 = v6;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100DD8BA0((_QWORD *)(a1 + 6624), (uint64_t)v18);
  v7 = *(_QWORD *)(a1 + 8248);
  if (v7)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0x80000000800000;
    v13 = 0;
    v14 = 0;
    v15 = 0x80000000800000;
    v16 = 0x80000000800000;
    v17 = -8388609;
    if (sub_1011BFBBC(v7, (float *)v18, (uint64_t)v9))
    {
      sub_1006C799C(a1 + 5568, (uint64_t)v9);
      sub_1006C799C(a1 + 2920, (uint64_t)v9);
    }
  }
}

void sub_1006C799C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  __int128 v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;

  v19 = *(double *)a2;
  v20 = *(_OWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 32);
  v23 = v3;
  v24 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v4 + 48))(v4, &v19);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(a1 + 48) - 1;
    v7 = *(void ***)(a1 + 24);
    v8 = *((double *)v7[v6 / 0x38] + 9 * (v6 % 0x38));
    if (v8 > v19)
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v10 = v9 - (_QWORD)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          v11 = *(_QWORD *)(a1 + 32);
          v7 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v7;
          v10 = v11 - (_QWORD)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        v12 = 28;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v30 = v19;
            v31 = 2048;
            v32 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v25 = 134218240;
            v26 = v19;
            v27 = 2048;
            v28 = v8;
            LODWORD(v18) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v25), v18);
            v17 = (uint8_t *)v16;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutPredictorTurnDetector::Turn>::add(const T &) [T = CLWorkoutPredictorTurnDetector::Turn]", "%s\n", v16);
            if (v17 != buf)
              free(v17);
          }
          goto LABEL_17;
        }
        v12 = 56;
      }
      *(_QWORD *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1006D8B84((_QWORD *)(a1 + 16), (uint64_t)&v19);
  v14 = v21;
  *(double *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 120) = v14;
  v15 = v23;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 160) = v24;
}

uint64_t sub_1006C7CA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  NSObject *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t result;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  _BYTE v33[24];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint8_t buf[4];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  double v58;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v10 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349824;
    v52 = a2;
    v53 = 2050;
    v54 = a3;
    v55 = 2050;
    v56 = a4;
    v57 = 2050;
    v58 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Background Escalation Manager, ActivityAction : %{public}ld, ActivityReason : %{public}ld, workoutType : %{public}ld, startTime : %{public}f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    *(_DWORD *)v31 = 134349824;
    *(_QWORD *)&v31[4] = a2;
    *(_WORD *)&v31[12] = 2050;
    *(_QWORD *)&v31[14] = a3;
    *(_WORD *)&v31[22] = 2050;
    v32 = a4;
    *(_WORD *)v33 = 2050;
    *(double *)&v33[2] = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Background Escalation Manager, ActivityAction : %{public}ld, ActivityReason : %{public}ld, workoutType : %{public}ld, startTime : %{public}f", v31, 42);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onBackgroundEscalationManagerUpdate(CFAbsoluteTime, CMActivityAction, CMActivityReason, CMWorkoutType)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  v50 = 0;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  *(double *)v31 = a5;
  *(_QWORD *)&v31[8] = 0;
  *(_QWORD *)&v31[16] = a2;
  v32 = a3;
  *(_QWORD *)v33 = a4;
  __asm { FMOV            V0.2D, #-1.0 }
  v26 = _Q0;
  *(_OWORD *)&v33[8] = _Q0;
  if (a2 == 1)
  {
    sub_1006C4314((uint64_t)a1);
    v16 = a1[826];
    v18 = *(_QWORD *)(v16 + 8);
    v17 = *(_QWORD *)(v16 + 16);
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0;
    *(double *)v31 = a5;
    *(_OWORD *)&v31[8] = xmmword_101B9ACD0;
    v32 = a3;
    *(_QWORD *)v33 = a4;
    *(_QWORD *)&v33[8] = v18;
    *(_QWORD *)&v33[16] = v17;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v19 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349312;
      v52 = v18;
      v53 = 2050;
      v54 = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Background Escalation Manager, Appending to ActivityAction : recoveryStart : %{public}f, recoveryEnd : %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v27 = 134349312;
      v28 = v18;
      v29 = 2050;
      v30 = v17;
      LODWORD(v25) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Background Escalation Manager, Appending to ActivityAction : recoveryStart : %{public}f, recoveryEnd : %{public}f", &v27, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onBackgroundEscalationManagerUpdate(CFAbsoluteTime, CMActivityAction, CMActivityReason, CMWorkoutType)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  else if (!a2)
  {
    sub_1006C460C((uint64_t)a1);
  }
  *(_DWORD *)buf = 4;
  result = (*(uint64_t (**)(_QWORD *, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, buf, v31, 1, 0xFFFFFFFFLL, 0);
  if (a2 == 1)
    *(_OWORD *)(a1[826] + 8) = v26;
  return result;
}

void sub_1006C811C(uint64_t a1, int a2, unsigned __int8 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  const __CFString *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint8_t *v54;
  int v55;
  int v56;
  const char *v57;
  uint8_t *v58;
  void *__p[2];
  char v60;
  int v61;
  int v62;
  __int16 v63;
  int v64;
  uint8_t buf[16];
  __int128 v66;
  __int128 v67;
  _BYTE v68[184];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[14];
  uint64_t v76;
  _OWORD v77[14];
  uint64_t v78;

  switch(a2)
  {
    case 0:
      uuid_copy(a3 + 96, (const unsigned __int8 *)(a1 + 9712));
      v5 = *((_OWORD *)a3 + 13);
      *(_OWORD *)&v68[144] = *((_OWORD *)a3 + 12);
      *(_OWORD *)&v68[160] = v5;
      *(_QWORD *)&v68[176] = *((_QWORD *)a3 + 28);
      v6 = *((_OWORD *)a3 + 9);
      *(_OWORD *)&v68[80] = *((_OWORD *)a3 + 8);
      *(_OWORD *)&v68[96] = v6;
      v7 = *((_OWORD *)a3 + 11);
      *(_OWORD *)&v68[112] = *((_OWORD *)a3 + 10);
      *(_OWORD *)&v68[128] = v7;
      v8 = *((_OWORD *)a3 + 5);
      *(_OWORD *)&v68[16] = *((_OWORD *)a3 + 4);
      *(_OWORD *)&v68[32] = v8;
      v9 = *((_OWORD *)a3 + 7);
      *(_OWORD *)&v68[48] = *((_OWORD *)a3 + 6);
      *(_OWORD *)&v68[64] = v9;
      v10 = *((_OWORD *)a3 + 1);
      *(_OWORD *)buf = *(_OWORD *)a3;
      v66 = v10;
      v11 = *((_OWORD *)a3 + 3);
      v67 = *((_OWORD *)a3 + 2);
      *(_OWORD *)v68 = v11;
      v12 = (id)sub_100F72B18((uint64_t)buf);
      if ((_DWORD)v12 == 2)
      {
        sub_100B26CF4(a1 + 136);
        if (*(_QWORD *)&v68[64] == 37 || *(_QWORD *)&v68[64] == 23)
          v12 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 10224) + 8), 1);
      }
      else if ((_DWORD)v12 == 1)
      {
        sub_100B26CE8(a1 + 136, (int)+[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", *(_QWORD *)&v68[64]), &v68[16]);
        if (*(_QWORD *)&v68[64] == 37 || *(_QWORD *)&v68[64] == 23)
          v12 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 10224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 10224) + 8), 1, 0);
      }
      *(_QWORD *)(a1 + 9704) = *(_QWORD *)&v68[176];
      v39 = *(_OWORD *)&v68[160];
      *(_OWORD *)(a1 + 9672) = *(_OWORD *)&v68[144];
      *(_OWORD *)(a1 + 9688) = v39;
      v40 = *(_OWORD *)&v68[96];
      *(_OWORD *)(a1 + 9608) = *(_OWORD *)&v68[80];
      *(_OWORD *)(a1 + 9624) = v40;
      v41 = *(_OWORD *)&v68[128];
      *(_OWORD *)(a1 + 9640) = *(_OWORD *)&v68[112];
      *(_OWORD *)(a1 + 9656) = v41;
      v42 = *(_OWORD *)&v68[32];
      *(_OWORD *)(a1 + 9544) = *(_OWORD *)&v68[16];
      *(_OWORD *)(a1 + 9560) = v42;
      v43 = *(_OWORD *)&v68[64];
      *(_OWORD *)(a1 + 9576) = *(_OWORD *)&v68[48];
      *(_OWORD *)(a1 + 9592) = v43;
      v44 = v66;
      *(_OWORD *)(a1 + 9480) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 9496) = v44;
      v45 = *(_OWORD *)v68;
      *(_OWORD *)(a1 + 9512) = v67;
      *(_OWORD *)(a1 + 9528) = v45;
      v46 = v66;
      if (!(_QWORD)v66)
      {
        v77[11] = *(_OWORD *)&v68[128];
        v77[12] = *(_OWORD *)&v68[144];
        v77[13] = *(_OWORD *)&v68[160];
        v77[7] = *(_OWORD *)&v68[64];
        v77[8] = *(_OWORD *)&v68[80];
        v77[9] = *(_OWORD *)&v68[96];
        v77[10] = *(_OWORD *)&v68[112];
        v77[3] = *(_OWORD *)v68;
        v77[4] = *(_OWORD *)&v68[16];
        v77[5] = *(_OWORD *)&v68[32];
        v77[6] = *(_OWORD *)&v68[48];
        v77[0] = *(_OWORD *)buf;
        v77[1] = v66;
        v78 = *(_QWORD *)&v68[176];
        v77[2] = v67;
        sub_1006C780C((uint64_t)v12, (uint64_t)v77);
        sub_1006C4314(a1);
        v46 = v66;
      }
      if (v46 <= 1)
        sub_100EE2478(*(_QWORD *)(a1 + 6608), v46);
      v75[11] = *(_OWORD *)&v68[128];
      v75[12] = *(_OWORD *)&v68[144];
      v75[13] = *(_OWORD *)&v68[160];
      v75[7] = *(_OWORD *)&v68[64];
      v75[8] = *(_OWORD *)&v68[80];
      v75[9] = *(_OWORD *)&v68[96];
      v75[10] = *(_OWORD *)&v68[112];
      v75[3] = *(_OWORD *)v68;
      v75[4] = *(_OWORD *)&v68[16];
      v75[5] = *(_OWORD *)&v68[32];
      v75[6] = *(_OWORD *)&v68[48];
      v75[0] = *(_OWORD *)buf;
      v75[1] = v66;
      v76 = *(_QWORD *)&v68[176];
      v75[2] = v67;
      sub_1006C779C(a1, (uint64_t)v75);
      sub_1006C197C(a1, (uint64_t)buf);
      sub_1006C2514(a1, (uint64_t)buf);
      sub_1004C2EC4((int64x2_t *)(a1 + 8968), (double *)buf);
      return;
    case 2:
      if (*a3)
      {
        if (*(int *)(a1 + 8272) <= 0)
        {
          sub_100263E50((uint64_t)buf);
          v14 = sub_100263F7C(&v66, (uint64_t)"Workout Detected (", 18);
          v15 = (const char *)objc_msgSend(+[CMWorkout workoutName:](CMWorkout, "workoutName:", *((_QWORD *)a3 + 1)), "UTF8String");
          v16 = strlen(v15);
          v17 = sub_100263F7C(v14, (uint64_t)v15, v16);
          sub_100263F7C(v17, (uint64_t)")", 1);
          std::stringbuf::str(__p, (char *)&v66 + 8);
          sub_10002B684(a1 + 8264, (uint64_t *)__p);
          if (v60 < 0)
            operator delete(__p[0]);
          *(_QWORD *)&v66 = v18;
          if ((v68[63] & 0x80000000) != 0)
            operator delete(*(void **)&v68[40]);
          std::streambuf::~streambuf((char *)&v66 + 8);
          std::ios::~ios(&v68[80]);
        }
      }
      else if (*(int *)(a1 + 8272) >= 1)
      {
        sub_100E3E6F0(a1 + 8264);
      }
      return;
    case 3:
      sub_1006C2EB4(a1, *(_WORD *)a3);
      return;
    case 5:
      v19 = *((_QWORD *)a3 + 1);
      if (v19 > 2)
      {
        if (v19 == 3)
        {
          v20 = *(_QWORD **)(a1 + 8360);
          v21 = CFSTR("cycling.falsePositive");
          v22 = CFSTR("cycling.total");
          goto LABEL_53;
        }
        if (v19 == 14)
        {
          v20 = *(_QWORD **)(a1 + 8360);
          v21 = CFSTR("other.falsePositive");
          v22 = CFSTR("other.total");
          goto LABEL_53;
        }
      }
      else
      {
        if (v19 == 1)
        {
          v20 = *(_QWORD **)(a1 + 8360);
          v21 = CFSTR("walk.falsePositive");
          v22 = CFSTR("walk.total");
          goto LABEL_53;
        }
        if (v19 == 2)
        {
          v20 = *(_QWORD **)(a1 + 8360);
          v21 = CFSTR("run.falsePositive");
          v22 = CFSTR("run.total");
LABEL_53:
          if (*a3)
            v47 = (uint64_t)v21;
          else
            v47 = (uint64_t)v22;
          sub_100793B2C(v20, v47, 1);
          return;
        }
      }
      v48 = *(_QWORD **)(a1 + 8360);
      if (*a3)
        v49 = CFSTR("unsupported.falsePositive");
      else
        v49 = CFSTR("unsupported.total");
      sub_100793B2C(v48, (uint64_t)v49, 1);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v50 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
      {
        v51 = *((_QWORD *)a3 + 1);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Unsupported escalation type reported for metrics, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v52 = *((_QWORD *)a3 + 1);
        v61 = 67109120;
        v62 = v52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Unsupported escalation type reported for metrics, %d", &v61);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::onWorkoutPredictorUpdate(CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      return;
    case 6:
      v23 = sub_100BFA9D4();
      sub_100BFC5AC(v23, *(_QWORD *)a3, *((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2));
      return;
    case 7:
      *(_DWORD *)buf = *(_DWORD *)a3;
      *(_DWORD *)&buf[4] = *((_DWORD *)a3 + 1);
      v13 = sub_1001FBB04(0);
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)(v13 + 96) + 24))(v13 + 96, buf);
      return;
    case 9:
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v24 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *a3;
        v26 = a3[1];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v25;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLAS,kNotificationGPSActivationEvent,shouldActivate,%d,isTypeIntermittentGps,%d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v55 = *a3;
        v56 = a3[1];
        v61 = 67109376;
        v62 = v55;
        v63 = 1024;
        v64 = v56;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "CLAS,kNotificationGPSActivationEvent,shouldActivate,%d,isTypeIntermittentGps,%d", &v61, 14);
        v58 = (uint8_t *)v57;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onWorkoutPredictorUpdate(CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)", "%s\n", v57);
        if (v58 != buf)
          free(v58);
      }
      if (a3[1])
      {
        v27 = *(_QWORD *)(a1 + 10520);
        v29 = *(_QWORD *)(v27 + 8);
        v28 = *(void **)(v27 + 16);
        v30 = a1 + 10328;
        if (*a3)
        {
          objc_msgSend(v28, "register:forNotification:registrationInfo:", v29, 5, 0);
          sub_100BCEF8C(v30, 1);
        }
        else
        {
          objc_msgSend(v28, "unregister:forNotification:", v29, 5);
          sub_100BCEF8C(v30, -1);
        }
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 10288);
        v38 = *(_QWORD *)(v36 + 8);
        v37 = *(void **)(v36 + 16);
        if (*a3)
          objc_msgSend(v37, "register:forNotification:registrationInfo:", v38, 2, 0);
        else
          objc_msgSend(v37, "unregister:forNotification:", v38, 2);
      }
      return;
    case 10:
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      v70 = 0u;
      v69 = 0u;
      memset(&v68[8], 0, 176);
      v31 = *((_OWORD *)a3 + 1);
      v32 = *((_OWORD *)a3 + 2);
      *(_OWORD *)buf = *(_OWORD *)a3;
      v66 = v31;
      v74 = 0;
      v67 = v32;
      *(_QWORD *)v68 = *((_QWORD *)a3 + 6);
      if (*((_QWORD *)a3 + 1) != 1)
        goto LABEL_71;
      v33 = *((_QWORD *)a3 + 2);
      if (*((_QWORD *)a3 + 4))
      {
        if (!v33)
        {
          sub_1006C460C(a1);
          goto LABEL_71;
        }
      }
      else if (v33 != 1)
      {
        goto LABEL_71;
      }
      sub_1006C4314(a1);
LABEL_71:
      v61 = 4;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v61, buf, 1, 0xFFFFFFFFLL, 0);
      return;
    case 11:
      *(_DWORD *)buf = *(_DWORD *)a3;
      *(_DWORD *)&buf[4] = *((_DWORD *)a3 + 1);
      v34 = sub_1001FBB04(0);
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)(v34 + 96) + 32))(v34 + 96, buf);
      return;
    case 12:
      v61 = 5;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      v74 = 0;
      v70 = 0u;
      v69 = 0u;
      memset(&v68[8], 0, 176);
      v35 = *((_OWORD *)a3 + 1);
      *(_OWORD *)buf = *(_OWORD *)a3;
      v66 = v35;
      v67 = *((_OWORD *)a3 + 2);
      *(_QWORD *)v68 = *((_QWORD *)a3 + 6);
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v61, buf, 1, 0xFFFFFFFFLL, 0);
      return;
    default:
      return;
  }
}

void sub_1006C8B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1006C8BFC(__n128 *a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  __n128 v16;
  int v17;
  unint64_t v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  double v24;

  v16 = *a2;
  v3 = a1[8].n128_u64[1];
  if (v3)
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v3 + 48))(v3, &v16);
  v4 = a1[3].n128_u64[1];
  if (v4)
  {
    v5 = v4 + a1[3].n128_u64[0] - 1;
    v6 = (void **)a1[1].n128_u64[1];
    v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v16.n128_f64[0])
    {
      v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[2].n128_u64[0];
          v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v22 = v16.n128_u64[0];
            v23 = 2048;
            v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v17 = 134218240;
            v18 = v16.n128_u64[0];
            v19 = 2048;
            v20 = v7;
            LODWORD(v15) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v17), v15);
            v14 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutPredictorWatchPressure>::add(const T &) [T = CLWorkoutPredictorWatchPressure]", "%s\n", v13);
            if (v14 != buf)
              free(v14);
          }
          goto LABEL_17;
        }
        v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1006D8F5C((__n128 *)a1[1].n128_u64, &v16);
  a1[6] = v16;
}

void sub_1006C8E98(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __int128 v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  double v28;

  v3 = a2[1];
  v18 = *a2;
  v19 = v3;
  v20 = *((_DWORD *)a2 + 8);
  v4 = *(_QWORD *)(a1 + 160);
  if (v4)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 48))(v4, &v18);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(a1 + 48) - 1;
    v7 = *(void ***)(a1 + 24);
    v8 = *((double *)v7[v6 / 0x66] + 5 * (v6 % 0x66));
    if (v8 > *(double *)&v18)
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v10 = v9 - (_QWORD)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          v11 = *(_QWORD *)(a1 + 32);
          v7 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v7;
          v10 = v11 - (_QWORD)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        v12 = 51;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v26 = v18;
            v27 = 2048;
            v28 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v21 = 134218240;
            v22 = v18;
            v23 = 2048;
            v24 = v8;
            LODWORD(v17) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v21), v17);
            v16 = (uint8_t *)v15;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLMotionCoprocessorInterface::Tier1CyclingFeatures>::add(const T &) [T = CLMotionCoprocessorInterface::Tier1CyclingFeatures]", "%s\n", v15);
            if (v16 != buf)
              free(v16);
          }
          goto LABEL_17;
        }
        v12 = 102;
      }
      *(_QWORD *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1006D92F8((_QWORD *)(a1 + 16), (uint64_t)&v18);
  v14 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v14;
  *(_DWORD *)(a1 + 128) = v20;
}

float *sub_1006C915C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  float *result;
  unsigned int v8;
  float v9;
  float v10;
  int v11;
  double v12;
  double v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  int v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v5 = *(double *)a2;
    v6 = *(float *)(a2 + 16);
    *(_DWORD *)buf = 134218240;
    v22 = v5;
    v23 = 2048;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Stair escalation event, timestamp, %f, stair metric, %.3f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v12 = *(double *)a2;
    v13 = *(float *)(a2 + 16);
    v17 = 134218240;
    v18 = v12;
    v19 = 2048;
    v20 = v13;
    LODWORD(v16) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Stair escalation event, timestamp, %f, stair metric, %.3f", COERCE_DOUBLE(&v17), v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onSPUStairsEscalationEvent(const StairsEscalationEvent *)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  result = *(float **)(a1 + 6608);
  v8 = *((_DWORD *)result + 54) - 1;
  if (!*(_BYTE *)(a2 + 20))
  {
    if (v8 > 1)
      return result;
    goto LABEL_10;
  }
  if (v8 < 2)
  {
LABEL_10:
    v9 = *(float *)(a2 + 16);
    v10 = *(float *)(a2 + 24);
    v11 = 0;
    return sub_100EE2BB4(result, v11, v9, v10);
  }
  sub_1001FCBC8((uint64_t)result, 1, *(double *)a2);
  result = *(float **)(a1 + 6608);
  v9 = *(float *)(a2 + 16);
  v10 = *(float *)(a2 + 24);
  v11 = 1;
  return sub_100EE2BB4(result, v11, v9, v10);
}

void sub_1006C938C(uint64_t a1, uint64_t a2, int *a3, __int128 *a4)
{
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (*a3 == 4 || *a3 == 2)
  {
    sub_1006C95A0(a1 + 5216, a4);
    sub_100DDBE78(a1 + 6624, a4);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67109120;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "MotionStateMediator received unhandled odometer notification, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v10 = *a3;
      v13[0] = 67109120;
      v13[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "MotionStateMediator received unhandled odometer notification, %d", v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_1006C95A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  const char *v25;
  uint8_t *v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  double v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  double v47;

  v3 = a2[9];
  v36 = a2[8];
  v37 = v3;
  v4 = a2[11];
  v38 = a2[10];
  v39 = v4;
  v5 = a2[5];
  v32 = a2[4];
  v33 = v5;
  v6 = a2[7];
  v34 = a2[6];
  v35 = v6;
  v7 = a2[1];
  v28 = *a2;
  v29 = v7;
  v8 = a2[3];
  v30 = a2[2];
  v31 = v8;
  v9 = *(_QWORD *)(a1 + 312);
  if (v9)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 48))(v9, &v28);
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
  {
    v11 = v10 + *(_QWORD *)(a1 + 48) - 1;
    v12 = *(void ***)(a1 + 24);
    v13 = *((double *)v12[v11 / 0x15] + 24 * (v11 % 0x15));
    if (v13 > *(double *)&v28)
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v15 = v14 - (_QWORD)v12;
      if (v15 >= 0x11)
      {
        do
        {
          operator delete(*v12);
          v16 = *(_QWORD *)(a1 + 32);
          v12 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v12;
          v15 = v16 - (_QWORD)v12;
        }
        while (v15 > 0x10);
      }
      if (v15 >> 3 == 1)
      {
        v17 = 10;
      }
      else
      {
        if (v15 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v18 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v45 = v28;
            v46 = 2048;
            v47 = v13;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v40 = 134218240;
            v41 = v28;
            v42 = 2048;
            v43 = v13;
            LODWORD(v27) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v40), v27);
            v26 = (uint8_t *)v25;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOdometerEntry>::add(const T &) [T = CLOdometerEntry]", "%s\n", v25);
            if (v26 != buf)
              free(v26);
          }
          goto LABEL_17;
        }
        v17 = 21;
      }
      *(_QWORD *)(a1 + 48) = v17;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1006D96C0((_QWORD *)(a1 + 16), &v28);
  v19 = v37;
  *(_OWORD *)(a1 + 224) = v36;
  *(_OWORD *)(a1 + 240) = v19;
  v20 = v39;
  *(_OWORD *)(a1 + 256) = v38;
  *(_OWORD *)(a1 + 272) = v20;
  v21 = v33;
  *(_OWORD *)(a1 + 160) = v32;
  *(_OWORD *)(a1 + 176) = v21;
  v22 = v35;
  *(_OWORD *)(a1 + 192) = v34;
  *(_OWORD *)(a1 + 208) = v22;
  v23 = v29;
  *(_OWORD *)(a1 + 96) = v28;
  *(_OWORD *)(a1 + 112) = v23;
  v24 = v31;
  *(_OWORD *)(a1 + 128) = v30;
  *(_OWORD *)(a1 + 144) = v24;
}

void sub_1006C98B0(uint64_t a1, int a2, _DWORD *a3, __n128 *__src)
{
  int v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  NSObject *v9;
  int v10;
  __n128 v11;
  __n128 v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _OWORD v16[4];
  unint64_t v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;

  switch(*a3)
  {
    case 2:
      v5 = *(_DWORD *)(a1 + 376);
      v7 = __src[1];
      v6 = __src[2];
      v8 = *__src;
      *(__n128 *)(a1 + 380) = *(__n128 *)((char *)__src + 44);
      *(__n128 *)(a1 + 336) = v8;
      *(__n128 *)(a1 + 352) = v7;
      *(__n128 *)(a1 + 368) = v6;
      memmove((void *)(a1 + 6984), __src, 0x3CuLL);
      sub_100EE27C4(*(_QWORD *)(a1 + 6608), (__int128 *)(a1 + 336));
      if (v5 != *(_DWORD *)(a1 + 376))
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v9 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_DWORD *)(a1 + 376);
          *(_DWORD *)buf = 67109376;
          v22 = v5;
          v23 = 1024;
          v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Workout settings, updating due to condition change from %d to %d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214D4A8);
          v13 = *(_DWORD *)(a1 + 376);
          v18[0] = 67109376;
          v18[1] = v5;
          v19 = 1024;
          v20 = v13;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout settings, updating due to condition change from %d to %d", v18, 14);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onCalorimetryNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        sub_1006C3954(a1);
      }
      break;
    case 4:
      sub_1006C9BAC((__n128 *)(a1 + 3592), __src);
      break;
    case 6:
      v11 = __src[3];
      v16[2] = __src[2];
      v16[3] = v11;
      v17 = __src[4].n128_u64[0];
      v12 = __src[1];
      v16[0] = *__src;
      v16[1] = v12;
      sub_100E58930((id)(a1 + 8376), (uint64_t)v16);
      break;
    case 7:
      sub_100DDCDA4(a1 + 6624, (uint64_t)__src);
      break;
    default:
      return;
  }
}

void sub_1006C9BAC(__n128 *a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  __n128 v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  __int16 v20;
  double v21;
  uint8_t buf[4];
  unint64_t v23;
  __int16 v24;
  double v25;

  v16 = *a2;
  v17 = a2[1].n128_u64[0];
  v3 = a1[9].n128_u64[0];
  if (v3)
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v3 + 48))(v3, &v16);
  v4 = a1[3].n128_u64[1];
  if (v4)
  {
    v5 = v4 + a1[3].n128_u64[0] - 1;
    v6 = (void **)a1[1].n128_u64[1];
    v7 = *((double *)v6[v5 / 0xAA] + 3 * (v5 % 0xAA) + 1);
    if (v7 > v16.n128_f64[1])
    {
      v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[2].n128_u64[0];
          v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 85;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v23 = v16.n128_u64[1];
            v24 = 2048;
            v25 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v18 = 134218240;
            v19 = v16.n128_u64[1];
            v20 = 2048;
            v21 = v7;
            LODWORD(v15) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v18), v15);
            v14 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLExerciseMinuteData>::add(const T &) [T = CLExerciseMinuteData]", "%s\n", v13);
            if (v14 != buf)
              free(v14);
          }
          goto LABEL_17;
        }
        v11 = 170;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1006D9AB0((__n128 *)a1[1].n128_u64, &v16);
  a1[6] = v16;
  a1[7].n128_u64[0] = v17;
}

void sub_1006C9E68(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  if (*a3)
  {
    if (*a3 == 1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v6 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        v7 = *a4;
        *(_DWORD *)buf = 67240192;
        v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Watch wrist state updated,onwrist,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214D488);
        v11 = *a4;
        v18 = 67240192;
        v19 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Watch wrist state updated,onwrist,%{public}d", &v18, 8);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      sub_100DD308C(a1 + 6624, a4);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v10 = *a4;
      v9 = a4[1];
      *(_DWORD *)buf = 67240448;
      v23 = v9;
      v24 = 1026;
      v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Watch orientation settings updated,crown,%{public}d,wrist,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v15 = *a4;
      v14 = a4[1];
      v18 = 67240448;
      v19 = v14;
      v20 = 1026;
      v21 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Watch orientation settings updated,crown,%{public}d,wrist,%{public}d", &v18, 14);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100DDBE58(a1 + 6624, a4);
  }
}

id sub_1006CA1B8(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  NSObject *v6;
  int v7;
  id result;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  NSString *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[8];
  uint64_t v27;
  void (*v28)(uint64_t, void *);
  void *v29;
  uint64_t v30;

  if (*a3 == 15)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(unsigned __int8 *)(a1 + 10192);
      v11 = *a4;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v27) = 1026;
      *(_DWORD *)((char *)&v27 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "System Power Save Mode changed, was, %{public}d, now, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v18 = *(unsigned __int8 *)(a1 + 10192);
      v19 = *a4;
      v22 = 67240448;
      v23 = v18;
      v24 = 1026;
      v25 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "System Power Save Mode changed, was, %{public}d, now, %{public}d", &v22, 14);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    *(_BYTE *)(a1 + 10192) = *a4;
    v12 = sub_1001FBB04(0);
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v12 + 72))(v12, *a4 == 0);
    sub_1006C3954(a1);
    v13 = *(void **)(a1 + 10304);
    v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle");
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v27 = 3221225472;
    v28 = sub_10020E2F8;
    v29 = &unk_10214D390;
    v30 = a1;
    return objc_msgSend(v13, "getAuthorizationContextOfNonZonalClient:withReply:", v14, buf);
  }
  else
  {
    if (*a3 != 7)
      sub_10190594C();
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v7 = a4[9];
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Battery connected state %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v15 = a4[9];
      v22 = 67240192;
      v23 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Battery connected state %{public}d", &v22, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100DD3068(a1 + 6624, (uint64_t)a4);
    result = *(id *)(a1 + 8368);
    if (result)
      return (id)sub_100CAD550((uint64_t)result, (uint64_t)a4);
  }
  return result;
}

void sub_1006CA5B0(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  if (*a3 == 9)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a4 + 40);
      v9 = *(_QWORD *)(a4 + 8);
      v10 = *(_QWORD *)(a4 + 16);
      *(_DWORD *)buf = 134284033;
      v23 = v8;
      v24 = 2049;
      v25 = v9;
      v26 = 2049;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "One second hr, startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214D4A8);
      v11 = *(_QWORD *)(a4 + 40);
      v12 = *(_QWORD *)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      v16 = 134284033;
      v17 = v11;
      v18 = 2049;
      v19 = v12;
      v20 = 2049;
      v21 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "One second hr, startTime,%{private}f,hr,%{private}f,hrConfidence,%{private}f", &v16, 32);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_100EE2A68(a1[826], (_QWORD *)a4);
  }
  else if (*a3 == 6 && !*(_DWORD *)(a4 + 24))
  {
    v6 = *(_QWORD *)(a4 + 8);
    a1[870] = *(_QWORD *)(a4 + 16);
    a1[871] = v6;
  }
}

void sub_1006CA7CC(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  char *v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  dispatch_queue_t *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSString *v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  uint8_t buf[8];
  _BYTE v39[32];

  v6 = (char *)(a1 + 8920);
  switch(*a3)
  {
    case 0:
      v7 = *(unsigned __int8 *)(a1 + 8923);
      if (*((_BYTE *)a4 + 3))
      {
        v8 = 1;
      }
      else
      {
        sub_1006D9E70(a1 + 712);
        sub_1006DA01C(a1 + 1384);
        sub_1006DA1C8(a1 + 2520);
        v8 = *((unsigned __int8 *)a4 + 3);
      }
      v6[3] = v8;
      if (v7 != v8)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v30 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
        {
          v31 = v6[3];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v7;
          *(_WORD *)v39 = 1024;
          *(_DWORD *)&v39[2] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Workout settings, updating due to fitness tracking change from %d to %d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214D4A8);
          v32 = v6[3];
          v35[0] = 67109376;
          v35[1] = v7;
          v36 = 1024;
          v37 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Workout settings, updating due to fitness tracking change from %d to %d", v35, 14);
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        sub_1006C3954(a1);
      }
      break;
    case 1:
      *v6 = *(_BYTE *)a4;
      if (!*(_BYTE *)a4)
      {
        v9 = *(_OWORD *)(a1 + 9640);
        *(_OWORD *)(a1 + 9424) = *(_OWORD *)(a1 + 9656);
        v10 = *(_OWORD *)(a1 + 9688);
        *(_OWORD *)(a1 + 9440) = *(_OWORD *)(a1 + 9672);
        *(_OWORD *)(a1 + 9456) = v10;
        v11 = *(_OWORD *)(a1 + 9576);
        *(_OWORD *)(a1 + 9360) = *(_OWORD *)(a1 + 9592);
        v12 = *(_OWORD *)(a1 + 9624);
        *(_OWORD *)(a1 + 9376) = *(_OWORD *)(a1 + 9608);
        *(_OWORD *)(a1 + 9392) = v12;
        *(_OWORD *)(a1 + 9408) = v9;
        v13 = *(_OWORD *)(a1 + 9512);
        *(_OWORD *)(a1 + 9296) = *(_OWORD *)(a1 + 9528);
        v14 = *(_OWORD *)(a1 + 9560);
        *(_OWORD *)(a1 + 9312) = *(_OWORD *)(a1 + 9544);
        *(_OWORD *)(a1 + 9328) = v14;
        *(_OWORD *)(a1 + 9344) = v11;
        v15 = *(_OWORD *)(a1 + 9496);
        *(_OWORD *)(a1 + 9248) = *(_OWORD *)(a1 + 9480);
        *(_OWORD *)(a1 + 9264) = v15;
        *(_QWORD *)(a1 + 9472) = *(_QWORD *)(a1 + 9704);
        *(_OWORD *)(a1 + 9280) = v13;
      }
      goto LABEL_8;
    case 2:
      *(_BYTE *)(a1 + 8921) = *(_BYTE *)a4;
      if (!*(_BYTE *)a4)
      {
        *(_QWORD *)(a1 + 9240) = *(_QWORD *)(a1 + 9704);
        v16 = *(_OWORD *)(a1 + 9688);
        *(_OWORD *)(a1 + 9208) = *(_OWORD *)(a1 + 9672);
        *(_OWORD *)(a1 + 9224) = v16;
        v17 = *(_OWORD *)(a1 + 9624);
        *(_OWORD *)(a1 + 9144) = *(_OWORD *)(a1 + 9608);
        *(_OWORD *)(a1 + 9160) = v17;
        v18 = *(_OWORD *)(a1 + 9656);
        *(_OWORD *)(a1 + 9176) = *(_OWORD *)(a1 + 9640);
        *(_OWORD *)(a1 + 9192) = v18;
        v19 = *(_OWORD *)(a1 + 9560);
        *(_OWORD *)(a1 + 9080) = *(_OWORD *)(a1 + 9544);
        *(_OWORD *)(a1 + 9096) = v19;
        v20 = *(_OWORD *)(a1 + 9592);
        *(_OWORD *)(a1 + 9112) = *(_OWORD *)(a1 + 9576);
        *(_OWORD *)(a1 + 9128) = v20;
        v21 = *(_OWORD *)(a1 + 9496);
        *(_OWORD *)(a1 + 9016) = *(_OWORD *)(a1 + 9480);
        *(_OWORD *)(a1 + 9032) = v21;
        v22 = *(_OWORD *)(a1 + 9528);
        *(_OWORD *)(a1 + 9048) = *(_OWORD *)(a1 + 9512);
        *(_OWORD *)(a1 + 9064) = v22;
      }
LABEL_8:
      sub_1006C3954(a1);
      v23 = (dispatch_queue_t *)sub_10009EC60();
      sub_100EA5214(v23, *v6, v6[1]);
      break;
    case 4:
      if (*(_DWORD *)(a1 + 8924) != *a4)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214D4A8);
        v24 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(int *)(a1 + 8924);
          v26 = *a4;
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v39 = 2082;
          *(_QWORD *)&v39[2] = "";
          *(_WORD *)&v39[10] = 2050;
          *(_QWORD *)&v39[12] = v25;
          *(_WORD *)&v39[20] = 2050;
          *(_QWORD *)&v39[22] = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Current Activity Move Mode changed\", \"from\":%{public, location:CLFitnessTrackingNotifier_Type::ActivityMoveMode}lld, \"to\":%{public, location:CLFitnessTrackingNotifier_Type::ActivityMoveMode}lld}", buf, 0x26u);
        }
        *(_DWORD *)(a1 + 8924) = *a4;
        v27 = *(void **)(a1 + 10304);
        v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle");
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)v39 = 3221225472;
        *(_QWORD *)&v39[8] = sub_10020E2F8;
        *(_QWORD *)&v39[16] = &unk_10214D390;
        *(_QWORD *)&v39[24] = a1;
        objc_msgSend(v27, "getAuthorizationContextOfNonZonalClient:withReply:", v28, buf);
      }
      break;
    case 5:
      v29 = sub_10009EC60();
      sub_100EA63B4(v29, a4);
      break;
    case 7:
      *(_BYTE *)(a1 + 8922) = *(_BYTE *)a4;
      sub_1006C3954(a1);
      break;
    default:
      return;
  }
}

uint64_t sub_1006CACE4(uint64_t a1)
{
  sub_1006D9E70(a1 + 8);
  sub_1006DA01C(a1 + 680);
  return sub_1006DA1C8(a1 + 1816);
}

void sub_1006CAD14(_BYTE *a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int isTypeIndoorPedestrian;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  _BYTE v40[20];
  __int16 v41;
  int v42;
  __int16 v43;
  _BOOL4 v44;
  __int16 v45;
  int v46;

  v7 = *a3;
  if (*a3)
  {
    if (v7 == 1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v13 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_DWORD *)(a4 + 12);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v40 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "VehicularConfidence,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10214D488);
        v22 = *(_DWORD *)(a4 + 12);
        v27 = 67240192;
        LODWORD(v28) = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "VehicularConfidence,%{public}d", &v27, 8);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      sub_100DD309C((uint64_t)(a1 + 6624), a4);
    }
    else if (v7 == 2)
    {
      sub_101905AC8();
    }
  }
  else if (a1[461])
  {
    v8 = *(_QWORD *)a4;
    v9 = *(unsigned int *)(a4 + 8);
    v10 = *(_DWORD *)(a4 + 12);
    v11 = *(_DWORD *)(a4 + 16);
    if ((CLMotionActivity::isTypePedestrian(v9) & 1) != 0)
      isTypeIndoorPedestrian = 1;
    else
      isTypeIndoorPedestrian = CLMotionActivity::isTypeIndoorPedestrian(v9);
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v20 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)v40 = v8;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = v9;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = v10;
      v41 = 1024;
      v42 = v11;
      v43 = 1024;
      v44 = v9 != 0;
      v45 = 1024;
      v46 = isTypeIndoorPedestrian;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Received observed workout session, startTime, %f, activityType, %d, predictedWorkoutActivityType, %d, hkWorkoutActivityType, %d, isWorkout, %d, isPedestrian, %d", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v27 = 134219264;
      v28 = v8;
      v29 = 1024;
      v30 = v9;
      v31 = 1024;
      v32 = v10;
      v33 = 1024;
      v34 = v11;
      v35 = 1024;
      v36 = v9 != 0;
      v37 = 1024;
      v38 = isTypeIndoorPedestrian;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 1, "Received observed workout session, startTime, %f, activityType, %d, predictedWorkoutActivityType, %d, hkWorkoutActivityType, %d, isWorkout, %d, isPedestrian, %d", COERCE_DOUBLE(&v27), 42);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    if ((_DWORD)v9)
      v21 = isTypeIndoorPedestrian;
    else
      v21 = 0;
    if (v21 == 1)
    {
      buf[0] = 0;
      *(_QWORD *)&v40[4] = 0;
      *(_QWORD *)&v40[12] = 0x10000000000000;
      (*(void (**)(_BYTE *, uint8_t *))(*(_QWORD *)a1 + 208))(a1, buf);
    }
  }
  else
  {
    if (qword_10229FF40 != -1)
      dispatch_once(&qword_10229FF40, &stru_10214DDE0);
    v15 = qword_10229FF48;
    if (os_log_type_enabled((os_log_t)qword_10229FF48, OS_LOG_TYPE_ERROR))
    {
      v16 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v40 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "MotionStateMediator should not be subscribed to notification, %d, when fTriggerIndoorOutdoorOnObservedPedWorkouts is false", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10214DDE0);
      v17 = *a3;
      v27 = 67109120;
      LODWORD(v28) = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF48, 16, "MotionStateMediator should not be subscribed to notification, %d, when fTriggerIndoorOutdoorOnObservedPedWorkouts is false", &v27);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionStateMediator::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

uint64_t sub_1006CB27C()
{
  NSObject *v0;
  uint64_t v1;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v0 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Enabling tier1 cycling features message sending", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Enabling tier1 cycling features message sending", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onTier1CyclingFeaturesActivate()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  v1 = sub_1001FBB04(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 96) + 56))(v1 + 96, 1);
}

uint64_t sub_1006CB418()
{
  NSObject *v0;
  uint64_t v1;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v0 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Disabling tier1 cycling features message sending", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Disabling tier1 cycling features message sending", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onTier1CyclingFeaturesDeactivate()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  v1 = sub_1001FBB04(0);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 96) + 56))(v1 + 96, 0);
}

void sub_1006CB5B4()
{
  operator new();
}

void sub_1006CB660(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1006CB69C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10214ED18;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1006CB770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10214D4C8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1006CB9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3E80);
}

uint64_t sub_1006CB9F8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[102];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1006DA3D4();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A3E81;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1006CBE84(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1006CC104(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214D4C8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214D4C8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1006CC48C(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x158uLL);
  v6[2] = 0;
  *v6 = off_10214EB30;
  v6[1] = 0;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1006CC574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006CC588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[20];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1006CC61C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::listClients() [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::listClients() [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10214D4C8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214D4C8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData>::listClients() [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1006CCBC8(uint64_t a1)
{
  sub_1006DA374(a1);
  operator delete();
}

void sub_1006CCBEC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1006CCC18(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1006CCC44(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1006CCC70(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  char *v7;
  __int128 *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (char *)(v4 + 8 * ((a2[5] + v3) / 0x11));
  }
  else
  {
    v5 = (__int128 *)(*(_QWORD *)(v4 + 8 * (v3 / 0x11)) + 232 * (v3 % 0x11));
    v6 = a2[5] + v3;
    v7 = (char *)(v4 + 8 * (v6 / 0x11));
    v8 = (__int128 *)(*(_QWORD *)v7 + 232 * (v6 % 0x11));
  }
  sub_1006CCD3C((_QWORD *)a1, (char *)(v4 + 8 * (v3 / 0x11)), v5, v7, v8);
  return a1;
}

void sub_1006CCD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006CCD3C(_QWORD *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 2 * (a4 - a2)
       + ((a4 - a2) >> 3)
       + 0x34F72C234F72C235 * (((uint64_t)a5 - *(_QWORD *)a4) >> 3)
       - 0x34F72C234F72C235 * (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return sub_1006CCD9C(a1, a2, a3, v5);
}

_QWORD *sub_1006CCD9C(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 2 * (v9 - v8) + ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1006CCF48(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x11));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 232 * (v11 % 0x11);
  v33 = (_QWORD *)(v8 + 8 * (v11 / 0x11));
  v34 = v14;
  result = sub_100692884(&v33, a4);
  v16 = v34;
  if (v14 != v34)
  {
    v17 = v33;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 3944;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          v20 = *a3;
          v21 = a3[2];
          *(_OWORD *)(v19 + 16) = a3[1];
          *(_OWORD *)(v19 + 32) = v21;
          *(_OWORD *)v19 = v20;
          v22 = a3[3];
          v23 = a3[4];
          v24 = a3[6];
          *(_OWORD *)(v19 + 80) = a3[5];
          *(_OWORD *)(v19 + 96) = v24;
          *(_OWORD *)(v19 + 48) = v22;
          *(_OWORD *)(v19 + 64) = v23;
          v25 = a3[7];
          v26 = a3[8];
          v27 = a3[10];
          *(_OWORD *)(v19 + 144) = a3[9];
          *(_OWORD *)(v19 + 160) = v27;
          *(_OWORD *)(v19 + 112) = v25;
          *(_OWORD *)(v19 + 128) = v26;
          v28 = a3[11];
          v29 = a3[12];
          v30 = a3[13];
          *(_QWORD *)(v19 + 224) = *((_QWORD *)a3 + 28);
          *(_OWORD *)(v19 + 192) = v29;
          *(_OWORD *)(v19 + 208) = v30;
          *(_OWORD *)(v19 + 176) = v28;
          a3 = (__int128 *)((char *)a3 + 232);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)3944)
          {
            v31 = (__int128 *)a2[1];
            ++a2;
            a3 = v31;
          }
          v19 += 232;
        }
        while (v19 != v18);
      }
      a1[5] += 0x34F72C234F72C235 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v32 = v13[1];
      ++v13;
      v14 = v32;
    }
    while (v32 != v16);
  }
  return result;
}

void sub_1006CCF48(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 == 17 * (v5 / 0x11))
    v6 = v5 / 0x11;
  else
    v6 = v5 / 0x11 + 1;
  v7 = a1[4];
  if (v6 >= v7 / 0x11)
    v8 = v7 / 0x11;
  else
    v8 = v6;
  if (v6 <= v7 / 0x11)
  {
    for (a1[4] = v7 - 17 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xF68uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xF68uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 16;
          else
            v64 = 17;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 17 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -17 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xF68uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1006CD480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006CD4F4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  *a1 = off_102187B10;
  v2 = a1 + 192;
  v3 = (_QWORD *)a1[195];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[189];
  if (v5)
  {
    a1[190] = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)a1[184];
  if (v6 == a1 + 181)
  {
    v7 = 4;
    v6 = a1 + 181;
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_13:
  sub_100261F44((uint64_t)(a1 + 179));
  v8 = a1[172];
  a1[172] = 0;
  if (v8)
    sub_1006CD618((uint64_t)(a1 + 172), v8);
  v9 = (uint64_t *)a1[59];
  a1[59] = 0;
  if (v9)
    sub_1006CD660((uint64_t)(a1 + 59), v9);
  v10 = a1[58];
  a1[58] = 0;
  if (v10)
    operator delete();
  v11 = a1[54];
  a1[54] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (uint64_t *)a1[53];
  a1[53] = 0;
  if (v12)
    sub_1006CD6E0((uint64_t)(a1 + 53), v12);
  sub_1006CD764(a1 + 5);
  return a1;
}

void sub_1006CD618(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1006CD660(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (uint64_t *)a2[6];
    if (v3 == a2 + 3)
    {
      v4 = 4;
      v3 = a2 + 3;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = *a2;
    *a2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    operator delete();
  }
}

void sub_1006CD6E0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3 = (uint64_t *)a2[12];
    if (v3 == a2 + 9)
    {
      v4 = 4;
      v3 = a2 + 9;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = *a2;
    *a2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    operator delete();
  }
}

_QWORD *sub_1006CD764(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D4F8;
  v2 = a1 + 32;
  v3 = (_QWORD *)a1[35];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100542DDC(a1 + 2);
  return a1;
}

void sub_1006CD7CC(_QWORD *a1)
{
  sub_1006CD764(a1);
  operator delete();
}

_QWORD *sub_1006CD7F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10214D550;
  sub_1006CDA30(a1 + 402);
  sub_1006CDBD4(a1 + 380);
  sub_1006CDD78(a1 + 361);
  sub_1006CDE04(a1 + 343);
  a1[306] = off_10214D860;
  v2 = a1[342];
  a1[342] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1006CDE90(a1 + 306);
  sub_1006CE638(a1 + 277);
  sub_1006CE7DC(a1 + 256);
  sub_1006CE868(a1 + 227);
  sub_1006CE97C(a1 + 169);
  a1[129] = off_10214DB48;
  v3 = a1[168];
  a1[168] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CF068(a1 + 129);
  sub_1006CFBC4(a1 + 85);
  a1[59] = off_10214DC90;
  v4 = a1[84];
  a1[84] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1006CFDFC(a1 + 59);
  sub_1006D054C(a1 + 1);
  return a1;
}

_QWORD *sub_1006CD91C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214D860;
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1006CDE90(a1);
}

_QWORD *sub_1006CD974(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214DB48;
  v2 = a1[39];
  a1[39] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1006CF068(a1);
}

_QWORD *sub_1006CD9C0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214DC90;
  v2 = a1[25];
  a1[25] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1006CFDFC(a1);
}

void sub_1006CDA0C(_QWORD *a1)
{
  sub_1006CD7F0(a1);
  operator delete();
}

_QWORD *sub_1006CDA30(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D670;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006CDA90(a1);
}

_QWORD *sub_1006CDA90(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D6E0;
  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100427A00(a1 + 2);
  return a1;
}

void sub_1006CDAF8(_QWORD *a1)
{
  sub_1006CDA30(a1);
  operator delete();
}

uint64_t sub_1006CDB1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 192);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006CDB68(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 192);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006CDBB0(_QWORD *a1)
{
  sub_1006CDA90(a1);
  operator delete();
}

_QWORD *sub_1006CDBD4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D710;
  v2 = a1 + 18;
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006CDC34(a1);
}

_QWORD *sub_1006CDC34(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D780;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1004A4854(a1 + 2);
  return a1;
}

void sub_1006CDC9C(_QWORD *a1)
{
  sub_1006CDBD4(a1);
  operator delete();
}

uint64_t sub_1006CDCC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 168);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006CDD0C(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 168);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006CDD54(_QWORD *a1)
{
  sub_1006CDC34(a1);
  operator delete();
}

_QWORD *sub_1006CDD78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D7B0;
  v2 = a1 + 15;
  v3 = (_QWORD *)a1[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_10047F660(a1 + 2);
  return a1;
}

void sub_1006CDDE0(_QWORD *a1)
{
  sub_1006CDD78(a1);
  operator delete();
}

_QWORD *sub_1006CDE04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D808;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1004A4854(a1 + 2);
  return a1;
}

void sub_1006CDE6C(_QWORD *a1)
{
  sub_1006CDE04(a1);
  operator delete();
}

_QWORD *sub_1006CDE90(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D8D8;
  v2 = a1 + 31;
  v3 = (_QWORD *)a1[34];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_10047F6F4(a1 + 2);
  return a1;
}

void sub_1006CDEF8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214D860;
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1006CDE90(a1);
  operator delete();
}

uint64_t sub_1006CDF54(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "Swim";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "Swim";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "activate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLSwimEntry>::enable() const [Data_T = CLSwimEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 288) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), 0, 0);
  return 1;
}

uint64_t sub_1006CE124(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "Swim";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "deactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "Swim";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "deactivate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLSwimEntry>::disable() const [Data_T = CLSwimEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 288) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), 0);
  return 1;
}

void sub_1006CE2F0(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if ((*a3 + 1) <= 1)
    sub_1006CE334(a1, a4);
}

void sub_1006CE310(_QWORD *a1)
{
  sub_1006CDE90(a1);
  operator delete();
}

void sub_1006CE334(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = a2[7];
  v38 = a2[6];
  v39 = v3;
  v40 = a2[8];
  v41 = *((_QWORD *)a2 + 18);
  v4 = a2[3];
  v34 = a2[2];
  v35 = v4;
  v5 = a2[5];
  v36 = a2[4];
  v37 = v5;
  v6 = a2[1];
  v32 = *a2;
  v33 = v6;
  v7 = *(_QWORD *)(a1 + 272);
  if (v7)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 48))(v7, &v32);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = v8 + *(_QWORD *)(a1 + 48) - 1;
    v10 = *(void ***)(a1 + 24);
    v11 = *((double *)v10[v9 / 0x1A] + 19 * (v9 % 0x1A) + 5);
    if (v11 > *((double *)&v34 + 1))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v13 = v12 - (_QWORD)v10;
      if (v13 >= 0x11)
      {
        do
        {
          operator delete(*v10);
          v14 = *(_QWORD *)(a1 + 32);
          v10 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v10;
          v13 = v14 - (_QWORD)v10;
        }
        while (v13 > 0x10);
      }
      if (v13 >> 3 == 1)
      {
        v15 = 13;
      }
      else
      {
        if (v13 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v16 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v29 = *((_QWORD *)&v34 + 1);
            v30 = 2048;
            v31 = v11;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v24 = 134218240;
            v25 = *((_QWORD *)&v34 + 1);
            v26 = 2048;
            v27 = v11;
            LODWORD(v23) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v24), v23);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLSwimEntry>::add(const T &) [T = CLSwimEntry]", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          goto LABEL_17;
        }
        v15 = 26;
      }
      *(_QWORD *)(a1 + 48) = v15;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_10047ED34((_QWORD *)(a1 + 16), (uint64_t)&v32);
  v17 = v39;
  *(_OWORD *)(a1 + 192) = v38;
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 224) = v40;
  *(_QWORD *)(a1 + 240) = v41;
  v18 = v35;
  *(_OWORD *)(a1 + 128) = v34;
  *(_OWORD *)(a1 + 144) = v18;
  v19 = v37;
  *(_OWORD *)(a1 + 160) = v36;
  *(_OWORD *)(a1 + 176) = v19;
  v20 = v33;
  *(_OWORD *)(a1 + 96) = v32;
  *(_OWORD *)(a1 + 112) = v20;
}

_QWORD *sub_1006CE638(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D908;
  v2 = a1 + 25;
  v3 = (_QWORD *)a1[28];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006CE698(a1);
}

_QWORD *sub_1006CE698(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D978;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_10055489C(a1 + 2);
  return a1;
}

void sub_1006CE700(_QWORD *a1)
{
  sub_1006CE638(a1);
  operator delete();
}

uint64_t sub_1006CE724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 224);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006CE770(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 224);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006CE7B8(_QWORD *a1)
{
  sub_1006CE698(a1);
  operator delete();
}

_QWORD *sub_1006CE7DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214D9A8;
  v2 = a1 + 17;
  v3 = (_QWORD *)a1[20];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100427A00(a1 + 2);
  return a1;
}

void sub_1006CE844(_QWORD *a1)
{
  sub_1006CE7DC(a1);
  operator delete();
}

_QWORD *sub_1006CE868(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DA00;
  v2 = a1 + 25;
  v3 = (_QWORD *)a1[28];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006CE8C8(a1);
}

_QWORD *sub_1006CE8C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DA70;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_10055489C(a1 + 2);
  return a1;
}

void sub_1006CE930(_QWORD *a1)
{
  sub_1006CE868(a1);
  operator delete();
}

void sub_1006CE958(_QWORD *a1)
{
  sub_1006CE8C8(a1);
  operator delete();
}

_QWORD *sub_1006CE97C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  *a1 = off_10214DAA0;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v10 = "ExtendedStepCount";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disable message src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = 136315138;
    v8 = "ExtendedStepCount";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "disable message src %s", (const char *)&v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual CLSourceFromNotifier<CLExtendedStepCountEntry>::~CLSourceFromNotifier() [Data_T = CLExtendedStepCountEntry]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  objc_msgSend(*(id *)(a1[57] + 16), "unregister:forNotification:", *(_QWORD *)(a1[57] + 8), 1);
  v3 = a1[57];
  a1[57] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CEB84(a1);
  return a1;
}

void sub_1006CEB78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_1006CEB84(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DB18;
  v2 = a1 + 52;
  v3 = (_QWORD *)a1[55];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1006CEFD4(a1 + 2);
  return a1;
}

void sub_1006CEBEC(_QWORD *a1)
{
  sub_1006CE97C(a1);
  operator delete();
}

uint64_t sub_1006CEC10(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "ExtendedStepCount";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "ExtendedStepCount";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "activate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLExtendedStepCountEntry>::enable() const [Data_T = CLExtendedStepCountEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 456) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), 1, 0);
  return 1;
}

uint64_t sub_1006CEDE0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "ExtendedStepCount";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "deactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "ExtendedStepCount";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "deactivate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLExtendedStepCountEntry>::disable() const [Data_T = CLExtendedStepCountEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 456) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), 1);
  return 1;
}

void sub_1006CEFB0(_QWORD *a1)
{
  sub_1006CEB84(a1);
  operator delete();
}

uint64_t sub_1006CEFD4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 8;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 16;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1006CF068(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DBC0;
  v2 = a1 + 34;
  v3 = (_QWORD *)a1[37];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1006CF50C(a1 + 2);
  return a1;
}

void sub_1006CF0D0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214DB48;
  v2 = a1[39];
  a1[39] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1006CF068(a1);
  operator delete();
}

uint64_t sub_1006CF12C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "StepCount";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "StepCount";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "activate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLStepCountEntry>::enable() const [Data_T = CLStepCountEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 312) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8), 0, 0);
  return 1;
}

uint64_t sub_1006CF2FC(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "StepCount";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "deactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "StepCount";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "deactivate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLStepCountEntry>::disable() const [Data_T = CLStepCountEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8), 0);
  return 1;
}

void sub_1006CF4C8(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if ((*a3 + 1) <= 1)
    sub_1006CF5A0(a1, a4);
}

void sub_1006CF4E8(_QWORD *a1)
{
  sub_1006CF068(a1);
  operator delete();
}

uint64_t sub_1006CF50C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 11;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 23;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1006CF5A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  double v44;

  v3 = a2[9];
  v34 = a2[8];
  v35 = v3;
  v36 = a2[10];
  v4 = a2[5];
  v30 = a2[4];
  v31 = v4;
  v5 = a2[7];
  v32 = a2[6];
  v33 = v5;
  v6 = a2[1];
  v26 = *a2;
  v27 = v6;
  v7 = a2[3];
  v28 = a2[2];
  v29 = v7;
  v8 = *(_QWORD *)(a1 + 296);
  if (v8)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(v8, &v26);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 48) - 1;
    v11 = *(void ***)(a1 + 24);
    v12 = *((double *)v11[v10 / 0x17] + 22 * (v10 % 0x17) + 1);
    if (v12 > *((double *)&v26 + 1))
    {
      v13 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v14 = v13 - (_QWORD)v11;
      if (v14 >= 0x11)
      {
        do
        {
          operator delete(*v11);
          v15 = *(_QWORD *)(a1 + 32);
          v11 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v11;
          v14 = v15 - (_QWORD)v11;
        }
        while (v14 > 0x10);
      }
      if (v14 >> 3 == 1)
      {
        v16 = 11;
      }
      else
      {
        if (v14 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v17 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v42 = *((_QWORD *)&v26 + 1);
            v43 = 2048;
            v44 = v12;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v37 = 134218240;
            v38 = *((_QWORD *)&v26 + 1);
            v39 = 2048;
            v40 = v12;
            LODWORD(v25) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v37), v25);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLStepCountEntry>::add(const T &) [T = CLStepCountEntry]", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          goto LABEL_17;
        }
        v16 = 23;
      }
      *(_QWORD *)(a1 + 48) = v16;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_100212098((_QWORD *)(a1 + 16), &v26);
  v18 = v35;
  *(_OWORD *)(a1 + 224) = v34;
  *(_OWORD *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 256) = v36;
  v19 = v31;
  *(_OWORD *)(a1 + 160) = v30;
  *(_OWORD *)(a1 + 176) = v19;
  v20 = v33;
  *(_OWORD *)(a1 + 192) = v32;
  *(_OWORD *)(a1 + 208) = v20;
  v21 = v27;
  *(_OWORD *)(a1 + 96) = v26;
  *(_OWORD *)(a1 + 112) = v21;
  v22 = v29;
  *(_OWORD *)(a1 + 128) = v28;
  *(_OWORD *)(a1 + 144) = v22;
}

void sub_1006CF8B0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x17;
  v4 = v2 - 23;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006CFB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006CFBC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DBF0;
  v2 = a1 + 40;
  v3 = (_QWORD *)a1[43];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006CFC24(a1);
}

_QWORD *sub_1006CFC24(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DC60;
  v2 = a1 + 36;
  v3 = (_QWORD *)a1[39];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1006CFD68(a1 + 2);
  return a1;
}

void sub_1006CFC8C(_QWORD *a1)
{
  sub_1006CFBC4(a1);
  operator delete();
}

uint64_t sub_1006CFCB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 344);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006CFCFC(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 344);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006CFD44(_QWORD *a1)
{
  sub_1006CFC24(a1);
  operator delete();
}

uint64_t sub_1006CFD68(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 10;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 21;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1006CFDFC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214DD08;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100554930(a1 + 2);
  return a1;
}

void sub_1006CFE64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10214DC90;
  v2 = a1[25];
  a1[25] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1006CFDFC(a1);
  operator delete();
}

uint64_t sub_1006CFEC0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "HeartRate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "HeartRate";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "activate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLCatherineData>::enable() const [Data_T = CLCatherineData]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 200) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8), 4, 0);
  return 1;
}

uint64_t sub_1006D0090(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "HeartRate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "deactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "HeartRate";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "deactivate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLCatherineData>::disable() const [Data_T = CLCatherineData]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 200) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8), 4);
  return 1;
}

void sub_1006D025C(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if (*a3 == 4 || *a3 == -1)
    sub_1006D02A0(a1, a4);
}

void sub_1006D027C(_QWORD *a1)
{
  sub_1006CFDFC(a1);
  operator delete();
}

void sub_1006D02A0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint8_t *v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  double v31;

  v3 = a2[1];
  v20 = *a2;
  v21 = v3;
  v4 = a2[3];
  v22 = a2[2];
  v23 = v4;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(v5, &v20);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v7 = v6 + *(_QWORD *)(a1 + 48) - 1;
    v8 = *(void ***)(a1 + 24);
    v9 = (*(double **)((char *)v8 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)))[8 * (v7 & 0x3F) + 5];
    if (v9 > *((double *)&v22 + 1))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v11 = v10 - (_QWORD)v8;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v8);
          v12 = *(_QWORD *)(a1 + 32);
          v8 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v8;
          v11 = v12 - (_QWORD)v8;
        }
        while (v11 > 0x10);
      }
      if (v11 >> 3 == 1)
      {
        v13 = 32;
      }
      else
      {
        if (v11 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10214D488);
          v14 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v29 = *((_QWORD *)&v22 + 1);
            v30 = 2048;
            v31 = v9;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10214D488);
            v24 = 134218240;
            v25 = *((_QWORD *)&v22 + 1);
            v26 = 2048;
            v27 = v9;
            LODWORD(v19) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v24), v19);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLCatherineData>::add(const T &) [T = CLCatherineData]", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
          goto LABEL_17;
        }
        v13 = 64;
      }
      *(_QWORD *)(a1 + 48) = v13;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1005550F0((_QWORD *)(a1 + 16), (uint64_t)&v20);
  v15 = v21;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v15;
  v16 = v23;
  *(_OWORD *)(a1 + 128) = v22;
  *(_OWORD *)(a1 + 144) = v16;
}

_QWORD *sub_1006D054C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  *a1 = off_10214DD38;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v10 = "Elevation";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disable message src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v7 = 136315138;
    v8 = "Elevation";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "disable message src %s", (const char *)&v7);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual CLSourceFromNotifier<CLElevationChangeEntry>::~CLSourceFromNotifier() [Data_T = CLElevationChangeEntry]", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  objc_msgSend(*(id *)(a1[57] + 16), "unregister:forNotification:", *(_QWORD *)(a1[57] + 8), 7);
  v3 = a1[57];
  a1[57] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006D0754(a1);
  return a1;
}

void sub_1006D0748(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_1006D0754(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_10214DDC0;
  v2 = a1 + 52;
  v3 = (_QWORD *)a1[55];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_100554930(a1 + 34);
  sub_1006D0BAC(a1 + 1);
  return a1;
}

void sub_1006D07C4(_QWORD *a1)
{
  sub_1006D054C(a1);
  operator delete();
}

uint64_t sub_1006D07E8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "Elevation";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "activate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "Elevation";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "activate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLElevationChangeEntry>::enable() const [Data_T = CLElevationChangeEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 456) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), 3, 0);
  return 1;
}

uint64_t sub_1006D09B8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214D4A8);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "Elevation";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "deactivate src %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214D4A8);
    v6 = 136315138;
    v7 = "Elevation";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "deactivate src %s", (const char *)&v6);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSourceFromNotifier<CLElevationChangeEntry>::disable() const [Data_T = CLElevationChangeEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 456) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8), 3);
  return 1;
}

void sub_1006D0B88(_QWORD *a1)
{
  sub_1006D0754(a1);
  operator delete();
}

_QWORD *sub_1006D0BAC(_QWORD *a1)
{
  void *v2;

  sub_100412390(a1 + 26);
  sub_100412390(a1 + 20);
  sub_100412390(a1 + 14);
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1006D0BF4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D0EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1006D0F08(id a1)
{
  qword_10229FF48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_1006D0F34(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  unint64_t v6;
  _QWORD *v7;
  __int128 *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x18));
  }
  else
  {
    v5 = (__int128 *)(*(_QWORD *)(v4 + 8 * (v3 / 0x18)) + 168 * (v3 % 0x18));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x18));
    v8 = (__int128 *)(*v7 + 168 * (v6 % 0x18));
  }
  sub_1006D0FF8((_QWORD *)a1, (_QWORD *)(v4 + 8 * (v3 / 0x18)), v5, v7, v8);
  return a1;
}

void sub_1006D0FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D0FF8(_QWORD *a1, _QWORD *a2, __int128 *a3, _QWORD *a4, __int128 *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 24 * (a4 - a2)
       - 0x30C30C30C30C30C3 * (((uint64_t)a5 - *a4) >> 3)
       + 0x30C30C30C30C30C3 * (((uint64_t)a3 - *a2) >> 3);
  return sub_1006D105C(a1, a2, a3, v5);
}

_QWORD *sub_1006D105C(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 24 * ((v9 - v8) >> 3) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1006D11FC(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 / 0x18));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 168 * (v11 % 0x18);
  v30 = (_QWORD *)(v8 + 8 * (v11 / 0x18));
  v31 = v14;
  result = sub_1006D17A8(&v30, a4);
  v16 = v31;
  if (v14 != v31)
  {
    v17 = v30;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4032;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          v20 = *a3;
          v21 = a3[2];
          *(_OWORD *)(v19 + 16) = a3[1];
          *(_OWORD *)(v19 + 32) = v21;
          *(_OWORD *)v19 = v20;
          v22 = a3[3];
          v23 = a3[4];
          v24 = a3[6];
          *(_OWORD *)(v19 + 80) = a3[5];
          *(_OWORD *)(v19 + 96) = v24;
          *(_OWORD *)(v19 + 48) = v22;
          *(_OWORD *)(v19 + 64) = v23;
          v25 = a3[7];
          v26 = a3[8];
          v27 = a3[9];
          *(_QWORD *)(v19 + 160) = *((_QWORD *)a3 + 20);
          *(_OWORD *)(v19 + 128) = v26;
          *(_OWORD *)(v19 + 144) = v27;
          *(_OWORD *)(v19 + 112) = v25;
          a3 = (__int128 *)((char *)a3 + 168);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4032)
          {
            v28 = (__int128 *)a2[1];
            ++a2;
            a3 = v28;
          }
          v19 += 168;
        }
        while (v19 != v18);
      }
      a1[5] -= 0x30C30C30C30C30C3 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v29 = v13[1];
      ++v13;
      v14 = v29;
    }
    while (v29 != v16);
  }
  return result;
}

void sub_1006D11FC(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x18)
    v6 = v5 / 0x18 + 1;
  else
    v6 = v5 / 0x18;
  v7 = a1[4];
  if (v6 >= v7 / 0x18)
    v8 = v7 / 0x18;
  else
    v8 = v6;
  if (v6 <= v7 / 0x18)
  {
    for (a1[4] = v7 - 24 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 23;
          else
            v64 = 24;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 24 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -24 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFC0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1006D1734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006D17A8(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x30C30C30C30C30C3 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 23 - v3;
      v6 = &v2[-(v5 / 0x18)];
      *result = v6;
      v4 = *v6 + 168 * (24 * (v5 / 0x18) - v5) + 3864;
    }
    else
    {
      *result = &v2[v3 / 0x18];
      v4 = v2[v3 / 0x18] + 168 * (v3 % 0x18);
    }
    result[1] = v4;
  }
  return result;
}

_QWORD *sub_1006D184C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  _BYTE *v8;

  if (a1 != a2)
  {
    v3 = a2[4];
    v4 = a2[1];
    if (a2[2] == v4)
    {
      v5 = 0;
      v8 = 0;
      v7 = (char *)(v4 + 8 * ((a2[5] + v3) / 0x11));
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v4 + 8 * (v3 / 0x11)) + 232 * (v3 % 0x11));
      v6 = a2[5] + v3;
      v7 = (char *)(v4 + 8 * (v6 / 0x11));
      v8 = (_BYTE *)(*(_QWORD *)v7 + 232 * (v6 % 0x11));
    }
    sub_1006D1900(a1, (char *)(v4 + 8 * (v3 / 0x11)), v5, v7, v8);
  }
  return a1;
}

_QWORD *sub_1006D1900(_QWORD *a1, char *a2, _BYTE *a3, char *a4, _BYTE *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 2 * (a4 - a2)
       + ((a4 - a2) >> 3)
       + 0x34F72C234F72C235 * ((uint64_t)&a5[-*(_QWORD *)a4] >> 3)
       - 0x34F72C234F72C235 * ((uint64_t)&a3[-*(_QWORD *)a2] >> 3);
  return sub_1006D1960(a1, a2, a3, v5);
}

_QWORD *sub_1006D1960(_QWORD *a1, char *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v8;
  char *v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v20;
  _BYTE *v21;
  char *v22;
  _BYTE *v23;

  v8 = a1[5];
  if (v8 >= a4)
  {
    v15 = a1[4];
    v16 = a1[1];
    v17 = (char *)(v16 + 8 * (v15 / 0x11));
    if (a1[2] == v16)
      v18 = 0;
    else
      v18 = *(_QWORD *)v17 + 232 * (v15 % 0x11);
    v22 = a2;
    v23 = a3;
    sub_100692884(&v22, a4);
    v20 = v22;
    v21 = v23;
    v22 = v17;
    v23 = (_BYTE *)v18;
    sub_100692AD8(a2, a3, (_BYTE **)v20, v21, (uint64_t)&v22);
    return (_QWORD *)sub_1006D1AA8((uint64_t)a1, v22, (uint64_t)v23);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_100692884(&v22, v8);
    v9 = v22;
    v10 = (__int128 *)v23;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (char *)(v12 + 8 * (v11 / 0x11));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *(_QWORD *)v13 + 232 * (v11 % 0x11);
    v22 = v13;
    v23 = (_BYTE *)v14;
    sub_100692AD8(a2, a3, (_BYTE **)v9, v10, (uint64_t)&v22);
    return sub_1006CCD9C(a1, v9, v10, a4 - a1[5]);
  }
}

uint64_t sub_1006D1AA8(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 / 0x11));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 232 * (v5 % 0x11);
  if (v9 != a3)
  {
    v10 = 2 * (v8 - a2) + ((v8 - a2) >> 3) + 0x34F72C234F72C235 * ((uint64_t)(v9 - *(_QWORD *)v8) >> 3);
    v11 = (a3 - *(_QWORD *)a2) >> 3;
    v12 = v10 - 0x34F72C234F72C235 * v11;
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 / 0x11));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 232 * (v4 % 0x11);
      if (a3 == v14)
        v15 = 0;
      else
        v15 = 2 * (a2 - v13)
            + ((a2 - v13) >> 3)
            + 0x34F72C234F72C235 * v11
            - 0x34F72C234F72C235 * ((uint64_t)(v14 - *(_QWORD *)v13) >> 3);
      v16[0] = v13;
      v16[1] = v14;
      sub_100692884(v16, v15);
      v3[5] -= v12;
      do
        result = sub_100692814(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t sub_1006D1C1C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  sub_1006CCC70(a1 + 40, (_QWORD *)(a2 + 40));
  return a1;
}

void sub_1006D1C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006D1CA8(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 8;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 17;
LABEL_7:
    a1[4] = v8;
  }
  sub_1006D1D48(a1);
  result = sub_1006D1E78((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006D1D48(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1006927B8((uint64_t)a1, 0);
    sub_100692814(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1006D1DB8((uint64_t)a1);
}

void sub_1006D1DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1006D1E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1006D1DB8(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

_QWORD *sub_1006D1EE4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _QWORD *v7;
  _BYTE *v8;

  if (a1 != a2)
  {
    v3 = a2[4];
    v4 = a2[1];
    if (a2[2] == v4)
    {
      v5 = 0;
      v8 = 0;
      v7 = (_QWORD *)(v4 + 8 * ((a2[5] + v3) / 0x18));
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v4 + 8 * (v3 / 0x18)) + 168 * (v3 % 0x18));
      v6 = a2[5] + v3;
      v7 = (_QWORD *)(v4 + 8 * (v6 / 0x18));
      v8 = (_BYTE *)(*v7 + 168 * (v6 % 0x18));
    }
    sub_1006D1F90(a1, (_QWORD *)(v4 + 8 * (v3 / 0x18)), v5, v7, v8);
  }
  return a1;
}

_QWORD *sub_1006D1F90(_QWORD *a1, _QWORD *a2, _BYTE *a3, _QWORD *a4, _BYTE *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = 24 * (a4 - a2)
       - 0x30C30C30C30C30C3 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x30C30C30C30C30C3 * ((uint64_t)&a3[-*a2] >> 3);
  return sub_1006D1FF4(a1, a2, a3, v5);
}

_QWORD *sub_1006D1FF4(_QWORD *a1, _QWORD *a2, _BYTE *a3, unint64_t a4)
{
  unint64_t v8;
  _BYTE **v9;
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _BYTE **v20;
  _BYTE *v21;
  _QWORD *v22;
  _BYTE *v23;

  v8 = a1[5];
  if (v8 >= a4)
  {
    v15 = a1[4];
    v16 = a1[1];
    v17 = (_QWORD *)(v16 + 8 * (v15 / 0x18));
    if (a1[2] == v16)
      v18 = 0;
    else
      v18 = *v17 + 168 * (v15 % 0x18);
    v22 = a2;
    v23 = a3;
    sub_1006D17A8(&v22, a4);
    v20 = (_BYTE **)v22;
    v21 = v23;
    v22 = v17;
    v23 = (_BYTE *)v18;
    sub_1006D22B8(a2, a3, v20, v21, (uint64_t)&v22);
    return (_QWORD *)sub_1006D213C((uint64_t)a1, v22, (uint64_t)v23);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_1006D17A8(&v22, v8);
    v9 = (_BYTE **)v22;
    v10 = (__int128 *)v23;
    v11 = a1[4];
    v12 = a1[1];
    v13 = (_QWORD *)(v12 + 8 * (v11 / 0x18));
    if (a1[2] == v12)
      v14 = 0;
    else
      v14 = *v13 + 168 * (v11 % 0x18);
    v22 = v13;
    v23 = (_BYTE *)v14;
    sub_1006D22B8(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_1006D105C(a1, v9, v10, a4 - a1[5]);
  }
}

uint64_t sub_1006D213C(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (_QWORD *)(v6 + 8 * (v5 / 0x18));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *v8 + 168 * (v5 % 0x18);
  if (v9 != a3)
  {
    v10 = 24 * (v8 - a2) - 0x30C30C30C30C30C3 * ((uint64_t)(v9 - *v8) >> 3);
    v11 = (a3 - *a2) >> 3;
    v12 = v10 + 0x30C30C30C30C30C3 * v11;
    if (v12 >= 1)
    {
      v13 = (_QWORD *)(v6 + 8 * (v4 / 0x18));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *v13 + 168 * (v4 % 0x18);
      if (a3 == v14)
        v15 = 0;
      else
        v15 = 24 * (a2 - v13) - 0x30C30C30C30C30C3 * v11 + 0x30C30C30C30C30C3 * ((uint64_t)(v14 - *v13) >> 3);
      v16[0] = v13;
      v16[1] = v14;
      sub_1006D17A8(v16, v15);
      v3[5] -= v12;
      do
        result = sub_1006D2434(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double sub_1006D22B8(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_1006D2348(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1006D2348(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1006D2348@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCF3CF3CF3CF3CF3DLL * ((v10 - __dst + 4032) >> 3);
      v12 = (uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCF3CF3CF3CF3CF3DLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 168 * v12);
      v7 += 168 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 168 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_1006D2434(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 24 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x18)
    a2 = 1;
  if (v5 < 0x30)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t sub_1006D24A8(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 12;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 24;
LABEL_7:
    a1[4] = v8;
  }
  sub_1006D2548(a1);
  result = sub_1006D26D4((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1006D2548(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1006D25B8((uint64_t)a1, 0);
    sub_1006D2434(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1006D2614((uint64_t)a1);
}

uint64_t sub_1006D25B8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x18)
    a2 = 1;
  if (v2 < 0x30)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 24;
  }
  return v4 ^ 1u;
}

void sub_1006D2614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1006D26D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1006D2614(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1006D2740(id a1)
{
  qword_1022A0198 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

_QWORD *sub_1006D276C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_1006D2804(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_1006D2804(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1006D296C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1006D2978@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1006D299C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1006D29C0(uint64_t a1)
{
  return sub_100261F44(a1 + 32);
}

uint64_t sub_1006D29C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void **v13;
  __int128 v14;

  v3 = *(_QWORD *)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v3 + 96) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 64) = v4;
  v7 = *(_OWORD *)(a2 + 136);
  v8 = *(_OWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(v3 + 160) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 128) = v7;
  *(_OWORD *)(v3 + 144) = v8;
  *(_OWORD *)(v3 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 8);
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v3 + 32) = v11;
  *(_OWORD *)v3 = v10;
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v12 = *(_OWORD *)(a2 + 176);
  v13 = (void **)(v12 + 16);
  if (*(char *)(v12 + 39) < 0)
    operator delete(*v13);
  v14 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a2 + 215) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  return sub_1006D1CA8((_QWORD *)(v12 + 40), a2 + 216);
}

uint64_t sub_1006D2A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  v4 = (_BYTE *)(a2 + 16);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 64);
  }
  return sub_1006CCC70(a2 + 40, (_QWORD *)(a1 + 72));
}

void sub_1006D2AEC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006D2B08(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  return sub_1006CCC70(a1 + 72, (_QWORD *)(a2 + 72));
}

void sub_1006D2B74(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1006D2B90(uint64_t a1)
{
  sub_100691160((_QWORD *)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1006D2BCC(_QWORD *a1, void *a2)
{
  *a1 = off_10214D550;
  sub_1006D316C(a1 + 1, a2, 10.0, 300.0);
}

void sub_1006D2F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v26;
  uint64_t v27;

  v26 = a16;
  if (a16 == v20)
  {
    v27 = 4;
    v26 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  sub_1006CDBD4(v19);
  sub_1006CDD78(v18);
  sub_1006CDE04(v17);
  sub_1006CD91C(v24);
  sub_1006CE638(v23);
  sub_1006CE7DC(v22);
  sub_1006CE868(v21);
  sub_1006CE97C(a9);
  sub_1006CD974(a10);
  sub_1006CFBC4(a11);
  sub_1006CD9C0(a12);
  sub_1006D054C(v16);
  _Unwind_Resume(a1);
}

void sub_1006D3084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v33;
  uint64_t v34;

  v33 = a32;
  if (a32 == v32)
  {
    v34 = 4;
    v33 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  JUMPOUT(0x1006D3044);
}

void sub_1006D30B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  char *v36;
  char *v37;
  uint64_t v38;

  v37 = a36;
  if (a36 == v36)
  {
    v38 = 4;
    v37 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  JUMPOUT(0x1006D304CLL);
}

void sub_1006D30EC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 152);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 176);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D3054);
}

void sub_1006D3120()
{
  JUMPOUT(0x1006D305CLL);
}

void sub_1006D3128()
{
  JUMPOUT(0x1006D3064);
}

void sub_1006D3130()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 120);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D306CLL);
}

void sub_1006D3164()
{
  JUMPOUT(0x1006D3074);
}

void sub_1006D316C(_QWORD *a1, void *a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v9 = 0;
  sub_1006D345C((uint64_t)a1, (uint64_t)v8, a3, a4);
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_10214DD38;
  a1[56] = objc_msgSend(a2, "silo");
  a1[57] = 0;
  sub_1004FAEDC();
}

void sub_1006D33E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[57];
  v1[57] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006D0754(v1);
  _Unwind_Resume(a1);
}

void sub_1006D3428()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 64);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D3420);
}

uint64_t sub_1006D345C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  sub_1006D3520(a1 + 8);
  *(_QWORD *)a1 = &off_10214DDC0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = xmmword_101BBBED0;
  *(double *)(a1 + 336) = a3;
  *(double *)(a1 + 344) = a4;
  *(_OWORD *)(a1 + 352) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 397) = 0;
  *(_QWORD *)(a1 + 406) = 0;
  sub_100270E34(a1 + 416, a2);
  return a1;
}

void sub_1006D3504(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_100554930(v2);
  sub_1006D0BAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D3520(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int i;
  float v5;
  int v7;
  int v8;
  float v9;

  *(_OWORD *)a1 = xmmword_101BBCB60;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_101BBCB70;
  *(_OWORD *)(a1 + 32) = xmmword_101BBCB80;
  *(_OWORD *)(a1 + 48) = unk_101BBCB90;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  v2 = (_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = operator new(8uLL);
  *v2 = v3;
  *v3 = 0;
  *(_QWORD *)(a1 + 96) = v3 + 1;
  *(_QWORD *)(a1 + 104) = v3 + 1;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  for (i = 119; i != -1; --i)
  {
    v5 = pow(0.98, (double)i);
    v9 = v5;
    sub_1000BFB54((_QWORD *)(a1 + 112), &v9);
  }
  v8 = 0;
  sub_1000BFB54((_QWORD *)(a1 + 160), (float *)&v8);
  v7 = 0;
  sub_1000BFB54((_QWORD *)(a1 + 208), (float *)&v7);
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  return a1;
}

void sub_1006D3638(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void *v7;

  sub_100412390(v3);
  sub_100412390(v4);
  sub_100412390(v2);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 96) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_1006D3674(_QWORD *a1, void *a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v9 = 0;
  sub_1006D37E4((uint64_t)a1, (uint64_t)v8, a3, a4);
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_10214DC90;
  a1[24] = objc_msgSend(a2, "silo");
  a1[25] = 0;
  sub_100A01AFC();
}

void sub_1006D377C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[25];
  v1[25] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CFDFC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D37E4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214DD08;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  sub_100270E34(a1 + 160, a2);
  return a1;
}

void sub_1006D3860(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100554930(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D3874(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[24], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 4))(a4, a1, a2, a3);
}

_QWORD *sub_1006D38C4(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D39C4((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214DBF0;
  sub_100270E34((uint64_t)(a1 + 40), a2);
  return a1;
}

void sub_1006D397C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CFC24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D39C4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214DC60;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  sub_100270E34(a1 + 288, a2);
  return a1;
}

void sub_1006D3A54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CFD68(v1);
  _Unwind_Resume(a1);
}

void sub_1006D3A68(_QWORD *a1, void *a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v9 = 0;
  sub_1006D3BD8((uint64_t)a1, (uint64_t)v8, a3, a4);
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_10214DB48;
  a1[38] = objc_msgSend(a2, "silo");
  a1[39] = 0;
  sub_10022AF5C();
}

void sub_1006D3B70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[39];
  v1[39] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CF068(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D3BD8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214DBC0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_OWORD *)(a1 + 96) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 259) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  sub_100270E34(a1 + 272, a2);
  return a1;
}

void sub_1006D3C78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CF50C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D3C8C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[38], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 4))(a4, a1, a2, a3);
}

void sub_1006D3CDC(_QWORD *a1, void *a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v9 = 0;
  sub_1006D3FCC((uint64_t)a1, (uint64_t)v8, a3, a4);
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_10214DAA0;
  a1[56] = objc_msgSend(a2, "silo");
  a1[57] = 0;
  sub_10022AF5C();
}

void sub_1006D3F58(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[57];
  v1[57] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CEB84(v1);
  _Unwind_Resume(a1);
}

void sub_1006D3F98()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 64);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 88);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D3F90);
}

uint64_t sub_1006D3FCC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214DB18;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  sub_100270E34(a1 + 416, a2);
  return a1;
}

void sub_1006D4084(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CEFD4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4098(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D4198((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214DA00;
  sub_100270E34((uint64_t)(a1 + 25), a2);
  return a1;
}

void sub_1006D4150(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CE8C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4198(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214DA70;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  sub_100270E34(a1 + 168, a2);
  return a1;
}

void sub_1006D420C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10055489C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4220(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D9A8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  sub_100270E34(a1 + 136, a2);
  return a1;
}

void sub_1006D4290(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100427A00(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D42A4(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D43A4((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214D908;
  sub_100270E34((uint64_t)(a1 + 25), a2);
  return a1;
}

void sub_1006D435C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CE698(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D43A4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D978;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x80000000800000;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_101BB1EE0;
  *(_QWORD *)(a1 + 160) = 0x80000000800000;
  sub_100270E34(a1 + 168, a2);
  return a1;
}

void sub_1006D4428(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10055489C(v1);
  _Unwind_Resume(a1);
}

void sub_1006D443C(_QWORD *a1, void *a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;

  v9 = 0;
  sub_1006D45AC((uint64_t)a1, (uint64_t)v8, a3, a4);
  v6 = v9;
  if (v9 == v8)
  {
    v7 = 4;
    v6 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *a1 = off_10214D860;
  a1[35] = objc_msgSend(a2, "silo");
  a1[36] = 0;
  sub_101499948();
}

void sub_1006D4544(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[36];
  v1[36] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006CDE90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D45AC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D8D8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  sub_100270E34(a1 + 248, a2);
  return a1;
}

void sub_1006D4624(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10047F6F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4638(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  objc_msgSend(a4[35], "assertInside");
  return (*((uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))*a4 + 4))(a4, a1, a2, a3);
}

uint64_t sub_1006D4688(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D808;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  sub_100270E34(a1 + 112, a2);
  return a1;
}

void sub_1006D46F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004A4854(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4708(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D7B0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  sub_100270E34(a1 + 120, a2);
  return a1;
}

void sub_1006D4770(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10047F660(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4784(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D4884((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214D710;
  sub_100270E34((uint64_t)(a1 + 18), a2);
  return a1;
}

void sub_1006D483C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CDC34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4884(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D780;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 104) = 7;
  sub_100270E34(a1 + 112, a2);
  return a1;
}

void sub_1006D48F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004A4854(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4908(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D4A08((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214D670;
  sub_100270E34((uint64_t)(a1 + 21), a2);
  return a1;
}

void sub_1006D49C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006CDA90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D4A08(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D6E0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  sub_100270E34(a1 + 136, a2);
  return a1;
}

void sub_1006D4A7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100427A00(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4A90@<X0>(char *a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, double *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = sub_1006D4B08(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1006D4AF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4B08(_QWORD *a1, char *__s, char *a3, uint64_t a4, double *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_10214DF70;
  a1[1] = 0;
  sub_1006D4BCC((int)&v7, (uint64_t)(a1 + 3), __s, a3, a4, a5);
  return a1;
}

void sub_1006D4B60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1006D4B74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214DF70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006D4B88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214DF70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006D4BBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1006D4BCC(int a1, uint64_t a2, char *__s, char *a4, uint64_t a5, double *a6)
{
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  sub_1015A2E04(v12, __s);
  sub_1015A2E04(__p, a4);
  sub_100EF08B0(a2, v12, __p, a5, *a6);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1006D4C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006D4C88@<X0>(char *a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, double *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = sub_1006D4B08(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1006D4CEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D4D00@<X0>(char *a1@<X1>, char *a2@<X2>, uint64_t a3@<X3>, double *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = sub_1006D4B08(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1006D4D64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1006D4D78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214DFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006D4D8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214DFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006D4DC0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1006D4DD4()
{
  operator delete();
}

_QWORD *sub_1006D4DE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E010;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D4E1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E010;
  a2[1] = v2;
  return result;
}

void sub_1006D4E38(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1006D4E9C(*a3, *a4, *a5, *(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1006D4E54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D4E90()
{
}

void sub_1006D4E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLMotionStateMediator::onBackgroundEscalationManagerUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onBackgroundEscalationManagerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onBackgroundEscalationManagerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_1006C7CA0((_QWORD *)a4, a1, a2, a3, a5);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1006D5074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006D5098()
{
  operator delete();
}

_QWORD *sub_1006D50AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E0A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D50E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E0A0;
  a2[1] = v2;
  return result;
}

void sub_1006D50FC(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1006D4E9C(*a3, *a4, *a5, *(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1006D5118(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D5154()
{
}

void sub_1006D5164()
{
  operator delete();
}

_QWORD *sub_1006D5178(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E120;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D51AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E120;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D51C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D5204()
{
}

void sub_1006D5214()
{
  operator delete();
}

_QWORD *sub_1006D5228(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E1B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D525C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E1B0;
  a2[1] = v2;
  return result;
}

__n128 sub_1006D5278(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _OWORD v12[14];
  uint64_t v13;

  v3 = *a2;
  v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  v13 = *(_QWORD *)(a3 + 224);
  v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  sub_1006D5360(v3, (uint64_t)v12, *(_QWORD *)(a1 + 8));
  return result;
}

uint64_t sub_1006D5318(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D5354()
{
}

void sub_1006D5360(int a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  os_activity_scope_state_s state;
  char v18;
  _OWORD v19[14];
  uint64_t v20;
  uint64_t buf;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;

  CLProfilingIdentify("CLMotionStateMediator::onWorkoutPredictorUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v18 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onWorkoutPredictorUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289538;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "activity";
      v26 = 2050;
      v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onWorkoutPredictorUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    v18 = 0;
  }
  v8 = *(_OWORD *)(a2 + 192);
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 160);
  v19[11] = *(_OWORD *)(a2 + 176);
  v19[12] = v8;
  v19[13] = v9;
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 96);
  v19[7] = *(_OWORD *)(a2 + 112);
  v19[8] = v11;
  v20 = *(_QWORD *)(a2 + 224);
  v19[9] = v12;
  v19[10] = v10;
  v14 = *(_OWORD *)(a2 + 80);
  v19[4] = *(_OWORD *)(a2 + 64);
  v19[5] = v14;
  v19[6] = v13;
  v15 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v15;
  v16 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v16;
  sub_1006C811C(a3, a1, (unsigned __int8 *)v19);
  if (v18)
    os_activity_scope_leave(&state);
}

void sub_1006D556C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id *sub_1006D558C(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100793B28(result);
    operator delete();
  }
  return result;
}

void sub_1006D55CC()
{
  operator delete();
}

_QWORD *sub_1006D55E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E240;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D5614(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E240;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D5630(uint64_t a1, double *a2)
{
  return sub_100EE17B4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6608), *a2);
}

uint64_t sub_1006D5640(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D567C()
{
}

void sub_1006D568C()
{
  operator delete();
}

_QWORD *sub_1006D56A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E2C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D56D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E2C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D56F0(uint64_t a1, double *a2)
{
  return sub_100EE17DC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6608), *a2);
}

uint64_t sub_1006D5700(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D573C()
{
}

void sub_1006D574C()
{
  operator delete();
}

_QWORD *sub_1006D5760(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E340;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D5794(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E340;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D57B0(uint64_t a1, double *a2)
{
  return sub_100EE1804(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6608), *a2);
}

uint64_t sub_1006D57C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D57FC()
{
}

_QWORD *sub_1006D5808(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;

  *a1 = off_10214E3C0;
  v42 = 0;
  sub_1006D5E24((uint64_t)(a1 + 1), (uint64_t)v41, 10.0, 300.0);
  v2 = v42;
  if (v42 == v41)
  {
    v3 = 4;
    v2 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v40 = 0;
  sub_1006D5EB8(a1 + 37, (uint64_t)v39, 10.0, 150.0);
  v4 = v40;
  if (v40 == v39)
  {
    v5 = 4;
    v4 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v38 = 0;
  sub_1006D3FCC((uint64_t)(a1 + 59), (uint64_t)v37, 10.0, 300.0);
  v6 = v38;
  if (v38 == v37)
  {
    v7 = 4;
    v6 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v36 = 0;
  sub_1006D60E8(a1 + 115, (uint64_t)v35, 10.0, 300.0);
  v8 = v36;
  if (v36 == v35)
  {
    v9 = 4;
    v8 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v34 = 0;
  sub_1006D38C4(a1 + 137, (uint64_t)v33, 10.0, 300.0);
  v10 = v34;
  if (v34 == v33)
  {
    v11 = 4;
    v10 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  v32 = 0;
  sub_1006D42A4(a1 + 181, (uint64_t)v31, 15.0, 300.0);
  v12 = v32;
  if (v32 == v31)
  {
    v13 = 4;
    v12 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_31;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_31:
  v30 = 0;
  sub_1006D6314(a1 + 210, (uint64_t)v29, 10.0, 10.0);
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_36;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_36:
  v28 = 0;
  sub_1006D6748(a1 + 234, (uint64_t)v27, 10.0, 300.0);
  v16 = v28;
  if (v28 == v27)
  {
    v17 = 4;
    v16 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_41;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_41:
  v26 = 0;
  sub_1006D6978(a1 + 258, (uint64_t)v25, 8.0, 8.0);
  v18 = v26;
  if (v26 == v25)
  {
    v19 = 4;
    v18 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_46;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_46:
  v24 = 0;
  sub_1006D6DAC(a1 + 284, (uint64_t)v23, 6.0, 6.0);
  v20 = v24;
  if (v24 == v23)
  {
    v21 = 4;
    v20 = v23;
    goto LABEL_50;
  }
  if (v24)
  {
    v21 = 5;
LABEL_50:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return a1;
}

void sub_1006D5B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v24;
  uint64_t v25;

  v24 = a14;
  if (a14 == v15)
  {
    v25 = 4;
    v24 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  sub_1006D7260(v22);
  sub_1006D72C0(v21);
  sub_1006D7320(v20);
  sub_1006CE638(v19);
  sub_1006CFBC4(v18);
  sub_1006D7380(v17);
  sub_1006CEB84(v16);
  sub_1006D73E0(a10);
  sub_1006CD764(v14);
  _Unwind_Resume(a1);
}

void sub_1006D5CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v31;
  uint64_t v32;

  v31 = a30;
  if (a30 == v30)
  {
    v32 = 4;
    v31 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  JUMPOUT(0x1006D5C84);
}

void sub_1006D5CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  char *v34;
  char *v35;
  uint64_t v36;

  v35 = a34;
  if (a34 == v34)
  {
    v36 = 4;
    v35 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  JUMPOUT(0x1006D5C8CLL);
}

void sub_1006D5D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38)
{
  char *v38;
  char *v39;
  uint64_t v40;

  v39 = a38;
  if (a38 == v38)
  {
    v40 = 4;
    v39 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_6:
  JUMPOUT(0x1006D5C94);
}

void sub_1006D5D50()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 184);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 208);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D5C9CLL);
}

void sub_1006D5D84()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 152);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 176);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D5CA4);
}

void sub_1006D5DB8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 120);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1006D5CACLL);
}

void sub_1006D5E00(_QWORD *a1)
{
  sub_1006D7440(a1);
  operator delete();
}

uint64_t sub_1006D5E24(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214D4F8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_WORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 239) = 0;
  sub_100270E34(a1 + 256, a2);
  return a1;
}

void sub_1006D5EA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100542DDC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D5EB8(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D5FB8((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E4A8;
  sub_100270E34((uint64_t)(a1 + 18), a2);
  return a1;
}

void sub_1006D5F70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006D6034(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D5FB8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E518;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 104) = 0;
  sub_100270E34(a1 + 112, a2);
  return a1;
}

void sub_1006D6020(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004A4854(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D6034(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E518;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1004A4854(a1 + 2);
  return a1;
}

void sub_1006D609C(_QWORD *a1)
{
  sub_1006D73E0(a1);
  operator delete();
}

void sub_1006D60C4(_QWORD *a1)
{
  sub_1006D6034(a1);
  operator delete();
}

_QWORD *sub_1006D60E8(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D61E8((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E548;
  sub_100270E34((uint64_t)(a1 + 18), a2);
  return a1;
}

void sub_1006D61A0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006D6260(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D61E8(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E5B8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 104) = 0;
  sub_100270E34(a1 + 112, a2);
  return a1;
}

void sub_1006D624C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1004A4854(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D6260(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E5B8;
  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_1004A4854(a1 + 2);
  return a1;
}

void sub_1006D62C8(_QWORD *a1)
{
  sub_1006D7380(a1);
  operator delete();
}

void sub_1006D62F0(_QWORD *a1)
{
  sub_1006D6260(a1);
  operator delete();
}

_QWORD *sub_1006D6314(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D6414((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E5E8;
  sub_100270E34((uint64_t)(a1 + 20), a2);
  return a1;
}

void sub_1006D63CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006D64B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D6414(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E658;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_100270E34(a1 + 128, a2);
  return a1;
}

void sub_1006D6494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_100279AA4((void ***)va);
  sub_1006D6610(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D64B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = off_10214E658;
  v2 = (_QWORD *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 152);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v6 = (void **)(a1 + 104);
  sub_100279AA4(&v6);
  sub_1006D6610((_QWORD *)(a1 + 16));
  return a1;
}

void sub_1006D6534(_QWORD *a1)
{
  sub_1006D7320(a1);
  operator delete();
}

uint64_t sub_1006D6558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 184);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006D65A4(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 184);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006D65EC(uint64_t a1)
{
  sub_1006D64B4(a1);
  operator delete();
}

uint64_t sub_1006D6610(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void **v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v7 != v8)
    {
      do
      {
        v15 = (void **)(v7 + 8);
        sub_100279AA4(&v15);
        v7 += 32;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 64;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 128;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1006D6748(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D6848((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E688;
  sub_100270E34((uint64_t)(a1 + 20), a2);
  return a1;
}

void sub_1006D6800(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006D68C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D6848(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E6F8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_100270E34(a1 + 128, a2);
  return a1;
}

void sub_1006D68B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10034111C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D68C4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E6F8;
  v2 = a1 + 16;
  v3 = (_QWORD *)a1[19];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_10034111C(a1 + 2);
  return a1;
}

void sub_1006D692C(_QWORD *a1)
{
  sub_1006D72C0(a1);
  operator delete();
}

void sub_1006D6954(_QWORD *a1)
{
  sub_1006D68C4(a1);
  operator delete();
}

_QWORD *sub_1006D6978(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D6A78((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E728;
  sub_100270E34((uint64_t)(a1 + 22), a2);
  return a1;
}

void sub_1006D6A30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006D6B14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D6A78(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E798;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_100270E34(a1 + 144, a2);
  return a1;
}

void sub_1006D6AF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v4;

  v4 = *(void **)(v1 + 120);
  if (v4)
  {
    *(_QWORD *)(v1 + 128) = v4;
    operator delete(v4);
  }
  sub_1006D6C68(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D6B14(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *a1 = off_10214E798;
  v2 = a1 + 18;
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  sub_1006D6C68(a1 + 2);
  return a1;
}

void sub_1006D6B8C(_QWORD *a1)
{
  sub_1006D7260(a1);
  operator delete();
}

uint64_t sub_1006D6BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 200);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006D6BFC(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 200);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006D6C44(_QWORD *a1)
{
  sub_1006D6B14(a1);
  operator delete();
}

uint64_t sub_1006D6C68(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x55];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 48 * (v5 % 0x55);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x55] + 48 * ((a1[5] + v5) % 0x55);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)(v8 + 24);
        if (v10)
        {
          *(_QWORD *)(v8 + 32) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 48;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 42;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 85;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1006D6DAC(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;

  v10 = 0;
  sub_1006D6EAC((uint64_t)a1, (uint64_t)v9, a3, a4);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  *a1 = off_10214E7C8;
  sub_100270E34((uint64_t)(a1 + 23), a2);
  return a1;
}

void sub_1006D6E64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1006D6F5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D6EAC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(_QWORD *)a1 = off_10214E838;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_101BBBED0;
  *(double *)(a1 + 80) = a3;
  *(double *)(a1 + 88) = a4;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0x600000006;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q0;
  sub_100270E34(a1 + 152, a2);
  return a1;
}

void sub_1006D6F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 120) = v6;
    operator delete(v6);
  }
  sub_1006D70B4(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006D6F5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *a1 = off_10214E838;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  sub_1006D70B4(a1 + 2);
  return a1;
}

void sub_1006D6FD8(_QWORD *a1)
{
  sub_1006D7200(a1);
  operator delete();
}

uint64_t sub_1006D6FFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = *(_QWORD *)(a1 + 208);
  if (!v1)
    return 0;
  v2 = 1;
  v4 = 1;
  if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4) & 1) == 0)
    return 0;
  return v2;
}

BOOL sub_1006D7048(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  char v3;

  v1 = *(_QWORD *)(a1 + 208);
  result = 0;
  if (v1)
  {
    v3 = 0;
    if (((*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v3) & 1) != 0)
      return 1;
  }
  return result;
}

void sub_1006D7090(_QWORD *a1)
{
  sub_1006D6F5C(a1);
  operator delete();
}

uint64_t sub_1006D70B4(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x49];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 56 * (v5 % 0x49);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)(v8 + 16);
        if (v10)
        {
          *(_QWORD *)(v8 + 24) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 56;
        if (v8 - v7 == 4088)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 36;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 73;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return sub_10002E778((uint64_t)a1);
}

_QWORD *sub_1006D7200(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E7C8;
  v2 = a1 + 23;
  v3 = (_QWORD *)a1[26];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D6F5C(a1);
}

_QWORD *sub_1006D7260(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E728;
  v2 = a1 + 22;
  v3 = (_QWORD *)a1[25];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D6B14(a1);
}

_QWORD *sub_1006D72C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E688;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D68C4(a1);
}

uint64_t sub_1006D7320(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E5E8;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D64B4((uint64_t)a1);
}

_QWORD *sub_1006D7380(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E548;
  v2 = a1 + 18;
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D6260(a1);
}

_QWORD *sub_1006D73E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_10214E4A8;
  v2 = a1 + 18;
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1006D6034(a1);
}

_QWORD *sub_1006D7440(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_10214E3C0;
  v2 = a1 + 1;
  sub_1006D7200(a1 + 284);
  sub_1006D7260(a1 + 258);
  sub_1006D72C0(a1 + 234);
  sub_1006D7320(a1 + 210);
  sub_1006CE638(a1 + 181);
  sub_1006CFBC4(a1 + 137);
  sub_1006D7380(a1 + 115);
  sub_1006CEB84(a1 + 59);
  sub_1006D73E0(a1 + 37);
  sub_1006CD764(v2);
  return a1;
}

void sub_1006D74C8()
{
  operator delete();
}

_QWORD *sub_1006D74DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E8A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D7510(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E8A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D752C(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    sub_1006CB27C();
  else
    sub_1006CB418();
  return 1;
}

uint64_t sub_1006D7554(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D7590()
{
}

void sub_1006D75A0()
{
  operator delete();
}

_QWORD *sub_1006D75B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E938;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D75E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E938;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D7604(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100DD1EC4(*(_QWORD *)(a1 + 8) + 6624, *a2, 0);
}

uint64_t sub_1006D761C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D7658()
{
}

void sub_1006D7668()
{
  operator delete();
}

_QWORD *sub_1006D767C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214E9B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D76B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214E9B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006D76CC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100DD13E4((_QWORD *)(*(_QWORD *)(a1 + 8) + 6624), *a2);
}

uint64_t sub_1006D76E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D771C()
{
}

void sub_1006D772C()
{
  operator delete();
}

_QWORD *sub_1006D7740(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214EA38;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D7774(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214EA38;
  a2[1] = v2;
  return result;
}

void sub_1006D7790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8368);
  if (v2)
    sub_100CAEA3C(v2, a2);
}

uint64_t sub_1006D77A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D77E0()
{
}

_QWORD *sub_1006D77EC(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_10214EAB8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1006D7920;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1006D7934;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1006D78F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D7920(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1006D7934(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1006D7950(uint64_t a1)
{
  sub_1006D7C3C(a1);
  operator delete();
}

id sub_1006D7974(_QWORD *a1, int a2, const void *a3, unint64_t a4)
{
  size_t v8;
  size_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 __dst;
  __int128 v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;

  DWORD2(v24) = 0;
  if (a4 >= 0x20)
    v8 = 32;
  else
    v8 = a4;
  if (v8 <= 0x14)
    v9 = 21 - v8;
  else
    v9 = 0;
  bzero((char *)&__dst + v8, v9);
  memcpy(&__dst, a3, v8);
  if (a4 >= 0x21)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v10 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v34 = 0x8000000101BBDD9ELL & 0x7FFFFFFFFFFFFFFFLL;
      v35 = 2048;
      v36 = 32;
      v37 = 2048;
      v38 = a4;
      v39 = 1024;
      v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
      v25 = 136315906;
      v26 = 0x8000000101BBDD9ELL & 0x7FFFFFFFFFFFFFFFLL;
      v27 = 2048;
      v28 = 32;
      v29 = 2048;
      v30 = a4;
      v31 = 1024;
      v32 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v25, 38, v18, LODWORD(v19[0]));
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<StairsEscalationEvent>::dispatchData(int, const void *, size_t) [T = StairsEscalationEvent]", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  v12 = a1[2];
  v11 = a1[3];
  v13 = a1[6];
  v14 = (void *)a1[4];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1006D7C94;
  v19[3] = &unk_10214EB00;
  v19[4] = v13;
  v19[5] = v12;
  v20 = __dst;
  v21 = v24;
  v22 = v11;
  return objc_msgSend(v14, "async:", v19);
}

uint64_t sub_1006D7C3C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214EAB8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1006D7C94(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 80));
  return result;
}

void sub_1006D7CD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214EB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006D7CEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214EB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_1006D7D20(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1006D80A8((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BBDE1ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BBDE1ALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214EB70);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionStateMediator_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1006D80A8(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B558))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)320)
      sub_101905C44();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1006D811C(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1006D8148(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    for (i = 0; i != -176; i -= 88)
    {
      *(_QWORD *)(a2 + i + 1344) = off_10214EBA0;
      sub_100008848(a2 + i + 1408, *(_QWORD **)(a2 + i + 1416));
      sub_10047F25C((_QWORD *)(a2 + i + 1360));
    }
    for (j = 0; j != -176; j -= 88)
    {
      *(_QWORD *)(a2 + j + 1008) = off_10214EBA0;
      sub_100008848(a2 + j + 1072, *(_QWORD **)(a2 + j + 1080));
      sub_10047F25C((_QWORD *)(a2 + j + 1024));
    }
    for (k = 0; k != -264; k -= 88)
    {
      *(_QWORD *)(a2 + k + 552) = off_10214EBA0;
      sub_100008848(a2 + k + 616, *(_QWORD **)(a2 + k + 624));
      sub_10047F25C((_QWORD *)(a2 + k + 568));
    }
    operator delete();
  }
}

uint64_t sub_1006D8228(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214EBA0;
  sub_100008848(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10047F25C((_QWORD *)(a1 + 16));
  return a1;
}

void sub_1006D8268(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214EBA0;
  sub_100008848(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10047F25C((_QWORD *)(a1 + 16));
  operator delete();
}

void sub_1006D82B8(uint64_t a1, float *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  float *v6;

  v3 = (_QWORD *)(a1 + 16);
  v4 = (uint64_t **)(a1 + 64);
  v6 = sub_1006D86FC((uint64_t **)(a1 + 64), a2);
  sub_1006D8364(v3, &v6);
  if (*(_QWORD *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(_QWORD *)(a1 + 48) & 0x1FFLL));
    sub_10008A9F0(v4, v5);
    operator delete(v5);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_101B9DFC0);
    sub_10047F604((uint64_t)v3, 1);
  }
}

void sub_1006D8364(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1006D83E8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1006D83E8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D86B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float *sub_1006D86FC(uint64_t **a1, float *a2)
{
  float *v4;
  float v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (float *)operator new(0x20uLL);
  v5 = *a2;
  v4[7] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((float *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

uint64_t sub_1006D8788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  v4 = (_BYTE *)(a2 + 16);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100115CE4(v4, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 64);
  }
  return sub_1006D0F34(a2 + 40, (_QWORD *)(a1 + 72));
}

void sub_1006D87F4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006D8810(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  return sub_1006D0F34(a1 + 72, (_QWORD *)(a2 + 72));
}

void sub_1006D887C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1006D8898(uint64_t a1)
{
  sub_100544F70((_QWORD *)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1006D88D4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006D8938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006D89C4((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D8950(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1006B945C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1006D8984(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1006D89C4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1006B945C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1006D8A00(uint64_t a1)
{
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = (void **)(a1 + 728);
  sub_10090020C(a1 + 728);
  v3 = *(_QWORD **)(a1 + 776);
  if (v3 == (_QWORD *)(a1 + 752))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 752);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(a1 + 736) = v5;
    operator delete(v5);
  }
  sub_100691160((_QWORD *)(a1 + 672));
  if (*(char *)(a1 + 671) < 0)
    operator delete(*(void **)(a1 + 648));
  v6 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100691160((_QWORD *)(a1 + 176));
  sub_100691160((_QWORD *)(a1 + 128));
  sub_100544F70((_QWORD *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_1006D8AD0()
{
  operator delete();
}

_QWORD *sub_1006D8AE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214EC88;
  result[1] = v3;
  return result;
}

uint64_t sub_1006D8B18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214EC88;
  a2[1] = v2;
  return result;
}

void sub_1006D8B34(uint64_t a1, uint64_t a2)
{
  sub_1006C197C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1006D8B3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006D8B78()
{
}

__n128 sub_1006D8B84(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D8C48(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

void sub_1006D8C48(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x38;
  v4 = v2 - 56;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D8F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_1006D8F5C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D8FE4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1006D8FE4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D92AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_1006D92F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D93AC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_1006D93AC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D9674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_1006D96C0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 21 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D979C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x15)) + 192 * (v7 % 0x15);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  result = (__n128)a2[8];
  v16 = a2[9];
  v17 = a2[11];
  *(_OWORD *)(v8 + 160) = a2[10];
  *(_OWORD *)(v8 + 176) = v17;
  *(__n128 *)(v8 + 128) = result;
  *(_OWORD *)(v8 + 144) = v16;
  ++a1[5];
  return result;
}

void sub_1006D979C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x15;
  v4 = v2 - 21;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D9A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_1006D9AB0(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1006D9B5C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_1006D9B5C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1006D9E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D9E70(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Disabling buffer at CLWorkoutPredictorSourceBuffer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Disabling buffer at CLWorkoutPredictorSourceBuffer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLElevationChangeEntry>::disableSource() [T = CLElevationChangeEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_QWORD *)(a1 + 328) = 0x10000000000000;
  *(_BYTE *)(a1 + 264) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1006DA01C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Disabling buffer at CLWorkoutPredictorSourceBuffer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Disabling buffer at CLWorkoutPredictorSourceBuffer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOdometerEntry>::disableSource() [T = CLOdometerEntry]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_QWORD *)(a1 + 72) = 0x10000000000000;
  *(_BYTE *)(a1 + 8) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1006DA1C8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Disabling buffer at CLWorkoutPredictorSourceBuffer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10214D488);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Disabling buffer at CLWorkoutPredictorSourceBuffer", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::disableSource() [T = CLWorkoutClassifier_Type::WorkoutClassifierResult]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_QWORD *)(a1 + 72) = 0x10000000000000;
  *(_BYTE *)(a1 + 8) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1006DA374(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10214ED18;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1006DA3D4()
{
  operator new();
}

uint64_t sub_1006DA46C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

BOOL sub_1006DA48C()
{
  return os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT);
}

BOOL sub_1006DA4A0()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3192), OS_LOG_TYPE_INFO);
}

BOOL sub_1006DA4B0()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3192));
}

uint64_t sub_1006DA4BC()
{
  sub_1015A2E04(qword_1023032B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023032B0, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023032C8, "Acc800Fp");
  dword_1023032E0 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_1023032C8, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_1023032E8, "DmFp");
  dword_102303300 = 200;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_1023032E8, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102303308, "MotionStateMediator");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102303308, (void *)&_mh_execute_header);
}

void sub_1006DAC38(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x348]);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DAE60(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109);
}

void sub_1006DAEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DAF10(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5;

  v5 = sub_1006DAF6C(a1, a2, a3);
  *(_QWORD *)v5 = off_10214ED80;
  *(_DWORD *)(v5 + 109) = 65792;
  sub_1006DB008(v5, a2);
  return a1;
}

void sub_1006DAF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006DB438(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DAF6C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10214EF80;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1006DAFEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DB008(uint64_t a1, const char *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  int v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[2];
  BOOL v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  _BYTE buf[1638];

  v22 = 0;
  sub_100119F3C(v21);
  sub_1001E4804(buf);
  if (sub_100006BB4(*(uint64_t *)buf, "LocationProviders", v21))
  {
    v4 = sub_1001E4874((uint64_t)v21, a2, &v22);
    v5 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v6 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if ((_DWORD)v4)
    {
      *(_BYTE *)(a1 + 111) = v22;
      v4 = 1;
    }
  }
  else
  {
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v4 = 0;
  }
  if (!*(_BYTE *)(a1 + 111))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "LocationProvider,#Warning provider %{private}s disabled - will run but not send locations to clients", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214EF10);
      v23 = 136380675;
      v24 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationProvider,#Warning provider %{private}s disabled - will run but not send locations to clients", &v23, 12);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationProvider::checkEnable(const char *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214EF10);
  v12 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(unsigned __int8 *)(a1 + 111);
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "LocationProvider,Location Provider (%{private}s) set to (%{public}d)", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v15 = *(unsigned __int8 *)(a1 + 111);
    v23 = 136380931;
    v24 = a2;
    v25 = 1026;
    v26 = v15;
    LODWORD(v20) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationProvider,Location Provider (%{private}s) set to (%{public}d)", &v23, v20);
    v17 = (char *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationProvider::checkEnable(const char *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  sub_10011A5A8(v21);
  return v4;
}

void sub_1006DB400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DB438(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214EF80;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1006DB4B4(uint64_t a1)
{
  sub_1006DB438(a1);
  operator delete();
}

uint64_t sub_1006DB4DC(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t sub_1006DB4E8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214EF10);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "LocationProvider,%s,Wrong registration method called!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214EF10);
    v5 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationProvider,%s,Wrong registration method called!", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLLocationProvider::registerForFilteredLocation(int, const CLLocationProvider_Type::Notification &, const double &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 0;
}

uint64_t sub_1006DB6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v18;
  _BYTE v19[160];
  _BYTE v20[513];
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  std::__shared_weak_count *v30;
  void *v31;
  char v32;
  std::__shared_weak_count *v33;
  id v34;

  sub_100129CA0((uint64_t)v19);
  v18 = 0;
  v4 = (*(uint64_t (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, &v18, v19);
  if ((_DWORD)v4)
  {
    memcpy((void *)a2, v20, 0x201uLL);
    sub_100349198((_QWORD *)(a2 + 520), &v21);
    v5 = v28;
    *(_OWORD *)(a2 + 600) = v27;
    *(_OWORD *)(a2 + 616) = v5;
    *(_BYTE *)(a2 + 632) = v29;
    v6 = v24;
    *(_OWORD *)(a2 + 536) = v23;
    *(_OWORD *)(a2 + 552) = v6;
    v7 = v26;
    *(_OWORD *)(a2 + 568) = v25;
    *(_OWORD *)(a2 + 584) = v7;
  }

  v8 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v32 < 0)
    operator delete(v31);
  v11 = v30;
  if (v30)
  {
    v12 = (unint64_t *)&v30->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v4;
}

void sub_1006DB82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DB840(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
}

void sub_1006DB84C(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _OWORD v18[8];
  _OWORD v19[35];
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  void *v22;
  char v23;
  std::__shared_weak_count *v24;
  id v25;

  sub_100129CA0((uint64_t)v18);
  v4 = a2[7];
  v18[6] = a2[6];
  v18[7] = v4;
  v19[0] = a2[8];
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)a2 + 140);
  v5 = a2[3];
  v18[2] = a2[2];
  v18[3] = v5;
  v6 = a2[5];
  v18[4] = a2[4];
  v18[5] = v6;
  v7 = a2[1];
  v18[0] = *a2;
  v18[1] = v7;
  v17 = 0;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 2;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 1;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 3;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 4;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 39;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);
  v17 = 10;
  (*(void (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 136))(a1, &v17, v18);

  v8 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v23 < 0)
    operator delete(v22);
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1006DBA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DBA84(uint64_t a1)
{
  int v3;

  v3 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 1;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 3;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 4;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 39;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 10;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
  v3 = 5;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

_QWORD *sub_1006DBB80@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1006DBBF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

void sub_1006DBC00(char *a1, _OWORD *a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  _QWORD *v28;
  uint8_t buf[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _QWORD v38[65];
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  std::__shared_weak_count *v48;
  void *__p;
  char v50;
  std::__shared_weak_count *v51;
  id v52;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_10214EF50);
  v6 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v7 = a1 + 8;
    if (a1[31] < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "LocationProvider,Sending through simulated location for %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_10214EF50);
    v24 = a1 + 8;
    if (a1[31] < 0)
      v24 = (_QWORD *)*v24;
    v27 = 136315138;
    v28 = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0248, 2, "LocationProvider,Sending through simulated location for %s", (const char *)&v27);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::sendSimulatedLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  sub_100129CA0((uint64_t)buf);
  v8 = a2[7];
  v35 = a2[6];
  v36 = v8;
  v37[0] = a2[8];
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)((char *)a2 + 140);
  v9 = a2[3];
  v31 = a2[2];
  v32 = v9;
  v10 = a2[5];
  v33 = a2[4];
  v34 = v10;
  v11 = a2[1];
  *(_OWORD *)buf = *a2;
  v30 = v11;
  memcpy(v38, (const void *)a3, 0x201uLL);
  sub_100349198(&v39, (uint64_t *)(a3 + 520));
  v12 = *(_OWORD *)(a3 + 616);
  v45 = *(_OWORD *)(a3 + 600);
  v46 = v12;
  v13 = *(_OWORD *)(a3 + 552);
  v41 = *(_OWORD *)(a3 + 536);
  v42 = v13;
  v14 = *(_OWORD *)(a3 + 584);
  v43 = *(_OWORD *)(a3 + 568);
  v44 = v14;
  v47 = *(_BYTE *)(a3 + 632);
  v38[43] = sub_1001FCBB4();
  v27 = 0;
  (*(void (**)(char *, int *, uint8_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, &v27, buf, 0, 0xFFFFFFFFLL, 1);

  v15 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v50 < 0)
    operator delete(__p);
  v18 = v48;
  if (v48)
  {
    v19 = (unint64_t *)&v48->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1006DBF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1006DBF78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  _BYTE v12[688];
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v15;
  char v16;
  std::__shared_weak_count *v17;
  id v18;

  sub_100129CA0((uint64_t)v12);
  v11 = 9;
  (*(void (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, &v11, v12, 0, 0xFFFFFFFFLL, 1);

  v2 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v16 < 0)
    operator delete(v15);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1006DC0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006DC0B4(char *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  _QWORD *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  _WORD v24[8];
  int v25;
  const char *v26;
  __int16 v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  char v31;
  void *__p;
  char v33;
  std::__shared_weak_count *v34;
  id v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  _QWORD *v39;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_10214EF50);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v5 = "enabled";
    if (!a2)
      v5 = "disabled";
    v6 = a1 + 8;
    if (a1[31] < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315394;
    v37 = v5;
    v38 = 2080;
    v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "LocationProvider,Simulation is now %s for %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_10214EF50);
    v17 = "enabled";
    if (!a2)
      v17 = "disabled";
    v18 = a1 + 8;
    if (a1[31] < 0)
      v18 = (_QWORD *)*v18;
    v25 = 136315394;
    v26 = v17;
    v27 = 2080;
    v28 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0248, 2, "LocationProvider,Simulation is now %s for %s", (const char *)&v25, 22);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::setSimulationEnabled(BOOL)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  a1[109] = a2;
  *(_DWORD *)buf = 9;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  *(_DWORD *)buf = 0;
  (*(void (**)(char *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
  a1[112] = 0;
  sub_100129CA0((uint64_t)&v25);
  v31 = a1[109];
  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_10214EF50);
  v7 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "LocationProvider,Notifying", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_10214EF50);
    v24[0] = 0;
    LODWORD(v23) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0248, 2, "LocationProvider,Notifying", v24, v23);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationProvider::setSimulationEnabled(BOOL)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  *(_DWORD *)buf = 13;
  (*(void (**)(char *, uint8_t *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v25, 1, 0xFFFFFFFFLL, 0);

  v8 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v33 < 0)
    operator delete(__p);
  v11 = v30;
  if (v30)
  {
    v12 = (unint64_t *)&v30->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1006DC538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DC56C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 110) = a2;
  return result;
}

_QWORD *sub_1006DC574(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;

  result = (_QWORD *)sub_1001B6190(a1, a2, a3, a4, a5, a6);
  *result = off_10214EEC8;
  return result;
}

_QWORD *sub_1006DC598(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1006DC5BC(a1, a2, a3, a4, a5);
  *result = off_10214EEC8;
  return result;
}

uint64_t sub_1006DC5BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void **v12;
  id v13;
  id v14;
  void *__p[2];
  uint64_t v17;
  __objc2_prot *v18;
  __objc2_prot *v19;

  *(_QWORD *)a1 = off_10213E550;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  objc_msgSend(a3, "silo");
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v19 = &OBJC_PROTOCOL___CLIntersiloServiceProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
  v18 = &OBJC_PROTOCOL___CLIntersiloClientProtocol;
  objc_msgSend(+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface"), "extendSelectorInfoWithProtocol:bases:", &OBJC_PROTOCOL___CLNotifierServiceClientProtocol, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v11 = objc_msgSend(a3, "silo");
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 24);
  }
  if (v17 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = +[CLIntersiloProxy proxyForRecipientObject:inSilo:recipientName:](CLIntersiloProxy, "proxyForRecipientObject:inSilo:recipientName:", v10, v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, __p[0], __p[1], v17));
  *(_QWORD *)(a1 + 16) = v13;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    v13 = *(id *)(a1 + 16);
  }
  v14 = v13;
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a3, "silo"));
  return a1;
}

void sub_1006DC7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1006DC7DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "start");
}

id sub_1006DC7E4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), "setSimulationEnabled:", a2);
}

void sub_1006DC7F0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1006DC81C(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_1006DC848(id a1)
{
  qword_1022A0248 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

__n128 sub_1006DC874@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1006DC8A8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1006DC8D4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1006DC930(a1 + 8, a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t sub_1006DC930(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1006DC984((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1006DC96C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1006DC984(_OWORD *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_1006DCA08(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1006DCA08(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_10034258C(a1, a2, &v12, &v11, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = *(_QWORD *)(a4 + 32);
    sub_1000145B0(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_1006DCA94(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1006DCAE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10214F080;
  sub_100270E34((uint64_t)(a1 + 1), a3);
  a1[5] = a2;
  sub_10147FF90((uint64_t)(a1 + 6), a2, (uint64_t)a1);
}

void sub_1006DCC5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(v2 + 248);
  *(_QWORD *)(v2 + 248) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v4;
  *v4 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101480134(v3);
  v8 = *(_QWORD **)(v2 + 32);
  if (v8 == v1)
  {
    v9 = 4;
    v8 = v1;
  }
  else
  {
    if (!v8)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  _Unwind_Resume(a1);
}

void sub_1006DCCE4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationClient::onWifiProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214F0C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationClient::onWifiProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F0C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationClient::onWifiProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006DDD88(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006DCE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006DCEBC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationClient::onPipelineProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214F0C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationClient::onPipelineProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F0C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationClient::onPipelineProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006DE2C0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006DD074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006DD094(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214F0E0);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WLC: WifiLocationClient request timed out", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: WifiLocationClient request timed out", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "CLWifiLocationClient::CLWifiLocationClient(id<CLIntersiloUniverse>, ReceiverFunc)_block_invoke", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1006DD22C(v1);
}

void sub_1006DD22C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 208))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WLC: Cancel location request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Cancel location request", v8, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::cancelLocationRequest()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    objc_msgSend(*(id *)(a1 + 200), "setNextFireDelay:", 1.79769313e308);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8), 4);
    if (*(_BYTE *)(a1 + 232))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 248) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8), 0);
    *(_BYTE *)(a1 + 208) = 0;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v3 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WLC: Cancel location request, but no active request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Cancel location request, but no active request", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::cancelLocationRequest()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_1006DD530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10214F080;
  objc_msgSend(*(id *)(a1 + 200), "invalidate");

  *(_QWORD *)(a1 + 200) = 0;
  v2 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_101480134(a1 + 48);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 8))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 8);
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void sub_1006DD5E0(uint64_t a1)
{
  sub_1006DD530(a1);
  operator delete();
}

uint64_t sub_1006DD604(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double Current;
  char v11;
  id v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  _BYTE v42[32];
  _BYTE buf[12];
  __int16 v44;
  _BYTE v45[18];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v4 = a1 + 48;
  v5 = sub_1001240F8(a1 + 48);
  if ((v5 & 1) != 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (*((_BYTE *)a2 + 16))
        v7 = "Yes";
      else
        v7 = "No";
      v8 = *a2;
      v9 = a2[1];
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v7;
      v44 = 2049;
      *(_QWORD *)v45 = v8;
      *(_WORD *)&v45[8] = 2049;
      *(_QWORD *)&v45[10] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WLC: requestLocation, w2,%{private}s, acc,%{private}.01f, tout,%{private}.01f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      if (*((_BYTE *)a2 + 16))
        v25 = "Yes";
      else
        v25 = "No";
      v26 = *a2;
      v27 = a2[1];
      *(_DWORD *)v42 = 136381187;
      *(_QWORD *)&v42[4] = v25;
      *(_WORD *)&v42[12] = 2049;
      *(_QWORD *)&v42[14] = v26;
      *(_WORD *)&v42[22] = 2049;
      *(_QWORD *)&v42[24] = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: requestLocation, w2,%{private}s, acc,%{private}.01f, tout,%{private}.01f", v42, 32);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationClient::requestLocation(const RequestConfiguration &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    if (!*(_BYTE *)(a1 + 208))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8), 4, 0);
    Current = CFAbsoluteTimeGetCurrent();
    v11 = sub_100219670(v4);
    sub_1015A2E04(__p, "cpi");
    sub_100225558((uint64_t)buf, 1, v11, (__int128 *)__p, Current);
    if (v41 < 0)
      operator delete(__p[0]);
    v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider"));
    v30 = *(_QWORD *)buf;
    v31 = buf[8];
    if (SHIBYTE(v46) < 0)
    {
      sub_100115CE4(&v32, *(void **)&v45[2], *(unint64_t *)&v45[10]);
    }
    else
    {
      v32 = *(_OWORD *)&v45[2];
      v33 = v46;
    }
    v35 = v48;
    v36 = v49;
    v37[0] = v50[0];
    *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)((char *)v50 + 12);
    v34 = v47;
    if (SHIBYTE(v52) < 0)
    {
      sub_100115CE4(&v38, (void *)v51, *((unint64_t *)&v51 + 1));
    }
    else
    {
      v38 = v51;
      v39 = v52;
    }
    objc_msgSend(v12, "requestLocationUpdateWithParameters:", sub_10061AB3C((uint64_t)&v30));
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    v16 = sub_1000C4240();
    if (*((_BYTE *)a2 + 16))
      v17 = v16;
    else
      v17 = 0;
    v18 = *(unsigned __int8 *)(a1 + 208);
    if (*(_BYTE *)(a1 + 208))
      v18 = *(_BYTE *)(a1 + 232) != 0;
    if ((v18 & 1) == 0 && ((v17 ^ 1) & 1) == 0)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)v42 = _Q0;
      *(_WORD *)&v42[16] = 0;
      *(_QWORD *)&v42[20] = &_mh_execute_header;
      sub_1001B3AF0();
    }
    if (((v17 | v18 ^ 1) & 1) == 0)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 248) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8), 0);
    *(_BYTE *)(a1 + 208) = 1;
    objc_msgSend(*(id *)(a1 + 200), "setNextFireDelay:", *(double *)(a1 + 224));
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    if (SHIBYTE(v46) < 0)
      operator delete(*(void **)&v45[2]);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WLC: requestLocation, but wifi off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      *(_WORD *)v42 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: requestLocation, but wifi off", v42, 2);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationClient::requestLocation(const RequestConfiguration &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return v5;
}

void sub_1006DDB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_10055A600((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_1006DDBD8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*a3 == 1 && (sub_1001240F8(a1 + 48) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WLC: Cancel request on WiFi power off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Cancel request on WiFi power off", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLWifiLocationClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_1006DD22C(a1);
  }
}

void sub_1006DDD88(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (*a3 == 4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WLC: Handle wifi location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Handle wifi location", v15, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::onWifiProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1006DE084(a1, a4);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v9 = *a3;
      *(_DWORD *)buf = 67240192;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning WLC: Only expecting kNotificationLocationBystander from wifi provider, notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v12 = *a3;
      v15[0] = 67240192;
      v15[1] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#Warning WLC: Only expecting kNotificationLocationBystander from wifi provider, notification,%{public}d", v15, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::onWifiProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_1006DE084(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v3 = *(_DWORD *)(a2 + 96);
  if (v3 == 4 || v3 == 11)
  {
    if (*(double *)(a2 + 20) > 0.0
      && sub_10011CE88(*(double *)(a2 + 4), *(double *)(a2 + 12))
      && *(double *)(a2 + 20) < *(double *)(a1 + 216))
    {
      sub_1006DD22C(a1);
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WLC: Non-WiFi location in CLWifiLocationClient, type,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v9 = *(_DWORD *)(a2 + 96);
      v12[0] = 67240192;
      v12[1] = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Non-WiFi location in CLWifiLocationClient, type,%{public}d", v12, 8);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::handleWifiLocation(const CLDaemonLocation &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1006DE2C0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  if (*a3)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = *a3;
      *(_DWORD *)buf = 67240192;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning WLC: Only expecting kNotificationLocation from pipeline provider, notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      v7 = *a3;
      v15[0] = 67240192;
      v15[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#Warning WLC: Only expecting kNotificationLocation from pipeline provider, notification,%{public}d", v15, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::onPipelineProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214F0E0);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WLC: Handle wifi 2.0 location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214F0E0);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "WLC: Handle wifi 2.0 location", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationClient::onPipelineProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    sub_1006DE084(a1, a4);
  }
}

void sub_1006DE5B4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006DE5E0(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1006DE60C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1006DE6A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1006DE6C0()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1006DE74C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DE764()
{
  qword_102310B90 = 0;
  return __cxa_atexit((void (*)(void *))sub_1006DCA94, &unk_102310B78, (void *)&_mh_execute_header);
}

uint64_t sub_1006DE784(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_QWORD *)result = off_10214F110;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  v2 = a2[1];
  *(_QWORD *)(result + 56) = *a2;
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_1006DE7C8(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *result;
  _QWORD *v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int *v11;

  result = objc_msgSend(a3, "type");
  switch((_DWORD)result)
  {
    case 4:
      result = objc_msgSend(objc_msgSend(objc_msgSend(a3, "motionActivity"), "motionActivity"), "type");
      if ((_DWORD)result == 4)
      {
LABEL_6:
        v10 = objc_msgSend(a3, "type");
        v11 = &v10;
        result = sub_10006A62C(a2 + 16, (int *)&v10, (uint64_t)&unk_101B9EB60, &v11);
        ++*((_DWORD *)result + 5);
      }
      break;
    case 0xB:
      v10 = objc_msgSend(a3, "type");
      v11 = &v10;
      v6 = sub_10006A62C(a2 + 16, (int *)&v10, (uint64_t)&unk_101B9EB60, &v11);
      ++*((_DWORD *)v6 + 5);
      result = objc_msgSend(objc_msgSend(a3, "inertialOdometry"), "hasDeltaPositionX");
      if ((_DWORD)result)
      {
        result = objc_msgSend(objc_msgSend(a3, "inertialOdometry"), "hasDeltaPositionY");
        if ((_DWORD)result)
        {
          objc_msgSend(objc_msgSend(a3, "inertialOdometry"), "deltaPositionX");
          v8 = v7 * v7;
          result = objc_msgSend(objc_msgSend(a3, "inertialOdometry"), "deltaPositionY");
          *(double *)(a2 + 104) = *(double *)(a2 + 104) + sqrt(v8 + v9 * v9);
          ++*(_DWORD *)(a2 + 112);
        }
      }
      break;
    case 6:
      goto LABEL_6;
    default:
      break;
  }
  ++*(_DWORD *)(a2 + 56);
  return result;
}

id sub_1006DE92C(uint64_t a1, void *a2)
{
  double v4;
  double v5;
  id result;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[2];
  int v18;
  int v19;
  _BYTE v20[32];
  char v21;
  uint64_t v22;
  _DWORD v23[10];
  _BYTE v24[40];
  _BYTE v25[48];

  sub_1006DEB70(a2);
  v5 = v4;
  result = objc_msgSend(a2, "type");
  if ((_DWORD)result == 2)
    goto LABEL_14;
  if (*(_BYTE *)(a1 + 40))
  {
    v7 = v5 - *(double *)(a1 + 32);
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(&v16);
    v8 = *(double *)v17;
    sub_100067AC4((uint64_t)v25);
    sub_100067AC4((uint64_t)v24);
    result = (id)sub_100067AC4((uint64_t)v23);
    if (v7 < v8)
    {
      *(_BYTE *)(a1 + 48) = 1;
      return result;
    }
  }
  *(double *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!*(_DWORD *)(v9 - 64))
  {
    *(double *)(v9 - 120) = v5;
    v10 = (double *)(v9 - 112);
    goto LABEL_12;
  }
  v10 = (double *)(v9 - 112);
  v11 = *(double *)(v9 - 120);
  if (v5 > *(double *)(v9 - 112))
  {
    v12 = v5 - v11;
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(&v16);
    v13 = *((double *)v17 + 1);
    sub_100067AC4((uint64_t)v25);
    sub_100067AC4((uint64_t)v24);
    sub_100067AC4((uint64_t)v23);
    if (v12 > v13)
    {
      memset(v17, 0, sizeof(v17));
      v16 = 0u;
      v18 = 1065353216;
      v19 = 0;
      v20[0] = 0;
      v21 = 0;
      v22 = 0;
      v23[0] = 0;
      sub_1006DF67C((uint64_t)v20, v9 - 56);
      v14 = *(_QWORD *)(a1 + 16);
      if (v14 >= *(_QWORD *)(a1 + 24))
      {
        v15 = sub_1006DFB94((uint64_t *)(a1 + 8), (uint64_t)&v16);
      }
      else
      {
        sub_1006DFCA0(a1 + 24, *(_QWORD *)(a1 + 16), (uint64_t)&v16);
        v15 = v14 + 120;
        *(_QWORD *)(a1 + 16) = v14 + 120;
      }
      *(_QWORD *)(a1 + 16) = v15;
      sub_1006DE92C(a1, a2);
      if (v21)
        sub_1001FF18C((uint64_t)v20);
      result = (id)sub_100067AC4((uint64_t)v17);
      goto LABEL_14;
    }
    if (v5 <= *v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  v10 = (double *)(v9 - 120);
  if (v5 < v11)
LABEL_12:
    *v10 = v5;
LABEL_13:
  result = (id)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 32))(a1, v9 - 120, a2);
LABEL_14:
  ++*(_DWORD *)(a1 + 52);
  return result;
}

void sub_1006DEB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 16) = v10;
  sub_1006DEE58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006DEB70(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  switch(objc_msgSend(a1, "type"))
  {
    case 1u:
      v2 = objc_msgSend(a1, "cmAttitude");
      goto LABEL_18;
    case 2u:
      v2 = objc_msgSend(a1, "cmPedometer");
      goto LABEL_18;
    case 3u:
      v2 = objc_msgSend(a1, "location");
      goto LABEL_18;
    case 4u:
      v2 = objc_msgSend(a1, "motionActivity");
      goto LABEL_18;
    case 5u:
      v2 = objc_msgSend(a1, "pressure");
      goto LABEL_18;
    case 6u:
      v2 = objc_msgSend(a1, "wifiScan");
      goto LABEL_18;
    case 7u:
      v2 = objc_msgSend(a1, "bundleId");
      goto LABEL_18;
    case 8u:
    case 9u:
      objc_msgSend(objc_msgSend(objc_msgSend(a1, "vioEstimation"), "timestamp"), "cfAbsoluteTimeS");
      return;
    case 0xBu:
      v2 = objc_msgSend(a1, "inertialOdometry");
      goto LABEL_18;
    case 0xCu:
      v2 = objc_msgSend(a1, "outdoorUpdate");
LABEL_18:
      objc_msgSend(v2, "timestamp");
      break;
    default:
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10214F180);
      v3 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Attempting to retrieve timestamp for unknown event type; switch statement needs to be updated",
          buf,
          2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10214F180);
        v6[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 17, "Attempting to retrieve timestamp for unknown event type; switch statement needs to be updated",
          v6,
          2);
        v5 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "static double CLSubHarvesterTraceScore::getEventTimestamp(CLPIndoorEvent *)", "%s\n", v4);
        if (v5 != buf)
          free(v5);
      }
      break;
  }
}

uint64_t sub_1006DEE20(uint64_t a1)
{
  sub_100067AC4(a1 + 192);
  sub_100067AC4(a1 + 152);
  sub_100067AC4(a1 + 112);
  return a1;
}

uint64_t sub_1006DEE58(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
    sub_1001FF18C(a1 + 64);
  sub_100067AC4(a1 + 16);
  return a1;
}

uint64_t sub_1006DEE90(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(result + 8) != v2)
    return sub_1006DF67C(v2 - 56, a2);
  return result;
}

float sub_1006DEEA8(uint64_t a1)
{
  NSObject *v1;
  float v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  _WORD v14[8];
  _BYTE buf[18];
  __int16 v16;
  double v17;
  int v18;
  _BYTE v19[40];
  uint64_t v20;
  int v21;

  if (*(_BYTE *)(a1 + 48))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10214F180);
    v1 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Failed Scoring", buf, 2u);
    }
    v2 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10214F180);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "Failed Scoring", v14, 2);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual float CLSubHarvesterTraceScore::getScore()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    if (v5 == v6)
    {
      return 0.0;
    }
    else
    {
      v7 = v5 + 64;
      v2 = 0.0;
      do
      {
        *(_OWORD *)buf = *(_OWORD *)(v7 - 64);
        sub_1006DFA24((uint64_t)&buf[16], v7 - 48);
        v8 = v7 - 64;
        v18 = *(_DWORD *)(v7 - 8);
        sub_1006DFA98(v19, v7);
        v9 = *(_QWORD *)(v7 + 40);
        v21 = *(_DWORD *)(v7 + 48);
        v20 = v9;
        v10 = (*(double (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
        if (v19[32])
          sub_1001FF18C((uint64_t)v19);
        v2 = v10 + v2;
        sub_100067AC4((uint64_t)&buf[16]);
        v7 += 120;
      }
      while (v8 + 120 != v6);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10214F180);
      v11 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v16 = 2049;
        v17 = v2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Trace score\", \"score\":\"%{private}f\"}", buf, 0x1Cu);
      }
    }
  }
  return v2;
}

void sub_1006DF1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1006DEE58((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1006DF1D4(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  _QWORD *v7;
  uint64_t *v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;
  double v15;
  uint64_t *v16;
  unint64_t v17;
  double v18;
  double v19;
  _QWORD *v20;
  int v22;
  _QWORD v23[14];
  _BYTE v24[40];
  _BYTE v25[40];
  _QWORD v26[6];

  v4 = *(double *)(a2 + 8) - *(double *)a2;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
  v5 = *(double *)&v23[4];
  sub_100067AC4((uint64_t)v26);
  sub_100067AC4((uint64_t)v25);
  sub_100067AC4((uint64_t)v24);
  v6 = 0.0;
  if (v4 < v5)
    return v6;
  v7 = (_QWORD *)(a2 + 16);
  LODWORD(v23[0]) = 11;
  if (!sub_1001F8DEC((_QWORD *)(a2 + 16), (int *)v23))
    return v6;
  v22 = 11;
  v8 = sub_1001F8DEC((_QWORD *)(a2 + 16), &v22);
  if (!v8)
    goto LABEL_18;
  v9 = *((_DWORD *)v8 + 5);
  if (!v9)
    return v6;
  v10 = (double)*(int *)(a2 + 112) / (double)v9;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
  v11 = *(double *)&v23[8];
  sub_100067AC4((uint64_t)v26);
  sub_100067AC4((uint64_t)v25);
  sub_100067AC4((uint64_t)v24);
  if (v10 < v11)
    return v6;
  v12 = *(double *)(a2 + 104) / v4;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
  v13 = *(double *)&v23[9];
  sub_100067AC4((uint64_t)v26);
  sub_100067AC4((uint64_t)v25);
  sub_100067AC4((uint64_t)v24);
  if (v12 < v13)
    return v6;
  LODWORD(v23[0]) = 6;
  v14 = sub_1001F8DEC((_QWORD *)(a2 + 16), (int *)v23);
  v15 = 0.0;
  if (!v14)
    goto LABEL_10;
  v22 = 6;
  v16 = sub_1001F8DEC((_QWORD *)(a2 + 16), &v22);
  if (!v16)
LABEL_18:
    sub_100263950("unordered_map::at: key not found");
  LODWORD(v17) = *((_DWORD *)v16 + 5);
  v15 = (double)v17;
LABEL_10:
  v18 = v15 / v4;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
  v19 = *(double *)&v23[5];
  sub_100067AC4((uint64_t)v26);
  sub_100067AC4((uint64_t)v25);
  sub_100067AC4((uint64_t)v24);
  if (v18 >= v19)
  {
    v6 = v4 + *(double *)(a2 + 104);
    if (*(_BYTE *)(a2 + 96))
    {
      if (*(_DWORD *)(a2 + 88) == 1)
      {
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
        v20 = sub_1001FF2F4(v26, (unint64_t *)(a2 + 64));
        sub_100067AC4((uint64_t)v26);
        sub_100067AC4((uint64_t)v25);
        sub_100067AC4((uint64_t)v24);
        if (v20)
        {
          (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
          v6 = v6 * *(double *)&v23[6];
          sub_100067AC4((uint64_t)v26);
          sub_100067AC4((uint64_t)v25);
          sub_100067AC4((uint64_t)v24);
        }
      }
    }
    LODWORD(v23[0]) = 4;
    if (sub_1001F8DEC(v7, (int *)v23))
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 128))(v23);
      v6 = v6 * *(double *)&v23[7];
      sub_100067AC4((uint64_t)v26);
      sub_100067AC4((uint64_t)v25);
      sub_100067AC4((uint64_t)v24);
    }
  }
  return v6;
}

void sub_1006DF4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1006DEE20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DF4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[2];
  int v11;
  int v12;
  _BYTE v13[32];
  char v14;
  uint64_t v15;
  int v16;

  v5 = (uint64_t *)(a1 + 8);
  sub_1006DFB34(a1 + 8, *(_QWORD *)(a1 + 8));
  memset(v10, 0, sizeof(v10));
  v9 = 0u;
  v11 = 1065353216;
  v12 = 0;
  v13[0] = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_1006DF67C((uint64_t)v13, a3);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >= *(_QWORD *)(a1 + 24))
  {
    v7 = sub_1006DFB94(v5, (uint64_t)&v9);
  }
  else
  {
    sub_1006DFCA0(a1 + 24, *(_QWORD *)(a1 + 16), (uint64_t)&v9);
    v7 = v6 + 120;
    *(_QWORD *)(a1 + 16) = v6 + 120;
  }
  *(_QWORD *)(a1 + 16) = v7;
  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if (v14)
    sub_1001FF18C((uint64_t)v13);
  return sub_100067AC4((uint64_t)v10);
}

void sub_1006DF5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 16) = v10;
  sub_1006DEE58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006DF5D0(_QWORD *a1)
{
  void **v2;
  void **v4;

  *a1 = off_10214F110;
  v2 = (void **)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  v4 = v2;
  sub_1006DFAF4(&v4);
  return a1;
}

void sub_1006DF61C(_QWORD *a1)
{
  void **v1;
  void **v2;

  *a1 = off_10214F110;
  v1 = (void **)(a1 + 1);
  sub_100261F44((uint64_t)(a1 + 7));
  v2 = v1;
  sub_1006DFAF4(&v2);
  operator delete();
}

uint64_t sub_1006DF67C(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
      return sub_1006DF6C4(result, a2);
  }
  else if (*(_BYTE *)(result + 32))
  {
    result = sub_1001FF18C(result);
    *(_BYTE *)(result + 32) = 0;
  }
  else
  {
    result = sub_1001FF148(result, a2);
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t sub_1006DF6C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10214F150[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_10214F160[v4])(&v5, result, a2);
}

void sub_1006DF750(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1006DF768(uint64_t *a1, std::string *a2, std::string *a3)
{
  sub_1006DF794(*a1, a2, a3);
}

uint64_t sub_1006DF770(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *a1;
  if (*(_DWORD *)(result + 24) != 1)
    return sub_1006DF8D0(result, a3);
  *a2 = *a3;
  return result;
}

void sub_1006DF794(uint64_t a1, std::string *this, std::string *__str)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 24))
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    sub_1006DF7D4(v3);
  }
  else
  {
    std::string::operator=(this, __str);
  }
}

void sub_1006DF7D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *__p[2];
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)v1, *(_QWORD *)(v1 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v1;
    v5 = *(_QWORD *)(v1 + 16);
    *(_OWORD *)__p = v3;
  }
  sub_1006DF858(v2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1006DF83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DF858(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_10214F150[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_1006DF8D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_10214F150[v4])(&v6, a1);
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_1006DF934(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_10214F150[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_10214F170 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void *sub_1006DF9C0(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_100115CE4(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_1006DF9EC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_1006DF9F8(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1006DFA24(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_1004B7728(a1, i + 4, (_QWORD *)i + 2);
  return a1;
}

void sub_1006DFA80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_1006DFA98(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    sub_1001FF148((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_1006DFAD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 32))
    sub_1001FF18C(v1);
  _Unwind_Resume(exception_object);
}

void sub_1006DFAF4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1006DFB34((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_1006DFB34(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 120)
  {
    if (*(_BYTE *)(i - 24))
      sub_1001FF18C(i - 56);
    result = sub_100067AC4(i - 104);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_1006DFB94(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    sub_100259694();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_100313328((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[120 * v3];
  v13 = &v7[120 * v6];
  sub_1006DFCA0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 120;
  sub_1006DFD18(a1, &v10);
  v8 = a1[1];
  sub_1006E00A8((uint64_t)&v10);
  return v8;
}

void sub_1006DFC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006E00A8((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1006DFCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  uint64_t v6;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  sub_1006DFA24(a2 + 16, a3 + 16);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
  result = sub_1006DFA98((_BYTE *)(a2 + 64), a3 + 64);
  v6 = *(_QWORD *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 104) = v6;
  return result;
}

void sub_1006DFD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006DFD18(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1006DFD8C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1006DFD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 120;
      sub_1006DFE40(a1, v7 - 120, v9);
      v7 = *((_QWORD *)&v16 + 1) - 120;
      *((_QWORD *)&v16 + 1) -= 120;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1006DFF98((uint64_t)v13);
  return v11;
}

uint64_t sub_1006DFE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  sub_10012D080(a2 + 16, (uint64_t *)(a3 + 16));
  v5 = *(_DWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 64) = 0;
  result = a2 + 64;
  *(_DWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 96) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    result = sub_1006DFEB0(result, a3 + 64);
    *(_BYTE *)(a2 + 96) = 1;
  }
  v7 = *(_QWORD *)(a3 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 104) = v7;
  return result;
}

uint64_t sub_1006DFEB0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1006DFEE4(a1, a2);
  return a1;
}

uint64_t sub_1006DFEE4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_10214F150[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10214F1A0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 sub_1006DFF70(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_1006DFF8C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_1006DFF98(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1006DFFCC((uint64_t *)a1);
  return a1;
}

uint64_t sub_1006DFFCC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_1006E0040(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1006E0040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t result;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*(_BYTE *)(i + 96))
      sub_1001FF18C(i + 64);
    result = sub_100067AC4(i + 16);
    i = *(_QWORD *)(a2 + 32) + 120;
  }
  return result;
}

uint64_t sub_1006E00A8(uint64_t a1)
{
  sub_1006E00DC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1006E00DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 120;
      if (*(_BYTE *)(v2 - 24))
        sub_1001FF18C(v2 - 56);
      result = sub_100067AC4(v2 - 104);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1006E013C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string v8;
  void *__p[2];
  int64_t v10;

  v2 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  do
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
      v4 = std::string::append(&v8, off_10214F248[v2]);
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v10 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (v10 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if (v10 >= 0)
        v7 = HIBYTE(v10);
      else
        v7 = (std::string::size_type)__p[1];
      std::string::append((std::string *)a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append((std::string *)a1, off_10214F248[v2]);
    }
    ++v2;
  }
  while (v2 != 6);
}

void sub_1006E0234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006E0280(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  char *v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  double v12;
  uint8_t buf[1640];

  v12 = a4;
  sub_10067D0DC(a1, a3, &v12);
  *(_QWORD *)a1 = off_10214F288;
  sub_1002433B8(a1 + 232);
  sub_1015A2E04((_QWORD *)(a1 + 272), a2);
  sub_100E81598((_QWORD *)(a1 + 296), 0, 0);
  if (sub_1000CC4F4(a1 + 64))
  {
    v6 = (char *)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      v6 = *(char **)(a1 + 272);
    sub_100634364(a1 + 64, v6, (const char **)&qword_102303358, 0, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
      v11 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Database is not valid; not initializing",
        &v11,
        2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "CLCellLocationDatabase::CLCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return a1;
}

void sub_1006E04A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 295) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E04E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214F288;
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  return sub_10067D1C4(a1);
}

void sub_1006E0520(uint64_t a1)
{
  sub_1006E04E0(a1);
  operator delete();
}

char *sub_1006E0544@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[295] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 34), *((_QWORD *)result + 35));
  *(_OWORD *)a2 = *((_OWORD *)result + 17);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 36);
  return result;
}

void sub_1006E0570(uint64_t a1)
{
  sub_1006E05E8(a1);
}

void sub_1006E05E8(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  char v26;

  sub_100263E50((uint64_t)&v22);
  v2 = sub_100263F7C(&v23, (uint64_t)"SELECT ", 7);
  v3 = strlen("ROWID");
  v4 = sub_100263F7C(v2, (uint64_t)"ROWID", v3);
  v5 = sub_100263F7C(v4, (uint64_t)" FROM ", 6);
  v6 = (const char *)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    v6 = *(const char **)v6;
  v7 = strlen(v6);
  v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
  v10 = sub_100263F7C(v9, (uint64_t)"MCC", 3);
  v11 = sub_100263F7C(v10, (uint64_t)"=? AND ", 7);
  v12 = sub_100263F7C(v11, (uint64_t)"MNC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)"=? AND ", 7);
  v14 = sub_100263F7C(v13, (uint64_t)"LAC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)"=? AND ", 7);
  v16 = sub_100263F7C(v15, (uint64_t)"CI", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"=? AND ", 7);
  v18 = sub_100263F7C(v17, (uint64_t)"UARFCN", 6);
  v19 = sub_100263F7C(v18, (uint64_t)"=? AND ", 7);
  v20 = sub_100263F7C(v19, (uint64_t)"PSC", 3);
  sub_100263F7C(v20, (uint64_t)"=? ", 3);
  std::stringbuf::str(__p, v24);
  if (v26 >= 0)
    v21 = (char *)__p;
  else
    v21 = (char *)__p[0];
  sub_1000CDA68(a1 + 64, v21);
}

void sub_1006E0AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E0B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  void **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *v34;
  uint64_t v35;
  NSObject *v36;
  void **v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  const char *v50;
  void **v51;
  sqlite3_int64 v52;
  _BYTE buf[12];
  char v54;
  _BYTE v55[12];
  void *__p[2];
  char v57;
  _BYTE v58[12];
  uint64_t v59;
  _QWORD v60[8];
  void *v61;
  char v62;
  _BYTE v63[152];

  v52 = 0;
  v6 = (_QWORD *)(a1 + 296);
  if (sub_100E815A0((_QWORD *)(a1 + 296)))
  {
LABEL_22:
    sub_100087AF4(v6, v55);
    v28 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55);
    if (sub_1000CD75C(v28, 1, *(_DWORD *)a2)
      && (v29 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55), sub_1000CD75C(v29, 2, *(_DWORD *)(a2 + 4)))
      && (v30 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55), sub_1000CD75C(v30, 3, *(_DWORD *)(a2 + 8)))
      && (v31 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55), sub_1000CD75C(v31, 4, *(_DWORD *)(a2 + 12)))
      && (v32 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55), sub_1000CD75C(v32, 5, *(_DWORD *)(a2 + 16)))
      && (v33 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55), sub_1000CD75C(v33, 6, *(_DWORD *)(a2 + 20))))
    {
      v34 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)v55);
      sub_10023C9B0(a1 + 64, v34);
      v52 = sub_10063E99C(a1 + 64);
      v35 = sub_10067E190((_QWORD *)a1, &v52, a3);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
      v36 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        sub_1005A18B4((unsigned int *)a2, __p);
        v37 = v57 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)v58 = 136446210;
        *(_QWORD *)&v58[4] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "failed to bind %{public}s", v58, 0xCu);
        if (v57 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
        v42 = qword_1022A02D8;
        sub_1005A18B4((unsigned int *)a2, v58);
        if (v59 >= 0)
          v43 = v58;
        else
          v43 = *(_BYTE **)v58;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v43;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v42, 17, "failed to bind %{public}s", buf, 12);
        v45 = v44;
        if (SHIBYTE(v59) < 0)
          operator delete(*(void **)v58);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCellLocationDatabase::setLocation(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)", "%s\n", v45);
        if (v45 != (char *)__p)
          free(v45);
      }
      v35 = 0;
    }
    v38 = *(_QWORD *)v55;
    *(_QWORD *)v55 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    return v35;
  }
  sub_100263E50((uint64_t)v58);
  v7 = sub_100263F7C(&v59, (uint64_t)"INSERT OR REPLACE INTO ", 23);
  v8 = (const char *)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    v8 = *(const char **)v8;
  v9 = strlen(v8);
  v10 = sub_100263F7C(v7, (uint64_t)v8, v9);
  v11 = sub_100263F7C(v10, (uint64_t)" (", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"MCC", 3);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"MNC", 3);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"LAC", 3);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"CI", 2);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"UARFCN", 6);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"PSC", 3);
  sub_100263F7C(v22, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?)", 27);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str(__p, v60);
    v24 = v57 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CELL_LOC: fInsertStatement [%s]", buf, 0xCu);
    if (v57 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
    v46 = qword_1022A02D8;
    std::stringbuf::str(buf, v60);
    if (v54 >= 0)
      v47 = buf;
    else
      v47 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    *(_QWORD *)&v55[4] = v47;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v46, 2, "CELL_LOC: fInsertStatement [%s]", v55);
    v49 = v48;
    if (v54 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCellLocationDatabase::setLocation(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)", "%s\n", v49);
    if (v49 != (char *)__p)
      free(v49);
  }
  std::stringbuf::str(__p, v60);
  if (v57 >= 0)
    v25 = (char *)__p;
  else
    v25 = (char *)__p[0];
  *(_QWORD *)(a1 + 296) = sub_10063D314(a1 + 64, v25);
  *(_QWORD *)(a1 + 304) = v26;
  if (v57 < 0)
    operator delete(__p[0]);
  if (sub_100E815A0(v6))
  {
    v59 = v27;
    if (v62 < 0)
      operator delete(v61);
    std::streambuf::~streambuf(v60);
    std::ios::~ios(v63);
    goto LABEL_22;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
  v39 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F2B8);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not prepare cached insert statement", buf, 2);
    v51 = (void **)v50;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCellLocationDatabase::setLocation(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)", "%s\n", v50);
    if (v51 != __p)
      free(v51);
  }
  v59 = v40;
  if (v62 < 0)
    operator delete(v61);
  std::streambuf::~streambuf(v60);
  std::ios::~ios(v63);
  return 0;
}

void sub_1006E1384(_Unwind_Exception *a1)
{
  sub_1018B38B4((uint64_t)&STACK[0x6B0]);
  _Unwind_Resume(a1);
}

void sub_1006E13F8(uint64_t a1)
{
  sub_1006E05E8(a1);
}

void sub_1006E1438(uint64_t a1)
{
  void **v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  char *v19;
  std::string::value_type v20[8];
  char v21;
  std::string::value_type v22[8];
  char v23;
  std::string::value_type __s[8];
  char v25;
  void *__p[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  int64_t v34;
  std::string v35;

  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v28, "SELECT ");
  sub_1006E013C((uint64_t)__p);
  if ((v27 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v3 = v27;
  else
    v3 = (std::string::size_type)__p[1];
  v4 = std::string::append(&v28, (const std::string::value_type *)v2, v3);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v25 = 6;
  strcpy(__s, " FROM ");
  v6 = std::string::append(&v29, __s, 6uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 295);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 272);
  else
    v9 = *(const std::string::value_type **)(a1 + 272);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 295);
  else
    v10 = *(_QWORD *)(a1 + 280);
  v11 = std::string::append(&v30, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v23 = 7;
  strcpy(v22, " WHERE ");
  v13 = std::string::append(&v31, v22, 7uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v32, "ROWID");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v21 = 2;
  strcpy(v20, "=?");
  v17 = std::string::append(&v35, v20, 2uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v34 = v17->__r_.__value_.__r.__words[2];
  v33 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v21 < 0)
    operator delete(*(void **)v20);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(*(void **)v22);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(*(void **)__s);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v34 >= 0)
    v19 = (char *)&v33;
  else
    v19 = (char *)v33;
  sub_1000CDA68(a1 + 64, v19);
}

void sub_1006E1920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1006E1A30(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006E1A5C()
{
  qword_102303358 = (uint64_t)"MCC";
  dword_102303360 = 1;
  word_102303364 = 1;
  byte_102303368 = 0;
  byte_102303380 = 0;
  qword_102303388 = (uint64_t)"MNC";
  dword_102303390 = 1;
  word_102303394 = 1;
  byte_102303398 = 0;
  byte_1023033B0 = 0;
  qword_1023033B8 = (uint64_t)"LAC";
  dword_1023033C0 = 1;
  word_1023033C4 = 1;
  byte_1023033C8 = 0;
  byte_1023033E0 = 0;
  qword_1023033E8 = (uint64_t)"CI";
  dword_1023033F0 = 1;
  word_1023033F4 = 1;
  byte_1023033F8 = 0;
  byte_102303410 = 0;
  qword_102303418 = (uint64_t)"UARFCN";
  dword_102303420 = 1;
  word_102303424 = 1;
  byte_102303428 = 0;
  byte_102303440 = 0;
  qword_102303448 = (uint64_t)"PSC";
  dword_102303450 = 1;
  word_102303454 = 1;
  byte_102303458 = 0;
  byte_102303470 = 0;
  qword_102303478 = (uint64_t)"Timestamp";
  dword_102303480 = 2;
  word_102303484 = 0;
  byte_102303488 = 0;
  byte_1023034A0 = 0;
  qword_1023034A8 = (uint64_t)"Latitude";
  dword_1023034B0 = 2;
  word_1023034B4 = 0;
  byte_1023034B8 = 0;
  byte_1023034D0 = 0;
  qword_1023034D8 = (uint64_t)"Longitude";
  dword_1023034E0 = 2;
  word_1023034E4 = 0;
  byte_1023034E8 = 0;
  byte_102303500 = 0;
  qword_102303508 = (uint64_t)"HorizontalAccuracy";
  dword_102303510 = 2;
  word_102303514 = 0;
  byte_102303518 = 0;
  byte_102303530 = 0;
  qword_102303538 = (uint64_t)"Altitude";
  dword_102303540 = 2;
  word_102303544 = 0;
  byte_102303548 = 0;
  byte_102303560 = 0;
  qword_102303568 = (uint64_t)"VerticalAccuracy";
  dword_102303570 = 2;
  word_102303574 = 0;
  byte_102303578 = 0;
  byte_102303590 = 0;
  qword_102303598 = (uint64_t)"Speed";
  dword_1023035A0 = 2;
  word_1023035A4 = 0;
  byte_1023035A8 = 0;
  byte_1023035C0 = 0;
  qword_1023035C8 = (uint64_t)"Course";
  dword_1023035D0 = 2;
  word_1023035D4 = 0;
  byte_1023035D8 = 0;
  byte_1023035F0 = 0;
  qword_1023035F8 = (uint64_t)"Confidence";
  dword_102303600 = 1;
  word_102303604 = 0;
  byte_102303608 = 0;
  byte_102303620 = 0;
  qword_102303628 = 0;
  dword_102303630 = 5;
  word_102303634 = 0;
  byte_102303638 = 0;
  byte_102303650 = 0;
}

void sub_1006E1C68(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 2736) = CFAbsoluteTimeGetCurrent();
}

void sub_1006E1C8C(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 2736) = CFAbsoluteTimeGetCurrent();
}

void sub_1006E1CB0(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 2736) = CFAbsoluteTimeGetCurrent();
}

void sub_1006E1CD4(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 2736) = CFAbsoluteTimeGetCurrent();
}

void sub_1006E1CFC(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 2736) = CFAbsoluteTimeGetCurrent();
}

uint64_t sub_1006E1D20(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2148) == *(unsigned __int16 *)(a1 + 2146))
    return sub_1006E4170(a1, 4);
  else
    return 1;
}

uint64_t sub_1006E1D40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8440))
    return 1;
  else
    return sub_1006E4170(a1, 7);
}

uint64_t sub_1006E1D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = &unk_10214F2D8;
  *(_QWORD *)(a1 + 8) = 34;
  *(_WORD *)(a1 + 16) = 512;
  *(_QWORD *)(a1 + 24) = 0x1800000000;
  *(_QWORD *)(a1 + 2144) = 0x1800000000;
  *(_QWORD *)(a1 + 2344) = 0x1800000000;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2752) = 0x7FEFFFFFFFFFFFFFLL;
  v6 = a1 + 2760;
  sub_100CE28E4(a1 + 2760);
  *(_QWORD *)(a1 + 8432) = a3;
  *(_BYTE *)(a1 + 8440) = 0;
  buf[0] = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 8441), "DisableAutostartSwimPressureCheck", buf, 0);
  sub_100CE2C60(v6, 2u);
  v7 = *(_DWORD *)(a2 + 104);
  v8 = (_QWORD *)(a2 + 80);
  if (v7 != 6)
    v8 = (_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 2736) = *v8;
  if (v7 > 7)
  {
    if (v7 == 41)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v9 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, tracking alternate walk escalation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214F608);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, tracking alternate walk escalation", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 2, "CLWorkoutPredictorTier2Smoother::CLWorkoutPredictorTier2Smoother(const CLMotionActivity &, const CLWorkoutPredictorInputs &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      sub_10023195C(a1, 10, (uint64_t)buf);
    }
    else if (v7 == 8)
    {
      sub_10023195C(a1, 1, (uint64_t)buf);
    }
  }
  else if (v7 == 4)
  {
    sub_10023195C(a1, 2, (uint64_t)buf);
  }
  else if (v7 == 6)
  {
    sub_10023195C(a1, 12, (uint64_t)buf);
  }
  return a1;
}

void sub_1006E2008(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_10217E940;
  _Unwind_Resume(a1);
}

uint64_t sub_1006E2038(uint64_t result, double a2)
{
  double v2;
  char v3;

  if (*(_BYTE *)(result + 16))
  {
    *(_QWORD *)(result + 2744) = 0;
  }
  else
  {
    v2 = *(double *)(result + 2744) + a2;
    *(double *)(result + 2744) = v2;
    if (v2 > 180.0)
      return sub_10023195C(result, 9, (uint64_t)&v3);
  }
  return result;
}

uint64_t sub_1006E2088(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  double v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  int v22;
  _OWORD v23[5];
  uint64_t v24;
  _QWORD v25[19];
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD v31[6];
  char v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[25];
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  _BYTE v63[11];
  int v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  double v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  unint64_t v115;
  __int16 v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v4 = atomic_load((unsigned __int8 *)&qword_102303670);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102303670))
  {
    v25[0] = 0x500000000;
    sub_100546300(qword_102303658, v25, 2uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102303658, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303670);
  }
  v26 = 0;
  *(_OWORD *)v25 = xmmword_101BB1ED0;
  memset(&v25[2], 0, 135);
  v27 = xmmword_101BB1ED0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31[0] = 0;
  *(_QWORD *)((char *)v31 + 5) = 0;
  *(_QWORD *)((char *)&v31[1] + 6) = 0;
  v32 = 0;
  memset(&v31[3], 0, 24);
  v33 = xmmword_101BB1ED0;
  v34 = 0;
  v35 = 0;
  v36 = 0xFFEFFFFFFFFFFFFFLL;
  v47 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v48 = 0;
  v49 = 0;
  v50 = 0xFFEFFFFFFFFFFFFFLL;
  v51 = 0;
  v52 = 0;
  v58 = 0;
  v59 = 0;
  v64 = 0;
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v61 = 0u;
  v60 = 0u;
  v62 = 0;
  memset(v63, 0, sizeof(v63));
  v65 = 0xFFEFFFFFFFFFFFFFLL;
  v84 = 0u;
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v85 = 0;
  v86 = -1.79769313e308;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0xFFEFFFFFFFFFFFFFLL;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0xFFEFFFFFFFFFFFFFLL;
  v98 = 0;
  v97 = 0;
  v99 = 0x80000000800000;
  v101 = 0;
  v100 = 0;
  v102 = xmmword_101BB1EE0;
  v103 = 0x80000000800000;
  v104 = 0u;
  v105 = 0u;
  v106 = 0;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0;
  v115 = 0xFFEFFFFFFFFFFFFFLL;
  v116 = 0;
  v117 = 0;
  v118 = 0xFFEFFFFFFFFFFFFFLL;
  v119 = 7;
  v120 = 0xFFEFFFFFFFFFFFFFLL;
  v121 = 0;
  v123 = 0;
  v122 = 0;
  v124 = 0;
  v5 = sub_1000D03AC(*(double **)(a1 + 8432), qword_102303658, (uint64_t)v25);
  if ((v5 & 1) != 0)
  {
    v23[2] = *(_OWORD *)&v25[7];
    v23[3] = *(_OWORD *)&v25[9];
    v23[4] = *(_OWORD *)&v25[11];
    v24 = v25[13];
    v23[0] = *(_OWORD *)&v25[3];
    v23[1] = *(_OWORD *)&v25[5];
    sub_1006E258C((unsigned __int16 *)(a1 + 24), (uint64_t)v23);
    v6 = atomic_load((unsigned __int8 *)&qword_102303688);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102303688))
    {
      v22 = 0;
      sub_1004AD1D8((unsigned __int8 *)&byte_102303678, "WorkoutPredictorTier2ClassifierOverride", &v22, 0);
      __cxa_guard_release(&qword_102303688);
    }
    if (byte_102303678)
      v7 = dword_10230367C;
    else
      v7 = v87;
    v8 = *(unsigned __int16 *)(a1 + 2146);
    v9 = *(unsigned int *)(a1 + 2148);
    v10 = *(unsigned __int16 *)(a1 + 2144);
    if (v10 + v8 >= v9)
      v11 = *(unsigned int *)(a1 + 2148);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 2144 + 8 * (v10 + v8 - v11) + 8) = v7;
    if (v9 <= v8)
    {
      if (v10 + 1 < v9)
        LOWORD(v9) = 0;
      *(_WORD *)(a1 + 2144) = v10 + 1 - v9;
    }
    else
    {
      *(_WORD *)(a1 + 2146) = v8 + 1;
    }
    sub_1006E2610(a1, v7);
    sub_1006E2648(a1, (uint64_t)v23);
    sub_1006E26BC(a1);
    v12 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 32))(**(_QWORD **)(a1 + 8432));
    sub_1000E4778(v12);
    sub_1006E28B0(a1);
    v13 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 72))(**(_QWORD **)(a1 + 8432));
    sub_1000E4778(v13);
    v14 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 80))(**(_QWORD **)(a1 + 8432));
    sub_1000E4778(v14);
    sub_1006E2ADC(a1);
    sub_1006E2DB8(a1);
    sub_1006E30F0(a1);
    v15 = *(double *)(a1 + 2752);
    v16 = v86 - v15;
    v17 = fabsf(v16);
    v18 = v86 < v15;
    v19 = 0.0;
    if (!v18)
      v19 = v17;
    *(double *)(a1 + 2752) = v86;
    sub_1006E2038(a1, v19);
    if ((*(_BYTE *)(a1 + 16) - 1) > 7u)
      v20 = 25;
    else
      v20 = qword_101BBE580[(char)(*(_BYTE *)(a1 + 16) - 1)];
    *(_QWORD *)(a2 + 8) = v20;
    *(double *)a2 = v86;
    *(_DWORD *)(a2 + 16) = sub_1006E323C(a1);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 2736);
    *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 16) == 6;
  }
  return v5;
}

void sub_1006E255C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303688);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_1006E258C(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[44 * (v3 - v2)];
  v6 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 12) = v8;
  *(_OWORD *)(v4 + 20) = v7;
  *(_OWORD *)(v4 + 36) = v5;
  *(_OWORD *)(v4 + 28) = v6;
  v9 = result[1];
  v10 = *((unsigned int *)result + 1);
  if (v10 <= v9)
  {
    v11 = *result + 1;
    if (v11 < v10)
      LOWORD(v10) = 0;
    *result = v11 - v10;
  }
  else
  {
    result[1] = v9 + 1;
  }
  return result;
}

uint64_t sub_1006E2610(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 12 || a2 == 9)
  {
    v2 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(result + 8432) + 16))(**(_QWORD **)(result + 8432));
    return sub_1000E4778(v2);
  }
  return result;
}

uint64_t sub_1006E2648(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  char *v3;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;

  HIDWORD(v2) = *(_DWORD *)(a2 + 56);
  LODWORD(v2) = HIDWORD(v2) - 16;
  switch((v2 >> 4))
  {
    case 0u:
      v3 = &v7;
      v4 = 2;
      goto LABEL_6;
    case 1u:
      v3 = &v6;
      v4 = 10;
      goto LABEL_6;
    case 3u:
      v3 = &v8;
      v4 = 1;
      goto LABEL_6;
    case 7u:
      v3 = &v5;
      v4 = 12;
LABEL_6:
      result = sub_10023195C(result, v4, (uint64_t)v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006E26BC(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v1 = *(unsigned __int16 *)(result + 26);
  if (*(_DWORD *)(result + 28) == v1)
  {
    v2 = result;
    if (v1 < 0xF)
      goto LABEL_6;
    v3 = 1;
    v4 = 14;
    do
    {
      result = sub_1006E5558((unsigned __int16 *)(v2 + 24), v4);
      v3 &= *(_DWORD *)result != 64;
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(v2 + 26));
    if ((v3 & 1) != 0)
    {
LABEL_6:
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v5 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Tier2Smoother attempted de-escalating due to no Running calls in Tier 1 Classifier", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214F608);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Tier2Smoother attempted de-escalating due to no Running calls in Tier 1 Classifier", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::evaluateTier1ClassifierBuffer()", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      return sub_10023195C(v2, 6, (uint64_t)buf);
    }
  }
  return result;
}

uint64_t sub_1006E28B0(uint64_t a1)
{
  uint64_t result;
  char v3;
  int v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  result = sub_100CE2924(a1 + 2760, *(double **)(a1 + 8432));
  v3 = result;
  if (*(_DWORD *)(a1 + 2148) == *(unsigned __int16 *)(a1 + 2146) && !*(_BYTE *)(a1 + 8440))
  {
    result = sub_1006E4170(a1, 4);
    v4 = result ^ 1;
    if ((v3 & 1) == 0)
    {
LABEL_4:
      if (!v4)
        return result;
    }
  }
  else
  {
    v4 = 0;
    if ((result & 1) == 0)
      goto LABEL_4;
  }
  v5 = v3 & 1;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v6 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v13 = v5;
    v14 = 1026;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Tier2Smoother,ped auto-stop detected,%{public}d,ped de-escalation from exercise minutes,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v9[0] = 67240448;
    v9[1] = v5;
    v10 = 1026;
    v11 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother,ped auto-stop detected,%{public}d,ped de-escalation from exercise minutes,%{public}d", v9, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::checkPedestrianStop()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_10023195C(a1, 7, (uint64_t)buf);
}

uint64_t sub_1006E2ADC(uint64_t a1)
{
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t result;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  if (!*(_WORD *)(a1 + 2146))
    goto LABEL_32;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)sub_1006E5360((unsigned __int16 *)(a1 + 2144), v2);
    if (v8 <= 8)
    {
      if (v8 != 1)
      {
        if (v8 == 2)
          goto LABEL_14;
        goto LABEL_10;
      }
      ++v6;
    }
    else
    {
      switch(v8)
      {
        case 9:
          ++v4;
          break;
        case 12:
          ++v5;
          break;
        case 19:
          ++v3;
          break;
        default:
LABEL_10:
          ++v7;
          break;
      }
    }
LABEL_14:
    ++v2;
  }
  while (v2 < *(unsigned __int16 *)(a1 + 2146));
  if (v3 > 18)
  {
    v9 = a1;
    v10 = 3;
    goto LABEL_31;
  }
  if (v4 >= 19)
  {
    v9 = a1;
    v10 = 5;
    goto LABEL_31;
  }
  if (v5 >= 19)
  {
    v9 = a1;
    v10 = 4;
    goto LABEL_31;
  }
  if (v7 < 13)
  {
    if (*(_BYTE *)(a1 + 8440) && v6 >= 19)
    {
      v9 = a1;
      v10 = 2;
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Tier2Smoother attemped de-escalating due to Unknown calls in Tier 2 Classifier", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Tier2Smoother attemped de-escalating due to Unknown calls in Tier 2 Classifier", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::evaluateTier2ClassifierBuffer()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v9 = a1;
    v10 = 8;
LABEL_31:
    sub_10023195C(v9, v10, (uint64_t)buf);
  }
LABEL_32:
  result = sub_1006E34D8(a1);
  if ((result & 1) != 0)
  {
    *(_QWORD *)buf = v13;
    return sub_10023195C(a1, 13, (uint64_t)buf);
  }
  return result;
}

void sub_1006E2DB8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  __int128 v4;
  _QWORD v5[19];
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[6];
  char v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[25];
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  _BYTE v43[11];
  int v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  unint64_t v95;
  __int16 v96;
  int v97;
  double v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v2 = atomic_load((unsigned __int8 *)&qword_1023036E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1023036E8))
  {
    v5[0] = 0x20000000BLL;
    sub_100546300(qword_1023036D0, v5, 2uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1023036D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023036E8);
  }
  if (*(_BYTE *)(a1 + 16) == 8)
  {
    v6 = 0;
    *(_OWORD *)v5 = xmmword_101BB1ED0;
    memset(&v5[2], 0, 135);
    v7 = xmmword_101BB1ED0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11[0] = 0;
    *(_QWORD *)((char *)v11 + 5) = 0;
    *(_QWORD *)((char *)&v11[1] + 6) = 0;
    v12 = 0;
    memset(&v11[3], 0, 24);
    v13 = xmmword_101BB1ED0;
    v14 = 0;
    v15 = 0;
    v16 = -1.79769313e308;
    v27 = 0;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v28 = 0;
    v29 = 0;
    v30 = 0xFFEFFFFFFFFFFFFFLL;
    v31 = 0;
    v32 = 0;
    v38 = 0;
    v39 = 0;
    v44 = 0;
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v41 = 0u;
    v40 = 0u;
    v42 = 0;
    memset(v43, 0, sizeof(v43));
    v45 = 0xFFEFFFFFFFFFFFFFLL;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v65 = 0;
    v66 = 0xFFEFFFFFFFFFFFFFLL;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0xFFEFFFFFFFFFFFFFLL;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0xFFEFFFFFFFFFFFFFLL;
    v78 = 0;
    v77 = 0;
    v79 = 0x80000000800000;
    v81 = 0;
    v80 = 0;
    v82 = xmmword_101BB1EE0;
    v83 = 0x80000000800000;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v87 = 0xFFEFFFFFFFFFFFFFLL;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0;
    v95 = 0xFFEFFFFFFFFFFFFFLL;
    v96 = 0;
    v97 = 0;
    v98 = -1.79769313e308;
    v99 = 7;
    v100 = 0xFFEFFFFFFFFFFFFFLL;
    v101 = 0;
    v103 = 0;
    v102 = 0;
    v104 = 0;
    sub_1000D03AC(*(double **)(a1 + 8432), qword_1023036D0, (uint64_t)v5);
    if (v98 != -1.79769313e308)
    {
      v3 = 0;
      if (v16 != -1.79769313e308 && *(double *)&v19 > 0.0)
        v3 = v19;
      LODWORD(v4) = v99;
      *((_QWORD *)&v4 + 1) = v3;
      sub_1000E2A10((unsigned __int16 *)(a1 + 2344), &v4);
    }
  }
}

void sub_1006E30D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023036E8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E30F0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  BOOL v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  char v15;

  v1 = result;
  if (!*(_WORD *)(result + 2346))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
LABEL_26:
    if (v6 > 0xB || v5 > 3 || v4 >= 4)
      return sub_10023195C(v1, 11, (uint64_t)&v15);
    return result;
  }
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = -1.79769313e308;
  do
  {
    v8 = *(_DWORD *)sub_1006E5800((unsigned __int16 *)(v1 + 2344), v2);
    if (v8 == 2 || v8 == 13)
      ++v5;
    if (v8 == 14)
      ++v4;
    if (v8 == 6 || ((++v6, v10 = v8 > 5, v11 = (1 << v8) & 0x31, !v10) ? (v12 = v11 == 0) : (v12 = 1), !v12))
      ++v3;
    result = sub_1006E5800((unsigned __int16 *)(v1 + 2344), v2);
    if (*(double *)(result + 8) > v7)
    {
      result = sub_1006E5800((unsigned __int16 *)(v1 + 2344), v2);
      v7 = *(double *)(result + 8);
    }
    ++v2;
    v13 = *(unsigned __int16 *)(v1 + 2346);
  }
  while (v2 < v13);
  if (v7 <= 2.2352 || v13 != v3)
    goto LABEL_26;
  return result;
}

uint64_t sub_1006E323C(uint64_t a1)
{
  unsigned __int8 v1;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v1 = atomic_load((unsigned __int8 *)&qword_102303700);
  if ((v1 & 1) == 0)
  {
    v4 = a1;
    v5 = __cxa_guard_acquire(&qword_102303700);
    a1 = v4;
    if (v5)
    {
      v6 = 1;
      sub_1004AD1D8((unsigned __int8 *)&byte_1023036F0, "WorkoutPredictorTier2ConfidenceOverride", &v6, 0);
      __cxa_guard_release(&qword_102303700);
      a1 = v4;
    }
  }
  if (byte_1023036F0)
    return dword_1023036F4;
  v3 = *(unsigned __int8 *)(a1 + 16);
  switch(v3)
  {
    case 4:
      return sub_1006E5754(a1);
    case 8:
      return sub_1006E57A0(a1);
    case 6:
      return sub_1006E5754(a1);
  }
  return sub_1006E5000(a1);
}

void sub_1006E330C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303700);
  _Unwind_Resume(a1);
}

void sub_1006E3324(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v4 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, set rapid walking detection, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, set rapid walking detection, %{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::setRapidWalkingDetectionEnabled(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 8440) = a2;
}

BOOL sub_1006E34D8(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  double v4;
  _QWORD *v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  double Current;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  int v38;
  _BYTE v39[10];
  __int16 v40;
  _BYTE v41[18];
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;

  v2 = atomic_load((unsigned __int8 *)&qword_102303698);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303698))
  {
    sub_1018BEA14(buf, "WorkoutPredictorDistanceThresholdForMachineWorkouts", &qword_101BBE218, 0);
    qword_102303690 = *(_QWORD *)v39;
    __cxa_guard_release(&qword_102303698);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1023036A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1023036A8))
  {
    sub_1018BEA14(buf, "WorkoutPredictorDistanceLookbackForMachineWorkouts", "\nףp=\nG@", 0);
    qword_1023036A0 = *(_QWORD *)v39;
    __cxa_guard_release(&qword_1023036A8);
  }
  v4 = *(double *)&qword_1023036A0;
  Current = CFAbsoluteTimeGetCurrent();
  v25 = Current - v4;
  v23 = 0;
  v24 = 0.0;
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 16))(**(_QWORD **)(a1 + 8432));
  v6 = operator new(0x28uLL);
  *v6 = off_10214F638;
  v6[1] = &v25;
  v6[2] = &Current;
  v6[3] = &v24;
  v6[4] = &v23;
  *(_QWORD *)&v41[4] = v6;
  sub_100623698(v5, (uint64_t)buf);
  v7 = *(uint8_t **)&v41[4];
  if (*(uint8_t **)&v41[4] == buf)
  {
    v8 = 4;
    v7 = buf;
  }
  else
  {
    if (!*(_QWORD *)&v41[4])
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
  v10 = v23;
  v9 = v24;
  v11 = *(double *)&qword_102303690;
  v12 = *(unsigned __int8 *)(a1 + 16);
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v13 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
  {
    v14 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
    v15 = *(unsigned int *)(a1 + 2148);
    if (v14 < v15)
      v15 = 0;
    v16 = *(_QWORD *)(a1 + 2144 + 8 * (v14 - v15) + 8);
    *(_DWORD *)buf = 67110400;
    v38 = v12;
    *(_WORD *)v39 = 2048;
    *(_QWORD *)&v39[2] = v16;
    v40 = 2048;
    *(_QWORD *)v41 = qword_102303690;
    *(_WORD *)&v41[8] = 2050;
    *(_QWORD *)&v41[10] = qword_1023036A0;
    v42 = 2050;
    v43 = v9;
    v44 = 2050;
    v45 = v10;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Tier2Smoother, GPS check, current fsm state, %d, tier2, %lu, requested threshold, %{float}f, requested duration, %{public}f, distance traveled, %{public}f, distance count, %{public}lu", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v18 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
    v19 = *(unsigned int *)(a1 + 2148);
    if (v18 < v19)
      v19 = 0;
    v20 = *(_QWORD *)(a1 + 2144 + 8 * (v18 - v19) + 8);
    LODWORD(Current) = 67110400;
    HIDWORD(Current) = v12;
    v27 = 2048;
    v28 = v20;
    v29 = 2048;
    v30 = qword_102303690;
    v31 = 2050;
    v32 = qword_1023036A0;
    v33 = 2050;
    v34 = v9;
    v35 = 2050;
    v36 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Tier2Smoother, GPS check, current fsm state, %d, tier2, %lu, requested threshold, %{float}f, requested duration, %{public}f, distance traveled, %{public}f, distance count, %{public}lu", &Current, 58);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "std::pair<BOOL, double> CLWorkoutPredictorTier2Smoother::isAccruingOdometerDistance() const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return v11 < v9;
}

void sub_1006E38D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023036A8);
  _Unwind_Resume(a1);
}

void sub_1006E3934(uint64_t a1, double a2, double a3)
{
  _QWORD *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  unint64_t v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  unint64_t v25;
  _BYTE v26[24];
  double *v27;

  v13 = 0;
  v12 = 0;
  v5 = (_QWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 72))(**(_QWORD **)(a1 + 8432));
  v6 = (double *)operator new(0x28uLL);
  *(_QWORD *)v6 = off_10214F6B8;
  v6[1] = a2;
  v6[2] = a3;
  *((_QWORD *)v6 + 3) = &v13;
  *((_QWORD *)v6 + 4) = &v12;
  v27 = v6;
  sub_1006E3C04(v5, (uint64_t)v26);
  v7 = v27;
  if (v27 == (double *)v26)
  {
    v8 = 4;
    v7 = (double *)v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  if (v12 <= 9)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v21 = a2;
      v22 = 2050;
      v23 = a3;
      v24 = 2048;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Tier2Smoother swimcheck, insufficient samples in range start %{public}f, end %{public}f, num %zu", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v14 = 134349568;
      v15 = a2;
      v16 = 2050;
      v17 = a3;
      v18 = 2048;
      v19 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother swimcheck, insufficient samples in range start %{public}f, end %{public}f, num %zu", &v14, 32);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "float CLWorkoutPredictorTier2Smoother::calculateAveragePressure(CFAbsoluteTime, CFAbsoluteTime) const", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1006E3BC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1006E3C04(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  _BYTE v21[24];
  _BYTE *v22;

  v2 = result[7];
  if (!v2)
    return result;
  v3 = result[6];
  v4 = v3 + v2;
  v5 = (v3 + v2) >> 8;
  v6 = result[3];
  v7 = (_QWORD *)(v6 + 8 * v5);
  if (result[4] == v6)
  {
    v10 = 0;
    v15 = v7;
    v16 = 0;
    v17 = v7;
    v18 = 0;
    v9 = (_QWORD *)(v6 + 8 * (v3 >> 8));
  }
  else
  {
    v8 = *v7 + 16 * v4;
    v15 = v7;
    v16 = v8;
    v17 = v7;
    v18 = v8;
    v9 = (_QWORD *)(v6 + 8 * (v3 >> 8));
    v10 = *v9 + 16 * v3;
  }
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v9;
  v14[3] = v10;
  sub_100270E34((uint64_t)v19, a2);
  sub_1006E68BC((uint64_t)&v15, (uint64_t)v14, (uint64_t)v19, (uint64_t)v21);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
    goto LABEL_9;
  }
  if (v22)
  {
    v12 = 5;
LABEL_9:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  result = v20;
  if (v20 == v19)
  {
    v13 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_1006E3D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_1006E3D74(uint64_t a1)
{
  double v2;
  uint64_t v3;
  __int16 v4;
  double Current;
  double v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  NSObject *v13;
  _BOOL8 result;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  __int128 v21;
  _DWORD v22[2];
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  if (*(_BYTE *)(a1 + 8442))
    return 1;
  v2 = CFAbsoluteTimeGetCurrent() + -300.0 + 10.0;
  v3 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 72))(**(_QWORD **)(a1 + 8432));
  if (!sub_1000DCDCC(v3, &v21, v2))
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v16 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Tier2Smoother swimcheck, failed to get first entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother swimcheck, failed to get first entry", v22, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::isWaterOccludedOrPressureDeltaPresent(const ESwimDetected *) const", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    return 1;
  }
  v4 = WORD4(v21);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = Current + -30.0;
  v7 = Current + -300.0;
  sub_1006E3934(a1, Current + -30.0, Current);
  v9 = v8;
  sub_1006E3934(a1, v7, v7 + 30.0);
  v11 = v10;
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v12 = v4 & 0x1000;
  v13 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240960;
    v30 = v12 >> 12;
    v31 = 2050;
    v32 = v6;
    v33 = 2050;
    v34 = v9;
    v35 = 2050;
    v36 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Tier2Smoother swimcheck,waterOccluded,%{public}d,startTime,%{public}f,averageNow,%{public}f,,averageHistorical,%{public}f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v22[0] = 67240960;
    v22[1] = v12 >> 12;
    v23 = 2050;
    v24 = v6;
    v25 = 2050;
    v26 = v9;
    v27 = 2050;
    v28 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother swimcheck,waterOccluded,%{public}d,startTime,%{public}f,averageNow,%{public}f,,averageHistorical,%{public}f", v22, 38);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::isWaterOccludedOrPressureDeltaPresent(const ESwimDetected *) const", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  result = 1;
  if (v9 != 0.0 && v11 != 0.0)
    return (float)(v9 - v11) > 500.0 || v12 != 0;
  return result;
}

uint64_t sub_1006E4170(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t result;
  double Current;
  double v7;
  double v8;
  _QWORD *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  _BYTE v30[24];
  double *v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  if (sub_1006E46FC(a1) > 720.0)
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v4 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, bypassing exercise minute requirements for sustained walking", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, bypassing exercise minute requirements for sustained walking", &v22, v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::areEnoughExerciseMinutesPresent(const int) const", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    return 1;
  }
  Current = CFAbsoluteTimeGetCurrent();
  if (a2 == 4)
  {
    v7 = -420.0;
LABEL_12:
    v8 = Current + v7;
    HIDWORD(v21) = 0;
    v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8432) + 80))(**(_QWORD **)(a1 + 8432));
    v10 = (double *)operator new(0x20uLL);
    *(_QWORD *)v10 = off_10214F748;
    v10[1] = v8;
    v10[2] = Current;
    *((_QWORD *)v10 + 3) = (char *)&v21 + 4;
    v31 = v10;
    sub_1006E49DC(v9, (uint64_t)v30);
    v11 = v31;
    if (v31 == (double *)v30)
    {
      v12 = 4;
      v11 = (double *)v30;
    }
    else
    {
      if (!v31)
      {
LABEL_27:
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_10214F608);
        v16 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349824;
          v33 = v8;
          v34 = 2050;
          v35 = Current;
          v36 = 1026;
          v37 = HIDWORD(v21);
          v38 = 1026;
          v39 = a2;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Tier2Smoother,briskCheck,startTime,%{public}f,endTime,%{public}f,numExerciseMinutes,%{public}u,threshold,%{public}d", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_10214F608);
          v22 = 134349824;
          v23 = v8;
          v24 = 2050;
          v25 = Current;
          v26 = 1026;
          v27 = HIDWORD(v21);
          v28 = 1026;
          v29 = a2;
          LODWORD(v21) = 34;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Tier2Smoother,briskCheck,startTime,%{public}f,endTime,%{public}f,numExerciseMinutes,%{public}u,threshold,%{public}d", &v22, v21);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::areEnoughExerciseMinutesPresent(const int) const", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        return SHIDWORD(v21) >= a2;
      }
      v12 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
    goto LABEL_27;
  }
  if (a2 == 7)
  {
    v7 = -600.0;
    goto LABEL_12;
  }
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v13 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Tier2Smoother,passed unknown threshold of %d", buf, 8u);
  }
  result = sub_1001BFF7C(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v22 = 67109120;
    LODWORD(v23) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "Tier2Smoother,passed unknown threshold of %d", &v22);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWorkoutPredictorTier2Smoother::areEnoughExerciseMinutesPresent(const int) const", "%s\n", v14);
    if (v15 != buf)
      free(v15);
    return 0;
  }
  return result;
}

void sub_1006E46BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_1006E46FC(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  double result;
  double v5;
  _QWORD v6[19];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v12[6];
  char v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[25];
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _BYTE v44[11];
  int v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  unint64_t v96;
  __int16 v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v2 = atomic_load((unsigned __int8 *)&qword_102303720);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_102303720))
  {
    LODWORD(v6[0]) = 0;
    sub_100546300(qword_102303708, v6, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_102303708, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303720);
  }
  v7 = 0;
  *(_OWORD *)v6 = xmmword_101BB1ED0;
  memset(&v6[2], 0, 135);
  v8 = xmmword_101BB1ED0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 5) = 0;
  *(_QWORD *)((char *)&v12[1] + 6) = 0;
  v13 = 0;
  memset(&v12[3], 0, 24);
  v14 = xmmword_101BB1ED0;
  v15 = 0;
  v16 = 0;
  v17 = 0xFFEFFFFFFFFFFFFFLL;
  v28 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v29 = 0;
  v30 = 0;
  v31 = 0xFFEFFFFFFFFFFFFFLL;
  v32 = 0;
  v33 = 0;
  v39 = 0;
  v40 = 0;
  v45 = 0;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v42 = 0u;
  v41 = 0u;
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v46 = 0xFFEFFFFFFFFFFFFFLL;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v66 = 0;
  v67 = 0xFFEFFFFFFFFFFFFFLL;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0xFFEFFFFFFFFFFFFFLL;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0xFFEFFFFFFFFFFFFFLL;
  v79 = 0;
  v78 = 0;
  v80 = 0x80000000800000;
  v82 = 0;
  v81 = 0;
  v83 = xmmword_101BB1EE0;
  v84 = 0x80000000800000;
  v85 = 0u;
  v86 = 0u;
  v87 = 0;
  v88 = 0xFFEFFFFFFFFFFFFFLL;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v96 = 0xFFEFFFFFFFFFFFFFLL;
  v97 = 0;
  v98 = 0;
  v99 = 0xFFEFFFFFFFFFFFFFLL;
  v100 = 7;
  v101 = 0xFFEFFFFFFFFFFFFFLL;
  v102 = 0;
  v104 = 0;
  v103 = 0;
  v105 = 0;
  v3 = sub_1000D03AC(*(double **)(a1 + 8432), qword_102303708, (uint64_t)v6);
  result = 0.0;
  if (v3)
  {
    v5 = *(double *)(a1 + 2736);
    if (*(double *)&v6[1] > v5)
      return *(double *)&v6[1] - v5;
  }
  return result;
}

void sub_1006E49BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102303720);
  _Unwind_Resume(a1);
}

_QWORD *sub_1006E49DC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  v2 = result[7];
  if (!v2)
    return result;
  v3 = result[6];
  v4 = v3 + v2;
  v5 = (v3 + v2) / 0xAA;
  v6 = result[3];
  if (result[4] == v6)
  {
    v9 = 0;
    v14 = v6 + 8 * v5;
    v15 = 0;
    v16 = v14;
    v17 = 0;
    v8 = (_QWORD *)(v6 + 8 * (v3 / 0xAA));
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 8 * v5);
    v14 = v6 + 8 * v5;
    v15 = v7 + 24 * (v4 - 170 * v5);
    v16 = v14;
    v17 = v15;
    v8 = (_QWORD *)(v6 + 8 * (v3 / 0xAA));
    v9 = *v8 + 24 * (v3 % 0xAA);
  }
  v13[0] = v8;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v9;
  sub_100270E34((uint64_t)v18, a2);
  sub_1006E6AD4((uint64_t)&v14, (uint64_t)v13, (uint64_t)v18, (uint64_t)v20);
  v10 = v21;
  if (v21 == v20)
  {
    v11 = 4;
    v10 = v20;
    goto LABEL_9;
  }
  if (v21)
  {
    v11 = 5;
LABEL_9:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1006E4B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1006E4B70(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v3 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 134217984;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, deescalating from distance accumulation, distance, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v5 = *a2;
    v8 = 134217984;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, deescalating from distance accumulation, distance, %f", COERCE_DOUBLE(&v8));
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::doGpsDistanceDeescalation(const EGpsDistanceDeescalation *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

uint64_t sub_1006E4D20(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[23];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[6];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[25];
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[11];
  int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  __int16 v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v2 = atomic_load((unsigned __int8 *)&qword_1023036C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1023036C8))
  {
    LODWORD(v4) = 0;
    sub_100546300(qword_1023036B0, &v4, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1023036B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023036C8);
  }
  v13 = 0;
  v4 = xmmword_101BB1ED0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v14 = xmmword_101BB1ED0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 5) = 0;
  *(_QWORD *)((char *)&v18[1] + 6) = 0;
  v19 = 0;
  memset(&v18[3], 0, 24);
  v20 = xmmword_101BB1ED0;
  v21 = 0;
  v22 = 0;
  v23 = 0xFFEFFFFFFFFFFFFFLL;
  v34 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v35 = 0;
  v36 = 0;
  v37 = 0xFFEFFFFFFFFFFFFFLL;
  v38 = 0;
  v39 = 0;
  v45 = 0;
  v46 = 0;
  v51 = 0;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v48 = 0u;
  v47 = 0u;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v72 = 0;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0xFFEFFFFFFFFFFFFFLL;
  v85 = 0;
  v84 = 0;
  v86 = 0x80000000800000;
  v88 = 0;
  v87 = 0;
  v89 = xmmword_101BB1EE0;
  v90 = 0x80000000800000;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 0xFFEFFFFFFFFFFFFFLL;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v104 = 0;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 7;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0;
  v110 = 0;
  v109 = 0;
  v111 = 0;
  result = sub_1000D03AC(*(double **)(a1 + 8432), qword_1023036B0, (uint64_t)&v4);
  if (*(double *)&v5 != 0.0)
    *(_QWORD *)(a1 + 2736) = v5;
  return result;
}

void sub_1006E4FE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023036C8);
  _Unwind_Resume(a1);
}

BOOL sub_1006E5000(uint64_t a1)
{
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t i;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v13;
  _DWORD *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  _BOOL4 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (*(_DWORD *)(a1 + 2148) == *(unsigned __int16 *)(a1 + 2146)
    && *(_DWORD *)(a1 + 28) == *(unsigned __int16 *)(a1 + 26))
  {
    if (*(_QWORD *)sub_1006E5360((unsigned __int16 *)(a1 + 2144), 0x13uLL))
    {
      v2 = 0;
    }
    else
    {
      v4 = 19;
      do
      {
        v5 = v4;
        if (v4 == 23)
          break;
        ++v4;
      }
      while (!*(_QWORD *)sub_1006E5360((unsigned __int16 *)(a1 + 2144), v5 + 1));
      v2 = v5 > 0x16;
    }
    if (*(_DWORD *)sub_1006E5558((unsigned __int16 *)(a1 + 24), 0x13uLL) == 0x200000)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v13 = 20;
      do
      {
        if (*(_DWORD *)sub_1006E5558((unsigned __int16 *)(a1 + 24), v13 - 1) == 16)
          break;
        if (*(_DWORD *)sub_1006E5558((unsigned __int16 *)(a1 + 24), v13 - 1) == 64)
          break;
        v6 = v13 - 1 > 0x16;
        if (v13 == 24)
          break;
        v14 = (_DWORD *)sub_1006E5558((unsigned __int16 *)(a1 + 24), v13++);
      }
      while (*v14 != 0x200000);
    }
    v7 = 0;
    for (i = 19; i != 24; ++i)
    {
      v9 = (_QWORD *)sub_1006E5360((unsigned __int16 *)(a1 + 2144), i);
      if ((*(_BYTE *)(a1 + 16) - 1) > 7u)
        v10 = 25;
      else
        v10 = qword_101BBE580[(char)(*(_BYTE *)(a1 + 16) - 1)];
      if (*v9 == v10)
        break;
      v7 = i > 0x16;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v3 = !v2 && !v6 && !v7;
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      v23 = v2;
      v24 = 1024;
      v25 = v6;
      v26 = 1024;
      v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Tier2Smoother,WorkoutPauseFlags,flagLastEpochsUnknown,%d,flagNoPatternInTier1,%d,flagNoCurrentStateInLastEpochs,%d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v18 = 1024;
      v19 = v6;
      v20 = 1024;
      v21 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Tier2Smoother,WorkoutPauseFlags,flagLastEpochsUnknown,%d,flagNoPatternInTier1,%d,flagNoCurrentStateInLastEpochs,%d", &v17, 20, 67109632);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "CLWorkoutClassifier_Type::Confidence CLWorkoutPredictorTier2Smoother::getWorkoutConfidenceForPatternedMotion() const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t sub_1006E5360(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMWorkoutType>::operator[](const size_t) const [T = CMWorkoutType]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

uint64_t sub_1006E5558(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CMMotionContext::MotionState>::operator[](const size_t) const [T = CMMotionContext::MotionState]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[44 * (v4 - v5) + 4];
}

uint64_t sub_1006E5754(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t result;

  v2 = sub_1006E5000(a1);
  if (*(_BYTE *)(a1 + 8440))
    LODWORD(result) = 1;
  else
    LODWORD(result) = sub_1006E4170(a1, 7);
  if (v2)
    return result;
  else
    return 0;
}

uint64_t sub_1006E57A0(uint64_t a1)
{
  unsigned __int16 *v1;
  unint64_t v2;

  if (*(_DWORD *)(a1 + 2348) != *(unsigned __int16 *)(a1 + 2346))
    return 0;
  v1 = (unsigned __int16 *)(a1 + 2344);
  v2 = 19;
  while (*(_DWORD *)sub_1006E5800(v1, v2) != 6)
  {
    if (++v2 == 24)
      return 0;
  }
  return 1;
}

uint64_t sub_1006E5800(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  unint64_t v17;
  __int16 v18;
  int v19;

  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v17 = a2;
      v18 = 1024;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214F7C8);
      v9 = *((_DWORD *)a1 + 1);
      v12 = 134218240;
      v13 = a2;
      v14 = 1024;
      v15 = v9;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", (size_t)&v12, 18);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "const T &CMQueue<CLWorkoutPredictorTier2Smoother::CyclingDescalationEntry>::operator[](const size_t) const [T = CLWorkoutPredictorTier2Smoother::CyclingDescalationEntry]", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

void sub_1006E59F8(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1006E5A28()
{
  operator delete();
}

__n128 sub_1006E5A3C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_10214F638;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1006E5A7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10214F638;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_1006E5AA4(uint64_t a1, double *a2)
{
  double result;
  double *v3;
  _QWORD *v4;

  result = *a2;
  if (*a2 >= **(double **)(a1 + 8) && result <= **(double **)(a1 + 16))
  {
    v3 = *(double **)(a1 + 24);
    v4 = *(_QWORD **)(a1 + 32);
    result = a2[1] + *v3;
    *v3 = result;
    ++*v4;
  }
  return result;
}

uint64_t sub_1006E5AEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006E5B28()
{
}

BOOL sub_1006E5B34(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = sub_1006E34D8(a1);
  if (v3)
  {
    v4 = v2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
      v7 = *(unsigned int *)(a1 + 2148);
      if (v6 < v7)
        v7 = 0;
      v8 = *(_QWORD *)(a1 + 2144 + 8 * (v6 - v7) + 8);
      *(_DWORD *)buf = 134218240;
      v21 = v8;
      v22 = 2048;
      v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, prevent escalation from distance accumulation, workout, %lu, distance, %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v10 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
      v11 = *(unsigned int *)(a1 + 2148);
      if (v10 < v11)
        v11 = 0;
      v12 = *(_QWORD *)(a1 + 2144 + 8 * (v10 - v11) + 8);
      v16 = 134218240;
      v17 = v12;
      v18 = 2048;
      v19 = v4;
      LODWORD(v15) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, prevent escalation from distance accumulation, workout, %lu, distance, %f", &v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::isMachineWorkoutStationary(const T *) const [T = CLWorkoutPredictorTier2Smoother::ERowDetected]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return !v3;
}

BOOL sub_1006E5D6C(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v3 = sub_1006E34D8(a1);
  if (v3)
  {
    v4 = v2;
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v5 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
      v7 = *(unsigned int *)(a1 + 2148);
      if (v6 < v7)
        v7 = 0;
      v8 = *(_QWORD *)(a1 + 2144 + 8 * (v6 - v7) + 8);
      *(_DWORD *)buf = 134218240;
      v21 = v8;
      v22 = 2048;
      v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, prevent escalation from distance accumulation, workout, %lu, distance, %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10214F608);
      v10 = *(unsigned __int16 *)(a1 + 2144) + (unint64_t)*(unsigned __int16 *)(a1 + 2146) - 1;
      v11 = *(unsigned int *)(a1 + 2148);
      if (v10 < v11)
        v11 = 0;
      v12 = *(_QWORD *)(a1 + 2144 + 8 * (v10 - v11) + 8);
      v16 = 134218240;
      v17 = v12;
      v18 = 2048;
      v19 = v4;
      LODWORD(v15) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, prevent escalation from distance accumulation, workout, %lu, distance, %f", &v16, v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Smoother::isMachineWorkoutStationary(const T *) const [T = CLWorkoutPredictorTier2Smoother::EEllipticalDetected]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return !v3;
}

uint64_t sub_1006E5FA4(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[23];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[6];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[25];
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[11];
  int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  __int16 v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A3EA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A3EA0))
  {
    LODWORD(v4) = 0;
    sub_100546300(qword_1022A3E88, &v4, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1022A3E88, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A3EA0);
  }
  v13 = 0;
  v4 = xmmword_101BB1ED0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v14 = xmmword_101BB1ED0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 5) = 0;
  *(_QWORD *)((char *)&v18[1] + 6) = 0;
  v19 = 0;
  memset(&v18[3], 0, 24);
  v20 = xmmword_101BB1ED0;
  v21 = 0;
  v22 = 0;
  v23 = 0xFFEFFFFFFFFFFFFFLL;
  v34 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v35 = 0;
  v36 = 0;
  v37 = 0xFFEFFFFFFFFFFFFFLL;
  v38 = 0;
  v39 = 0;
  v45 = 0;
  v46 = 0;
  v51 = 0;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v48 = 0u;
  v47 = 0u;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v72 = 0;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0xFFEFFFFFFFFFFFFFLL;
  v85 = 0;
  v84 = 0;
  v86 = 0x80000000800000;
  v88 = 0;
  v87 = 0;
  v89 = xmmword_101BB1EE0;
  v90 = 0x80000000800000;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 0xFFEFFFFFFFFFFFFFLL;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v104 = 0;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 7;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0;
  v110 = 0;
  v109 = 0;
  v111 = 0;
  sub_1000D03AC(*(double **)(a1 + 8432), qword_1022A3E88, (uint64_t)&v4);
  if (*(double *)&v5 != 0.0)
    *(_QWORD *)(a1 + 2736) = v5;
  return sub_1006E6294(a1);
}

void sub_1006E6274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A3EA0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E6294(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, resetting pedestrian stop detector FSM", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, resetting pedestrian stop detector FSM", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::resetPedestrianStopDetector(const T *) [T = CLWorkoutPredictorTier2Smoother::EWalkEscalation]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100CE2C60(a1 + 2760, 2u);
}

uint64_t sub_1006E6430(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[23];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[6];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[25];
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[11];
  int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  __int16 v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v2 = atomic_load((unsigned __int8 *)&qword_1022A3EC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1022A3EC0))
  {
    LODWORD(v4) = 0;
    sub_100546300(qword_1022A3EA8, &v4, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100546380, qword_1022A3EA8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1022A3EC0);
  }
  v13 = 0;
  v4 = xmmword_101BB1ED0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v14 = xmmword_101BB1ED0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 5) = 0;
  *(_QWORD *)((char *)&v18[1] + 6) = 0;
  v19 = 0;
  memset(&v18[3], 0, 24);
  v20 = xmmword_101BB1ED0;
  v21 = 0;
  v22 = 0;
  v23 = 0xFFEFFFFFFFFFFFFFLL;
  v34 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v35 = 0;
  v36 = 0;
  v37 = 0xFFEFFFFFFFFFFFFFLL;
  v38 = 0;
  v39 = 0;
  v45 = 0;
  v46 = 0;
  v51 = 0;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v48 = 0u;
  v47 = 0u;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v52 = 0xFFEFFFFFFFFFFFFFLL;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v72 = 0;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0xFFEFFFFFFFFFFFFFLL;
  v85 = 0;
  v84 = 0;
  v86 = 0x80000000800000;
  v88 = 0;
  v87 = 0;
  v89 = xmmword_101BB1EE0;
  v90 = 0x80000000800000;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 0xFFEFFFFFFFFFFFFFLL;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v104 = 0;
  v105 = 0xFFEFFFFFFFFFFFFFLL;
  v106 = 7;
  v107 = 0xFFEFFFFFFFFFFFFFLL;
  v108 = 0;
  v110 = 0;
  v109 = 0;
  v111 = 0;
  sub_1000D03AC(*(double **)(a1 + 8432), qword_1022A3EA8, (uint64_t)&v4);
  if (*(double *)&v5 != 0.0)
    *(_QWORD *)(a1 + 2736) = v5;
  return sub_1006E6720(a1);
}

void sub_1006E6700(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A3EC0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E6720(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_10214F608);
  v2 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tier2Smoother, resetting pedestrian stop detector FSM", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10214F608);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Tier2Smoother, resetting pedestrian stop detector FSM", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Smoother::resetPedestrianStopDetector(const T *) [T = CLWorkoutPredictorTier2Smoother::EAltWalkEscalation]", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100CE2C60(a1 + 2760, 2u);
}

uint64_t sub_1006E68BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 != *(_QWORD *)(a2 + 24))
  {
    v9 = *(_QWORD **)(a1 + 16);
    do
    {
      if (v6 == *v9)
        v6 = *(v9 - 1) + 4096;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v6 - 16);
      v9 = *(_QWORD **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if (v11 == *v9)
      {
        *(_QWORD *)(a1 + 16) = v9 - 1;
        v11 = *--v9 + 4096;
      }
      v6 = v11 - 16;
      *(_QWORD *)(a1 + 24) = v6;
    }
    while (v6 != *(_QWORD *)(a2 + 24));
  }
  return sub_1006E6970(a4, a3);
}

uint64_t sub_1006E6970(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1006E69D8()
{
  operator delete();
}

__n128 sub_1006E69EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_10214F6B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1006E6A2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10214F6B8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float sub_1006E6A54(uint64_t a1, uint64_t a2)
{
  double v2;
  float *v4;
  _QWORD *v5;

  v2 = *(double *)a2;
  if (*(double *)a2 >= *(double *)(a1 + 8) && v2 <= *(double *)(a1 + 16))
  {
    v4 = *(float **)(a1 + 24);
    v5 = *(_QWORD **)(a1 + 32);
    *(float *)&v2 = *(float *)(a2 + 12) + *v4;
    *v4 = *(float *)&v2;
    ++*v5;
  }
  return *(float *)&v2;
}

uint64_t sub_1006E6A8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006E6AC8()
{
}

uint64_t sub_1006E6AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 != *(_QWORD *)(a2 + 24))
  {
    v9 = *(_QWORD **)(a1 + 16);
    do
    {
      if (v6 == *v9)
        v6 = *(v9 - 1) + 4080;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v6 - 24);
      v9 = *(_QWORD **)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      if (v11 == *v9)
      {
        *(_QWORD *)(a1 + 16) = v9 - 1;
        v11 = *--v9 + 4080;
      }
      v6 = v11 - 24;
      *(_QWORD *)(a1 + 24) = v6;
    }
    while (v6 != *(_QWORD *)(a2 + 24));
  }
  return sub_1006E6B88(a4, a3);
}

uint64_t sub_1006E6B88(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1006E6BF0()
{
  operator delete();
}

__n128 sub_1006E6C04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10214F748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1006E6C44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10214F748;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1006E6C6C(uint64_t result, uint64_t a2)
{
  double v2;

  v2 = *(double *)(a2 + 8);
  if (v2 >= *(double *)(result + 8) && v2 <= *(double *)(result + 16))
    ++**(_DWORD **)(result + 24);
  return result;
}

uint64_t sub_1006E6C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1006E6CD0()
{
}

void sub_1006E6CDC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006E7040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1006E9738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_100261F44((uint64_t)&a27);
  sub_1006F0FB8(&a29);
  sub_1006F0FB8(&a35);
  _Unwind_Resume(a1);
}

void sub_1006EC3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,_QWORD *a40,uint64_t a41,char a42,_QWORD *a43,uint64_t a44,char a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_100008848((uint64_t)&a39, a40);
  sub_100008848((uint64_t)&a42, a43);
  sub_100261F44((uint64_t)&a45);
  if (__p)
  {
    a48 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1006F0FB8(&a51);
  sub_1006F0FB8(&a57);
  sub_1006F0FB8(&a63);
  _Unwind_Resume(a1);
}

void sub_1006ED82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1006EE150(double *a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("visitDuration");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[4]);
  v3[1] = CFSTR("arrivalUncertainty");
  v4[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[5]);
  v3[2] = CFSTR("exitUncertainty");
  v4[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[6]);
  v3[3] = CFSTR("timeDiffBtwArrivalAndLastRebase");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[7]);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_1006EF1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *__p;
  char a76;
  void *a77;
  uint64_t v77;

  if (a76 < 0)
    operator delete(__p);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a69);
  if (a68 < 0)
    operator delete(a63);
  if (a62 < 0)
    operator delete(a57);
  if (a56 < 0)
    operator delete(a51);
  if (a50 < 0)
    operator delete(a45);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a77);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (*(char *)(v77 - 225) < 0)
    operator delete(*(void **)(v77 - 248));
  if (*(char *)(v77 - 177) < 0)
    operator delete(*(void **)(v77 - 200));
  if (*(char *)(v77 - 129) < 0)
    operator delete(*(void **)(v77 - 152));
  _Unwind_Resume(a1);
}

id sub_1006EF3F4(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  double v12;
  _QWORD v14[13];
  _QWORD v15[13];

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v14[0] = CFSTR("inVisit");
  v15[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v14[1] = CFSTR("demAvailableInTrack");
  v15[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 49));
  v14[2] = CFSTR("rebaseSource");
  v15[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v14[3] = CFSTR("firstRebaseSinceLocationdStart");
  v15[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 57));
  v14[4] = CFSTR("forcedGPSRecently");
  v15[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 50));
  v14[5] = CFSTR("altitudeError_binned");
  v3 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v3 = (_QWORD *)*v3;
  v15[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v14[6] = CFSTR("timeToFirstRebase_binned");
  v4 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v4 = (_QWORD *)*v4;
  v15[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v14[7] = CFSTR("referenceUncertainty_binned");
  v5 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v5 = (_QWORD *)*v5;
  v15[7] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v14[8] = CFSTR("uncertainty_binned");
  v6 = (_QWORD *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v6 = (_QWORD *)*v6;
  v15[8] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v14[9] = CFSTR("timeSinceVisitEntry_binned");
  v7 = (_QWORD *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    v7 = (_QWORD *)*v7;
  v15[9] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v14[10] = CFSTR("correction_binned");
  v8 = (_QWORD *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    v8 = (_QWORD *)*v8;
  v15[10] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
  v14[11] = CFSTR("distanceSinceLastRebase_binned");
  v9 = (_QWORD *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    v9 = (_QWORD *)*v9;
  v15[11] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  v14[12] = CFSTR("timeSinceLastRebase_binned");
  v10 = (_QWORD *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    v10 = (_QWORD *)*v10;
  v15[12] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
  objc_msgSend(v2, "setDictionary:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 13));
  LODWORD(v11) = *(_DWORD *)(a1 + 40);
  if (*(float *)&v11 != 3.4028e38 && *(float *)(a1 + 44) != 3.4028e38)
  {
    *(float *)&v11 = (float)(int)(float)(*(float *)&v11 * 100.0) / 100.0;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11), CFSTR("latitude"));
    *(float *)&v12 = (float)(int)(float)(*(float *)(a1 + 44) * 100.0) / 100.0;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12), CFSTR("longitude"));
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isIHAAuthorized"))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)), CFSTR("inOutdoorWorkout"));
  return v2;
}

uint64_t sub_1006EF71C(uint64_t a1, uint64_t a2)
{
  return sub_1006F05B0(a1 + 40, (__int128 *)(a2 + 40));
}

uint64_t sub_1006EF728(uint64_t a1)
{
  return sub_1006F082C(a1 + 40);
}

void sub_1006EFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *a73;
  char a74;
  uint64_t v74;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a70);
  if (a69 < 0)
    operator delete(a64);
  if (*(char *)(v74 - 97) < 0)
    operator delete(*(void **)(v74 - 120));
  if (*(char *)(v74 - 49) < 0)
    operator delete(*(void **)(v74 - 72));
  _Unwind_Resume(a1);
}

void sub_1006EFCCC()
{
  JUMPOUT(0x1006EFC9CLL);
}

void sub_1006EFCD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 144);
  if (v1)
  {
    *(_QWORD *)(v0 - 136) = v1;
    JUMPOUT(0x1006EFCB0);
  }
  JUMPOUT(0x1006EFCB4);
}

void sub_1006EFCE8()
{
  JUMPOUT(0x1006EFCB4);
}

void sub_1006EFCF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  if (v1)
  {
    *(_QWORD *)(v0 - 88) = v1;
    JUMPOUT(0x1006EFCC0);
  }
  JUMPOUT(0x1006EFCC4);
}

NSDictionary *sub_1006EFD04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v10[8];
  _QWORD v11[8];

  v10[0] = CFSTR("duration_binned");
  v2 = (_QWORD *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    v2 = (_QWORD *)*v2;
  v11[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v10[1] = CFSTR("uncertaintyAtEntry_binned");
  v3 = (_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v3 = (_QWORD *)*v3;
  v11[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v10[2] = CFSTR("uncertaintyAtRebase_binned");
  v4 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v4 = (_QWORD *)*v4;
  v11[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v10[3] = CFSTR("timeFromEnterToRebase_binned");
  v5 = (_QWORD *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v5 = (_QWORD *)*v5;
  v11[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v10[4] = CFSTR("correctionAtRebase_binned");
  v6 = (_QWORD *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    v6 = (_QWORD *)*v6;
  v11[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v10[5] = CFSTR("altitudeErrorAtRebase_binned");
  v7 = (_QWORD *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    v7 = (_QWORD *)*v7;
  v11[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v10[6] = CFSTR("referenceUncertaintyAtRebase_binned");
  v8 = (_QWORD *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    v8 = (_QWORD *)*v8;
  v11[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
  v10[7] = CFSTR("rebaseSource");
  v11[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 8);
}

uint64_t sub_1006EFEA8(uint64_t a1, uint64_t a2)
{
  return sub_1006F08CC(a1 + 32, a2 + 32);
}

uint64_t sub_1006EFEB4(uint64_t a1)
{
  return sub_1006F0AF0(a1 + 32);
}

uint64_t sub_1006EFEBC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  void **v20;
  __int128 v21;

  v4 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  v5 = a1 + 24;
  v6 = (__int128 *)((char *)a2 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)v5);
  v7 = *v6;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v5 = v7;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v8 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v8);
  v9 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v8 = v9;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v10 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v10);
  v11 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v10 = v11;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v12 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v12);
  v13 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v12 = v13;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v14 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v14);
  v15 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v14 = v15;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  v16 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v16);
  v17 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 167) = 0;
  *((_BYTE *)a2 + 144) = 0;
  v18 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v18);
  v19 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)v18 = v19;
  *((_BYTE *)a2 + 191) = 0;
  *((_BYTE *)a2 + 168) = 0;
  v20 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v20);
  v21 = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_OWORD *)v20 = v21;
  *((_BYTE *)a2 + 215) = 0;
  *((_BYTE *)a2 + 192) = 0;
  return a1;
}

void sub_1006F0584(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_1006F05B0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  v4 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 72), *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 96), *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 120), *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(a1 + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 144), *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v10 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 144) = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 168), *((void **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v11;
  }
  v12 = (_BYTE *)(a1 + 192);
  if (*((char *)a2 + 215) < 0)
  {
    sub_100115CE4(v12, *((void **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v13 = a2[12];
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
    *(_OWORD *)v12 = v13;
  }
  return a1;
}

void sub_1006F0780(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (v1[191] < 0)
    operator delete(*v8);
  if (v1[167] < 0)
    operator delete(*v7);
  if (v1[143] < 0)
    operator delete(*v6);
  if (v1[119] < 0)
    operator delete(*v5);
  if (v1[95] < 0)
    operator delete(*v4);
  if (v1[71] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F082C(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1006F08CC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 128), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v9;
  }
  v10 = (_BYTE *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0)
  {
    sub_100115CE4(v10, *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)v10 = v11;
  }
  return a1;
}

void sub_1006F0A5C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (v1[151] < 0)
    operator delete(*v7);
  if (v1[127] < 0)
    operator delete(*v6);
  if (v1[103] < 0)
    operator delete(*v5);
  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F0AF0(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1006F0B80(uint64_t a1)
{
  *(_DWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = -10;
  *(_WORD *)(a1 + 16) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 24), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 48), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 72), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 96), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 120), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 144), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 168), "NULL");
  sub_1015A2E04((_QWORD *)(a1 + 192), "NULL");
  return a1;
}

void sub_1006F0C70(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (v1[191] < 0)
    operator delete(*v8);
  if (v1[167] < 0)
    operator delete(*v7);
  if (v1[143] < 0)
    operator delete(*v6);
  if (v1[119] < 0)
    operator delete(*v5);
  if (v1[95] < 0)
    operator delete(*v4);
  if (v1[71] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1006F0D1C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 695) < 0)
      operator delete(*(void **)(a2 + 672));
    operator delete();
  }
}

uint64_t **sub_1006F0D64(uint64_t **a1, int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t **v10;
  int v11;
  char *v12;
  __int128 v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (char *)operator new(0x50uLL);
    *((_DWORD *)v12 + 8) = *a3;
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *(_OWORD *)(v12 + 56) = v13;
    *((_QWORD *)v12 + 9) = *(_QWORD *)(a4 + 32);
    sub_1000145B0(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

_QWORD *sub_1006F0E34(_QWORD *a1, char *a2, _QWORD *a3, char *a4, _QWORD *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 4);
  return sub_1006F0E68(a1, a2, a3, v5);
}

_QWORD *sub_1006F0E68(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = 32 * (v9 - v8) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100036DA4(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 16 * v11;
  v24[0] = v8 + 8 * (v11 >> 8);
  v24[1] = v14;
  result = sub_1004CE854((uint64_t)v24, a4);
  while (v14 != v16)
  {
    v17 = (_QWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_QWORD *)v14 == v17)
    {
      v17 = (_QWORD *)v14;
    }
    else
    {
      v18 = (_QWORD *)v14;
      do
      {
        *v18 = *a3;
        v19 = a3[1];
        v18[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        a3 += 2;
        if ((_QWORD *)((char *)a3 - *a2) == (_QWORD *)4096)
        {
          v22 = (_QWORD *)a2[1];
          ++a2;
          a3 = v22;
        }
        v18 += 2;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result)
      break;
    v23 = v13[1];
    ++v13;
    v14 = v23;
  }
  return result;
}

uint64_t sub_1006F0FB8(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = sub_100261F44(v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_1006F10C8()
{
  _OWORD *v0;
  _DWORD *v1;
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;

  sub_1015A2E04(qword_102303728, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303728, (void *)&_mh_execute_header);
  qword_102303740 = 0x4039000000000000;
  qword_102303750 = 0;
  unk_102303758 = 0;
  qword_102303748 = 0;
  v0 = operator new(0x30uLL);
  qword_102303750 = (uint64_t)(v0 + 3);
  unk_102303758 = v0 + 3;
  *v0 = xmmword_101BBE6A8;
  v0[1] = unk_101BBE6B8;
  v0[2] = xmmword_101BBE6C8;
  qword_102303748 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102303748, (void *)&_mh_execute_header);
  qword_102303768 = 0;
  unk_102303770 = 0;
  qword_102303760 = 0;
  sub_10027205C(&qword_102303760, (const void *)qword_102303748, qword_102303750, (qword_102303750 - qword_102303748) >> 2);
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102303760, (void *)&_mh_execute_header);
  qword_102303780 = 0;
  unk_102303788 = 0;
  qword_102303778 = 0;
  v1 = operator new(0x24uLL);
  qword_102303780 = (uint64_t)(v1 + 9);
  unk_102303788 = v1 + 9;
  v1[8] = 1150681088;
  *(_OWORD *)v1 = xmmword_101BBE6D8;
  *((_OWORD *)v1 + 1) = unk_101BBE6E8;
  qword_102303778 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102303778, (void *)&_mh_execute_header);
  qword_102303798 = 0;
  unk_1023037A0 = 0;
  qword_102303790 = 0;
  v2 = operator new(0x1CuLL);
  qword_102303798 = (uint64_t)v2 + 28;
  unk_1023037A0 = (char *)v2 + 28;
  *v2 = xmmword_101BBE6FC;
  *(_OWORD *)((char *)v2 + 12) = *(__int128 *)((char *)&xmmword_101BBE6FC + 12);
  qword_102303790 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_102303790, (void *)&_mh_execute_header);
  qword_1023037B0 = 0;
  unk_1023037B8 = 0;
  qword_1023037A8 = 0;
  v3 = operator new(0x4CuLL);
  qword_1023037B0 = (uint64_t)v3 + 76;
  unk_1023037B8 = (char *)v3 + 76;
  v3[2] = xmmword_101BBE738;
  v3[3] = unk_101BBE748;
  *(_OWORD *)((char *)v3 + 60) = unk_101BBE754;
  *v3 = xmmword_101BBE718;
  v3[1] = unk_101BBE728;
  qword_1023037A8 = (uint64_t)v3;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023037A8, (void *)&_mh_execute_header);
  qword_1023037C8 = 0;
  unk_1023037D0 = 0;
  qword_1023037C0 = 0;
  v4 = operator new(0x38uLL);
  qword_1023037C8 = (uint64_t)v4 + 56;
  unk_1023037D0 = (char *)v4 + 56;
  *v4 = xmmword_101BBE764;
  v4[1] = unk_101BBE774;
  v4[2] = xmmword_101BBE784;
  *((_QWORD *)v4 + 6) = 0x48F4240048435000;
  qword_1023037C0 = (uint64_t)v4;
  __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023037C0, (void *)&_mh_execute_header);
  qword_1023037E0 = 0;
  unk_1023037E8 = 0;
  qword_1023037D8 = 0;
  v5 = operator new(0x30uLL);
  qword_1023037E0 = (uint64_t)(v5 + 3);
  unk_1023037E8 = v5 + 3;
  *v5 = xmmword_101BBE79C;
  v5[1] = unk_101BBE7AC;
  v5[2] = xmmword_101BBE7BC;
  qword_1023037D8 = (uint64_t)v5;
  return __cxa_atexit((void (*)(void *))sub_10041C534, &qword_1023037D8, (void *)&_mh_execute_header);
}

uint64_t sub_1006F1338(uint64_t a1, void *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  BOOL v10[16];
  void *__p;
  std::__shared_weak_count *v12;

  v3 = sub_100AD58FC(a1, a2);
  *v3 = off_10214F8A0;
  v3[14] = 0;
  v3[15] = 0;
  sub_1009CB60C((uint64_t)(v3 + 16));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_1001E4804(&__p);
  v10[0] = 0;
  v4 = sub_1001E4874((uint64_t)__p, "CLTSPEnableDeviceMotionVDRNotifications", v10);
  if (v10[0])
    v5 = v4;
  else
    v5 = 0;
  v6 = v12;
  if (!v12)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
LABEL_9:
      operator new();
  }
  else
  {
LABEL_8:
    if (v5)
      goto LABEL_9;
  }
  return a1;
}

void sub_1006F17BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = *(_QWORD *)(v18 + 200);
  *(_QWORD *)(v18 + 200) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(v18 + 192);
  *(_QWORD *)(v18 + 192) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *v23;
  *v23 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_1006F1E24(v21, 0);
  nullsub_34(v20);
  sub_100694874(v19, 0);
  v28 = *v22;
  *v22 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_100AD59C4(v18);
  _Unwind_Resume(a1);
}

void sub_1006F1904(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLVDR2DofNotifierFromDM::maintainEstimatorState");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214F998);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromDM::maintainEstimatorState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromDM::maintainEstimatorState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1006F1ED0(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1006F1AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006F1AD4(uint64_t a1, uint64_t a2)
{
  sub_1006F2610(a2, a1);
}

void sub_1006F1AE4(uint64_t a1, uint64_t a2, CLMotionActivity *a3, uint64_t a4)
{
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLVDR2DofNotifierFromDM::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214F998);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromDM::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromDM::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006F2924(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006F1C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006F1CB4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 5 && (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1)
    sub_1009CB61C(a4 + 128, *(double *)(a3 + 184), *(double *)(a3 + 504));
}

uint64_t sub_1006F1CE8(uint64_t a1)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_10214F8A0;
  v2 = (_QWORD **)(a1 + 160);
  if (*(_QWORD *)(a1 + 160))
    sub_1006F1E24((_QWORD **)(a1 + 160), 0);
  if (*(_QWORD *)(a1 + 120))
    sub_100694874((uint64_t *)(a1 + 120), 0);
  v3 = sub_1002433D4();
  sub_1000A4A6C(v3, 1, *(_QWORD *)(a1 + 192));
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 1);
    v5 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (*(_QWORD *)(a1 + 112))
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 184) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8), 5);
    }
  }
  v6 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1006F1E24(v2, 0);
  nullsub_34(a1 + 128);
  sub_100694874((uint64_t *)(a1 + 120), 0);
  v9 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return sub_100AD59C4(a1);
}

_QWORD *sub_1006F1E24(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1009E0A8C(result);
    operator delete();
  }
  return result;
}

void sub_1006F1E64(uint64_t a1)
{
  sub_1006F1CE8(a1);
  operator delete();
}

uint64_t sub_1006F1E88(int a1, CLMotionActivity *this)
{
  if ((CLMotionActivity::isDriving(this) & 1) != 0 || (CLMotionActivity::isInVehicle(this) & 1) != 0)
    return 1;
  else
    return CLMotionActivity::isVehicularHighConfidence(this);
}

void sub_1006F1ED0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  CFAbsoluteTime Current;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  __int16 v26;
  void *__p[2];
  char v28;
  uint8_t buf[8];

  v4 = *(unsigned __int8 *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 200);
  if (v4)
  {
    if (*(int *)(v5 + 8) < 1)
    {
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
      v11 = qword_1022A01A8;
      if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#VDR, CLVDR2DofNotifierFromDM::onPowerAssertionTimerEvent establishing power assertion", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
        v26 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR, CLVDR2DofNotifierFromDM::onPowerAssertionTimerEvent establishing power assertion", &v26, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      v12 = *(_QWORD *)(a1 + 200);
      sub_1015A2E04(v24, "none");
      sub_10002B684(v12, (uint64_t *)v24);
      if (v25 < 0)
        operator delete(v24[0]);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
      v13 = qword_1022A01A8;
      if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#VDR,allocating CLVDR2DofNotifierFromDM estimator", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
        v26 = 0;
        LODWORD(v23) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,allocating CLVDR2DofNotifierFromDM estimator", &v26, v23);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      operator new();
    }
    sub_100E3E6F0(v5);
    v6 = *(_QWORD *)(a1 + 200);
    sub_1015A2E04(__p, "none");
    sub_10002B684(v6, (uint64_t *)__p);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else if (v5)
  {
    if (*(int *)(v5 + 8) >= 1)
    {
      v7 = *(double *)(a1 + 168);
      if (v7 < sub_1001FCBB4() + -300.0)
      {
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
        v8 = qword_1022A01A8;
        if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#VDR, CLVDR2DofNotifierFromDM::onPowerAssertionTimerEvent releasing power assertion", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01A0 != -1)
            dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
          v26 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR, CLVDR2DofNotifierFromDM::onPowerAssertionTimerEvent releasing power assertion", &v26, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        sub_100E3E6F0(*(_QWORD *)(a1 + 200));
        if (qword_1022A01A0 != -1)
          dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
        v9 = qword_1022A01A8;
        if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#VDR,deallocating CLVDR2DofNotifierFromDM estimator", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01A0 != -1)
            dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
          v26 = 0;
          LODWORD(v23) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,deallocating CLVDR2DofNotifierFromDM estimator", &v26, v23);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        sub_1006F1E24((_QWORD **)(a1 + 160), 0);
        v10 = sub_1002433D4();
        sub_1000A4A6C(v10, 1, *(_QWORD *)(a1 + 192));
      }
    }
  }
  if (a2)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001F40D0(a2, Current + 10.0);
  }
}

void sub_1006F2580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1006F2610(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  double v17;
  uint8_t buf[16];

  if (!a2 || !*(_QWORD *)(a1 + 160))
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
    v9 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#VDR, CLVDR2DofNotifierFromDM::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR, CLVDR2DofNotifierFromDM::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.", &v15, 2);
LABEL_23:
    v12 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::handleDeviceMotionData(const CLDeviceMotion::Sample *)", "%s\n", v10);
    if (v12 != buf)
      free(v12);
    return;
  }
  v17 = -1.0;
  if (sub_1009CB81C(a1 + 128, &v17, *(double *)a2))
  {
    v4 = *(_DWORD *)(a2 + 48);
    v5 = *(_DWORD *)(a2 + 60);
    v6 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 8)), *(float64x2_t *)(a2 + 24));
    *(int8x16_t *)buf = vextq_s8(v6, v6, 4uLL);
    v7 = *(_QWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 40);
    sub_10012C97C((float32x4_t *)buf, *(float32x4_t *)buf);
    v15 = v7;
    v16 = v5;
    v13 = v8;
    v14 = v4;
    sub_1009E0DA8(*(_QWORD *)(a1 + 160), (float *)buf, (float *)&v15, v17, (uint64_t)&v13, (float *)&v13);
    return;
  }
  if (*(double *)a2 - *(double *)(a1 + 152) > 1.0)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)a2;
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
    v11 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#VDR, CLVDR2DofNotifierFromDM::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
      LOWORD(v15) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR, CLVDR2DofNotifierFromDM::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.", &v15, 2);
      goto LABEL_23;
    }
  }
}

void sub_1006F2924(uint64_t a1, int a2, int a3, CLMotionActivity *this)
{
  int v5;
  int v6;
  uint64_t v7;

  v5 = sub_1006F1E88(a1, this);
  v6 = *(unsigned __int8 *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = v5;
  if (v6 != v5)
  {
    *(double *)(a1 + 168) = sub_1001FCBB4();
    v7 = *(_QWORD *)(a1 + 120);
    if (v7)
      sub_1006F1ED0(a1, v7);
  }
}

void sub_1006F2978(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;

  if (sub_1006F2DD4(a1, (double *)a2))
  {
    v4 = a2[1];
    v39 = *a2;
    v40 = v4;
    v41 = a2[2];
    v42 = *((_QWORD *)a2 + 6);
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
    v5 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      v8 = *((_QWORD *)a2 + 2);
      v9 = *((_QWORD *)a2 + 3);
      v10 = *((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      v12 = *((_QWORD *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      v58 = v6;
      v59 = 2050;
      v60 = v7;
      v61 = 2050;
      v62 = v8;
      v63 = 2050;
      v64 = v9;
      v65 = 2050;
      v66 = v10;
      v67 = 2050;
      v68 = v11;
      v69 = 2050;
      v70 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifier,DM,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{public}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSpeedCov_radmps,%{public}.6f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
      v21 = *(_QWORD *)a2;
      v22 = *((_QWORD *)a2 + 1);
      v23 = *((_QWORD *)a2 + 2);
      v24 = *((_QWORD *)a2 + 3);
      v25 = *((_QWORD *)a2 + 4);
      v26 = *((_QWORD *)a2 + 5);
      v27 = *((_QWORD *)a2 + 6);
      v43 = 134350592;
      v44 = v21;
      v45 = 2050;
      v46 = v22;
      v47 = 2050;
      v48 = v23;
      v49 = 2050;
      v50 = v24;
      v51 = 2050;
      v52 = v25;
      v53 = 2050;
      v54 = v26;
      v55 = 2050;
      v56 = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLVDR2DofNotifier,DM,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{public}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSpeedCov_radmps,%{public}.6f", &v43, 72, v39, v40, v41, v42);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v39, 0, 0xFFFFFFFFLL, 0);
  }
  else
  {
    if (qword_1022A01A0 != -1)
      dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
    v13 = qword_1022A01A8;
    if (os_log_type_enabled((os_log_t)qword_1022A01A8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)a2;
      v15 = *((_QWORD *)a2 + 1);
      v16 = *((_QWORD *)a2 + 2);
      v17 = *((_QWORD *)a2 + 3);
      v18 = *((_QWORD *)a2 + 4);
      v19 = *((_QWORD *)a2 + 5);
      v20 = *((_QWORD *)a2 + 6);
      *(_DWORD *)buf = 134350592;
      v58 = v14;
      v59 = 2050;
      v60 = v15;
      v61 = 2050;
      v62 = v16;
      v63 = 2050;
      v64 = v17;
      v65 = 2050;
      v66 = v18;
      v67 = 2050;
      v68 = v19;
      v69 = 2050;
      v70 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifierFromDM, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaCourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01A0 != -1)
        dispatch_once(&qword_1022A01A0, &stru_10214F9B8);
      v30 = *(_QWORD *)a2;
      v31 = *((_QWORD *)a2 + 1);
      v32 = *((_QWORD *)a2 + 2);
      v33 = *((_QWORD *)a2 + 3);
      v34 = *((_QWORD *)a2 + 4);
      v35 = *((_QWORD *)a2 + 5);
      v36 = *((_QWORD *)a2 + 6);
      v43 = 134350592;
      v44 = v30;
      v45 = 2050;
      v46 = v31;
      v47 = 2050;
      v48 = v32;
      v49 = 2050;
      v50 = v33;
      v51 = 2050;
      v52 = v34;
      v53 = 2050;
      v54 = v35;
      v55 = 2050;
      v56 = v36;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01A8, 2, "#VDR,CLVDR2DofNotifierFromDM, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaCourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f", &v43, 72);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromDM::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
  }
}

BOOL sub_1006F2DD4(uint64_t a1, double *a2)
{
  double v2;
  _BOOL4 v4;
  double v5;
  double v6;

  v2 = a2[1];
  if (v2 == 0.0)
    return 0;
  v4 = v2 > 0.001;
  if (v2 >= 60.0)
    v4 = 0;
  if (fabs(a2[2]) > 3.14159265)
    v4 = 0;
  if (fabs(a2[3] / v2) > 20.0)
    v4 = 0;
  v5 = a2[4];
  v6 = a2[5];
  if (v5 <= 0.0)
    v4 = 0;
  if (v6 <= 0.0)
    v4 = 0;
  return a2[6] * a2[6] <= v5 * 1.05 * v6 && v4;
}

void sub_1006F2E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214F998);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10214F998);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1006F30E0(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[3];
  uint64_t v46;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1006F54CC();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A3EC8;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214F998);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1006F3548(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214F998);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006F37C8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  *(_QWORD *)(a3 + 48) = *((_QWORD *)v11 + 6);
  *(_OWORD *)(a3 + 16) = v13;
  *(_OWORD *)(a3 + 32) = v14;
  *(_OWORD *)a3 = v12;
  return 1;
}

uint64_t sub_1006F3838(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = (char *)operator new(0x50uLL);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10214FA98;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)&v14 = v6 + 24;
  *((_QWORD *)&v14 + 1) = v6;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1006F3920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F3934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[3];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1006F3978(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v31[20];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::__shared_weak_count *v35;
  _QWORD **v36;
  _QWORD *v37[3];
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      *(_WORD *)&v31[10] = 2082;
      *(_QWORD *)&v31[12] = "activity";
      v32 = 2082;
      v33 = v10;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v36 = v37;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v36);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v31, *(_QWORD **)&v31[8]);
      v21 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v36, v37[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x50uLL);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10214FA98;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v25;
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 32);
      *((_QWORD *)v24 + 9) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v31 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v27 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1006F46C0();
    os_activity_scope_leave(&state);
  }
}

void sub_1006F3FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1006F4010(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214F998);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::listClients() [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214F998);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214F998);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::listClients() [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10214F998);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214F998);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::listClients() [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1006F45B8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1006F45E4(id a1)
{
  qword_1022A01A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

_QWORD *sub_1006F4610(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10214F9E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1006F4648(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10214F9E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1006F4668(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

uint64_t sub_1006F4678(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10214FA68))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1006F46B4()
{
  return &off_10214FA68;
}

void sub_1006F46C0()
{
  operator new();
}

void sub_1006F4760(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1006F4C80(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1006F4B34(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214F998);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214F998);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLVDRNotifier_Type::Notification, CLVDRNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVDRNotifier_Type::Notification, NotificationData_T = CLVDRNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1006F4B34(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1006F4C80(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_1006F4C10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10214FA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1006F4C24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10214FA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1006F4C60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1006F4C80(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1006F4CF8(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1006F5080(a1);
  else
    return 0;
}

id sub_1006F4CF8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1006F542C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BBE95CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BBE95CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVDRNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1006F5080(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBE95CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBE95CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVDRNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1006F542C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B570))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)56)
      sub_101905DB4();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1006F54A0(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1006F54CC()
{
  operator new();
}

uint64_t sub_1006F556C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_1006F558C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BBE800;
      v1[3] = unk_101BBE810;
      v1[4] = xmmword_101BBE820;
      v1[0] = xmmword_101BBE7E0;
      v1[1] = unk_101BBE7F0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1006F5660(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F5678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = 0x3FF99999A0000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 40), "FallUserMaxMets", &v4, 0);
  return a1;
}

void sub_1006F56DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F5700(uint64_t a1, double *a2, double a3)
{
  uint64_t v4;
  float *v6;
  double v7;
  int *v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v13;
  double v14;
  void *__p;
  int *v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;

  if (*(_BYTE *)(a1 + 40))
  {
    *a2 = *(double *)(a1 + 48);
    return 1;
  }
  else
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    sub_1004AE1C0(a1 + 8, &__p);
    v6 = (float *)__p;
    if (__p == v16)
      goto LABEL_13;
    v7 = 0.0;
    v8 = (int *)__p;
    do
    {
      v7 = (double)(v8[1] + (uint64_t)v7);
      v8 += 2;
    }
    while (v8 != v16);
    v9 = (uint64_t)v7;
    if ((uint64_t)v7 < 1 || __p == v16)
    {
LABEL_13:
      v4 = 0;
      *a2 = NAN;
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v11 += *((int *)v6 + 1);
        if ((double)v11 / (double)v9 >= a3)
          break;
        v6 += 2;
        if (v6 == (float *)v16)
          goto LABEL_13;
      }
      *a2 = *v6;
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10214FB18);
      v13 = qword_10229FD98;
      v4 = 1;
      if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
      {
        v14 = *a2;
        *(_DWORD *)buf = 68289539;
        v19 = 0;
        v20 = 2082;
        v21 = "";
        v22 = 2049;
        v23 = v9;
        v24 = 2049;
        v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MaxMETs,MET Minutes\", \"total count\":%{private}ld, \"Max. METs\":\"%{private}f\"}", buf, 0x26u);
      }
    }
    if (__p)
    {
      v16 = (int *)__p;
      operator delete(__p);
    }
  }
  return v4;
}

void sub_1006F58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F58EC(uint64_t a1)
{
  double v1;
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_1004AE1C0(a1 + 8, &v5);
  if (v5 == v6)
  {
    v3 = 0;
    if (!v5)
      return v3;
    goto LABEL_5;
  }
  v1 = 0.0;
  v2 = v5;
  do
  {
    v3 = (v2[1] + (int)v1);
    v1 = (double)(int)v3;
    v2 += 2;
  }
  while (v2 != v6);
  if (v5)
  {
LABEL_5:
    v6 = v5;
    operator delete(v5);
  }
  return v3;
}

void sub_1006F596C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1006F5988(uint64_t a1, double a2, double a3)
{
  double Current;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  void *v14;
  _QWORD v16[9];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  Current = CFAbsoluteTimeGetCurrent();
  v7 = *(double *)(a1 + 8);
  v8 = Current + -28800.0;
  if (v7 <= Current + -28800.0)
  {
    v9 = Current + -86400.0;
    if (v7 >= v9)
      v10 = *(double *)(a1 + 8);
    else
      v10 = v9;
    v11 = v9 + 28800.0;
    if (v7 + 28800.0 >= v11)
      v12 = v7 + 28800.0;
    else
      v12 = v11;
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10214FB18);
    v13 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2049;
      v22 = v10;
      v23 = 2049;
      v24 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MaxMETs,Setting query range\", \"start_s\":\"%{private}.09f\", \"end_s\":\"%{private}.09f\"}", buf, 0x26u);
    }
    v14 = *(void **)a1;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1006F5B30;
    v16[3] = &unk_10214FAF8;
    v16[4] = a1;
    *(double *)&v16[5] = v10;
    *(double *)&v16[6] = v12;
    *(double *)&v16[7] = a2;
    *(double *)&v16[8] = a3;
    objc_msgSend(v14, "queryMetMinutesInTimeRange:withReply:", v16, v10, v12);
  }
  return v7 <= v8;
}

void sub_1006F5B30(uint64_t a1, void *a2, int a3)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;

  if (a3 == 100)
  {
    sub_1004AE740(*(_QWORD *)(a1 + 32) + 8, a2, *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10214FB18);
    v4 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,query,\", \"error\":%{public}d}", (uint8_t *)&v6, 0x18u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10214FB18);
    }
    v5 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1026;
      v11 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,query,", "{\"msg%{public}.0s\":\"MaxMETs,query,\", \"error\":%{public}d}", (uint8_t *)&v6, 0x18u);
    }
  }
}

void sub_1006F5CFC(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1006F5D28()
{
  sub_1015A2E04(qword_1023037F0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023037F0, (void *)&_mh_execute_header);
}

BOOL sub_1006F5D6C(_DWORD *a1)
{
  return *a1 == 2;
}

NSDictionary *sub_1006F5D7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  const char *v5;
  int v6;
  const char *v7;
  NSNumber *v8;
  _QWORD v10[10];
  _QWORD v11[10];

  v2 = *(_QWORD *)(a1 + 32);
  v10[0] = CFSTR("requester");
  v3 = (_QWORD *)(v2 + 120);
  if (*(char *)(v2 + 143) < 0)
    v3 = (_QWORD *)*v3;
  v11[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v10[1] = CFSTR("type");
  v4 = *(_DWORD *)(v2 + 112) - 1;
  if (v4 > 6)
    v5 = "none";
  else
    v5 = off_10214FC20[v4];
  v11[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v10[2] = CFSTR("result");
  v11[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_10003B3EC(*(_DWORD *)(a1 + 72)));
  v10[3] = CFSTR("fix");
  v6 = *(_DWORD *)(v2 + 104);
  if (v6 == 2)
  {
    v7 = "strong";
  }
  else if (v6)
  {
    v7 = "weak";
  }
  else if (*(_BYTE *)(v2 + 108))
  {
    v7 = "empty";
  }
  else
  {
    v7 = "unknown";
  }
  v11[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v10[4] = CFSTR("ttff");
  v11[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
  v10[5] = CFSTR("ttsf");
  v11[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 48));
  v10[6] = CFSTR("duration");
  v11[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 56));
  v10[7] = CFSTR("interval");
  v11[7] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 64));
  v10[8] = CFSTR("als");
  v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 109));
  v10[9] = CFSTR("daily");
  v11[8] = v8;
  v11[9] = &off_10221B588;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 10);
}

_DWORD *sub_1006F5F84(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1006F5F90(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(result + 8) = *a2;
  return result;
}

uint64_t sub_1006F5F9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

double sub_1006F5FA4(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

uint64_t sub_1006F5FB0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 48) = *a2;
  return result;
}

uint64_t sub_1006F5FBC(uint64_t result)
{
  ++*(_DWORD *)(result + 48);
  return result;
}

void sub_1006F5FCC(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1006F5FF8(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1006F6024(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t buf[16];

  v17 = a4;
  sub_10067D0DC(a1, (uint64_t *)a3, &v17);
  *(_QWORD *)a1 = off_10214FC98;
  sub_1002433B8(a1 + 232);
  sub_1015A2E04((_QWORD *)(a1 + 272), a2);
  if (*(_BYTE *)(a3 + 8))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FCD8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "read only database - not creating bounding boxes, tableName, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FCD8);
      v18 = 136315138;
      v19 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "read only database - not creating bounding boxes, tableName, %s", (const char *)&v18);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationDatabase::CLWifiLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v8);
LABEL_32:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FCD8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FCD8);
      v18 = 136315138;
      v19 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s", (const char *)&v18);
      v9 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationDatabase::CLWifiLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v16);
      goto LABEL_32;
    }
  }
  if (sub_1000CC4F4(a1 + 64))
  {
    *(_OWORD *)buf = off_10214FCB0;
    v11 = (char *)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      v11 = *(char **)(a1 + 272);
    sub_100634364(a1 + 64, v11, (const char **)&qword_102303808, (const std::string::value_type **)buf, 0);
    sub_10067D20C(a1);
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    v12 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = "CLWifiLocationDatabase";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing in %{private}s",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214FCF8);
      v18 = 136380675;
      v19 = "CLWifiLocationDatabase";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 0, "#Warning Database is not valid; not initializing in %{private}s",
        &v18,
        12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationDatabase::CLWifiLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  return a1;
}

void sub_1006F64F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 295) < 0)
    operator delete(*v2);
  sub_10067D1C4(v1);
  _Unwind_Resume(a1);
}

char *sub_1006F6538@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[295] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 34), *((_QWORD *)result + 35));
  *(_OWORD *)a2 = *((_OWORD *)result + 17);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 36);
  return result;
}

void sub_1006F6564(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  const char *v55;
  uint8_t *v56;
  void *__p[2];
  char v58;
  uint8_t buf[16];
  uint64_t v60;
  _QWORD v61[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v60, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    v3 = (const char *)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      v3 = *(const char **)v3;
    v4 = strlen(v3);
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    v6 = sub_100263F7C(v5, (uint64_t)"(", 3);
    v7 = sub_100263F7C(v6, (uint64_t)"MAC", 3);
    v8 = sub_100263F7C(v7, (uint64_t)",", 1);
    v9 = strlen("Timestamp");
    v10 = sub_100263F7C(v8, (uint64_t)"Timestamp", v9);
    v11 = sub_100263F7C(v10, (uint64_t)",", 1);
    v12 = strlen("Latitude");
    v13 = sub_100263F7C(v11, (uint64_t)"Latitude", v12);
    v14 = sub_100263F7C(v13, (uint64_t)",", 1);
    v15 = strlen("Longitude");
    v16 = sub_100263F7C(v14, (uint64_t)"Longitude", v15);
    v17 = sub_100263F7C(v16, (uint64_t)",", 1);
    v18 = strlen("HorizontalAccuracy");
    v19 = sub_100263F7C(v17, (uint64_t)"HorizontalAccuracy", v18);
    v20 = sub_100263F7C(v19, (uint64_t)",", 1);
    v21 = strlen("Altitude");
    v22 = sub_100263F7C(v20, (uint64_t)"Altitude", v21);
    v23 = sub_100263F7C(v22, (uint64_t)",", 1);
    v24 = strlen("VerticalAccuracy");
    v25 = sub_100263F7C(v23, (uint64_t)"VerticalAccuracy", v24);
    v26 = sub_100263F7C(v25, (uint64_t)",", 1);
    v27 = strlen("Speed");
    v28 = sub_100263F7C(v26, (uint64_t)"Speed", v27);
    v29 = sub_100263F7C(v28, (uint64_t)",", 1);
    v30 = strlen("Course");
    v31 = sub_100263F7C(v29, (uint64_t)"Course", v30);
    v32 = sub_100263F7C(v31, (uint64_t)",", 1);
    v33 = strlen("Confidence");
    v34 = sub_100263F7C(v32, (uint64_t)"Confidence", v33);
    v35 = sub_100263F7C(v34, (uint64_t)",", 1);
    v36 = strlen("Score");
    v37 = sub_100263F7C(v35, (uint64_t)"Score", v36);
    v38 = sub_100263F7C(v37, (uint64_t)",", 1);
    v39 = strlen("Reach");
    v40 = sub_100263F7C(v38, (uint64_t)"Reach", v39);
    v41 = sub_100263F7C(v40, (uint64_t)",", 1);
    v42 = sub_100263F7C(v41, (uint64_t)"Channel", 7);
    v43 = sub_100263F7C(v42, (uint64_t)",", 1);
    v44 = sub_100263F7C(v43, (uint64_t)"FenceForeignKey", 15);
    v45 = sub_100263F7C(v44, (uint64_t)",", 1);
    v46 = sub_100263F7C(v45, (uint64_t)"InfoMask", 8);
    v47 = sub_100263F7C(v46, (uint64_t)",", 1);
    v48 = strlen("ZaxisHarvestTraces");
    v49 = sub_100263F7C(v47, (uint64_t)"ZaxisHarvestTraces", v48);
    v50 = sub_100263F7C(v49, (uint64_t)") ", 3);
    v51 = sub_100263F7C(v50, (uint64_t)" VALUES ", 8);
    sub_100263F7C(v51, (uint64_t)"(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);", 34);
    std::stringbuf::str(__p, v61);
    v52 = a1 + 64;
    if (v58 >= 0)
      v53 = (char *)__p;
    else
      v53 = (char *)__p[0];
    sub_1000CDA68(v52, v53);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v54 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call save() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call save() without a backing database in CLWifiLocationDatabase!", __p, 2);
    v56 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationDatabase::save(const CLWifiLocationDatabaseEntry &)", "%s\n", v55);
    if (v56 != buf)
      free(v56);
  }
}

void sub_1006F6D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006F6DDC(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10214FD28;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

void sub_1006F6E2C(uint64_t a1, unint64_t a2)
{
  const std::string::value_type *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  char *p_buf;
  NSObject *v24;
  const char *v25;
  char *v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  void *__p[4];
  __int128 buf;
  int64_t v38;

  if (sub_1000CC504(a1))
  {
    if ((a2 & 0x8000000000000000) == 0 && sub_10005995C(a1) > a2)
    {
      memset(__p, 0, 24);
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v28, "SELECT ROWID FROM ");
      v4 = (const std::string::value_type *)(a1 + 272);
      if (*(char *)(a1 + 295) < 0)
        v4 = *(const std::string::value_type **)(a1 + 272);
      v5 = std::string::append(&v28, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      v7 = std::string::append(&v29, " WHERE ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v30, "FenceForeignKey");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v31, " =");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v27, -1);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v27;
      else
        v13 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      else
        size = v27.__r_.__value_.__l.__size_;
      v15 = std::string::append(&v32, (const std::string::value_type *)v13, size);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v33, " ORDER BY ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v34, "Timestamp");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v35, " ASC LIMIT ?");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v38 = v21->__r_.__value_.__r.__words[2];
      buf = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (v38 >= 0)
        p_buf = (char *)&buf;
      else
        p_buf = (char *)buf;
      sub_1000CDA68(a1 + 64, p_buf);
    }
  }
  else
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    v24 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call truncatePastLimit() without a backing database in CLWifiLocationDatabase!", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_10214FCF8);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call truncatePastLimit() without a backing database in CLWifiLocationDatabase!", __p, 2);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationDatabase::truncatePastLimit(int64_t)", "%s\n", v25);
      if (v26 != (char *)&buf)
        free(v26);
    }
  }
}

void sub_1006F7674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52)
{
  uint64_t v52;

  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  if (a50 < 0)
    operator delete(__p);
  if (a52)
    operator delete(a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F7810(uint64_t a1)
{
  void **v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  char *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  uint8_t buf[16];
  int64_t v27;

  if (sub_1000CC504(a1))
  {
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v22, "SELECT ");
    sub_1006F7CB0((uint64_t)__p);
    if ((v21 & 0x80u) == 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v3 = v21;
    else
      v3 = (std::string::size_type)__p[1];
    v4 = std::string::append(&v22, (const std::string::value_type *)v2, v3);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v23, " FROM ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = *(char *)(a1 + 295);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)(a1 + 272);
    else
      v9 = *(const std::string::value_type **)(a1 + 272);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 295);
    else
      v10 = *(_QWORD *)(a1 + 280);
    v11 = std::string::append(&v24, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v25, " WHERE ROWID=?");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v27 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)buf = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (v27 >= 0)
      v15 = (char *)buf;
    else
      v15 = *(char **)buf;
    sub_1000CDA68(a1 + 64, v15);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v16 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getLocation() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(v25.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getLocation() without a backing database in CLWifiLocationDatabase!", &v25, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationDatabase::getLocation(sqlite3_int64, WifiData &) const", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return 0;
}

void sub_1006F7BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a37)
    (*(void (**)(void *))(*(_QWORD *)a37 + 8))(a37);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1006F7CB0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string v8;
  void *__p[2];
  int64_t v10;
  _QWORD v11[7];

  v2 = 0;
  v11[0] = "MAC";
  v11[1] = "Channel";
  v11[2] = "InfoMask";
  v11[3] = "Score";
  v11[4] = "Reach";
  v11[5] = "FenceForeignKey";
  v11[6] = "ZaxisHarvestTraces";
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  do
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *((_BYTE *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
      v4 = std::string::append(&v8, (const std::string::value_type *)v11[v2]);
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v10 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (v10 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if (v10 >= 0)
        v7 = HIBYTE(v10);
      else
        v7 = (std::string::size_type)__p[1];
      std::string::append((std::string *)a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append((std::string *)a1, (const std::string::value_type *)v11[v2]);
    }
    ++v2;
  }
  while (v2 != 7);
}

void sub_1006F7E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F7E70(uint64_t a1)
{
  int v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  char *p_buf;
  NSObject *v17;
  char *v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string::value_type __s[8];
  char v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 buf;
  int64_t v29;

  if (sub_1000CC504(a1))
  {
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_101B980A0;
    strcpy(v24.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    v2 = *(char *)(a1 + 295);
    if (v2 >= 0)
      v3 = (const std::string::value_type *)(a1 + 272);
    else
      v3 = *(const std::string::value_type **)(a1 + 272);
    if (v2 >= 0)
      v4 = *(unsigned __int8 *)(a1 + 295);
    else
      v4 = *(_QWORD *)(a1 + 280);
    v5 = std::string::append(&v24, v3, v4);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v23 = 2;
    strcpy(__s, " (");
    v7 = std::string::append(&v25, __s, 2uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1006F7CB0((uint64_t)__p);
    if ((v21 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v10 = v21;
    else
      v10 = (std::string::size_type)__p[1];
    v11 = std::string::append(&v26, (const std::string::value_type *)v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = (char *)operator new(0x20uLL);
    strcpy(v13, ") VALUES (?,?,?,?,?,?,?)");
    v14 = std::string::append(&v27, v13, 0x18uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v29 = v14->__r_.__value_.__r.__words[2];
    buf = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    operator delete(v13);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v23 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (v29 >= 0)
      p_buf = (char *)&buf;
    else
      p_buf = (char *)buf;
    sub_1000CDA68(a1 + 64, p_buf);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v17 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call setLocation() without a backing database in CLWifiLocationDatabase!", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(v27.__r_.__value_.__l.__data_) = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call setLocation() without a backing database in CLWifiLocationDatabase!", &v27, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationDatabase::setLocation(const WifiData &, const CLDaemonLocation &)", "%s\n", v19);
    if (v19 != (char *)&buf)
      free(v19);
  }
  return 0;
}

void sub_1006F8310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F83E8(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  void *__p[2];
  char v21;
  uint8_t buf[16];
  uint64_t v23;
  _QWORD v24[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v23, (uint64_t)"UPDATE OR IGNORE ", 17);
    v3 = (const char *)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      v3 = *(const char **)v3;
    v4 = strlen(v3);
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    v6 = sub_100263F7C(v5, (uint64_t)" SET ", 5);
    v7 = strlen("Score");
    v8 = sub_100263F7C(v6, (uint64_t)"Score", v7);
    v9 = sub_100263F7C(v8, (uint64_t)" = ", 3);
    v10 = strlen("Score");
    v11 = sub_100263F7C(v9, (uint64_t)"Score", v10);
    v12 = sub_100263F7C(v11, (uint64_t)" / 2.0 ", 7);
    v13 = sub_100263F7C(v12, (uint64_t)" WHERE ", 7);
    v14 = sub_100263F7C(v13, (uint64_t)"MAC", 3);
    sub_100263F7C(v14, (uint64_t)" = ? ", 5);
    std::stringbuf::str(__p, v24);
    if (v21 >= 0)
      v15 = (char *)__p;
    else
      v15 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v15);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v16 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call downgradeAPByScore() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call downgradeAPByScore() without a backing database in CLWifiLocationDatabase!", __p, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiLocationDatabase::downgradeAPByScore(const CLMacAddress &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return 0;
}

void sub_1006F8784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006F87D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *p_p;
  NSObject *v45;
  const char *v46;
  void **v47;
  _WORD v48[8];
  uint64_t v49;
  _QWORD v50[8];
  void *__p;
  char v52;

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v48);
    v4 = sub_100263F7C(&v49, (uint64_t)"SELECT ", 7);
    v5 = sub_100263F7C(v4, (uint64_t)"MAC", 3);
    v6 = sub_100263F7C(v5, (uint64_t)" , ", 3);
    v7 = strlen("Latitude");
    v8 = sub_100263F7C(v6, (uint64_t)"Latitude", v7);
    v9 = sub_100263F7C(v8, (uint64_t)" , ", 3);
    v10 = strlen("Longitude");
    v11 = sub_100263F7C(v9, (uint64_t)"Longitude", v10);
    v12 = sub_100263F7C(v11, (uint64_t)" , ", 3);
    v13 = strlen("Altitude");
    v14 = sub_100263F7C(v12, (uint64_t)"Altitude", v13);
    v15 = sub_100263F7C(v14, (uint64_t)" , ", 3);
    v16 = strlen("HorizontalAccuracy");
    v17 = sub_100263F7C(v15, (uint64_t)"HorizontalAccuracy", v16);
    v18 = sub_100263F7C(v17, (uint64_t)" , ", 3);
    v19 = strlen("VerticalAccuracy");
    v20 = sub_100263F7C(v18, (uint64_t)"VerticalAccuracy", v19);
    v21 = sub_100263F7C(v20, (uint64_t)" , ", 3);
    v22 = strlen("Score");
    v23 = sub_100263F7C(v21, (uint64_t)"Score", v22);
    v24 = sub_100263F7C(v23, (uint64_t)" , ", 3);
    v25 = strlen("Reach");
    v26 = sub_100263F7C(v24, (uint64_t)"Reach", v25);
    v27 = sub_100263F7C(v26, (uint64_t)" , ", 3);
    v28 = sub_100263F7C(v27, (uint64_t)"Channel", 7);
    v29 = sub_100263F7C(v28, (uint64_t)" , ", 3);
    v30 = sub_100263F7C(v29, (uint64_t)"InfoMask", 8);
    v31 = sub_100263F7C(v30, (uint64_t)" , ", 3);
    v32 = strlen("Timestamp");
    v33 = sub_100263F7C(v31, (uint64_t)"Timestamp", v32);
    v34 = sub_100263F7C(v33, (uint64_t)" FROM ", 6);
    v35 = *(char *)(a1 + 295);
    if (v35 >= 0)
      v36 = a1 + 272;
    else
      v36 = *(_QWORD *)(a1 + 272);
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 295);
    else
      v37 = *(_QWORD *)(a1 + 280);
    v38 = sub_100263F7C(v34, v36, v37);
    v39 = sub_100263F7C(v38, (uint64_t)" WHERE ", 7);
    v40 = sub_100263F7C(v39, (uint64_t)"FenceForeignKey", 15);
    v41 = sub_100263F7C(v40, (uint64_t)" =?", 3);
    v42 = sub_100263F7C(v41, (uint64_t)" ORDER BY Score DESC LIMIT ", 27);
    v43 = (_QWORD *)std::ostream::operator<<(v42, 400);
    sub_100263F7C(v43, (uint64_t)";", 1);
    std::stringbuf::str(&__p, v50);
    if (v52 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(a1 + 64, p_p);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v45 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getNearbyWifisForFence() without a backing database in CLWifiLocationDatabase!", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    v48[0] = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getNearbyWifisForFence() without a backing database in CLWifiLocationDatabase!", v48, 2);
    v47 = (void **)v46;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiAPLocation> CLWifiLocationDatabase::getNearbyWifisForFence(double, double, double, int, int, BOOL, double)", "%s\n", v46);
    if (v47 != &__p)
      free(v47);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1006F9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  void *v20;
  va_list va;

  va_start(va, a17);
  v20 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v20;
    operator delete(v20);
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006F9628(uint64_t a1)
{
  char *v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = *(char **)a1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 5uLL);
  v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] > v5)
  {
    if ((char *)v3.i64[0] == v2)
    {
      v11 = 0;
      v9 = 96 * v5;
    }
    else
    {
      v7 = (char *)sub_10067257C(a1 + 16, v5);
      v2 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[96 * v6];
      v11 = &v7[96 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_OWORD *)v8 - 5);
          *(_OWORD *)(v12 - 96) = *((_OWORD *)v8 - 6);
          *(_OWORD *)(v12 - 80) = v13;
          v14 = *((_OWORD *)v8 - 4);
          v15 = *((_OWORD *)v8 - 3);
          v16 = *((_OWORD *)v8 - 1);
          *(_OWORD *)(v12 - 32) = *((_OWORD *)v8 - 2);
          *(_OWORD *)(v12 - 16) = v16;
          *(_OWORD *)(v12 - 64) = v14;
          *(_OWORD *)(v12 - 48) = v15;
          v12 -= 96;
          v8 -= 96;
        }
        while (v8 != v2);
        v2 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v2)
      operator delete(v2);
  }
}

void sub_1006F9724(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  void *__p[2];
  char v17;
  uint8_t buf[16];
  uint64_t v19;
  _QWORD v20[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v19, (uint64_t)"DELETE FROM ", 12);
    v3 = *(char *)(a1 + 295);
    if (v3 >= 0)
      v4 = a1 + 272;
    else
      v4 = *(_QWORD *)(a1 + 272);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 295);
    else
      v5 = *(_QWORD *)(a1 + 280);
    v6 = sub_100263F7C(v2, v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
    v8 = sub_100263F7C(v7, (uint64_t)"MAC", 3);
    v9 = sub_100263F7C(v8, (uint64_t)" IS NULL OR ", 12);
    v10 = sub_100263F7C(v9, (uint64_t)"MAC", 3);
    sub_100263F7C(v10, (uint64_t)" = '' ", 6);
    std::stringbuf::str(__p, v20);
    v11 = a1 + 64;
    if (v17 >= 0)
      v12 = (char *)__p;
    else
      v12 = (char *)__p[0];
    sub_1000CDA68(v11, v12);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v13 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteWhereMacAddressIsEmpty() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call deleteWhereMacAddressIsEmpty() without a backing database in CLWifiLocationDatabase!", __p, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationDatabase::deleteWhereMacAddressIsEmpty()", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_1006F9A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006F9A70(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  NSObject *v10;
  char *v11;
  void *__p[2];
  char v13;
  uint8_t buf[16];
  uint64_t v15;
  _QWORD v16[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v15, (uint64_t)"DELETE FROM ", 12);
    v3 = *(char *)(a1 + 295);
    if (v3 >= 0)
      v4 = a1 + 272;
    else
      v4 = *(_QWORD *)(a1 + 272);
    if (v3 >= 0)
      v5 = *(unsigned __int8 *)(a1 + 295);
    else
      v5 = *(_QWORD *)(a1 + 280);
    v6 = sub_100263F7C(v2, v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
    v8 = sub_100263F7C(v7, (uint64_t)"MAC", 3);
    sub_100263F7C(v8, (uint64_t)" = ? ", 5);
    std::stringbuf::str(__p, v16);
    if (v13 >= 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v9);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v10 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteByMac() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call deleteByMac() without a backing database in CLWifiLocationDatabase!", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationDatabase::deleteByMac(const CLMacAddress &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
}

void sub_1006F9DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F9E00(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214FC98;
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  return sub_10067D1C4(a1);
}

void sub_1006F9E3C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10214FC98;
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  sub_10067D1C4(a1);
  operator delete();
}

void sub_1006F9E8C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006F9EB8(id a1)
{
  off_1022A0288 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_1006F9EE4(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10214FD28;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1006F9F48(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_1006F9F74(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

BOOL sub_1006F9FA0()
{
  return os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT);
}

BOOL sub_1006F9FC0()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 648), OS_LOG_TYPE_INFO);
}

void sub_1006F9FD0()
{
  qword_102303808 = (uint64_t)"MAC";
  dword_102303810 = 1;
  word_102303814 = 1;
  byte_102303818 = 0;
  byte_102303830 = 0;
  qword_102303838 = (uint64_t)"Channel";
  dword_102303840 = 1;
  word_102303844 = 0;
  byte_102303848 = 0;
  byte_102303860 = 0;
  qword_102303868 = (uint64_t)"InfoMask";
  dword_102303870 = 1;
  word_102303874 = 0;
  byte_102303878 = 0;
  byte_102303890 = 0;
  qword_102303898 = (uint64_t)"Timestamp";
  dword_1023038A0 = 2;
  word_1023038A4 = 0;
  byte_1023038A8 = 0;
  byte_1023038C0 = 0;
  qword_1023038C8 = (uint64_t)"Latitude";
  dword_1023038D0 = 2;
  word_1023038D4 = 0;
  byte_1023038D8 = 0;
  byte_1023038F0 = 0;
  qword_1023038F8 = (uint64_t)"Longitude";
  dword_102303900 = 2;
  word_102303904 = 0;
  byte_102303908 = 0;
  byte_102303920 = 0;
  qword_102303928 = (uint64_t)"HorizontalAccuracy";
  dword_102303930 = 2;
  word_102303934 = 0;
  byte_102303938 = 0;
  byte_102303950 = 0;
  qword_102303958 = (uint64_t)"Altitude";
  dword_102303960 = 2;
  word_102303964 = 0;
  byte_102303968 = 0;
  byte_102303980 = 0;
  qword_102303988 = (uint64_t)"VerticalAccuracy";
  dword_102303990 = 2;
  word_102303994 = 0;
  byte_102303998 = 0;
  byte_1023039B0 = 0;
  qword_1023039B8 = (uint64_t)"Speed";
  dword_1023039C0 = 2;
  word_1023039C4 = 0;
  byte_1023039C8 = 0;
  byte_1023039E0 = 0;
  qword_1023039E8 = (uint64_t)"Course";
  dword_1023039F0 = 2;
  word_1023039F4 = 0;
  byte_1023039F8 = 0;
  byte_102303A10 = 0;
  qword_102303A18 = (uint64_t)"Confidence";
  dword_102303A20 = 1;
  word_102303A24 = 0;
  byte_102303A28 = 0;
  byte_102303A40 = 0;
  qword_102303A48 = (uint64_t)"Score";
  dword_102303A50 = 1;
  word_102303A54 = 0;
  byte_102303A58 = 0;
  byte_102303A70 = 0;
  qword_102303A78 = (uint64_t)"Reach";
  dword_102303A80 = 1;
  word_102303A84 = 0;
  byte_102303A88 = 0;
  byte_102303AA0 = 0;
  qword_102303AA8 = (uint64_t)"FenceForeignKey";
  dword_102303AB0 = 1;
  word_102303AB4 = 1;
  byte_102303AB8 = 0;
  byte_102303AD0 = 0;
  qword_102303AD8 = (uint64_t)"ZaxisHarvestTraces";
  dword_102303AE0 = 1;
  word_102303AE4 = 0;
  byte_102303AE8 = 0;
  byte_102303B00 = 0;
  qword_102303B08 = 0;
  dword_102303B10 = 5;
  word_102303B14 = 0;
  byte_102303B18 = 0;
  byte_102303B30 = 0;
}

id sub_1006FA1EC(void *a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1006FA25C;
  v3[3] = &unk_10214FD88;
  v3[4] = a2;
  return objc_msgSend(a1, "filteredArrayUsingPredicate:", +[NSPredicate predicateWithBlock:](NSPredicate, "predicateWithBlock:", v3));
}

BOOL sub_1006FA25C(uint64_t a1, void *a2)
{
  return objc_msgSend(objc_msgSend(a2, "timestamp"), "compare:", *(_QWORD *)(a1 + 32)) != (id)-1;
}

uint64_t sub_1006FA290(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_1006FA2C0(void **a1)
{
  void **v3;

  v3 = a1;
  sub_10066DCEC(&v3);
  return a1;
}

uint64_t sub_1006FA2F4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1006FA324(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1006FA354(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1006FA384(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1006FA43C(id a1)
{
  qword_102303B38 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLNetworkLocationProviderSilo"));
}

uint64_t sub_1006FA4F0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006FDE30;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303B48 != -1)
    dispatch_once(&qword_102303B48, block);
  return qword_102310C28;
}

void sub_1006FA6E0(uint64_t a1)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v7 = 0xFFFF;
  v8 = 0;
  v9 = 0;
  v10 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  v12 = _Q0;
  v13 = _Q0;
  v14 = 0;
  v17 = 0;
  v15 = 0xBFF0000000000000;
  v16 = 0;
  v18 = 0;
  v19 = 0xBFF0000000000000;
  v20 = 0x7FFFFFFF;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  v6 = sub_1006FE4EC(a1);
  sub_1006E0570(*(_QWORD *)(v6 + 32));
}

void sub_1006FADFC(uint64_t a1)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v7 = 0xFFFF;
  v8 = 0;
  v9 = 0;
  v10 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  v12 = _Q0;
  v13 = _Q0;
  v14 = 0;
  v17 = 0;
  v15 = 0xBFF0000000000000;
  v16 = 0;
  v18 = 0;
  v19 = 0xBFF0000000000000;
  v20 = 0x7FFFFFFF;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  v6 = sub_1006FE3E4(a1);
  sub_1006E0570(*(_QWORD *)(v6 + 32));
}

void sub_1006FB534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100664030((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006FB548(uint64_t a1, uint64_t a2)
{
  const void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p;
  unsigned int v26;
  void *v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  void *v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  v54 = 0;
  v53 = 0;
  v55 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v56 = _Q0;
  v57 = _Q0;
  v58 = _Q0;
  v52 = 0xFFFF;
  v59 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0xBFF0000000000000;
  v64 = 0xBFF0000000000000;
  v63 = 0;
  v65 = 0x7FFFFFFF;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v69 = 0;
  v26 = *(_DWORD *)a2;
  v9 = *(const void **)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  memset(v27, 0, sizeof(v27));
  sub_10027205C(v27, v9, v10, (v10 - (uint64_t)v9) >> 2);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 208);
  v13 = *(_OWORD *)(a2 + 160);
  v37 = *(_OWORD *)(a2 + 176);
  v38 = v11;
  v39[0] = v12;
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a2 + 220);
  v14 = *(_OWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 96);
  v33 = *(_OWORD *)(a2 + 112);
  v34 = v14;
  v35 = v15;
  v36 = v13;
  v17 = *(_OWORD *)(a2 + 80);
  v30 = *(_OWORD *)(a2 + 64);
  v31 = v17;
  v32 = v16;
  v18 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v18;
  if (*(char *)(a2 + 263) < 0)
  {
    sub_100115CE4(v40, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)(a2 + 240);
    v40[2] = *(void **)(a2 + 256);
  }
  v19 = *(_OWORD *)(a2 + 408);
  v49 = *(_OWORD *)(a2 + 392);
  v50 = v19;
  v20 = *(_OWORD *)(a2 + 344);
  v45 = *(_OWORD *)(a2 + 328);
  v46 = v20;
  v21 = *(_OWORD *)(a2 + 376);
  v47 = *(_OWORD *)(a2 + 360);
  v48 = v21;
  v22 = *(_OWORD *)(a2 + 280);
  v41 = *(_OWORD *)(a2 + 264);
  v42 = v22;
  v23 = *(_OWORD *)(a2 + 312);
  v43 = *(_OWORD *)(a2 + 296);
  v44 = v23;
  v51 = *(_DWORD *)(a2 + 424);
  sub_100708A0C((uint64_t)&v26);
  sub_1005A3550(&v26, &__p);
  v24 = sub_1006FE5F4(a1);
  sub_1009A0744(*(_QWORD *)(v24 + 32));
}

void sub_1006FBCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100664030((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006FBDD8(uint64_t a1)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v7 = 0xFFFF;
  v8 = 0;
  v9 = 0;
  v10 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  v12 = _Q0;
  v13 = _Q0;
  v16 = 0;
  v17 = 0;
  v15 = 0xBFF0000000000000;
  v14 = 0;
  v18 = 0;
  v19 = 0xBFF0000000000000;
  v20 = 0x7FFFFFFF;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v6 = sub_1000966F8(a1);
  sub_1000963C4(*(_QWORD *)(v6 + 32));
}

void sub_1006FC50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1006FC610(uint64_t a1)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v7 = 0xFFFF;
  v8 = 0;
  v9 = 0;
  v10 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  v12 = _Q0;
  v13 = _Q0;
  v16 = 0;
  v17 = 0;
  v15 = 0xBFF0000000000000;
  v14 = 0;
  v18 = 0;
  v19 = 0xBFF0000000000000;
  v20 = 0x7FFFFFFF;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  v6 = sub_1006FE6FC(a1);
  sub_10083F4AC(*(_QWORD *)(v6 + 32));
}

void sub_1006FCD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1006FCDD4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 560);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 576);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_DWORD *)(a2 + 44);
    v7 = *(_DWORD *)(a2 + 48);
    v8 = *(_DWORD *)(a2 + 52);
    v9 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)buf = 67110144;
    v23 = v5;
    v24 = 1024;
    v25 = v6;
    v26 = 1024;
    v27 = v7;
    v28 = 1024;
    v29 = v8;
    v30 = 1024;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d", buf, 0x20u);
  }
  v10 = a1 + 560;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v11 = *(_DWORD *)(a2 + 44);
    v12 = *(_DWORD *)(a2 + 48);
    v13 = *(_DWORD *)(a2 + 52);
    v14 = *(_DWORD *)(a2 + 56);
    LOWORD(v18) = 1024;
    HIWORD(v18) = v11;
    HIWORD(v19) = HIWORD(v13);
    v20 = 1024;
    v21 = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d", &v17, 32, 67110144, v18, v12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::getMetric(CLDaemonStats_Type::LocationNetworkQueries &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = 0;
}

uint64_t sub_1006FD028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  int v15[4];
  void *__p[2];
  char v17;
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 456))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning in private location mode; not querying for unknown cells or unknown wifis",
        buf,
        2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning in private location mode; not querying for unknown cells or unknown wifis",
      v15,
      2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryNearbys(const CLDaemonLocation &, const std::vector<int> &)", "%s\n", v4);
LABEL_35:
    if (v5 != buf)
      free(v5);
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) != 1)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not querying location", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not querying location", v15, 2);
    v5 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryNearbys(const CLDaemonLocation &, const std::vector<int> &)", "%s\n", v14);
    goto LABEL_35;
  }
  if (!*(_DWORD *)(a1 + 608) && !*(_BYTE *)(a1 + 440))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@AlsFlow, querynearby, skip, connectivity", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    LOWORD(v15[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, querynearby, skip, connectivity", v15, 2);
    v5 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryNearbys(const CLDaemonLocation &, const std::vector<int> &)", "%s\n", v13);
    goto LABEL_35;
  }
  *(int32x2_t *)(a1 + 568) = vadd_s32(*(int32x2_t *)(a1 + 568), (int32x2_t)0x100000001);
  sub_1015A2E04(__p, "queryNearbys");
  sub_10002B684(a1 + 464, (uint64_t *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v15[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 448) + 40))(*(_QWORD *)(a1 + 448), a2, 0xFFFFFFFFLL);
  *(_QWORD *)buf = v15;
  v9 = (char *)(sub_1000BC378((uint64_t **)(a1 + 392), v15, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5);
  if (v9 != (char *)a3)
    sub_1002A3054(v9, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return v15[0];
}

void sub_1006FD4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006FD5EC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  unsigned int v8;
  _OWORD *v9;
  _OWORD *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _OWORD *v20;
  _OWORD *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  _OWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  _OWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  uint64_t v92;
  int v95;
  void *v96;
  char *v97;
  char *v98;
  void *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *__p;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  int v111[3];

  v108 = 0;
  v109 = 0;
  v110 = 0;
  __p = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v4 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3); ++i)
    {
      v7 = v4 + 696 * i;
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 < 3)
        goto LABEL_6;
      if (v8 == 9)
      {
        v20 = (_OWORD *)sub_100706590(v7);
        v21 = v20;
        v22 = v106;
        if (v106 >= v107)
        {
          v41 = (char *)__p;
          v42 = (v106 - (_BYTE *)__p) >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
            sub_100259694();
          v44 = v107 - (_BYTE *)__p;
          if ((v107 - (_BYTE *)__p) >> 4 > v43)
            v43 = v44 >> 4;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)sub_10025BA00((uint64_t)&v107, v45);
            v41 = (char *)__p;
            v22 = v106;
          }
          else
          {
            v46 = 0;
          }
          v47 = v21[1];
          v48 = &v46[32 * v42];
          *(_OWORD *)v48 = *v21;
          *((_OWORD *)v48 + 1) = v47;
          if (v22 == v41)
          {
            v51 = &v46[32 * v42];
          }
          else
          {
            v49 = &v46[32 * v42];
            do
            {
              v50 = *((_OWORD *)v22 - 1);
              v51 = v49 - 32;
              *((_OWORD *)v49 - 2) = *((_OWORD *)v22 - 2);
              *((_OWORD *)v49 - 1) = v50;
              v22 -= 32;
              v49 -= 32;
            }
            while (v22 != v41);
          }
          v24 = v48 + 32;
          __p = v51;
          v106 = v48 + 32;
          v107 = &v46[32 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          v23 = v20[1];
          *(_OWORD *)v106 = *v20;
          *((_OWORD *)v22 + 1) = v23;
          v24 = v22 + 32;
        }
        v106 = v24;
        goto LABEL_30;
      }
      if (v8 == 7)
      {
LABEL_6:
        v9 = (_OWORD *)sub_1007057DC(v7);
        v10 = v9;
        v11 = v109;
        if (v109 >= v110)
        {
          v14 = v108;
          v15 = (v109 - v108) >> 5;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59)
            sub_100259694();
          v17 = v110 - v108;
          if ((v110 - v108) >> 4 > v16)
            v16 = v17 >> 4;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
            v18 = 0x7FFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_10025BA00((uint64_t)&v110, v18);
            v14 = v108;
            v11 = v109;
          }
          else
          {
            v19 = 0;
          }
          v28 = v10[1];
          v29 = &v19[32 * v15];
          *(_OWORD *)v29 = *v10;
          *((_OWORD *)v29 + 1) = v28;
          if (v11 == v14)
          {
            v32 = &v19[32 * v15];
          }
          else
          {
            v30 = &v19[32 * v15];
            do
            {
              v31 = *((_OWORD *)v11 - 1);
              v32 = v30 - 32;
              *((_OWORD *)v30 - 2) = *((_OWORD *)v11 - 2);
              *((_OWORD *)v30 - 1) = v31;
              v11 -= 32;
              v30 -= 32;
            }
            while (v11 != v14);
          }
          v13 = v29 + 32;
          v108 = v32;
          v109 = v29 + 32;
          v110 = &v19[32 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          v12 = v9[1];
          *(_OWORD *)v109 = *v9;
          *((_OWORD *)v11 + 1) = v12;
          v13 = v11 + 32;
        }
        v109 = v13;
      }
      else if (v8 - 3 > 2)
      {
        if (v8 == 10)
        {
          v52 = (_OWORD *)sub_1007073B4(v7);
          v53 = v52;
          v54 = v97;
          if (v97 >= v98)
          {
            v65 = v96;
            v66 = 0xAAAAAAAAAAAAAAABLL * ((v97 - (_BYTE *)v96) >> 5);
            v67 = v66 + 1;
            if (v66 + 1 > 0x2AAAAAAAAAAAAAALL)
              sub_100259694();
            if (0x5555555555555556 * ((v98 - (_BYTE *)v96) >> 5) > v67)
              v67 = 0x5555555555555556 * ((v98 - (_BYTE *)v96) >> 5);
            if (0xAAAAAAAAAAAAAAABLL * ((v98 - (_BYTE *)v96) >> 5) >= 0x155555555555555)
              v68 = 0x2AAAAAAAAAAAAAALL;
            else
              v68 = v67;
            if (v68)
            {
              v69 = (char *)sub_10067257C((uint64_t)&v98, v68);
              v65 = v96;
              v54 = v97;
            }
            else
            {
              v69 = 0;
            }
            v81 = &v69[32 * ((v97 - (_BYTE *)v96) >> 5)];
            v82 = v53[1];
            *(_OWORD *)v81 = *v53;
            *((_OWORD *)v81 + 1) = v82;
            v83 = v53[2];
            v84 = v53[3];
            v85 = v53[5];
            *((_OWORD *)v81 + 4) = v53[4];
            *((_OWORD *)v81 + 5) = v85;
            *((_OWORD *)v81 + 2) = v83;
            *((_OWORD *)v81 + 3) = v84;
            if (v54 == v65)
            {
              v91 = &v69[96 * v66];
            }
            else
            {
              v86 = &v69[96 * v66];
              do
              {
                v87 = *(v54 - 5);
                *((_OWORD *)v86 - 6) = *(v54 - 6);
                *((_OWORD *)v86 - 5) = v87;
                v88 = *(v54 - 4);
                v89 = *(v54 - 3);
                v90 = *(v54 - 2);
                v91 = v86 - 96;
                *(_OWORD *)(v86 - 20) = *(_OWORD *)((char *)v54 - 20);
                *((_OWORD *)v86 - 3) = v89;
                *((_OWORD *)v86 - 2) = v90;
                *((_OWORD *)v86 - 4) = v88;
                v54 -= 6;
                v86 -= 96;
              }
              while (v54 != v65);
            }
            v59 = v81 + 96;
            v96 = v91;
            v97 = v81 + 96;
            v98 = &v69[96 * v68];
            if (v65)
              operator delete(v65);
          }
          else
          {
            v55 = v52[1];
            *(_OWORD *)v97 = *v52;
            v54[1] = v55;
            v56 = v52[2];
            v57 = v52[3];
            v58 = v52[5];
            v54[4] = v52[4];
            v54[5] = v58;
            v54[2] = v56;
            v54[3] = v57;
            v59 = (char *)(v54 + 6);
          }
          v97 = v59;
        }
        else if (v8 == 6)
        {
          v33 = sub_1001E3CA4(v7);
          v34 = v33;
          v35 = v100;
          if (v100 >= v101)
          {
            v60 = v99;
            v61 = 0x2E8BA2E8BA2E8BA3 * ((v100 - (_BYTE *)v99) >> 3);
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) > 0x2E8BA2E8BA2E8BALL)
              sub_100259694();
            if (0x5D1745D1745D1746 * ((v101 - (_BYTE *)v99) >> 3) > v62)
              v62 = 0x5D1745D1745D1746 * ((v101 - (_BYTE *)v99) >> 3);
            if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v101 - (_BYTE *)v99) >> 3)) >= 0x1745D1745D1745DLL)
              v63 = 0x2E8BA2E8BA2E8BALL;
            else
              v63 = v62;
            if (v63)
            {
              v64 = (char *)sub_100279B30((uint64_t)&v101, v63);
              v60 = v99;
              v35 = v100;
            }
            else
            {
              v64 = 0;
            }
            v70 = &v64[88 * v61];
            v71 = *(_OWORD *)(v34 + 16);
            *(_OWORD *)v70 = *(_OWORD *)v34;
            *((_OWORD *)v70 + 1) = v71;
            v72 = *(_OWORD *)(v34 + 32);
            v73 = *(_OWORD *)(v34 + 48);
            v74 = *(_OWORD *)(v34 + 64);
            *((_QWORD *)v70 + 10) = *(_QWORD *)(v34 + 80);
            *((_OWORD *)v70 + 3) = v73;
            *((_OWORD *)v70 + 4) = v74;
            *((_OWORD *)v70 + 2) = v72;
            if (v35 == v60)
            {
              v80 = &v64[88 * v61];
            }
            else
            {
              v75 = &v64[88 * v61];
              do
              {
                v76 = *(_OWORD *)((char *)v35 - 88);
                *(_OWORD *)(v75 - 72) = *(_OWORD *)((char *)v35 - 72);
                *(_OWORD *)(v75 - 88) = v76;
                v77 = *(_OWORD *)((char *)v35 - 56);
                v78 = *(_OWORD *)((char *)v35 - 40);
                v79 = *(_OWORD *)((char *)v35 - 24);
                v80 = v75 - 88;
                *((_DWORD *)v75 - 2) = *((_DWORD *)v35 - 2);
                *(_OWORD *)(v75 - 24) = v79;
                *(_OWORD *)(v75 - 40) = v78;
                *(_OWORD *)(v75 - 56) = v77;
                v35 = (_OWORD *)((char *)v35 - 88);
                v75 -= 88;
              }
              while (v35 != v60);
            }
            v40 = v70 + 88;
            v99 = v80;
            v100 = v70 + 88;
            v101 = &v64[88 * v63];
            if (v60)
              operator delete(v60);
          }
          else
          {
            v36 = *(_OWORD *)(v33 + 16);
            *(_OWORD *)v100 = *(_OWORD *)v33;
            v35[1] = v36;
            v37 = *(_OWORD *)(v33 + 32);
            v38 = *(_OWORD *)(v33 + 48);
            v39 = *(_OWORD *)(v33 + 64);
            *((_QWORD *)v35 + 10) = *(_QWORD *)(v33 + 80);
            v35[3] = v38;
            v35[4] = v39;
            v35[2] = v37;
            v40 = (char *)v35 + 88;
          }
          v100 = v40;
        }
      }
      else
      {
        v25 = sub_100704A28(v7);
        v26 = v103;
        if (v103 >= v104)
        {
          v27 = sub_10071C834(&v102, v25);
        }
        else
        {
          sub_10071C958((uint64_t)&v104, v103, v25);
          v27 = v26 + 432;
        }
        v103 = v27;
      }
LABEL_30:
      v4 = *a2;
    }
  }
  sub_100A470A4(v111, 1);
  v95 = v111[0];
  v92 = sub_100708BF8(a1, &v108, &__p, &v102, &v99, &v96, (uint64_t **)&qword_102310C10, a3, 0, (uint64_t)&v95);
  if (v96)
  {
    v97 = (char *)v96;
    operator delete(v96);
  }
  if (v99)
  {
    v100 = (char *)v99;
    operator delete(v99);
  }
  v99 = &v102;
  sub_10066DCEC((void ***)&v99);
  if (__p)
  {
    v106 = (char *)__p;
    operator delete(__p);
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  return v92;
}

void sub_1006FDC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  a19 = &a22;
  sub_10066DCEC((void ***)&a19);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void sub_1006FDE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1006FDE30()
{
  operator new();
}

void sub_1006FDE78()
{
  operator delete();
}

void sub_1006FDE9C()
{
  sub_1005572A8();
}

void sub_1006FDF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FDF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double *v8;
  double v9;
  double v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *__p[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;
  _BYTE v37[40];

  sub_1002433B8((uint64_t)v37);
  sub_10011E258(v8, a2, a3);
  v10 = v9;
  sub_100263E50((uint64_t)v32);
  v11 = sub_100263F7C(&v33, (uint64_t)"cell ", 5);
  v12 = *(char *)(a1 + 23);
  if (v12 >= 0)
    v13 = a1;
  else
    v13 = *(_QWORD *)a1;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a1 + 23);
  else
    v14 = *(_QWORD *)(a1 + 8);
  v15 = sub_100263F7C(v11, v13, v14);
  v16 = sub_100263F7C(v15, (uint64_t)", local ", 8);
  sub_100B94300(a2, v30);
  if ((v31 & 0x80u) == 0)
    v17 = v30;
  else
    v17 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v18 = v31;
  else
    v18 = (uint64_t)v30[1];
  v19 = sub_100263F7C(v16, (uint64_t)v17, v18);
  v20 = sub_100263F7C(v19, (uint64_t)", remote ", 9);
  sub_100B94300(a3, __p);
  if ((v29 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if ((v29 & 0x80u) == 0)
    v22 = v29;
  else
    v22 = (uint64_t)__p[1];
  sub_100263F7C(v20, (uint64_t)v21, v22);
  if ((char)v29 < 0)
    operator delete(__p[0]);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  v23 = sub_100263F7C(&v33, (uint64_t)", ", 2);
  v24 = *v23;
  *(uint64_t *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 16) = 1;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  v25 = (_QWORD *)std::ostream::operator<<(v23, v10);
  sub_100263F7C(v25, (uint64_t)"m apart", 7);
  std::stringbuf::str(a4, v34);
  *(_QWORD *)((char *)v32
  v33 = v26;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_1006FE190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_1018B38B4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1006FE1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  void **v4;
  void **v5;
  char *v6;
  void *__p[2];
  char v8;
  int v9;
  void **v10;
  uint8_t buf[4];
  void **v12;

  sub_1006FDF78(a1, a2, a3, __p);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v4 = __p;
    if (v8 < 0)
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136380675;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CELL_LOC: %{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v5 = __p;
    if (v8 < 0)
      v5 = (void **)__p[0];
    v9 = 136380675;
    v10 = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CELL_LOC: %{private}s", &v9, 12);
    sub_100512490("Generic", 1, 0, 2, "static void CLNetworkLocationProvider::logCellLocationsWhenLocalAndRemoteDiffer(const std::string &, const CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1006FE3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006FE3E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 200);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE444()
{
  operator delete();
}

uint64_t sub_1006FE468(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 192);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE4C8()
{
  operator delete();
}

uint64_t sub_1006FE4EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 160);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE54C()
{
  operator delete();
}

uint64_t sub_1006FE570(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 152);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE5D0()
{
  operator delete();
}

uint64_t sub_1006FE5F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 240);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE654()
{
  operator delete();
}

uint64_t sub_1006FE678(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 232);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE6D8()
{
  operator delete();
}

uint64_t sub_1006FE6FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 320);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE760()
{
  operator delete();
}

uint64_t sub_1006FE784(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 312);
  if (!result)
    operator new();
  return result;
}

void sub_1006FE7E8()
{
  operator delete();
}

void sub_1006FE80C(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v7 = sub_1006FF738(a1, "CLNetworkLocationProvider", a2);
  *(_QWORD *)v7 = off_10214FDD8;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(v7 + 112) = v8;
  *(_BYTE *)(v7 + 120) = 0;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 168) = v7 + 176;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 208) = v7 + 216;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = v7 + 256;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 272) = 0;
  *(_QWORD *)(v7 + 280) = 0;
  *(_QWORD *)(v7 + 288) = v7 + 296;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 344) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 328) = v7 + 336;
  *(_DWORD *)(v7 + 352) = 0;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_QWORD *)(v7 + 392) = v7 + 400;
  *(_QWORD *)(v7 + 400) = 0;
  *(_QWORD *)(v7 + 424) = 0;
  *(_QWORD *)(v7 + 432) = 0;
  *(_QWORD *)(v7 + 408) = 0;
  *(_QWORD *)(v7 + 416) = v7 + 424;
  *(_BYTE *)(v7 + 440) = 0;
  *(_QWORD *)(v7 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  sub_10023CFD8(v7 + 464, (uint64_t)"NetworkProvider", a1, 300.0);
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = -1;
  *(_BYTE *)(a1 + 524) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = xmmword_101BBE9E0;
  *(_QWORD *)(a1 + 552) = 0x40DC200000000000;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 592;
  *(_QWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  sub_1002433B8(a1 + 624);
  *(_WORD *)(a1 + 664) = 1;
  *(_QWORD *)(a1 + 672) = *a4;
  v9 = a4[1];
  *(_QWORD *)(a1 + 680) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  operator new();
}

void sub_1006FF4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t *a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  sub_100261F44(a23);
  sub_100008848(v52 + 584, *a16);
  sub_100E3E6C8(a17);
  sub_100008848(v52 + 416, *(_QWORD **)(v52 + 424));
  sub_10010D350(v52 + 392, *(_QWORD **)(v52 + 400));
  sub_100008848(v52 + 328, *(_QWORD **)(v52 + 336));
  sub_10071BCA0((uint64_t *)(v52 + 320), 0);
  sub_10071BCA0((uint64_t *)(v52 + 312), 0);
  sub_100008848(v52 + 288, *(_QWORD **)(v52 + 296));
  sub_10071BCA0((uint64_t *)(v52 + 280), 0);
  sub_10071BCA0((uint64_t *)(v52 + 272), 0);
  sub_10071BD58(v56, *(_QWORD **)(v52 + 256));
  sub_10071BCA0(v55, 0);
  sub_10071BCA0(v54, 0);
  sub_100008848(v53, *(_QWORD **)(v52 + 216));
  sub_10071BCA0(a18, 0);
  sub_10071BCA0(a19, 0);
  sub_100008848(a20, *(_QWORD **)(v52 + 176));
  sub_10071BCA0(a21, 0);
  sub_10071BCA0((uint64_t *)(v52 + 152), 0);
  v57 = *(_QWORD *)(v52 + 144);
  *(_QWORD *)(v52 + 144) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(v52 + 136);
  *(_QWORD *)(v52 + 136) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *a22;
  *a22 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *(_QWORD *)(v52 + 112);
  *(_QWORD *)(v52 + 112) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  sub_100701B6C(v52);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FF738(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102150020;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1006FF7B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1006FF7D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterCellLocationSeries");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterCellLocationSeries", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterCellLocationSeries\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10070F628((_QWORD *)a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006FF984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006FF9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterCellLocation");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterCellLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterCellLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100710514(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1006FFB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006FFB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100710A24(a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1006FFD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006FFD4C(uint64_t a1, uint64_t a2, __int128 **a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_activity_scope_state_s state;
  char v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete");
  objc_msgSend(objc_msgSend(*(id *)(a7 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v17 = 1;
    v14 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v14, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v15 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = "activity";
      v24 = 2050;
      v25 = a7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v17 = 0;
  }
  sub_10071417C(a7, v13, a2, a3, a4, a5, a6);
  if (v17)
    os_activity_scope_leave(&state);
}

void sub_1006FFF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1006FFF4C(uint64_t a1, double *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterResponse");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterResponse", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterResponse\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100715150(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100700104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700124(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterLocationError");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterLocationError", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterLocationError\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10071534C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007002DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007002FC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterNearbyError");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterNearbyError", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterNearbyError\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100715F00((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007004B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007004D4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterFinished");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterFinished", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterFinished\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007160F0((_DWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10070068C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007006AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100710EE8(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100700864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007115F8(a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100700A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700A54(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterLteCellLocation");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterLteCellLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterLteCellLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100711ADC(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100700C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700C2C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007125B4(a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100700DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700DFC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterNrCellLocation");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterNrCellLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterNrCellLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100712E24(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100700FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100700FD4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100713904(a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100701184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007011A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_10070FB40(a6, v9, a2, a3);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_10070135C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10070137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100710050(a5, v7, a2);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10070152C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10070154C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLNetworkLocationProvider::onPurgeTimer");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onPurgeTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onPurgeTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100701710(a2, *(double *)(a2 + 536));
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_1007016F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100701710(uint64_t a1, double a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double Current;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  int v19;
  double v20;
  _BYTE buf[1632];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Purging entries older than %.2fs.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v19 = 134217984;
    v20 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Purging entries older than %.2fs.", COERCE_DOUBLE(&v19));
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::clearDatabaseEntriesByAge(CFTimeInterval)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_100197040();
  v5 = sub_1001B796C();
  if ((v5 & 0x400) != 0)
  {
    v9 = sub_1006FE4EC(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v9 + 32), (uint64_t)buf);
    v10 = sub_1006FE570(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v10 + 32), (uint64_t)buf);
    if ((v5 & 0x800000) == 0)
    {
LABEL_8:
      if ((v5 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  v11 = sub_1006FE3E4(a1);
  *(double *)buf = a2;
  sub_10067D760(*(_QWORD *)(v11 + 32), (uint64_t)buf);
  v12 = sub_1006FE468(a1);
  *(double *)buf = a2;
  sub_10067D760(*(_QWORD *)(v12 + 32), (uint64_t)buf);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sub_1000966F8(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v15 + 32), (uint64_t)buf);
    v16 = sub_100096670(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v16 + 32), (uint64_t)buf);
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_15:
  v13 = sub_1006FE5F4(a1);
  *(double *)buf = a2;
  sub_10067D760(*(_QWORD *)(v13 + 32), (uint64_t)buf);
  v14 = sub_1006FE678(a1);
  *(double *)buf = a2;
  sub_10067D760(*(_QWORD *)(v14 + 32), (uint64_t)buf);
  if ((v5 & 0x40000) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v5 & 0x4000000) != 0)
  {
LABEL_11:
    v6 = sub_1006FE6FC(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v6 + 32), (uint64_t)buf);
    v7 = sub_1006FE784(a1);
    *(double *)buf = a2;
    sub_10067D760(*(_QWORD *)(v7 + 32), (uint64_t)buf);
  }
LABEL_12:
  Current = CFAbsoluteTimeGetCurrent();
  sub_101369668(*(_QWORD *)(a1 + 672), a2);
  sub_100717BC0(a2, Current, a1, (uint64_t **)(a1 + 168));
  sub_100717E24(a2, Current, a1, (uint64_t **)(a1 + 208));
  sub_100718088(a2, Current, a1, (uint64_t **)(a1 + 248));
  sub_1007182F8(a2, Current, a1, (uint64_t **)(a1 + 288));
  sub_10071855C(a2, Current, a1, (uint64_t **)(a1 + 328));
  sub_1007187C0(a2, Current, a1, (uint64_t **)(a1 + 416));
}

BOOL sub_100701A74(uint64_t a1)
{
  _BOOL8 result;

  result = sub_10136B64C(*(_QWORD *)(a1 + 672));
  if (result)
    sub_1006AA544();
  return result;
}

uint64_t sub_100701B6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102150020;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100701BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10214FDD8;
  v2 = *(_QWORD *)(a1 + 528);
  if (v2)
  {
    sub_10016E3C4(v2);
    v3 = *(_QWORD *)(a1 + 528);
    if (v3)
    {
      sub_1009865B8(v3);
      operator delete();
    }
    *(_QWORD *)(a1 + 528) = 0;
  }
  sub_100701D90((_QWORD *)a1);
  sub_100261F44(a1 + 672);
  sub_100008848(a1 + 584, *(_QWORD **)(a1 + 592));
  sub_100E3E6C8(a1 + 464);
  sub_100008848(a1 + 416, *(_QWORD **)(a1 + 424));
  sub_10010D350(a1 + 392, *(_QWORD **)(a1 + 400));
  sub_100008848(a1 + 328, *(_QWORD **)(a1 + 336));
  sub_10071BCA0((uint64_t *)(a1 + 320), 0);
  sub_10071BCA0((uint64_t *)(a1 + 312), 0);
  sub_100008848(a1 + 288, *(_QWORD **)(a1 + 296));
  sub_10071BCA0((uint64_t *)(a1 + 280), 0);
  sub_10071BCA0((uint64_t *)(a1 + 272), 0);
  sub_10071BD58(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_10071BCA0((uint64_t *)(a1 + 240), 0);
  sub_10071BCA0((uint64_t *)(a1 + 232), 0);
  sub_100008848(a1 + 208, *(_QWORD **)(a1 + 216));
  sub_10071BCA0((uint64_t *)(a1 + 200), 0);
  sub_10071BCA0((uint64_t *)(a1 + 192), 0);
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10071BCA0((uint64_t *)(a1 + 160), 0);
  sub_10071BCA0((uint64_t *)(a1 + 152), 0);
  v4 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_100701B6C(a1);
}

id sub_100701D90(_QWORD *a1)
{
  id result;

  result = (id)sub_10136B64C(a1[84]);
  if ((_DWORD)result)
  {
    objc_msgSend(*(id *)(a1[16] + 16), "unregister:forNotification:", *(_QWORD *)(a1[16] + 8), 5);
    return objc_msgSend(*(id *)(a1[17] + 16), "unregister:forNotification:", *(_QWORD *)(a1[17] + 8), 1);
  }
  return result;
}

void sub_100701DE4(uint64_t a1)
{
  sub_100701BE0(a1);
  operator delete();
}

void sub_100701E08(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLNetworkLocationProvider::onMotionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (*a2 == 1)
    sub_10136B63C(*(_QWORD *)(a4 + 672), a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100701FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100701FE8@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100702060()
{
  return 1;
}

uint64_t sub_100702068()
{
  return 1;
}

void sub_100702070(uint64_t a1)
{
  double Current;
  double v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  _DWORD v11[2];
  __int16 v12;
  double v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  double v17;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 368);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v4 = vabdd_f64(Current, v3);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)buf = 67109376;
    v15 = v6;
    v16 = 2048;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v7 = *(_DWORD *)(a1 + 352);
    v11[0] = 67109376;
    v11[1] = v7;
    v12 = 2048;
    v13 = v4;
    LODWORD(v10) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf", v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::rescheduleOnReachability()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (v4 >= 900.0)
  {
    *(_DWORD *)(a1 + 352) = 0;
    *(double *)(a1 + 360) = Current;
    goto LABEL_10;
  }
  if (*(int *)(a1 + 352) <= 4)
LABEL_10:
    sub_1002296E8(a1, (uint64_t)"rescheduleOnReachability");
}

NSDictionary *sub_100702288(uint64_t a1)
{
  const __CFString *v2;
  NSString *v3;

  v2 = CFSTR("outcome");
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

uint64_t sub_100702308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  char *v11;
  _WORD v12[8];
  uint8_t buf[8];
  uint64_t v14;
  NSDictionary *(*v15)(uint64_t);
  void *v16;
  char *v17;

  sub_1006FE1E0(a1, a2, a3);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CELL_LOC: ignoring cell since local and network locations disagree.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v12[0] = 0;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CELL_LOC: ignoring cell since local and network locations disagree.", v12, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL getCellLocationWhenLocalAndRemoteDiffer(const std::string &, CLDaemonLocation &, const CLDaemonLocation &)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100702288;
  v16 = &unk_102131FE8;
  v17 = off_1022A3F28;
  AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.integrityCrosscheck"), buf);
  return 0;
}

void sub_100702540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8;

  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v8 = sub_1006FE570(a1);
  sub_1006E0570(*(_QWORD *)(v8 + 32));
}

void sub_100702CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100702D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8;

  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v8 = sub_1006FE468(a1);
  sub_1006E0570(*(_QWORD *)(v8 + 32));
}

void sub_10070347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1007034C8(uint64_t a1, int *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  void *v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  void *v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;

  v17 = *a2;
  memset(v18, 0, sizeof(v18));
  sub_10027205C(v18, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v6 = *((_OWORD *)a2 + 13);
  v29 = *((_OWORD *)a2 + 12);
  v30[0] = v6;
  *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a2 + 55);
  v7 = *((_OWORD *)a2 + 9);
  v25 = *((_OWORD *)a2 + 8);
  v26 = v7;
  v8 = *((_OWORD *)a2 + 11);
  v27 = *((_OWORD *)a2 + 10);
  v28 = v8;
  v9 = *((_OWORD *)a2 + 5);
  v21 = *((_OWORD *)a2 + 4);
  v22 = v9;
  v10 = *((_OWORD *)a2 + 7);
  v23 = *((_OWORD *)a2 + 6);
  v24 = v10;
  v11 = *((_OWORD *)a2 + 3);
  v19 = *((_OWORD *)a2 + 2);
  v20 = v11;
  if (*((char *)a2 + 263) < 0)
  {
    sub_100115CE4(v31, *((void **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    *(_OWORD *)v31 = *((_OWORD *)a2 + 15);
    v31[2] = *((void **)a2 + 32);
  }
  v12 = *(_OWORD *)(a2 + 102);
  v40 = *(_OWORD *)(a2 + 98);
  v41 = v12;
  v13 = *(_OWORD *)(a2 + 86);
  v36 = *(_OWORD *)(a2 + 82);
  v37 = v13;
  v14 = *(_OWORD *)(a2 + 94);
  v38 = *(_OWORD *)(a2 + 90);
  v39 = v14;
  v15 = *(_OWORD *)(a2 + 70);
  v32 = *(_OWORD *)(a2 + 66);
  v33 = v15;
  v16 = *(_OWORD *)(a2 + 78);
  v34 = *(_OWORD *)(a2 + 74);
  v35 = v16;
  v42 = a2[106];
  sub_100708A0C((uint64_t)&v17);
  sub_100707D80(a1, (uint64_t)&v17, a3);
}

void sub_10070494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100664030((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100704A28(uint64_t a1)
{
  uint64_t v2;

  if ((*(_DWORD *)(a1 + 8) - 3) < 3)
    return a1 + 80;
  v2 = sub_1019065C4();
  return sub_100704A50(v2);
}

void sub_100704A50(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  _OWORD v4[2];

  v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  sub_100702540(a1, (uint64_t)v4, a3);
}

void sub_100705784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007057DC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 3 || v1 == 7)
    return a1 + 12;
  v3 = sub_101906730();
  return sub_100705804(v3);
}

void sub_100705804(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  _OWORD v4[2];

  v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  sub_100702D04(a1, (uint64_t)v4, a3);
}

void sub_100706538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100706590(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 8) == 9)
    return a1 + 44;
  v2 = sub_10190689C();
  return sub_1007065B4(v2);
}

void sub_1007065B4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v11[6];

  v3 = a2[3];
  v11[2] = a2[2];
  v11[3] = v3;
  v4 = a2[5];
  v11[4] = a2[4];
  v11[5] = v4;
  v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  sub_1007073D8(a1, v11, a3);
}

void sub_10070735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007073B4(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 8) != 10)
  {
    v2 = sub_101906A08();
    sub_1007073D8(v2, v3, v4);
  }
  return a1 + 600;
}

void sub_1007073D8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v13;
  void *v14;
  _OWORD v15[6];

  v5 = a2[3];
  v15[2] = a2[2];
  v15[3] = v5;
  v6 = a2[5];
  v15[4] = a2[4];
  v15[5] = v6;
  v7 = a2[1];
  v15[0] = *a2;
  v15[1] = v7;
  sub_1005A2548((unsigned int *)v15, &v14);
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v13 = sub_1006FE784(a1);
  sub_10083F4AC(*(_QWORD *)(v13 + 32));
}

void sub_100707CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100707D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  void *v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];
  void *v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;

  v26 = *(_DWORD *)a2;
  memset(v27, 0, sizeof(v27));
  sub_10027205C(v27, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v6 = *(_OWORD *)(a2 + 192);
  v7 = *(_OWORD *)(a2 + 208);
  v8 = *(_OWORD *)(a2 + 160);
  v37 = *(_OWORD *)(a2 + 176);
  v38 = v6;
  v39[0] = v7;
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a2 + 220);
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 96);
  v33 = *(_OWORD *)(a2 + 112);
  v34 = v9;
  v35 = v10;
  v36 = v8;
  v12 = *(_OWORD *)(a2 + 80);
  v30 = *(_OWORD *)(a2 + 64);
  v31 = v12;
  v32 = v11;
  v13 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 32);
  v29 = v13;
  if (*(char *)(a2 + 263) < 0)
  {
    sub_100115CE4(v40, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)(a2 + 240);
    v40[2] = *(void **)(a2 + 256);
  }
  v14 = *(_OWORD *)(a2 + 408);
  v49 = *(_OWORD *)(a2 + 392);
  v50 = v14;
  v15 = *(_OWORD *)(a2 + 344);
  v45 = *(_OWORD *)(a2 + 328);
  v46 = v15;
  v16 = *(_OWORD *)(a2 + 376);
  v47 = *(_OWORD *)(a2 + 360);
  v48 = v16;
  v17 = *(_OWORD *)(a2 + 280);
  v41 = *(_OWORD *)(a2 + 264);
  v42 = v17;
  v18 = *(_OWORD *)(a2 + 312);
  v43 = *(_OWORD *)(a2 + 296);
  v44 = v18;
  v51 = *(_DWORD *)(a2 + 424);
  sub_100708A0C((uint64_t)&v26);
  sub_1005A3550(&v26, &v25);
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  v24 = sub_1006FE678(a1);
  sub_1009A0744(*(_QWORD *)(v24 + 32));
}

void sub_100708948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, ...)
{
  va_list va;

  va_start(va, a14);
  if (a14 < 0)
    operator delete(__p);
  sub_100664030((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100708A0C(uint64_t a1)
{
  _DWORD *v1;
  unint64_t v2;
  NSObject *v4;
  int *v5;
  int v6;
  int *v7;
  int v8;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  v1 = *(_DWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16) - (_QWORD)v1;
  if (v2)
  {
    *(_DWORD *)a1 = *v1;
    if (v2 >= 5)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v4 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(int **)(a1 + 8);
        v6 = *v5;
        LODWORD(v5) = v5[1];
        *(_DWORD *)buf = 67109376;
        v14 = v6;
        v15 = 1024;
        v16 = (int)v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning ignoring second MCC %d %d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v7 = *(int **)(a1 + 8);
        v8 = *v7;
        LODWORD(v7) = v7[1];
        v10[0] = 67109376;
        v10[1] = v8;
        v11 = 1024;
        v12 = (int)v7;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning ignoring second MCC %d %d", v10, 14);
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService_Type::CdmaCell::applyDerivedMcc()", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
    }
  }
}

uint64_t sub_100708BF8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t **a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  char *v24;
  double Current;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void **v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  NSObject *v56;
  __int128 *p_p;
  unint64_t v58;
  uint64_t v59;
  __int128 *v61;
  const char *v62;
  char *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  NSObject *v70;
  _BYTE *v71;
  _OWORD *v72;
  _OWORD *v73;
  __int128 v74;
  _OWORD *v75;
  _OWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  __int128 v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  NSObject *v94;
  _BYTE *v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 v98;
  _OWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  __int128 v106;
  char *v107;
  char *v108;
  __int128 v109;
  char *v110;
  uint64_t v111;
  _BYTE *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  NSObject *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  uint64_t v143;
  _BYTE *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  NSObject *v150;
  _BYTE *v151;
  _OWORD *v152;
  _OWORD *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD *v158;
  _OWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char *v174;
  uint64_t v175;
  _BYTE *v176;
  char *v177;
  char *v178;
  uint64_t *v179;
  uint64_t *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t **v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  double *v188;
  double *v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  NSObject *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  NSObject *v207;
  double *v208;
  double *v209;
  NSObject *v210;
  int v211;
  _BYTE *v212;
  uint64_t v213;
  double v214;
  _BYTE *v215;
  double v216;
  double *v217;
  double *v218;
  uint64_t v219;
  int v220;
  std::string::size_type v221;
  uint64_t v222;
  double v223;
  std::string *v224;
  double v225;
  char *v226;
  char *v227;
  NSObject *v228;
  uint64_t v229;
  NSObject *v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int *v233;
  NSObject *v234;
  int v235;
  _BYTE *v236;
  uint64_t v237;
  double v238;
  _BYTE *v239;
  double v240;
  unsigned int *v241;
  unsigned int *v242;
  uint64_t v243;
  int v244;
  std::string::size_type v245;
  uint64_t v246;
  double v247;
  std::string *v248;
  double v249;
  char *v250;
  char *v251;
  NSObject *v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int *v255;
  NSObject *v256;
  int v257;
  _BYTE *v258;
  uint64_t v259;
  double v260;
  _BYTE *v261;
  double v262;
  unsigned int *v263;
  unsigned int *v264;
  uint64_t v265;
  int v266;
  std::string::size_type v267;
  uint64_t v268;
  double v269;
  std::string *v270;
  double v271;
  char *v272;
  char *v273;
  NSObject *v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int *v277;
  NSObject *v278;
  int v279;
  _BYTE *v280;
  uint64_t v281;
  double v282;
  _BYTE *v283;
  double v284;
  unsigned int *v285;
  unsigned int *v286;
  uint64_t v287;
  int v288;
  std::string::size_type v289;
  uint64_t v290;
  double v291;
  std::string *v292;
  double v293;
  char *v294;
  char *v295;
  NSObject *v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int *v299;
  NSObject *v300;
  int v301;
  _BYTE *v302;
  uint64_t v303;
  double v304;
  _BYTE *v305;
  double v306;
  unsigned int *v307;
  unsigned int *v308;
  uint64_t v309;
  int v310;
  std::string::size_type v311;
  uint64_t v312;
  double v313;
  std::string *v314;
  double v315;
  char *v316;
  char *v317;
  NSObject *v318;
  uint64_t v319;
  unsigned int *v320;
  unsigned int *v321;
  NSObject *v322;
  int v323;
  _BYTE *v324;
  uint64_t v325;
  double v326;
  _BYTE *v327;
  double v328;
  unsigned int *v329;
  unsigned int *v330;
  uint64_t v331;
  int v332;
  std::string::size_type v333;
  uint64_t v334;
  double v335;
  std::string *v336;
  double v337;
  char *v338;
  char *v339;
  NSObject *v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  const char *v348;
  char *v349;
  const char *v350;
  uint64_t v351;
  const char *v352;
  char *v353;
  const char *v354;
  char *v355;
  uint64_t v356;
  const char *v357;
  char *v358;
  uint64_t v359;
  const char *v360;
  char *v361;
  uint64_t v362;
  const char *v363;
  char *v364;
  uint64_t v365;
  const char *v366;
  char *v367;
  uint64_t v368;
  const char *v369;
  char *v370;
  uint64_t v371;
  const char *v372;
  char *v373;
  uint64_t v374;
  double v375;
  double v376;
  uint64_t **v377;
  uint64_t v378;
  unsigned int v380;
  int v382;
  std::string v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  int v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  unint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char v405;
  __int128 v406;
  char *v407;
  __int128 v408;
  char *v409;
  __int128 v410;
  char *v411;
  __int128 v412;
  char *v413;
  __int128 __p;
  char *v415;
  _BYTE v416[80];
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  _OWORD v425[2];
  __int128 v426;
  uint64_t v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  int v438;
  _BYTE buf[68];
  __int16 v440;
  int v441;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v15 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (uint64_t)(a2[1] - *a2) >> 5;
    v17 = (uint64_t)(a3[1] - *a3) >> 5;
    v18 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
    v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
    v21 = a7[1] - *a7;
    *(_DWORD *)buf = 134350848;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v17;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v18;
    *(_WORD *)&buf[32] = 2050;
    *(_QWORD *)&buf[34] = v19;
    *(_WORD *)&buf[42] = 2050;
    *(_QWORD *)&buf[44] = v20;
    *(_WORD *)&buf[52] = 2050;
    *(_QWORD *)&buf[54] = v21;
    *(_WORD *)&buf[62] = 1026;
    *(_DWORD *)&buf[64] = a8;
    v440 = 1026;
    v441 = a9;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, in, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, cache, %{public}d, piggyback, %{public}d\n", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v342 = (uint64_t)(a2[1] - *a2) >> 5;
    v343 = (uint64_t)(a3[1] - *a3) >> 5;
    v344 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
    v345 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3);
    v346 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
    v347 = a7[1] - *a7;
    *(_DWORD *)v416 = 134350848;
    *(_QWORD *)&v416[4] = v342;
    *(_WORD *)&v416[12] = 2050;
    *(_QWORD *)&v416[14] = v343;
    *(_WORD *)&v416[22] = 2050;
    *(_QWORD *)&v416[24] = v344;
    *(_WORD *)&v416[32] = 2050;
    *(_QWORD *)&v416[34] = v345;
    *(_WORD *)&v416[42] = 2050;
    *(_QWORD *)&v416[44] = v346;
    *(_WORD *)&v416[52] = 2050;
    *(_QWORD *)&v416[54] = v347;
    *(_WORD *)&v416[62] = 1026;
    *(_DWORD *)&v416[64] = a8;
    *(_WORD *)&v416[68] = 1026;
    *(_DWORD *)&v416[70] = a9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, in, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, cache, %{public}d, piggyback, %{public}d\n", v416, 74);
    v349 = (char *)v348;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v348);
    if (v349 != buf)
      free(v349);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, skip, private", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    *(_WORD *)v416 = 0;
    LODWORD(v374) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, skip, private", v416, v374);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v23);
LABEL_492:
    if (v24 != buf)
      free(v24);
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) != 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v64 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, skip, bigswitch", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    *(_WORD *)v416 = 0;
    LODWORD(v374) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, skip, bigswitch", v416, v374);
    v24 = (char *)v350;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v350);
    goto LABEL_492;
  }
  if (!*(_DWORD *)(a1 + 608) && !*(_BYTE *)(a1 + 440))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v340 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v340, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, skip, connectivity", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    *(_WORD *)v416 = 0;
    LODWORD(v374) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, skip, connectivity", v416, v374);
    v24 = (char *)v341;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v341);
    goto LABEL_492;
  }
  v388 = 0xFFFF;
  v389 = 0;
  v390 = 0;
  v391 = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v392 = _Q0;
  v393 = _Q0;
  v394 = _Q0;
  v397 = 0;
  v398 = 0;
  v396 = 0xBFF0000000000000;
  v395 = 0;
  v399 = 0;
  v400 = 0xBFF0000000000000;
  v401 = 0x7FFFFFFF;
  v403 = 0;
  v404 = 0;
  v402 = 0;
  v405 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v376 = *(double *)&a3;
  v377 = a7;
  HIDWORD(v375) = a9;
  v378 = a1;
  v385 = 0;
  v386 = 0;
  v387 = 0;
  v31 = *a4;
  if (a4[1] != *a4)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      v34 = v31 + 432 * v32;
      *(_DWORD *)v416 = *(_DWORD *)v34;
      memset(&v416[8], 0, 24);
      sub_10027205C(&v416[8], *(const void **)(v34 + 8), *(_QWORD *)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 2);
      *(_OWORD *)&v416[32] = *(_OWORD *)(v34 + 32);
      v35 = *(_OWORD *)(v34 + 48);
      v36 = *(_OWORD *)(v34 + 64);
      v37 = *(_OWORD *)(v34 + 96);
      v417 = *(_OWORD *)(v34 + 80);
      v418 = v37;
      *(_OWORD *)&v416[48] = v35;
      *(_OWORD *)&v416[64] = v36;
      v38 = *(_OWORD *)(v34 + 112);
      v39 = *(_OWORD *)(v34 + 128);
      v40 = *(_OWORD *)(v34 + 160);
      v421 = *(_OWORD *)(v34 + 144);
      v422 = v40;
      v419 = v38;
      v420 = v39;
      v41 = *(_OWORD *)(v34 + 176);
      v42 = *(_OWORD *)(v34 + 192);
      v43 = *(_OWORD *)(v34 + 208);
      *(_OWORD *)((char *)v425 + 12) = *(_OWORD *)(v34 + 220);
      v424 = v42;
      v425[0] = v43;
      v423 = v41;
      v44 = (void **)(v34 + 240);
      if (*(char *)(v34 + 263) < 0)
      {
        sub_100115CE4(&v426, *v44, *(_QWORD *)(v31 + 432 * v32 + 248));
      }
      else
      {
        v45 = *(_OWORD *)v44;
        v427 = *(_QWORD *)(v34 + 256);
        v426 = v45;
      }
      v46 = v31 + 432 * v32;
      v47 = *(_OWORD *)(v46 + 264);
      v48 = *(_OWORD *)(v46 + 296);
      v429 = *(_OWORD *)(v46 + 280);
      v430 = v48;
      v428 = v47;
      v49 = *(_OWORD *)(v46 + 312);
      v50 = *(_OWORD *)(v46 + 328);
      v51 = *(_OWORD *)(v46 + 360);
      v433 = *(_OWORD *)(v46 + 344);
      v434 = v51;
      v431 = v49;
      v432 = v50;
      v52 = *(_OWORD *)(v46 + 376);
      v53 = *(_OWORD *)(v46 + 392);
      v54 = *(_OWORD *)(v46 + 408);
      v438 = *(_DWORD *)(v46 + 424);
      v436 = v53;
      v437 = v54;
      v435 = v52;
      sub_100708A0C((uint64_t)v416);
      sub_1005A3550((unsigned int *)v416, &__p);
      if (a8)
      {
        v55 = sub_1006FE5F4(a1);
        sub_1009A0744(*(_QWORD *)(v55 + 32));
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v56 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if (SHIBYTE(v415) < 0)
          p_p = (__int128 *)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CELL_LOC: cdma cell, %s, re-querying", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v61 = &__p;
        if (SHIBYTE(v415) < 0)
          v61 = (__int128 *)__p;
        LODWORD(v412) = 136315138;
        *(_QWORD *)((char *)&v412 + 4) = v61;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: cdma cell, %s, re-querying", (const char *)&v412);
        v63 = (char *)v62;
        sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      *(_QWORD *)&v412 = v416;
      *((double *)sub_10071BF68((uint64_t **)(a1 + 248), (uint64_t)v416, (uint64_t)&unk_101B9EB60, (uint64_t *)&v412) + 58) = Current;
      v58 = v386;
      if (v386 >= v387)
      {
        v59 = sub_10071C834(&v385, (uint64_t)v416);
      }
      else
      {
        sub_10071C958((uint64_t)&v387, v386, (uint64_t)v416);
        v59 = v58 + 432;
      }
      v386 = v59;
      if (SHIBYTE(v415) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v427) < 0)
        operator delete((void *)v426);
      if (*(_QWORD *)&v416[8])
      {
        *(_QWORD *)&v416[16] = *(_QWORD *)&v416[8];
        operator delete(*(void **)&v416[8]);
      }
      v32 = v33;
      v31 = *a4;
    }
    while (0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4) > v33++);
  }
  v412 = 0uLL;
  v413 = 0;
  if (a2[1] != *a2)
  {
    v67 = 0;
    v68 = 0;
    do
    {
      if (a8)
      {
        v69 = sub_1006FE4EC(v378);
        sub_1006E0570(*(_QWORD *)(v69 + 32));
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v70 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_1005A18B4((unsigned int *)(*a2 + 32 * v67), buf);
        v71 = buf;
        if (buf[23] < 0)
          v71 = *(_BYTE **)buf;
        *(_DWORD *)v416 = 136315138;
        *(_QWORD *)&v416[4] = v71;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "CELL_LOC: gsm cell, %s, re-querying", v416, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v87 = qword_1022A02D8;
        sub_1005A18B4((unsigned int *)(*a2 + 32 * v67), v416);
        v88 = v416;
        if (v416[23] < 0)
          v88 = *(_BYTE **)v416;
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v88;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, 2, "CELL_LOC: gsm cell, %s, re-querying", (const char *)&__p);
        v90 = v89;
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v90);
        if (v90 != buf)
          free(v90);
      }
      *(_QWORD *)v416 = *a2 + 32 * v67;
      *((double *)sub_10071BDE4((uint64_t **)(v378 + 168), *(_DWORD **)v416, (uint64_t)&unk_101B9EB60, (_OWORD **)v416) + 8) = Current;
      v72 = (_OWORD *)(*a2 + 32 * v67);
      v73 = (_OWORD *)*((_QWORD *)&v412 + 1);
      if (*((_QWORD *)&v412 + 1) >= (unint64_t)v413)
      {
        v76 = (_OWORD *)v412;
        v77 = (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 5;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 59)
          sub_100259694();
        v79 = (uint64_t)&v413[-v412];
        if ((uint64_t)&v413[-v412] >> 4 > v78)
          v78 = v79 >> 4;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0)
          v80 = 0x7FFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          v81 = (char *)sub_10025BA00((uint64_t)&v413, v80);
          v73 = (_OWORD *)*((_QWORD *)&v412 + 1);
          v76 = (_OWORD *)v412;
        }
        else
        {
          v81 = 0;
        }
        v82 = v72[1];
        v83 = &v81[32 * v77];
        *(_OWORD *)v83 = *v72;
        *((_OWORD *)v83 + 1) = v82;
        if (v73 == v76)
        {
          v86 = &v81[32 * v77];
        }
        else
        {
          v84 = &v81[32 * v77];
          do
          {
            v85 = *(v73 - 1);
            v86 = v84 - 32;
            *((_OWORD *)v84 - 2) = *(v73 - 2);
            *((_OWORD *)v84 - 1) = v85;
            v73 -= 2;
            v84 -= 32;
          }
          while (v73 != v76);
        }
        v75 = v83 + 32;
        *(_QWORD *)&v412 = v86;
        *((_QWORD *)&v412 + 1) = v83 + 32;
        v413 = &v81[32 * v80];
        if (v76)
          operator delete(v76);
      }
      else
      {
        v74 = v72[1];
        **((_OWORD **)&v412 + 1) = *v72;
        v73[1] = v74;
        v75 = v73 + 2;
      }
      *((_QWORD *)&v412 + 1) = v75;
      v67 = ++v68;
    }
    while (v68 < (unint64_t)((uint64_t)(a2[1] - *a2) >> 5));
  }
  __p = 0uLL;
  v415 = 0;
  if (a3[1] != *a3)
  {
    v91 = 0;
    v92 = 0;
    do
    {
      if (a8)
      {
        v93 = sub_1006FE3E4(v378);
        sub_1006E0570(*(_QWORD *)(v93 + 32));
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v94 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_1005A18B4((unsigned int *)(*a3 + 32 * v91), buf);
        v95 = buf;
        if (buf[23] < 0)
          v95 = *(_BYTE **)buf;
        *(_DWORD *)v416 = 136315138;
        *(_QWORD *)&v416[4] = v95;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "CELL_LOC: scdma cell, %s, re-querying", v416, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v111 = qword_1022A02D8;
        sub_1005A18B4((unsigned int *)(*a3 + 32 * v91), v416);
        v112 = v416;
        if (v416[23] < 0)
          v112 = *(_BYTE **)v416;
        LODWORD(v410) = 136315138;
        *(_QWORD *)((char *)&v410 + 4) = v112;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v111, 2, "CELL_LOC: scdma cell, %s, re-querying", (const char *)&v410);
        v114 = v113;
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v114);
        if (v114 != buf)
          free(v114);
      }
      *(_QWORD *)v416 = *a3 + 32 * v91;
      *((double *)sub_10071BDE4((uint64_t **)(v378 + 208), *(_DWORD **)v416, (uint64_t)&unk_101B9EB60, (_OWORD **)v416) + 8) = Current;
      v96 = (_OWORD *)(*a3 + 32 * v91);
      v97 = (_OWORD *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) >= (unint64_t)v415)
      {
        v100 = (_OWORD *)__p;
        v101 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 59)
          sub_100259694();
        v103 = (uint64_t)&v415[-__p];
        if ((uint64_t)&v415[-__p] >> 4 > v102)
          v102 = v103 >> 4;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFE0)
          v104 = 0x7FFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)sub_10025BA00((uint64_t)&v415, v104);
          v97 = (_OWORD *)*((_QWORD *)&__p + 1);
          v100 = (_OWORD *)__p;
        }
        else
        {
          v105 = 0;
        }
        v106 = v96[1];
        v107 = &v105[32 * v101];
        *(_OWORD *)v107 = *v96;
        *((_OWORD *)v107 + 1) = v106;
        if (v97 == v100)
        {
          v110 = &v105[32 * v101];
        }
        else
        {
          v108 = &v105[32 * v101];
          do
          {
            v109 = *(v97 - 1);
            v110 = v108 - 32;
            *((_OWORD *)v108 - 2) = *(v97 - 2);
            *((_OWORD *)v108 - 1) = v109;
            v97 -= 2;
            v108 -= 32;
          }
          while (v97 != v100);
        }
        v99 = v107 + 32;
        *(_QWORD *)&__p = v110;
        *((_QWORD *)&__p + 1) = v107 + 32;
        v415 = &v105[32 * v104];
        if (v100)
          operator delete(v100);
      }
      else
      {
        v98 = v96[1];
        **((_OWORD **)&__p + 1) = *v96;
        v97[1] = v98;
        v99 = v97 + 2;
      }
      *((_QWORD *)&__p + 1) = v99;
      v91 = ++v92;
    }
    while (v92 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 5));
  }
  v410 = 0uLL;
  v411 = 0;
  if (a5[1] != *a5)
  {
    v115 = 0;
    v116 = 0;
    do
    {
      if (a8)
      {
        v117 = sub_1000966F8(v378);
        sub_1000963C4(*(_QWORD *)(v117 + 32));
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v118 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        sub_10009643C((unsigned int *)(*a5 + 88 * v115), buf);
        v119 = buf;
        if (buf[23] < 0)
          v119 = *(_BYTE **)buf;
        *(_DWORD *)v416 = 136315138;
        *(_QWORD *)&v416[4] = v119;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CELL_LOC: lte cell, %s, re-querying", v416, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v143 = qword_1022A02D8;
        sub_10009643C((unsigned int *)(*a5 + 88 * v115), v416);
        v144 = v416;
        if (v416[23] < 0)
          v144 = *(_BYTE **)v416;
        LODWORD(v408) = 136315138;
        *(_QWORD *)((char *)&v408 + 4) = v144;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v143, 2, "CELL_LOC: lte cell, %s, re-querying", (const char *)&v408);
        v146 = v145;
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v146);
        if (v146 != buf)
          free(v146);
      }
      *(_QWORD *)v416 = *a5 + 88 * v115;
      *((double *)sub_10071C58C((uint64_t **)(v378 + 288), *(_DWORD **)v416, (uint64_t)&unk_101B9EB60, (_OWORD **)v416)
      + 15) = Current;
      v120 = *a5 + 88 * v115;
      v121 = *((_QWORD *)&v410 + 1);
      if (*((_QWORD *)&v410 + 1) >= (unint64_t)v411)
      {
        v127 = (void *)v410;
        v128 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v410 + 1) - v410) >> 3);
        v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) > 0x2E8BA2E8BA2E8BALL)
          sub_100259694();
        if (0x5D1745D1745D1746 * ((uint64_t)&v411[-v410] >> 3) > v129)
          v129 = 0x5D1745D1745D1746 * ((uint64_t)&v411[-v410] >> 3);
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v411[-v410] >> 3)) >= 0x1745D1745D1745DLL)
          v130 = 0x2E8BA2E8BA2E8BALL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_100279B30((uint64_t)&v411, v130);
          v121 = *((_QWORD *)&v410 + 1);
          v127 = (void *)v410;
        }
        else
        {
          v131 = 0;
        }
        v132 = &v131[88 * v128];
        v133 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)v132 = *(_OWORD *)v120;
        *((_OWORD *)v132 + 1) = v133;
        v134 = *(_OWORD *)(v120 + 32);
        v135 = *(_OWORD *)(v120 + 48);
        v136 = *(_OWORD *)(v120 + 64);
        *((_QWORD *)v132 + 10) = *(_QWORD *)(v120 + 80);
        *((_OWORD *)v132 + 3) = v135;
        *((_OWORD *)v132 + 4) = v136;
        *((_OWORD *)v132 + 2) = v134;
        if ((void *)v121 == v127)
        {
          v142 = &v131[88 * v128];
        }
        else
        {
          v137 = &v131[88 * v128];
          do
          {
            v138 = *(_OWORD *)(v121 - 88);
            *(_OWORD *)(v137 - 72) = *(_OWORD *)(v121 - 72);
            *(_OWORD *)(v137 - 88) = v138;
            v139 = *(_OWORD *)(v121 - 56);
            v140 = *(_OWORD *)(v121 - 40);
            v141 = *(_OWORD *)(v121 - 24);
            v142 = v137 - 88;
            *((_DWORD *)v137 - 2) = *(_DWORD *)(v121 - 8);
            *(_OWORD *)(v137 - 24) = v141;
            *(_OWORD *)(v137 - 40) = v140;
            *(_OWORD *)(v137 - 56) = v139;
            v121 -= 88;
            v137 -= 88;
          }
          while ((void *)v121 != v127);
        }
        v126 = v132 + 88;
        *(_QWORD *)&v410 = v142;
        *((_QWORD *)&v410 + 1) = v132 + 88;
        v411 = &v131[88 * v130];
        if (v127)
          operator delete(v127);
      }
      else
      {
        v122 = *(_OWORD *)(v120 + 16);
        **((_OWORD **)&v410 + 1) = *(_OWORD *)v120;
        *(_OWORD *)(v121 + 16) = v122;
        v123 = *(_OWORD *)(v120 + 32);
        v124 = *(_OWORD *)(v120 + 48);
        v125 = *(_OWORD *)(v120 + 64);
        *(_QWORD *)(v121 + 80) = *(_QWORD *)(v120 + 80);
        *(_OWORD *)(v121 + 48) = v124;
        *(_OWORD *)(v121 + 64) = v125;
        *(_OWORD *)(v121 + 32) = v123;
        v126 = (char *)(v121 + 88);
      }
      *((_QWORD *)&v410 + 1) = v126;
      v115 = ++v116;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3) > (unint64_t)v116);
  }
  v408 = 0uLL;
  v409 = 0;
  if (a6[1] != *a6)
  {
    v147 = 0;
    v148 = 0;
    do
    {
      if (a8)
      {
        v149 = sub_1006FE6FC(v378);
        sub_10083F4AC(*(_QWORD *)(v149 + 32));
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FF50);
      v150 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        sub_1005A2548((unsigned int *)(*a6 + 96 * v147), buf);
        v151 = buf;
        if (buf[23] < 0)
          v151 = *(_BYTE **)buf;
        *(_DWORD *)v416 = 136315138;
        *(_QWORD *)&v416[4] = v151;
        _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEBUG, "CELL_LOC: nr cell, %s, re-querying", v416, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v175 = qword_1022A0048;
        sub_1005A2548((unsigned int *)(*a6 + 96 * v147), v416);
        v176 = v416;
        if (v416[23] < 0)
          v176 = *(_BYTE **)v416;
        LODWORD(v406) = 136315138;
        *(_QWORD *)((char *)&v406 + 4) = v176;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v175, 2, "CELL_LOC: nr cell, %s, re-querying", (const char *)&v406);
        v178 = v177;
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v178);
        if (v178 != buf)
          free(v178);
      }
      *(_QWORD *)v416 = *a6 + 96 * v147;
      *((double *)sub_10071C628((uint64_t **)(v378 + 328), *(uint64_t *)v416, (uint64_t)&unk_101B9EB60, (_OWORD **)v416)
      + 16) = Current;
      v152 = (_OWORD *)(*a6 + 96 * v147);
      v153 = (_OWORD *)*((_QWORD *)&v408 + 1);
      if (*((_QWORD *)&v408 + 1) >= (unint64_t)v409)
      {
        v159 = (_OWORD *)v408;
        v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 5);
        v161 = v160 + 1;
        if (v160 + 1 > 0x2AAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((uint64_t)&v409[-v408] >> 5) > v161)
          v161 = 0x5555555555555556 * ((uint64_t)&v409[-v408] >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v409[-v408] >> 5) >= 0x155555555555555)
          v162 = 0x2AAAAAAAAAAAAAALL;
        else
          v162 = v161;
        if (v162)
        {
          v163 = (char *)sub_10067257C((uint64_t)&v409, v162);
          v153 = (_OWORD *)*((_QWORD *)&v408 + 1);
          v159 = (_OWORD *)v408;
        }
        else
        {
          v163 = 0;
        }
        v164 = &v163[96 * v160];
        v165 = v152[1];
        *(_OWORD *)v164 = *v152;
        *((_OWORD *)v164 + 1) = v165;
        v166 = v152[2];
        v167 = v152[3];
        v168 = v152[5];
        *((_OWORD *)v164 + 4) = v152[4];
        *((_OWORD *)v164 + 5) = v168;
        *((_OWORD *)v164 + 2) = v166;
        *((_OWORD *)v164 + 3) = v167;
        if (v153 == v159)
        {
          v174 = &v163[96 * v160];
        }
        else
        {
          v169 = &v163[96 * v160];
          do
          {
            v170 = *(v153 - 5);
            *((_OWORD *)v169 - 6) = *(v153 - 6);
            *((_OWORD *)v169 - 5) = v170;
            v171 = *(v153 - 4);
            v172 = *(v153 - 3);
            v173 = *(v153 - 2);
            v174 = v169 - 96;
            *(_OWORD *)(v169 - 20) = *(_OWORD *)((char *)v153 - 20);
            *((_OWORD *)v169 - 3) = v172;
            *((_OWORD *)v169 - 2) = v173;
            *((_OWORD *)v169 - 4) = v171;
            v153 -= 6;
            v169 -= 96;
          }
          while (v153 != v159);
        }
        v158 = v164 + 96;
        *(_QWORD *)&v408 = v174;
        *((_QWORD *)&v408 + 1) = v164 + 96;
        v409 = &v163[96 * v162];
        if (v159)
          operator delete(v159);
      }
      else
      {
        v154 = v152[1];
        **((_OWORD **)&v408 + 1) = *v152;
        v153[1] = v154;
        v155 = v152[2];
        v156 = v152[3];
        v157 = v152[5];
        v153[4] = v152[4];
        v153[5] = v157;
        v153[2] = v155;
        v153[3] = v156;
        v158 = v153 + 6;
      }
      *((_QWORD *)&v408 + 1) = v158;
      v147 = ++v148;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5) > v148);
  }
  v406 = 0uLL;
  v407 = 0;
  v179 = *v377;
  v180 = v377[1];
  if (*v377 == v180)
  {
    v182 = 0;
    v382 = 0;
    v181 = 0;
    v183 = v378;
  }
  else
  {
    v181 = 0;
    v382 = 0;
    v182 = 0;
    v183 = v378;
    v184 = (uint64_t **)(v378 + 416);
    do
    {
      v185 = *(_QWORD *)(v183 + 672);
      v186 = *v179;
      v187 = operator new(8uLL);
      *(_QWORD *)v416 = v187;
      *v187 = v186;
      *(_QWORD *)&v416[16] = v187 + 1;
      *(_QWORD *)&v416[8] = v187 + 1;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v185 + 32))(buf, v185, v416);
      v183 = v378;
      if (*(_QWORD *)v416)
      {
        *(_QWORD *)&v416[8] = *(_QWORD *)v416;
        operator delete(*(void **)v416);
      }
      v188 = (double *)sub_100191618((uint64_t)buf, v179);
      if (&buf[8] == (_BYTE *)v188 || !a8 || Current - v188[13] >= 28800.0)
      {
        if (!a8
          || (v189 = (double *)sub_100191618((uint64_t)v184, v179), (double *)(v378 + 424) == v189)
          || Current - v189[5] >= 3600.0)
        {
          *(_QWORD *)v416 = v179;
          *((double *)sub_10071CE70(v184, v179, (uint64_t)&unk_101B9EB60, (uint64_t **)v416) + 5) = Current;
          v190 = (char *)*((_QWORD *)&v406 + 1);
          if (*((_QWORD *)&v406 + 1) >= (unint64_t)v407)
          {
            v192 = (char *)v406;
            v193 = (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3;
            v194 = v193 + 1;
            if ((unint64_t)(v193 + 1) >> 61)
              sub_100259694();
            v195 = (uint64_t)&v407[-v406];
            if ((uint64_t)&v407[-v406] >> 2 > v194)
              v194 = v195 >> 2;
            if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
              v196 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v196 = v194;
            if (v196)
            {
              v197 = (char *)sub_10025E6A0((uint64_t)&v407, v196);
              v190 = (char *)*((_QWORD *)&v406 + 1);
              v192 = (char *)v406;
            }
            else
            {
              v197 = 0;
            }
            v198 = &v197[8 * v193];
            *(_QWORD *)v198 = *v179;
            v191 = v198 + 8;
            while (v190 != v192)
            {
              v199 = *((_QWORD *)v190 - 1);
              v190 -= 8;
              *((_QWORD *)v198 - 1) = v199;
              v198 -= 8;
            }
            *(_QWORD *)&v406 = v198;
            *((_QWORD *)&v406 + 1) = v191;
            v407 = &v197[8 * v196];
            if (v192)
              operator delete(v192);
          }
          else
          {
            **((_QWORD **)&v406 + 1) = *v179;
            v191 = v190 + 8;
          }
          *((_QWORD *)&v406 + 1) = v191;
          ++v181;
        }
        else
        {
          ++v382;
        }
      }
      else
      {
        ++v182;
      }
      sub_100008848((uint64_t)buf, *(_QWORD **)&buf[8]);
      ++v179;
    }
    while (v179 != v180);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v200 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v201 = v377[1] - *v377;
    *(_DWORD *)buf = 134350080;
    *(_QWORD *)&buf[4] = v201;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v181;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v182;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v382;
    *(_WORD *)&buf[30] = 2050;
    *(_QWORD *)&buf[32] = (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_INFO, "AlsWifi, query, in, %{public}lu, paths, %{public}d, %{public}d, %{public}d, out, %{public}lu", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v351 = v377[1] - *v377;
    *(_DWORD *)v416 = 134350080;
    *(_QWORD *)&v416[4] = v351;
    *(_WORD *)&v416[12] = 1026;
    *(_DWORD *)&v416[14] = v181;
    *(_WORD *)&v416[18] = 1026;
    *(_DWORD *)&v416[20] = v182;
    *(_WORD *)&v416[24] = 1026;
    *(_DWORD *)&v416[26] = v382;
    *(_WORD *)&v416[30] = 2050;
    *(_QWORD *)&v416[32] = (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3;
    LODWORD(v375) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "AlsWifi, query, in, %{public}lu, paths, %{public}d, %{public}d, %{public}d, out, %{public}lu", v416, *(_QWORD *)&v375);
    v353 = (char *)v352;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v352);
    if (v353 != buf)
      free(v353);
    v183 = v378;
  }
  if ((_QWORD)v412 != *((_QWORD *)&v412 + 1))
  {
    v203 = *((_QWORD *)&__p + 1);
    v202 = __p;
    v204 = v385;
LABEL_260:
    *(_DWORD *)(v183 + 560) = ((unint64_t)(v203 - v202) >> 5)
                            + ((*((_QWORD *)&v412 + 1) - (_QWORD)v412) >> 5)
                            + 1749801491 * ((v386 - v204) >> 4)
                            + *(_DWORD *)(v183 + 560)
                            - 1171354717 * ((*((_QWORD *)&v410 + 1) - (_QWORD)v410) >> 3)
                            - 1431655765 * ((*((_QWORD *)&v408 + 1) - (_QWORD)v408) >> 5);
    *(_DWORD *)(v183 + 564) += (*((_QWORD *)&v406 + 1) - (_QWORD)v406) >> 3;
    if (HIDWORD(v375))
      v205 = 100;
    else
      v205 = 1;
    v206 = *(_QWORD *)(v183 + 448);
    *(_DWORD *)(v206 + 296) = 0;
    *(_DWORD *)(v206 + 300) = v205;
    v380 = sub_10070DD50(v183, &v412, &__p, &v385, &v410, &v408, &v406, a10);
    *(_QWORD *)(*(_QWORD *)(v183 + 448) + 296) = &_mh_execute_header;
    goto LABEL_264;
  }
  v203 = *((_QWORD *)&__p + 1);
  v202 = __p;
  v204 = v385;
  if ((_QWORD)__p != *((_QWORD *)&__p + 1))
    goto LABEL_260;
  if (v385 != v386 || (_QWORD)v410 != *((_QWORD *)&v410 + 1) || (_QWORD)v408 != *((_QWORD *)&v408 + 1))
  {
    v203 = __p;
    goto LABEL_260;
  }
  v203 = __p;
  if ((_QWORD)v406 != *((_QWORD *)&v406 + 1))
    goto LABEL_260;
  v205 = 0;
  v380 = -1;
LABEL_264:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v207 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241984;
    *(_DWORD *)&buf[4] = v380;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 5;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = 0x84BDA12F684BDA13 * ((uint64_t)(v386 - v385) >> 4);
    *(_WORD *)&buf[38] = 2050;
    *(_QWORD *)&buf[40] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v410 + 1) - v410) >> 3);
    *(_WORD *)&buf[48] = 2050;
    *(_QWORD *)&buf[50] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 5);
    *(_WORD *)&buf[58] = 2050;
    *(_QWORD *)&buf[60] = (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3;
    v440 = 1026;
    v441 = v205;
    _os_log_impl((void *)&_mh_execute_header, v207, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, made, %{public}d, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, nearby, %{public}d\n", buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    *(_DWORD *)v416 = 67241984;
    *(_DWORD *)&v416[4] = v380;
    *(_WORD *)&v416[8] = 2050;
    *(_QWORD *)&v416[10] = (uint64_t)(*((_QWORD *)&v412 + 1) - v412) >> 5;
    *(_WORD *)&v416[18] = 2050;
    *(_QWORD *)&v416[20] = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5;
    *(_WORD *)&v416[28] = 2050;
    *(_QWORD *)&v416[30] = 0x84BDA12F684BDA13 * ((uint64_t)(v386 - v385) >> 4);
    *(_WORD *)&v416[38] = 2050;
    *(_QWORD *)&v416[40] = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v410 + 1) - v410) >> 3);
    *(_WORD *)&v416[48] = 2050;
    *(_QWORD *)&v416[50] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v408 + 1) - v408) >> 5);
    *(_WORD *)&v416[58] = 2050;
    *(_QWORD *)&v416[60] = (uint64_t)(*((_QWORD *)&v406 + 1) - v406) >> 3;
    *(_WORD *)&v416[68] = 1026;
    *(_DWORD *)&v416[70] = v205;
    LODWORD(v375) = 74;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, made, %{public}d, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, nearby, %{public}d\n", v416, *(_QWORD *)&v375);
    v355 = (char *)v354;
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v354);
    if (v355 != buf)
      free(v355);
    v183 = v378;
  }
  if (*(_QWORD *)(v183 + 432) > 0x258uLL)
  {
    v208 = *(double **)(v183 + 416);
    v209 = (double *)(v183 + 424);
    if (v208 != (double *)(v183 + 424))
    {
      do
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v210 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          sub_1000C2150((_QWORD *)v208 + 4, (std::string *)v416);
          v211 = v416[23];
          v212 = *(_BYTE **)v416;
          v213 = *((_QWORD *)v208 + 5);
          v214 = CFAbsoluteTimeGetCurrent();
          v215 = v416;
          if (v211 < 0)
            v215 = v212;
          v216 = v214 - v208[5];
          *(_DWORD *)buf = 136381187;
          *(_QWORD *)&buf[4] = v215;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v213;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = v216;
          _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "AlsWifi, pending, %{private}s, from, %{public}.3f, %{public}.3fs", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
        }
        v183 = v378;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214FF50);
          v219 = qword_1022A0048;
          sub_1000C2150((_QWORD *)v208 + 4, &v384);
          v220 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v221 = v384.__r_.__value_.__r.__words[0];
          v222 = *((_QWORD *)v208 + 5);
          v223 = CFAbsoluteTimeGetCurrent();
          v224 = &v384;
          if (v220 < 0)
            v224 = (std::string *)v221;
          v225 = v223 - v208[5];
          *(_DWORD *)v416 = 136381187;
          *(_QWORD *)&v416[4] = v224;
          *(_WORD *)&v416[12] = 2050;
          *(_QWORD *)&v416[14] = v222;
          *(_WORD *)&v416[22] = 2050;
          *(double *)&v416[24] = v225;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v219, 2, "AlsWifi, pending, %{private}s, from, %{public}.3f, %{public}.3fs", v416, *(_QWORD *)&v375);
          v227 = v226;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v227);
          v183 = v378;
          if (v227 != buf)
            free(v227);
        }
        v217 = (double *)*((_QWORD *)v208 + 1);
        if (v217)
        {
          do
          {
            v218 = v217;
            v217 = *(double **)v217;
          }
          while (v217);
        }
        else
        {
          do
          {
            v218 = (double *)*((_QWORD *)v208 + 2);
            _ZF = *(_QWORD *)v218 == (_QWORD)v208;
            v208 = v218;
          }
          while (!_ZF);
        }
        v208 = v218;
      }
      while (v218 != v209);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v228 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v229 = *(_QWORD *)(v183 + 432);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v229;
      _os_log_impl((void *)&_mh_execute_header, v228, OS_LOG_TYPE_DEFAULT, "AlsWifi, clearpending, %{public}ld, #CloneMe", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FF50);
      v359 = *(_QWORD *)(v378 + 432);
      *(_DWORD *)v416 = 134349056;
      *(_QWORD *)&v416[4] = v359;
      LODWORD(v375) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AlsWifi, clearpending, %{public}ld, #CloneMe", v416, *(_QWORD *)&v375);
      v361 = (char *)v360;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v360);
      if (v361 != buf)
        free(v361);
      v183 = v378;
    }
    sub_100008848(v183 + 416, *(_QWORD **)(v183 + 424));
    *(_QWORD *)(v183 + 424) = 0;
    *(_QWORD *)(v183 + 432) = 0;
    *(_QWORD *)(v183 + 416) = v209;
  }
  if (*(_QWORD *)(v183 + 184) > 0x12CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v230 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v231 = *(_QWORD *)(v183 + 184);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v231;
      _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: %ld pending gsm cells, clearing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v356 = *(_QWORD *)(v378 + 184);
      *(_DWORD *)v416 = 134217984;
      *(_QWORD *)&v416[4] = v356;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: %ld pending gsm cells, clearing", v416);
      v358 = (char *)v357;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v357);
      if (v358 != buf)
        free(v358);
      v183 = v378;
    }
    v232 = *(unsigned int **)(v183 + 168);
    v233 = (unsigned int *)(v183 + 176);
    if (v232 != (unsigned int *)(v183 + 176))
    {
      do
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v234 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1005A18B4(v232 + 8, v416);
          v235 = v416[23];
          v236 = *(_BYTE **)v416;
          v237 = *((_QWORD *)v232 + 8);
          v238 = CFAbsoluteTimeGetCurrent();
          if (v235 >= 0)
            v239 = v416;
          else
            v239 = v236;
          v240 = v238 - *((double *)v232 + 8);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v239;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v237;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v240;
          _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEBUG, "CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
          v183 = v378;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214FF70);
          v243 = qword_1022A02D8;
          sub_1005A18B4(v232 + 8, &v384);
          v244 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v245 = v384.__r_.__value_.__r.__words[0];
          v246 = *((_QWORD *)v232 + 8);
          v247 = CFAbsoluteTimeGetCurrent();
          v248 = &v384;
          if (v244 < 0)
            v248 = (std::string *)v245;
          v249 = v247 - *((double *)v232 + 8);
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = v248;
          *(_WORD *)&v416[12] = 2048;
          *(_QWORD *)&v416[14] = v246;
          *(_WORD *)&v416[22] = 2048;
          *(double *)&v416[24] = v249;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v243, 2, "CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)", v416, v375, v376);
          v251 = v250;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v251);
          v183 = v378;
          if (v251 != buf)
            free(v251);
        }
        v241 = (unsigned int *)*((_QWORD *)v232 + 1);
        if (v241)
        {
          do
          {
            v242 = v241;
            v241 = *(unsigned int **)v241;
          }
          while (v241);
        }
        else
        {
          do
          {
            v242 = (unsigned int *)*((_QWORD *)v232 + 2);
            _ZF = *(_QWORD *)v242 == (_QWORD)v232;
            v232 = v242;
          }
          while (!_ZF);
        }
        v232 = v242;
      }
      while (v242 != v233);
    }
    sub_100008848(v183 + 168, *(_QWORD **)(v183 + 176));
    *(_QWORD *)(v183 + 176) = 0;
    *(_QWORD *)(v183 + 184) = 0;
    *(_QWORD *)(v183 + 168) = v233;
  }
  if (*(_QWORD *)(v183 + 224) > 0x12CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v252 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v253 = *(_QWORD *)(v183 + 224);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v253;
      _os_log_impl((void *)&_mh_execute_header, v252, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: %ld pending scdma cells, clearing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v362 = *(_QWORD *)(v378 + 224);
      *(_DWORD *)v416 = 134217984;
      *(_QWORD *)&v416[4] = v362;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: %ld pending scdma cells, clearing", v416);
      v364 = (char *)v363;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v363);
      if (v364 != buf)
        free(v364);
      v183 = v378;
    }
    v254 = *(unsigned int **)(v183 + 208);
    v255 = (unsigned int *)(v183 + 216);
    if (v254 != (unsigned int *)(v183 + 216))
    {
      do
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v256 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1005A18B4(v254 + 8, v416);
          v257 = v416[23];
          v258 = *(_BYTE **)v416;
          v259 = *((_QWORD *)v254 + 8);
          v260 = CFAbsoluteTimeGetCurrent();
          if (v257 >= 0)
            v261 = v416;
          else
            v261 = v258;
          v262 = v260 - *((double *)v254 + 8);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v261;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v259;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v262;
          _os_log_impl((void *)&_mh_execute_header, v256, OS_LOG_TYPE_DEBUG, "CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
          v183 = v378;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214FF70);
          v265 = qword_1022A02D8;
          sub_1005A18B4(v254 + 8, &v384);
          v266 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v267 = v384.__r_.__value_.__r.__words[0];
          v268 = *((_QWORD *)v254 + 8);
          v269 = CFAbsoluteTimeGetCurrent();
          v270 = &v384;
          if (v266 < 0)
            v270 = (std::string *)v267;
          v271 = v269 - *((double *)v254 + 8);
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = v270;
          *(_WORD *)&v416[12] = 2048;
          *(_QWORD *)&v416[14] = v268;
          *(_WORD *)&v416[22] = 2048;
          *(double *)&v416[24] = v271;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v265, 2, "CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)", v416, v375, v376);
          v273 = v272;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v273);
          v183 = v378;
          if (v273 != buf)
            free(v273);
        }
        v263 = (unsigned int *)*((_QWORD *)v254 + 1);
        if (v263)
        {
          do
          {
            v264 = v263;
            v263 = *(unsigned int **)v263;
          }
          while (v263);
        }
        else
        {
          do
          {
            v264 = (unsigned int *)*((_QWORD *)v254 + 2);
            _ZF = *(_QWORD *)v264 == (_QWORD)v254;
            v254 = v264;
          }
          while (!_ZF);
        }
        v254 = v264;
      }
      while (v264 != v255);
    }
    sub_100008848(v183 + 208, *(_QWORD **)(v183 + 216));
    *(_QWORD *)(v183 + 216) = 0;
    *(_QWORD *)(v183 + 224) = 0;
    *(_QWORD *)(v183 + 208) = v255;
  }
  if (*(_QWORD *)(v183 + 264) > 0x12CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v274 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v275 = *(_QWORD *)(v183 + 264);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v275;
      _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: %ld pending cdma cells, clearing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v365 = *(_QWORD *)(v378 + 264);
      *(_DWORD *)v416 = 134217984;
      *(_QWORD *)&v416[4] = v365;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: %ld pending cdma cells, clearing", v416);
      v367 = (char *)v366;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v366);
      if (v367 != buf)
        free(v367);
      v183 = v378;
    }
    v276 = *(unsigned int **)(v183 + 248);
    v277 = (unsigned int *)(v183 + 256);
    if (v276 != (unsigned int *)(v183 + 256))
    {
      do
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v278 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1005A3550(v276 + 8, v416);
          v279 = v416[23];
          v280 = *(_BYTE **)v416;
          v281 = *((_QWORD *)v276 + 58);
          v282 = CFAbsoluteTimeGetCurrent();
          if (v279 >= 0)
            v283 = v416;
          else
            v283 = v280;
          v284 = v282 - *((double *)v276 + 58);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v283;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v281;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v284;
          _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_DEBUG, "CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
          v183 = v378;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214FF70);
          v287 = qword_1022A02D8;
          sub_1005A3550(v276 + 8, &v384);
          v288 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v289 = v384.__r_.__value_.__r.__words[0];
          v290 = *((_QWORD *)v276 + 58);
          v291 = CFAbsoluteTimeGetCurrent();
          v292 = &v384;
          if (v288 < 0)
            v292 = (std::string *)v289;
          v293 = v291 - *((double *)v276 + 58);
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = v292;
          *(_WORD *)&v416[12] = 2048;
          *(_QWORD *)&v416[14] = v290;
          *(_WORD *)&v416[22] = 2048;
          *(double *)&v416[24] = v293;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v287, 2, "CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)", v416, v375, v376);
          v295 = v294;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v295);
          v183 = v378;
          if (v295 != buf)
            free(v295);
        }
        v285 = (unsigned int *)*((_QWORD *)v276 + 1);
        if (v285)
        {
          do
          {
            v286 = v285;
            v285 = *(unsigned int **)v285;
          }
          while (v285);
        }
        else
        {
          do
          {
            v286 = (unsigned int *)*((_QWORD *)v276 + 2);
            _ZF = *(_QWORD *)v286 == (_QWORD)v276;
            v276 = v286;
          }
          while (!_ZF);
        }
        v276 = v286;
      }
      while (v286 != v277);
    }
    sub_10071BD58(v183 + 248, *(_QWORD **)(v183 + 256));
    *(_QWORD *)(v183 + 256) = 0;
    *(_QWORD *)(v183 + 264) = 0;
    *(_QWORD *)(v183 + 248) = v277;
  }
  if (*(_QWORD *)(v183 + 304) > 0x12CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v296 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v297 = *(_QWORD *)(v183 + 304);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v297;
      _os_log_impl((void *)&_mh_execute_header, v296, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: %ld pending lte cells, clearing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v368 = *(_QWORD *)(v378 + 304);
      *(_DWORD *)v416 = 134217984;
      *(_QWORD *)&v416[4] = v368;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: %ld pending lte cells, clearing", v416);
      v370 = (char *)v369;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v369);
      if (v370 != buf)
        free(v370);
      v183 = v378;
    }
    v298 = *(unsigned int **)(v183 + 288);
    v299 = (unsigned int *)(v183 + 296);
    if (v298 != (unsigned int *)(v183 + 296))
    {
      do
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v300 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_10009643C(v298 + 8, v416);
          v301 = v416[23];
          v302 = *(_BYTE **)v416;
          v303 = *((_QWORD *)v298 + 15);
          v304 = CFAbsoluteTimeGetCurrent();
          if (v301 >= 0)
            v305 = v416;
          else
            v305 = v302;
          v306 = v304 - *((double *)v298 + 15);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v305;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v303;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v306;
          _os_log_impl((void *)&_mh_execute_header, v300, OS_LOG_TYPE_DEBUG, "CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
          v183 = v378;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214FF70);
          v309 = qword_1022A02D8;
          sub_10009643C(v298 + 8, &v384);
          v310 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v311 = v384.__r_.__value_.__r.__words[0];
          v312 = *((_QWORD *)v298 + 15);
          v313 = CFAbsoluteTimeGetCurrent();
          v314 = &v384;
          if (v310 < 0)
            v314 = (std::string *)v311;
          v315 = v313 - *((double *)v298 + 15);
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = v314;
          *(_WORD *)&v416[12] = 2048;
          *(_QWORD *)&v416[14] = v312;
          *(_WORD *)&v416[22] = 2048;
          *(double *)&v416[24] = v315;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v309, 2, "CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)", v416, v375, v376);
          v317 = v316;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v317);
          v183 = v378;
          if (v317 != buf)
            free(v317);
        }
        v307 = (unsigned int *)*((_QWORD *)v298 + 1);
        if (v307)
        {
          do
          {
            v308 = v307;
            v307 = *(unsigned int **)v307;
          }
          while (v307);
        }
        else
        {
          do
          {
            v308 = (unsigned int *)*((_QWORD *)v298 + 2);
            _ZF = *(_QWORD *)v308 == (_QWORD)v298;
            v298 = v308;
          }
          while (!_ZF);
        }
        v298 = v308;
      }
      while (v308 != v299);
    }
    sub_100008848(v183 + 288, *(_QWORD **)(v183 + 296));
    *(_QWORD *)(v183 + 296) = 0;
    *(_QWORD *)(v183 + 304) = 0;
    *(_QWORD *)(v183 + 288) = v299;
  }
  if (*(_QWORD *)(v183 + 344) > 0x12CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v318 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v319 = *(_QWORD *)(v183 + 344);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v319;
      _os_log_impl((void *)&_mh_execute_header, v318, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: %ld pending nr cells, clearing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v371 = *(_QWORD *)(v378 + 344);
      *(_DWORD *)v416 = 134217984;
      *(_QWORD *)&v416[4] = v371;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: %ld pending nr cells, clearing", v416);
      v373 = (char *)v372;
      sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v372);
      if (v373 != buf)
        free(v373);
      v183 = v378;
    }
    v320 = *(unsigned int **)(v183 + 328);
    v321 = (unsigned int *)(v183 + 336);
    if (v320 != v321)
    {
      do
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v322 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1005A2548(v320 + 8, v416);
          v323 = v416[23];
          v324 = *(_BYTE **)v416;
          v325 = *((_QWORD *)v320 + 16);
          v326 = CFAbsoluteTimeGetCurrent();
          v327 = v323 >= 0 ? v416 : v324;
          v328 = v326 - *((double *)v320 + 16);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v327;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v325;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v328;
          _os_log_impl((void *)&_mh_execute_header, v322, OS_LOG_TYPE_DEBUG, "CELL_LOC: pending nr cell, %s, from, %.3f, %.3f, ago)", buf, 0x20u);
          if ((v416[23] & 0x80000000) != 0)
            operator delete(*(void **)v416);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214FF70);
          v331 = qword_1022A02D8;
          sub_1005A2548(v320 + 8, &v384);
          v332 = SHIBYTE(v384.__r_.__value_.__r.__words[2]);
          v333 = v384.__r_.__value_.__r.__words[0];
          v334 = *((_QWORD *)v320 + 16);
          v335 = CFAbsoluteTimeGetCurrent();
          v336 = &v384;
          if (v332 < 0)
            v336 = (std::string *)v333;
          v337 = v335 - *((double *)v320 + 16);
          *(_DWORD *)v416 = 136315650;
          *(_QWORD *)&v416[4] = v336;
          *(_WORD *)&v416[12] = 2048;
          *(_QWORD *)&v416[14] = v334;
          *(_WORD *)&v416[22] = 2048;
          *(double *)&v416[24] = v337;
          LODWORD(v375) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v331, 2, "CELL_LOC: pending nr cell, %s, from, %.3f, %.3f, ago)", v416, v375, v376);
          v339 = v338;
          if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v384.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, BOOL, BOOL, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v339);
          if (v339 != buf)
            free(v339);
        }
        v329 = (unsigned int *)*((_QWORD *)v320 + 1);
        if (v329)
        {
          do
          {
            v330 = v329;
            v329 = *(unsigned int **)v329;
          }
          while (v329);
        }
        else
        {
          do
          {
            v330 = (unsigned int *)*((_QWORD *)v320 + 2);
            _ZF = *(_QWORD *)v330 == (_QWORD)v320;
            v320 = v330;
          }
          while (!_ZF);
        }
        v320 = v330;
      }
      while (v330 != v321);
    }
    sub_100008848(v378 + 328, *(_QWORD **)(v378 + 336));
    *(_QWORD *)(v378 + 336) = 0;
    *(_QWORD *)(v378 + 344) = 0;
    *(_QWORD *)(v378 + 328) = v321;
  }
  if ((_QWORD)v406)
  {
    *((_QWORD *)&v406 + 1) = v406;
    operator delete((void *)v406);
  }
  v65 = v380;
  if ((_QWORD)v408)
  {
    *((_QWORD *)&v408 + 1) = v408;
    operator delete((void *)v408);
  }
  if ((_QWORD)v410)
  {
    *((_QWORD *)&v410 + 1) = v410;
    operator delete((void *)v410);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v412)
  {
    *((_QWORD *)&v412 + 1) = v412;
    operator delete((void *)v412);
  }
  *(_QWORD *)buf = &v385;
  sub_10066DCEC((void ***)buf);
  return v65;
}

void sub_10070DA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a64;
  void *a67;
  uint64_t a68;
  void *a71;
  uint64_t a72;

  if (__p)
  {
    a56 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  STACK[0x3C0] = (unint64_t)&a32;
  sub_10066DCEC((void ***)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10070DD50(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8)
{
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  void *__p[2];
  char v39;
  int v40;
  _BYTE v41[10];
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  uint8_t buf[4];
  _BYTE v54[10];
  uint64_t v55;
  __int16 v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v14 = (uint64_t)(a2[1] - *a2) >> 5;
    v15 = (uint64_t)(a3[1] - *a3) >> 5;
    v16 = 0x84BDA12F684BDA13 * ((uint64_t)(a4[1] - *a4) >> 4);
    v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
    v19 = (uint64_t)(a7[1] - *a7) >> 3;
    v20 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)buf = 134350592;
    *(_QWORD *)v54 = v14;
    *(_WORD *)&v54[8] = 2050;
    v55 = v15;
    v56 = 2050;
    v57 = v16;
    v58 = 2050;
    v59 = v17;
    v60 = 2050;
    v61 = v18;
    v62 = 2050;
    v63 = v19;
    v64 = 1026;
    v65 = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@AlsFlow, query, internal, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, skipnearby, %{public}d\n", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v26 = (uint64_t)(a2[1] - *a2) >> 5;
    v27 = (uint64_t)(a3[1] - *a3) >> 5;
    v28 = 0x84BDA12F684BDA13 * ((uint64_t)(a4[1] - *a4) >> 4);
    v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3);
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
    v31 = (uint64_t)(a7[1] - *a7) >> 3;
    v32 = *(unsigned __int8 *)(a1 + 120);
    v40 = 134350592;
    *(_QWORD *)v41 = v26;
    *(_WORD *)&v41[8] = 2050;
    v42 = v27;
    v43 = 2050;
    v44 = v28;
    v45 = 2050;
    v46 = v29;
    v47 = 2050;
    v48 = v30;
    v49 = 2050;
    v50 = v31;
    v51 = 1026;
    v52 = v32;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, query, internal, cells, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, wifi, %{public}lu, skipnearby, %{public}d\n", &v40, 68);
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::query(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v33);
    if (v33 != (char *)buf)
      free(v33);
  }
  sub_1015A2E04(__p, "query");
  sub_10002B684(a1 + 464, (uint64_t *)__p);
  if (v39 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 120))
    *(_QWORD *)(*(_QWORD *)(a1 + 448) + 296) = &_mh_execute_header;
  v21 = sub_100026624((_DWORD *)a1);
  if (v21)
    v22 = 16;
  else
    v22 = 40;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v54 = v21;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v22;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "query, broadDataConnection, %d, timeout, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v40 = 67109376;
    *(_DWORD *)v41 = v21;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v22;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "query, broadDataConnection, %d, timeout, %d", &v40, 14);
    sub_100512490("Generic", 1, 0, 2, "int CLNetworkLocationProvider::query(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  ++*(_DWORD *)(a1 + 572);
  v24 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, uint64_t, int))(**(_QWORD **)(a1 + 448) + 24))(*(_QWORD *)(a1 + 448), a2, a3, a4, a5, a6, a7, a8, v22);
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    v40 = *(_DWORD *)(a1 + 352);
    sub_10011B4E4((uint64_t)buf, "queryLoc", &v40);
    v40 = v24;
    sub_10011B4E4((uint64_t)buf, "tag", &v40);
    v40 = (a2[1] - *a2) >> 5;
    sub_10011B4E4((uint64_t)buf, "p1", &v40);
    v40 = 1749801491 * ((a4[1] - *a4) >> 4);
    sub_10011B4E4((uint64_t)buf, "p2", &v40);
    v40 = -1171354717 * ((a5[1] - *a5) >> 3);
    sub_10011B4E4((uint64_t)buf, "p3", &v40);
    v40 = (a7[1] - *a7) >> 3;
    sub_10011B4E4((uint64_t)buf, "p4", &v40);
    v40 = (a3[1] - *a3) >> 5;
    sub_10011B4E4((uint64_t)buf, "p5", &v40);
    v40 = -1431655765 * ((a6[1] - *a6) >> 5);
    sub_10011B4E4((uint64_t)buf, "p6", &v40);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  return v24;
}

void sub_10070E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_10011A5A8(&a30);
  _Unwind_Resume(a1);
}

void sub_10070E458(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _OWORD *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  char *v32;
  _OWORD *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  _QWORD *v113;
  _QWORD *v114;
  NSObject *v115;
  int v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  char *v128;
  uint64_t v129;
  void *v130;
  char *v131;
  char *v132;
  void *v133;
  char *v134;
  char *v135;
  void *v136;
  _BYTE *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void *v142;
  char *v143;
  char *v144;
  void *__p;
  char *v146;
  char *v147;
  int v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  unint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  unint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  _BYTE buf[12];
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  unint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  unint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  int v176;
  __int16 v177;
  uint64_t v178;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 184);
    v4 = *(_QWORD *)(a1 + 224);
    v5 = *(_QWORD *)(a1 + 264);
    v6 = *(_QWORD *)(a1 + 304);
    v7 = *(_QWORD *)(a1 + 432);
    v8 = *(_QWORD *)(a1 + 344);
    v9 = *(_DWORD *)(a1 + 352);
    v10 = *(_QWORD *)(a1 + 368);
    *(_DWORD *)buf = 134350848;
    *(_QWORD *)&buf[4] = v3;
    v165 = 2050;
    v166 = v4;
    v167 = 2050;
    v168 = v5;
    v169 = 2050;
    v170 = v6;
    v171 = 2050;
    v172 = v7;
    v173 = 2050;
    v174 = v8;
    v175 = 1026;
    v176 = v9;
    v177 = 2050;
    v178 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@AlsFlow, requery, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, items, fQueryRetries, %{public}d, fLastRetryTimestamp, %{public}.1lf", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v118 = *(_QWORD *)(a1 + 184);
    v119 = *(_QWORD *)(a1 + 224);
    v120 = *(_QWORD *)(a1 + 264);
    v121 = *(_QWORD *)(a1 + 304);
    v122 = *(_QWORD *)(a1 + 432);
    v123 = *(_QWORD *)(a1 + 344);
    v124 = *(_DWORD *)(a1 + 352);
    v125 = *(_QWORD *)(a1 + 368);
    v148 = 134350848;
    v149 = v118;
    v150 = 2050;
    v151 = v119;
    v152 = 2050;
    v153 = v120;
    v154 = 2050;
    v155 = v121;
    v156 = 2050;
    v157 = v122;
    v158 = 2050;
    v159 = v123;
    v160 = 1026;
    v161 = v124;
    v162 = 2050;
    v163 = v125;
    v126 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@AlsFlow, requery, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, %{public}lu, items, fQueryRetries, %{public}d, fLastRetryTimestamp, %{public}.1lf", &v148, 78);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::requeryLocations()", "%s\n", v126);
    if (v126 != buf)
      free(v126);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning NETWORK: in private location mode; not querying for unknown cells or unknown wifis",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v148) = 0;
      LODWORD(v129) = 2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning NETWORK: in private location mode; not querying for unknown cells or unknown wifis",
                      &v148,
                      v129);
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::requeryLocations()", "%s\n", v12);
LABEL_193:
      if (v12 != buf)
        free(v12);
    }
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    if (sub_1001DFAE8())
    {
      sub_100119F3C(buf);
      v148 = *(_DWORD *)(a1 + 352);
      sub_10011B4E4((uint64_t)buf, "requeryLocations", &v148);
      v148 = *(_QWORD *)(a1 + 184);
      sub_10011B4E4((uint64_t)buf, "p1", &v148);
      v148 = *(_QWORD *)(a1 + 264);
      sub_10011B4E4((uint64_t)buf, "p2", &v148);
      v148 = *(_QWORD *)(a1 + 304);
      sub_10011B4E4((uint64_t)buf, "p3", &v148);
      v148 = *(_QWORD *)(a1 + 432);
      sub_10011B4E4((uint64_t)buf, "p4", &v148);
      v148 = *(_QWORD *)(a1 + 224);
      sub_10011B4E4((uint64_t)buf, "p5", &v148);
      v148 = *(_QWORD *)(a1 + 344);
      sub_10011B4E4((uint64_t)buf, "p6", &v148);
      sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
      sub_10011A5A8(buf);
    }
    __p = 0;
    v146 = 0;
    v147 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v13 = *(_QWORD **)(a1 + 168);
    if (v13 != (_QWORD *)(a1 + 176))
    {
      v14 = 0;
      do
      {
        v15 = v13 + 4;
        if (v14 >= v147)
        {
          v17 = (char *)__p;
          v18 = (v14 - (_BYTE *)__p) >> 5;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 59)
            sub_100259694();
          v20 = v147 - (_BYTE *)__p;
          if ((v147 - (_BYTE *)__p) >> 4 > v19)
            v19 = v20 >> 4;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
            v21 = 0x7FFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)sub_10025BA00((uint64_t)&v147, v21);
            v17 = (char *)__p;
            v14 = v146;
          }
          else
          {
            v22 = 0;
          }
          v23 = *((_OWORD *)v13 + 3);
          v24 = &v22[32 * v18];
          *(_OWORD *)v24 = *v15;
          *((_OWORD *)v24 + 1) = v23;
          if (v14 == v17)
          {
            v27 = &v22[32 * v18];
          }
          else
          {
            v25 = &v22[32 * v18];
            do
            {
              v26 = *((_OWORD *)v14 - 1);
              v27 = v25 - 32;
              *((_OWORD *)v25 - 2) = *((_OWORD *)v14 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v14 -= 32;
              v25 -= 32;
            }
            while (v14 != v17);
          }
          v14 = v24 + 32;
          __p = v27;
          v146 = v24 + 32;
          v147 = &v22[32 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          v16 = *((_OWORD *)v13 + 3);
          *(_OWORD *)v14 = *v15;
          *((_OWORD *)v14 + 1) = v16;
          v14 += 32;
        }
        v146 = v14;
        v28 = (_QWORD *)v13[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v13[2];
            v30 = *v29 == (_QWORD)v13;
            v13 = v29;
          }
          while (!v30);
        }
        v13 = v29;
      }
      while (v29 != (_QWORD *)(a1 + 176));
    }
    v31 = *(_QWORD **)(a1 + 208);
    if (v31 != (_QWORD *)(a1 + 216))
    {
      v32 = v143;
      do
      {
        v33 = v31 + 4;
        if (v32 >= v144)
        {
          v35 = (char *)v142;
          v36 = (v32 - (_BYTE *)v142) >> 5;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 59)
            sub_100259694();
          v38 = v144 - (_BYTE *)v142;
          if ((v144 - (_BYTE *)v142) >> 4 > v37)
            v37 = v38 >> 4;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0)
            v39 = 0x7FFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)sub_10025BA00((uint64_t)&v144, v39);
            v35 = (char *)v142;
            v32 = v143;
          }
          else
          {
            v40 = 0;
          }
          v41 = *((_OWORD *)v31 + 3);
          v42 = &v40[32 * v36];
          *(_OWORD *)v42 = *v33;
          *((_OWORD *)v42 + 1) = v41;
          if (v32 == v35)
          {
            v45 = &v40[32 * v36];
          }
          else
          {
            v43 = &v40[32 * v36];
            do
            {
              v44 = *((_OWORD *)v32 - 1);
              v45 = v43 - 32;
              *((_OWORD *)v43 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v32 -= 32;
              v43 -= 32;
            }
            while (v32 != v35);
          }
          v32 = v42 + 32;
          v142 = v45;
          v143 = v42 + 32;
          v144 = &v40[32 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          v34 = *((_OWORD *)v31 + 3);
          *(_OWORD *)v32 = *v33;
          *((_OWORD *)v32 + 1) = v34;
          v32 += 32;
        }
        v143 = v32;
        v46 = (_QWORD *)v31[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (_QWORD *)v31[2];
            v30 = *v47 == (_QWORD)v31;
            v31 = v47;
          }
          while (!v30);
        }
        v31 = v47;
      }
      while (v47 != (_QWORD *)(a1 + 216));
    }
    v48 = *(_QWORD **)(a1 + 248);
    if (v48 != (_QWORD *)(a1 + 256))
    {
      v49 = v140;
      do
      {
        if (v49 >= v141)
        {
          v49 = sub_10071C834(&v139, (uint64_t)(v48 + 4));
        }
        else
        {
          sub_10071C958((uint64_t)&v141, v49, (uint64_t)(v48 + 4));
          v49 += 432;
        }
        v140 = v49;
        v50 = (_QWORD *)v48[1];
        if (v50)
        {
          do
          {
            v51 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            v51 = (_QWORD *)v48[2];
            v30 = *v51 == (_QWORD)v48;
            v48 = v51;
          }
          while (!v30);
        }
        v48 = v51;
      }
      while (v51 != (_QWORD *)(a1 + 256));
    }
    v52 = *(_QWORD **)(a1 + 288);
    if (v52 != (_QWORD *)(a1 + 296))
    {
      v53 = v137;
      do
      {
        v54 = v52 + 4;
        if (v53 >= (_OWORD *)v138)
        {
          v59 = v136;
          v60 = 0x2E8BA2E8BA2E8BA3 * (((char *)v53 - (_BYTE *)v136) >> 3);
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) > 0x2E8BA2E8BA2E8BALL)
            sub_100259694();
          if (0x5D1745D1745D1746 * ((v138 - (_BYTE *)v136) >> 3) > v61)
            v61 = 0x5D1745D1745D1746 * ((v138 - (_BYTE *)v136) >> 3);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v138 - (_BYTE *)v136) >> 3)) >= 0x1745D1745D1745DLL)
            v62 = 0x2E8BA2E8BA2E8BALL;
          else
            v62 = v61;
          if (v62)
          {
            v63 = (char *)sub_100279B30((uint64_t)&v138, v62);
            v59 = v136;
            v53 = v137;
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[88 * v60];
          v65 = *((_OWORD *)v52 + 3);
          *(_OWORD *)v64 = *v54;
          *((_OWORD *)v64 + 1) = v65;
          v66 = *((_OWORD *)v52 + 4);
          v67 = *((_OWORD *)v52 + 5);
          v68 = *((_OWORD *)v52 + 6);
          *((_QWORD *)v64 + 10) = v52[14];
          *((_OWORD *)v64 + 3) = v67;
          *((_OWORD *)v64 + 4) = v68;
          *((_OWORD *)v64 + 2) = v66;
          if (v53 == v59)
          {
            v74 = &v63[88 * v60];
          }
          else
          {
            v69 = &v63[88 * v60];
            do
            {
              v70 = *(_OWORD *)((char *)v53 - 88);
              *(_OWORD *)(v69 - 72) = *(_OWORD *)((char *)v53 - 72);
              *(_OWORD *)(v69 - 88) = v70;
              v71 = *(_OWORD *)((char *)v53 - 56);
              v72 = *(_OWORD *)((char *)v53 - 40);
              v73 = *(_OWORD *)((char *)v53 - 24);
              v74 = v69 - 88;
              *((_DWORD *)v69 - 2) = *((_DWORD *)v53 - 2);
              *(_OWORD *)(v69 - 24) = v73;
              *(_OWORD *)(v69 - 40) = v72;
              *(_OWORD *)(v69 - 56) = v71;
              v53 = (_OWORD *)((char *)v53 - 88);
              v69 -= 88;
            }
            while (v53 != v59);
          }
          v53 = v64 + 88;
          v136 = v74;
          v137 = v64 + 88;
          v138 = &v63[88 * v62];
          if (v59)
            operator delete(v59);
        }
        else
        {
          v55 = *((_OWORD *)v52 + 3);
          *v53 = *v54;
          v53[1] = v55;
          v56 = *((_OWORD *)v52 + 4);
          v57 = *((_OWORD *)v52 + 5);
          v58 = *((_OWORD *)v52 + 6);
          *((_QWORD *)v53 + 10) = v52[14];
          v53[3] = v57;
          v53[4] = v58;
          v53[2] = v56;
          v53 = (_OWORD *)((char *)v53 + 88);
        }
        v137 = v53;
        v75 = (_QWORD *)v52[1];
        if (v75)
        {
          do
          {
            v76 = v75;
            v75 = (_QWORD *)*v75;
          }
          while (v75);
        }
        else
        {
          do
          {
            v76 = (_QWORD *)v52[2];
            v30 = *v76 == (_QWORD)v52;
            v52 = v76;
          }
          while (!v30);
        }
        v52 = v76;
      }
      while (v76 != (_QWORD *)(a1 + 296));
    }
    v77 = *(_QWORD **)(a1 + 416);
    if (v77 != (_QWORD *)(a1 + 424))
    {
      v78 = v131;
      do
      {
        if (v78 >= v132)
        {
          v79 = (char *)v130;
          v80 = (v78 - (_BYTE *)v130) >> 3;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61)
            sub_100259694();
          v82 = v132 - (_BYTE *)v130;
          if ((v132 - (_BYTE *)v130) >> 2 > v81)
            v81 = v82 >> 2;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            v84 = (char *)sub_10025E6A0((uint64_t)&v132, v83);
            v79 = (char *)v130;
            v78 = v131;
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[8 * v80];
          *(_QWORD *)v85 = v77[4];
          v86 = v85 + 8;
          while (v78 != v79)
          {
            v87 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *((_QWORD *)v85 - 1) = v87;
            v85 -= 8;
          }
          v130 = v85;
          v131 = v86;
          v132 = &v84[8 * v83];
          if (v79)
            operator delete(v79);
          v78 = v86;
        }
        else
        {
          *(_QWORD *)v78 = v77[4];
          v78 += 8;
        }
        v131 = v78;
        v88 = (_QWORD *)v77[1];
        if (v88)
        {
          do
          {
            v89 = v88;
            v88 = (_QWORD *)*v88;
          }
          while (v88);
        }
        else
        {
          do
          {
            v89 = (_QWORD *)v77[2];
            v30 = *v89 == (_QWORD)v77;
            v77 = v89;
          }
          while (!v30);
        }
        v77 = v89;
      }
      while (v89 != (_QWORD *)(a1 + 424));
    }
    v90 = *(_QWORD **)(a1 + 328);
    if (v90 != (_QWORD *)(a1 + 336))
    {
      v91 = v134;
      do
      {
        v92 = v90 + 4;
        if (v91 >= v135)
        {
          v97 = (char *)v133;
          v98 = 0xAAAAAAAAAAAAAAABLL * ((v91 - (_BYTE *)v133) >> 5);
          v99 = v98 + 1;
          if (v98 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v135 - (_BYTE *)v133) >> 5) > v99)
            v99 = 0x5555555555555556 * ((v135 - (_BYTE *)v133) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v135 - (_BYTE *)v133) >> 5) >= 0x155555555555555)
            v100 = 0x2AAAAAAAAAAAAAALL;
          else
            v100 = v99;
          if (v100)
          {
            v101 = (char *)sub_10067257C((uint64_t)&v135, v100);
            v97 = (char *)v133;
            v91 = v134;
          }
          else
          {
            v101 = 0;
          }
          v102 = &v101[96 * v98];
          v103 = *((_OWORD *)v90 + 3);
          *(_OWORD *)v102 = *v92;
          *((_OWORD *)v102 + 1) = v103;
          v104 = *((_OWORD *)v90 + 4);
          v105 = *((_OWORD *)v90 + 5);
          v106 = *((_OWORD *)v90 + 7);
          *((_OWORD *)v102 + 4) = *((_OWORD *)v90 + 6);
          *((_OWORD *)v102 + 5) = v106;
          *((_OWORD *)v102 + 2) = v104;
          *((_OWORD *)v102 + 3) = v105;
          if (v91 == v97)
          {
            v112 = &v101[96 * v98];
          }
          else
          {
            v107 = &v101[96 * v98];
            do
            {
              v108 = *((_OWORD *)v91 - 5);
              *((_OWORD *)v107 - 6) = *((_OWORD *)v91 - 6);
              *((_OWORD *)v107 - 5) = v108;
              v109 = *((_OWORD *)v91 - 4);
              v110 = *((_OWORD *)v91 - 3);
              v111 = *((_OWORD *)v91 - 2);
              v112 = v107 - 96;
              *(_OWORD *)(v107 - 20) = *(_OWORD *)(v91 - 20);
              *((_OWORD *)v107 - 3) = v110;
              *((_OWORD *)v107 - 2) = v111;
              *((_OWORD *)v107 - 4) = v109;
              v91 -= 96;
              v107 -= 96;
            }
            while (v91 != v97);
          }
          v91 = v102 + 96;
          v133 = v112;
          v134 = v102 + 96;
          v135 = &v101[96 * v100];
          if (v97)
            operator delete(v97);
        }
        else
        {
          v93 = *((_OWORD *)v90 + 3);
          *(_OWORD *)v91 = *v92;
          *((_OWORD *)v91 + 1) = v93;
          v94 = *((_OWORD *)v90 + 4);
          v95 = *((_OWORD *)v90 + 5);
          v96 = *((_OWORD *)v90 + 7);
          *((_OWORD *)v91 + 4) = *((_OWORD *)v90 + 6);
          *((_OWORD *)v91 + 5) = v96;
          *((_OWORD *)v91 + 2) = v94;
          *((_OWORD *)v91 + 3) = v95;
          v91 += 96;
        }
        v134 = v91;
        v113 = (_QWORD *)v90[1];
        if (v113)
        {
          do
          {
            v114 = v113;
            v113 = (_QWORD *)*v113;
          }
          while (v113);
        }
        else
        {
          do
          {
            v114 = (_QWORD *)v90[2];
            v30 = *v114 == (_QWORD)v90;
            v90 = v114;
          }
          while (!v30);
        }
        v90 = v114;
      }
      while (v114 != (_QWORD *)(a1 + 336));
    }
    if (__p != v146 || v142 != v143 || v130 != v131 || v136 != v137 || v139 != v140 || v133 != v134)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v115 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v116 = *(_DWORD *)(a1 + 352);
        *(_DWORD *)buf = 134219520;
        *(_QWORD *)&buf[4] = (v146 - (_BYTE *)__p) >> 5;
        v165 = 2048;
        v166 = (v143 - (_BYTE *)v142) >> 5;
        v167 = 2048;
        v168 = 0x84BDA12F684BDA13 * ((uint64_t)(v140 - v139) >> 4);
        v169 = 2048;
        v170 = 0x2E8BA2E8BA2E8BA3 * ((v137 - (_BYTE *)v136) >> 3);
        v171 = 2048;
        v172 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)v133) >> 5);
        v173 = 2048;
        v174 = (v131 - (_BYTE *)v130) >> 3;
        v175 = 1024;
        v176 = v116;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "NETWORK: re-querying cells, %lu, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d", buf, 0x44u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v127 = *(_DWORD *)(a1 + 352);
        v148 = 134219520;
        v149 = (v146 - (_BYTE *)__p) >> 5;
        v150 = 2048;
        v151 = (v143 - (_BYTE *)v142) >> 5;
        v152 = 2048;
        v153 = 0x84BDA12F684BDA13 * ((uint64_t)(v140 - v139) >> 4);
        v154 = 2048;
        v155 = 0x2E8BA2E8BA2E8BA3 * ((v137 - (_BYTE *)v136) >> 3);
        v156 = 2048;
        v157 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (_BYTE *)v133) >> 5);
        v158 = 2048;
        v159 = (v131 - (_BYTE *)v130) >> 3;
        v160 = 1024;
        v161 = v127;
        LODWORD(v129) = 68;
        v128 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: re-querying cells, %lu, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d", &v148, v129, v130, v131, v132, v133, (_DWORD)v134);
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::requeryLocations()", "%s\n", v128);
        if (v128 != buf)
          free(v128);
      }
      sub_100A470A4(&v148, 1);
      *(_DWORD *)buf = v148;
      *(_DWORD *)(a1 + 520) = sub_10070DD50(a1, &__p, &v142, &v139, &v136, &v133, &v130, (uint64_t)buf);
    }
    *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
    if (v130)
    {
      v131 = (char *)v130;
      operator delete(v130);
    }
    if (v133)
    {
      v134 = (char *)v133;
      operator delete(v133);
    }
    if (v136)
    {
      v137 = v136;
      operator delete(v136);
    }
    *(_QWORD *)buf = &v139;
    sub_10066DCEC((void ***)buf);
    if (v142)
    {
      v143 = (char *)v142;
      operator delete(v142);
    }
    if (__p)
    {
      v146 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v117 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#Warning NETWORK: Location Services disabled, not querying location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v148) = 0;
      LODWORD(v129) = 2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning NETWORK: Location Services disabled, not querying location", &v148, v129);
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::requeryLocations()", "%s\n", v12);
      goto LABEL_193;
    }
  }
}

void sub_10070F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  a39 = &a20;
  sub_10066DCEC((void ***)&a39);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10070F628(_QWORD *a1, uint64_t a2, int a3)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  _QWORD *v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  _QWORD *v28;
  uint8_t buf[4];
  _QWORD *v30;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v30 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CELL_LOC: start sequence, This, %p", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v27 = 134217984;
    v28 = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: start sequence, This, %p", &v27);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocationSeries(CLNetworkLocationRequester *, BOOL, CLNetworkLocationRequester::RequestType, int)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  if (a3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: beginning cell database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v27) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: beginning cell database", &v27, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocationSeries(CLNetworkLocationRequester *, BOOL, CLNetworkLocationRequester::RequestType, int)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v7 = sub_1006FE4EC((uint64_t)a1);
    v8 = sub_1006FE3E4((uint64_t)a1);
    v9 = sub_1006FE5F4((uint64_t)a1);
    v10 = sub_1000966F8((uint64_t)a1);
    v11 = sub_1006FE6FC((uint64_t)a1);
    sub_10067D7E4(*(_QWORD *)(v7 + 32));
    sub_10067D7E4(*(_QWORD *)(v8 + 32));
    sub_10067D7E4(*(_QWORD *)(v9 + 32));
    sub_10067D7E4(*(_QWORD *)(v10 + 32));
    return sub_10067D7E4(*(_QWORD *)(v11 + 32));
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = (_QWORD *)(a1[28] + a1[23] + a1[33] + a1[38] + a1[43]);
      *(_DWORD *)buf = 134217984;
      v30 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CELL_LOC: ending cell database (%lu cells still pending)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v24 = (_QWORD *)(a1[28] + a1[23] + a1[33] + a1[38] + a1[43]);
      v27 = 134217984;
      v28 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: ending cell database (%lu cells still pending)", &v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocationSeries(CLNetworkLocationRequester *, BOOL, CLNetworkLocationRequester::RequestType, int)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    v15 = sub_1006FE4EC((uint64_t)a1);
    sub_10067D7EC(*(_QWORD *)(v15 + 32));
    v16 = sub_1006FE3E4((uint64_t)a1);
    sub_10067D7EC(*(_QWORD *)(v16 + 32));
    v17 = sub_1006FE5F4((uint64_t)a1);
    sub_10067D7EC(*(_QWORD *)(v17 + 32));
    v18 = sub_1000966F8((uint64_t)a1);
    sub_10067D7EC(*(_QWORD *)(v18 + 32));
    v19 = sub_1006FE6FC((uint64_t)a1);
    return sub_10067D7EC(*(_QWORD *)(v19 + 32));
  }
}

void sub_10070FB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  double v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  void *v45;
  void *__p;
  char v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;

  sub_1013482E4(v36, a3, 9);
  sub_1001E6780((uint64_t)v36, -1, -1, -1, -1);
  v6 = (int *)sub_100706590((uint64_t)v36);
  v7 = sub_1006FE3E4(a1);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v8 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a4 + 4);
    v10 = *(_QWORD *)(a4 + 12);
    v11 = *(_QWORD *)(a4 + 20);
    v12 = *v6;
    v13 = v6[1];
    v14 = v6[2];
    v15 = v6[3];
    v16 = *(_DWORD *)(a4 + 84);
    v17 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)buf = 136317954;
    v73 = "Network-Cell";
    v74 = 1024;
    v75 = 1;
    v76 = 2048;
    v77 = v9;
    v78 = 2048;
    v79 = v10;
    v80 = 2048;
    v81 = v11;
    v82 = 1024;
    v83 = v12;
    v84 = 1024;
    v85 = v13;
    v86 = 1024;
    v87 = v14;
    v88 = 1024;
    v89 = v15;
    v90 = 1024;
    v91 = v16;
    v92 = 1024;
    v93 = v17;
    v94 = 1024;
    v95 = -1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", buf, 0x5Au);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v21 = *(_QWORD *)(a4 + 4);
    v22 = *(_QWORD *)(a4 + 12);
    v23 = *(_QWORD *)(a4 + 20);
    v24 = *v6;
    v25 = v6[1];
    v26 = v6[2];
    v27 = v6[3];
    v28 = *(_DWORD *)(a4 + 84);
    v29 = *(_DWORD *)(a1 + 384);
    v48 = 136317954;
    v49 = "Network-Cell";
    v50 = 1024;
    v51 = 1;
    v52 = 2048;
    v53 = v21;
    v54 = 2048;
    v55 = v22;
    v56 = 2048;
    v57 = v23;
    v58 = 1024;
    v59 = v24;
    v60 = 1024;
    v61 = v25;
    v62 = 1024;
    v63 = v26;
    v64 = 1024;
    v65 = v27;
    v66 = 1024;
    v67 = v28;
    v68 = 1024;
    v69 = v29;
    v70 = 1024;
    v71 = -1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", (const char *)&v48, 90, v35, v36[0], v36[1], v37, v38, v39, v40, v41, v42,
      v43);
    v31 = (uint8_t *)v30;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v18 = (uint64_t *)sub_10071CD80(a1 + 208, v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v19 = sub_100706590((uint64_t)v36);
    if (sub_1006E0B48(*(_QWORD *)(v7 + 32), v19, a4))
      ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v48) = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v48, v34);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  if ((uint64_t *)(a1 + 216) != v18)
  {
    sub_10008A9F0((uint64_t **)(a1 + 208), v18);
    operator delete(v18);
  }
  if (v47 < 0)
    operator delete(__p);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
}

void sub_100710020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100710050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  double v27[2];
  int v28;
  int v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  void *__p;
  char v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  const char *v55;
  uint64_t v56;
  _BYTE v57[48];
  unint64_t v58;
  CFAbsoluteTime Current;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  sub_1013482E4(v27, a3, 9);
  sub_1001E6780((uint64_t)v27, -1, -1, -1, -1);
  v4 = (int *)sub_100706590((uint64_t)v27);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v5 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[3];
    *(_DWORD *)buf = 136317186;
    v55 = "Network-Cell";
    v56 = 0x800000000000400;
    *(_QWORD *)v57 = 0;
    *(_WORD *)&v57[8] = 2048;
    *(_QWORD *)&v57[10] = 0;
    *(_WORD *)&v57[18] = 2048;
    *(_QWORD *)&v57[20] = 0xBFF0000000000000;
    *(_WORD *)&v57[28] = 1024;
    *(_DWORD *)&v57[30] = v6;
    *(_WORD *)&v57[34] = 1024;
    *(_DWORD *)&v57[36] = v7;
    *(_WORD *)&v57[40] = 1024;
    *(_DWORD *)&v57[42] = v8;
    *(_WORD *)&v57[46] = 1024;
    LODWORD(v58) = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,", buf, 0x48u);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v17 = *v4;
    v18 = v4[1];
    v19 = v4[2];
    v20 = v4[3];
    v36 = 136317186;
    v37 = "Network-Cell";
    v38 = 1024;
    v39 = 0;
    v40 = 2048;
    v41 = 0;
    v42 = 2048;
    v43 = 0;
    v44 = 2048;
    v45 = 0xBFF0000000000000;
    v46 = 1024;
    v47 = v17;
    v48 = 1024;
    v49 = v18;
    v50 = 1024;
    v51 = v19;
    v52 = 1024;
    v53 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,", (const char *)&v36, 72, v26, v27[0], v27[1], v28, v29, v30, v31);
    v22 = (uint8_t *)v21;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v56 = 0;
    v55 = 0;
    *(_OWORD *)v57 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v57[16] = _Q0;
    *(_OWORD *)&v57[32] = _Q0;
    v58 = 0xBFF0000000000000;
    *(_DWORD *)buf = 0xFFFF;
    v60 = 0;
    v63 = 0;
    v61 = 0xBFF0000000000000;
    v62 = 0;
    v65 = 0xBFF0000000000000;
    v64 = 0;
    v66 = 0x7FFFFFFF;
    v69 = 0;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v15 = sub_1006FE3E4(a1);
    sub_1006E0B48(*(_QWORD *)(v15 + 32), (uint64_t)v4, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v36) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v36, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  sub_10071CEF4((uint64_t **)(a1 + 208), v4);
  if (v35 < 0)
    operator delete(__p);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_1007104E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100710514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  double v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  void *v45;
  void *__p;
  char v47;
  int v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;

  sub_101347FF0(v36, a3, 0);
  sub_1001E6780((uint64_t)v36, -1, -1, -1, -1);
  v6 = (int *)sub_1007057DC((uint64_t)v36);
  v7 = sub_1006FE4EC(a1);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v8 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a4 + 4);
    v10 = *(_QWORD *)(a4 + 12);
    v11 = *(_QWORD *)(a4 + 20);
    v12 = *v6;
    v13 = v6[1];
    v14 = v6[2];
    v15 = v6[3];
    v16 = *(_DWORD *)(a4 + 84);
    v17 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)buf = 136317954;
    v73 = "Network-Cell";
    v74 = 1024;
    v75 = 1;
    v76 = 2048;
    v77 = v9;
    v78 = 2048;
    v79 = v10;
    v80 = 2048;
    v81 = v11;
    v82 = 1024;
    v83 = v12;
    v84 = 1024;
    v85 = v13;
    v86 = 1024;
    v87 = v14;
    v88 = 1024;
    v89 = v15;
    v90 = 1024;
    v91 = v16;
    v92 = 1024;
    v93 = v17;
    v94 = 1024;
    v95 = -1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", buf, 0x5Au);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v21 = *(_QWORD *)(a4 + 4);
    v22 = *(_QWORD *)(a4 + 12);
    v23 = *(_QWORD *)(a4 + 20);
    v24 = *v6;
    v25 = v6[1];
    v26 = v6[2];
    v27 = v6[3];
    v28 = *(_DWORD *)(a4 + 84);
    v29 = *(_DWORD *)(a1 + 384);
    v48 = 136317954;
    v49 = "Network-Cell";
    v50 = 1024;
    v51 = 1;
    v52 = 2048;
    v53 = v21;
    v54 = 2048;
    v55 = v22;
    v56 = 2048;
    v57 = v23;
    v58 = 1024;
    v59 = v24;
    v60 = 1024;
    v61 = v25;
    v62 = 1024;
    v63 = v26;
    v64 = 1024;
    v65 = v27;
    v66 = 1024;
    v67 = v28;
    v68 = 1024;
    v69 = v29;
    v70 = 1024;
    v71 = -1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", (const char *)&v48, 90, v35, v36[0], v36[1], v37, v38, v39, v40, v41, v42,
      v43);
    v31 = (uint8_t *)v30;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  v18 = (uint64_t *)sub_10071CD80(a1 + 168, v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v19 = sub_1007057DC((uint64_t)v36);
    if (sub_1006E0B48(*(_QWORD *)(v7 + 32), v19, a4))
      ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v48) = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v48, v34);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  if ((uint64_t *)(a1 + 176) != v18)
  {
    sub_10008A9F0((uint64_t **)(a1 + 168), v18);
    operator delete(v18);
  }
  if (v47 < 0)
    operator delete(__p);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
}

void sub_1007109F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100710A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  double v27[2];
  int v28;
  int v29;
  int v30;
  int v31;
  void *v32;
  void *v33;
  void *__p;
  char v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  const char *v55;
  uint64_t v56;
  _BYTE v57[48];
  unint64_t v58;
  CFAbsoluteTime Current;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  sub_101347FF0(v27, a3, 0);
  sub_1001E6780((uint64_t)v27, -1, -1, -1, -1);
  v4 = (int *)sub_1007057DC((uint64_t)v27);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v5 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[3];
    *(_DWORD *)buf = 136317186;
    v55 = "Network-Cell";
    v56 = 0x800000000000400;
    *(_QWORD *)v57 = 0;
    *(_WORD *)&v57[8] = 2048;
    *(_QWORD *)&v57[10] = 0;
    *(_WORD *)&v57[18] = 2048;
    *(_QWORD *)&v57[20] = 0xBFF0000000000000;
    *(_WORD *)&v57[28] = 1024;
    *(_DWORD *)&v57[30] = v6;
    *(_WORD *)&v57[34] = 1024;
    *(_DWORD *)&v57[36] = v7;
    *(_WORD *)&v57[40] = 1024;
    *(_DWORD *)&v57[42] = v8;
    *(_WORD *)&v57[46] = 1024;
    LODWORD(v58) = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,", buf, 0x48u);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v17 = *v4;
    v18 = v4[1];
    v19 = v4[2];
    v20 = v4[3];
    v36 = 136317186;
    v37 = "Network-Cell";
    v38 = 1024;
    v39 = 0;
    v40 = 2048;
    v41 = 0;
    v42 = 2048;
    v43 = 0;
    v44 = 2048;
    v45 = 0xBFF0000000000000;
    v46 = 1024;
    v47 = v17;
    v48 = 1024;
    v49 = v18;
    v50 = 1024;
    v51 = v19;
    v52 = 1024;
    v53 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,", (const char *)&v36, 72, v26, v27[0], v27[1], v28, v29, v30, v31);
    v22 = (uint8_t *)v21;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v56 = 0;
    v55 = 0;
    *(_OWORD *)v57 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v57[16] = _Q0;
    *(_OWORD *)&v57[32] = _Q0;
    v58 = 0xBFF0000000000000;
    *(_DWORD *)buf = 0xFFFF;
    v60 = 0;
    v63 = 0;
    v61 = 0xBFF0000000000000;
    v62 = 0;
    v65 = 0xBFF0000000000000;
    v64 = 0;
    v66 = 0x7FFFFFFF;
    v69 = 0;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    Current = CFAbsoluteTimeGetCurrent();
    v15 = sub_1006FE4EC(a1);
    sub_1006E0B48(*(_QWORD *)(v15 + 32), (uint64_t)v4, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v36) = 0;
      LODWORD(v25) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v36, v25);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  sub_10071CEF4((uint64_t **)(a1 + 168), v4);
  if (v35 < 0)
    operator delete(__p);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_100710EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100710EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  NSObject *v18;
  const char *p_p;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  double v46;
  void *__p;
  double v48;
  double v49;
  _DWORD v50[22];
  void *v51;
  void *v52;
  void *v53;
  char v54;
  int v55;
  const char *v56;
  __int16 v57;
  _BYTE v58[34];
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  unsigned int v62;
  __int16 v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  _BYTE v78[34];
  __int16 v79;
  unsigned int v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  unsigned int v84;
  __int16 v85;
  unsigned int v86;
  __int16 v87;
  unsigned int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;

  sub_1013486E8(v50, a3, 3);
  sub_1001E6780((uint64_t)v50, -1, -1, -1, -1);
  v6 = (unsigned int *)sub_100704A28((uint64_t)v50);
  sub_1005A3550(v6, &__p);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v7 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a4 + 4);
    v9 = *(_QWORD *)(a4 + 12);
    v10 = *(_QWORD *)(a4 + 20);
    v11 = *v6;
    v12 = v6[58];
    v13 = v6[8];
    v14 = v6[9];
    v15 = v6[11];
    v16 = *(_DWORD *)(a4 + 84);
    v17 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)buf = 136318210;
    v76 = "Network-Cell";
    v77 = 1024;
    *(_DWORD *)v78 = 1;
    *(_WORD *)&v78[4] = 2048;
    *(_QWORD *)&v78[6] = v8;
    *(_WORD *)&v78[14] = 2048;
    *(_QWORD *)&v78[16] = v9;
    *(_WORD *)&v78[24] = 2048;
    *(_QWORD *)&v78[26] = v10;
    v79 = 1024;
    v80 = v11;
    v81 = 1024;
    v82 = v12;
    v83 = 1024;
    v84 = v13;
    v85 = 1024;
    v86 = v14;
    v87 = 1024;
    v88 = v15;
    v89 = 1024;
    v90 = v16;
    v91 = 1024;
    v92 = v17;
    v93 = 1024;
    v94 = -1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d", buf, 0x60u);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v26 = *(_QWORD *)(a4 + 4);
    v27 = *(_QWORD *)(a4 + 12);
    v28 = *(_QWORD *)(a4 + 20);
    v29 = *v6;
    v30 = v6[58];
    v31 = v6[8];
    v32 = v6[9];
    v33 = v6[11];
    v34 = *(_DWORD *)(a4 + 84);
    v35 = *(_DWORD *)(a1 + 384);
    v55 = 136318210;
    v56 = "Network-Cell";
    v57 = 1024;
    *(_DWORD *)v58 = 1;
    *(_WORD *)&v58[4] = 2048;
    *(_QWORD *)&v58[6] = v26;
    *(_WORD *)&v58[14] = 2048;
    *(_QWORD *)&v58[16] = v27;
    *(_WORD *)&v58[24] = 2048;
    *(_QWORD *)&v58[26] = v28;
    v59 = 1024;
    v60 = v29;
    v61 = 1024;
    v62 = v30;
    v63 = 1024;
    v64 = v31;
    v65 = 1024;
    v66 = v32;
    v67 = 1024;
    v68 = v33;
    v69 = 1024;
    v70 = v34;
    v71 = 1024;
    v72 = v35;
    v73 = 1024;
    v74 = -1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d", (const char *)&v55, 96, *(double *)&__p, v48, v49, v50[0], v50[2], v50[4], v50[6], v50[8], v50[10],
      v50[12],
      v50[14]);
    v37 = (uint8_t *)v36;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v18 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    p_p = (const char *)&__p;
    if (v49 < 0.0)
      p_p = (const char *)__p;
    v20 = *(_QWORD *)(a4 + 4);
    v21 = *(_QWORD *)(a4 + 12);
    v22 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)buf = 136315906;
    v76 = p_p;
    v77 = 2048;
    *(_QWORD *)v78 = v20;
    *(_WORD *)&v78[8] = 2048;
    *(_QWORD *)&v78[10] = v21;
    *(_WORD *)&v78[18] = 2048;
    *(_QWORD *)&v78[20] = v22;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v38 = (const char *)&__p;
    if (v49 < 0.0)
      v38 = (const char *)__p;
    v39 = *(_QWORD *)(a4 + 4);
    v40 = *(_QWORD *)(a4 + 12);
    v41 = *(_QWORD *)(a4 + 20);
    v55 = 136315906;
    v56 = v38;
    v57 = 2048;
    *(_QWORD *)v58 = v39;
    *(_WORD *)&v58[8] = 2048;
    *(_QWORD *)&v58[10] = v40;
    *(_WORD *)&v58[18] = 2048;
    *(_QWORD *)&v58[20] = v41;
    LODWORD(v46) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)", (const char *)&v55, v46, *(double *)&__p, v48);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  v23 = sub_10071C7BC(a1 + 248, (uint64_t)v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v24 = sub_1006FE5F4(a1);
    if (sub_1009A0DE8(*(_QWORD *)(v24 + 32), (int *)v6, a4))
      ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v25 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v55) = 0;
      LODWORD(v46) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v55, *(_QWORD *)&v46);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
  if ((uint64_t *)(a1 + 256) != v23)
  {
    sub_10008A9F0((uint64_t **)(a1 + 248), v23);
    sub_10071BDA0((uint64_t)(v23 + 4));
    operator delete(v23);
  }
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  if (v54 < 0)
    operator delete(v53);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1007115AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1005A1100((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1007115F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  double v28;
  double v29[2];
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  void *v35;
  void *v36;
  void *__p;
  char v38;
  int v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  const char *v60;
  uint64_t v61;
  _BYTE v62[48];
  __int128 v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  sub_1013486E8(v29, a3, 3);
  sub_1001E6780((uint64_t)v29, -1, -1, -1, -1);
  v4 = (int *)sub_100704A28((uint64_t)v29);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v5 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *v4;
    v7 = v4[58];
    v8 = v4[8];
    v9 = v4[9];
    v10 = v4[11];
    *(_DWORD *)buf = 136317442;
    v60 = "Network-Cell";
    v61 = 0x800000000000400;
    *(_QWORD *)v62 = 0;
    *(_WORD *)&v62[8] = 2048;
    *(_QWORD *)&v62[10] = 0;
    *(_WORD *)&v62[18] = 2048;
    *(_QWORD *)&v62[20] = 0xBFF0000000000000;
    *(_WORD *)&v62[28] = 1024;
    *(_DWORD *)&v62[30] = v6;
    *(_WORD *)&v62[34] = 1024;
    *(_DWORD *)&v62[36] = v7;
    *(_WORD *)&v62[40] = 1024;
    *(_DWORD *)&v62[42] = v8;
    *(_WORD *)&v62[46] = 1024;
    LODWORD(v63) = v9;
    WORD2(v63) = 1024;
    *(_DWORD *)((char *)&v63 + 6) = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v18 = *v4;
    v19 = v4[58];
    v20 = v4[8];
    v21 = v4[9];
    v22 = v4[11];
    v39 = 136317442;
    v40 = "Network-Cell";
    v41 = 1024;
    v42 = 0;
    v43 = 2048;
    v44 = 0;
    v45 = 2048;
    v46 = 0;
    v47 = 2048;
    v48 = 0xBFF0000000000000;
    v49 = 1024;
    v50 = v18;
    v51 = 1024;
    v52 = v19;
    v53 = 1024;
    v54 = v20;
    v55 = 1024;
    v56 = v21;
    v57 = 1024;
    v58 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d", (const char *)&v39, 78, v28, v29[0], v29[1], v30, v31, v32, v33, v34);
    v24 = (uint8_t *)v23;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v61 = 0;
    v60 = 0;
    *(_OWORD *)v62 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v62[16] = _Q0;
    *(_OWORD *)&v62[32] = _Q0;
    *(_QWORD *)&v63 = 0xBFF0000000000000;
    *(_DWORD *)buf = 0xFFFF;
    v64 = 0;
    v67 = 0;
    v65 = 0xBFF0000000000000;
    v66 = 0;
    v69 = 0xBFF0000000000000;
    v68 = 0;
    v70 = 0x7FFFFFFF;
    v73 = 0;
    v71 = 0;
    v72 = 0;
    v74 = 0;
    *((_QWORD *)&v63 + 1) = CFAbsoluteTimeGetCurrent();
    v16 = sub_1006FE5F4(a1);
    sub_1009A0DE8(*(_QWORD *)(v16 + 32), v4, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v39) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", &v39, v27);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  sub_10071CF44((uint64_t **)(a1 + 248), (uint64_t)v4);
  if (v38 < 0)
    operator delete(__p);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_100711AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100711ADC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t *v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **v12;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  _BYTE *v29;
  NSObject *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  void **v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  const char *v49;
  char *v50;
  uint64_t v51;
  void **v52;
  _BYTE *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void **v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  const char *v61;
  char *v62;
  const char *v63;
  void *v64[2];
  double v65;
  _DWORD v66[22];
  void *v67;
  void *v68;
  void *v69;
  char v70;
  _BYTE buf[12];
  __int16 v72;
  _BYTE v73[14];
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  unsigned int v79;
  __int16 v80;
  unsigned int v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  int v92;
  void **v93;
  __int16 v94;
  _BYTE *v95;
  _BYTE __p[12];
  __int16 v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  unsigned int v106;
  __int16 v107;
  unsigned int v108;
  __int16 v109;
  unsigned int v110;
  __int16 v111;
  unsigned int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;

  sub_1013489C8(v66, a3, 6);
  sub_1001E6780((uint64_t)v66, -1, -1, -1, -1);
  v7 = (unsigned int *)sub_1001E3CA4((uint64_t)v66);
  sub_10009643C(v7, v64);
  v8 = &qword_1022A0000;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = SHIBYTE(v65);
    v11 = (void **)v64[0];
    sub_100071A00(a4, __p);
    v12 = v64;
    if (v10 < 0)
      v12 = v11;
    if ((v100 & 0x80000000) == 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    v72 = 2080;
    *(_QWORD *)v73 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CELL_LOC: server response lte cell, %s, location, %s", buf, 0x16u);
    if (SBYTE3(v100) < 0)
      operator delete(*(void **)__p);
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v33 = qword_1022A02D8;
    v34 = SHIBYTE(v65);
    v35 = (void **)v64[0];
    sub_100071A00(a4, buf);
    v36 = v64;
    if (v34 < 0)
      v36 = v35;
    if (v73[9] >= 0)
      v37 = buf;
    else
      v37 = *(_BYTE **)buf;
    v92 = 136315394;
    v93 = v36;
    v94 = 2080;
    v95 = v37;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 2, "CELL_LOC: server response lte cell, %s, location, %s", (const char *)&v92, 22);
    v39 = v38;
    if ((v73[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v39);
    v8 = &qword_1022A0000;
    if (v39 != __p)
      free(v39);
  }
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v14 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a4 + 4);
    v16 = *(_QWORD *)(a4 + 12);
    v17 = *(_QWORD *)(a4 + 20);
    v18 = *v7;
    v19 = v7[1];
    v20 = v7[2];
    v21 = v7[3];
    v22 = *(_DWORD *)(a4 + 84);
    v23 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)__p = 136317954;
    *(_QWORD *)&__p[4] = "Network-Cell";
    v97 = 1024;
    v98 = 1;
    v99 = 2048;
    v100 = v15;
    v101 = 2048;
    v102 = v16;
    v103 = 2048;
    v104 = v17;
    v105 = 1024;
    v106 = v18;
    v107 = 1024;
    v108 = v19;
    v109 = 1024;
    v110 = v20;
    v111 = 1024;
    v112 = v21;
    v113 = 1024;
    v114 = v22;
    v115 = 1024;
    v116 = v23;
    v117 = 1024;
    v118 = -1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", __p, 0x5Au);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v40 = *(_QWORD *)(a4 + 4);
    v41 = *(_QWORD *)(a4 + 12);
    v42 = *(_QWORD *)(a4 + 20);
    v43 = *v7;
    v44 = v7[1];
    v45 = v7[2];
    v46 = v7[3];
    v47 = *(_DWORD *)(a4 + 84);
    v48 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)buf = 136317954;
    *(_QWORD *)&buf[4] = "Network-Cell";
    v72 = 1024;
    *(_DWORD *)v73 = 1;
    *(_WORD *)&v73[4] = 2048;
    *(_QWORD *)&v73[6] = v40;
    v74 = 2048;
    v75 = v41;
    v76 = 2048;
    v77 = v42;
    v78 = 1024;
    v79 = v43;
    v80 = 1024;
    v81 = v44;
    v82 = 1024;
    v83 = v45;
    v84 = 1024;
    v85 = v46;
    v86 = 1024;
    v87 = v47;
    v88 = 1024;
    v89 = v48;
    v90 = 1024;
    v91 = -1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d", buf, 90, *(double *)v64, *(double *)&v64[1], v65, v66[0], v66[2], v66[4], v66[6], v66[8], v66[10],
      v66[12]);
    v50 = (char *)v49;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v49);
    if (v50 != __p)
      free(v50);
  }
  v24 = (uint64_t *)sub_10071CD80(a1 + 288, v7);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v25 = sub_1000966F8(a1);
    if (sub_100D99A34(*(_QWORD *)(v25 + 32), (uint64_t)v7, a4))
      ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      *(_WORD *)buf = 0;
      LODWORD(v63) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", buf, v63);
      v62 = (char *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v61);
      if (v62 != __p)
        free(v62);
    }
  }
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v27 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v28 = *(_QWORD *)(a1 + 304);
    sub_10009643C(a3, __p);
    if ((v100 & 0x80000000) == 0)
      v29 = __p;
    else
      v29 = *(_BYTE **)__p;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v28;
    v72 = 2080;
    *(_QWORD *)v73 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "NETWORK: pending, known, before, %lu, cell, %s", buf, 0x16u);
    if (SBYTE3(v100) < 0)
      operator delete(*(void **)__p);
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v51 = qword_1022A02D8;
    v52 = *(void ***)(a1 + 304);
    sub_10009643C(a3, buf);
    if (v73[9] >= 0)
      v53 = buf;
    else
      v53 = *(_BYTE **)buf;
    v92 = 134218242;
    v93 = v52;
    v94 = 2080;
    v95 = v53;
    LODWORD(v63) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v51, 2, "NETWORK: pending, known, before, %lu, cell, %s", &v92, v63);
    v55 = v54;
    if ((v73[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v55);
    v8 = &qword_1022A0000;
    if (v55 != __p)
      free(v55);
  }
  if ((uint64_t *)(a1 + 296) != v24)
  {
    sub_10008A9F0((uint64_t **)(a1 + 288), v24);
    operator delete(v24);
  }
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v30 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a1 + 304);
    sub_10009643C(v7, __p);
    v32 = (v100 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v31;
    v72 = 2080;
    *(_QWORD *)v73 = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "NETWORK: pending, known, after, %lu, cell, %s", buf, 0x16u);
    if (SBYTE3(v100) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v56 = qword_1022A02D8;
    v57 = *(void ***)(a1 + 304);
    sub_10009643C(v7, buf);
    if (v73[9] >= 0)
      v58 = buf;
    else
      v58 = *(_BYTE **)buf;
    v92 = 134218242;
    v93 = v57;
    v94 = 2080;
    v95 = v58;
    LODWORD(v63) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v56, 2, "NETWORK: pending, known, after, %lu, cell, %s", &v92, v63);
    v60 = v59;
    if ((v73[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v60);
    if (v60 != __p)
      free(v60);
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  if (v70 < 0)
    operator delete(v69);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_100712548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1005A1100((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1007125B4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int *v5;
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE *v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  double v43;
  double v44[2];
  int v45;
  int v46;
  int v47;
  int v48;
  void *v49;
  void *v50;
  void *__p;
  char v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  _BYTE *v56;
  _BYTE v57[12];
  __int16 v58;
  _BYTE v59[14];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  _BYTE buf[12];
  uint64_t v73;
  _BYTE v74[48];
  __int128 v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  sub_1013489C8(v44, a3, 6);
  sub_1001E6780((uint64_t)v44, -1, -1, -1, -1);
  v5 = (unsigned int *)sub_1001E3CA4((uint64_t)v44);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v6 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *v5;
    v8 = v5[1];
    v9 = v5[2];
    v10 = v5[3];
    *(_DWORD *)buf = 136317186;
    *(_QWORD *)&buf[4] = "Network-Cell";
    v73 = 0x800000000000400;
    *(_QWORD *)v74 = 0;
    *(_WORD *)&v74[8] = 2048;
    *(_QWORD *)&v74[10] = 0;
    *(_WORD *)&v74[18] = 2048;
    *(_QWORD *)&v74[20] = 0xBFF0000000000000;
    *(_WORD *)&v74[28] = 1024;
    *(_DWORD *)&v74[30] = v7;
    *(_WORD *)&v74[34] = 1024;
    *(_DWORD *)&v74[36] = v8;
    *(_WORD *)&v74[40] = 1024;
    *(_DWORD *)&v74[42] = v9;
    *(_WORD *)&v74[46] = 1024;
    LODWORD(v75) = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,", buf, 0x48u);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v24 = *v5;
    v25 = v5[1];
    v26 = v5[2];
    v27 = v5[3];
    *(_DWORD *)v57 = 136317186;
    *(_QWORD *)&v57[4] = "Network-Cell";
    v58 = 1024;
    *(_DWORD *)v59 = 0;
    *(_WORD *)&v59[4] = 2048;
    *(_QWORD *)&v59[6] = 0;
    v60 = 2048;
    v61 = 0;
    v62 = 2048;
    v63 = 0xBFF0000000000000;
    v64 = 1024;
    v65 = v24;
    v66 = 1024;
    v67 = v25;
    v68 = 1024;
    v69 = v26;
    v70 = 1024;
    v71 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,", v57, 72, v43, v44[0], v44[1], v45, v46, v47, v48);
    v29 = (char *)v28;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v73 = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)v74 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v74[16] = _Q0;
    *(_OWORD *)&v74[32] = _Q0;
    v75 = _Q0;
    *(_DWORD *)buf = 0xFFFF;
    v76 = 0;
    v79 = 0;
    v77 = 0xBFF0000000000000;
    v78 = 0;
    v81 = 0xBFF0000000000000;
    v80 = 0;
    v82 = 0x7FFFFFFF;
    v85 = 0;
    v83 = 0;
    v84 = 0;
    v86 = 0;
    *((_QWORD *)&v75 + 1) = CFAbsoluteTimeGetCurrent();
    v16 = sub_1000966F8(a1);
    sub_100D99A34(*(_QWORD *)(v16 + 32), (uint64_t)v5, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      *(_WORD *)v57 = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", v57, v42);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v18 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 304);
    sub_10009643C(a3, buf);
    v20 = v74[3] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v57 = 134218242;
    *(_QWORD *)&v57[4] = v19;
    v58 = 2080;
    *(_QWORD *)v59 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "NETWORK: pending, unknown, before, %lu, cell, %s", v57, 0x16u);
    if ((v74[3] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v30 = qword_1022A02D8;
    v31 = *(_QWORD *)(a1 + 304);
    sub_10009643C(a3, v57);
    if (v59[9] >= 0)
      v32 = v57;
    else
      v32 = *(_BYTE **)v57;
    v53 = 134218242;
    v54 = v31;
    v55 = 2080;
    v56 = v32;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "NETWORK: pending, unknown, before, %lu, cell, %s", &v53, v42);
    v34 = v33;
    if ((v59[9] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v34);
    if (v34 != buf)
      free(v34);
  }
  sub_10071CEF4((uint64_t **)(a1 + 288), v5);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v21 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(_QWORD *)(a1 + 304);
    sub_10009643C(v5, buf);
    v23 = v74[3] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v57 = 134218242;
    *(_QWORD *)&v57[4] = v22;
    v58 = 2080;
    *(_QWORD *)v59 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "NETWORK: pending, unknown, after, %lu, cell, %s", v57, 0x16u);
    if ((v74[3] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v35 = qword_1022A02D8;
    v36 = *(_QWORD *)(a1 + 304);
    sub_10009643C(v5, v57);
    if (v59[9] >= 0)
      v37 = v57;
    else
      v37 = *(_BYTE **)v57;
    v53 = 134218242;
    v54 = v36;
    v55 = 2080;
    v56 = v37;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "NETWORK: pending, unknown, after, %lu, cell, %s", &v53, v42);
    v39 = v38;
    if ((v59[9] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  if (v52 < 0)
    operator delete(__p);
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_100712DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100712E24(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **v12;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  _BYTE *v29;
  NSObject *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  void **v35;
  void **v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  const char *v49;
  char *v50;
  uint64_t v51;
  void **v52;
  _BYTE *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void **v57;
  _BYTE *v58;
  char *v59;
  char *v60;
  const char *v61;
  char *v62;
  const char *v63;
  void *v64[2];
  double v65;
  _DWORD v66[6];
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  void *v71;
  void *v72;
  void *v73;
  char v74;
  _BYTE buf[12];
  __int16 v76;
  _BYTE v77[14];
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  int v96;
  void **v97;
  __int16 v98;
  _BYTE *v99;
  _BYTE __p[12];
  __int16 v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  unsigned int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;

  sub_101348C9C(v66, a3, 10);
  sub_1001E6780((uint64_t)v66, -1, -1, -1, -1);
  v7 = sub_1007073B4((uint64_t)v66);
  sub_1005A2548((unsigned int *)v7, v64);
  v8 = &qword_1022A0000;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = SHIBYTE(v65);
    v11 = (void **)v64[0];
    sub_100071A00(a4, __p);
    v12 = v64;
    if (v10 < 0)
      v12 = v11;
    if ((v104 & 0x80000000) == 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    v76 = 2080;
    *(_QWORD *)v77 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CELL_LOC: server response nr cell, %s, location, %s", buf, 0x16u);
    if (SBYTE3(v104) < 0)
      operator delete(*(void **)__p);
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v33 = qword_1022A02D8;
    v34 = SHIBYTE(v65);
    v35 = (void **)v64[0];
    sub_100071A00(a4, buf);
    v36 = v64;
    if (v34 < 0)
      v36 = v35;
    if (v77[9] >= 0)
      v37 = buf;
    else
      v37 = *(_BYTE **)buf;
    v96 = 136315394;
    v97 = v36;
    v98 = 2080;
    v99 = v37;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v33, 2, "CELL_LOC: server response nr cell, %s, location, %s", (const char *)&v96, 22);
    v39 = v38;
    if ((v77[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v39);
    v8 = &qword_1022A0000;
    if (v39 != __p)
      free(v39);
  }
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v14 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a4 + 4);
    v16 = *(_QWORD *)(a4 + 12);
    v17 = *(_QWORD *)(a4 + 20);
    v18 = *(_DWORD *)v7;
    v19 = *(_DWORD *)(v7 + 4);
    v20 = *(_DWORD *)(v7 + 8);
    v21 = *(_QWORD *)(v7 + 16);
    v22 = *(_DWORD *)(a4 + 84);
    v23 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)__p = 136317954;
    *(_QWORD *)&__p[4] = "Network-Cell";
    v101 = 1024;
    v102 = 1;
    v103 = 2048;
    v104 = v15;
    v105 = 2048;
    v106 = v16;
    v107 = 2048;
    v108 = v17;
    v109 = 1024;
    v110 = v18;
    v111 = 1024;
    v112 = v19;
    v113 = 1024;
    v114 = v20;
    v115 = 2048;
    v116 = v21;
    v117 = 1024;
    v118 = v22;
    v119 = 1024;
    v120 = v23;
    v121 = 1024;
    v122 = -1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%llx,Confidence,%d,Count,%d,lock,%d", __p, 0x5Eu);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v40 = *(_QWORD *)(a4 + 4);
    v41 = *(_QWORD *)(a4 + 12);
    v42 = *(_QWORD *)(a4 + 20);
    v43 = *(_DWORD *)v7;
    v44 = *(_DWORD *)(v7 + 4);
    v45 = *(_DWORD *)(v7 + 8);
    v46 = *(_QWORD *)(v7 + 16);
    v47 = *(_DWORD *)(a4 + 84);
    v48 = *(_DWORD *)(a1 + 384);
    *(_DWORD *)buf = 136317954;
    *(_QWORD *)&buf[4] = "Network-Cell";
    v76 = 1024;
    *(_DWORD *)v77 = 1;
    *(_WORD *)&v77[4] = 2048;
    *(_QWORD *)&v77[6] = v40;
    v78 = 2048;
    v79 = v41;
    v80 = 2048;
    v81 = v42;
    v82 = 1024;
    v83 = v43;
    v84 = 1024;
    v85 = v44;
    v86 = 1024;
    v87 = v45;
    v88 = 2048;
    v89 = v46;
    v90 = 1024;
    v91 = v47;
    v92 = 1024;
    v93 = v48;
    v94 = 1024;
    v95 = -1;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%llx,Confidence,%d,Count,%d,lock,%d", buf, 94, *(double *)v64, *(double *)&v64[1], v65, v66[0], v66[2], v66[4], v67, v68, v69,
      v70);
    v50 = (char *)v49;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v49);
    if (v50 != __p)
      free(v50);
  }
  v24 = sub_10071CDF8(a1 + 328, v7);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v25 = sub_1006FE6FC(a1);
    if (sub_10083FA30(*(_QWORD *)(v25 + 32), v7, a4))
      ++*(_DWORD *)(a1 + 384);
  }
  else
  {
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v26 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (v8[90] != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      *(_WORD *)buf = 0;
      LODWORD(v63) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", buf, v63);
      v62 = (char *)v61;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v61);
      if (v62 != __p)
        free(v62);
    }
  }
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v27 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v28 = *(_QWORD *)(a1 + 344);
    sub_1005A2548(a3, __p);
    if ((v104 & 0x80000000) == 0)
      v29 = __p;
    else
      v29 = *(_BYTE **)__p;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v28;
    v76 = 2080;
    *(_QWORD *)v77 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "NETWORK: pending, known, before, %lu, cell, %s", buf, 0x16u);
    if (SBYTE3(v104) < 0)
      operator delete(*(void **)__p);
    v8 = &qword_1022A0000;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v51 = qword_1022A02D8;
    v52 = *(void ***)(a1 + 344);
    sub_1005A2548(a3, buf);
    if (v77[9] >= 0)
      v53 = buf;
    else
      v53 = *(_BYTE **)buf;
    v96 = 134218242;
    v97 = v52;
    v98 = 2080;
    v99 = v53;
    LODWORD(v63) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v51, 2, "NETWORK: pending, known, before, %lu, cell, %s", &v96, v63);
    v55 = v54;
    if ((v77[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v55);
    v8 = &qword_1022A0000;
    if (v55 != __p)
      free(v55);
  }
  if ((uint64_t *)(a1 + 336) != v24)
  {
    sub_10008A9F0((uint64_t **)(a1 + 328), v24);
    operator delete(v24);
  }
  if (v8[90] != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v30 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a1 + 344);
    sub_1005A2548((unsigned int *)v7, __p);
    v32 = (v104 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v31;
    v76 = 2080;
    *(_QWORD *)v77 = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "NETWORK: pending, known, after, %lu, cell, %s", buf, 0x16u);
    if (SBYTE3(v104) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v8[90] != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v56 = qword_1022A02D8;
    v57 = *(void ***)(a1 + 344);
    sub_1005A2548((unsigned int *)v7, buf);
    if (v77[9] >= 0)
      v58 = buf;
    else
      v58 = *(_BYTE **)buf;
    v96 = 134218242;
    v97 = v57;
    v98 = 2080;
    v99 = v58;
    LODWORD(v63) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v56, 2, "NETWORK: pending, known, after, %lu, cell, %s", &v96, v63);
    v60 = v59;
    if ((v77[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v60);
    if (v60 != __p)
      free(v60);
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  if (v74 < 0)
    operator delete(v73);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_100713898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1005A1100((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100713904(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _BYTE *v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  double v43;
  double v44[2];
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *__p;
  char v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  _BYTE *v56;
  _BYTE v57[12];
  __int16 v58;
  _BYTE v59[14];
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  _BYTE buf[12];
  uint64_t v73;
  _BYTE v74[48];
  __int128 v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  sub_101348C9C(v44, a3, 10);
  sub_1001E6780((uint64_t)v44, -1, -1, -1, -1);
  v5 = sub_1007073B4((uint64_t)v44);
  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214FF90);
  v6 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)v5;
    v8 = *(_DWORD *)(v5 + 4);
    v9 = *(_DWORD *)(v5 + 8);
    v10 = *(_QWORD *)(v5 + 16);
    *(_DWORD *)buf = 136317186;
    *(_QWORD *)&buf[4] = "Network-Cell";
    v73 = 0x800000000000400;
    *(_QWORD *)v74 = 0;
    *(_WORD *)&v74[8] = 2048;
    *(_QWORD *)&v74[10] = 0;
    *(_WORD *)&v74[18] = 2048;
    *(_QWORD *)&v74[20] = 0xBFF0000000000000;
    *(_WORD *)&v74[28] = 1024;
    *(_DWORD *)&v74[30] = v7;
    *(_WORD *)&v74[34] = 1024;
    *(_DWORD *)&v74[36] = v8;
    *(_WORD *)&v74[40] = 1024;
    *(_DWORD *)&v74[42] = v9;
    *(_WORD *)&v74[46] = 2048;
    *(_QWORD *)&v75 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%llx,", buf, 0x4Cu);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214FF90);
    v24 = *(_DWORD *)v5;
    v25 = *(_DWORD *)(v5 + 4);
    v26 = *(_DWORD *)(v5 + 8);
    v27 = *(_QWORD *)(v5 + 16);
    *(_DWORD *)v57 = 136317186;
    *(_QWORD *)&v57[4] = "Network-Cell";
    v58 = 1024;
    *(_DWORD *)v59 = 0;
    *(_WORD *)&v59[4] = 2048;
    *(_QWORD *)&v59[6] = 0;
    v60 = 2048;
    v61 = 0;
    v62 = 2048;
    v63 = 0xBFF0000000000000;
    v64 = 1024;
    v65 = v24;
    v66 = 1024;
    v67 = v25;
    v68 = 1024;
    v69 = v26;
    v70 = 2048;
    v71 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%llx,", v57, 76, v43, v44[0], v44[1], v45, v46, v47, v48);
    v29 = (char *)v28;
    sub_100512490("LOCATION", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112)) == 1)
  {
    v73 = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)v74 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v74[16] = _Q0;
    *(_OWORD *)&v74[32] = _Q0;
    v75 = _Q0;
    *(_DWORD *)buf = 0xFFFF;
    v76 = 0;
    v79 = 0;
    v77 = 0xBFF0000000000000;
    v78 = 0;
    v81 = 0xBFF0000000000000;
    v80 = 0;
    v82 = 0x7FFFFFFF;
    v85 = 0;
    v83 = 0;
    v84 = 0;
    v86 = 0;
    *((_QWORD *)&v75 + 1) = CFAbsoluteTimeGetCurrent();
    v16 = sub_1006FE6FC(a1);
    sub_10083FA30(*(_QWORD *)(v16 + 32), v5, (uint64_t)buf);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entry", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      *(_WORD *)v57 = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entry", v57, v42);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v18 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 344);
    sub_1005A2548(a3, buf);
    v20 = v74[3] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v57 = 134218242;
    *(_QWORD *)&v57[4] = v19;
    v58 = 2080;
    *(_QWORD *)v59 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "NETWORK: pending, unknown, before, %lu, cell, %s", v57, 0x16u);
    if ((v74[3] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v30 = qword_1022A02D8;
    v31 = *(_QWORD *)(a1 + 344);
    sub_1005A2548(a3, v57);
    if (v59[9] >= 0)
      v32 = v57;
    else
      v32 = *(_BYTE **)v57;
    v53 = 134218242;
    v54 = v31;
    v55 = 2080;
    v56 = v32;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "NETWORK: pending, unknown, before, %lu, cell, %s", &v53, v42);
    v34 = v33;
    if ((v59[9] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v34);
    if (v34 != buf)
      free(v34);
  }
  sub_10071CF9C((uint64_t **)(a1 + 328), v5);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v21 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(_QWORD *)(a1 + 344);
    sub_1005A2548((unsigned int *)v5, buf);
    v23 = v74[3] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v57 = 134218242;
    *(_QWORD *)&v57[4] = v22;
    v58 = 2080;
    *(_QWORD *)v59 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "NETWORK: pending, unknown, after, %lu, cell, %s", v57, 0x16u);
    if ((v74[3] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v35 = qword_1022A02D8;
    v36 = *(_QWORD *)(a1 + 344);
    sub_1005A2548((unsigned int *)v5, v57);
    if (v59[9] >= 0)
      v37 = v57;
    else
      v37 = *(_BYTE **)v57;
    v53 = 134218242;
    v54 = v36;
    v55 = 2080;
    v56 = v37;
    LODWORD(v42) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "NETWORK: pending, unknown, after, %lu, cell, %s", &v53, v42);
    v39 = v38;
    if ((v59[9] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNrCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::NrCell &, CLNetworkLocationRequester::RequestType, int)", "%s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  if (v52 < 0)
    operator delete(__p);
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_100714138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1005A1100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10071417C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4, int a5, int a6, int a7)
{
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  std::string *v32;
  int v33;
  int v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  std::string *v73;
  int v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  double Current;
  int v80;
  NSObject *v81;
  char *v82;
  char *v83;
  NSObject *v84;
  uint64_t v85;
  std::string::size_type v86;
  const char *v87;
  uint8_t *v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  uint8_t *v92;
  int v93;
  const char *v94;
  uint8_t *v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v103;
  __int128 **v104;
  _BOOL4 v105;
  uint64_t v106;
  std::string v107;
  void *v108;
  char *v109;
  char *v110;
  void *__p;
  void *v112;
  uint64_t v113;
  void *v114;
  _BYTE *v115;
  uint64_t v116;
  std::string v117;
  __int16 v118;
  int v119;
  uint8_t buf[4];
  _BYTE v121[26];
  const char *v122;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    v14 = 0xD37A6F4DE9BD37A7 * (((char *)a4[1] - (char *)*a4) >> 3);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)v121 = v13;
    *(_WORD *)&v121[8] = 2050;
    *(_QWORD *)&v121[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "AlsWifi, seriesComplete, known, %{public}lu, unknown, %{public}lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v89 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    v90 = 0xD37A6F4DE9BD37A7 * (((char *)a4[1] - (char *)*a4) >> 3);
    LODWORD(v117.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)v117.__r_.__value_.__r.__words + 4) = v89;
    WORD2(v117.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v117.__r_.__value_.__r.__words[1] + 6) = v90;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "AlsWifi, seriesComplete, known, %{public}lu, unknown, %{public}lu", &v117, 22);
    v92 = (uint8_t *)v91;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)", "%s\n", v91);
    if (v92 != buf)
      free(v92);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112));
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v16 = *(_QWORD *)(a1 + 400);
  v104 = a4;
  if (!v16)
    goto LABEL_16;
  v17 = a1 + 400;
  do
  {
    v18 = *(_DWORD *)(v16 + 32);
    v19 = v18 < a6;
    if (v18 >= a6)
      v20 = (uint64_t *)v16;
    else
      v20 = (uint64_t *)(v16 + 8);
    if (!v19)
      v17 = v16;
    v16 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 400 || *(_DWORD *)(v17 + 32) > a6)
  {
LABEL_16:
    if (a5 != 1)
    {
      *(_DWORD *)buf = -1;
      sub_1002A3054((char *)&v114, (char *)buf, (uint64_t)v121, 1uLL);
      goto LABEL_18;
    }
    sub_101906B74(buf);
    v93 = *(_DWORD *)buf;
LABEL_122:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLNetworkLocationProvider.mm", v93, "onLocationRequesterWifiLocationSeriesComplete");
    goto LABEL_124;
  }
  if (&v114 != (void **)(v17 + 40))
    sub_1002A3054((char *)&v114, *(char **)(v17 + 40), *(_QWORD *)(v17 + 48), (uint64_t)(*(_QWORD *)(v17 + 48) - *(_QWORD *)(v17 + 40)) >> 2);
  sub_10071CFEC((uint64_t **)(a1 + 392), (uint64_t *)v17);
  if (v115 == v114)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10214FFB0);
    v96 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v121 = 0;
      *(_WORD *)&v121[4] = 2082;
      *(_QWORD *)&v121[6] = "";
      *(_WORD *)&v121[14] = 2082;
      *(_QWORD *)&v121[16] = "assert";
      *(_WORD *)&v121[24] = 2081;
      v122 = "fenceKeys.size() > 0";
      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"At least one fence key required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10214FFB0);
    }
    v97 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v121 = 0;
      *(_WORD *)&v121[4] = 2082;
      *(_QWORD *)&v121[6] = "";
      *(_WORD *)&v121[14] = 2082;
      *(_QWORD *)&v121[16] = "assert";
      *(_WORD *)&v121[24] = 2081;
      v122 = "fenceKeys.size() > 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v97, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "At least one fence key required", "{\"msg%{public}.0s\":\"At least one fence key required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10214FFB0);
    }
    v98 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v121 = 0;
      *(_WORD *)&v121[4] = 2082;
      *(_QWORD *)&v121[6] = "";
      *(_WORD *)&v121[14] = 2082;
      *(_QWORD *)&v121[16] = "assert";
      *(_WORD *)&v121[24] = 2081;
      v122 = "fenceKeys.size() > 0";
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"At least one fence key required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v93 = 2235;
    goto LABEL_122;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10214FFB0);
  v84 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v85 = *(_QWORD *)(a1 + 408);
    *(_DWORD *)buf = 134283777;
    *(_QWORD *)v121 = v85;
    *(_WORD *)&v121[8] = 2049;
    *(_QWORD *)&v121[10] = (v115 - (_BYTE *)v114) >> 2;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "AlsWifi, seriesComplete, tags remain, %{private}zu, keys, %{private}zu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10214FFB0);
    v86 = *(_QWORD *)(a1 + 408);
    LODWORD(v117.__r_.__value_.__l.__data_) = 134283777;
    *(std::string::size_type *)((char *)v117.__r_.__value_.__r.__words + 4) = v86;
    WORD2(v117.__r_.__value_.__r.__words[1]) = 2049;
    *(std::string::size_type *)((char *)&v117.__r_.__value_.__r.__words[1] + 6) = (v115 - (_BYTE *)v114) >> 2;
    LODWORD(v99) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "AlsWifi, seriesComplete, tags remain, %{private}zu, keys, %{private}zu", &v117, v99);
    v88 = (uint8_t *)v87;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)", "%s\n", v87);
    if (v88 != buf)
      free(v88);
  }
LABEL_18:
  if (v15)
  {
    v21 = *(_QWORD **)(a1 + 584);
    if (v21 != (_QWORD *)(a1 + 592))
    {
      do
      {
        v22 = v21[4];
        v112 = 0;
        v113 = 0;
        __p = 0;
        sub_10055CCF0(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
        (*(void (**)(uint64_t, void **, BOOL))(*(_QWORD *)v22 + 24))(v22, &__p, a5 == 1);
        if (__p)
        {
          v112 = __p;
          operator delete(__p);
        }
        v23 = (_QWORD *)v21[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v21[2];
            v25 = *v24 == (_QWORD)v21;
            v21 = v24;
          }
          while (!v25);
        }
        v21 = v24;
      }
      while (v24 != (_QWORD *)(a1 + 592));
    }
  }
  v103 = v15;
  v106 = a1;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v27 = *(_QWORD **)a3;
  v26 = *(_QWORD **)(a3 + 8);
  if (*(_QWORD **)a3 == v26)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    v105 = a5 == 1;
    v29 = a1 + 416;
    v30 = (_QWORD *)(a1 + 424);
    do
    {
      if (v30 == sub_100191618(v29, v27 + 22))
      {
        if ((*((_DWORD *)v27 + 40) - 1) >= 0xE)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10214FFD0);
          v31 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
          {
            sub_1000C2150(v27 + 22, &v117);
            v32 = &v117;
            if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = (std::string *)v117.__r_.__value_.__r.__words[0];
            v33 = *((_DWORD *)v27 + 40);
            v34 = *(unsigned __int8 *)(v106 + 120);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v121 = v32;
            *(_WORD *)&v121[8] = 1024;
            *(_DWORD *)&v121[10] = v33;
            *(_WORD *)&v121[14] = 1024;
            *(_DWORD *)&v121[16] = v105;
            *(_WORD *)&v121[20] = 1024;
            *(_DWORD *)&v121[22] = v34;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Extra 5GHz #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d", buf, 0x1Eu);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v117.__r_.__value_.__l.__data_);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10214FFD0);
            v72 = qword_1022A0058;
            sub_1000C2150(v27 + 22, &v107);
            v73 = &v107;
            if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v73 = (std::string *)v107.__r_.__value_.__r.__words[0];
            v74 = *((_DWORD *)v27 + 40);
            v75 = *(unsigned __int8 *)(v106 + 120);
            LODWORD(v117.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v117.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
            WORD2(v117.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v117.__r_.__value_.__r.__words[1] + 6) = v74;
            WORD1(v117.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v117.__r_.__value_.__r.__words[2]) = v105;
            v118 = 1024;
            v119 = v75;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v72, 2, "Extra 5GHz #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d", (const char *)&v117, 30, v100, v101);
            v77 = v76;
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v107.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)", "%s\n", v77);
            if (v77 != (char *)buf)
              free(v77);
          }
        }
      }
      else
      {
        ++v28;
      }
      v35 = v109;
      if (v109 >= v110)
      {
        v46 = (char *)v108;
        v47 = 0xD37A6F4DE9BD37A7 * ((v109 - (_BYTE *)v108) >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0x1642C8590B21642)
          sub_100259694();
        if (0xA6F4DE9BD37A6F4ELL * ((v110 - (_BYTE *)v108) >> 3) > v48)
          v48 = 0xA6F4DE9BD37A6F4ELL * ((v110 - (_BYTE *)v108) >> 3);
        if (0xD37A6F4DE9BD37A7 * ((v110 - (_BYTE *)v108) >> 3) >= 0xB21642C8590B21)
          v49 = 0x1642C8590B21642;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_10055ADA8((uint64_t)&v110, v49);
          v46 = (char *)v108;
          v35 = v109;
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[184 * v47];
        v52 = *(_OWORD *)v27;
        v53 = *((_OWORD *)v27 + 1);
        v54 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v51 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v51 + 3) = v54;
        *(_OWORD *)v51 = v52;
        *((_OWORD *)v51 + 1) = v53;
        v55 = *((_OWORD *)v27 + 4);
        v56 = *((_OWORD *)v27 + 5);
        v57 = *((_OWORD *)v27 + 7);
        *((_OWORD *)v51 + 6) = *((_OWORD *)v27 + 6);
        *((_OWORD *)v51 + 7) = v57;
        *((_OWORD *)v51 + 4) = v55;
        *((_OWORD *)v51 + 5) = v56;
        v58 = *((_OWORD *)v27 + 8);
        v59 = *((_OWORD *)v27 + 9);
        v60 = *((_OWORD *)v27 + 10);
        *((_QWORD *)v51 + 22) = v27[22];
        *((_OWORD *)v51 + 9) = v59;
        *((_OWORD *)v51 + 10) = v60;
        *((_OWORD *)v51 + 8) = v58;
        if (v35 == v46)
        {
          v71 = &v50[184 * v47];
        }
        else
        {
          v61 = &v50[184 * v47];
          do
          {
            v62 = *(_OWORD *)(v35 - 184);
            v63 = *(_OWORD *)(v35 - 168);
            v64 = *(_OWORD *)(v35 - 152);
            *(_OWORD *)(v61 - 136) = *(_OWORD *)(v35 - 136);
            *(_OWORD *)(v61 - 152) = v64;
            *(_OWORD *)(v61 - 168) = v63;
            *(_OWORD *)(v61 - 184) = v62;
            v65 = *(_OWORD *)(v35 - 120);
            v66 = *(_OWORD *)(v35 - 104);
            v67 = *(_OWORD *)(v35 - 88);
            *(_OWORD *)(v61 - 72) = *(_OWORD *)(v35 - 72);
            *(_OWORD *)(v61 - 88) = v67;
            *(_OWORD *)(v61 - 104) = v66;
            *(_OWORD *)(v61 - 120) = v65;
            v68 = *(_OWORD *)(v35 - 56);
            v69 = *(_OWORD *)(v35 - 40);
            v70 = *(_OWORD *)(v35 - 24);
            v71 = v61 - 184;
            *((_QWORD *)v61 - 1) = *((_QWORD *)v35 - 1);
            *(_OWORD *)(v61 - 24) = v70;
            *(_OWORD *)(v61 - 40) = v69;
            *(_OWORD *)(v61 - 56) = v68;
            v35 -= 184;
            v61 -= 184;
          }
          while (v35 != v46);
        }
        v45 = v51 + 184;
        v108 = v71;
        v109 = v51 + 184;
        v110 = &v50[184 * v49];
        if (v46)
          operator delete(v46);
      }
      else
      {
        v36 = *(_OWORD *)v27;
        v37 = *((_OWORD *)v27 + 1);
        v38 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v109 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v35 + 3) = v38;
        *(_OWORD *)v35 = v36;
        *((_OWORD *)v35 + 1) = v37;
        v39 = *((_OWORD *)v27 + 4);
        v40 = *((_OWORD *)v27 + 5);
        v41 = *((_OWORD *)v27 + 7);
        *((_OWORD *)v35 + 6) = *((_OWORD *)v27 + 6);
        *((_OWORD *)v35 + 7) = v41;
        *((_OWORD *)v35 + 4) = v39;
        *((_OWORD *)v35 + 5) = v40;
        v42 = *((_OWORD *)v27 + 8);
        v43 = *((_OWORD *)v27 + 9);
        v44 = *((_OWORD *)v27 + 10);
        *((_QWORD *)v35 + 22) = v27[22];
        *((_OWORD *)v35 + 9) = v43;
        *((_OWORD *)v35 + 10) = v44;
        *((_OWORD *)v35 + 8) = v42;
        v45 = v35 + 184;
      }
      v109 = v45;
      v27 += 23;
    }
    while (v27 != v26);
  }
  sub_100715004((uint64_t)&v108);
  sub_10071D02C(*v104, v104[1], &v108);
  if (v103 == 1)
  {
    if (v28)
      sub_10136B454(*(_QWORD *)(v106 + 672), v28);
    v78 = *(_QWORD *)(v106 + 672);
    Current = j__CFAbsoluteTimeGetCurrent();
    v80 = sub_1013681F8(v78, (uint64_t *)&v108, (int **)&v114, a7, Current);
    if (v80)
    {
      if (0xD37A6F4DE9BD37A7 * ((v109 - (_BYTE *)v108) >> 3) == v80)
      {
        *(_DWORD *)(v106 + 388) -= 373475417 * ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
        goto LABEL_81;
      }
      sub_101906D30();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLNetworkLocationProvider.mm", 2275, "onLocationRequesterWifiLocationSeriesComplete");
LABEL_124:
      __break(1u);
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v81 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, not storing location entries", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v117.__r_.__value_.__l.__data_) = 0;
      LODWORD(v99) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, not storing location entries", &v117, v99);
      v95 = (uint8_t *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int, CLNetworkLocationRequest_Type::CLAlsWifiBand)", "%s\n", v94);
      if (v95 != buf)
        free(v95);
    }
  }
LABEL_81:
  v82 = (char *)v108;
  v83 = v109;
  if (v108 != v109)
  {
    do
    {
      sub_10071D274((uint64_t **)(v106 + 416), (_QWORD *)v82 + 22);
      v82 += 184;
    }
    while (v82 != v83);
    v82 = (char *)v108;
  }
  if (v82)
  {
    v109 = v82;
    operator delete(v82);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
}

void sub_100714F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100715004(uint64_t a1)
{
  char *v2;
  int64x2_t v3;
  int64x2_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *(char **)a1;
  v3 = *(int64x2_t *)(a1 + 8);
  v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  v5 = 0xD37A6F4DE9BD37A7 * v4.i64[0];
  v6 = v5;
  if (0xD37A6F4DE9BD37A7 * v4.i64[1] > v5)
  {
    if ((char *)v3.i64[0] == v2)
    {
      v11 = 0;
      v9 = 184 * v5;
    }
    else
    {
      v7 = (char *)sub_10055ADA8(a1 + 16, v5);
      v2 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[184 * v6];
      v11 = &v7[184 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *(_OWORD *)(v8 - 184);
          v14 = *(_OWORD *)(v8 - 168);
          v15 = *(_OWORD *)(v8 - 152);
          *(_OWORD *)(v12 - 136) = *(_OWORD *)(v8 - 136);
          *(_OWORD *)(v12 - 152) = v15;
          *(_OWORD *)(v12 - 168) = v14;
          *(_OWORD *)(v12 - 184) = v13;
          v16 = *(_OWORD *)(v8 - 120);
          v17 = *(_OWORD *)(v8 - 104);
          v18 = *(_OWORD *)(v8 - 88);
          *(_OWORD *)(v12 - 72) = *(_OWORD *)(v8 - 72);
          *(_OWORD *)(v12 - 88) = v18;
          *(_OWORD *)(v12 - 104) = v17;
          *(_OWORD *)(v12 - 120) = v16;
          v19 = *(_OWORD *)(v8 - 56);
          v20 = *(_OWORD *)(v8 - 40);
          v21 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(v12 - 8) = *((_QWORD *)v8 - 1);
          *(_OWORD *)(v12 - 24) = v21;
          *(_OWORD *)(v12 - 40) = v20;
          *(_OWORD *)(v12 - 56) = v19;
          v12 -= 184;
          v8 -= 184;
        }
        while (v8 != v2);
        v2 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_100715150(uint64_t a1, uint64_t a2, double *a3, const __CFDictionary *a4)
{
  NSObject *v7;
  int v8;
  uint64_t result;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NETWORK: stats: onLocationRequesterResponse, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v10 = *(_DWORD *)(a1 + 576);
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: stats: onLocationRequesterResponse, %d", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterResponse(CLNetworkLocationRequester *, const CFTimeInterval &, CFDictionaryRef, CLNetworkLocationRequester::RequestType, int)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  ++*(_DWORD *)(a1 + 576);
  *(_QWORD *)buf = 0;
  result = sub_100515108(a4, a3, (double *)buf);
  if ((_DWORD)result)
    return TMSetSourceTime(type metadata for , *(double *)buf, 15.0);
  return result;
}

void sub_10071534C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5;
  NSObject *v6;
  int v7;
  double Current;
  double v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  _QWORD v27[2];
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  int v37;

  v28 = a3;
  v29 = a4;
  HIDWORD(v27[0]) = a4;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 16))(*(_QWORD *)(a1 + 112));
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)buf = 67240448;
    v35 = v5;
    v36 = 1026;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Notice NETWORK: no response from server, reachability, %{public}d, queryRetries, %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v16 = *(_DWORD *)(a1 + 352);
    v30 = 67240448;
    v31 = v5;
    v32 = 1026;
    v33 = v16;
    LODWORD(v27[0]) = 14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Notice NETWORK: no response from server, reachability, %{public}d, queryRetries, %{public}d", &v30, v27[0]);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (sub_1001DFAE8())
  {
    sub_100119F3C(buf);
    sub_10011B4E4((uint64_t)buf, "queryFailed", &v29);
    v30 = *(_QWORD *)(a1 + 184);
    sub_10011B4E4((uint64_t)buf, "p1", &v30);
    v30 = *(_QWORD *)(a1 + 264);
    sub_10011B4E4((uint64_t)buf, "p2", &v30);
    v30 = *(_QWORD *)(a1 + 304);
    sub_10011B4E4((uint64_t)buf, "p3", &v30);
    v30 = *(_QWORD *)(a1 + 432);
    sub_10011B4E4((uint64_t)buf, "p4", &v30);
    v30 = *(_QWORD *)(a1 + 344);
    sub_10011B4E4((uint64_t)buf, "p5", &v30);
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    sub_10011A5A8(buf);
  }
  if (v29 == *(_DWORD *)(a1 + 520))
    *(_DWORD *)(a1 + 520) = -1;
  sub_100E3E6F0(a1 + 464);
  Current = CFAbsoluteTimeGetCurrent();
  if (*(int *)(a1 + 352) > 4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a1 + 352);
      *(_DWORD *)buf = 67109376;
      v35 = v14;
      v36 = 1024;
      v37 = 5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NETWORK: retry count %d exceeded %d - not retrying", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v19 = *(_DWORD *)(a1 + 352);
      v30 = 67109376;
      v31 = v19;
      v32 = 1024;
      v33 = 5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: retry count %d exceeded %d - not retrying", &v30, 14);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    sub_100715B24(a1);
    sub_10001FAA8(a1, (uint64_t)"max.retries");
    *(_DWORD *)buf = 3;
    (*(void (**)(uint64_t, uint8_t *, char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, (char *)v27 + 4, 0, 0xFFFFFFFFLL, 0);
  }
  else if (v5)
  {
    v9 = Current;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_DWORD *)(a1 + 352);
      *(_DWORD *)buf = 67109376;
      v35 = v11;
      v36 = 1024;
      v37 = 5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "NETWORK: retry query, %d, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v22 = *(_DWORD *)(a1 + 352);
      v30 = 67109376;
      v31 = v22;
      v32 = 1024;
      v33 = 5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: retry query, %d, %d", &v30, 14);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v12 = *(_DWORD *)(a1 + 352);
    if (!v12)
      *(double *)(a1 + 360) = v9;
    *(_DWORD *)(a1 + 352) = v12 + 1;
    sub_1002296E8(a1, (uint64_t)"retry.query");
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: data reachability is not available - not retrying", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v30) = 0;
      LODWORD(v27[0]) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: data reachability is not available - not retrying", &v30, v27[0]);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    sub_100715B24(a1);
    *(_DWORD *)(a1 + 352) = 5;
    sub_10001FAA8(a1, (uint64_t)"no.data.reachability");
    *(_DWORD *)buf = 3;
    (*(void (**)(uint64_t, uint8_t *, char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, (char *)v27 + 4, 0, 0xFFFFFFFFLL, 0);
  }
  *(_QWORD *)(a1 + 384) = 0;
}

void sub_100715AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100715B24(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;

  if (*(_QWORD *)(a1 + 184) > 0x3BuLL
    || *(_QWORD *)(a1 + 224) > 0x3BuLL
    || *(_QWORD *)(a1 + 264) > 0x3BuLL
    || *(_QWORD *)(a1 + 304) > 0x3BuLL
    || *(_QWORD *)(a1 + 432) > 0x3BuLL
    || *(_QWORD *)(a1 + 344) >= 0x3CuLL)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(_QWORD *)(a1 + 224);
      v5 = *(_QWORD *)(a1 + 264);
      v6 = *(_QWORD *)(a1 + 304);
      v7 = *(_QWORD *)(a1 + 432);
      v8 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)buf = 134219520;
      v38 = v3;
      v39 = 2048;
      v40 = v4;
      v41 = 2048;
      v42 = v5;
      v43 = 2048;
      v44 = v6;
      v45 = 2048;
      v46 = v7;
      v47 = 2048;
      v48 = v8;
      v49 = 1024;
      v50 = 60;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, nr, %lu, to, %d", buf, 0x44u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v15 = *(_QWORD *)(a1 + 184);
      v16 = *(_QWORD *)(a1 + 224);
      v17 = *(_QWORD *)(a1 + 264);
      v18 = *(_QWORD *)(a1 + 304);
      v19 = *(_QWORD *)(a1 + 432);
      v20 = *(_QWORD *)(a1 + 344);
      v23 = 134219520;
      v24 = v15;
      v25 = 2048;
      v26 = v16;
      v27 = 2048;
      v28 = v17;
      v29 = 2048;
      v30 = v18;
      v31 = 2048;
      v32 = v19;
      v33 = 2048;
      v34 = v20;
      v35 = 1024;
      v36 = 60;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, nr, %lu, to, %d", &v23, 68);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::trimPendingQueries()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (*(_QWORD *)(a1 + 184) >= 0x3DuLL)
    {
      do
      {
        v9 = *(uint64_t **)(a1 + 168);
        sub_10008A9F0((uint64_t **)(a1 + 168), v9);
        operator delete(v9);
      }
      while (*(_QWORD *)(a1 + 184) > 0x3CuLL);
    }
    if (*(_QWORD *)(a1 + 224) >= 0x3DuLL)
    {
      do
      {
        v10 = *(uint64_t **)(a1 + 208);
        sub_10008A9F0((uint64_t **)(a1 + 208), v10);
        operator delete(v10);
      }
      while (*(_QWORD *)(a1 + 224) > 0x3CuLL);
    }
    if (*(_QWORD *)(a1 + 264) >= 0x3DuLL)
    {
      do
      {
        v11 = *(uint64_t **)(a1 + 248);
        sub_10008A9F0((uint64_t **)(a1 + 248), v11);
        sub_10071BDA0((uint64_t)(v11 + 4));
        operator delete(v11);
      }
      while (*(_QWORD *)(a1 + 264) > 0x3CuLL);
    }
    if (*(_QWORD *)(a1 + 304) >= 0x3DuLL)
    {
      do
      {
        v12 = *(uint64_t **)(a1 + 288);
        sub_10008A9F0((uint64_t **)(a1 + 288), v12);
        operator delete(v12);
      }
      while (*(_QWORD *)(a1 + 304) > 0x3CuLL);
    }
    if (*(_QWORD *)(a1 + 432) >= 0x3DuLL)
    {
      do
      {
        v13 = *(uint64_t **)(a1 + 416);
        sub_10008A9F0((uint64_t **)(a1 + 416), v13);
        operator delete(v13);
      }
      while (*(_QWORD *)(a1 + 432) > 0x3CuLL);
    }
    if (*(_QWORD *)(a1 + 344) >= 0x3DuLL)
    {
      do
      {
        v14 = *(uint64_t **)(a1 + 328);
        sub_10008A9F0((uint64_t **)(a1 + 328), v14);
        operator delete(v14);
      }
      while (*(_QWORD *)(a1 + 344) > 0x3CuLL);
    }
  }
}

BOOL sub_100715F00(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[3];
  int v12;
  uint8_t buf[12];
  int v14;

  v12 = a4;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NETWORK: query failed for nearbys - not retrying", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: query failed for nearbys - not retrying", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterNearbyError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  a1[48] = 0;
  *(_DWORD *)buf = a4;
  v14 = a3;
  sub_10071E0C0((uint64_t)(a1 + 49), &v12);
  v11[0] = 3;
  (*(void (**)(_QWORD *, _DWORD *, uint8_t *, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, v11, buf, 0, 0xFFFFFFFFLL, 0);
  return sub_100E3E6F0((uint64_t)(a1 + 58));
}

void sub_1007160F0(_DWORD *a1, uint64_t a2, int a3, int a4)
{
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v6 = a1[97];
  v11[0] = a4;
  v11[1] = v6;
  v7 = a1[96];
  v11[2] = v7;
  v11[3] = a3;
  if (a1[130] == a4)
    a1[130] = -1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    v18 = a4;
    v19 = 1024;
    v20 = v7;
    v21 = 1024;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "NETWORK: query: finished, tag, %d, cells, %d, wifis, %d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v12[0] = 67109632;
    v12[1] = a4;
    v13 = 1024;
    v14 = v7;
    v15 = 1024;
    v16 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: query: finished, tag, %d, cells, %d, wifis, %d", v12, 20, v11[0]);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onLocationRequesterFinished(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  a1[88] = 0;
  if ((int)a1[96] >= 1)
  {
    *(_DWORD *)buf = 0;
    (*(void (**)(_DWORD *, uint8_t *, _DWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v11, 0, 0xFFFFFFFFLL, 0);
    a1[96] = 0;
  }
  if ((int)a1[97] >= 1)
  {
    *(_DWORD *)buf = 1;
    (*(void (**)(_DWORD *, uint8_t *, _DWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v11, 0, 0xFFFFFFFFLL, 0);
    a1[97] = 0;
  }
  *(_DWORD *)buf = 2;
  (*(void (**)(_DWORD *, uint8_t *, _DWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v11, 0, 0xFFFFFFFFLL, 0);
  sub_100E3E6F0((uint64_t)(a1 + 116));
  sub_100044A24((uint64_t)a1, (uint64_t)"onLocationRequesterFinished");
}

void sub_1007163AC(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (*a3 == 16)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 48))(*(_QWORD *)(a1 + 448));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
    sub_101369A38(*(_QWORD *)(a1 + 672));
  }
  else if (*a3 == 6)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a4;
      v8 = a4[1];
      *(_DWORD *)buf = 67109376;
      v30 = v7;
      v31 = 1024;
      v32 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v13 = *a4;
      v14 = a4[1];
      v23 = 67109376;
      v24 = v13;
      v25 = 1024;
      v26 = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d", &v23, 14);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    *(_DWORD *)(a1 + 608) = a4[1];
    if (a4[1] && !*a4)
      sub_100702070(a1);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_DWORD *)(a1 + 608);
      v11 = *a4;
      v12 = *(_DWORD *)(a1 + 352);
      *(_DWORD *)buf = 67240704;
      v30 = v10;
      v31 = 1026;
      v32 = v11;
      v33 = 1026;
      v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@ClxLink, reach, %{public}d, last, %{public}d, retries, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FF50);
      v17 = *(_DWORD *)(a1 + 608);
      v18 = *a4;
      v19 = *(_DWORD *)(a1 + 352);
      v23 = 67240704;
      v24 = v17;
      v25 = 1026;
      v26 = v18;
      v27 = 1026;
      v28 = v19;
      LODWORD(v22) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxLink, reach, %{public}d, last, %{public}d, retries, %{public}d", &v23, v22);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
  }
}

id *sub_100716788(id *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v4 = (uint64_t)result;
  if (*a3 == 4)
  {
    if (*(_DWORD *)(a4 + 188) != 1)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Location Services disabled, clearing all local cache", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v11[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services disabled, clearing all local cache", v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
      return sub_100716A88(v4);
    }
  }
  else if (!*a3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Location Services reset, clearing all local cache", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Location Services reset, clearing all local cache", v11, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100716A88(v4);
    return (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 112) + 40))(*(_QWORD *)(v4 + 112));
  }
  return result;
}

id *sub_100716A88(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  id v20[2];
  uint8_t buf[1640];

  sub_100131938(v20, (uint64_t)"clearAlsDatabaseEntries", 0);
  sub_100197040();
  v2 = sub_1001B796C();
  if ((v2 & 0x400) != 0)
  {
    v3 = sub_1006FE4EC(a1);
    sub_10067F6A0(*(_QWORD *)(v3 + 32));
    v4 = sub_1006FE570(a1);
    sub_10067F6A0(*(_QWORD *)(v4 + 32));
  }
  if ((v2 & 0x800000) != 0)
  {
    v5 = sub_1006FE3E4(a1);
    sub_10067F6A0(*(_QWORD *)(v5 + 32));
    v6 = sub_1006FE468(a1);
    sub_10067F6A0(*(_QWORD *)(v6 + 32));
  }
  if ((v2 & 0x800) != 0)
  {
    v7 = sub_1006FE5F4(a1);
    sub_10067F6A0(*(_QWORD *)(v7 + 32));
    v8 = sub_1006FE678(a1);
    sub_10067F6A0(*(_QWORD *)(v8 + 32));
  }
  if ((v2 & 0x40000) != 0)
  {
    v9 = sub_1000966F8(a1);
    sub_10067F6A0(*(_QWORD *)(v9 + 32));
    v10 = sub_100096670(a1);
    sub_10067F6A0(*(_QWORD *)(v10 + 32));
  }
  if ((v2 & 0x4000000) != 0)
  {
    v11 = sub_1006FE6FC(a1);
    sub_10067F6A0(*(_QWORD *)(v11 + 32));
    v12 = sub_1006FE784(a1);
    sub_10067F6A0(*(_QWORD *)(v12 + 32));
  }
  sub_1013695E8(*(_QWORD *)(a1 + 672));
  sub_101369658(*(_QWORD *)(a1 + 672));
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v13 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Clearing associated AP centroids in WifiAssociatedApCentroidStore", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v19[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Clearing associated AP centroids in WifiAssociatedApCentroidStore", v19, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::clearDatabaseEntries()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  sub_100CDB4D8();
  sub_100008848(a1 + 168, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 176) = 0;
  v15 = *(_QWORD **)(a1 + 216);
  v14 = a1 + 216;
  *(_QWORD *)(v14 - 32) = 0;
  sub_100008848(v14 - 8, v15);
  *(_QWORD *)(v14 - 8) = v14;
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  sub_10071BD58(v14 + 32, *(_QWORD **)(v14 + 40));
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = v14 + 40;
  sub_100008848(v14 + 72, *(_QWORD **)(v14 + 80));
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 72) = v14 + 80;
  sub_100008848(v14 + 112, *(_QWORD **)(v14 + 120));
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 128) = 0;
  *(_QWORD *)(v14 + 112) = v14 + 120;
  sub_100008848(v14 + 200, *(_QWORD **)(v14 + 208));
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 200) = v14 + 208;
  return sub_100131740(v20);
}

void sub_100716D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100716DBC(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  int v19;
  uint8_t buf[4];
  int v21;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "onCompanionNotification, notification, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v12 = *a3;
    v18 = 67109120;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "onCompanionNotification, notification, %d", &v18);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  if (*a3 == 5)
  {
    sub_100197040();
    if (sub_100195F08())
    {
      v9 = *a4;
      *(_BYTE *)(a1 + 440) = v9;
      if (v9)
        sub_100702070(a1);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a4;
      *(_DWORD *)buf = 67240192;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@ClxLink, Nearby, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FF50);
      v15 = *a4;
      v18 = 67240192;
      v19 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxLink, Nearby, %{public}d", &v18, 8);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
}

void sub_1007170F8(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  *(_BYTE *)(a1 + 120) = a2 != 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 120))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Data protection is now %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    if (*(_BYTE *)(a1 + 120))
      v5 = "enabled";
    else
      v5 = "disabled";
    v8 = 136315138;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Data protection is now %s", (const char *)&v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::handleDataProtectionStatusChanged(CLDataProtectionManager_Type::DataAvailability)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (!*(_BYTE *)(a1 + 120))
  {
    sub_100717304((_QWORD *)a1);
    sub_100718CC8(a1);
    nullsub_34(*(_QWORD *)(a1 + 672));
  }
}

_BYTE *sub_100717304(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *result;

  sub_101369578(a1[84]);
  v2 = (_BYTE *)a1[20];
  if (v2)
    sub_100718F84(v2);
  v3 = (_BYTE *)a1[19];
  if (v3)
    sub_100718F84(v3);
  v4 = (_BYTE *)a1[25];
  if (v4)
    sub_100718F84(v4);
  v5 = (_BYTE *)a1[24];
  if (v5)
    sub_100718F84(v5);
  v6 = (_BYTE *)a1[30];
  if (v6)
    sub_100719468(v6);
  v7 = (_BYTE *)a1[29];
  if (v7)
    sub_100719468(v7);
  v8 = (_BYTE *)a1[35];
  if (v8)
    sub_10071994C(v8);
  v9 = (_BYTE *)a1[34];
  if (v9)
    sub_10071994C(v9);
  v10 = (_BYTE *)a1[40];
  if (v10)
    sub_100719E30(v10);
  result = (_BYTE *)a1[39];
  if (result)
    return sub_100719E30(result);
  return result;
}

void sub_1007173A8(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  sub_10136B65C(*(_QWORD *)(a1 + 672));
  if (!*a3)
    sub_1007170F8(a1, *a4);
}

void sub_1007173FC(uint64_t a1, uint64_t a2, int *a3, void **a4)
{
  NSObject *v7;
  const __CFString *v8;
  _BYTE *v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  const __CFString *v20;
  _BYTE *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t *v24;
  char *v25;
  char *v26;
  NSObject *v27;
  const __CFString *v28;
  _BYTE *v29;
  uint64_t v30;
  const __CFString *v31;
  uint8_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const __CFString *v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  _BYTE v40[12];
  __int16 v41;
  uint64_t v42;
  char v43;
  int v44;
  _BYTE *v45;
  uint8_t buf[16];
  __int128 v47;
  int v48;
  _BYTE __p[12];
  __int16 v50;
  uint64_t v51;
  char v52;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v8, (uint64_t)__p);
    v9 = v52 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Nlp, received %{public}s", buf, 0xCu);
    if (v52 < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v30 = qword_1022A0048;
    v31 = (const __CFString *)sub_1001DEC98(a3);
    sub_1001A486C(v31, (uint64_t)buf);
    if ((SBYTE7(v47) & 0x80u) == 0)
      v32 = buf;
    else
      v32 = *(uint8_t **)buf;
    *(_DWORD *)v40 = 136446210;
    *(_QWORD *)&v40[4] = v32;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 0, "Nlp, received %{public}s", v40, 12);
    v34 = v33;
    if (SBYTE7(v47) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v34);
    if (v34 != __p)
      free(v34);
  }
  v10 = (const void *)sub_1001DEC98(a3);
  if (CFEqual(v10, CFSTR("kDataStatusNotification")))
  {
    v11 = *a4;
    if (*a4)
    {
      *(_OWORD *)buf = 0u;
      v47 = 0u;
      v48 = 1065353216;
      if (sub_101260B14(v11, (uint64_t)buf))
      {
        *(_DWORD *)v40 = 0;
        *(_QWORD *)__p = v40;
        *(_DWORD *)(a1 + 612) = *((_DWORD *)sub_10071E124((uint64_t)buf, (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 6);
        if (sub_1001DC538())
        {
          *(_DWORD *)v40 = 1;
          *(_QWORD *)__p = v40;
          *(_DWORD *)(a1 + 616) = *((_DWORD *)sub_10071E124((uint64_t)buf, (int *)v40, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)+ 6);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v12 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *(int *)(a1 + 612);
          v14 = *(int *)(a1 + 616);
          *(_DWORD *)__p = 134349312;
          *(_QWORD *)&__p[4] = v13;
          v50 = 2050;
          v51 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Nlp, dataindictor, both, %{public}ld, %{public}ld", __p, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_51;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v15 = *(int *)(a1 + 612);
        v16 = *(int *)(a1 + 616);
        *(_DWORD *)v40 = 134349312;
        *(_QWORD *)&v40[4] = v15;
        v41 = 2050;
        v42 = v16;
        LODWORD(v39) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "Nlp, dataindictor, both, %{public}ld, %{public}ld", v40, v39);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v17);
        if (v18 == __p)
          goto LABEL_51;
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v27 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          v28 = (const __CFString *)sub_1001DEC98(a3);
          sub_1001A486C(v28, (uint64_t)__p);
          v29 = v52 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)v40 = 136446210;
          *(_QWORD *)&v40[4] = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Nlp, invalid, datacopy, %{public}s", v40, 0xCu);
          if (v52 < 0)
            operator delete(*(void **)__p);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_51;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214FF50);
        v35 = qword_1022A0048;
        v36 = (const __CFString *)sub_1001DEC98(a3);
        sub_1001A486C(v36, (uint64_t)v40);
        if (v43 >= 0)
          v37 = v40;
        else
          v37 = *(_BYTE **)v40;
        v44 = 136446210;
        v45 = v37;
        LODWORD(v39) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v35, 16, "Nlp, invalid, datacopy, %{public}s", &v44, v39);
        v18 = v38;
        if (v43 < 0)
          operator delete(*(void **)v40);
        sub_100512490("Generic", 1, 0, 0, "void CLNetworkLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
        if (v18 == __p)
          goto LABEL_51;
      }
      free(v18);
LABEL_51:
      sub_100067AC4((uint64_t)buf);
      return;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v19 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v20 = (const __CFString *)sub_1001DEC98(a3);
      sub_1001A486C(v20, (uint64_t)__p);
      v21 = v52 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Nlp, invalid, data, %{public}s", buf, 0xCu);
      if (v52 < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FF50);
      v22 = qword_1022A0048;
      v23 = (const __CFString *)sub_1001DEC98(a3);
      sub_1001A486C(v23, (uint64_t)buf);
      if ((SBYTE7(v47) & 0x80u) == 0)
        v24 = buf;
      else
        v24 = *(uint8_t **)buf;
      *(_DWORD *)v40 = 136446210;
      *(_QWORD *)&v40[4] = v24;
      LODWORD(v39) = 12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 16, "Nlp, invalid, data, %{public}s", v40, v39);
      v26 = v25;
      if (SBYTE7(v47) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "void CLNetworkLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v26);
      if (v26 != __p)
        free(v26);
    }
  }
}

void sub_100717B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100067AC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100717BC0(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 8);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLTelephonyService_Type::Cell, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_100717E24(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 8);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLTelephonyService_Type::ScdmaCell, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_100718088(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 58);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLTelephonyService_Type::CdmaCell, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        sub_10071BDA0((uint64_t)(v5 + 4));
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_1007182F8(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 15);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLTelephonyService_Type::LteCell, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_10071855C(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 16);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLTelephonyService_Type::NrCell, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_1007187C0(double a1, double a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  double v24;
  __int16 v25;
  double v26;

  v4 = a4 + 1;
  v5 = *a4;
  if (*a4 != (uint64_t *)(a4 + 1))
  {
    do
    {
      v9 = (uint64_t *)v5[1];
      v10 = v5;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = *((double *)v5 + 5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v14 = vabdd_f64(a2, v13);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        v24 = v14;
        v25 = 2048;
        v26 = a1;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214FF70);
        v19 = 134218240;
        v20 = v14;
        v21 = 2048;
        v22 = a1;
        LODWORD(v18) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::map<CLMacAddress, double>]", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (v14 >= a1)
      {
        sub_10008A9F0(a4, v5);
        operator delete(v5);
      }
      v5 = v11;
    }
    while (v11 != (uint64_t *)v4);
  }
}

void sub_100718A24(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  if (*(_QWORD *)(a1 + 512))
  {
    sub_10001FAA8(a1, (uint64_t)"onRetryTimer");
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(a1 + 512);
      v4 = *(_DWORD *)(a1 + 352);
      v5 = *(_QWORD *)(a1 + 432);
      v6 = *(_QWORD *)(a1 + 184);
      v7 = *(_QWORD *)(a1 + 224);
      v8 = *(_QWORD *)(a1 + 264);
      v9 = *(_QWORD *)(a1 + 304);
      v10 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)buf = 136317186;
      v39 = "onRetryTimer";
      v40 = 2048;
      v41 = v3;
      v42 = 1024;
      v43 = v4;
      v44 = 2048;
      v45 = v5;
      v46 = 2048;
      v47 = v6;
      v48 = 2048;
      v49 = v7;
      v50 = 2048;
      v51 = v8;
      v52 = 2048;
      v53 = v9;
      v54 = 2048;
      v55 = v10;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu", buf, 0x58u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v11 = *(_QWORD *)(a1 + 512);
      v12 = *(_DWORD *)(a1 + 352);
      v13 = *(_QWORD *)(a1 + 432);
      v14 = *(_QWORD *)(a1 + 184);
      v15 = *(_QWORD *)(a1 + 224);
      v16 = *(_QWORD *)(a1 + 264);
      v17 = *(_QWORD *)(a1 + 304);
      v18 = *(_QWORD *)(a1 + 344);
      v20 = 136317186;
      v21 = "onRetryTimer";
      v22 = 2048;
      v23 = v11;
      v24 = 1024;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      v32 = 2048;
      v33 = v16;
      v34 = 2048;
      v35 = v17;
      v36 = 2048;
      v37 = v18;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu", (const char *)&v20, 88);
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::onRetryTimer()", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    sub_10070E458(a1);
  }
}

void sub_100718CC0(uint64_t a1)
{
  sub_100718A24(*(_QWORD *)(a1 + 32));
}

void sub_100718CC8(uint64_t a1)
{
  char *v2;
  std::string *v3;
  __int128 v4;
  int v5;
  size_t v6;
  std::string *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  std::string *v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  std::string v20;
  void *v21[2];
  int64_t v22;

  if (!*(_BYTE *)(a1 + 665))
  {
    v2 = (char *)sub_1001FD94C();
    sub_1000B7884(v2, (uint64_t)&v20);
    v3 = std::string::append(&v20, "/lockCache_encryptedA.db");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v22 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)v21 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v5 = SHIBYTE(v22);
    if (v22 >= 0)
      v6 = HIBYTE(v22);
    else
      v6 = (size_t)v21[1];
    v7 = &v20;
    sub_100259584((uint64_t)&v20, v6 + 8);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (v5 >= 0)
        v8 = v21;
      else
        v8 = (void **)v21[0];
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "-journal");
    v9 = v18;
    sub_100259584((uint64_t)v18, v6 + 4);
    if (v19 < 0)
      v9 = (void **)v18[0];
    if (v6)
    {
      if (v5 >= 0)
        v10 = v21;
      else
        v10 = (void **)v21[0];
      memmove(v9, v10, v6);
    }
    strcpy((char *)v9 + v6, "-shm");
    v11 = __p;
    sub_100259584((uint64_t)__p, v6 + 4);
    if (v17 < 0)
      v11 = (void **)__p[0];
    if (v5 >= 0)
      v12 = v21;
    else
      v12 = (void **)v21[0];
    if (v6)
      memmove(v11, v12, v6);
    strcpy((char *)v11 + v6, "-wal");
    sub_1005164F0((const char *)v12);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v20;
    else
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
    sub_1005164F0((const char *)v13);
    if (v19 >= 0)
      v14 = v18;
    else
      v14 = (void **)v18[0];
    sub_1005164F0((const char *)v14);
    if (v17 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    sub_1005164F0((const char *)v15);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    *(_BYTE *)(a1 + 665) = 1;
  }
}

void sub_100718F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100718F84(_BYTE *result)
{
  _QWORD v1[6];

  if (*result)
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x3812000000;
    v1[3] = sub_100206CF4;
    v1[4] = sub_100207AE0;
    v1[5] = 0;
    sub_10071E3D8();
  }
  return result;
}

void sub_100719298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf)
{
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  v34 = a28;
  a28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_1007192F4()
{
  JUMPOUT(0x1007192FCLL);
}

void sub_100719444()
{
  __cxa_end_catch();
  JUMPOUT(0x1007192BCLL);
}

void sub_100719458(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1007192ECLL);
}

_BYTE *sub_100719468(_BYTE *result)
{
  _QWORD v1[6];

  if (*result)
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x3812000000;
    v1[3] = sub_10071E830;
    v1[4] = sub_10071E840;
    v1[5] = 0;
    sub_10071E860();
  }
  return result;
}

void sub_10071977C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf)
{
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  v34 = a28;
  a28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_1007197D8()
{
  JUMPOUT(0x1007197E0);
}

void sub_100719928()
{
  __cxa_end_catch();
  JUMPOUT(0x1007197A0);
}

void sub_10071993C(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x1007197D0);
}

_BYTE *sub_10071994C(_BYTE *result)
{
  _QWORD v1[6];

  if (*result)
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x3812000000;
    v1[3] = sub_10071ED58;
    v1[4] = sub_10071ED68;
    v1[5] = 0;
    sub_10071ED88();
  }
  return result;
}

void sub_100719C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf)
{
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  v34 = a28;
  a28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_100719CBC()
{
  JUMPOUT(0x100719CC4);
}

void sub_100719E0C()
{
  __cxa_end_catch();
  JUMPOUT(0x100719C84);
}

void sub_100719E20(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100719CB4);
}

_BYTE *sub_100719E30(_BYTE *result)
{
  _QWORD v1[6];

  if (*result)
  {
    v1[0] = 0;
    v1[1] = v1;
    v1[2] = 0x3812000000;
    v1[3] = sub_10071F200;
    v1[4] = sub_10071F210;
    v1[5] = 0;
    sub_1005E1AB8();
  }
  return result;
}

void sub_10071A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint8_t buf)
{
  uint64_t v34;

  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a22, 8);
  v34 = a28;
  a28 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void sub_10071A1A0()
{
  JUMPOUT(0x10071A1A8);
}

void sub_10071A2F0()
{
  __cxa_end_catch();
  JUMPOUT(0x10071A168);
}

void sub_10071A304(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x10071A198);
}

void sub_10071A314()
{
  operator new();
}

void sub_10071A3C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10071A3FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102150198;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_10071A4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214FF30);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10214FF30);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::removeClient(int) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_10071A744(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214FF30);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10071A9C4(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214FF30);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214FF30);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10071AD4C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _OWORD *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_OWORD **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

uint64_t sub_10071ADAC(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x28uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102150100;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_10071AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10071AE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10071AECC(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x28uLL);
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102150100;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10071D2C4();
    os_activity_scope_leave(&state);
  }
}

void sub_10071B504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10071B550(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214FF30);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::listClients() [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214FF30);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::listClients() [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10214FF30);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214FF30);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::listClients() [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10071BAFC(uint64_t a1)
{
  sub_10071F5EC(a1);
  operator delete();
}

void sub_10071BB20(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_10071D874(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_10071BB6C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10071BB98(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10071BBC4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10071BBF0(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_10071BC1C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10071BC48(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10071BC74(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10071BCA0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10071BCDC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10071BCDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10071BD58(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10071BD58(a1, *a2);
    sub_10071BD58(a1, a2[1]);
    sub_10071BDA0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10071BDA0(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

_OWORD *sub_10071BDE4(uint64_t **a1, _DWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)sub_10071BE6C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = 0;
    sub_1000145B0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_10071BE6C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (_DWORD *)(v4 + 32);
        if (!sub_10071BEFC(a3, (_DWORD *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_10071BEFC(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_10071BEFC(_DWORD *a1, _DWORD *a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v6;
  int v7;

  v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    v3 = a1[1];
    v4 = a2[1];
    v2 = v3 < v4;
    if (v3 == v4)
    {
      if (a1[2] == a2[2] && a1[3] == a2[3])
        return 0;
      v6 = a1[2];
      v7 = a2[2];
      v2 = v6 < v7;
      if (v6 == v7)
        return a1[3] < a2[3];
    }
  }
  return v2;
}

uint64_t *sub_10071BF68(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10071C010((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_10071C0A0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_10071C548((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_10071C010(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_10071C108(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_10071C108(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10071C0A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x1D8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_10071C424((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10071C0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10071C548(v1, 0);
  _Unwind_Resume(a1);
}

BOOL sub_10071C108(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (sub_10071C1D0(a1, a2))
    return 0;
  v5 = *(_DWORD *)a1 < *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v6 = *(_DWORD *)(a1 + 232);
    v7 = *(_DWORD *)(a2 + 232);
    v5 = v6 < v7;
    if (v6 == v7)
    {
      v8 = *(_DWORD *)(a1 + 32);
      v9 = *(_DWORD *)(a2 + 32);
      v5 = v8 < v9;
      if (v8 == v9)
      {
        v10 = *(_DWORD *)(a1 + 36);
        v11 = *(_DWORD *)(a2 + 36);
        v5 = v10 < v11;
        if (v10 == v11)
        {
          v12 = *(_DWORD *)(a1 + 44);
          v13 = *(_DWORD *)(a2 + 44);
          v5 = v12 < v13;
          if (v12 == v13)
          {
            if (sub_10071C288((unsigned __int8 *)(a1 + 240), (unsigned __int8 *)(a2 + 240)))
              return sub_10071C31C((_QWORD *)(a1 + 240), (_QWORD *)(a2 + 240));
            return *(_DWORD *)(a1 + 40) < *(_DWORD *)(a2 + 40);
          }
        }
      }
    }
  }
  return v5;
}

BOOL sub_10071C1D0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
  {
    return 0;
  }
  result = sub_10071C384((unsigned __int8 *)(a1 + 240), (unsigned __int8 *)(a2 + 240));
  if (!result)
    return result;
  return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52) && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
}

BOOL sub_10071C288(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL sub_10071C31C(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

BOOL sub_10071C384(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_10071C424(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10027205C((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  v12 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 176) = v10;
  v13 = (_BYTE *)(a1 + 240);
  if (*(char *)(a2 + 263) < 0)
  {
    sub_100115CE4(v13, *(void **)(a2 + 240), *(_QWORD *)(a2 + 248));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)v13 = v14;
  }
  v15 = *(_OWORD *)(a2 + 264);
  v16 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v16;
  *(_OWORD *)(a1 + 264) = v15;
  v17 = *(_OWORD *)(a2 + 312);
  v18 = *(_OWORD *)(a2 + 328);
  v19 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v19;
  *(_OWORD *)(a1 + 312) = v17;
  *(_OWORD *)(a1 + 328) = v18;
  v20 = *(_OWORD *)(a2 + 376);
  v21 = *(_OWORD *)(a2 + 392);
  v22 = *(_OWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 376) = v20;
  *(_QWORD *)(a1 + 432) = 0;
  return a1;
}

void sub_10071C52C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10071C548(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10071BDA0((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_OWORD *sub_10071C58C(uint64_t **a1, _DWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;

  v6 = (void **)sub_10071BE6C((uint64_t)a1, &v16, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x80uLL);
    v9 = *a4;
    v10 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v10;
    v11 = v9[2];
    v12 = v9[3];
    v13 = v9[4];
    v14 = *((_QWORD *)v9 + 10);
    v7[5] = v12;
    v7[6] = v13;
    v7[4] = v11;
    *((_QWORD *)v7 + 14) = v14;
    *((_QWORD *)v7 + 15) = 0;
    sub_1000145B0(a1, v16, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *sub_10071C628(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;

  v6 = (void **)sub_10071C6C0((uint64_t)a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x88uLL);
    v9 = *a4;
    v10 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v10;
    v11 = v9[2];
    v12 = v9[3];
    v13 = v9[5];
    v7[6] = v9[4];
    v7[7] = v13;
    v7[4] = v11;
    v7[5] = v12;
    *((_QWORD *)v7 + 16) = 0;
    sub_1000145B0(a1, v15, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_10071C6C0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_10071C750(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_10071C750(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_10071C750(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v6;
  int v7;

  v2 = *(_DWORD *)a1 < *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v3 = *(_DWORD *)(a1 + 4);
    v4 = *(_DWORD *)(a2 + 4);
    v2 = v3 < v4;
    if (v3 == v4)
    {
      if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
        return 0;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a2 + 8);
      v2 = v6 < v7;
      if (v6 == v7)
        return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
    }
  }
  return v2;
}

_QWORD *sub_10071C7BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_10071C108((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10071C108(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t sub_10071C834(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x97B425ED097B42)
    sub_100259694();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 4);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 4) >= 0x4BDA12F684BDA1)
    v6 = 0x97B425ED097B42;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_10071CAE4((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[432 * v3];
  v13 = &v7[432 * v6];
  sub_10071C958((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 432;
  sub_10071CA70(a1, &v10);
  v8 = a1[1];
  sub_10071CD0C(&v10);
  return v8;
}

void sub_10071C944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10071CD0C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_10071C958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;
  __int128 v23;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  sub_10027205C((_QWORD *)(a2 + 8), *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  v7 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 128);
  v10 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 160) = v10;
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 128) = v9;
  v11 = *(_OWORD *)(a3 + 176);
  v12 = *(_OWORD *)(a3 + 192);
  v13 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(a3 + 220);
  *(_OWORD *)(a2 + 192) = v12;
  *(_OWORD *)(a2 + 208) = v13;
  *(_OWORD *)(a2 + 176) = v11;
  v14 = (_BYTE *)(a2 + 240);
  if (*(char *)(a3 + 263) < 0)
  {
    sub_100115CE4(v14, *(void **)(a3 + 240), *(_QWORD *)(a3 + 248));
  }
  else
  {
    v15 = *(_OWORD *)(a3 + 240);
    *(_QWORD *)(a2 + 256) = *(_QWORD *)(a3 + 256);
    *(_OWORD *)v14 = v15;
  }
  v16 = *(_OWORD *)(a3 + 264);
  v17 = *(_OWORD *)(a3 + 296);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(a2 + 296) = v17;
  *(_OWORD *)(a2 + 264) = v16;
  v18 = *(_OWORD *)(a3 + 312);
  v19 = *(_OWORD *)(a3 + 328);
  v20 = *(_OWORD *)(a3 + 360);
  *(_OWORD *)(a2 + 344) = *(_OWORD *)(a3 + 344);
  *(_OWORD *)(a2 + 360) = v20;
  *(_OWORD *)(a2 + 312) = v18;
  *(_OWORD *)(a2 + 328) = v19;
  result = *(__n128 *)(a3 + 376);
  v22 = *(_OWORD *)(a3 + 392);
  v23 = *(_OWORD *)(a3 + 408);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  *(_OWORD *)(a2 + 392) = v22;
  *(_OWORD *)(a2 + 408) = v23;
  *(__n128 *)(a2 + 376) = result;
  return result;
}

void sub_10071CA54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10071CA70(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10071CB2C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10071CAE4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x97B425ED097B43)
    sub_10025955C();
  return operator new(432 * a2);
}

uint64_t sub_10071CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v31[3];
  char v32;
  __int128 v33;
  __int128 v34;

  v7 = a7;
  *(_QWORD *)&v34 = a6;
  *((_QWORD *)&v34 + 1) = a7;
  v33 = v34;
  v31[0] = a1;
  v31[1] = &v33;
  v31[2] = &v34;
  if (a3 == a5)
  {
    v29 = a6;
  }
  else
  {
    v8 = a3 - 432;
    do
    {
      v9 = v7 - 432;
      *(_DWORD *)v9 = *(_DWORD *)v8;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 8);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v10 = *(_OWORD *)(v8 + 96);
      v12 = *(_OWORD *)(v8 + 48);
      v11 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v9 + 80) = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v9 + 96) = v10;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 64) = v11;
      v13 = *(_OWORD *)(v8 + 160);
      v15 = *(_OWORD *)(v8 + 112);
      v14 = *(_OWORD *)(v8 + 128);
      *(_OWORD *)(v9 + 144) = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v9 + 160) = v13;
      *(_OWORD *)(v9 + 112) = v15;
      *(_OWORD *)(v9 + 128) = v14;
      v17 = *(_OWORD *)(v8 + 192);
      v16 = *(_OWORD *)(v8 + 208);
      v18 = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v7 - 212) = *(_OWORD *)(v8 + 220);
      *(_OWORD *)(v7 - 240) = v17;
      *(_OWORD *)(v7 - 224) = v16;
      *(_OWORD *)(v7 - 256) = v18;
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v8 + 32);
      v19 = *(_OWORD *)(v8 + 240);
      *(_QWORD *)(v7 - 176) = *(_QWORD *)(v8 + 256);
      *(_OWORD *)(v7 - 192) = v19;
      *(_QWORD *)(v8 + 248) = 0;
      *(_QWORD *)(v8 + 256) = 0;
      *(_QWORD *)(v8 + 240) = 0;
      v20 = *(_OWORD *)(v8 + 344);
      v21 = *(_OWORD *)(v8 + 360);
      v22 = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 - 72) = v21;
      *(_OWORD *)(v7 - 88) = v20;
      *(_OWORD *)(v7 - 104) = v22;
      v23 = *(_OWORD *)(v8 + 264);
      v24 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(v8 + 296);
      *(_OWORD *)(v7 - 152) = v24;
      *(_OWORD *)(v7 - 168) = v23;
      v26 = *(_OWORD *)(v8 + 392);
      v25 = *(_OWORD *)(v8 + 408);
      v27 = *(_DWORD *)(v8 + 424);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v8 + 376);
      *(_DWORD *)(v7 - 8) = v27;
      *(_OWORD *)(v7 - 24) = v25;
      *(_OWORD *)(v7 - 40) = v26;
      v7 = *((_QWORD *)&v34 + 1) - 432;
      *((_QWORD *)&v34 + 1) -= 432;
      v28 = v8 == a5;
      v8 -= 432;
    }
    while (!v28);
    v29 = v34;
  }
  v32 = 1;
  sub_10071CC88((uint64_t)v31);
  return v29;
}

uint64_t sub_10071CC88(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10071CCBC((uint64_t *)a1);
  return a1;
}

void sub_10071CCBC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_10066DD70(v3, v1);
      v1 += 432;
    }
    while (v1 != v2);
  }
}

void **sub_10071CD0C(void **a1)
{
  sub_10071CD3C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10071CD3C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 432;
    sub_10066DD70(v4, i - 432);
  }
}

uint64_t sub_10071CD80(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_10071BEFC((_DWORD *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10071BEFC(a2, (_DWORD *)(v5 + 32)))
    return v2;
  return v5;
}

_QWORD *sub_10071CDF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_10071C750((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10071C750(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t *sub_10071CE70(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (uint64_t **)sub_100191690((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    sub_1000145B0(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t sub_10071CEF4(uint64_t **a1, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10071CD80((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_10071CF44(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_10071C7BC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_10071BDA0((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_10071CF9C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_10071CDF8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t *sub_10071CFEC(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;

  v3 = sub_10008A9F0(a1, a2);
  v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

__int128 *sub_10071D02C(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    sub_10071D08C(&v6, v3);
    v3 = (__int128 *)((char *)v3 + 184);
  }
  while (v3 != v4);
  return v4;
}

void ***sub_10071D08C(void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v20 = 0xD37A6F4DE9BD37A7 * ((v5 - (_BYTE *)*v4) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0x1642C8590B21642)
      sub_100259694();
    v22 = 0xD37A6F4DE9BD37A7 * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0xB21642C8590B21)
      v23 = 0x1642C8590B21642;
    else
      v23 = v21;
    if (v23)
      v24 = (char *)sub_10055ADA8(v7, v23);
    else
      v24 = 0;
    v25 = &v24[184 * v20];
    v26 = &v24[184 * v23];
    v27 = *a2;
    v28 = a2[1];
    v29 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v29;
    *(_OWORD *)v25 = v27;
    *((_OWORD *)v25 + 1) = v28;
    v30 = a2[4];
    v31 = a2[5];
    v32 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v32;
    *((_OWORD *)v25 + 4) = v30;
    *((_OWORD *)v25 + 5) = v31;
    v33 = a2[8];
    v34 = a2[9];
    v35 = a2[10];
    *((_QWORD *)v25 + 22) = *((_QWORD *)a2 + 22);
    *((_OWORD *)v25 + 9) = v34;
    *((_OWORD *)v25 + 10) = v35;
    *((_OWORD *)v25 + 8) = v33;
    v19 = v25 + 184;
    v37 = (char *)*v4;
    v36 = (char *)v4[1];
    if (v36 != *v4)
    {
      do
      {
        v38 = *(_OWORD *)(v36 - 184);
        v39 = *(_OWORD *)(v36 - 168);
        v40 = *(_OWORD *)(v36 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v36 - 136);
        *(_OWORD *)(v25 - 152) = v40;
        *(_OWORD *)(v25 - 168) = v39;
        *(_OWORD *)(v25 - 184) = v38;
        v41 = *(_OWORD *)(v36 - 120);
        v42 = *(_OWORD *)(v36 - 104);
        v43 = *(_OWORD *)(v36 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v36 - 72);
        *(_OWORD *)(v25 - 88) = v43;
        *(_OWORD *)(v25 - 104) = v42;
        *(_OWORD *)(v25 - 120) = v41;
        v44 = *(_OWORD *)(v36 - 56);
        v45 = *(_OWORD *)(v36 - 40);
        v46 = *(_OWORD *)(v36 - 24);
        *((_QWORD *)v25 - 1) = *((_QWORD *)v36 - 1);
        *(_OWORD *)(v25 - 24) = v46;
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        v25 -= 184;
        v36 -= 184;
      }
      while (v36 != v37);
      v36 = (char *)*v4;
    }
    *v4 = v25;
    v4[1] = v19;
    v4[2] = v26;
    if (v36)
      operator delete(v36);
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v12;
    *(_OWORD *)v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    v13 = a2[4];
    v14 = a2[5];
    v15 = a2[7];
    *((_OWORD *)v5 + 6) = a2[6];
    *((_OWORD *)v5 + 7) = v15;
    *((_OWORD *)v5 + 4) = v13;
    *((_OWORD *)v5 + 5) = v14;
    v16 = a2[8];
    v17 = a2[9];
    v18 = a2[10];
    *((_QWORD *)v5 + 22) = *((_QWORD *)a2 + 22);
    *((_OWORD *)v5 + 9) = v17;
    *((_OWORD *)v5 + 10) = v18;
    *((_OWORD *)v5 + 8) = v16;
    v19 = v5 + 184;
  }
  v4[1] = v19;
  return a1;
}

uint64_t sub_10071D274(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = sub_100191618((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  operator delete(v4);
  return 1;
}

void sub_10071D2C4()
{
  operator new();
}

void sub_10071D354(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_10071D874(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10071D728(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10214FF30);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10214FF30);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10071D728(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_10071D874(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_10071D804(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102150100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10071D818(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102150100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10071D854(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10071D874(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_10071D8EC(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_10071DC74(a1);
  }
}

void sub_10071D8EC(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_10071E020((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBEB54 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102150140);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLNetworkLocationProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBEB54 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102150140);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_10071DC74(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBEB54 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BBEB54 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102150140);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLNetworkLocationProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10071E020(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B5A0))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)16)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_101906E9C();
  sub_10071E094(v3);
}

void sub_10071E094(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10071E0C0(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10071CFEC((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

_QWORD *sub_10071E124(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x38uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_BYTE *)v11 + 20) = 0;
  *((_BYTE *)v11 + 32) = 0;
  v11[3] = 0;
  *((_DWORD *)v11 + 9) = -2;
  *((_WORD *)v11 + 20) = 0;
  *((_BYTE *)v11 + 52) = 0;
  *(_QWORD *)((char *)v11 + 44) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10071E34C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10071E360(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_10008A9F0((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_10071E3D8()
{
  operator new();
}

void sub_10071E46C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_10071E4AC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  v3 = v2;
  v4 = v2;
  sub_1006E1438(a2);
}

uint64_t sub_10071E830(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10071E840(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10071E860()
{
  operator new();
}

void sub_10071E8F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_10071E934(uint64_t a1, uint64_t a2)
{
  _BYTE v3[8];

  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  sub_1001C4198((uint64_t)v3);
  sub_1009A15DC(a2);
}

void sub_10071ED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100664030((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10071ED58(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10071ED68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10071ED88()
{
  operator new();
}

void sub_10071EE1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_10071EE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;

  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v5 = -1;
  v3 = -1;
  v4 = -1;
  v2 = -1;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v9 = -1;
  v10 = -1;
  v11 = xmmword_101BB6FC0;
  sub_100D9A4FC(a2);
}

uint64_t sub_10071F200(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10071F210(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10071F230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v2 = -1;
  v3 = -1;
  v4 = -1;
  v5 = -1;
  v6 = -1;
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v10 = -1;
  v11 = -1;
  v12 = 0xFFFFFFFF00000000;
  v13 = -1;
  sub_1008404F8(a2);
}

uint64_t sub_10071F5EC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102150198;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10071F64C()
{
  operator new();
}

uint64_t sub_10071F6DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_10071F6FC()
{
  qword_102310B98 = 0;
  unk_102310BA0 = 0;
  qword_102310BA8 = 0;
  __cxa_atexit((void (*)(void *))sub_1006FA290, &qword_102310B98, (void *)&_mh_execute_header);
  qword_102310BB8 = 0;
  unk_102310BC0 = 0;
  qword_102310BB0 = 0;
  __cxa_atexit((void (*)(void *))sub_1006FA2C0, &qword_102310BB0, (void *)&_mh_execute_header);
  qword_102310BD0 = 0;
  unk_102310BD8 = 0;
  qword_102310BC8 = 0;
  __cxa_atexit((void (*)(void *))sub_1006FA2F4, &qword_102310BC8, (void *)&_mh_execute_header);
  qword_102310BE8 = 0;
  unk_102310BF0 = 0;
  qword_102310BE0 = 0;
  __cxa_atexit((void (*)(void *))sub_1006FA324, &qword_102310BE0, (void *)&_mh_execute_header);
  qword_102310C00 = 0;
  unk_102310C08 = 0;
  qword_102310BF8 = 0;
  __cxa_atexit((void (*)(void *))sub_1006FA354, &qword_102310BF8, (void *)&_mh_execute_header);
  qword_102310C18 = 0;
  unk_102310C20 = 0;
  qword_102310C10 = 0;
  return __cxa_atexit((void (*)(void *))sub_1006FA384, &qword_102310C10, (void *)&_mh_execute_header);
}

uint64_t sub_100720438(uint64_t a1)
{
  id v2;
  void **v3;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  std::__shared_weak_count *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *__dst[2];
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[128];

  *(_QWORD *)a1 = off_1021501C0;
  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  v3 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_100115CE4(__dst, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v3;
    v16 = *(_QWORD *)(a1 + 88);
  }
  v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    __p = *(_OWORD *)v4;
    v18 = *(_QWORD *)(a1 + 112);
  }
  v19 = *(_QWORD *)(a1 + 120);
  objc_msgSend(v2, "checkWeakPersistentClientWithIdentifier:", sub_1007206A0((__int128 *)__dst));
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = *(void **)(a1 + 240);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i)), "invalidate");
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v20, 16);
    }
    while (v6);
  }

  sub_100720930(a1 + 200);
  sub_100067AC4(a1 + 160);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v4);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v3);
  sub_100261F44(a1 + 48);
  sub_100008848(a1 + 24, *(_QWORD **)(a1 + 32));
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_100720664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a22 < 0)
      operator delete(__p);
    sub_10024F88C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007206A0(__int128 *a1)
{
  id v2;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;
  __int128 __p;
  uint64_t v8;
  uint64_t v9;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1007209E0;
  v4[3] = &unk_102150260;
  if (*((char *)a1 + 23) < 0)
  {
    sub_100115CE4(&v5, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v5 = *a1;
    v6 = *((_QWORD *)a1 + 2);
  }
  if (*((char *)a1 + 47) < 0)
  {
    sub_100115CE4(&__p, *((void **)a1 + 3), *((_QWORD *)a1 + 4));
  }
  else
  {
    __p = *(__int128 *)((char *)a1 + 24);
    v8 = *((_QWORD *)a1 + 5);
  }
  v9 = *((_QWORD *)a1 + 6);
  v2 = objc_msgSend(v4, "copy");
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)v5);
  return v2;
}

void sub_10072078C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007207C0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (*(_BYTE *)(result + 248))
  {
    v1 = result;
    *(_BYTE *)(result + 248) = 0;
    sub_10001BB9C((_QWORD *)(result + 160));
    sub_100008848(v1 + 24, *(_QWORD **)(v1 + 32));
    *(_QWORD *)(v1 + 24) = v1 + 32;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    v2 = *(_QWORD *)(v1 + 48);
    sub_1007208BC(&v6, (_QWORD *)(v1 + 8));
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  }
  return result;
}

void sub_10072087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100720890(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

_QWORD *sub_1007208BC(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_1007208FC();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void sub_1007208FC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_100720930(uint64_t a1)
{
  void *v2;

  sub_100720968(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100720968(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1007209A4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1007209A4(uint64_t a1)
{
  sub_100261F44(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_BYTE *sub_1007209E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;

  if (*(char *)(a1 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 48);
  }
  result = (_BYTE *)(a2 + 24);
  if (*(char *)(a1 + 79) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 72);
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 80);
  return result;
}

void sub_100720A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100720A7C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  result = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

void sub_100720B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100720B24(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t *sub_100720B68(uint64_t **a1, int *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_100720BF4(uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v3 = sub_100720C6C((uint64_t)a1, a2);
  if (v3 == v4)
    return 0;
  v5 = v3;
  v6 = v4;
  v7 = 0;
  do
  {
    v8 = sub_10008A9F0(a1, v5);
    operator delete(v5);
    ++v7;
    v5 = v8;
  }
  while (v8 != v6);
  return v7;
}

uint64_t *sub_100720C6C(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *result;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 7);
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (uint64_t *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = *((_DWORD *)v7 + 7);
      v9 = v8 < v4;
      if (v8 >= v4)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (!v9)
        result = v7;
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 28))
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = (uint64_t *)v11;
      v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t sub_100720D04()
{
  uint64_t result;

  result = sub_1000A42B0();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_100720D6C()
{
  operator delete();
}

uint64_t sub_100720D90()
{
  if (qword_102303B50 != -1)
    dispatch_once(&qword_102303B50, &stru_102150290);
  return qword_102310C30;
}

void sub_100720DD8(_QWORD *a1)
{
  sub_101221A60(a1);
  operator delete();
}

double sub_100720DFC(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102150318);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryProximity] Unrecognized interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryProximity] Unrecognized interval notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryProximity::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102150318);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryProximity] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryProximity] Setting update interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryProximity::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006B4E0(*(_QWORD *)(a1 + 32), *a3);
    v5 = *a3;
    if (*a3 > 0.0)
      *(_BYTE *)(a1 + 30) = 0;
  }
  return v5;
}

double sub_100721130(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v10;
  double v11;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  uint8_t buf[4];
  double v19;

  if (a2)
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102150318);
    v4 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v19) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryProximity] Unrecognized batch notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v16 = 67240192;
      LODWORD(v17) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryProximity] Unrecognized batch notification %{public}d", &v16, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryProximity::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    sub_101221BDC(a1);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102150318);
    v10 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349056;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryProximity] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v13 = *(_QWORD *)a3;
      v16 = 134349056;
      v17 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 1, "[AccessoryProximity] Setting batch interval to %{public}f", &v16, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryProximity::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_10006BC9C(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_100721458(uint64_t a1, uint64_t a2)
{
  __IOHIDServiceClient *v3;
  uint64_t v4;
  char *v5;
  __IOHIDServiceClient *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD v13[3];
  uint8_t buf[16];
  _BYTE v15[21];
  int v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  _BYTE v21[128];

  sub_10012AC18(a1, 0, a2, 32);
  if (!*(_BYTE *)(a1 + 30))
  {
    *(_BYTE *)(a1 + 30) = 1;
    v16 = 0;
    sub_1015A2E04(&v17, "N/A");
    sub_1015A2E04(&v19, "N/A");
    memset(v21, 0, 122);
    if (sub_101221D6C(a1, &v16))
    {
      *(_OWORD *)buf = 0u;
      memset(v15, 0, sizeof(v15));
      v3 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
      if (sub_1013B5818(buf, v3, CFSTR("OSCL"), (id)0x25))
      {
        v4 = 0;
        v5 = &v21[4];
        do
        {
          snprintf(v5, 0x25uLL, "%02x", buf[v4++]);
          v5 += 2;
        }
        while (v4 != 37);
      }
      v12 = 0;
      v13[0] = 0;
      *(_QWORD *)((char *)v13 + 5) = 0;
      v6 = (__IOHIDServiceClient *)sub_100A0A3A0(*(_QWORD *)(a1 + 32));
      if (sub_1013B5818(&v12, v6, CFSTR("PDTC"), (id)0x15))
      {
        v7 = 0;
        v8 = &v21[79];
        do
        {
          snprintf(v8, 0x15uLL, "%02x", *((unsigned __int8 *)&v13[-1] + v7++));
          v8 += 2;
        }
        while (v7 != 21);
      }
      sub_10012AC18(a1, 1, (uint64_t)&v16, 184);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v9 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[AccessoryProximity] Service not found!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102150318);
        LOWORD(v12) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryProximity] Service not found!", &v12, 2);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryProximity::onProximityData(const Sample &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    if (v20 < 0)
      operator delete(v19);
    if (v18 < 0)
      operator delete(v17);
  }
}

void sub_100721790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1007217D0(v1 - 256);
  _Unwind_Resume(a1);
}

uint64_t sub_1007217D0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100721810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *DataValue;
  uint64_t IntegerValue;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t TimeStamp;
  double v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  const char *v41;
  char *v42;
  int v43;
  _BYTE v44[10];
  uint64_t v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  _BYTE buf[22];
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  double v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;

  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue(a4, 65540);
  IntegerValue = IOHIDEventGetIntegerValue(a4, 65539);
  if (DataValue)
    v8 = IntegerValue == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = IntegerValue;
    v10 = IOHIDEventGetIntegerValue(a4, 65537);
    v11 = IOHIDEventGetIntegerValue(a4, 0x10000);
    if (v11 == 65300 && v10 == 3)
    {
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      v13 = sub_100127828(TimeStamp);
      v14 = sub_1013B4A0C();
      if (v9 == 10)
      {
        v15 = *((unsigned __int16 *)DataValue + 4);
      }
      else
      {
        if (v9 != 8)
          sub_101907014();
        v15 = 0;
      }
      v19 = *DataValue;
      v20 = DataValue[1];
      v21 = *((__int16 *)DataValue + 2);
      v22 = *((__int16 *)DataValue + 1);
      v23 = *((__int16 *)DataValue + 3);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v24 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEBUG))
      {
        v25 = *DataValue;
        v26 = DataValue[1];
        v27 = DataValue[2];
        v28 = DataValue[3];
        v29 = DataValue[4];
        v30 = DataValue[5];
        v31 = DataValue[6];
        v32 = DataValue[7];
        *(_DWORD *)buf = 67244032;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v20;
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v21;
        *(_WORD *)&buf[20] = 1026;
        v72 = v22;
        v73 = 1026;
        v74 = v23;
        v75 = 1026;
        v76 = v15;
        v77 = 2050;
        v78 = v14;
        v79 = 2050;
        v80 = v13;
        v81 = 1026;
        v82 = v25;
        v83 = 1026;
        v84 = v26;
        v85 = 1026;
        v86 = v27;
        v87 = 1026;
        v88 = v28;
        v89 = 1026;
        v90 = v29;
        v91 = 1026;
        v92 = v30;
        v93 = 1026;
        v94 = v31;
        v95 = 1026;
        v96 = v32;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[AccessoryProximity] location_id,%{public}d,status,%{public}d,base,%{public}d,peak,%{public}d,temp,%{public}d,seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,raw %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x", buf, 0x6Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102150318);
        v33 = *DataValue;
        v34 = DataValue[1];
        v35 = DataValue[2];
        v36 = DataValue[3];
        v37 = DataValue[4];
        v38 = DataValue[5];
        v39 = DataValue[6];
        v40 = DataValue[7];
        v43 = 67244032;
        *(_DWORD *)v44 = v19;
        *(_WORD *)&v44[4] = 1026;
        *(_DWORD *)&v44[6] = v20;
        LOWORD(v45) = 1026;
        *(_DWORD *)((char *)&v45 + 2) = v21;
        HIWORD(v45) = 1026;
        v46 = v22;
        v47 = 1026;
        v48 = v23;
        v49 = 1026;
        v50 = v15;
        v51 = 2050;
        v52 = v14;
        v53 = 2050;
        v54 = v13;
        v55 = 1026;
        v56 = v33;
        v57 = 1026;
        v58 = v34;
        v59 = 1026;
        v60 = v35;
        v61 = 1026;
        v62 = v36;
        v63 = 1026;
        v64 = v37;
        v65 = 1026;
        v66 = v38;
        v67 = 1026;
        v68 = v39;
        v69 = 1026;
        v70 = v40;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 2, "[AccessoryProximity] location_id,%{public}d,status,%{public}d,base,%{public}d,peak,%{public}d,temp,%{public}d,seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,raw %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x %{public}02x", &v43, 106);
        v42 = (char *)v41;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLAccessoryProximity::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      *(double *)buf = v13;
      *(_QWORD *)&buf[8] = v14;
      buf[16] = v19;
      buf[17] = v20;
      *(_WORD *)&buf[20] = v21;
      *(_WORD *)&buf[18] = v22;
      LOWORD(v72) = v23;
      HIWORD(v72) = v15;
      sub_100721458(a1, (uint64_t)buf);
    }
    else
    {
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
      v16 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v10;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "[AccessoryProximity] Invalid usage page/usage: {%{public}ld,%{public}ld}", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102150318);
        v43 = 134349312;
        *(_QWORD *)v44 = v11;
        *(_WORD *)&v44[8] = 2050;
        v45 = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 17, "[AccessoryProximity] Invalid usage page/usage: {%{public}ld,%{public}ld}", &v43, 22);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLAccessoryProximity::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
  }
}

void sub_100721D80(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_100721DAC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  int64x2_t v10;
  float64x2_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  __int128 v75;
  _OWORD *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  double v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  char *v95;
  void *__p;
  char *v97;
  unint64_t v98;
  int v99;
  double v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  _BYTE buf[32];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

  v10 = vdupq_n_s64(0xFFF0000000000000);
  *((int64x2_t *)a4 + 1) = v10;
  v11 = (float64x2_t *)(a4 + 2);
  *a4 = 0;
  a4[1] = 0;
  *((int64x2_t *)a4 + 2) = v10;
  *((_OWORD *)a4 + 3) = 0u;
  v12 = a4 + 6;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_DWORD *)a4 + 24) = 0;
  *(int64x2_t *)(a4 + 13) = v10;
  v13 = a4 + 13;
  *(int64x2_t *)(a4 + 15) = v10;
  *(int64x2_t *)(a4 + 17) = v10;
  *(int64x2_t *)(a4 + 19) = v10;
  *(int64x2_t *)(a4 + 21) = v10;
  *(int64x2_t *)(a4 + 23) = v10;
  *(int64x2_t *)(a4 + 25) = v10;
  *(int64x2_t *)(a4 + 27) = v10;
  *(int64x2_t *)(a4 + 29) = v10;
  a4[31] = 0xFFF0000000000000;
  *((_DWORD *)a4 + 76) = 0;
  *((_OWORD *)a4 + 17) = 0u;
  *((_OWORD *)a4 + 18) = 0u;
  *((_OWORD *)a4 + 16) = 0u;
  a4[39] = 0xFFF0000000000000;
  *((int64x2_t *)a4 + 20) = v10;
  *((int64x2_t *)a4 + 21) = v10;
  *((int64x2_t *)a4 + 22) = v10;
  *((int64x2_t *)a4 + 23) = v10;
  a4[48] = 0xFFF0000000000000;
  v14 = a4 + 49;
  *(_OWORD *)(a4 + 49) = 0u;
  *(_OWORD *)(a4 + 51) = 0u;
  *(_OWORD *)(a4 + 53) = 0u;
  *((_DWORD *)a4 + 110) = 0;
  *((int64x2_t *)a4 + 28) = v10;
  *((int64x2_t *)a4 + 29) = v10;
  *((_OWORD *)a4 + 30) = 0u;
  *((_OWORD *)a4 + 31) = 0u;
  *((_OWORD *)a4 + 32) = 0u;
  *((_DWORD *)a4 + 132) = 0;
  a4[67] = 0xFFF0000000000000;
  *((int64x2_t *)a4 + 34) = v10;
  *((int64x2_t *)a4 + 35) = v10;
  *((int64x2_t *)a4 + 36) = v10;
  *((int64x2_t *)a4 + 37) = v10;
  *((int64x2_t *)a4 + 38) = v10;
  *((int64x2_t *)a4 + 39) = v10;
  *((int64x2_t *)a4 + 40) = v10;
  *((int64x2_t *)a4 + 41) = v10;
  *((int64x2_t *)a4 + 42) = v10;
  *((int64x2_t *)a4 + 43) = v10;
  *((int64x2_t *)a4 + 44) = v10;
  *((int64x2_t *)a4 + 45) = v10;
  *((int64x2_t *)a4 + 46) = v10;
  *((int64x2_t *)a4 + 47) = v10;
  a4[96] = 0xFFF0000000000000;
  *((_BYTE *)a4 + 776) = 0;
  __p = 0;
  v97 = 0;
  v15 = a1 + 1;
  v98 = 0;
  sub_100E3D3EC(a2, a3, (uint64_t)buf, a5);
  v16 = v113;
  *((_OWORD *)v13 + 6) = v112;
  *((_OWORD *)v13 + 7) = v16;
  *((_OWORD *)v13 + 8) = v114;
  v13[18] = v115;
  v17 = v109;
  *((_OWORD *)v13 + 2) = v108;
  *((_OWORD *)v13 + 3) = v17;
  v18 = v111;
  *((_OWORD *)v13 + 4) = v110;
  *((_OWORD *)v13 + 5) = v18;
  v19 = *(_OWORD *)&buf[16];
  *(_OWORD *)v13 = *(_OWORD *)buf;
  *((_OWORD *)v13 + 1) = v19;
  sub_100E3CBF8(v15, (float64x2_t *)v13, a2, a3, (uint64_t)buf, a5);
  v20 = *(_OWORD *)&buf[16];
  *(_OWORD *)v12 = *(_OWORD *)buf;
  *((_OWORD *)v12 + 1) = v20;
  *((_OWORD *)v12 + 2) = v108;
  *((_DWORD *)v12 + 12) = v109;
  if (!*((_DWORD *)a4 + 24))
  {
    v21 = a4 + 10;
    v22 = v97;
    if ((unint64_t)v97 >= v98)
    {
      v24 = (v97 - (_BYTE *)__p) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        goto LABEL_89;
      v26 = v98 - (_QWORD)__p;
      if ((uint64_t)(v98 - (_QWORD)__p) >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)sub_10028E224((uint64_t)&v98, v27);
      else
        v28 = 0;
      v29 = &v28[16 * v24];
      v30 = &v28[16 * v27];
      *(_OWORD *)v29 = *v21;
      v23 = v29 + 16;
      v32 = (char *)__p;
      v31 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v29 - 1) = *((_OWORD *)v31 - 1);
          v29 -= 16;
          v31 -= 16;
        }
        while (v31 != v32);
        v31 = (char *)__p;
      }
      __p = v29;
      v97 = v23;
      v98 = (unint64_t)v30;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_OWORD *)v97 = *v21;
      v23 = v22 + 16;
    }
    v97 = v23;
  }
  sub_100E702B4(a2, (uint64_t)buf, a5);
  v33 = v109;
  *(_OWORD *)(a4 + 43) = v108;
  *(_OWORD *)(a4 + 45) = v33;
  *(_OWORD *)(a4 + 47) = v110;
  v34 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a4 + 39) = *(_OWORD *)buf;
  *(_OWORD *)(a4 + 41) = v34;
  sub_100E6FB8C(a1 + 2, (float64x2_t *)(a4 + 39), a2, a3, (uint64_t)buf, a5);
  v35 = *(_OWORD *)&buf[16];
  *((_OWORD *)a4 + 16) = *(_OWORD *)buf;
  *((_OWORD *)a4 + 17) = v35;
  *((_OWORD *)a4 + 18) = v108;
  *((_DWORD *)a4 + 76) = v109;
  if (*((_DWORD *)a4 + 76))
    goto LABEL_37;
  v36 = a4 + 36;
  v37 = v97;
  if ((unint64_t)v97 >= v98)
  {
    v39 = (v97 - (_BYTE *)__p) >> 4;
    v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 60))
    {
      v41 = v98 - (_QWORD)__p;
      if ((uint64_t)(v98 - (_QWORD)__p) >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
        v43 = (char *)sub_10028E224((uint64_t)&v98, v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_OWORD *)v44 = *v36;
      v38 = v44 + 16;
      v47 = (char *)__p;
      v46 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = (char *)__p;
      }
      __p = v44;
      v97 = v38;
      v98 = (unint64_t)v45;
      if (v46)
        operator delete(v46);
      goto LABEL_36;
    }
LABEL_89:
    sub_100259694();
  }
  *(_OWORD *)v97 = *v36;
  v38 = v37 + 16;
LABEL_36:
  v97 = v38;
LABEL_37:
  *((double *)a4 + 2) = sub_10089A2D0(a5, a1, a2);
  a4[3] = v48;
  a4[4] = v49;
  a4[5] = v50;
  sub_100899F7C(a1, v11);
  *((double *)a4 + 56) = sub_100E667A4(a5, a1 + 3, a2, a3);
  a4[57] = v51;
  a4[58] = v52;
  a4[59] = v53;
  sub_100E66214(a1 + 3, (float64x2_t *)a4 + 28, a2, a3, (uint64_t)buf, a5);
  v54 = *(_OWORD *)&buf[16];
  *(_OWORD *)v14 = *(_OWORD *)buf;
  *((_OWORD *)v14 + 1) = v54;
  *((_OWORD *)v14 + 2) = v108;
  *((_DWORD *)v14 + 12) = v109;
  if (!*((_DWORD *)a4 + 110))
  {
    v55 = a4 + 53;
    v56 = v97;
    if ((unint64_t)v97 >= v98)
    {
      v58 = (v97 - (_BYTE *)__p) >> 4;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 60)
        goto LABEL_90;
      v60 = v98 - (_QWORD)__p;
      if ((uint64_t)(v98 - (_QWORD)__p) >> 3 > v59)
        v59 = v60 >> 3;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
        v62 = (char *)sub_10028E224((uint64_t)&v98, v61);
      else
        v62 = 0;
      v63 = &v62[16 * v58];
      v64 = &v62[16 * v61];
      *(_OWORD *)v63 = *v55;
      v57 = v63 + 16;
      v66 = (char *)__p;
      v65 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v63 - 1) = *((_OWORD *)v65 - 1);
          v63 -= 16;
          v65 -= 16;
        }
        while (v65 != v66);
        v65 = (char *)__p;
      }
      __p = v63;
      v97 = v57;
      v98 = (unint64_t)v64;
      if (v65)
        operator delete(v65);
    }
    else
    {
      *(_OWORD *)v97 = *v55;
      v57 = v56 + 16;
    }
    v97 = v57;
  }
  sub_1007258BC(a2, (uint64_t)buf, a5);
  v67 = v119;
  *(_OWORD *)(a4 + 91) = v118;
  *(_OWORD *)(a4 + 93) = v67;
  *(_OWORD *)(a4 + 95) = v120;
  v68 = v115;
  *(_OWORD *)(a4 + 83) = v114;
  *(_OWORD *)(a4 + 85) = v68;
  v69 = v117;
  *(_OWORD *)(a4 + 87) = v116;
  *(_OWORD *)(a4 + 89) = v69;
  v70 = v111;
  *(_OWORD *)(a4 + 75) = v110;
  *(_OWORD *)(a4 + 77) = v70;
  v71 = v113;
  *(_OWORD *)(a4 + 79) = v112;
  *(_OWORD *)(a4 + 81) = v71;
  v72 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a4 + 67) = *(_OWORD *)buf;
  *(_OWORD *)(a4 + 69) = v72;
  v73 = v109;
  *(_OWORD *)(a4 + 71) = v108;
  *(_OWORD *)(a4 + 73) = v73;
  sub_100724E54(a1 + 4, (float64x2_t *)(a4 + 67), a2, a3, (uint64_t)buf, a5);
  v75 = *(_OWORD *)&buf[16];
  *((_OWORD *)a4 + 30) = *(_OWORD *)buf;
  *((_OWORD *)a4 + 31) = v75;
  *((_OWORD *)a4 + 32) = v108;
  *((_DWORD *)a4 + 132) = v109;
  if (!*((_DWORD *)a4 + 132))
  {
    v76 = a4 + 64;
    v77 = v97;
    if ((unint64_t)v97 < v98)
    {
      *(_OWORD *)v97 = *v76;
      v78 = v77 + 16;
LABEL_72:
      v97 = v78;
      goto LABEL_73;
    }
    v79 = (v97 - (_BYTE *)__p) >> 4;
    v80 = v79 + 1;
    if (!((unint64_t)(v79 + 1) >> 60))
    {
      v81 = v98 - (_QWORD)__p;
      if ((uint64_t)(v98 - (_QWORD)__p) >> 3 > v80)
        v80 = v81 >> 3;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
        v82 = 0xFFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
        v83 = (char *)sub_10028E224((uint64_t)&v98, v82);
      else
        v83 = 0;
      v84 = &v83[16 * v79];
      v85 = &v83[16 * v82];
      *(_OWORD *)v84 = *v76;
      v78 = v84 + 16;
      v86 = (char *)__p;
      v74 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v84 - 1) = *((_OWORD *)v74 - 1);
          v84 -= 16;
          v74 -= 16;
        }
        while (v74 != v86);
        v74 = (char *)__p;
      }
      __p = v84;
      v97 = v78;
      v98 = (unint64_t)v85;
      if (v74)
        operator delete(v74);
      goto LABEL_72;
    }
LABEL_90:
    sub_100259694();
  }
LABEL_73:
  if (!*((_DWORD *)a4 + 24) && !*((_DWORD *)a4 + 110) && !*((_DWORD *)a4 + 76))
  {
    v87 = sub_100722660((uint64_t)v74, (double **)&__p);
    *(double *)a4 = v87;
    sub_1009FFB98(a3, v87);
    a4[1] = v88;
    *((_BYTE *)a4 + 776) = 1;
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102150358);
  v89 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v90 = *a4;
    v91 = a4[1];
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v90;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v91;
    LOWORD(v108) = 2050;
    *(_QWORD *)((char *)&v108 + 2) = (v97 - (_BYTE *)__p) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "CLMobility::ModelFusion::Result,classificationEnd,%{public}.2f,rawSteadiness,%{public}.2f,walkingSteadiness,%{public}.2f,successfulModelCount,%{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150358);
    v92 = *a4;
    v93 = a4[1];
    v99 = 134349824;
    v100 = a5;
    v101 = 2050;
    v102 = v92;
    v103 = 2050;
    v104 = v93;
    v105 = 2050;
    v106 = (v97 - (_BYTE *)__p) >> 4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::ModelFusion::Result,classificationEnd,%{public}.2f,rawSteadiness,%{public}.2f,walkingSteadiness,%{public}.2f,successfulModelCount,%{public}lu", &v99, 42);
    v95 = (char *)v94;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModelFusion::Result CLMobility::SteadinessModelFusion::runSteadinessModel(CFAbsoluteTime, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v94);
    if (v95 != buf)
      free(v95);
  }
  if (__p)
  {
    v97 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100722618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100722660(uint64_t a1, double **a2)
{
  NSObject *v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double v9;
  long double v10;
  double v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  uint64_t v35;

  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102150358);
  v3 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    v4 = ((char *)a2[1] - (char *)*a2) >> 4;
    *(_DWORD *)buf = 134349056;
    v33 = *(double *)&v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fuseLikelihoods using mean log odds fusion rule, modelLikelihoods count,%{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150358);
    v22 = ((char *)a2[1] - (char *)*a2) >> 4;
    v28 = 134349056;
    v29 = *(double *)&v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "fuseLikelihoods using mean log odds fusion rule, modelLikelihoods count,%{public}lu", &v28, 12);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "double CLMobility::SteadinessModelFusion::fuseLikelihoods(const std::vector<FusionLikelihoods> &) const", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  v6 = *a2;
  v5 = a2[1];
  if (v6 == v5)
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150358);
    v20 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "No component models to fuse likelihoods", buf, 2u);
    }
    v11 = -1.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102150358);
      LOWORD(v28) = 0;
      LODWORD(v27) = 2;
      v25 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "No component models to fuse likelihoods", &v28, v27);
      v19 = v26;
      sub_100512490("Generic", 1, 0, 2, "double CLMobility::SteadinessModelFusion::fuseLikelihoods(const std::vector<FusionLikelihoods> &) const", "%s\n", v25);
      goto LABEL_33;
    }
  }
  else
  {
    v7 = 0.0;
    v8 = v6;
    while (*v8 != 0.0)
    {
      v9 = v8[1];
      if (v9 == 0.0)
        break;
      v7 = v7 + log(*v8 / v9);
      v8 += 2;
      if (v8 == v5)
      {
        v10 = exp(v7 / (double)(unint64_t)(((char *)v5 - (char *)v6) >> 4));
        return v10 / (v10 + 1.0);
      }
    }
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150358);
    v12 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_FAULT))
    {
      v13 = *v8;
      v14 = *((_QWORD *)v8 + 1);
      *(_DWORD *)buf = 134349312;
      v33 = v13;
      v34 = 2050;
      v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Unexpected model likelihood OK,%{public}.2f and/or NotOK,%{public}.2f", buf, 0x16u);
    }
    v11 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102150358);
      v15 = *v8;
      v16 = *((_QWORD *)v8 + 1);
      v28 = 134349312;
      v29 = v15;
      v30 = 2050;
      v31 = v16;
      LODWORD(v27) = 22;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 17, "Unexpected model likelihood OK,%{public}.2f and/or NotOK,%{public}.2f", &v28, v27);
      v19 = v18;
      sub_100512490("Generic", 1, 0, 0, "double CLMobility::SteadinessModelFusion::fuseLikelihoods(const std::vector<FusionLikelihoods> &) const", "%s\n", v17);
LABEL_33:
      if (v19 != buf)
        free(v19);
    }
  }
  return v11;
}

void sub_100722B10(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100722B3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  _BYTE v6[24];
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;

  sub_100270E34((uint64_t)v6, a2);
  *(_QWORD *)a1 = &off_1021503E0;
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)a1 = off_102150388;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0x404E000000000000;
  *(_BYTE *)(a1 + 136) = 0;
  v8 = 0uLL;
  v9 = 0;
  sub_1007249E4((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  v9 = 0;
  v8 = 0uLL;
  v5 = (void **)&v8;
  sub_100724968(&v5);
  operator new();
}

void sub_100723044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100724968((void ***)va);
  sub_10034111C(v2);
  _Unwind_Resume(a1);
}

void sub_1007230FC()
{
  JUMPOUT(0x1007230F4);
}

void sub_100723108(_QWORD *a1, uint64_t a2, double a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  uint8_t buf[4];
  double v20;

  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102150400);
  v6 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteIntensityEstimator::feedNatalie called, rawMets, %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v17 = 134217984;
    v18 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "CLExerciseMinuteIntensityEstimator::feedNatalie called, rawMets, %f", COERCE_DOUBLE(&v17));
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLExerciseMinuteIntensityEstimator::feedNatalie(double, const CLNatalieModelInput &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_10072332C(a1, a2);
  v7 = (uint64_t *)a1[7];
  v8 = (uint64_t *)a1[8];
  if (v7 != v8)
  {
    v9 = 0.0;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 24))(*v7);
      v10 = *v7++;
      v11 = *(double *)(v10 + 40);
      if (v11 > v9)
        v9 = v11;
    }
    while (v7 != v8);
    v13 = (uint64_t *)a1[7];
    v12 = (uint64_t *)a1[8];
    while (v13 != v12)
    {
      v14 = *v13++;
      (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 16))(v14, v9);
    }
  }
}

void sub_10072332C(_QWORD *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  unint64_t v11;
  double v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  int v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;

  v34 = 1065353216;
  v33 = 0;
  v32 = 0;
  v4 = *(double *)(a2 + 112);
  *(double *)&v30 = v4 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
  *((double *)&v30 + 1) = v4;
  sub_100723D9C((uint64_t)a1, a2, (float *)&v34, &v33);
  v31 = v5;
  LODWORD(v32) = v34;
  BYTE4(v32) = *(_BYTE *)(a2 + 352);
  BYTE5(v32) = v33;
  if (v4 < v4 - *(double *)&v30)
  {
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v6 = qword_10229FF08;
    if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v40 = v4;
      v41 = 2048;
      v42 = v4 - *(double *)&v30;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Invalid timestamps, natalieModelInput computeTime is less than the duration, computeTime, %.3f, duration, %.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF00 != -1)
        dispatch_once(&qword_10229FF00, &stru_102150400);
      v35 = 134218240;
      v36 = v4;
      v37 = 2048;
      v38 = v4 - *(double *)&v30;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "Invalid timestamps, natalieModelInput computeTime is less than the duration, computeTime, %.3f, duration, %.3f", COERCE_DOUBLE(&v35), v29);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteIntensityEstimator::updateSampleBuffer(double, const CLNatalieModelInput &)", "%s\n", v7);
LABEL_31:
      if (v8 != buf)
        free(v8);
      return;
    }
    return;
  }
  if (*(double *)&v30 < v4)
  {
    v9 = a1[6];
    if (!v9
      || *(double *)&v30 >= *(double *)(*(_QWORD *)(a1[2]
                                                  + (((unint64_t)(v9 + a1[5] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                                      + 32 * ((v9 + a1[5] - 1) & 0x7F)
                                      + 8))
    {
      sub_100723EBC(a1 + 1, &v30);
      v20 = a1[6];
      if (v20)
      {
        v21 = *(double *)(*(_QWORD *)(a1[2] + (((unint64_t)(v20 + a1[5] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                        + 32 * ((v20 + a1[5] - 1) & 0x7F)
                        + 8)
            + -310.0;
        do
        {
          v22 = a1[5];
          if (*(double *)(*(_QWORD *)(a1[2] + ((v22 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v22 & 0x7F) + 8) > v21)
            break;
          a1[6] = v20 - 1;
          a1[5] = v22 + 1;
          sub_1003432C8((uint64_t)(a1 + 1), 1);
          v20 = a1[6];
        }
        while (v20);
      }
      return;
    }
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v10 = qword_10229FF08;
    if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEFAULT))
    {
      v11 = a1[6] + a1[5] - 1;
      v12 = *(double *)(*(_QWORD *)(a1[2] + ((v11 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v11 & 0x7F) + 8);
      *(_DWORD *)buf = 134218240;
      v40 = v12;
      v41 = 2048;
      v42 = *(double *)&v30;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Time rolled back, bufferEndTime, %.3f, newSampleStartTime, %.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF00 != -1)
        dispatch_once(&qword_10229FF00, &stru_102150400);
      v25 = a1[6] + a1[5] - 1;
      v26 = *(double *)(*(_QWORD *)(a1[2] + ((v25 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v25 & 0x7F) + 8);
      v35 = 134218240;
      v36 = v26;
      v37 = 2048;
      v38 = *(double *)&v30;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 0, "Time rolled back, bufferEndTime, %.3f, newSampleStartTime, %.3f", COERCE_DOUBLE(&v35), v29);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLExerciseMinuteIntensityEstimator::updateSampleBuffer(double, const CLNatalieModelInput &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v13 = (void **)a1[2];
    v14 = a1[3];
    a1[6] = 0;
    v15 = v14 - (_QWORD)v13;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v13);
        v16 = a1[3];
        v13 = (void **)(a1[2] + 8);
        a1[2] = v13;
        v15 = v16 - (_QWORD)v13;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      v17 = 64;
    }
    else
    {
      if (v15 >> 3 != 2)
        goto LABEL_40;
      v17 = 128;
    }
    a1[5] = v17;
LABEL_40:
    sub_100723EBC(a1 + 1, &v30);
    v24 = (_QWORD *)a1[7];
    v23 = (_QWORD *)a1[8];
    while (v24 != v23)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 32))(*v24);
      ++v24;
    }
    return;
  }
  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102150400);
  v18 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v40 = *(double *)&v30;
    v41 = 2048;
    v42 = v4;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Sample start time is after sample end time, startTime, %.3f, endTime, %.3f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v35 = 134218240;
    v36 = *(double *)&v30;
    v37 = 2048;
    v38 = v4;
    LODWORD(v29) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 16, "Sample start time is after sample end time, startTime, %.3f, endTime, %.3f", COERCE_DOUBLE(&v35), v29);
    v8 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 0, "void CLExerciseMinuteIntensityEstimator::updateSampleBuffer(double, const CLNatalieModelInput &)", "%s\n", v19);
    goto LABEL_31;
  }
}

void sub_1007239C8(uint64_t a1, float *a2)
{
  NSObject *v4;
  double v5;
  uint64_t v6;
  double v7;
  dispatch_queue_t *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  double v17;
  uint64_t v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;

  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102150400);
  v4 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLExerciseMinuteIntensityEstimator::feedBodyMetrics called", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    LOWORD(v19) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 2, "CLExerciseMinuteIntensityEstimator::feedBodyMetrics called", &v19, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLExerciseMinuteIntensityEstimator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_100723D24(a2);
  v17 = v5;
  v18 = v6;
  v7 = 1.0;
  if (v5 > 0.0)
    v7 = 4.40208912 / v5;
  *(double *)(a1 + 80) = v7;
  v8 = (dispatch_queue_t *)sub_10009EC60();
  sub_100EA518C(v8, (uint64_t)&v17);
  if (qword_10229FF00 != -1)
    dispatch_once(&qword_10229FF00, &stru_102150400);
  v9 = qword_10229FF08;
  if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 134218496;
    v26 = v17;
    v27 = 2048;
    v28 = v10;
    v29 = 1024;
    v30 = v18;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLExerciseMinuteIntensityEstimator::feedBodyMetrics, threshold, %f, scalingFactor, %f, thresholdSource, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v13 = *(_QWORD *)(a1 + 80);
    v19 = 134218496;
    v20 = v17;
    v21 = 2048;
    v22 = v13;
    v23 = 1024;
    v24 = v18;
    LODWORD(v16) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 0, "CLExerciseMinuteIntensityEstimator::feedBodyMetrics, threshold, %f, scalingFactor, %f, thresholdSource, %d", COERCE_DOUBLE(&v19), v16, LODWORD(v17));
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLExerciseMinuteIntensityEstimator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

double sub_100723D24(float *a1)
{
  double v2;
  double result;
  float v4;

  sub_1007247D0(a1);
  result = v2;
  v4 = a1[13];
  if (v4 != -1.0 && v2 > v4)
    result = v4;
  if (result < 2.19999981)
    result = 2.19999981;
  if (result > 4.40208912)
    return 4.40208912;
  return result;
}

uint64_t sub_100723D9C(uint64_t a1, uint64_t a2, float *a3, _BYTE *a4)
{
  uint64_t v8;
  int v9;
  float v10;
  uint64_t result;
  _BYTE v12[24];

  if (((CLMotionActivity::isTypePedestrian(*(unsigned int *)(a2 + 152)) & 1) != 0
     || (CLMotionActivity::isTypeIndoorPedestrian(*(unsigned int *)(a2 + 152)) & 1) != 0
     || (*(_DWORD *)(a2 + 152) - 61) <= 1)
    && (sub_100E654D4(a2, v8) & 1) == 0)
  {
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 352))
  {
    v9 = *(_DWORD *)(a2 + 152);
    if (v9 <= 2100)
    {
      if (v9 != 2022 && v9 != 2024)
      {
LABEL_14:
        v10 = *(double *)(a1 + 80);
        *a3 = v10;
      }
    }
    else if (((v9 - 2101) > 0x31 || ((1 << (v9 - 53)) & 0x2000000000011) == 0)
           && v9 != 15670)
    {
      goto LABEL_14;
    }
  }
  result = sub_101353978(a1 + 88, a2, (uint64_t)v12);
  *a4 = v12[0];
  return result;
}

uint64_t sub_100723EBC(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100724AB4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  v9 = a2[1];
  *v8 = *a2;
  v8[1] = v9;
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 >> 7));
  v15 = *v14 + 32 * (v12 & 0x7F);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4096;
  return v15 - 32;
}

_QWORD *sub_100723F80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10213D000;
  sub_100270E34((uint64_t)(a1 + 1), a3);
  a1[5] = 0;
  a1[6] = a2;
  return a1;
}

uint64_t sub_100723FC0(uint64_t a1, double *a2, _QWORD *a3, uint64_t a4, __n128 a5)
{
  _QWORD *v5;
  uint64_t v6;
  double v10;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  const char *v61;
  char *v62;
  double v63;
  __n128 v64;
  int v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  _BYTE buf[12];
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;

  v5 = *(_QWORD **)(a1 + 48);
  v6 = v5[5];
  if (!v6)
    return 0;
  v10 = a5.n128_f64[0];
  v12 = *a2;
  v13 = v5[1];
  v14 = v5[4] >> 7;
  if (*a2 == 0.0)
  {
    v16 = *(_QWORD *)(v13 + 8 * v14);
    v15 = v5[4] & 0x7FLL;
    v12 = *(double *)(v16 + 32 * v15);
    *a2 = v12;
  }
  else
  {
    v15 = v5[4] & 0x7FLL;
    v16 = *(_QWORD *)(v13 + 8 * v14);
  }
  if (v12 >= *(double *)(v16 + 32 * v15))
  {
    v20 = v5[4];
  }
  else
  {
    if (qword_10229FF00 != -1)
      dispatch_once(&qword_10229FF00, &stru_102150400);
    v17 = qword_10229FF08;
    if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_ERROR))
    {
      v18 = *a2;
      v19 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                  + ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) & 0x7FLL));
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v18;
      v76 = 2048;
      v77 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "operateOnWindow - windowStartTime is outside of our intensity buffer, windowStartTime, %.3f, bufferStartTime, %.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF00 != -1)
        dispatch_once(&qword_10229FF00, &stru_102150400);
      v59 = *a2;
      v60 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                  + ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) & 0x7FLL));
      v65 = 134218240;
      v66 = v59;
      v67 = 2048;
      v68 = v60;
      LODWORD(v63) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 16, "operateOnWindow - windowStartTime is outside of our intensity buffer, windowStartTime, %.3f, bufferStartTime, %.3f", COERCE_DOUBLE(&v65), v63);
      v62 = (char *)v61;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLExerciseMinuteIntensityEstimatorBase::operateOnWindow(CFTimeInterval, CFAbsoluteTime &, const CLExerciseMinuteIntensitySample *&, std::function<void (const CLExerciseMinuteIntensitySample &, CFTimeInterval)>) const", "%s\n", v61);
      if (v62 != buf)
        free(v62);
    }
    v5 = *(_QWORD **)(a1 + 48);
    v13 = v5[1];
    v20 = v5[4];
    v12 = *(double *)(*(_QWORD *)(v13 + ((v20 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v20 & 0x7F));
    *a2 = v12;
    v6 = v5[5];
  }
  v21 = v20 + v6;
  if (*(double *)(*(_QWORD *)(v13 + (((v21 - 1) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v21 - 1) & 0x7F) + 8) - v12 < v10)
    return 0;
  v22 = (_QWORD *)(v13 + 8 * (v21 >> 7));
  v23 = v5[2];
  if (v23 == v13)
    v24 = 0;
  else
    v24 = *v22 + 32 * (v21 & 0x7F);
  while (1)
  {
    v26 = v5[1];
    v27 = v23 == v26 ? 0 : *(_QWORD *)(v26 + ((v5[4] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v5[4] & 0x7FLL);
    if (v24 == v27)
      break;
    v28 = v24;
    if (v24 == *v22)
      v28 = *(v22 - 1) + 4096;
    *a3 = v28 - 32;
    if (v24 == *v22)
    {
      v32 = *(v22 - 1);
      v29 = *(double *)(v32 + 4064);
      v30 = *a2;
      v31 = v32 + 4096;
      if (v29 <= *a2)
        goto LABEL_32;
    }
    else
    {
      v29 = *(double *)(v24 - 32);
      v30 = *a2;
      v31 = v24;
      if (v29 <= *a2)
      {
        v31 = v24;
LABEL_32:
        *(double *)buf = *(double *)(v31 - 24) - v30;
        v35 = *(_QWORD *)(a4 + 24);
        if (!v35)
          sub_10025FD1C();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v35 + 48))(v35, v31 - 32, buf);
        v5 = *(_QWORD **)(a1 + 48);
        v26 = v5[1];
        v23 = v5[2];
        break;
      }
    }
    *(double *)buf = *(double *)(v31 - 24) - v29;
    v33 = *(_QWORD *)(a4 + 24);
    if (!v33)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v33 + 48))(v33, v31 - 32, buf);
    if (v24 == *v22)
    {
      v34 = *--v22;
      v24 = v34 + 4096;
    }
    v24 -= 32;
    v5 = *(_QWORD **)(a1 + 48);
    v23 = v5[2];
  }
  v36 = v5[4] + v5[5];
  v37 = (_QWORD *)(v26 + 8 * (v36 >> 7));
  if (v23 == v26)
    v38 = 0;
  else
    v38 = *v37 + 32 * (v36 & 0x7F);
  v39 = *a2 + v10;
  a5.n128_u64[0] = 134219008;
  v64 = a5;
  while (1)
  {
    v40 = v23 == v26 ? 0 : *(_QWORD *)(v26 + ((v5[4] >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v5[4] & 0x7FLL);
    if (v38 == v40)
      return 1;
    if (v38 == *v37)
    {
      v44 = *(v37 - 1);
      v41 = *(double *)(v44 + 4064);
      if (v41 < v39)
      {
        v43 = *(double *)(v44 + 4072);
        if (v43 >= v39)
        {
          v38 = v44 + 4096;
LABEL_68:
          *(double *)buf = v39 - v43;
          v58 = *(_QWORD *)(a4 + 24);
          if (!v58)
            sub_10025FD1C();
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v58 + 48))(v58, v38 - 32, buf);
          return 1;
        }
        goto LABEL_48;
      }
      v42 = v44 + 4096;
    }
    else
    {
      v41 = *(double *)(v38 - 32);
      v42 = v38;
      if (v41 < v39)
      {
        v43 = *(double *)(v38 - 24);
        if (v43 >= v39)
          goto LABEL_68;
LABEL_48:
        if (qword_10229FF00 != -1)
          dispatch_once(&qword_10229FF00, &stru_102150400);
        v45 = qword_10229FF08;
        if (os_log_type_enabled((os_log_t)qword_10229FF08, OS_LOG_TYPE_ERROR))
        {
          v46 = v38;
          if (v38 == *v37)
            v46 = *(v37 - 1) + 4096;
          v47 = *a2;
          v49 = *(_QWORD *)(v46 - 32);
          v48 = *(_QWORD *)(v46 - 24);
          *(_DWORD *)buf = v64.n128_u32[0];
          *(double *)&buf[4] = v47;
          v76 = 2048;
          v77 = v39;
          v78 = 2048;
          v79 = v10;
          v80 = 2048;
          v81 = v49;
          v82 = 2048;
          v83 = v48;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "operateOnWindow - our window is incomplete, this indicates there is a logic error, windowStartTime, %.3f, windowEndTime, %.3f, windowDuration, %.3f, sampleStartTime, %.3f, sampleEndTime, %.3f", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FF00 != -1)
            dispatch_once(&qword_10229FF00, &stru_102150400);
          v50 = *a2;
          v51 = v38;
          if (v38 == *v37)
            v51 = *(v37 - 1) + 4096;
          v53 = *(_QWORD *)(v51 - 32);
          v52 = *(_QWORD *)(v51 - 24);
          v65 = v64.n128_u32[0];
          v66 = v50;
          v67 = 2048;
          v68 = v39;
          v69 = 2048;
          v70 = v10;
          v71 = 2048;
          v72 = v53;
          v73 = 2048;
          v74 = v52;
          LODWORD(v63) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF08, 16, "operateOnWindow - our window is incomplete, this indicates there is a logic error, windowStartTime, %.3f, windowEndTime, %.3f, windowDuration, %.3f, sampleStartTime, %.3f, sampleEndTime, %.3f", COERCE_DOUBLE(&v65), v63, v64.n128_f64[0], v64.n128_f64[1]);
          v55 = (char *)v54;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLExerciseMinuteIntensityEstimatorBase::operateOnWindow(CFTimeInterval, CFAbsoluteTime &, const CLExerciseMinuteIntensitySample *&, std::function<void (const CLExerciseMinuteIntensitySample &, CFTimeInterval)>) const", "%s\n", v54);
          if (v55 != buf)
            free(v55);
        }
        goto LABEL_64;
      }
    }
    *(double *)buf = -(*(double *)(v42 - 24) - v41);
    v56 = *(_QWORD *)(a4 + 24);
    if (!v56)
      sub_10025FD1C();
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v56 + 48))(v56, v42 - 32, buf);
LABEL_64:
    if (v38 == *v37)
    {
      v57 = *--v37;
      v38 = v57 + 4096;
    }
    v38 -= 32;
    v5 = *(_QWORD **)(a1 + 48);
    v26 = v5[1];
    v23 = v5[2];
  }
}

uint64_t sub_100724710(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_100724968(&v3);
  sub_10034111C((_QWORD *)(a1 + 8));
  return a1;
}

void sub_100724750(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  sub_100724968(&v2);
  sub_10034111C((_QWORD *)(a1 + 8));
  operator delete();
}

void sub_1007247A4(id a1)
{
  qword_10229FF08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ExerciseMinutes");
}

double sub_1007247D0(float *a1)
{
  double result;
  float v2;
  uint64_t v3;

  result = sub_10072484C(a1, (int *)&v3);
  *(float *)&result = result;
  if (*(float *)&result >= 1.0)
  {
    v2 = (float)((float)(*(float *)&result * -0.793) + (float)((float)(*(float *)&result * 0.3564) * *(float *)&result))
       + 3.142;
    if (v2 > 8.0)
      return 8.0;
    return v2;
  }
  return result;
}

double sub_10072484C(float *a1, int *a2)
{
  float v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v2 = a1[5];
  v3 = a1[2];
  v4 = dbl_101BBECE0[v2 <= 13.0];
  v5 = v2 * -0.01 + 1.6;
  v6 = fmin(v3 * 0.5 + 0.225, 1.0);
  if (v4 >= v6)
    v6 = v4;
  v7 = fmax(fmin(v5, 1.0), 0.7);
  v8 = fmax(fmin(a1[3] / (v3 * v3) * -0.0125 + 1.425, 1.0), 0.9);
  if (v7 >= v6)
    v9 = v6;
  else
    v9 = v7;
  if (v8 < v9)
    v9 = v8;
  if (v9 == 1.0)
  {
    *a2 = 0;
    return 3.2973001;
  }
  else
  {
    v11 = fmax(v7 * v6 * v8, 0.9);
    if (v11 < v9)
      v9 = v11;
    if (v9 == v11)
      v12 = 5;
    else
      v12 = 1;
    if (v9 == v8)
      v13 = 4;
    else
      v13 = v12;
    if (v9 == v6)
      v14 = 2;
    else
      v14 = v13;
    if (v9 == v7)
      v15 = 3;
    else
      v15 = v14;
    *a2 = v15;
    return v9 * 3.2973001;
  }
}

void sub_100724968(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1007249E4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100724A54(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100724AB4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100724D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100724DC8()
{
  sub_1015A2E04(qword_102303B58, "Acc800Fp");
  dword_102303B70 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102303B58, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303B78, "DmFp");
  dword_102303B90 = 200;
  return __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102303B78, (void *)&_mh_execute_header);
}

void sub_100724E54(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  float64_t v16;
  float64_t v17;
  float64_t v18;
  float64_t v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  float64_t v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64_t v32;
  float64_t v33;
  float64_t v34;
  float64_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  float64_t v42;
  int v43;
  int v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  float64_t v48;
  float64_t v49;
  float64_t v50;
  float64_t v51;
  float64_t v52;
  float64_t v53;
  float64_t v54;
  float64_t v55;
  float64_t v56;
  float64_t v57;
  float64_t v58;
  float64_t v59;
  float64_t v60;
  float64_t v61;
  float64_t v62;
  float64_t v63;
  float64_t v64;
  float64_t v65;
  float64_t v66;
  const char *v67;
  uint8_t *v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  int v72;
  float64_t v73;
  __int16 v74;
  float64_t v75;
  __int16 v76;
  float64_t v77;
  __int16 v78;
  float64_t v79;
  __int16 v80;
  _BYTE v81[10];
  float64_t v82;
  __int16 v83;
  float64_t v84;
  __int16 v85;
  float64_t v86;
  __int16 v87;
  float64_t v88;
  __int16 v89;
  float64_t v90;
  __int16 v91;
  float64_t v92;
  __int16 v93;
  float64_t v94;
  __int16 v95;
  float64_t v96;
  __int16 v97;
  float64_t v98;
  __int16 v99;
  float64_t v100;
  __int16 v101;
  float64_t v102;
  __int16 v103;
  float64_t v104;
  __int16 v105;
  float64_t v106;
  __int16 v107;
  float64_t v108;
  __int16 v109;
  float64_t v110;
  __int16 v111;
  float64_t v112;
  __int16 v113;
  float64_t v114;
  __int16 v115;
  float64_t v116;
  __int16 v117;
  float64_t v118;
  __int16 v119;
  float64_t v120;
  __int16 v121;
  float64_t v122;
  __int16 v123;
  float64_t v124;
  __int16 v125;
  float64_t v126;
  __int16 v127;
  float64_t v128;
  __int16 v129;
  float64_t v130;
  uint8_t buf[4];
  float64_t v132;
  __int16 v133;
  float64_t v134;
  __int16 v135;
  float64_t v136;
  __int16 v137;
  float64_t v138;
  __int16 v139;
  _BYTE v140[10];
  float64_t v141;
  __int16 v142;
  float64_t v143;
  __int16 v144;
  float64_t v145;
  __int16 v146;
  float64_t v147;
  __int16 v148;
  float64_t v149;
  __int16 v150;
  float64_t v151;
  __int16 v152;
  float64_t v153;
  __int16 v154;
  float64_t v155;
  __int16 v156;
  float64_t v157;
  __int16 v158;
  float64_t v159;
  __int16 v160;
  float64_t v161;
  __int16 v162;
  float64_t v163;
  __int16 v164;
  float64_t v165;
  __int16 v166;
  float64_t v167;
  __int16 v168;
  float64_t v169;
  __int16 v170;
  float64_t v171;
  __int16 v172;
  float64_t v173;
  __int16 v174;
  float64_t v175;
  __int16 v176;
  float64_t v177;
  __int16 v178;
  float64_t v179;
  __int16 v180;
  float64_t v181;
  __int16 v182;
  float64_t v183;
  __int16 v184;
  float64_t v185;
  __int16 v186;
  float64_t v187;
  __int16 v188;
  float64_t v189;

  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  if (sub_100725610(a2->f64))
  {
    v11 = 4;
  }
  else
  {
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150440);
    v12 = qword_10229FC48;
    if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Rejection: SteadinessModelHarmonic missing required feature inputs", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC40 != -1)
        dispatch_once(&qword_10229FC40, &stru_102150440);
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 1, "Rejection: SteadinessModelHarmonic missing required feature inputs", &v72, 2);
      v70 = (uint8_t *)v69;
      sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelHarmonic::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
    *(_DWORD *)(a5 + 48) = 8;
    v11 = 12;
  }
  if (!*(_BYTE *)(a4 + 57))
    *(_DWORD *)(a5 + 48) = v11;
  sub_100725800(a1, a5, a3);
  v13 = sub_1009FF9FC(a2);
  *(double *)(a5 + 24) = v13;
  *(double *)(a5 + 32) = sub_1009FFB58(v13);
  *(_QWORD *)(a5 + 40) = v14;
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102150440);
  v15 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(double *)(a5 + 32);
    v17 = *(double *)(a5 + 40);
    v18 = *(double *)(a5 + 16);
    v19 = *(double *)(a5 + 24);
    v20 = *(_DWORD *)(a5 + 48);
    v21 = *(_DWORD *)(a5 + 8);
    v22 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)buf = 134350593;
    v132 = v18;
    v133 = 2050;
    v134 = v16;
    v135 = 2050;
    v136 = v17;
    v137 = 2049;
    v138 = v19;
    v139 = 1026;
    *(_DWORD *)v140 = v20;
    *(_WORD *)&v140[4] = 1025;
    *(_DWORD *)&v140[6] = v21;
    LOWORD(v141) = 1025;
    *(_DWORD *)((char *)&v141 + 2) = v22;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelHarmonic::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150440);
    v39 = *(double *)(a5 + 32);
    v40 = *(double *)(a5 + 40);
    v41 = *(double *)(a5 + 16);
    v42 = *(double *)(a5 + 24);
    v43 = *(_DWORD *)(a5 + 48);
    v44 = *(_DWORD *)(a5 + 8);
    v45 = *(_DWORD *)(a5 + 12);
    v72 = 134350593;
    v73 = v41;
    v74 = 2050;
    v75 = v39;
    v76 = 2050;
    v77 = v40;
    v78 = 2049;
    v79 = v42;
    v80 = 1026;
    *(_DWORD *)v81 = v43;
    *(_WORD *)&v81[4] = 1025;
    *(_DWORD *)&v81[6] = v44;
    LOWORD(v82) = 1025;
    *(_DWORD *)((char *)&v82 + 2) = v45;
    LODWORD(v71) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelHarmonic::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", &v72, v71);
    v47 = (uint8_t *)v46;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelHarmonic::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v46);
    if (v47 != buf)
      free(v47);
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102150440);
  v23 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEFAULT))
  {
    v24 = a2->f64[1];
    v132 = a2->f64[0];
    v134 = v24;
    v25 = a2[2].f64[0];
    v26 = a2[2].f64[1];
    v138 = a2[1].f64[1];
    *(float64_t *)v140 = v25;
    v141 = v26;
    v27 = a2[4].f64[0];
    v28 = a2[4].f64[1];
    v145 = a2[3].f64[1];
    v147 = v27;
    v149 = v28;
    v29 = a2[6].f64[0];
    v30 = a2[6].f64[1];
    v153 = a2[5].f64[1];
    v155 = v29;
    v157 = v30;
    v31 = a2[8].f64[0];
    v32 = a2[8].f64[1];
    v161 = a2[7].f64[1];
    v163 = v31;
    v165 = v32;
    v33 = a2[10].f64[0];
    v34 = a2[10].f64[1];
    v169 = a2[9].f64[1];
    v171 = v33;
    v173 = v34;
    v35 = a2[12].f64[0];
    v177 = a2[11].f64[1];
    v179 = v35;
    v36 = a2[12].f64[1];
    v181 = a2[13].f64[0];
    v37 = a2[13].f64[1];
    v38 = a2[14].f64[1];
    v185 = a2[14].f64[0];
    v187 = v38;
    v189 = v36;
    v136 = a2[1].f64[0];
    v143 = a2[3].f64[0];
    v151 = a2[5].f64[0];
    v159 = a2[7].f64[0];
    v167 = a2[9].f64[0];
    v175 = a2[11].f64[0];
    v183 = v37;
    v133 = 2049;
    v135 = 2049;
    v137 = 2049;
    v139 = 2049;
    *(_WORD *)&v140[8] = 2049;
    v142 = 2049;
    v144 = 2049;
    v146 = 2049;
    v148 = 2049;
    v150 = 2049;
    v152 = 2049;
    v154 = 2049;
    v156 = 2049;
    v158 = 2049;
    v160 = 2049;
    v162 = 2049;
    v164 = 2049;
    v166 = 2049;
    v168 = 2049;
    v170 = 2049;
    v172 = 2049;
    v174 = 2049;
    v176 = 2049;
    v178 = 2049;
    v180 = 2049;
    v182 = 2049;
    v184 = 2049;
    v186 = 2049;
    v188 = 2049;
    *(_DWORD *)buf = 134290945;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelHarmonic::Features, allBoutsStepIndexOfHarmonicityApCv,%{private}.2f,  allBoutsStepIndexOfHarmonicityApMean,%{private}.2f,allBoutsStepIndexOfHarmonicityApMedian,%{private}.2f, allBoutsStepIndexOfHarmonicityApQ5,%{private}.2f,allBoutsStepIndexOfHarmonicityApQ95,%{private}.2f, allBoutsStepIndexOfHarmonicityMlCv,%{private}.2f, allBoutsStepIndexOfHarmonicityMlMean,%{private}.2f, allBoutsStepIndexOfHarmonicityMlMedian,%{private}.2f, allBoutsStepIndexOfHarmonicityMlQ5,%{private}.2f, allBoutsStepIndexOfHarmonicityMlQ95,%{private}.2f, allBoutsStepIndexOfHarmonicityVtCv,%{private}.2f, allBoutsStepIndexOfHarmonicityVtMean,%{private}.2f, allBoutsStepIndexOfHarmonicityVtMedian,%{private}.2f,  allBoutsStepIndexOfHarmonicityVtQ5,%{private}.2f, allBoutsStepIndexOfHarmonicityVtQ95,%{private}.2f, allBoutsSwingIndexOfHarmonicityApCv,%{private}.2f, allBoutsSwingIndexOfHarmonicityApMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityApMedian,%{private}.2f, allBoutsSwingIndexOfHarmonicityApQ5,%{private}.2f,allBoutsSwingIndexOfHarmonicityApQ95,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlCv,%{private}.2f,allBoutsSwingIndexOfHarmonicityMlMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlMedian,%{private}.2f,allBoutsSwingIndexOfHarmonicityMlQ5,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlQ95,%{private}.2f,  allBoutsSwingIndexOfHarmonicityVtMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityVtMedian,%{private}.2f, allBoutsSwingIndexOfHarmonicityVtQ5,%{private}.2f,allBoutsSwingIndexOfHarmonicityVtQ95,%{private}.2f,allBoutsSwingIndexOfHarmonicityVtCv,%{private}.2f", buf, 0x12Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150440);
    v48 = a2->f64[1];
    v73 = a2->f64[0];
    v49 = a2[1].f64[0];
    v50 = a2[1].f64[1];
    v75 = v48;
    v77 = v49;
    v51 = a2[2].f64[0];
    v52 = a2[2].f64[1];
    v79 = v50;
    *(float64_t *)v81 = v51;
    v53 = a2[3].f64[0];
    v54 = a2[3].f64[1];
    v82 = v52;
    v84 = v53;
    v55 = a2[4].f64[0];
    v56 = a2[4].f64[1];
    v86 = v54;
    v57 = a2[6].f64[1];
    v88 = v55;
    v90 = v56;
    v98 = v57;
    v58 = a2[8].f64[0];
    v59 = a2[8].f64[1];
    v102 = a2[7].f64[1];
    v104 = v58;
    v106 = v59;
    v60 = a2[10].f64[0];
    v61 = a2[10].f64[1];
    v110 = a2[9].f64[1];
    v112 = v60;
    v114 = v61;
    v62 = a2[12].f64[0];
    v118 = a2[11].f64[1];
    v120 = v62;
    v63 = a2[12].f64[1];
    v122 = a2[13].f64[0];
    v64 = a2[13].f64[1];
    v65 = a2[14].f64[1];
    v126 = a2[14].f64[0];
    v128 = v65;
    v130 = v63;
    v66 = a2[5].f64[1];
    v92 = a2[5].f64[0];
    v94 = v66;
    v96 = a2[6].f64[0];
    v100 = a2[7].f64[0];
    v108 = a2[9].f64[0];
    v116 = a2[11].f64[0];
    v124 = v64;
    v74 = 2049;
    v76 = 2049;
    v78 = 2049;
    v80 = 2049;
    *(_WORD *)&v81[8] = 2049;
    v83 = 2049;
    v85 = 2049;
    v87 = 2049;
    v89 = 2049;
    v91 = 2049;
    v93 = 2049;
    v95 = 2049;
    v97 = 2049;
    v99 = 2049;
    v101 = 2049;
    v103 = 2049;
    v105 = 2049;
    v107 = 2049;
    v109 = 2049;
    v111 = 2049;
    v113 = 2049;
    v115 = 2049;
    v117 = 2049;
    v119 = 2049;
    v121 = 2049;
    v123 = 2049;
    v125 = 2049;
    v127 = 2049;
    v129 = 2049;
    v72 = 134290945;
    LODWORD(v71) = 302;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 0, "CLMobility::SteadinessModelHarmonic::Features, allBoutsStepIndexOfHarmonicityApCv,%{private}.2f,  allBoutsStepIndexOfHarmonicityApMean,%{private}.2f,allBoutsStepIndexOfHarmonicityApMedian,%{private}.2f, allBoutsStepIndexOfHarmonicityApQ5,%{private}.2f,allBoutsStepIndexOfHarmonicityApQ95,%{private}.2f, allBoutsStepIndexOfHarmonicityMlCv,%{private}.2f, allBoutsStepIndexOfHarmonicityMlMean,%{private}.2f, allBoutsStepIndexOfHarmonicityMlMedian,%{private}.2f, allBoutsStepIndexOfHarmonicityMlQ5,%{private}.2f, allBoutsStepIndexOfHarmonicityMlQ95,%{private}.2f, allBoutsStepIndexOfHarmonicityVtCv,%{private}.2f, allBoutsStepIndexOfHarmonicityVtMean,%{private}.2f, allBoutsStepIndexOfHarmonicityVtMedian,%{private}.2f,  allBoutsStepIndexOfHarmonicityVtQ5,%{private}.2f, allBoutsStepIndexOfHarmonicityVtQ95,%{private}.2f, allBoutsSwingIndexOfHarmonicityApCv,%{private}.2f, allBoutsSwingIndexOfHarmonicityApMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityApMedian,%{private}.2f, allBoutsSwingIndexOfHarmonicityApQ5,%{private}.2f,allBoutsSwingIndexOfHarmonicityApQ95,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlCv,%{private}.2f,allBoutsSwingIndexOfHarmonicityMlMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlMedian,%{private}.2f,allBoutsSwingIndexOfHarmonicityMlQ5,%{private}.2f, allBoutsSwingIndexOfHarmonicityMlQ95,%{private}.2f,  allBoutsSwingIndexOfHarmonic"
      "ityVtMean,%{private}.2f, allBoutsSwingIndexOfHarmonicityVtMedian,%{private}.2f, allBoutsSwingIndexOfHarmonicityVtQ"
      "5,%{private}.2f,allBoutsSwingIndexOfHarmonicityVtQ95,%{private}.2f,allBoutsSwingIndexOfHarmonicityVtCv,%{private}.2f",
      &v72,
      v71);
    v68 = (uint8_t *)v67;
    sub_100512490("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelHarmonic::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v67);
    if (v68 != buf)
      free(v68);
  }
}

BOOL sub_100725610(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY
      && a1[10] != -INFINITY
      && a1[11] != -INFINITY
      && a1[12] != -INFINITY
      && a1[13] != -INFINITY
      && a1[14] != -INFINITY
      && a1[15] != -INFINITY
      && a1[16] != -INFINITY
      && a1[17] != -INFINITY
      && a1[18] != -INFINITY
      && a1[19] != -INFINITY
      && a1[20] != -INFINITY
      && a1[21] != -INFINITY
      && a1[22] != -INFINITY
      && a1[23] != -INFINITY
      && a1[24] != -INFINITY
      && a1[25] != -INFINITY
      && a1[26] != -INFINITY
      && a1[27] != -INFINITY
      && a1[28] != -INFINITY
      && a1[29] != -INFINITY;
}

void sub_100725800(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  double v7;
  double v8;
  int v9;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a3;
  v3 = a3[1];
  if (v3 == *a3)
  {
    v5 = 0;
LABEL_16:
    *(_DWORD *)(a2 + 48) |= 0x20u;
    goto LABEL_17;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(double *)(a2 + 16);
  do
  {
    v8 = *(double *)(v4 + 8);
    if (v8 > v7)
      break;
    if (*(_DWORD *)(v4 + 52))
      v9 = 42;
    else
      v9 = -1;
    if ((v9 & *(_DWORD *)(v4 + 192)) == 0)
    {
      if (v8 > v7 + -2419200.0)
        *(_DWORD *)(a2 + 12) = ++v5;
      if (v8 > v7 + -604800.0)
        *(_DWORD *)(a2 + 8) = ++v6;
    }
    v4 += 224;
  }
  while (v4 != v3);
  if (v6 <= 14)
    goto LABEL_16;
LABEL_17:
  if (v5 <= 67)
    *(_DWORD *)(a2 + 48) |= 0x10u;
}

void sub_1007258BC(uint64_t *a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  int64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  float *v10;
  float *v11;
  double v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  double v23;
  double *v24;
  double *v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  double *v32;
  uint64_t v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  double *v43;
  uint64_t v44;
  double v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  uint64_t v55;
  double v56;
  double *v57;
  double *v58;
  double *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  double *v65;
  uint64_t v66;
  double v67;
  double *v68;
  double *v69;
  double *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  double *v76;
  uint64_t v77;
  NSObject *v78;
  double *v79;
  const char *v80;
  char *v81;
  void *v82;
  double *v83;
  double *i;
  void *v85;
  double *v86;
  double *v87;
  void *v88;
  double *v89;
  double *v90;
  void *v91;
  double *v92;
  double *v93;
  void *v94;
  double *v95;
  double *v96;
  void *__p;
  double *v98;
  double *v99;
  void *v100;
  float *v101;
  uint64_t v102;
  int v103;
  double v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  _BYTE buf[12];
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;

  v5 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)a2 = v5;
  *(int64x2_t *)(a2 + 16) = v5;
  *(int64x2_t *)(a2 + 32) = v5;
  *(int64x2_t *)(a2 + 48) = v5;
  *(int64x2_t *)(a2 + 64) = v5;
  *(int64x2_t *)(a2 + 80) = v5;
  *(int64x2_t *)(a2 + 96) = v5;
  *(int64x2_t *)(a2 + 112) = v5;
  *(int64x2_t *)(a2 + 128) = v5;
  *(int64x2_t *)(a2 + 144) = v5;
  *(int64x2_t *)(a2 + 160) = v5;
  *(int64x2_t *)(a2 + 176) = v5;
  *(int64x2_t *)(a2 + 192) = v5;
  *(int64x2_t *)(a2 + 208) = v5;
  *(int64x2_t *)(a2 + 224) = v5;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v6 = *a1;
  v7 = a1[1];
  *(_QWORD *)buf = &v100;
  if (v6 == v7)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    do
    {
      v8 = *(double *)(v6 + 8);
      if (v8 < a3 && v8 >= a3 + -2419200.0)
        sub_1007264EC((void ***)buf, (_OWORD *)v6);
      v6 += 224;
    }
    while (v6 != v7);
    v10 = (float *)v100;
    v11 = v101;
  }
  __p = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  for (i = 0; v10 != v11; v10 += 56)
  {
    if (sub_10072640C((uint64_t)v10))
    {
      v12 = v10[36];
      v13 = v98;
      if (v98 >= v99)
      {
        v15 = (double *)__p;
        v16 = ((char *)v98 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_100259694();
        v18 = (char *)v99 - (_BYTE *)__p;
        if (((char *)v99 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_10025E6A0((uint64_t)&v99, v19);
          v15 = (double *)__p;
          v13 = v98;
        }
        else
        {
          v20 = 0;
        }
        v21 = (double *)&v20[8 * v16];
        *v21 = v12;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13-- - 1);
          *((_QWORD *)v21-- - 1) = v22;
        }
        __p = v21;
        v98 = v14;
        v99 = (double *)&v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v98 = v12;
        v14 = v13 + 1;
      }
      v98 = v14;
      v23 = v10[37];
      v24 = v95;
      if (v95 >= v96)
      {
        v26 = (double *)v94;
        v27 = ((char *)v95 - (_BYTE *)v94) >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
          sub_100259694();
        v29 = (char *)v96 - (_BYTE *)v94;
        if (((char *)v96 - (_BYTE *)v94) >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)sub_10025E6A0((uint64_t)&v96, v30);
          v26 = (double *)v94;
          v24 = v95;
        }
        else
        {
          v31 = 0;
        }
        v32 = (double *)&v31[8 * v27];
        *v32 = v23;
        v25 = v32 + 1;
        while (v24 != v26)
        {
          v33 = *((_QWORD *)v24-- - 1);
          *((_QWORD *)v32-- - 1) = v33;
        }
        v94 = v32;
        v95 = v25;
        v96 = (double *)&v31[8 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v95 = v23;
        v25 = v24 + 1;
      }
      v95 = v25;
      v34 = v10[38];
      v35 = v92;
      if (v92 >= v93)
      {
        v37 = (double *)v91;
        v38 = ((char *)v92 - (_BYTE *)v91) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          sub_100259694();
        v40 = (char *)v93 - (_BYTE *)v91;
        if (((char *)v93 - (_BYTE *)v91) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_10025E6A0((uint64_t)&v93, v41);
          v37 = (double *)v91;
          v35 = v92;
        }
        else
        {
          v42 = 0;
        }
        v43 = (double *)&v42[8 * v38];
        *v43 = v34;
        v36 = v43 + 1;
        while (v35 != v37)
        {
          v44 = *((_QWORD *)v35-- - 1);
          *((_QWORD *)v43-- - 1) = v44;
        }
        v91 = v43;
        v92 = v36;
        v93 = (double *)&v42[8 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v92 = v34;
        v36 = v35 + 1;
      }
      v92 = v36;
      v45 = v10[39];
      v46 = v89;
      if (v89 >= v90)
      {
        v48 = (double *)v88;
        v49 = ((char *)v89 - (_BYTE *)v88) >> 3;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          sub_100259694();
        v51 = (char *)v90 - (_BYTE *)v88;
        if (((char *)v90 - (_BYTE *)v88) >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)sub_10025E6A0((uint64_t)&v90, v52);
          v48 = (double *)v88;
          v46 = v89;
        }
        else
        {
          v53 = 0;
        }
        v54 = (double *)&v53[8 * v49];
        *v54 = v45;
        v47 = v54 + 1;
        while (v46 != v48)
        {
          v55 = *((_QWORD *)v46-- - 1);
          *((_QWORD *)v54-- - 1) = v55;
        }
        v88 = v54;
        v89 = v47;
        v90 = (double *)&v53[8 * v52];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v89 = v45;
        v47 = v46 + 1;
      }
      v89 = v47;
      v56 = v10[40];
      v57 = v86;
      if (v86 >= v87)
      {
        v59 = (double *)v85;
        v60 = ((char *)v86 - (_BYTE *)v85) >> 3;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
          sub_100259694();
        v62 = (char *)v87 - (_BYTE *)v85;
        if (((char *)v87 - (_BYTE *)v85) >> 2 > v61)
          v61 = v62 >> 2;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          v64 = (char *)sub_10025E6A0((uint64_t)&v87, v63);
          v59 = (double *)v85;
          v57 = v86;
        }
        else
        {
          v64 = 0;
        }
        v65 = (double *)&v64[8 * v60];
        *v65 = v56;
        v58 = v65 + 1;
        while (v57 != v59)
        {
          v66 = *((_QWORD *)v57-- - 1);
          *((_QWORD *)v65-- - 1) = v66;
        }
        v85 = v65;
        v86 = v58;
        v87 = (double *)&v64[8 * v63];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v86 = v56;
        v58 = v57 + 1;
      }
      v86 = v58;
      v67 = v10[41];
      v68 = v83;
      if (v83 >= i)
      {
        v70 = (double *)v82;
        v71 = ((char *)v83 - (_BYTE *)v82) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
          sub_100259694();
        v73 = (char *)i - (_BYTE *)v82;
        if (((char *)i - (_BYTE *)v82) >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          v75 = (char *)sub_10025E6A0((uint64_t)&i, v74);
          v70 = (double *)v82;
          v68 = v83;
        }
        else
        {
          v75 = 0;
        }
        v76 = (double *)&v75[8 * v71];
        *v76 = v67;
        v69 = v76 + 1;
        while (v68 != v70)
        {
          v77 = *((_QWORD *)v68-- - 1);
          *((_QWORD *)v76-- - 1) = v77;
        }
        v82 = v76;
        v83 = v69;
        i = (double *)&v75[8 * v74];
        if (v70)
          operator delete(v70);
      }
      else
      {
        *v83 = v67;
        v69 = v68 + 1;
      }
      v83 = v69;
    }
  }
  if (qword_10229FC40 != -1)
    dispatch_once(&qword_10229FC40, &stru_102150440);
  v78 = qword_10229FC48;
  if (os_log_type_enabled((os_log_t)qword_10229FC48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134350848;
    *(double *)&buf[4] = a3;
    v120 = 2050;
    v121 = 0x6DB6DB6DB6DB6DB7 * (((char *)v101 - (_BYTE *)v100) >> 5);
    v122 = 2050;
    v123 = ((char *)v98 - (_BYTE *)__p) >> 3;
    v124 = 2050;
    v125 = ((char *)v95 - (_BYTE *)v94) >> 3;
    v126 = 2050;
    v127 = ((char *)v92 - (_BYTE *)v91) >> 3;
    v128 = 2050;
    v129 = ((char *)v89 - (_BYTE *)v88) >> 3;
    v130 = 2050;
    v131 = ((char *)v86 - (_BYTE *)v85) >> 3;
    v132 = 2050;
    v133 = ((char *)v83 - (_BYTE *)v82) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "SteadinessModelHarmonic::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepBoutsStepIndexOfHarmonicityAP,%{public}lu, numStepBoutsStepIndexOfHarmonicityML,%{public}lu, numStepBoutsStepIndexOfHarmonicityVT,%{public}lu, numStepBoutsSwingIndexOfHarmonicityAP,%{public}lu, numStepBoutsSwingIndexOfHarmonicityML,%{public}lu, numStepBoutsSwingIndexOfHarmonicityVT,%{public}lu", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC40 != -1)
      dispatch_once(&qword_10229FC40, &stru_102150440);
    v103 = 134350848;
    v104 = a3;
    v105 = 2050;
    v106 = 0x6DB6DB6DB6DB6DB7 * (((char *)v101 - (_BYTE *)v100) >> 5);
    v107 = 2050;
    v108 = ((char *)v98 - (_BYTE *)__p) >> 3;
    v109 = 2050;
    v110 = ((char *)v95 - (_BYTE *)v94) >> 3;
    v111 = 2050;
    v112 = ((char *)v92 - (_BYTE *)v91) >> 3;
    v113 = 2050;
    v114 = ((char *)v89 - (_BYTE *)v88) >> 3;
    v115 = 2050;
    v116 = ((char *)v86 - (_BYTE *)v85) >> 3;
    v117 = 2050;
    v118 = ((char *)v83 - (_BYTE *)v82) >> 3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC48, 2, "SteadinessModelHarmonic::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepBoutsStepIndexOfHarmonicityAP,%{public}lu, numStepBoutsStepIndexOfHarmonicityML,%{public}lu, numStepBoutsStepIndexOfHarmonicityVT,%{public}lu, numStepBoutsSwingIndexOfHarmonicityAP,%{public}lu, numStepBoutsSwingIndexOfHarmonicityML,%{public}lu, numStepBoutsSwingIndexOfHarmonicityVT,%{public}lu", &v103, 82);
    v81 = (char *)v80;
    sub_100512490("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelHarmonic::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const", "%s\n", v80);
    if (v81 != buf)
      free(v81);
  }
  if (__p != v98)
  {
    *(double *)a2 = sub_101081E44((double **)&__p);
    *(double *)(a2 + 8) = sub_101081E0C((double **)&__p);
    *(double *)(a2 + 16) = sub_101082068((uint64_t *)&__p);
    *(double *)(a2 + 24) = sub_1011A3088((uint64_t)&__p, 5);
    *(double *)(a2 + 32) = sub_1011A3088((uint64_t)&__p, 95);
  }
  if (v94 != v95)
  {
    *(double *)(a2 + 40) = sub_101081E44((double **)&v94);
    *(double *)(a2 + 48) = sub_101081E0C((double **)&v94);
    *(double *)(a2 + 56) = sub_101082068((uint64_t *)&v94);
    *(double *)(a2 + 64) = sub_1011A3088((uint64_t)&v94, 5);
    *(double *)(a2 + 72) = sub_1011A3088((uint64_t)&v94, 95);
  }
  if (v91 != v92)
  {
    *(double *)(a2 + 80) = sub_101081E44((double **)&v91);
    *(double *)(a2 + 88) = sub_101081E0C((double **)&v91);
    *(double *)(a2 + 96) = sub_101082068((uint64_t *)&v91);
    *(double *)(a2 + 104) = sub_1011A3088((uint64_t)&v91, 5);
    *(double *)(a2 + 112) = sub_1011A3088((uint64_t)&v91, 95);
  }
  if (v88 != v89)
  {
    *(double *)(a2 + 120) = sub_101081E44((double **)&v88);
    *(double *)(a2 + 128) = sub_101081E0C((double **)&v88);
    *(double *)(a2 + 136) = sub_101082068((uint64_t *)&v88);
    *(double *)(a2 + 144) = sub_1011A3088((uint64_t)&v88, 5);
    *(double *)(a2 + 152) = sub_1011A3088((uint64_t)&v88, 95);
  }
  if (v85 != v86)
  {
    *(double *)(a2 + 160) = sub_101081E44((double **)&v85);
    *(double *)(a2 + 168) = sub_101081E0C((double **)&v85);
    *(double *)(a2 + 176) = sub_101082068((uint64_t *)&v85);
    *(double *)(a2 + 184) = sub_1011A3088((uint64_t)&v85, 5);
    *(double *)(a2 + 192) = sub_1011A3088((uint64_t)&v85, 95);
  }
  v79 = (double *)v82;
  if (v82 != v83)
  {
    *(double *)(a2 + 200) = sub_101081E44((double **)&v82);
    *(double *)(a2 + 208) = sub_101081E0C((double **)&v82);
    *(double *)(a2 + 216) = sub_101082068((uint64_t *)&v82);
    *(double *)(a2 + 224) = sub_1011A3088((uint64_t)&v82, 5);
    *(double *)(a2 + 232) = sub_1011A3088((uint64_t)&v82, 95);
    v79 = (double *)v82;
  }
  if (v79)
  {
    v83 = v79;
    operator delete(v79);
  }
  if (v85)
  {
    v86 = (double *)v85;
    operator delete(v85);
  }
  if (v88)
  {
    v89 = (double *)v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = (double *)v91;
    operator delete(v91);
  }
  if (v94)
  {
    v95 = (double *)v94;
    operator delete(v94);
  }
  if (__p)
  {
    v98 = (double *)__p;
    operator delete(__p);
  }
  if (v100)
  {
    v101 = (float *)v100;
    operator delete(v100);
  }
}

void sub_100726350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

BOOL sub_10072640C(uint64_t a1)
{
  int v1;
  float v2;
  float v4;

  if (*(_DWORD *)(a1 + 52))
    v1 = 42;
  else
    v1 = -1;
  if ((v1 & *(_DWORD *)(a1 + 192)) != 0)
    return 0;
  v2 = *(float *)(a1 + 152);
  if (v2 < 0.0 || v2 > 1.0)
    return 0;
  v4 = *(float *)(a1 + 164);
  return v4 >= 0.0 && v4 <= 1.0 && !sub_100726498((float *)a1);
}

void sub_10072646C(id a1)
{
  qword_10229FC48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

BOOL sub_100726498(float *a1)
{
  return a1[36] == 0.0 && a1[37] == 0.0 && a1[38] == 0.0 && a1[39] == 0.0 && a1[40] == 0.0 && a1[41] == 0.0;
}

void ***sub_1007264EC(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v21 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*v4) >> 5);
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) > 0x124924924924924)
      sub_100259694();
    v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - (_QWORD)*v4) >> 5);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x92492492492492)
      v24 = 0x124924924924924;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)sub_100272188(v7, v24);
    else
      v25 = 0;
    v26 = &v25[224 * v21];
    v27 = &v25[224 * v24];
    v28 = a2[1];
    *(_OWORD *)v26 = *a2;
    *((_OWORD *)v26 + 1) = v28;
    v29 = a2[2];
    v30 = a2[3];
    v31 = a2[5];
    *((_OWORD *)v26 + 4) = a2[4];
    *((_OWORD *)v26 + 5) = v31;
    *((_OWORD *)v26 + 2) = v29;
    *((_OWORD *)v26 + 3) = v30;
    v32 = a2[6];
    v33 = a2[7];
    v34 = a2[9];
    *((_OWORD *)v26 + 8) = a2[8];
    *((_OWORD *)v26 + 9) = v34;
    *((_OWORD *)v26 + 6) = v32;
    *((_OWORD *)v26 + 7) = v33;
    v35 = a2[10];
    v36 = a2[11];
    v37 = a2[13];
    *((_OWORD *)v26 + 12) = a2[12];
    *((_OWORD *)v26 + 13) = v37;
    *((_OWORD *)v26 + 10) = v35;
    *((_OWORD *)v26 + 11) = v36;
    v20 = v26 + 224;
    v39 = (char *)*v4;
    v38 = (char *)v4[1];
    if (v38 != *v4)
    {
      do
      {
        v40 = *((_OWORD *)v38 - 13);
        *((_OWORD *)v26 - 14) = *((_OWORD *)v38 - 14);
        *((_OWORD *)v26 - 13) = v40;
        v41 = *((_OWORD *)v38 - 12);
        v42 = *((_OWORD *)v38 - 11);
        v43 = *((_OWORD *)v38 - 9);
        *((_OWORD *)v26 - 10) = *((_OWORD *)v38 - 10);
        *((_OWORD *)v26 - 9) = v43;
        *((_OWORD *)v26 - 12) = v41;
        *((_OWORD *)v26 - 11) = v42;
        v44 = *((_OWORD *)v38 - 8);
        v45 = *((_OWORD *)v38 - 7);
        v46 = *((_OWORD *)v38 - 5);
        *((_OWORD *)v26 - 6) = *((_OWORD *)v38 - 6);
        *((_OWORD *)v26 - 5) = v46;
        *((_OWORD *)v26 - 8) = v44;
        *((_OWORD *)v26 - 7) = v45;
        v47 = *((_OWORD *)v38 - 4);
        v48 = *((_OWORD *)v38 - 3);
        v49 = *((_OWORD *)v38 - 2);
        *(_OWORD *)(v26 - 19) = *(_OWORD *)(v38 - 19);
        *((_OWORD *)v26 - 3) = v48;
        *((_OWORD *)v26 - 2) = v49;
        *((_OWORD *)v26 - 4) = v47;
        v26 -= 224;
        v38 -= 224;
      }
      while (v38 != v39);
      v38 = (char *)*v4;
    }
    *v4 = v26;
    v4[1] = v20;
    v4[2] = v27;
    if (v38)
      operator delete(v38);
  }
  else
  {
    v10 = a2[1];
    *v5 = *a2;
    v5[1] = v10;
    v11 = a2[2];
    v12 = a2[3];
    v13 = a2[5];
    v5[4] = a2[4];
    v5[5] = v13;
    v5[2] = v11;
    v5[3] = v12;
    v14 = a2[6];
    v15 = a2[7];
    v16 = a2[9];
    v5[8] = a2[8];
    v5[9] = v16;
    v5[6] = v14;
    v5[7] = v15;
    v17 = a2[10];
    v18 = a2[11];
    v19 = a2[13];
    v5[12] = a2[12];
    v5[13] = v19;
    v5[10] = v17;
    v5[11] = v18;
    v20 = v5 + 14;
  }
  v4[1] = v20;
  return a1;
}

double sub_1007266B4(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  double v6;
  double result;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  double v18;

  if (!*(_BYTE *)(a1 + 568))
  {
    if (*(_BYTE *)a1 && !sub_1007268C4(a1, a2))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v4 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_DWORD *)(a1 + 564);
        v6 = *a2;
        *(_DWORD *)buf = 67240448;
        v16 = v5;
        v17 = 2050;
        v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,failed to predict on go to sleep call", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v8 = *(_DWORD *)(a1 + 564);
        v9 = *(_QWORD *)a2;
        v12[0] = 67240448;
        v12[1] = v8;
        v13 = 2050;
        v14 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,failed to predict on go to sleep call", v12, 18);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::deviceEnteringSleepMode(const CFTimeInterval &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    *(_BYTE *)(a1 + 568) = 1;
    result = *a2;
    *(double *)(a1 + 576) = *a2;
  }
  return result;
}

void sub_1007268B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1007268C4(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  uint64_t v8;
  _BOOL8 result;
  int v10;
  double v11;
  double v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  int v17;
  double v18;
  int v19;
  double v20;
  const char *v21;
  double v22;
  NSObject *v23;
  int v24;
  double v25;
  int v26;
  double v27;
  const char *v28;
  uint8_t *v29;
  NSObject *v30;
  int v31;
  double v32;
  int8x16_t v33;
  int8x16_t v34;
  double v35;
  double v36;
  float64x2_t v37;
  int8x16_t v38;
  NSObject *v39;
  int v40;
  double v41;
  int v42;
  double v43;
  const char *v44;
  NSObject *v45;
  int v46;
  double v47;
  int v48;
  double v49;
  const char *v50;
  NSObject *v51;
  int v52;
  double v53;
  int v54;
  double v55;
  const char *v56;
  double v57;
  double v58;
  double v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  NSObject *v66;
  int v67;
  double v68;
  double v69;
  int v70;
  double v71;
  double v72;
  const char *v73;
  uint8_t *v74;
  double v75;
  NSObject *v76;
  int v77;
  double v78;
  double v79;
  NSObject *v80;
  int v81;
  double v82;
  int v83;
  double v84;
  const char *v85;
  int v86;
  double v87;
  const char *v88;
  int v89;
  double v90;
  double v91;
  const char *v92;
  double v93;
  int8x16_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  int v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint8_t buf[4];
  int v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;

  if (!*(_BYTE *)a1)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v16 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_DWORD *)(a1 + 564);
      v18 = *a2;
      *(_DWORD *)buf = 67240448;
      v112 = v17;
      v113 = 2050;
      v114 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter is not initialized", buf, 0x12u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v19 = *(_DWORD *)(a1 + 564);
      v20 = *a2;
      v99 = 67240448;
      v100 = v19;
      v101 = 2050;
      v102 = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter is not initialized", &v99, 18);
      v15 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v21);
      goto LABEL_19;
    }
    return result;
  }
  sub_1007294E4(a1, a2);
  if (!*(_BYTE *)(a1 + 560))
  {
    v22 = *a2 - *(double *)(a1 + 352);
    v98 = v22;
    if (v22 < 0.0)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v23 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_DWORD *)(a1 + 564);
        v25 = *a2;
        *(_DWORD *)buf = 67240704;
        v112 = v24;
        v113 = 2050;
        v114 = v25;
        v115 = 2050;
        v116 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,dT < 0,dt,%{public}.6f", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v26 = *(_DWORD *)(a1 + 564);
      v27 = *a2;
      v99 = 67240704;
      v100 = v26;
      v101 = 2050;
      v102 = v27;
      v103 = 2050;
      v104 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,dT < 0,dt,%{public}.6f", &v99, 28);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v28);
      goto LABEL_116;
    }
    if (v22 < 0.001)
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v30 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(_DWORD *)(a1 + 564);
        v32 = *a2;
        *(_DWORD *)buf = 67240704;
        v112 = v31;
        v113 = 2050;
        v114 = v32;
        v115 = 2050;
        v116 = v22;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,small dt,%{public}.6f", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v83 = *(_DWORD *)(a1 + 564);
      v84 = *a2;
      v99 = 67240704;
      v100 = v83;
      v101 = 2050;
      v102 = v84;
      v103 = 2050;
      v104 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,predict state skipped,small dt,%{public}.6f", &v99, 28);
      v29 = (uint8_t *)v85;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v85);
LABEL_116:
      if (v29 != buf)
        free(v29);
      return 1;
    }
    if (!sub_100729990(a1, &v98))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v39 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_DWORD *)(a1 + 564);
        v41 = *a2;
        *(_DWORD *)buf = 67240448;
        v112 = v40;
        v113 = 2050;
        v114 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set Q", buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v42 = *(_DWORD *)(a1 + 564);
        v43 = *a2;
        v99 = 67240448;
        v100 = v42;
        v101 = 2050;
        v102 = v43;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set Q", &v99, 18);
        v15 = (uint8_t *)v44;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v44);
        goto LABEL_19;
      }
      return result;
    }
    if (!*(_BYTE *)(a1 + 456) || !*(_BYTE *)(a1 + 472))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v45 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        v46 = *(_DWORD *)(a1 + 564);
        v47 = *a2;
        *(_DWORD *)buf = 67240448;
        v112 = v46;
        v113 = 2050;
        v114 = v47;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set element of Phi", buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v48 = *(_DWORD *)(a1 + 564);
        v49 = *a2;
        v99 = 67240448;
        v100 = v48;
        v101 = 2050;
        v102 = v49;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed to set element of Phi", &v99, 18);
        v15 = (uint8_t *)v50;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v50);
        goto LABEL_19;
      }
      return result;
    }
    if (!sub_100729D88(a1, &v98))
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v51 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
      {
        v52 = *(_DWORD *)(a1 + 564);
        v53 = *a2;
        *(_DWORD *)buf = 67240448;
        v112 = v52;
        v113 = 2050;
        v114 = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed on error cov propagation", buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v54 = *(_DWORD *)(a1 + 564);
        v55 = *a2;
        v99 = 67240448;
        v100 = v54;
        v101 = 2050;
        v102 = v55;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state failed on error cov propagation", &v99, 18);
        v15 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v56);
        goto LABEL_19;
      }
      return result;
    }
    if (!*(_BYTE *)(a1 + 424) || !*(_BYTE *)(a1 + 440))
    {
      v96 = 0.0;
      v97 = 0.0;
      if ((sub_1000F3890((double *)(a1 + 480), &v97, &v96, *(double *)(a1 + 8) * 57.2957795, *(double *)(a1 + 384)) & 1) == 0)
      {
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v80 = qword_1022A01B8;
        if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
        {
          v81 = *(_DWORD *)(a1 + 564);
          v82 = *a2;
          *(_DWORD *)buf = 67240448;
          v112 = v81;
          v113 = 2050;
          v114 = v82;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state calc_dNdE failed", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v86 = *(_DWORD *)(a1 + 564);
        v87 = *a2;
        v99 = 67240448;
        v100 = v86;
        v101 = 2050;
        v102 = v87;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,predict state calc_dNdE failed", &v99, 18);
        v15 = (uint8_t *)v88;
        sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v88);
LABEL_19:
        if (v15 != buf)
          free(v15);
        return 0;
      }
      *(double *)(a1 + 416) = v96;
      *(_BYTE *)(a1 + 424) = 1;
      *(double *)(a1 + 432) = v97;
      *(_BYTE *)(a1 + 440) = 1;
    }
    if (*(double *)(a1 + 368) > 5.0)
    {
      if (hypot(*(long double *)(a1 + 24), *(long double *)(a1 + 32)) > 0.0)
        sub_10072A170(a1);
      if (!*(_BYTE *)(a1 + 336) || fabs(*(double *)(a1 + 312)) >= 0.001)
        sub_10072A4A0(a1 + 296, (double *)(a1 + 368), (int *)(a1 + 344));
    }
    if (!*(_BYTE *)(a1 + 456) || !*(_BYTE *)(a1 + 472) || !*(_BYTE *)(a1 + 440))
      goto LABEL_126;
    v35 = *(double *)(a1 + 448);
    v36 = *(double *)(a1 + 24);
    *(double *)v33.i64 = *(double *)(a1 + 8) + v35 * v36 / *(double *)(a1 + 432);
    v34.i64[0] = 0x400921FB54442D18;
    v94 = v34;
    if (fabs(*(double *)v33.i64) > 3.14159265)
    {
      v37.f64[0] = NAN;
      v37.f64[1] = NAN;
      v93 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v37), v34, v33).i64;
      *(double *)v33.i64 = fmod(*(double *)v33.i64 + v93, 6.28318531) - v93;
    }
    if (*(double *)v33.i64 >= 1.57079633)
    {
      v38 = v94;
      *(double *)v33.i64 = *(double *)v94.i64 - *(double *)v33.i64;
    }
    else
    {
      v38 = v94;
      if (*(double *)v33.i64 < -1.57079633)
        *(double *)v33.i64 = -3.14159265 - *(double *)v33.i64;
    }
    *(_QWORD *)(a1 + 8) = v33.i64[0];
    if (!*(_BYTE *)(a1 + 424))
LABEL_126:
      sub_10028DF3C();
    v57 = *(double *)(a1 + 416);
    v58 = *(double *)(a1 + 16);
    v59 = *(double *)(a1 + 32);
    if (v57 <= 0.0)
      *(double *)v33.i64 = v58 + v35 * v59;
    else
      *(double *)v33.i64 = v58 + v35 * v59 / v57;
    if (fabs(*(double *)v33.i64) > *(double *)v38.i64)
    {
      v60.f64[0] = NAN;
      v60.f64[1] = NAN;
      v95 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v60), v38, v33).i64;
      *(double *)v33.i64 = fmod(*(double *)v33.i64 + v95, 6.28318531) - v95;
    }
    v61 = *(double *)(a1 + 464);
    *(_QWORD *)(a1 + 16) = v33.i64[0];
    *(double *)(a1 + 24) = v61 * v36;
    *(double *)(a1 + 32) = v61 * v59;
    v62 = *(double *)(a1 + 40);
    v97 = v62 * sub_10072A75C((_DWORD *)(a1 + 344));
    v63 = *(double *)(a1 + 120);
    v96 = v63 * sub_10072A75C((_DWORD *)(a1 + 344));
    sub_10072A788(a1 + 296, (double *)(a1 + 448), (double *)(a1 + 464), &v97, &v96);
    v64 = *(double *)(a1 + 368);
    v65 = v22 + *(double *)(a1 + 360);
    *(double *)(a1 + 352) = *a2;
    *(double *)(a1 + 360) = v65;
    *(double *)(a1 + 368) = v22 + v64;
    if (v22 + v64 <= 600.0)
    {
      v75 = *(double *)(a1 + 168) + *(double *)(a1 + 208);
      *(double *)(a1 + 552) = v75;
      if (v75 <= 2.25e10)
        goto LABEL_106;
      *(_BYTE *)(a1 + 560) = 1;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v76 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v77 = *(_DWORD *)(a1 + 564);
        v78 = *a2;
        v79 = *(double *)(a1 + 552);
        *(_DWORD *)buf = 67240960;
        v112 = v77;
        v113 = 2050;
        v114 = v78;
        v115 = 2050;
        v116 = v79;
        v117 = 2050;
        v118 = 0x4214F46B04000000;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum position uncertainty growth reached,%{public}.1f,max,%{public}.1f", buf, 0x26u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_106;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v89 = *(_DWORD *)(a1 + 564);
      v90 = *a2;
      v91 = *(double *)(a1 + 552);
      v99 = 67240960;
      v100 = v89;
      v101 = 2050;
      v102 = v90;
      v103 = 2050;
      v104 = v91;
      v105 = 2050;
      v106 = 0x4214F46B04000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum position uncertainty growth reached,%{public}.1f,max,%{public}.1f", &v99, 38);
      v74 = (uint8_t *)v92;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v92);
    }
    else
    {
      *(_BYTE *)(a1 + 560) = 1;
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v66 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v67 = *(_DWORD *)(a1 + 564);
        v68 = *a2;
        v69 = *(double *)(a1 + 368);
        *(_DWORD *)buf = 67240704;
        v112 = v67;
        v113 = 2050;
        v114 = v68;
        v115 = 2050;
        v116 = v69;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum forward predictive dead-reckoning time reached,%{public}.2f", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_106;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v70 = *(_DWORD *)(a1 + 564);
      v71 = *a2;
      v72 = *(double *)(a1 + 368);
      v99 = 67240704;
      v100 = v70;
      v101 = 2050;
      v102 = v71;
      v103 = 2050;
      v104 = v72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum forward predictive dead-reckoning time reached,%{public}.2f", &v99, 28);
      v74 = (uint8_t *)v73;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v73);
    }
    if (v74 != buf)
      free(v74);
LABEL_106:
    sub_100728E48(a1, (uint64_t)"predict state success");
    return 1;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 564);
    v6 = *a2;
    v7 = *(double *)(a1 + 368);
    v8 = *(_QWORD *)(a1 + 552);
    *(_DWORD *)buf = 67241472;
    v112 = v5;
    v113 = 2050;
    v114 = v6;
    v115 = 2050;
    v116 = v7;
    v117 = 2050;
    v118 = 0x4082C00000000000;
    v119 = 2050;
    v120 = v8;
    v121 = 2050;
    v122 = 0x4214F46B04000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum dead reckoning threshold reached,DRtime,%{public}.2f,max,%{public}.2f,PosVar,%{public}.1f,max,%{public}.1f", buf, 0x3Au);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v10 = *(_DWORD *)(a1 + 564);
    v11 = *a2;
    v12 = *(double *)(a1 + 368);
    v13 = *(_QWORD *)(a1 + 552);
    v99 = 67241472;
    v100 = v10;
    v101 = 2050;
    v102 = v11;
    v103 = 2050;
    v104 = v12;
    v105 = 2050;
    v106 = 0x4082C00000000000;
    v107 = 2050;
    v108 = v13;
    v109 = 2050;
    v110 = 0x4214F46B04000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,maximum dead reckoning threshold reached,DRtime,%{public}.2f,max,%{public}.2f,PosVar,%{public}.1f,max,%{public}.1f", &v99, 58);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictState(const CFTimeInterval &)", "%s\n", v14);
    goto LABEL_19;
  }
  return result;
}

void sub_100727B2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100727B38(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  double v9;
  int v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  int v15;
  double v16;
  int v17;
  double v18;
  const char *v19;
  int v20;
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;

  if (*(_BYTE *)(a1 + 568))
  {
    v4 = *a2;
    v5 = *(double *)(a1 + 576);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v6 = v4 - v5;
    v7 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 564);
      v9 = *a2;
      *(_DWORD *)buf = 67240704;
      v27 = v8;
      v28 = 2050;
      v29 = v9;
      v30 = 2050;
      v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,sleep wakeup after [s],%{public}.2f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v10 = *(_DWORD *)(a1 + 564);
      v11 = *a2;
      v20 = 67240704;
      v21 = v10;
      v22 = 2050;
      v23 = v11;
      v24 = 2050;
      v25 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,sleep wakeup after [s],%{public}.2f", &v20, 28);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::deviceSleepWakeup(const CFTimeInterval &)", "%s\n", v12);
LABEL_19:
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v14 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_DWORD *)(a1 + 564);
      v16 = *a2;
      *(_DWORD *)buf = 67240448;
      v27 = v15;
      v28 = 2050;
      v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,sleep wakeup called while state is not in sleep mode, waking up", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v17 = *(_DWORD *)(a1 + 564);
      v18 = *a2;
      v20 = 67240448;
      v21 = v17;
      v22 = 2050;
      v23 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,sleep wakeup called while state is not in sleep mode, waking up", &v20, 18);
      v13 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::deviceSleepWakeup(const CFTimeInterval &)", "%s\n", v19);
      goto LABEL_19;
    }
  }
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0xBFF0000000000000;
}

void sub_100727EA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100727EB0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*(_BYTE *)a1)
    return sub_1007280AC(a1, a2);
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v4 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 564);
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v6 = *(_DWORD *)(a1 + 564);
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter is not initialized", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::getFilterLatestEstimate(LCFusionProviderLocation &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return 0;
}

void sub_1007280A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1007280AC(uint64_t a1, uint64_t a2)
{
  double v3;
  double v5;
  long double v6;
  long double v7;
  long double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  uint64_t v19;
  double v20;
  float64x2_t v21;

  if (!*(_BYTE *)a1)
    return 0;
  v3 = *(double *)(a1 + 352);
  if (v3 <= 0.0)
    return 0;
  v21 = vmulq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  v5 = sqrt(*(double *)(a1 + 168) + *(double *)(a1 + 208));
  v6 = *(double *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  v8 = hypot(v6, v7);
  v9 = *(double *)(a1 + 248);
  v10 = *(double *)(a1 + 288);
  v11 = fmax(sqrt(v9 + v10), 0.001);
  v12 = -1.0;
  if (v11 <= 30.0)
  {
    if (fabs(v6) > 0.005 || fabs(v7) > 0.005)
    {
      v15 = atan2(v7, v6);
      if (v15 < 0.0 || v15 >= 6.28318531)
      {
        v15 = fmod(v15, 6.28318531);
        if (v15 < 0.0)
          v15 = v15 + 6.28318531;
      }
      v13 = v15 * 57.2957795;
      *(double *)(a1 + 400) = v13;
      v16 = v6 * v6;
      v17 = v7 * v7;
      if (v6 * v6 < 0.000001)
        v16 = 0.000001;
      v18 = v17 >= 0.000001 || v6 * v6 < 0.000001;
      if (v6 * v6 < 0.000001 && v17 < 0.000001)
        v17 = 0.000001;
      if (!v18)
        v17 = 0.000001;
      v12 = sqrt((v9 * v17 + v10 * v16) * (1.0 / (v16 + v17) * (1.0 / (v16 + v17)))) * 57.2957795;
      if (v12 > 180.0)
        v12 = 180.0;
    }
    else
    {
      v13 = *(double *)(a1 + 400);
    }
  }
  else
  {
    v8 = -1.0;
    v13 = -1.0;
  }
  *(float64x2_t *)(a2 + 24) = v21;
  *(double *)(a2 + 40) = v5;
  *(long double *)(a2 + 80) = v8;
  *(double *)(a2 + 88) = v11;
  *(double *)(a2 + 96) = v13;
  *(double *)(a2 + 104) = v12;
  v19 = *(_QWORD *)(a1 + 536);
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(v19 + 128);
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v19 + 120);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 360);
  *(double *)(a2 + 16) = v3;
  if (*(_BYTE *)(a1 + 336) && *(double *)(a1 + 304) > 0.0)
  {
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 296);
    v20 = sqrt(*(double *)(a1 + 304));
  }
  else
  {
    *(_OWORD *)(a2 + 48) = xmmword_101BAFEE0;
    v20 = *(double *)(v19 + 56);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(v19 + 48);
  }
  *(double *)(a2 + 56) = v20;
  return 1;
}

uint64_t sub_1007282E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (*(_BYTE *)a1)
  {
    *a3 = *(_QWORD *)(a1 + 352);
    return sub_1007280AC(a1, a2);
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v5 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v7 = *(_DWORD *)(a1 + 564);
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter is not initialized", v10, 8);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::getFilterLatestEstimate(LCFusionProviderLocation &, CFTimeInterval &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return 0;
  }
}

void sub_1007284DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_1007284E8(uint64_t a1, double *a2, uint64_t *a3, _DWORD *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  int v11;
  uint64_t v13[2];

  sub_10072859C(a1);
  *(_DWORD *)(a1 + 344) = *a4;
  v8 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v11 = sub_1007286B4(a1, a2, v13);
    std::__shared_weak_count::__release_weak(v8);
    if (v11)
      goto LABEL_5;
  }
  else if ((sub_1007286B4(a1, a2, v13) & 1) != 0)
  {
LABEL_5:
    sub_100728E48(a1, (uint64_t)"filter init");
    return 1;
  }
  return 0;
}

void sub_10072859C(uint64_t a1)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 344) = 4;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 352) = _Q0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = _Q0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  memset_pattern16((void *)(a1 + 168), &unk_101BBEDB0, 0x80uLL);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 320) = xmmword_101BAFC90;
  if (*(_BYTE *)(a1 + 424))
    *(_BYTE *)(a1 + 424) = 0;
  if (*(_BYTE *)(a1 + 440))
    *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 520) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 528) = 0;
  v10 = 0uLL;
  sub_1002B7674(a1 + 536, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 552) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0xBFF0000000000000;
}

uint64_t sub_1007286B4(uint64_t a1, double *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  double *v8;
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  double v22;
  int v23;
  double v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  int v28;
  double v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSObject *v34;
  int v35;
  double v36;
  int v37;
  double v38;
  const char *v39;
  double v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __double2 v47;
  int v48;
  double v49;
  const char *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  double v56;
  __int16 v57;
  double v58;
  uint8_t buf[8];
  __int16 v60;
  double v61;

  sub_1007294E4(a1, a2);
  v54 = 0;
  v55 = 0;
  v6 = (std::__shared_weak_count *)a3[1];
  if (!v6
    || (v55 = std::__shared_weak_count::lock(v6)) == 0
    || (v7 = *a3, (v54 = v7) == 0)
    || *(double *)(v7 + 40) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v27 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v28 = *(_DWORD *)(a1 + 564);
      v29 = *a2;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v28;
      v60 = 2050;
      v61 = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter failed,null or hunc <= 0", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v48 = *(_DWORD *)(a1 + 564);
      v49 = *a2;
      LODWORD(v56) = 67240448;
      HIDWORD(v56) = v48;
      v57 = 2050;
      v58 = v49;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter failed,null or hunc <= 0", &v56, 18);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
    v19 = 0;
    goto LABEL_30;
  }
  sub_100349198((_QWORD *)(a1 + 536), &v54);
  *(double *)(a1 + 352) = *a2;
  v8 = (double *)v54;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(v54 + 8);
  if (v8[7] > 0.0)
  {
    *(_QWORD *)buf = 0;
    v9 = *(_DWORD *)(a1 + 344) - 1;
    v10 = 4.0;
    if (v9 <= 9)
      v10 = dbl_101BBF058[v9];
    v56 = v10;
    sub_10072B638(a1 + 296, v8 + 6, v8 + 7, (double *)buf, &v56, (int *)(a1 + 344));
    v8 = (double *)v54;
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(v54 + 48);
  }
  *(double *)(a1 + 8) = v8[3] * 0.0174532925;
  *(double *)(a1 + 16) = v8[4] * 0.0174532925;
  v11 = fmax(v8[5], 1.0);
  v12 = v8[10];
  if (v12 >= 0.0)
  {
    v13 = v8[11];
    if (v13 > 0.0)
    {
      v14 = v8[12];
      if (v14 >= 0.0)
      {
        v40 = v8[13];
        if (v40 > 0.0 && v40 < 360.0)
        {
          if (v13 >= 5.0)
            goto LABEL_55;
          v41 = *(_DWORD *)(a1 + 344);
          if ((v41 - 1) >= 5 && v41 != 10)
            goto LABEL_55;
          if (v12 >= 15.0)
          {
            v42 = 7;
          }
          else
          {
            if (v12 < 6.0)
            {
LABEL_55:
              *(double *)(a1 + 400) = v14;
              *(double *)(a1 + 408) = v40;
              v43 = v8[11];
              *(_OWORD *)(a1 + 256) = 0u;
              *(_OWORD *)(a1 + 272) = 0u;
              *(_OWORD *)(a1 + 224) = 0u;
              *(_OWORD *)(a1 + 240) = 0u;
              *(_OWORD *)(a1 + 192) = 0u;
              *(_OWORD *)(a1 + 208) = 0u;
              *(_OWORD *)(a1 + 176) = 0u;
              v44 = v43 * v43 * 0.5;
              v45 = v11 * v11 * 0.5;
              *(double *)(a1 + 168) = v45;
              *(double *)(a1 + 208) = v45;
              *(double *)(a1 + 248) = v44;
              *(double *)(a1 + 288) = v44;
              v46 = v8[10];
              v47 = __sincos_stret(v8[12] * 0.0174532925);
              *(double *)(a1 + 24) = v46 * v47.__cosval;
              *(double *)(a1 + 32) = v47.__sinval * v8[10];
              *(double *)(a1 + 392) = v8[10];
              goto LABEL_15;
            }
            v42 = 6;
          }
          *(_DWORD *)(a1 + 344) = v42;
          goto LABEL_55;
        }
      }
    }
  }
  v15 = *(_DWORD *)(a1 + 344) - 1;
  v16 = 20.0;
  if (v15 <= 9)
    v16 = dbl_101BBEDC0[v15];
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v17 = v16 * v16 * 0.5;
  v18 = v11 * v11 * 0.5;
  *(double *)(a1 + 168) = v18;
  *(double *)(a1 + 208) = v18;
  *(double *)(a1 + 248) = v17;
  *(double *)(a1 + 288) = v17;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
LABEL_15:
  v52 = 0;
  v53 = 0;
  v19 = sub_1000F3890((double *)(a1 + 480), (double *)&v53, (double *)&v52, v8[3], *(double *)(a1 + 384));
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)(a1 + 416) = v52;
    *(_BYTE *)(a1 + 424) = 1;
    *(_QWORD *)(a1 + 432) = v53;
    *(_BYTE *)(a1 + 440) = 1;
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 552) = 0xBFF0000000000000;
    *(_BYTE *)(a1 + 560) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v20 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_DWORD *)(a1 + 564);
      v22 = *a2;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v21;
      v60 = 2050;
      v61 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter reinitialized", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v23 = *(_DWORD *)(a1 + 564);
      v24 = *a2;
      LODWORD(v56) = 67240448;
      HIDWORD(v56) = v23;
      v57 = 2050;
      v58 = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,filter reinitialized", &v56, 18);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v25);
LABEL_44:
      if (v26 != buf)
        free(v26);
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v34 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v35 = *(_DWORD *)(a1 + 564);
      v36 = *a2;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v35;
      v60 = 2050;
      v61 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter calc_dNdE failed", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v37 = *(_DWORD *)(a1 + 564);
      v38 = *a2;
      LODWORD(v56) = 67240448;
      HIDWORD(v56) = v37;
      v57 = 2050;
      v58 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,reinitialize filter calc_dNdE failed", &v56, 18);
      v26 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::reinitialize(const CFTimeInterval &, const std::weak_ptr<const LCFusionProviderLocation>)", "%s\n", v39);
      goto LABEL_44;
    }
  }
LABEL_30:
  v30 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v19;
}

void sub_100728E3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100728E48(uint64_t a1, uint64_t a2)
{
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  int v35;
  char v36;
  int v37;
  _DWORD v38[2];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint8_t buf[4];
  int v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  uint64_t v112;

  v26 = off_1021B4BA0;
  __asm { FMOV            V0.2D, #-1.0 }
  v27 = _Q0;
  v30 = xmmword_101BAFC90;
  v31 = xmmword_101BAFC90;
  v32 = _Q0;
  v33 = _Q0;
  v34 = 0xBFF0000000000000;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v9 = sub_1007280AC(a1, (uint64_t)&v26);
  if ((_DWORD)v9)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v10 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_DWORD *)(a1 + 564);
      v12 = *(_DWORD *)(a1 + 528);
      v13 = *(_QWORD *)(a1 + 368);
      v14 = *(_DWORD *)(a1 + 344);
      v15 = *(_DWORD *)(a1 + 348);
      v16 = *(unsigned __int8 *)(a1 + 560);
      *(_DWORD *)buf = 67244803;
      v76 = v11;
      v77 = 2050;
      v78 = v27;
      v79 = 2050;
      v80 = *((_QWORD *)&v27 + 1);
      v81 = 1026;
      v82 = v37;
      v83 = 1026;
      v84 = v12;
      v85 = 2049;
      v86 = v28;
      v87 = 2049;
      v88 = v29;
      v89 = 2049;
      v90 = *((_QWORD *)&v30 + 1);
      v91 = 2050;
      v92 = v32;
      v93 = 2050;
      v94 = v33;
      v95 = 2050;
      v96 = v30;
      v97 = 2050;
      v98 = v31;
      v99 = 2050;
      v100 = *((_QWORD *)&v32 + 1);
      v101 = 2050;
      v102 = *((_QWORD *)&v33 + 1);
      v103 = 2050;
      v104 = v13;
      v105 = 1026;
      v106 = v14;
      v107 = 1026;
      v108 = v15;
      v109 = 1026;
      v110 = v16;
      v111 = 2082;
      v112 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "KFCV:FilterStateLog,%{public}d,%{public}.3f,%{public}.3f,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}d,%{public}d,%{public}d,%{public}s", buf, 0xA8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v18 = *(_DWORD *)(a1 + 564);
      v19 = *(_DWORD *)(a1 + 528);
      v20 = *(_QWORD *)(a1 + 368);
      v21 = *(_DWORD *)(a1 + 344);
      v22 = *(_DWORD *)(a1 + 348);
      v23 = *(unsigned __int8 *)(a1 + 560);
      v38[0] = 67244803;
      v38[1] = v18;
      v39 = 2050;
      v40 = v27;
      v41 = 2050;
      v42 = *((_QWORD *)&v27 + 1);
      v43 = 1026;
      v44 = v37;
      v45 = 1026;
      v46 = v19;
      v47 = 2049;
      v48 = v28;
      v49 = 2049;
      v50 = v29;
      v51 = 2049;
      v52 = *((_QWORD *)&v30 + 1);
      v53 = 2050;
      v54 = v32;
      v55 = 2050;
      v56 = v33;
      v57 = 2050;
      v58 = v30;
      v59 = 2050;
      v60 = v31;
      v61 = 2050;
      v62 = *((_QWORD *)&v32 + 1);
      v63 = 2050;
      v64 = *((_QWORD *)&v33 + 1);
      v65 = 2050;
      v66 = v20;
      v67 = 1026;
      v68 = v21;
      v69 = 1026;
      v70 = v22;
      v71 = 1026;
      v72 = v23;
      v73 = 2082;
      v74 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:FilterStateLog,%{public}d,%{public}.3f,%{public}.3f,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.2f,%{public}d,%{public}d,%{public}d,%{public}s", v38, 168);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::debugPrintFilterState(const char *)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
  }
  return v9;
}

void sub_100729208(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100729214(uint64_t a1, double *a2, _DWORD *a3)
{
  int v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  double v14;
  _BOOL8 result;
  int v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  double v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  double v27;

  sub_1007294E4(a1, a2);
  if (!*(_BYTE *)a1)
  {
    *(_DWORD *)(a1 + 344) = *a3;
    return 1;
  }
  if ((*a3 - 2) >= 9 && *a3 != 0)
  {
    sub_1007296FC(a1, a2, -1.0);
    v20 = *a3;
LABEL_24:
    *(_DWORD *)(a1 + 344) = v20;
    sub_100728E48(a1, (uint64_t)"DynamicsMode-based propagation and update");
    return 1;
  }
  if (sub_1007268C4(a1, a2))
  {
    v20 = *a3;
    v7 = *a3 - 1;
    v8 = 20.0;
    if (v7 <= 9)
      v8 = dbl_101BBEDC0[v7];
    v9 = v8 * v8 * 0.5;
    if (*(double *)(a1 + 248) > v9 || *(double *)(a1 + 288) > v9)
    {
      v10 = *(_QWORD *)(a1 + 176);
      v11 = *(_QWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 200) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 184) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_QWORD *)(a1 + 280) = 0;
      *(_OWORD *)(a1 + 264) = 0u;
      *(double *)(a1 + 248) = v9;
      *(double *)(a1 + 288) = v9;
      *(_QWORD *)(a1 + 200) = v10;
      *(_QWORD *)(a1 + 208) = v11;
    }
    goto LABEL_24;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v12 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_DWORD *)(a1 + 564);
    v14 = *a2;
    *(_DWORD *)buf = 67240448;
    v25 = v13;
    v26 = 2050;
    v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,DynamicsMode-based prediction failed", buf, 0x12u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v16 = *(_DWORD *)(a1 + 564);
    v17 = *a2;
    v21[0] = 67240448;
    v21[1] = v16;
    v22 = 2050;
    v23 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,DynamicsMode-based prediction failed", v21, 18);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::predictOnDynamicsModeUpdate(const CFTimeInterval &, const LCFusionDynamicsMode &)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
    return 0;
  }
  return result;
}

void sub_1007294D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_1007294E4(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  double v9;
  int v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  if (*(_BYTE *)(a1 + 568))
  {
    v4 = *a2;
    v5 = *(double *)(a1 + 576);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v6 = v4 - v5;
    v7 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(a1 + 564);
      v9 = *a2;
      *(_DWORD *)buf = 67240704;
      v20 = v8;
      v21 = 2050;
      v22 = v9;
      v23 = 2050;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,called while state is in sleep mode,%{public}.2f,waking up", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v10 = *(_DWORD *)(a1 + 564);
      v11 = *a2;
      v14[0] = 67240704;
      v14[1] = v10;
      v15 = 2050;
      v16 = v11;
      v17 = 2050;
      v18 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,called while state is in sleep mode,%{public}.2f,waking up", v14, 28);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::checkAndUpdateSleepState(const CFTimeInterval &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_BYTE *)(a1 + 568) = 0;
    *(_QWORD *)(a1 + 576) = 0xBFF0000000000000;
  }
}

void sub_1007296F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_1007296FC(uint64_t a1, double *a2, double a3)
{
  double v5;
  double v6;
  NSObject *v8;
  int v9;
  double v10;
  _BOOL8 v11;
  int v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  _BYTE v18[20];
  __int16 v19;
  double v20;
  uint8_t buf[8];
  _BYTE v22[32];

  v5 = *a2;
  v6 = *(double *)(a1 + 352);
  if (a3 < 0.0 || v5 >= v6)
  {
LABEL_14:
    *(double *)buf = v5;
    *(_OWORD *)v22 = xmmword_101BBED90;
    *(_OWORD *)&v22[16] = xmmword_101BBED90;
    v11 = sub_10072BC74(a1, (uint64_t)buf);
    if (*(_BYTE *)(a1 + 336))
    {
      v17 = v5;
      *(_OWORD *)v18 = xmmword_101BBEDA0;
      return v11 & sub_10072D138(a1, &v17);
    }
    return v11;
  }
  if (v6 - v5 <= a3)
  {
    v5 = v6 + 0.001;
    goto LABEL_14;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v8 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_DWORD *)(a1 + 564);
    v10 = *(double *)(a1 + 352);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v9;
    *(_WORD *)v22 = 2050;
    *(double *)&v22[2] = v10;
    *(_WORD *)&v22[10] = 2050;
    *(double *)&v22[12] = v10 - v5;
    *(_WORD *)&v22[20] = 2050;
    *(double *)&v22[22] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,time-lagged zupt is ignored,filter mct,%{public}.3f,zupt timelag,%{public}.3f,tolerance,%{public}.3f", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v13 = *(_DWORD *)(a1 + 564);
    v14 = *(double *)(a1 + 352);
    LODWORD(v17) = 67240960;
    HIDWORD(v17) = v13;
    *(_WORD *)v18 = 2050;
    *(double *)&v18[2] = v14;
    *(_WORD *)&v18[10] = 2050;
    *(double *)&v18[12] = v14 - v5;
    v19 = 2050;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,time-lagged zupt is ignored,filter mct,%{public}.3f,zupt timelag,%{public}.3f,tolerance,%{public}.3f", &v17, 38);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::zupt(const CFTimeInterval &, const double)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return 0;
}

void sub_100729984(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100729990(uint64_t a1, double *a2)
{
  double v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  NSObject *v12;
  int v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;
  double v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  double v30;
  double v31;
  BOOL v32;
  BOOL v33;
  double v34;
  _DWORD v36[4];
  uint8_t buf[4];
  int v38;

  v3 = *a2;
  if (*a2 >= 0.0)
  {
    v4 = *(_DWORD *)(a1 + 348);
    if (v4 == 2)
    {
      v17 = *(_DWORD *)(a1 + 344) - 1;
      if (v17 > 9)
      {
        v19 = 12.5;
        v18 = 0.01;
      }
      else
      {
        v18 = dbl_101BBEE60[v17];
        v19 = dbl_101BBEEB0[v17];
      }
      v22 = exp(-(v18 * v3));
      v24 = exp(v3 * (v18 * -2.0));
      v25 = 1.0 - v22;
      v26 = 1.0 - v24;
      if (1.0 - v22 < 0.0
        || ((v27 = COERCE__INT64(fabs(1.0 - v22)) - 1,
             (unint64_t)(COERCE__INT64(fabs(1.0 - v22)) - 0x10000000000000) >> 53 >= 0x3FF)
          ? (v28 = v27 >= 0xFFFFFFFFFFFFFLL)
          : (v28 = 0),
            v28 ? (v29 = *(_QWORD *)&v25 == 0) : (v29 = 1),
            !v29))
      {
        v25 = 0.0;
      }
      v30 = v18 * v18;
      v31 = v18 + v18;
      if (v26 < 0.0
        || (((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
          ? (v32 = (*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL)
          : (v32 = 0),
            v32 ? (v33 = *(_QWORD *)&v26 == 0) : (v33 = 1),
            !v33))
      {
        v26 = 0.0;
      }
      v34 = v19 / v30;
      v7 = v19 / v30 * (v3 + -2.0 / v18 * v25 + 1.0 / v31 * v26);
      v8 = v34 * (v25 + v26 * -0.5);
      v9 = v19 / v31 * v26;
      v23 = 1.0 / v18 * v25;
    }
    else
    {
      v5 = v3 * v3;
      v6 = v3 * (v3 * v3);
      if (v4 == 1)
      {
        v20 = *(int *)(a1 + 344);
        v21 = 0.0;
        if (v20 <= 0xA)
          v21 = dbl_101BBEF00[v20];
        v7 = v5 * v5 * v21 * 0.25;
        v8 = v6 * v21 * 0.5;
        v9 = v5 * v21;
      }
      else
      {
        v7 = 0.0;
        v8 = 0.0;
        v9 = 0.0;
        if (v4)
        {
LABEL_45:
          *(_OWORD *)(a1 + 80) = 0u;
          *(_OWORD *)(a1 + 96) = 0u;
          *(_OWORD *)(a1 + 128) = 0u;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 112) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)(a1 + 64) = 0u;
          *(double *)(a1 + 40) = v7;
          *(double *)(a1 + 80) = v7;
          *(double *)(a1 + 120) = v9;
          *(double *)(a1 + 160) = v9;
          *(double *)(a1 + 56) = v8;
          *(double *)(a1 + 96) = v8;
          *(double *)(a1 + 104) = v8;
          *(double *)(a1 + 144) = v8;
          return v3 >= 0.0;
        }
        v10 = *(_DWORD *)(a1 + 344) - 1;
        if (v10 > 9)
          v11 = 68.0;
        else
          v11 = dbl_101BBEE10[v10];
        v7 = v6 * v11 * 0.333333333;
        v8 = v5 * v11 * 0.5;
        v9 = v3 * v11;
      }
      v22 = 1.0;
      v23 = *a2;
    }
    *(double *)(a1 + 448) = v23;
    *(_BYTE *)(a1 + 456) = 1;
    *(double *)(a1 + 464) = v22;
    *(_BYTE *)(a1 + 472) = 1;
    goto LABEL_45;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v12 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_DWORD *)(a1 + 564);
    *(_DWORD *)buf = 67240192;
    v38 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,set Q failed,dT < 0", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v14 = *(_DWORD *)(a1 + 564);
    v36[0] = 67240192;
    v36[1] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,set Q failed,dT < 0", v36, 8);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::setProcessNoise(const double &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  return v3 >= 0.0;
}

void sub_100729D7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_100729D88(uint64_t a1, double *a2)
{
  NSObject *v3;
  int v4;
  _BOOL8 result;
  int v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  int v27;
  int v28;
  uint8_t buf[8];
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;

  if (*a2 >= 0.0)
  {
    if (*(_BYTE *)(a1 + 456) && *(_BYTE *)(a1 + 472))
    {
      v9 = 0;
      v10 = *(double *)(a1 + 448);
      v11 = *(double *)(a1 + 464);
      v12 = *(double *)(a1 + 184);
      v13 = *(double *)(a1 + 192);
      v14 = *(double *)(a1 + 208);
      v15 = *(double *)(a1 + 216);
      v16 = *(double *)(a1 + 224);
      v17 = *(double *)(a1 + 248);
      v18 = *(double *)(a1 + 256);
      v19 = *(double *)(a1 + 288);
      v20 = *(double *)(a1 + 176) + v10 * v15 + v10 * v13 + v10 * v10 * v18;
      *(double *)buf = *(double *)(a1 + 168) + v10 * v12 * 2.0 + v10 * v10 * v17;
      v30 = v20;
      v21 = v10 * v11 * v17 + v11 * v12;
      v22 = v10 * v11 * v18;
      v31 = v21;
      v32 = v22 + v11 * v13;
      v35 = v22 + v11 * v15;
      v36 = v10 * v11 * v19 + v11 * v16;
      v39 = v11 * v11 * v17;
      v40 = v11 * v11 * v18;
      v33 = v20;
      v34 = v14 + v10 * v16 * 2.0 + v10 * v10 * v19;
      v37 = v21;
      v38 = v35;
      v41 = v32;
      v42 = v36;
      v43 = v40;
      v44 = v11 * v11 * v19;
      do
      {
        *(float64x2_t *)(a1 + v9 + 168) = vaddq_f64(*(float64x2_t *)&buf[v9], *(float64x2_t *)(a1 + v9 + 40));
        v9 += 16;
      }
      while (v9 != 128);
      return 1;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v23 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,P propagation,elements of Phi not set", buf, 8u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v25 = *(_DWORD *)(a1 + 564);
      v27 = 67240192;
      v28 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,P propagation,elements of Phi not set", &v27, 8);
      v8 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::propagateErrorCovMat(const double &)", "%s\n", v26);
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v3 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,P propagation failed,dT < 0", buf, 8u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v6 = *(_DWORD *)(a1 + 564);
      v27 = 67240192;
      v28 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,P propagation failed,dT < 0", &v27, 8);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::propagateErrorCovMat(const double &)", "%s\n", v7);
LABEL_24:
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_10072A164(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10072A170(uint64_t a1)
{
  long double v2;
  long double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  const char *v22;
  uint8_t *v23;
  _DWORD v24[2];
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;

  v3 = *(double *)(a1 + 24);
  v2 = *(double *)(a1 + 32);
  v4 = hypot(v3, v2);
  if (v4 >= 0.001)
  {
    v5 = *(double *)(a1 + 368);
    v6 = 0.0;
    if (v5 > 5.0)
    {
      v7 = 1.0;
      v8 = 1.0 - (v5 + -5.0) * (v5 + -5.0) / ((v5 + 5.0) * (v5 + 5.0));
      if (v8 <= 1.0)
        v9 = 1.0 - (v5 + -5.0) * (v5 + -5.0) / ((v5 + 5.0) * (v5 + 5.0));
      else
        v9 = 1.0;
      if (v8 >= 0.0)
        v10 = v9;
      else
        v10 = 0.0;
      v11 = *(double *)(a1 + 376);
      if (v11 > 0.0)
      {
        v12 = 1.0 - (v11 + -5.0) * (v11 + -5.0) / ((v11 + 5.0) * (v11 + 5.0));
        if (v12 <= 1.0)
          v7 = 1.0 - (v11 + -5.0) * (v11 + -5.0) / ((v11 + 5.0) * (v11 + 5.0));
        if (v12 < 0.0)
          v7 = 0.0;
        if (v7 != 0.0)
          v10 = v10 / v7;
      }
      v13 = v10 * v10;
      *(double *)(a1 + 376) = v5;
      *(long double *)(a1 + 24) = v3 * v13;
      *(long double *)(a1 + 32) = v2 * v13;
      v6 = *(double *)(a1 + 392) - v4 * v13;
    }
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v14 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_DWORD *)(a1 + 564);
      v16 = *(double *)(a1 + 392);
      *(_DWORD *)buf = 67240960;
      v32 = v15;
      v33 = 2050;
      v34 = v16;
      v35 = 2050;
      v36 = v16 - v6;
      v37 = 2050;
      v38 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,starting speed,%{public}.2f,current speed,%{public}.2f,total speed decay,%{public}.2f", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v20 = *(_DWORD *)(a1 + 564);
      v21 = *(double *)(a1 + 392);
      v24[0] = 67240960;
      v24[1] = v20;
      v25 = 2050;
      v26 = v21;
      v27 = 2050;
      v28 = v21 - v6;
      v29 = 2050;
      v30 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,starting speed,%{public}.2f,current speed,%{public}.2f,total speed decay,%{public}.2f", v24, 38);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::decaySpeed()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    v17 = *(int *)(a1 + 344);
    v18 = 0.0;
    if (v17 <= 0xA)
      v18 = dbl_101BBEF00[v17];
    if (v4 * v4 > v18)
    {
      v19 = v6 * v6 * 0.125;
      *(double *)(a1 + 288) = v19 + *(double *)(a1 + 288);
      *(double *)(a1 + 248) = v19 + *(double *)(a1 + 248);
    }
  }
}

void sub_10072A494(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10072A4A0(uint64_t a1, double *a2, int *a3)
{
  double v4;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(double *)(a1 + 16);
    if (fabs(v4) >= 0.001)
    {
      v6 = 0.0;
      if (*a2 > 5.0)
      {
        v7 = 1.0;
        v8 = 1.0 - (*a2 + -5.0) / (*a2 + 5.0);
        if (v8 <= 1.0)
          v7 = 1.0 - (*a2 + -5.0) / (*a2 + 5.0);
        v9 = v8 < 0.0;
        v10 = 0.0;
        if (!v9)
          v10 = v7;
        v6 = *(double *)(a1 + 32) - v4 * v10;
        *(double *)(a1 + 16) = v10 * v4;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v11 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 134349568;
        v27 = v12;
        v28 = 2050;
        v29 = v13;
        v30 = 2050;
        v31 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "KFCV:,starting altitudeRate,%{public}.2f,current altitudeRate,%{public}.2f,total altitudeRate decay,%{public}.2f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(_QWORD *)(a1 + 16);
        v20 = 134349568;
        v21 = v16;
        v22 = 2050;
        v23 = v17;
        v24 = 2050;
        v25 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,starting altitudeRate,%{public}.2f,current altitudeRate,%{public}.2f,total altitudeRate decay,%{public}.2f", &v20, 32);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::decayAltitudeRate(const double &, const LCFusionDynamicsMode &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      v14 = *a3;
      v15 = 0.0;
      if (v14 <= 0xA)
        v15 = dbl_101BBEF00[v14] * dbl_101BBEF58[v14];
      if (*(double *)(a1 + 16) * *(double *)(a1 + 16) > v15)
        *(double *)(a1 + 24) = v6 * v6 * 0.25 + *(double *)(a1 + 24);
    }
  }
}

void sub_10072A750(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_10072A75C(_DWORD *a1)
{
  int v1;

  v1 = *a1 - 1;
  if (v1 > 9)
    return 0.00694444444;
  else
    return dbl_101BBEFB0[v1];
}

BOOL sub_10072A788(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v6;
  double v7;
  double v8;
  _BOOL8 result;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  if (!*(_BYTE *)(a1 + 40))
    return 0;
  v6 = *(double *)(a1 + 8);
  if (v6 > 0.0)
  {
    v7 = *(double *)(a1 + 24);
    if (v7 > 0.0)
    {
      v8 = *(double *)(a1 + 16);
      *(double *)a1 = *(double *)a1 + *a2 * v8;
      *(double *)(a1 + 16) = v8 * *a3;
      *(double *)(a1 + 8) = v6 + *a4;
      *(double *)(a1 + 24) = v7 + *a5;
      return 1;
    }
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v10 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    v11 = *(unsigned __int8 *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240704;
    v25 = v11;
    v26 = 2050;
    v27 = v12;
    v28 = 2050;
    v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "KFCV:,#Error,propagateAltitude() failed,initialized,%{public}d,altVar,%{public}.2f,altRateVar,%{public}.2f", buf, 0x1Cu);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v14 = *(unsigned __int8 *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 24);
    v19[0] = 67240704;
    v19[1] = v14;
    v20 = 2050;
    v21 = v15;
    v22 = 2050;
    v23 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,#Error,propagateAltitude() failed,initialized,%{public}d,altVar,%{public}.2f,altRateVar,%{public}.2f", v19, 28);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::propagateAltitude(const double &, const double &, const double &, const double &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
    return 0;
  }
  return result;
}

void sub_10072A9D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10072A9DC(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  int v10;

  v10 = *(_DWORD *)(a1 + 344);
  v4 = (std::__shared_weak_count *)a3[1];
  v9[0] = *a3;
  v9[1] = (uint64_t)v4;
  if (!v4)
    return sub_10072AA58(a1, a2, &v10, v9, a4);
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  v7 = sub_10072AA58(a1, a2, &v10, v9, a4);
  std::__shared_weak_count::__release_weak(v4);
  return v7;
}

uint64_t sub_10072AA58(uint64_t a1, double *a2, int *a3, uint64_t *a4, uint64_t a5)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  double v13;
  NSObject *v14;
  int v15;
  double v16;
  int v17;
  double v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  int v22;
  double v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v28;
  int v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  char v48;
  NSObject *v49;
  int v50;
  double v51;
  int v52;
  double v53;
  const char *v54;
  uint8_t *v55;
  NSObject *v56;
  int v57;
  double v58;
  int v59;
  double v60;
  const char *v61;
  NSObject *v62;
  int v63;
  double v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  double v75;
  const char *v76;
  uint8_t *v77;
  int v78;
  double v79;
  const char *v80;
  int v81;
  double v82;
  const char *v83;
  int v84;
  uint64_t v85[2];
  int v86;
  int v87;
  __int16 v88;
  double v89;
  _DWORD __dst[86];
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];
  uint64_t v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;
  uint8_t buf[4];
  int v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;

  sub_1007294E4(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a5 + 72))(a5);
  v10 = (std::__shared_weak_count *)a4[1];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = *a4;
      if (*a4)
      {
        if (*(double *)(v12 + 40) > 0.0)
        {
          v13 = *a2 - *(double *)(v12 + 16);
          if (v13 < 0.0)
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v14 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v15 = *(_DWORD *)(a1 + 564);
              v16 = *a2;
              *(_DWORD *)buf = 67240704;
              v108 = v15;
              v109 = 2050;
              v110 = v16;
              v111 = 2050;
              v112 = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location skipped,dT <= 0,dt,%{public}.7f", buf, 0x1Cu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_32;
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v17 = *(_DWORD *)(a1 + 564);
            v18 = *a2;
            __dst[0] = 67240704;
            __dst[1] = v17;
            LOWORD(__dst[2]) = 2050;
            *(double *)((char *)&__dst[2] + 2) = v18;
            HIWORD(__dst[4]) = 2050;
            *(double *)&__dst[5] = v13;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location skipped,dT <= 0,dt,%{public}.7f", __dst, 28);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v19);
LABEL_76:
            if (v20 != buf)
              free(v20);
LABEL_32:
            v31 = *(_OWORD *)(v12 + 8);
            v32 = *(_OWORD *)(v12 + 24);
            v33 = *(_OWORD *)(v12 + 40);
            *(_OWORD *)(a5 + 56) = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(a5 + 40) = v33;
            *(_OWORD *)(a5 + 24) = v32;
            *(_OWORD *)(a5 + 8) = v31;
            v34 = *(_OWORD *)(v12 + 72);
            v35 = *(_OWORD *)(v12 + 88);
            v36 = *(_OWORD *)(v12 + 104);
            *(_OWORD *)(a5 + 116) = *(_OWORD *)(v12 + 116);
            *(_OWORD *)(a5 + 104) = v36;
            *(_OWORD *)(a5 + 88) = v35;
            *(_OWORD *)(a5 + 72) = v34;
            v24 = 1;
LABEL_21:
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
            return v24;
          }
          if (v13 < 0.001)
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v28 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v29 = *(_DWORD *)(a1 + 564);
              v30 = *a2;
              *(_DWORD *)buf = 67240704;
              v108 = v29;
              v109 = 2050;
              v110 = v30;
              v111 = 2050;
              v112 = v13;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate state skipped,small dt,%{public}.7f", buf, 0x1Cu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_32;
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v78 = *(_DWORD *)(a1 + 564);
            v79 = *a2;
            __dst[0] = 67240704;
            __dst[1] = v78;
            LOWORD(__dst[2]) = 2050;
            *(double *)((char *)&__dst[2] + 2) = v79;
            HIWORD(__dst[4]) = 2050;
            *(double *)&__dst[5] = v13;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate state skipped,small dt,%{public}.7f", __dst, 28);
            v20 = (uint8_t *)v80;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v80);
            goto LABEL_76;
          }
          memcpy(__dst, (const void *)a1, 0x151uLL);
          v91 = *(_DWORD *)(a1 + 344);
          v37 = *(_OWORD *)(a1 + 492);
          v100 = *(_OWORD *)(a1 + 476);
          v101 = v37;
          *(_OWORD *)v102 = *(_OWORD *)(a1 + 508);
          *(_OWORD *)&v102[12] = *(_OWORD *)(a1 + 520);
          v38 = *(_OWORD *)(a1 + 428);
          v96 = *(_OWORD *)(a1 + 412);
          v97 = v38;
          v39 = *(_OWORD *)(a1 + 460);
          v98 = *(_OWORD *)(a1 + 444);
          v99 = v39;
          v40 = *(_OWORD *)(a1 + 364);
          v92 = *(_OWORD *)(a1 + 348);
          v93 = v40;
          v41 = *(_OWORD *)(a1 + 396);
          v94 = *(_OWORD *)(a1 + 380);
          v95 = v41;
          v103 = *(_QWORD *)(a1 + 536);
          v42 = *(std::__shared_weak_count **)(a1 + 544);
          v104 = v42;
          if (v42)
          {
            v43 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v45 = *(_OWORD *)(a1 + 568);
          v105 = *(_OWORD *)(a1 + 552);
          v106 = v45;
          v85[0] = v12;
          v85[1] = (uint64_t)v11;
          p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v47 = __ldxr(p_shared_weak_owners);
          while (__stxr(v47 + 1, p_shared_weak_owners));
          v84 = *a3;
          v48 = sub_1007284E8(a1, (double *)(v12 + 16), v85, &v84);
          std::__shared_weak_count::__release_weak(v11);
          if ((v48 & 1) != 0)
          {
            *(_DWORD *)(a1 + 344) = *a3;
            if (sub_1007268C4(a1, a2))
            {
              if ((sub_1007282E4(a1, a5, (_QWORD *)(a5 + 16)) & 1) != 0)
              {
                v24 = 1;
LABEL_64:
                memcpy((void *)a1, __dst, 0x151uLL);
                *(_DWORD *)(a1 + 344) = v91;
                v65 = v101;
                *(_OWORD *)(a1 + 476) = v100;
                *(_OWORD *)(a1 + 492) = v65;
                *(_OWORD *)(a1 + 508) = *(_OWORD *)v102;
                *(_OWORD *)(a1 + 520) = *(_OWORD *)&v102[12];
                v66 = v97;
                *(_OWORD *)(a1 + 412) = v96;
                *(_OWORD *)(a1 + 428) = v66;
                v67 = v99;
                *(_OWORD *)(a1 + 444) = v98;
                *(_OWORD *)(a1 + 460) = v67;
                v68 = v93;
                *(_OWORD *)(a1 + 348) = v92;
                *(_OWORD *)(a1 + 364) = v68;
                v69 = v95;
                *(_OWORD *)(a1 + 380) = v94;
                *(_OWORD *)(a1 + 396) = v69;
                sub_100349198((_QWORD *)(a1 + 536), &v103);
                v70 = v106;
                *(_OWORD *)(a1 + 552) = v105;
                *(_OWORD *)(a1 + 568) = v70;
                v71 = v104;
                if (v104)
                {
                  v72 = (unint64_t *)&v104->__shared_owners_;
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                goto LABEL_21;
              }
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_102150460);
              v62 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v63 = *(_DWORD *)(a1 + 564);
                v64 = *a2;
                *(_DWORD *)buf = 67240448;
                v108 = v63;
                v109 = 2050;
                v110 = v64;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,get predicted location", buf, 0x12u);
              }
              if (!sub_1001BFF7C(115, 2))
              {
LABEL_63:
                v24 = 0;
                goto LABEL_64;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_102150460);
              v81 = *(_DWORD *)(a1 + 564);
              v82 = *a2;
              v86 = 67240448;
              v87 = v81;
              v88 = 2050;
              v89 = v82;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,get predicted location", &v86, 18);
              v55 = (uint8_t *)v83;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v83);
            }
            else
            {
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_102150460);
              v56 = qword_1022A01B8;
              if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
              {
                v57 = *(_DWORD *)(a1 + 564);
                v58 = *a2;
                *(_DWORD *)buf = 67240448;
                v108 = v57;
                v109 = 2050;
                v110 = v58;
                _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,predict", buf, 0x12u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_63;
              bzero(buf, 0x65CuLL);
              if (qword_1022A01B0 != -1)
                dispatch_once(&qword_1022A01B0, &stru_102150460);
              v59 = *(_DWORD *)(a1 + 564);
              v60 = *a2;
              v86 = 67240448;
              v87 = v59;
              v88 = 2050;
              v89 = v60;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,predict", &v86, 18);
              v55 = (uint8_t *)v61;
              sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v61);
            }
          }
          else
          {
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v49 = qword_1022A01B8;
            if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
            {
              v50 = *(_DWORD *)(a1 + 564);
              v51 = *a2;
              *(_DWORD *)buf = 67240448;
              v108 = v50;
              v109 = 2050;
              v110 = v51;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,init", buf, 0x12u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_63;
            bzero(buf, 0x65CuLL);
            if (qword_1022A01B0 != -1)
              dispatch_once(&qword_1022A01B0, &stru_102150460);
            v52 = *(_DWORD *)(a1 + 564);
            v53 = *a2;
            v86 = 67240448;
            v87 = v52;
            v88 = 2050;
            v89 = v53;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,mct,%{public}.3f,propagate location failed,init", &v86, 18);
            v55 = (uint8_t *)v54;
            sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v54);
          }
          if (v55 != buf)
            free(v55);
          goto LABEL_63;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v21 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    v22 = *(_DWORD *)(a1 + 564);
    v23 = *a2;
    *(_DWORD *)buf = 67240448;
    v108 = v22;
    v109 = 2050;
    v110 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,propagate location failed,null or hunc <= 0", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v74 = *(_DWORD *)(a1 + 564);
    v75 = *a2;
    __dst[0] = 67240448;
    __dst[1] = v74;
    LOWORD(__dst[2]) = 2050;
    *(double *)((char *)&__dst[2] + 2) = v75;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,mct,%{public}.3f,#Error,propagate location failed,null or hunc <= 0", __dst, 18);
    v77 = (uint8_t *)v76;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::propagateLocation(const CFTimeInterval &, const LCFusionDynamicsMode, const std::weak_ptr<const LCFusionProviderLocation>, LCFusionProviderLocation &)", "%s\n", v76);
    if (v77 != buf)
      free(v77);
  }
  v24 = 0;
  if (v11)
    goto LABEL_21;
  return v24;
}

void sub_10072B62C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10072B638(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int *a6)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  const char *v23;
  uint8_t *v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  unsigned int v32;
  double v33;
  NSObject *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  const char *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  const char *v48;
  int v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  uint8_t buf[4];
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;

  v10 = *a6;
  if (v10 > 0xA)
    v11 = 18000.0;
  else
    v11 = dbl_101BBF000[v10];
  v12 = *a2;
  if (*a2 > v11 || v12 < -500.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v25 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v26 = *a2;
      v27 = *a3;
      v28 = *a4;
      v29 = *a5;
      *(_DWORD *)buf = 134284289;
      v58 = v26;
      v59 = 2050;
      v60 = v27;
      v61 = 2050;
      v62 = v28;
      v63 = 2050;
      v64 = v29;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "KFCV:,#Error,invalid altitude,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v44 = *a2;
    v45 = *a3;
    v46 = *a4;
    v47 = *a5;
    v49 = 134284289;
    v50 = v44;
    v51 = 2050;
    v52 = v45;
    v53 = 2050;
    v54 = v46;
    v55 = 2050;
    v56 = v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,#Error,invalid altitude,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", &v49, 42);
    v24 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::initialize(const double &, const double &, const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v48);
    goto LABEL_43;
  }
  if (*a5 <= 0.0)
    goto LABEL_10;
  v13 = 4.0;
  if ((v10 - 1) <= 9)
    v13 = dbl_101BBF058[(int)v10 - 1];
  if (*a5 > v13)
  {
LABEL_10:
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v14 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v15 = *a2;
      v16 = *a3;
      v17 = *a4;
      v18 = *a5;
      *(_DWORD *)buf = 134284289;
      v58 = v15;
      v59 = 2050;
      v60 = v16;
      v61 = 2050;
      v62 = v17;
      v63 = 2050;
      v64 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRateUnc,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v19 = *a2;
    v20 = *a3;
    v21 = *a4;
    v22 = *a5;
    v49 = 134284289;
    v50 = v19;
    v51 = 2050;
    v52 = v20;
    v53 = 2050;
    v54 = v21;
    v55 = 2050;
    v56 = v22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,invalid altRateUnc,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", &v49, 42);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::initialize(const double &, const double &, const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v23);
LABEL_43:
    if (v24 != buf)
      free(v24);
    return 0;
  }
  v32 = v10 - 1;
  if (v32 > 9)
    v33 = 1600.0;
  else
    v33 = dbl_101BBF0A8[v32];
  if (*a4 * *a4 > v33)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v34 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v35 = *a2;
      v36 = *a3;
      v37 = *a4;
      v38 = *a5;
      *(_DWORD *)buf = 134284289;
      v58 = v35;
      v59 = 2050;
      v60 = v36;
      v61 = 2050;
      v62 = v37;
      v63 = 2050;
      v64 = v38;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRate,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v39 = *a2;
    v40 = *a3;
    v41 = *a4;
    v42 = *a5;
    v49 = 134284289;
    v50 = v39;
    v51 = 2050;
    v52 = v40;
    v53 = 2050;
    v54 = v41;
    v55 = 2050;
    v56 = v42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,invalid altRate,alt,%{private}.2f,altUnc,%{public}.2f,altRate,%{public}.2f,altRateUnc,%{public}.2f", &v49, 42);
    v24 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::initialize(const double &, const double &, const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v43);
    goto LABEL_43;
  }
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = *a3 * *a3;
  *(double *)(a1 + 16) = *a4;
  *(double *)(a1 + 24) = *a5 * *a5;
  *(double *)(a1 + 32) = *a4;
  if (*a3 < 1.0)
    *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  v30 = 1;
  *(_BYTE *)(a1 + 40) = 1;
  return v30;
}

void sub_10072BC68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10072BC74(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  int v20;
  double v21;
  _BOOL8 v22;
  double v24;
  NSObject *v25;
  int v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  double v31;
  const char *v32;
  double v33;
  long double v34;
  double v35;
  long double v36;
  double v37;
  double v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  double v45;
  double v46;
  int8x16_t v47;
  int8x16_t v48;
  NSObject *v49;
  int v50;
  int8x16_t v51;
  int8x16_t v52;
  int v53;
  const char *v54;
  uint8_t *v55;
  NSObject *v56;
  int v57;
  double v58;
  double v59;
  int v60;
  uint64_t v61;
  double v62;
  const char *v63;
  NSObject *v64;
  int v65;
  int v66;
  const char *v67;
  double v68;
  double v69;
  double v70;
  NSObject *v71;
  int v72;
  int v73;
  const char *v74;
  uint8_t *v75;
  NSObject *v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  double v83;
  const char *v84;
  int v85;
  const char *v86;
  uint8_t *v87;
  uint64_t v88;
  double v89;
  int v90;
  int v91;
  __int16 v92;
  double v93;
  __int16 v94;
  uint64_t v95;
  float64x2_t v96;
  double v97;
  double v98;
  _BYTE v99[48];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint8_t buf[8];
  __int16 v105;
  double v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;

  if (!*(_BYTE *)a1)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_DWORD *)(a1 + 564);
      v21 = *(double *)a2;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v20;
      v105 = 2050;
      v106 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized GSpeed Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v82 = *(_DWORD *)(a1 + 564);
    v83 = *(double *)a2;
    *(_DWORD *)v99 = 67240448;
    *(_DWORD *)&v99[4] = v82;
    *(_WORD *)&v99[8] = 2050;
    *(double *)&v99[10] = v83;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter is not initialized GSpeed Meas ignored,mct,%{public}.3f", v99, 18);
    v18 = (uint8_t *)v84;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v84);
    goto LABEL_83;
  }
  if (*(double *)a2 <= 0.0
    || *(double *)(a2 + 16) <= 0.0
    || *(double *)(a2 + 8) < 0.0
    || *(double *)(a2 + 24) < 0.0
    || (v24 = *(double *)(a2 + 32), v24 <= 0.0)
    || v24 > 0.616850275)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v4 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 564);
      v6 = *(double *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)buf = 67241473;
      *(_DWORD *)&buf[4] = v5;
      v105 = 2050;
      v106 = v6;
      v107 = 2049;
      v108 = v7;
      v109 = 2050;
      v110 = v8;
      v111 = 2049;
      v112 = v9;
      v113 = 2050;
      v114 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,invalid GSpeed Meas ignored,timetagMCT,%{public}.3f,GSpeedmps,%{private}.2f,speedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f", buf, 0x3Au);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v11 = *(_DWORD *)(a1 + 564);
    v12 = *(double *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 24);
    v16 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)v99 = 67241473;
    *(_DWORD *)&v99[4] = v11;
    *(_WORD *)&v99[8] = 2050;
    *(double *)&v99[10] = v12;
    *(_WORD *)&v99[18] = 2049;
    *(_QWORD *)&v99[20] = v13;
    *(_WORD *)&v99[28] = 2050;
    *(_QWORD *)&v99[30] = v14;
    *(_WORD *)&v99[38] = 2049;
    *(_QWORD *)&v99[40] = v15;
    LOWORD(v100) = 2050;
    *(_QWORD *)((char *)&v100 + 2) = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,invalid GSpeed Meas ignored,timetagMCT,%{public}.3f,GSpeedmps,%{private}.2f,speedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f", v99, 58);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v17);
    goto LABEL_83;
  }
  if (*(double *)a2 - *(double *)(a1 + 352) < 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v25 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_DWORD *)(a1 + 564);
      v27 = *(double *)(a1 + 352);
      v28 = *(double *)a2;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v26;
      v105 = 2050;
      v106 = v27;
      v107 = 2050;
      v108 = *(_QWORD *)&v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,old GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v29 = *(_DWORD *)(a1 + 564);
    v30 = *(_QWORD *)(a1 + 352);
    v31 = *(double *)a2;
    *(_DWORD *)v99 = 67240704;
    *(_DWORD *)&v99[4] = v29;
    *(_WORD *)&v99[8] = 2050;
    *(_QWORD *)&v99[10] = v30;
    *(_WORD *)&v99[18] = 2050;
    *(double *)&v99[20] = v31;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,old GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", v99, 28);
    v18 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v32);
LABEL_83:
    if (v18 != buf)
      free(v18);
    return 0;
  }
  if (!sub_1007268C4(a1, (double *)a2))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v56 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v57 = *(_DWORD *)(a1 + 564);
      v58 = *(double *)(a1 + 352);
      v59 = *(double *)a2;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v57;
      v105 = 2050;
      v106 = v58;
      v107 = 2050;
      v108 = *(_QWORD *)&v59;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter time-update failed GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v60 = *(_DWORD *)(a1 + 564);
    v61 = *(_QWORD *)(a1 + 352);
    v62 = *(double *)a2;
    *(_DWORD *)v99 = 67240704;
    *(_DWORD *)&v99[4] = v60;
    *(_WORD *)&v99[8] = 2050;
    *(_QWORD *)&v99[10] = v61;
    *(_WORD *)&v99[18] = 2050;
    *(double *)&v99[20] = v62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter time-update failed GSpeed Meas ignored,filterMCT,%{public}.3f,GSpeedMeasMCT,%{public}.3f", v99, 28);
    v18 = (uint8_t *)v63;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v63);
    goto LABEL_83;
  }
  v33 = *(double *)(a2 + 8);
  v34 = *(double *)(a2 + 24);
  v35 = sin(v34);
  v36 = cos(sqrt(*(double *)(a2 + 32)));
  v37 = sqrt(*(double *)(a2 + 16));
  v38 = v37 * (1.0 / v36) * (v37 * (1.0 / v36)) * 0.5;
  v39 = *(_QWORD *)(a1 + 168);
  v40 = *(_OWORD *)(a1 + 192);
  v102 = *(_OWORD *)(a1 + 176);
  v103 = v40;
  v41 = *(_OWORD *)(a1 + 264);
  v42 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)&v99[32] = *(_OWORD *)(a1 + 248);
  v100 = v41;
  v43 = *(_QWORD *)(a1 + 208);
  v101 = v42;
  v44 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)v99 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v99[16] = v44;
  v45 = *(double *)(a1 + 248);
  v46 = v38 + v45;
  if (v38 + v45 <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v64 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v65 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,GSpeed velN innovation_var <= 0", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v66 = *(_DWORD *)(a1 + 564);
    LODWORD(v96.f64[0]) = 67240192;
    HIDWORD(v96.f64[0]) = v66;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,GSpeed velN innovation_var <= 0", &v96, 8);
    v18 = (uint8_t *)v67;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v67);
    goto LABEL_83;
  }
  *(double *)v47.i64 = cos(v34);
  *(double *)v48.i64 = *(double *)(a1 + 216) / v46;
  v96.f64[0] = *(double *)(a1 + 184) / v46;
  *(_QWORD *)&v96.f64[1] = v48.i64[0];
  *(double *)v48.i64 = *(double *)(a1 + 280) / v46;
  v97 = v45 / v46;
  v98 = *(double *)v48.i64;
  v89 = v33 * *(double *)v47.i64 - *(double *)(a1 + 24);
  if (v89 * v89 / v46 <= 100.0)
  {
    *(double *)v47.i64 = v89 * v89;
    sub_10072CB18(a1, &v89, v96.f64, v47, 100.0, v48);
    *(_QWORD *)buf = 0x3FF0000000000000;
    sub_10072CE64(a1, &v96, 2, (double *)buf);
  }
  else
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v49 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v50 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v50;
      v105 = 2050;
      v106 = v89 * v89 / v46;
      v107 = 2050;
      v108 = 0x4059000000000000;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,GSpeed velN innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v53 = *(_DWORD *)(a1 + 564);
      v90 = 67240704;
      v91 = v53;
      v92 = 2050;
      v93 = v89 * v89 / v46;
      v94 = 2050;
      v95 = 0x4059000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,GSpeed velN innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", &v90, 28);
      v55 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
  }
  v68 = *(double *)(a1 + 288);
  *(double *)v51.i64 = v38 + v68;
  v22 = v38 + v68 > 0.0;
  if (v38 + v68 <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v76 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v77 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v77;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,GSpeed velE innovation_var <= 0", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v85 = *(_DWORD *)(a1 + 564);
      v90 = 67240192;
      v91 = v85;
      LODWORD(v88) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,GSpeed velE innovation_var <= 0", &v90, v88);
      v87 = (uint8_t *)v86;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v86);
      if (v87 != buf)
        free(v87);
    }
    *(_QWORD *)(a1 + 168) = v39;
    v78 = v103;
    v79 = v101;
    *(_OWORD *)(a1 + 176) = v102;
    *(_OWORD *)(a1 + 192) = v78;
    *(_QWORD *)(a1 + 208) = v43;
    v80 = v100;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)&v99[32];
    *(_OWORD *)(a1 + 264) = v80;
    *(_OWORD *)(a1 + 280) = v79;
    v81 = *(_OWORD *)&v99[16];
    *(_OWORD *)(a1 + 216) = *(_OWORD *)v99;
    *(_OWORD *)(a1 + 232) = v81;
  }
  else
  {
    v69 = *(double *)(a1 + 224) / *(double *)v51.i64;
    v96.f64[0] = *(double *)(a1 + 192) / *(double *)v51.i64;
    v96.f64[1] = v69;
    v97 = *(double *)(a1 + 256) / *(double *)v51.i64;
    v98 = v68 / *(double *)v51.i64;
    v89 = v33 * v35 - *(double *)(a1 + 32);
    v52.i64[0] = 0x4059000000000000;
    v70 = v89 * v89 / *(double *)v51.i64;
    if (v70 <= 100.0)
    {
      sub_10072CB18(a1, &v89, v96.f64, v51, v89 * v89, v52);
      *(_QWORD *)buf = 0x3FF0000000000000;
      sub_10072CE64(a1, &v96, 3, (double *)buf);
    }
    else
    {
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v71 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v72 = *(_DWORD *)(a1 + 564);
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)&buf[4] = v72;
        v105 = 2050;
        v106 = v70;
        v107 = 2050;
        v108 = 0x4059000000000000;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,GSpeed velE innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v73 = *(_DWORD *)(a1 + 564);
        v90 = 67240704;
        v91 = v73;
        v92 = 2050;
        v93 = v70;
        v94 = 2050;
        v95 = 0x4059000000000000;
        LODWORD(v88) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,GSpeed velE innovation test failed,nis,%{public}.3f,threshold,%{public}.3f", &v90, v88);
        v75 = (uint8_t *)v74;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithGroundSpeed(const GroundSpeedMeasurement &)", "%s\n", v74);
        if (v75 != buf)
          free(v75);
      }
    }
    *(_QWORD *)(a1 + 168) = v39;
    *(_QWORD *)(a1 + 208) = v43;
    *(_QWORD *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 560) = 0;
    sub_100728E48(a1, (uint64_t)"update with GSpeed success");
  }
  return v22;
}

void sub_10072CB0C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10072CB18(uint64_t a1, double *a2, double *a3, int8x16_t a4, double a5, int8x16_t a6)
{
  float64x2_t v9;
  int8x16_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  int8x16_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[4];
  uint8_t buf[4];
  int v30;

  if (*(_BYTE *)(a1 + 424) && *(_BYTE *)(a1 + 440))
    goto LABEL_5;
  v26 = 0;
  v27 = 0;
  if ((sub_1000F3890((double *)(a1 + 480), (double *)&v27, (double *)&v26, *(double *)(a1 + 8) * 57.2957795, *(double *)(a1 + 384)) & 1) != 0)
  {
    *(_QWORD *)(a1 + 416) = v26;
    *(_BYTE *)(a1 + 424) = 1;
    *(_QWORD *)(a1 + 432) = v27;
    *(_BYTE *)(a1 + 440) = 1;
LABEL_5:
    *(double *)a4.i64 = *(double *)(a1 + 8) + *a2 * *a3 / *(double *)(a1 + 432);
    a6.i64[0] = 0x400921FB54442D18;
    v24 = a6;
    if (fabs(*(double *)a4.i64) > 3.14159265)
    {
      v9.f64[0] = NAN;
      v9.f64[1] = NAN;
      v23 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v9), a6, a4).i64;
      *(double *)a4.i64 = fmod(*(double *)a4.i64 + v23, 6.28318531) - v23;
    }
    if (*(double *)a4.i64 >= 1.57079633)
    {
      v10 = v24;
      *(double *)a4.i64 = *(double *)v24.i64 - *(double *)a4.i64;
    }
    else
    {
      v10 = v24;
      if (*(double *)a4.i64 < -1.57079633)
        *(double *)a4.i64 = -3.14159265 - *(double *)a4.i64;
    }
    *(_QWORD *)(a1 + 8) = a4.i64[0];
    v11 = *(double *)(a1 + 416);
    v12 = *(double *)(a1 + 16);
    v13 = a3[1];
    v14 = *a2;
    if (v11 <= 0.0)
      *(double *)a4.i64 = v12 + v13 * v14;
    else
      *(double *)a4.i64 = v12 + v13 * v14 / v11;
    if (fabs(*(double *)a4.i64) > *(double *)v10.i64)
    {
      v15.f64[0] = NAN;
      v15.f64[1] = NAN;
      v25 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v15), v10, a4).i64;
      *(double *)a4.i64 = fmod(*(double *)a4.i64 + v25, 6.28318531) - v25;
    }
    *(_QWORD *)(a1 + 16) = a4.i64[0];
    v16 = *(double *)(a1 + 32);
    *(double *)(a1 + 24) = *(double *)(a1 + 24) + a3[2] * *a2;
    *(double *)(a1 + 32) = v16 + a3[3] * *a2;
    return 1;
  }
  if (qword_1022A01B0 != -1)
    dispatch_once(&qword_1022A01B0, &stru_102150460);
  v18 = qword_1022A01B8;
  if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
  {
    v19 = *(_DWORD *)(a1 + 564);
    *(_DWORD *)buf = 67240192;
    v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,updateStateVector calc_dNdE failed", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v20 = *(_DWORD *)(a1 + 564);
    v28[0] = 67240192;
    v28[1] = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,updateStateVector calc_dNdE failed", v28, 8);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateStateVector(const double &, const std::array<double, 4> &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  return 0;
}

void sub_10072CE58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

double sub_10072CE64(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4)
{
  uint64_t v5;
  double *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const double *v11;
  const double *v12;
  double v13;
  const double *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double *v21;
  uint64_t i;
  double result;
  NSObject *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _DWORD v41[4];
  uint8_t buf[4];
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  float64x2x4_t v52;

  v5 = 0;
  v6 = (double *)(a1 + 168);
  v7 = *(_OWORD *)(a1 + 248);
  v48 = *(_OWORD *)(a1 + 232);
  v49 = v7;
  v8 = *(_OWORD *)(a1 + 280);
  v50 = *(_OWORD *)(a1 + 264);
  v51 = v8;
  v9 = *(_OWORD *)(a1 + 184);
  v44 = *(_OWORD *)(a1 + 168);
  v45 = v9;
  v10 = *(_OWORD *)(a1 + 216);
  v46 = *(_OWORD *)(a1 + 200);
  v47 = v10;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v11 = (const double *)(a1 + 168 + 32 * a3);
  v12 = v11 + 3;
  v13 = *a4;
  v14 = v11 + 2;
  v15 = vld1q_dup_f64(v11++);
  v16 = vld1q_dup_f64(v11);
  v17 = vld1q_dup_f64(v14);
  v18 = vld1q_dup_f64(v12);
  do
  {
    v19 = *a2++;
    v20 = vmulq_n_f64(v19, v13);
    v52.val[0] = vmulq_f64(v20, v15);
    v52.val[1] = vmulq_f64(v20, v16);
    v52.val[2] = vmulq_f64(v20, v17);
    v52.val[3] = vmulq_f64(v20, v18);
    v21 = (double *)((char *)&v33 + v5);
    vst4q_f64(v21, v52);
    v5 += 64;
  }
  while (v5 != 128);
  for (i = 0; i != 16; i += 2)
    *(float64x2_t *)&v6[i] = vsubq_f64(*(float64x2_t *)&v6[i], *(float64x2_t *)((char *)&v33 + i * 8));
  if (*v6 <= 0.0
    || *(double *)(a1 + 208) <= 0.0
    || *(double *)(a1 + 248) <= 0.0
    || (result = *(double *)(a1 + 288), result <= 0.0))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v24 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_DWORD *)(a1 + 564);
      *(_DWORD *)buf = 67240192;
      v43 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "KFCV:,ID,%{public}d,#Error,error covariance matrix diagonal element < 0", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v30 = *(_DWORD *)(a1 + 564);
      v41[0] = 67240192;
      v41[1] = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,ID,%{public}d,#Error,error covariance matrix diagonal element < 0", v41, 8, v33, v34, v35, v36, v37, v38, v39, v40);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::updateErrorCovMat(const std::array<double, 4> &, std::size_t, const double &)", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    v26 = v49;
    *((_OWORD *)v6 + 4) = v48;
    *((_OWORD *)v6 + 5) = v26;
    v27 = v51;
    *((_OWORD *)v6 + 6) = v50;
    *((_OWORD *)v6 + 7) = v27;
    v28 = v45;
    *(_OWORD *)v6 = v44;
    *((_OWORD *)v6 + 1) = v28;
    result = *(double *)&v46;
    v29 = v47;
    *((_OWORD *)v6 + 2) = v46;
    *((_OWORD *)v6 + 3) = v29;
  }
  return result;
}

void sub_10072D12C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10072D138(uint64_t a1, double *a2)
{
  NSObject *v4;
  int v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  int v14;
  double v15;
  int v16;
  double v17;
  const char *v18;
  NSObject *v19;
  int v20;
  double v21;
  double v22;
  uint64_t v23;
  int v24;
  double v25;
  double v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  int v30;
  double v31;
  int v33;
  double v34;
  const char *v35;
  int v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;

  if (!*(_BYTE *)a1)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v13 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a1 + 564);
      v15 = *a2;
      *(_DWORD *)buf = 67240448;
      v45 = v14;
      v46 = 2050;
      v47 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter is not initialized VVel Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v16 = *(_DWORD *)(a1 + 564);
    v17 = *a2;
    v36 = 67240448;
    v37 = v16;
    v38 = 2050;
    v39 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter is not initialized VVel Meas ignored,mct,%{public}.3f", &v36, 18);
    v12 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithVerticalVelocity(const VerticalVelocityMeasurement &)", "%s\n", v18);
    goto LABEL_40;
  }
  if (!*(_BYTE *)(a1 + 336))
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v29 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v30 = *(_DWORD *)(a1 + 564);
      v31 = *a2;
      *(_DWORD *)buf = 67240448;
      v45 = v30;
      v46 = 2050;
      v47 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,filter has no altitude data, VVel Meas ignored,mct,%{public}.3f", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v33 = *(_DWORD *)(a1 + 564);
    v34 = *a2;
    v36 = 67240448;
    v37 = v33;
    v38 = 2050;
    v39 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,filter has no altitude data, VVel Meas ignored,mct,%{public}.3f", &v36, 18);
    v12 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithVerticalVelocity(const VerticalVelocityMeasurement &)", "%s\n", v35);
    goto LABEL_40;
  }
  if (*a2 <= 0.0 || a2[2] <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v19 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_DWORD *)(a1 + 564);
      v21 = *a2;
      v22 = a2[1];
      v23 = *((_QWORD *)a2 + 2);
      *(_DWORD *)buf = 67240961;
      v45 = v20;
      v46 = 2050;
      v47 = v21;
      v48 = 2049;
      v49 = v22;
      v50 = 2050;
      v51 = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,invalid VVel Meas ignored,timetagMCT,%{public}.3f,VVel_mps,%{private}.2f,VVelVar,%{public}.2f", buf, 0x26u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v24 = *(_DWORD *)(a1 + 564);
    v25 = *a2;
    v26 = a2[1];
    v27 = *((_QWORD *)a2 + 2);
    v36 = 67240961;
    v37 = v24;
    v38 = 2050;
    v39 = v25;
    v40 = 2049;
    v41 = v26;
    v42 = 2050;
    v43 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,invalid VVel Meas ignored,timetagMCT,%{public}.3f,VVel_mps,%{private}.2f,VVelVar,%{public}.2f", &v36, 38);
    v12 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithVerticalVelocity(const VerticalVelocityMeasurement &)", "%s\n", v28);
    goto LABEL_40;
  }
  if (*a2 - *(double *)(a1 + 352) < 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v4 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_DWORD *)(a1 + 564);
      v6 = *(double *)(a1 + 352);
      v7 = *a2;
      *(_DWORD *)buf = 67240704;
      v45 = v5;
      v46 = 2050;
      v47 = v6;
      v48 = 2050;
      v49 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "KFCV:,ID,%{public}d,old VVel Meas ignored,filterMCT,%{public}.3f,VVelMCT,%{public}.3f", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v8 = *(_DWORD *)(a1 + 564);
    v9 = *(double *)(a1 + 352);
    v10 = *a2;
    v36 = 67240704;
    v37 = v8;
    v38 = 2050;
    v39 = v9;
    v40 = 2050;
    v41 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,ID,%{public}d,old VVel Meas ignored,filterMCT,%{public}.3f,VVelMCT,%{public}.3f", &v36, 28);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::updateWithVerticalVelocity(const VerticalVelocityMeasurement &)", "%s\n", v11);
LABEL_40:
    if (v12 != buf)
      free(v12);
    return 0;
  }
  return sub_10072D7FC(a1 + 296, a2 + 1, a2 + 2, (_DWORD *)(a1 + 344));
}

void sub_10072D7F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

BOOL sub_10072D7FC(uint64_t a1, double *a2, double *a3, _DWORD *a4)
{
  int v7;
  double v8;
  NSObject *v9;
  double v10;
  double v11;
  _BOOL8 result;
  double v13;
  double v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  double v23;
  double v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  const char *v30;
  int v31;
  _BYTE v32[18];
  uint8_t buf[4];
  _BYTE v34[18];

  if (!*(_BYTE *)(a1 + 40))
    return 0;
  if (*(double *)(a1 + 8) <= 0.0)
  {
    if (qword_1022A01B0 != -1)
      dispatch_once(&qword_1022A01B0, &stru_102150460);
    v17 = qword_1022A01B8;
    if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_ERROR))
    {
      v18 = *(unsigned __int8 *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v34 = v18;
      *(_WORD *)&v34[4] = 2050;
      *(_QWORD *)&v34[6] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "KFCV:,#Error,updateAltitudeRate() failed,initialized,%{public}d,altVar,%{public}.2f", buf, 0x12u);
    }
    result = sub_1001BFF7C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v20 = *(unsigned __int8 *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 8);
      v31 = 67240448;
      *(_DWORD *)v32 = v20;
      *(_WORD *)&v32[4] = 2050;
      *(_QWORD *)&v32[6] = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 16, "KFCV:,#Error,updateAltitudeRate() failed,initialized,%{public}d,altVar,%{public}.2f", &v31, 18);
      v16 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 0, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::updateAltitudeRate(const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v22);
      goto LABEL_23;
    }
  }
  else
  {
    if (*a3 <= 0.0)
      goto LABEL_7;
    v7 = *a4 - 1;
    v8 = 4.0;
    if (v7 <= 9)
      v8 = dbl_101BBF058[v7];
    if (*a3 <= v8)
    {
      v23 = *a2;
      if (v7 > 9)
        v24 = 1600.0;
      else
        v24 = dbl_101BBF0A8[v7];
      if (v23 * v23 <= v24)
      {
        *(double *)(a1 + 16) = v23;
        *(double *)(a1 + 24) = *a3 * *a3;
        *(double *)(a1 + 32) = *a2;
        return 1;
      }
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v25 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v26 = *a2;
        v27 = *a3;
        *(_DWORD *)buf = 134349312;
        *(double *)v34 = v26;
        *(_WORD *)&v34[8] = 2050;
        *(double *)&v34[10] = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRate,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v28 = *a2;
        v29 = *a3;
        v31 = 134349312;
        *(double *)v32 = v28;
        *(_WORD *)&v32[8] = 2050;
        *(double *)&v32[10] = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,invalid altRate,altRate,%{public}.2f,altRateUnc,%{public}.2f", &v31, 22);
        v16 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::updateAltitudeRate(const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v30);
        goto LABEL_23;
      }
    }
    else
    {
LABEL_7:
      if (qword_1022A01B0 != -1)
        dispatch_once(&qword_1022A01B0, &stru_102150460);
      v9 = qword_1022A01B8;
      if (os_log_type_enabled((os_log_t)qword_1022A01B8, OS_LOG_TYPE_DEBUG))
      {
        v10 = *a2;
        v11 = *a3;
        *(_DWORD *)buf = 134349312;
        *(double *)v34 = v10;
        *(_WORD *)&v34[8] = 2050;
        *(double *)&v34[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "KFCV:,invalid altRateUnc,altRate,%{public}.2f,altRateUnc,%{public}.2f", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01B0 != -1)
          dispatch_once(&qword_1022A01B0, &stru_102150460);
        v13 = *a2;
        v14 = *a3;
        v31 = 134349312;
        *(double *)v32 = v13;
        *(_WORD *)&v32[8] = 2050;
        *(double *)&v32[10] = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01B8, 2, "KFCV:,invalid altRateUnc,altRate,%{public}.2f,altRateUnc,%{public}.2f", &v31, 22);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "BOOL cllcf::LCFusionKalmanFilterCV::LCFusionAltitudePropagator::updateAltitudeRate(const double &, const double &, const LCFusionDynamicsMode &)", "%s\n", v15);
LABEL_23:
        if (v16 != buf)
          free(v16);
        return 0;
      }
    }
  }
  return result;
}

void sub_10072DD2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10072DD38(id a1)
{
  qword_1022A01B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

void sub_10072DE08(id a1)
{
  qword_102303BB0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLAccessoryLocationProviderSilo"));
}

uint64_t sub_10072DEBC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10072E4BC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303BD8 != -1)
    dispatch_once(&qword_102303BD8, block);
  return qword_102310C38;
}

uint64_t sub_10072E01C(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v2 = *(unsigned int *)(a1 + 2536);
  if (a2)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLAccessory,getAccessoryTypeBitSet,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v7[0] = 67240192;
      v7[1] = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,getAccessoryTypeBitSet,%{public}d", v7, 8);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "int32_t CLAccessoryLocationProvider::getAccessoryTypeBitSet(const BOOL) const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2;
}

uint64_t sub_10072E25C(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  int v12;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v15;
  int v16;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v4 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    Current = CFAbsoluteTimeGetCurrent();
    v15 = 1026;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,RouteListener,navstate,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v6 = qword_1022A0008;
    v9 = 134349312;
    v10 = CFAbsoluteTimeGetCurrent();
    v11 = 1026;
    v12 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "CLAccessoryAWD,%{public}.1lf,RouteListener,navstate,%{public}d", &v9, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onNavigationStateChange(const CLClientNavigationState)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_10115FDFC(a1 + 2544, a2);
}

void sub_10072E484(id a1)
{
  uint64_t v1;

  if (objc_opt_class(EAAccessory, v1))
  {
    sub_100197040();
    if ((sub_1001B796C() & 0x10) != 0)
      byte_102303BC8 = 1;
  }
}

void sub_10072E4BC()
{
  operator new();
}

void sub_10072E504()
{
  operator delete();
}

void sub_10072E528(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v9;

  v3 = sub_1006DAF10(a1, "accessory", a2);
  *(_DWORD *)(v3 + 116) = 0xFFFF;
  *(_QWORD *)v3 = off_1021504D0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_OWORD *)(v3 + 136) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  *(_OWORD *)(v3 + 152) = _Q0;
  *(_OWORD *)(v3 + 168) = _Q0;
  *(_OWORD *)(v3 + 184) = _Q0;
  *(_DWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 204) = 0xBFF0000000000000;
  *(_QWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 212) = 0;
  *(_DWORD *)(v3 + 228) = 0;
  *(_QWORD *)(v3 + 232) = 0xBFF0000000000000;
  *(_DWORD *)(v3 + 240) = 0x7FFFFFFF;
  *(_QWORD *)(v3 + 244) = 0;
  *(_QWORD *)(v3 + 252) = 0;
  *(_BYTE *)(v3 + 268) = 0;
  *(_QWORD *)(v3 + 260) = 0;
  sub_10012A33C(v3 + 272);
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_DWORD *)(a1 + 992) = 85;
  *(_QWORD *)(a1 + 1000) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1008) = v9;
  *(_OWORD *)(a1 + 1024) = v9;
  sub_100602438(a1 + 1040, *(void **)(a1 + 32), (uint64_t)sub_10072FB38, a1);
}

void sub_10072F818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **a12, uint64_t a13, id *a14, uint64_t a15, void **a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  void **v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = *(_QWORD *)(v44 + 6208);
  *(_QWORD *)(v44 + 6208) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  sub_100090AE4(v44 + 6144, *a12);
  sub_10065C930(v48);
  sub_10065C930(a13);
  sub_10065C930(v47);
  sub_1007312B4(a21);
  sub_1007312F4(a19);
  if (*(char *)(v44 + 1975) < 0)
    operator delete(*a16);
  sub_100067AC4(v44 + 1872);
  sub_100E3E4AC(a14);
  v51 = *v45;
  if (*v45)
  {
    *(_QWORD *)(v44 + 1616) = v51;
    operator delete(v51);
  }
  sub_100739D18(a18, 0);
  v52 = *(_QWORD *)(v44 + 1344);
  *(_QWORD *)(v44 + 1344) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *(_QWORD *)(v44 + 1336);
  *(_QWORD *)(v44 + 1336) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(v44 + 1328);
  *(_QWORD *)(v44 + 1328) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *(_QWORD *)(v44 + 1320);
  *(_QWORD *)(v44 + 1320) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD *)(v44 + 1312);
  *(_QWORD *)(v44 + 1312) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  if (*(char *)(v44 + 1311) < 0)
    operator delete(*v46);
  sub_100602508(a15);
  if (*(char *)(v44 + 983) < 0)
    operator delete(*(void **)(v44 + 960));
  if (*(char *)(v44 + 959) < 0)
    operator delete(*(void **)(v44 + 936));
  if (*(char *)(v44 + 935) < 0)
    operator delete(*(void **)(v44 + 912));
  sub_100261F44(v44 + 792);
  sub_1006DB4AC(v44);
  _Unwind_Resume(a1);
}

void sub_10072FB38(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLAccessoryLocationProvider::onEphemerisUpdated");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onEphemerisUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v6 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onEphemerisUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  if (a2 == 2)
    sub_1007372C4(a3);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_10072FCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10072FD0C(uint64_t a1, __int128 *a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  void *__dst[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  os_activity_scope_state_s state;
  char v23;
  uint64_t buf;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryConnected");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v23 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryConnected", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289538;
      v25 = 2082;
      v26 = "";
      v27 = 2082;
      v28 = "activity";
      v29 = 2050;
      v30 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryConnected\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    v23 = 0;
  }
  sub_10065C70C((char *)__dst, a2);
  sub_100732064(a1, (uint64_t)__dst, a3);
  if (v21 < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(__dst[0]);
  if (v23)
    os_activity_scope_leave(&state);
}

void sub_10072FF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 - 120))
    os_activity_scope_leave((os_activity_scope_state_t)(v10 - 136));
  _Unwind_Resume(exception_object);
}

void sub_10072FF7C(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  NSObject *v5;
  void *__dst[2];
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  os_activity_scope_state_s state;
  char v21;
  uint64_t buf;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryDisconnected");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v21 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryDisconnected", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289538;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "activity";
      v27 = 2050;
      v28 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryDisconnected\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    v21 = 0;
  }
  sub_10065C70C((char *)__dst, a2);
  sub_100733290(a1, (uint64_t *)__dst);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(__dst[0]);
  if (v21)
    os_activity_scope_leave(&state);
}

void sub_1007301AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 - 104))
    os_activity_scope_leave((os_activity_scope_state_t)(v10 - 120));
  _Unwind_Resume(exception_object);
}

void sub_1007301DC(uint64_t a1, const __CFString *a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryNmeaReceived");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryNmeaReceived", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryNmeaReceived\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1007337AC(a1, a2);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10073038C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007303AC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_activity_scope_state_s state;
  char v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryReferenceTime");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v5 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryReferenceTime", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = "activity";
      v12 = 2050;
      v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryReferenceTime\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(a1 + 1361) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1320) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1320) + 8), 0, 0);
  *(_BYTE *)(a1 + 1977) = 0;
  sub_100736628(a1);
  if (v5)
    os_activity_scope_leave(&state);
}

void sub_10073056C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10073058C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_activity_scope_state_s state;
  char v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryReferenceLocation");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v5 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryReferenceLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2082;
      v11 = "activity";
      v12 = 2050;
      v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryReferenceLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(a1 + 1360) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 4, 0);
  *(_BYTE *)(a1 + 1978) = 0;
  sub_1007368E8(a1);
  if (v5)
    os_activity_scope_leave(&state);
}

void sub_10073074C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10073076C(uint64_t a1, const __CFURL *a2, double *a3, double *a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onAccessoryEphemerisURL");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onAccessoryEphemerisURL", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onAccessoryEphemerisURL\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100736AD4(a1, a2, a3, a4);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100730934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100730954(uint64_t a1)
{
  return sub_10073095C(*(id **)(a1 + 32));
}

id sub_10073095C(id *a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v2 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLNMEAScreener,screen,onLocationUnavailableTimer,accessory unavailable notification sent", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLNMEAScreener,screen,onLocationUnavailableTimer,accessory unavailable notification sent", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onLocationUnavailableTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 9;
  (*((void (**)(id *, uint8_t *, uint64_t, uint64_t))*a1 + 18))(a1, buf, 1, 0xFFFFFFFFLL);
  return objc_msgSend(a1[123], "setNextFireDelay:", 1.79769313e308);
}

void sub_100730B20(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLAccessoryLocationProvider::onTimeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onTimeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onTimeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  if (!*a2 && !*(_BYTE *)(a4 + 1977))
    sub_100736628(a4);
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100730CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100730CFC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10073815C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100730EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100730ED4(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = a1;
  v2 = 0;
  sub_10073998C((uint64_t)&v1, 7uLL);
}

void sub_100730F04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onBatteryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onBatteryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onBatteryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007384CC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1007310BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1007310DC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1007389A8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100731294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007312B4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 3000);
  if (v2)
  {
    *(_QWORD *)(a1 + 3008) = v2;
    operator delete(v2);
  }
  sub_10065C930(a1 + 2768);
  sub_100739A38(a1 + 40);
  return a1;
}

uint64_t sub_1007312F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_100E3E4AC((id *)(a1 + 408));
  v2 = *(_QWORD **)(a1 + 376);
  if (v2 == (_QWORD *)(a1 + 352))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 352);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10073135C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  uint8_t *v18;
  _WORD v19[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = off_1021504D0;
  if (*(_QWORD *)(a1 + 1336))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v2 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLAccessory,unregistered for app client notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,unregistered for app client notifications", v19, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "virtual CLAccessoryLocationProvider::~CLAccessoryLocationProvider()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 9);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 3);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1336) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1336) + 8), 1);
  }
  v3 = *(_QWORD *)(a1 + 1344);
  if (v3)
    objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 7);
  v4 = *(void **)(a1 + 1376);
  if (v4)

  v5 = *(_QWORD *)(a1 + 6208);
  if (v5)
  {
    objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 2);
    v6 = *(_QWORD *)(a1 + 6208);
    *(_QWORD *)(a1 + 6208) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    *(_QWORD *)(a1 + 6208) = 0;
  }
  sub_100090AE4(a1 + 6144, *(char **)(a1 + 6152));
  sub_10065C930(a1 + 5944);
  sub_10065C930(a1 + 5760);
  sub_10065C930(a1 + 5576);
  v7 = *(void **)(a1 + 5544);
  if (v7)
  {
    *(_QWORD *)(a1 + 5552) = v7;
    operator delete(v7);
  }
  sub_10065C930(a1 + 5312);
  sub_100739A38(a1 + 2584);
  sub_100E3E4AC((id *)(a1 + 2392));
  v8 = *(_QWORD **)(a1 + 2360);
  if (v8 == (_QWORD *)(a1 + 2336))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 2336);
  }
  else
  {
    if (!v8)
      goto LABEL_23;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_23:
  if (*(char *)(a1 + 2015) < 0)
    operator delete(*(void **)(a1 + 1992));
  if (*(char *)(a1 + 1975) < 0)
    operator delete(*(void **)(a1 + 1952));
  sub_100067AC4(a1 + 1872);
  sub_100E3E4AC((id *)(a1 + 1640));
  v10 = *(void **)(a1 + 1608);
  if (v10)
  {
    *(_QWORD *)(a1 + 1616) = v10;
    operator delete(v10);
  }
  sub_100739D18((uint64_t *)(a1 + 1384), 0);
  v11 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  sub_100602508(a1 + 1040);
  if (*(char *)(a1 + 983) < 0)
    operator delete(*(void **)(a1 + 960));
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  if (*(char *)(a1 + 935) < 0)
    operator delete(*(void **)(a1 + 912));
  sub_100261F44(a1 + 792);
  sub_1006DB4AC(a1);
  return a1;
}

void sub_100731748(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100731758(uint64_t a1)
{
  sub_10073135C(a1);
  operator delete();
}

void sub_10073177C(uint64_t a1, int a2, double a3)
{
  sub_100753C7C(a1 + 1984, a2);
  if (a2)
  {
    sub_10115B500(a1 + 2544, 0, a3);
  }
  else if (*(_BYTE *)(a1 + 1362))
  {
    sub_10115B500(a1 + 2544, *(unsigned __int8 *)(a1 + 1985), a3);
  }
}

uint64_t sub_1007317E8(uint64_t a1, int *a2)
{
  int v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  sub_10003DFD4(a1);
  v4 = *a2;
  if (*a2 == 40)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLAccessory,PauseExternalLocation,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,PauseExternalLocation,0", v14, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAccessoryLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    v6 = sub_1001FCBB4();
    sub_10073177C(a1, 0, v6);
  }
  else if (v4 == 29)
  {
    if (!*(_BYTE *)(a1 + 1363))
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v7 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLAccessory,EnableAccessoryNMEAScreening,1,airborne,0", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,EnableAccessoryNMEAScreening,1,airborne,0", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAccessoryLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      v8 = sub_1001FCBB4();
      sub_10115B500(a1 + 2544, 1, v8);
      *(_BYTE *)(a1 + 1985) = 1;
      sub_100738320(a1 + 1984);
    }
  }
  else if (!v4)
  {
    sub_100731B14(a1);
  }
  return 1;
}

uint64_t sub_100731B14(uint64_t a1)
{
  id v2;
  double v3;
  uint64_t result;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  objc_msgSend((id)qword_102303BC0, "stopLocation");
  objc_msgSend(*(id *)(a1 + 984), "setNextFireDelay:", 1.79769313e308);
  v3 = sub_1001FCBB4();
  sub_10115F47C(a1 + 2544, v3);

  *(_DWORD *)(a1 + 116) = 0xFFFF;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 152) = _Q0;
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 204) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 240) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 4);
  *(_BYTE *)(a1 + 1360) = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1320) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1320) + 8), 0);
  *(_BYTE *)(a1 + 1361) = 0;
  sub_100731C34(a1);
  *(_DWORD *)(a1 + 6120) = 0;
  *(_WORD *)(a1 + 1976) = 0;
  *(_BYTE *)(a1 + 1978) = 0;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_BYTE *)(a1 + 2376) = 1;
  result = *(unsigned int *)(a1 + 1944);
  if ((result & 0x80000000) == 0)
  {
    result = close(result);
    *(_DWORD *)(a1 + 1944) = -1;
  }
  return result;
}

void sub_100731C34(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _WORD v13[8];
  uint8_t buf[1640];

  v2 = (_BYTE *)(a1 + 6176);
  if (*(_BYTE *)(a1 + 6177))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessory,unregistered for unfiltered location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v13[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,unregistered for unfiltered location notifications", v13, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::unregisterForNotifications()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 10);
    v2[1] = 0;
  }
  if (*(_BYTE *)(a1 + 1912))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v4 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLAccessory,unregistered for propagated location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v13[0] = 0;
      LODWORD(v10) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,unregistered for propagated location notifications", v13, v10);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::unregisterForNotifications()", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 27);
    *(_BYTE *)(a1 + 1912) = 0;
  }
  if (*v2)
  {
    v5 = sub_10022B068();
    if (byte_102303BAF < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_102303B98, *((unint64_t *)&xmmword_102303B98 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102303B98;
      v12 = unk_102303BA8;
    }
    sub_10000782C(v5, (uint64_t *)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    *v2 = 0;
  }
}

void sub_100731FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100731FC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1006DB4DC(a1);
  sub_100605848(a1 + 1040);
  objc_msgSend(*(id *)(a1 + 984), "invalidate");

  *(_QWORD *)(a1 + 984) = 0;
  v2 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  *(_QWORD *)(a1 + 1352) = 0;
  qword_102303BC0 = 0;
}

void sub_100732064(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  __int16 v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  __int16 v24;
  void *__p[2];
  char v26;
  uint8_t buf[4];

  sub_1015A2E04(__p, "CLAccessory,onAccessoryConnected");
  sub_10065A628((uint64_t *)a2, (uint64_t *)__p);
  if ((v26 & 0x80000000) == 0)
  {
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (a3)
  {
LABEL_3:
    sub_100730ED4(a1 + 2536);
    *(_BYTE *)(a1 + 2531) = 0;
    *(_DWORD *)(a1 + 6120) = 0;
  }
LABEL_4:
  if (*(_BYTE *)(a2 + 168))
  {
    if (sub_100732890(a1 + 5576, a2))
      sub_10115F70C(a1 + 2544, (std::string *)a2);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v6 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLAccessory,onAccessoryConnected,accessory on deny list", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,onAccessoryConnected,accessory on deny list", &v24, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryConnected(const CLAccessoryUtils::CLAccessoryInfo, const BOOL)", "%s\n", v7);
LABEL_15:
      if (v8 != buf)
        free(v8);
    }
  }
  else if (*(_BYTE *)(a2 + 169))
  {
    sub_10179E138(a1 + 1392);
    if ((a3 & 1) == 0 && *(_BYTE *)(a1 + 1362) && sub_100732968((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 5944)))
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v9 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLAccessory,onAccessoryConnected,alreadyConnected", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v24 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,onAccessoryConnected,alreadyConnected", &v24, 2);
        v8 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryConnected(const CLAccessoryUtils::CLAccessoryInfo, const BOOL)", "%s\n", v10);
        goto LABEL_15;
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v11 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLAccessory,onAccessoryConnected,newAccessory connected", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v24 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,onAccessoryConnected,newAccessory connected", &v24, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryConnected(const CLAccessoryUtils::CLAccessoryInfo, const BOOL)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      std::string::operator=((std::string *)(a1 + 5944), (const std::string *)a2);
      std::string::operator=((std::string *)(a1 + 5968), (const std::string *)(a2 + 24));
      std::string::operator=((std::string *)(a1 + 5992), (const std::string *)(a2 + 48));
      std::string::operator=((std::string *)(a1 + 6016), (const std::string *)(a2 + 72));
      std::string::operator=((std::string *)(a1 + 6040), (const std::string *)(a2 + 96));
      std::string::operator=((std::string *)(a1 + 6064), (const std::string *)(a2 + 120));
      std::string::operator=((std::string *)(a1 + 6088), (const std::string *)(a2 + 144));
      v12 = *(_WORD *)(a2 + 168);
      *(_BYTE *)(a1 + 6114) = *(_BYTE *)(a2 + 170);
      *(_WORD *)(a1 + 6112) = v12;
      sub_10115ADC0(a1 + 2544, (std::string *)(a1 + 5944), *(unsigned __int8 *)(a1 + 1985));
      v13 = sub_1001FCBB4();
      sub_100732CB4(a1, 0, v13);
      *(_BYTE *)(a1 + 1362) = 1;
      if (a3)
      {
        *(_DWORD *)buf = 0;
        if (sub_1001B7864(a1, (int *)buf, 1))
        {
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021506B8);
          v14 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLAccessory,location already requested before device connection, starting location", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_1021506B8);
            v24 = 0;
            LODWORD(v23) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,location already requested before device connection, starting location", &v24, v23);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryConnected(const CLAccessoryUtils::CLAccessoryInfo, const BOOL)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
          sub_10000E5FC(a1);
        }
      }
      sub_1007330C8(a1);
    }
  }
  else if (*(_BYTE *)(a2 + 170) && sub_100732890(a1 + 5760, a2))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v15 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLAccessory,onAccessoryConnected,noLocation accessory", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v24 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,onAccessoryConnected,noLocation accessory", &v24, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryConnected(const CLAccessoryUtils::CLAccessoryInfo, const BOOL)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v16 = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2536) = v16 | 0x20;
    sub_10115FA80(a1 + 2544, (std::string *)a2, v16 | 0x20);
  }
}

void sub_10073286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100732890(uint64_t a1, uint64_t a2)
{
  double v4;
  double *v5;
  double v6;
  double v7;
  char v9;

  v4 = sub_1001FCBB4();
  if (sub_100732968((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    v6 = *(double *)(a1 + 176);
    v5 = (double *)(a1 + 176);
    v7 = v6;
    if (v6 >= 0.0 && vabdd_f64(v4, v7) <= 28800.0)
      return 0;
  }
  else
  {
    std::string::operator=((std::string *)a1, (const std::string *)a2);
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
    std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
    std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
    std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
    v9 = *(_BYTE *)(a2 + 170);
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    *(_BYTE *)(a1 + 170) = v9;
    v5 = (double *)(a1 + 176);
  }
  *v5 = v4;
  return 1;
}

BOOL sub_100732968(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const void **v37;
  unsigned __int8 *v38;
  _BOOL8 result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  if (v12 >= 0)
    v14 = v6 + 24;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v15 = a1[71];
  if ((v15 & 0x80u) == 0)
    v16 = a1[71];
  else
    v16 = *((_QWORD *)a1 + 7);
  v17 = v6[71];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)v6 + 7);
  if (v16 != v17)
    return 0;
  v19 = (const void **)(a1 + 48);
  if (v18 >= 0)
    v20 = v6 + 48;
  else
    v20 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *((_QWORD *)a1 + 7)))
      return 0;
  }
  else if (a1[71])
  {
    while (*(unsigned __int8 *)v19 == *v20)
    {
      v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v15)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v21 = a1[95];
  if ((v21 & 0x80u) == 0)
    v22 = a1[95];
  else
    v22 = *((_QWORD *)a1 + 10);
  v23 = v6[95];
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *((_QWORD *)v6 + 10);
  if (v22 != v23)
    return 0;
  v25 = (const void **)(a1 + 72);
  if (v24 >= 0)
    v26 = v6 + 72;
  else
    v26 = (unsigned __int8 *)*((_QWORD *)v6 + 9);
  if ((v21 & 0x80) != 0)
  {
    if (memcmp(*v25, v26, *((_QWORD *)a1 + 10)))
      return 0;
  }
  else if (a1[95])
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v21)
        goto LABEL_61;
    }
    return 0;
  }
LABEL_61:
  v27 = a1[119];
  if ((v27 & 0x80u) == 0)
    v28 = a1[119];
  else
    v28 = *((_QWORD *)a1 + 13);
  v29 = v6[119];
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *((_QWORD *)v6 + 13);
  if (v28 != v29)
    return 0;
  v31 = (const void **)(a1 + 96);
  if (v30 >= 0)
    v32 = v6 + 96;
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v6 + 12);
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*v31, v32, *((_QWORD *)a1 + 13)))
      return 0;
  }
  else if (a1[119])
  {
    while (*(unsigned __int8 *)v31 == *v32)
    {
      v31 = (const void **)((char *)v31 + 1);
      ++v32;
      if (!--v27)
        goto LABEL_76;
    }
    return 0;
  }
LABEL_76:
  v33 = a1[143];
  if ((v33 & 0x80u) == 0)
    v34 = a1[143];
  else
    v34 = *((_QWORD *)a1 + 16);
  v35 = v6[143];
  v36 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v35 = *((_QWORD *)v6 + 16);
  if (v34 != v35)
    return 0;
  v37 = (const void **)(a1 + 120);
  if (v36 >= 0)
    v38 = v6 + 120;
  else
    v38 = (unsigned __int8 *)*((_QWORD *)v6 + 15);
  if ((v33 & 0x80) != 0)
  {
    if (memcmp(*v37, v38, *((_QWORD *)a1 + 16)))
      return 0;
  }
  else if (a1[143])
  {
    while (*(unsigned __int8 *)v37 == *v38)
    {
      v37 = (const void **)((char *)v37 + 1);
      ++v38;
      if (!--v33)
        goto LABEL_91;
    }
    return 0;
  }
LABEL_91:
  result = sub_10071C384(a1 + 144, v6 + 144);
  if (!result)
    return result;
  if (a1[168] == v6[168] && a1[170] == v6[170])
    return a1[169] == v6[169];
  return 0;
}

void sub_100732CB4(uint64_t a1, unsigned int a2, double a3)
{
  void *v4;
  id v7;
  NSObject *v8;
  CFAbsoluteTime Current;
  unsigned int v10;
  uint64_t v11;
  CFAbsoluteTime v12;
  unsigned int v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  CFAbsoluteTime v21;
  __int16 v22;
  unsigned int v23;
  uint8_t buf[4];
  CFAbsoluteTime v25;
  __int16 v26;
  unsigned int v27;

  v4 = *(void **)(a1 + 1376);
  if (!v4)
    return;
  if ((a2 & 1) == 0 && objc_msgSend(v4, "currentSession"))
  {
    sub_10115E900(a1 + 2544, 1, a3);
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 1376), "currentSession"), "configuration"))
    {
      sub_10115E93C(a1 + 2544, objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1376), "currentSession"), "configuration"), "transportType") == (id)3, a3);
      v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1376), "currentSession"), "configuration"), "transportType");
      *(_BYTE *)(a1 + 2531) = v7 == (id)3;
      if (v7 == (id)3)
        *(_QWORD *)(a1 + 2536) |= 0x40uLL;
    }
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v8 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v10 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1376), "currentSession"), "configuration"), "transportType");
      *(_DWORD *)buf = 134349312;
      v25 = Current;
      v26 = 1026;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateCarSessionStatus,enable,transportType,%{public}d", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v11 = qword_1022A0008;
    v12 = CFAbsoluteTimeGetCurrent();
    v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1376), "currentSession"), "configuration"), "transportType");
    v20 = 134349312;
    v21 = v12;
    v22 = 1026;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "CLAccessoryAWD,%{public}.1lf,updateCarSessionStatus,enable,transportType,%{public}d", &v20, 18);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::updateCarSessionStatus(const CFTimeInterval, const BOOL)", "%s\n", v14);
    if (v15 == buf)
      return;
LABEL_25:
    free(v15);
    return;
  }
  v16 = a1 + 2544;
  sub_10115E900(v16, 0, a3);
  sub_10115E93C(v16, 0, a3);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v17 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    v25 = CFAbsoluteTimeGetCurrent();
    v26 = 1026;
    v27 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateCarSessionStatus,disable,force,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v18 = qword_1022A0008;
    v20 = 134349312;
    v21 = CFAbsoluteTimeGetCurrent();
    v22 = 1026;
    v23 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "CLAccessoryAWD,%{public}.1lf,updateCarSessionStatus,disable,force,%{public}d", &v20, 18);
    v15 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::updateCarSessionStatus(const CFTimeInterval, const BOOL)", "%s\n", v19);
    if (v15 != buf)
      goto LABEL_25;
  }
}

void sub_1007330C8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  int v4;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v2 = sub_100D83318();
  *(_BYTE *)(a1 + 1372) = (_BYTE)v2;
  objc_msgSend((id)qword_102303BC0, "sendGPRMCDataStatusValues:", v2);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v3 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 1372);
    *(_DWORD *)buf = 67174657;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessory,sendGPRMCDataStatusValues,fIsShifting,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v5 = *(unsigned __int8 *)(a1 + 1372);
    v7[0] = 67174657;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,sendGPRMCDataStatusValues,fIsShifting,%{private}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::sendGPRMCDataStatusValues()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_100733290(uint64_t a1, uint64_t *a2)
{
  double v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  _BOOL4 v28;
  const char *v29;
  uint8_t *v30;
  _QWORD *v31;
  NSObject *v32;
  void *__p[2];
  char v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  _QWORD *v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  _QWORD *v44;
  __int16 v45;
  _QWORD *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _BOOL4 v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  _QWORD *v56;
  __int16 v57;
  _QWORD *v58;
  __int16 v59;
  _QWORD *v60;
  __int16 v61;
  _QWORD *v62;
  __int16 v63;
  _QWORD *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  _BOOL4 v70;

  sub_1015A2E04(__p, "CLAccessory,onAccessoryDisconnected");
  sub_10065A628(a2, (uint64_t *)__p);
  if (v34 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 1362) && sub_100732968((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 5944)))
  {
    *(_BYTE *)(a1 + 1362) = 0;
    *(_BYTE *)(a1 + 2531) = 0;
    *(_DWORD *)buf = 9;
    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
    sub_100730ED4(a1 + 2536);
    *(_DWORD *)(a1 + 6120) = 0;
    sub_100605848(a1 + 1040);
    objc_msgSend(*(id *)(a1 + 984), "setNextFireDelay:", 1.79769313e308);
    v4 = sub_1001FCBB4();
    sub_100732CB4(a1, 1u, v4);
    sub_10115B500(a1 + 2544, 0, v4);
    sub_10116013C(a1 + 2544, (_QWORD *)(a1 + 6144), v4);
    sub_10115F47C(a1 + 2544, v4);
    sub_10115E8BC((uint64_t *)(a1 + 2544), *(_DWORD *)(a1 + 6136), v4, *(double *)(a1 + 6128));
    sub_10115B53C(a1 + 2544, v4);
    *(_QWORD *)(a1 + 6168) = 0xBFF0000000000000;
    sub_100090AE4(a1 + 6144, *(char **)(a1 + 6152));
    *(_QWORD *)(a1 + 6144) = a1 + 6152;
    *(_QWORD *)(a1 + 6160) = 0;
    *(_QWORD *)(a1 + 6152) = 0;
    sub_100657848(a1 + 5944);
    sub_100754E54(a1 + 2424, 1, -1.0, 0.0, 0.0);
  }
  else
  {
    v5 = (char *)(a1 + 5967);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v6 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (unsigned __int8 *)(a1 + 5944);
      v8 = a1 + 5944;
      if (*v5 < 0)
        v8 = *(_QWORD *)v7;
      v9 = (_QWORD *)(a1 + 5992);
      if (*(char *)(a1 + 6015) < 0)
        v9 = (_QWORD *)*v9;
      v10 = (_QWORD *)(a1 + 5968);
      if (*(char *)(a1 + 5991) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (_QWORD *)(a1 + 6016);
      if (*(char *)(a1 + 6039) < 0)
        v11 = (_QWORD *)*v11;
      v12 = (_QWORD *)(a1 + 6040);
      if (*(char *)(a1 + 6063) < 0)
        v12 = (_QWORD *)*v12;
      v13 = (_QWORD *)(a1 + 6064);
      v31 = v12;
      v32 = v6;
      if (*(char *)(a1 + 6087) < 0)
        v13 = (_QWORD *)*v13;
      v14 = *(unsigned __int8 *)(a1 + 6114);
      v15 = *(unsigned __int8 *)(a1 + 1362);
      v16 = sub_100732968((unsigned __int8 *)a2, v7);
      *(_DWORD *)buf = 136382723;
      v54 = v8;
      v55 = 2081;
      v56 = v9;
      v57 = 2081;
      v58 = v10;
      v59 = 2081;
      v60 = v11;
      v61 = 2081;
      v62 = v31;
      v63 = 2081;
      v64 = v13;
      v65 = 1025;
      v66 = v14;
      v67 = 1026;
      v68 = v15;
      v69 = 1026;
      v70 = v16;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLAccessory,onAccessoryDisconnected,not doing anything,manufacturer,%{private}s,model,%{private}s,name,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,supportsCarPlay,%{private}d,accessoryConnected,%{public}d,isSame,%{public}d", buf, 0x50u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v17 = (unsigned __int8 *)(a1 + 5944);
      v18 = a1 + 5944;
      if (*v5 < 0)
        v18 = *(_QWORD *)v17;
      v19 = (_QWORD *)(a1 + 5992);
      if (*(char *)(a1 + 6015) < 0)
        v19 = (_QWORD *)*v19;
      v20 = (_QWORD *)(a1 + 5968);
      if (*(char *)(a1 + 5991) < 0)
        v20 = (_QWORD *)*v20;
      v21 = (_QWORD *)(a1 + 6016);
      if (*(char *)(a1 + 6039) < 0)
        v21 = (_QWORD *)*v21;
      v22 = qword_1022A0008;
      v23 = (_QWORD *)(a1 + 6040);
      if (*(char *)(a1 + 6063) < 0)
        v23 = (_QWORD *)*v23;
      v24 = (_QWORD *)(a1 + 6064);
      v25 = (unsigned __int8 *)a2;
      if (*(char *)(a1 + 6087) < 0)
        v24 = (_QWORD *)*v24;
      v26 = *(unsigned __int8 *)(a1 + 6114);
      v27 = *(unsigned __int8 *)(a1 + 1362);
      v28 = sub_100732968(v25, v17);
      v35 = 136382723;
      v36 = v18;
      v37 = 2081;
      v38 = v19;
      v39 = 2081;
      v40 = v20;
      v41 = 2081;
      v42 = v21;
      v43 = 2081;
      v44 = v23;
      v45 = 2081;
      v46 = v24;
      v47 = 1025;
      v48 = v26;
      v49 = 1026;
      v50 = v27;
      v51 = 1026;
      v52 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "CLAccessory,onAccessoryDisconnected,not doing anything,manufacturer,%{private}s,model,%{private}s,name,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,supportsCarPlay,%{private}d,accessoryConnected,%{public}d,isSame,%{public}d", &v35, 80);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryDisconnected(const CLAccessoryUtils::CLAccessoryInfo)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
  }
}

void sub_100733788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1007337AC(uint64_t a1, const __CFString *a2)
{
  double v4;
  double v5;
  std::string *p_p;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *v12;
  unsigned __int8 *v13;
  NSObject *v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  char *v18;
  std::string *v19;
  int v20;
  std::string *v21;
  int v22;
  unsigned __int8 v23;
  NSObject *v24;
  std::string *v25;
  std::string *v26;
  const char *v27;
  std::string *v28;
  std::string::size_type v29;
  ssize_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  uint64_t v34;
  std::string::size_type v35;
  NSObject *v36;
  int v37;
  std::string::size_type v38;
  int *v39;
  std::string *v40;
  int v41;
  std::string *v42;
  uint64_t v43;
  int v44;
  int v45;
  _BYTE *v46;
  NSObject *v47;
  std::string *v48;
  std::string *v49;
  const char *v50;
  char *v51;
  double v52;
  id v53;
  unsigned int v54;
  id v55;
  NSObject *v56;
  std::string *v57;
  int v58;
  int v59;
  _DWORD *v65;
  std::string *v66;
  NSObject *v67;
  std::string *v68;
  NSObject *v69;
  const char *v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  char *v75;
  id v76;
  NSObject *v77;
  int v78;
  NSObject *v79;
  const char *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double Current;
  double v98;
  CLMotionActivity *v99;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  _BOOL4 v106;
  char v107;
  NSObject *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  NSObject *v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  NSObject *v151;
  int v152;
  uint64_t v153;
  int v154;
  std::string::size_type v155;
  int *v156;
  std::string *v157;
  int v158;
  const char *v159;
  char *v160;
  std::string *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::string *v166;
  const char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  const char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  const char *v192;
  char *v193;
  int v194;
  const char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  char *v204;
  uint64_t v205;
  const char *v206;
  char *v207;
  const char *v208;
  char *v209;
  uint64_t v210;
  int v211;
  const char *v212;
  char *v213;
  int v214;
  const char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  void *v219[2];
  double v220;
  const char *v221[203];
  _BYTE __dst[848];
  _BYTE v223[96];
  __int128 v224;
  __int128 v225;
  _BYTE v226[28];
  unint64_t v227;
  void *__src;
  std::string __p;
  int v230;
  const char *v231;
  __int16 v232;
  int v233;
  __int16 v234;
  uint64_t v235;
  __int16 v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  __int16 v240;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  __int16 v244;
  uint64_t v245;
  __int16 v246;
  int v247;
  __int16 v248;
  int v249;
  __int16 v250;
  int v251;
  _BYTE __str[48];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  _OWORD v258[2];
  _BYTE v259[513];
  _QWORD v260[2];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  char v267;
  int v268;
  _BYTE v269[513];
  uint64_t v270[2];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  char v277;
  std::string v278[68];
  _BYTE v279[513];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  char v287;
  std::string::size_type v288;
  std::string v289;

  v4 = sub_1001FCBB4();
  sub_100732CB4(a1, 0, v4);
  v5 = sub_100078B88();
  sub_1001A486C(a2, (uint64_t)&__p);
  __src = 0;
  v227 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v7 = __p.__r_.__value_.__r.__words[1];
  v8 = sub_100656DF0((unint64_t *)&__src, &v227, (char *)p_p, v7);
  if (v8)
  {
    sub_10035ACF4(v279, __src, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)v279;
    v9 = *(unsigned __int8 *)(a1 + 935);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(a1 + 935);
    else
      v10 = *(_QWORD *)(a1 + 920);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v10 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(a1 + 912), v12, *(_QWORD *)(a1 + 920)))
          goto LABEL_131;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 935))
          goto LABEL_131;
        v13 = (unsigned __int8 *)(a1 + 912);
        while (*v13 == v12->__r_.__value_.__s.__data_[0])
        {
          ++v13;
          v12 = (std::string *)((char *)v12 + 1);
          if (!--v9)
            goto LABEL_131;
        }
      }
    }
    std::string::operator=((std::string *)(a1 + 912), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__p;
    else
      v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v20 = __p.__r_.__value_.__r.__words[1];
    if (sub_100656D54((uint64_t)v19, v20))
    {
      if (!*(_BYTE *)(a1 + 1948) || *(int *)(a1 + 1944) < 1)
        goto LABEL_94;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        sub_100115CE4(v278, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v278[0] = __p;
      std::string::append(v278, "\n");
      if ((v278[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = v278;
      else
        v28 = (std::string *)v278[0].__r_.__value_.__r.__words[0];
      if ((v278[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v278[0].__r_.__value_.__r.__words[2]);
      else
        v29 = v278[0].__r_.__value_.__l.__size_;
      v30 = write(*(_DWORD *)(a1 + 1944), v28, v29);
      v31 = v30 & ~(v30 >> 63);
      if (SHIBYTE(v278[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v32 = v278[0].__r_.__value_.__l.__size_;
        if (v31 >= v278[0].__r_.__value_.__l.__size_)
          goto LABEL_93;
        v33 = (std::string *)v278[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        v32 = HIBYTE(v278[0].__r_.__value_.__r.__words[2]);
        if (v31 >= HIBYTE(v278[0].__r_.__value_.__r.__words[2]))
          goto LABEL_94;
        v33 = v278;
      }
      v34 = write(*(_DWORD *)(a1 + 1944), (char *)v33 + v31, v32 - v31) + v31;
      if (v34 < 0)
        goto LABEL_85;
      v35 = HIBYTE(v278[0].__r_.__value_.__r.__words[2]);
      if ((v278[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = v278[0].__r_.__value_.__l.__size_;
      if (v34 < v35)
      {
LABEL_85:
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v36 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
        {
          v37 = SHIBYTE(v278[0].__r_.__value_.__r.__words[2]);
          v38 = v278[0].__r_.__value_.__r.__words[0];
          v39 = __error();
          v40 = v278;
          v41 = *v39;
          if (v37 < 0)
            v40 = (std::string *)v38;
          *(_DWORD *)v279 = 136380931;
          *(_QWORD *)&v279[4] = v40;
          *(_WORD *)&v279[12] = 1026;
          *(_DWORD *)&v279[14] = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLAccessory,Wrote partial,%{private}s,errno,%{public}d", v279, 0x12u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(v279, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021506B8);
          v153 = qword_1022A0008;
          v154 = SHIBYTE(v278[0].__r_.__value_.__r.__words[2]);
          v155 = v278[0].__r_.__value_.__r.__words[0];
          v156 = __error();
          v157 = v278;
          v158 = *v156;
          if (v154 < 0)
            v157 = (std::string *)v155;
          *(_DWORD *)__str = 136380931;
          *(_QWORD *)&__str[4] = v157;
          *(_WORD *)&__str[12] = 1026;
          *(_DWORD *)&__str[14] = v158;
          _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, v153, 16, "CLAccessory,Wrote partial,%{private}s,errno,%{public}d", __str, 18);
          v160 = (char *)v159;
          sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v159);
          if (v160 != v279)
            free(v160);
        }
      }
      if ((SHIBYTE(v278[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_94:
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &__p;
        else
          v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v43 = LODWORD(__p.__r_.__value_.__r.__words[1]);
        v44 = sub_100657484((uint64_t)v278, (const char *)v42, v43);
        v45 = v44;
        if (*(_BYTE *)(a1 + 1949))
        {
          switch(v44)
          {
            case 0:
            case 3:
              sub_100CC1EAC((unsigned __int8 *)&__p);
              break;
            case 4:
              goto LABEL_118;
            case 5:
              goto LABEL_125;
            case 7:
              goto LABEL_124;
            default:
              goto LABEL_117;
          }
          goto LABEL_131;
        }
        v46 = (_BYTE *)(a1 + 6114);
        switch(v44)
        {
          case 0:
            *(_QWORD *)(a1 + 2536) |= 2uLL;
            if (sub_10071C384((unsigned __int8 *)(a1 + 936), (unsigned __int8 *)&__p))
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v47 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
              {
                v48 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)v279 = 136380675;
                *(_QWORD *)&v279[4] = v48;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLAccessory,Repeated GPGGA string, %{private}s", v279, 0xCu);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_142;
              bzero(v279, 0x65CuLL);
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v49 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)__str = 136380675;
              *(_QWORD *)&__str[4] = v49;
              LODWORD(v217) = 12;
              _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,Repeated GPGGA string, %{private}s", __str, v217);
              v51 = (char *)v50;
              sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v50);
LABEL_295:
              if (v51 != v279)
                free(v51);
LABEL_142:
              sub_10115F444((_DWORD *)(a1 + 2544), v45);
              goto LABEL_131;
            }
            sub_10115EC70(a1 + 2544, (uint64_t)v278);
            std::string::operator=((std::string *)(a1 + 936), &__p);
            sub_100CC1EAC((unsigned __int8 *)&__p);
            if (*(_BYTE *)(a1 + 1368))
            {
              v58 = 0;
              *(_DWORD *)(a1 + 1364) = 0;
              goto LABEL_166;
            }
            *(_OWORD *)&v223[4] = 0uLL;
            *(_OWORD *)&v223[20] = xmmword_101BAFC90;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)&v223[36] = _Q0;
            *(_OWORD *)&v223[52] = _Q0;
            *(_OWORD *)&v223[68] = _Q0;
            *(_DWORD *)v223 = 0xFFFF;
            *(_DWORD *)&v223[84] = 0;
            *(_QWORD *)&v223[88] = 0xBFF0000000000000;
            v224 = 0uLL;
            *(_QWORD *)((char *)&v225 + 4) = 0xBFF0000000000000;
            LODWORD(v225) = 0;
            HIDWORD(v225) = 0x7FFFFFFF;
            memset(v226, 0, 25);
            sub_10012A33C(v269);
            v65 = (_DWORD *)(a1 + 6120);
            *(_DWORD *)(a1 + 6120) = 0;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &__p;
            else
              v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (!sub_100EDB934((uint64_t)v66, (uint64_t)v223, (uint64_t)v269, (_DWORD *)(a1 + 6120)))
              goto LABEL_283;
            if (sub_10179F6F0(a1 + 1392, (double *)(a1 + 120), (double *)(a1 + 128)))
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v67 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v279 = 0;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "CLAccessory,GPGGA discarded al", v279, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                *(_WORD *)__str = 0;
                LODWORD(v217) = 2;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,GPGGA discarded al", __str, v217);
                v209 = (char *)v208;
                sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v208);
                if (v209 != v279)
                  free(v209);
              }
              sub_100261F44((uint64_t)v270);
              goto LABEL_131;
            }
            if (*v65 == 6)
              *(_QWORD *)(a1 + 2536) |= 8uLL;
            v143 = *(_DWORD *)(a1 + 1364);
            *(_DWORD *)(a1 + 1364) = v143 + 1;
            if (*v46 && !*(_BYTE *)(a1 + 6200))
            {
              if (v143 >= 5 && !((v143 + 1) % 0xAu))
              {
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                v151 = qword_1022A0008;
                if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
                {
                  v152 = *(_DWORD *)(a1 + 1364);
                  *(_DWORD *)v279 = 67240192;
                  *(_DWORD *)&v279[4] = v152;
                  _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "CLAccessory,GPGGA only accessory data ignored,numGGAWithoutRMC,%{public}d", v279, 8u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(v279, 0x65CuLL);
                  if (qword_1022A0000 != -1)
                    dispatch_once(&qword_1022A0000, &stru_1021506B8);
                  v214 = *(_DWORD *)(a1 + 1364);
                  *(_DWORD *)__str = 67240192;
                  *(_DWORD *)&__str[4] = v214;
                  LODWORD(v217) = 8;
                  _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,GPGGA only accessory data ignored,numGGAWithoutRMC,%{public}d", __str, v217);
                  v216 = (char *)v215;
                  sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v215);
                  if (v216 != v279)
                    free(v216);
                }
              }
            }
            else if (v143 >= 5)
            {
              v144 = *(_DWORD *)(a1 + 2416);
              LODWORD(v224) = 3;
              *(_DWORD *)v226 = v144;
              *(_QWORD *)&v223[88] = 0x4024000000000000;
              sub_100129CA0((uint64_t)__str);
              v256 = v224;
              v257 = v225;
              v258[0] = *(_OWORD *)v226;
              *(_OWORD *)((char *)v258 + 12) = *(_OWORD *)&v226[12];
              *(_OWORD *)&__str[32] = *(_OWORD *)&v223[32];
              v253 = *(_OWORD *)&v223[48];
              v254 = *(_OWORD *)&v223[64];
              v255 = *(_OWORD *)&v223[80];
              *(_OWORD *)__str = *(_OWORD *)v223;
              *(_OWORD *)&__str[16] = *(_OWORD *)&v223[16];
              memcpy(v259, v269, sizeof(v259));
              sub_100349198(v260, v270);
              v265 = v275;
              v266 = v276;
              v261 = v271;
              v262 = v272;
              v263 = v273;
              v264 = v274;
              v267 = v277;
              if (qword_1022A02F0 != -1)
                dispatch_once(&qword_1022A02F0, &stru_1021506D8);
              v145 = qword_1022A02F8;
              if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
              {
                v146 = *(_QWORD *)(a1 + 2536);
                v147 = *v46;
                *(_DWORD *)v279 = 136317698;
                *(_QWORD *)&v279[4] = "CL-Accessory";
                *(_WORD *)&v279[12] = 1024;
                *(_DWORD *)&v279[14] = 1;
                *(_WORD *)&v279[18] = 2048;
                *(_QWORD *)&v279[20] = *(_QWORD *)&v223[4];
                *(_WORD *)&v279[28] = 2048;
                *(_QWORD *)&v279[30] = *(_QWORD *)&v223[12];
                *(_WORD *)&v279[38] = 2048;
                *(_QWORD *)&v279[40] = *(_QWORD *)&v223[20];
                *(_WORD *)&v279[48] = 2050;
                *(_QWORD *)&v279[50] = *(_QWORD *)&v223[44];
                *(_WORD *)&v279[58] = 2050;
                *(_QWORD *)&v279[60] = *(_QWORD *)&v223[60];
                *(_WORD *)&v279[68] = 2050;
                *(_QWORD *)&v279[70] = *(_QWORD *)&v269[24];
                *(_WORD *)&v279[78] = 1026;
                *(_DWORD *)&v279[80] = *(_DWORD *)v226;
                *(_WORD *)&v279[84] = 1026;
                *(_DWORD *)&v279[86] = v146;
                *(_WORD *)&v279[90] = 1026;
                *(_DWORD *)&v279[92] = v147;
                _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%{public}.2f,Course,%{public}.2f,timestampGps,%{public}.2lf,GgaOnly,integrity,%{public}d,accessoryTypeBitSet,%{public}d,supportsCarPlay,%{public}d", v279, 0x60u);
              }
              if (sub_1001BFF7C(117, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A02F0 != -1)
                  dispatch_once(&qword_1022A02F0, &stru_1021506D8);
                v210 = *(_QWORD *)(a1 + 2536);
                v211 = *v46;
                v230 = 136317698;
                v231 = "CL-Accessory";
                v232 = 1024;
                v233 = 1;
                v234 = 2048;
                v235 = *(_QWORD *)&v223[4];
                v236 = 2048;
                v237 = *(_QWORD *)&v223[12];
                v238 = 2048;
                v239 = *(_QWORD *)&v223[20];
                v240 = 2050;
                v241 = *(_QWORD *)&v223[44];
                v242 = 2050;
                v243 = *(_QWORD *)&v223[60];
                v244 = 2050;
                v245 = *(_QWORD *)&v269[24];
                v246 = 1026;
                v247 = *(_DWORD *)v226;
                v248 = 1026;
                v249 = v210;
                v250 = 1026;
                v251 = v211;
                LODWORD(v217) = 96;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%{public}.2f,Course,%{public}.2f,timestampGps,%{public}.2lf,GgaOnly,integrity,%{public}d,accessoryTypeBitSet,%{public}d,supportsCarPlay,%{public}d", &v230, v217);
                v213 = (char *)v212;
                sub_100512490("LOCATION", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v212);
                if (v213 != v279)
                  free(v213);
              }
              *(_DWORD *)v279 = 0;
              (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v279, __str, 0, 0xFFFFFFFFLL, 0);
              objc_msgSend(*(id *)(a1 + 984), "setNextFireDelay:", 5.0);
              sub_10115B980(a1 + 2544, (uint64_t)__str, *v65 == 6);
              sub_10012A33C(v279);
              memcpy((void *)(a1 + 272), v279, 0x201uLL);
              sub_1002B7674(a1 + 792, &v280);
              v148 = v286;
              *(_OWORD *)(a1 + 872) = v285;
              *(_OWORD *)(a1 + 888) = v148;
              *(_BYTE *)(a1 + 904) = v287;
              v149 = v282;
              *(_OWORD *)(a1 + 808) = v281;
              *(_OWORD *)(a1 + 824) = v149;
              v150 = v284;
              *(_OWORD *)(a1 + 840) = v283;
              *(_OWORD *)(a1 + 856) = v150;
              sub_100261F44((uint64_t)&v280);
              sub_1004B4F0C((uint64_t)__str);
              sub_100261F44((uint64_t)v270);
              goto LABEL_127;
            }
LABEL_283:
            sub_100261F44((uint64_t)v270);
            v58 = 0;
            goto LABEL_166;
          case 3:
            *(_QWORD *)(a1 + 2536) |= 4uLL;
            if (sub_10071C384((unsigned __int8 *)(a1 + 960), (unsigned __int8 *)&__p))
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v56 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
              {
                v57 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)v279 = 136380675;
                *(_QWORD *)&v279[4] = v57;
                _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "CLAccessory,Repeated GPRMC string, %{private}s", v279, 0xCu);
              }
              if (!sub_1001BFF7C(115, 0))
                goto LABEL_142;
              bzero(v279, 0x65CuLL);
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v161 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v161 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)__str = 136380675;
              *(_QWORD *)&__str[4] = v161;
              LODWORD(v217) = 12;
              _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,Repeated GPRMC string, %{private}s", __str, v217);
              v51 = (char *)v162;
              sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v162);
              goto LABEL_295;
            }
            v59 = *(unsigned __int8 *)(a1 + 2529);
            if (*(_BYTE *)(a1 + 2529))
            {
              v59 = *v46;
              if (*v46)
              {
                if (*(_BYTE *)(a1 + 2531))
                  v59 = 0;
                else
                  v59 = *(_BYTE *)(a1 + 6124) != 0;
              }
            }
            if (*(_BYTE *)(a1 + 2530))
              v59 = 1;
            if (*(unsigned __int8 *)(a1 + 2400) != v59)
            {
              *(_QWORD *)(a1 + 2368) = 0;
              *(_BYTE *)(a1 + 2376) = 1;
            }
            *(_BYTE *)(a1 + 2400) = v59;
            std::string::operator=((std::string *)(a1 + 960), &__p);
            sub_100CC1EAC((unsigned __int8 *)&__p);
            v58 = 1;
            *(_BYTE *)(a1 + 1368) = 1;
LABEL_166:
            v230 = 0;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &__p;
            else
              v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (!sub_100EDA50C((const char *)v68, a1 + 116, a1 + 272, &v230, a1 + 1984))
            {
              if (v58)
              {
                ++*(_DWORD *)(a1 + 3600);
                if (qword_1022A0040 != -1)
                  dispatch_once(&qword_1022A0040, &stru_1021506F8);
                v71 = qword_1022A0048;
                if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
                {
                  v72 = *(_QWORD *)(a1 + 2536);
                  *(_DWORD *)v279 = 67240192;
                  *(_DWORD *)&v279[4] = v72;
                  _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "@ClxAccessory, Fix, 0, ll, N/A,accessoryType,%{public}d", v279, 8u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(v279, 0x65CuLL);
                  if (qword_1022A0040 != -1)
                    dispatch_once(&qword_1022A0040, &stru_1021506F8);
                  v73 = *(_QWORD *)(a1 + 2536);
                  *(_DWORD *)__str = 67240192;
                  *(_DWORD *)&__str[4] = v73;
                  LODWORD(v217) = 8;
                  _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxAccessory, Fix, 0, ll, N/A,accessoryType,%{public}d", __str, v217);
                  v75 = (char *)v74;
                  sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v74);
                  if (v75 != v279)
                    free(v75);
                }
              }
LABEL_127:
              *(_DWORD *)(a1 + 2768) = *(_QWORD *)(a1 + 2536);
              if (sub_1001FCBB4() - *(double *)(a1 + 6168) > 30.0)
              {
                sub_1015A2E04(v219, "");
                sub_1001FC25C(a1, (unsigned __int8 *)v219, 0);
                if (SHIBYTE(v220) < 0)
                  operator delete(v219[0]);
                *(double *)(a1 + 6168) = sub_1001FCBB4();
              }
              goto LABEL_131;
            }
            if (sub_10179F6F0(a1 + 1392, (double *)(a1 + 120), (double *)(a1 + 128)))
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v69 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v279 = 0;
                _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "CLAccessory,GPRMC discarded al", v279, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                *(_WORD *)__str = 0;
                LODWORD(v217) = 2;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,GPRMC discarded al", __str, v217);
                v18 = (char *)v70;
                sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v70);
                goto LABEL_67;
              }
              goto LABEL_131;
            }
            if (v58)
              sub_10115EF9C(a1 + 2544, (uint64_t)v278);
            v76 = sub_100D8311C(*(double *)(a1 + 120), *(double *)(a1 + 128));
            if (*(unsigned __int8 *)(a1 + 1372) != (_DWORD)v76)
            {
              objc_msgSend((id)qword_102303BC0, "sendGPRMCDataStatusValues:", v76);
              *(_BYTE *)(a1 + 1372) = (_BYTE)v76;
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v77 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
              {
                v78 = *(unsigned __int8 *)(a1 + 1372);
                *(_DWORD *)v279 = 67174913;
                *(_DWORD *)&v279[4] = (_DWORD)v76;
                *(_WORD *)&v279[8] = 1025;
                *(_DWORD *)&v279[10] = v78;
                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLAccessory,onAccessoryNmeaReceived,sendGPRMCDataStatusValues,isShifting,%{private}d,fIsShifting,%{private}d", v279, 0xEu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                v194 = *(unsigned __int8 *)(a1 + 1372);
                *(_DWORD *)__str = 67174913;
                *(_DWORD *)&__str[4] = (_DWORD)v76;
                *(_WORD *)&__str[8] = 1025;
                *(_DWORD *)&__str[10] = v194;
                LODWORD(v217) = 14;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,onAccessoryNmeaReceived,sendGPRMCDataStatusValues,isShifting,%{private}d,fIsShifting,%{private}d", __str, v217);
                v196 = (char *)v195;
                sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v195);
                if (v196 != v279)
                  free(v196);
              }
            }
            if ((v76 & 1) == 0 && *(_DWORD *)(a1 + 248) == 2)
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v79 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)v279 = 0;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "isShiftingSupported,0,discarding", v279, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                *(_WORD *)__str = 0;
                LODWORD(v217) = 2;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 2, "isShiftingSupported,0,discarding", __str, v217);
                v18 = (char *)v80;
                sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v80);
                goto LABEL_67;
              }
              goto LABEL_131;
            }
            if (qword_1022A02F0 != -1)
              dispatch_once(&qword_1022A02F0, &stru_1021506D8);
            v81 = qword_1022A02F8;
            if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
            {
              v82 = *(_QWORD *)(a1 + 120);
              v83 = *(_QWORD *)(a1 + 128);
              v84 = *(_QWORD *)(a1 + 136);
              v85 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v279 = 136316418;
              *(_QWORD *)&v279[4] = "NMEA";
              *(_WORD *)&v279[12] = 1024;
              *(_DWORD *)&v279[14] = 0;
              *(_WORD *)&v279[18] = 2048;
              *(_QWORD *)&v279[20] = v82;
              *(_WORD *)&v279[28] = 2048;
              *(_QWORD *)&v279[30] = v83;
              *(_WORD *)&v279[38] = 2048;
              *(_QWORD *)&v279[40] = v84;
              *(_WORD *)&v279[48] = 2080;
              *(_QWORD *)&v279[50] = v85;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,\"%s\",", v279, 0x3Au);
            }
            if (sub_1001BFF7C(117, 2))
            {
              bzero(v279, 0x65CuLL);
              if (qword_1022A02F0 != -1)
                dispatch_once(&qword_1022A02F0, &stru_1021506D8);
              v163 = *(_QWORD *)(a1 + 120);
              v164 = *(_QWORD *)(a1 + 128);
              v165 = *(_QWORD *)(a1 + 136);
              v166 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v166 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)__str = 136316418;
              *(_QWORD *)&__str[4] = "NMEA";
              *(_WORD *)&__str[12] = 1024;
              *(_DWORD *)&__str[14] = 0;
              *(_WORD *)&__str[18] = 2048;
              *(_QWORD *)&__str[20] = v163;
              *(_WORD *)&__str[28] = 2048;
              *(_QWORD *)&__str[30] = v164;
              *(_WORD *)&__str[38] = 2048;
              *(_QWORD *)&__str[40] = v165;
              LOWORD(v253) = 2080;
              *(_QWORD *)((char *)&v253 + 2) = v166;
              _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,\"%s\",", __str, 58, *(double *)v219, *(double *)&v219[1], v220, v221[0]);
              v168 = (char *)v167;
              sub_100512490("LOCATION", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v167);
              if (v168 != v279)
                free(v168);
            }
            if (*(_BYTE *)(a1 + 1360))
            {
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 4);
              *(_BYTE *)(a1 + 1360) = 0;
            }
            if (*(_BYTE *)(a1 + 1361))
            {
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1320) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1320) + 8), 0);
              *(_BYTE *)(a1 + 1361) = 0;
            }
            sub_100129CA0((uint64_t)__str);
            *(_DWORD *)(a1 + 212) = 3;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(a1 + 2416);
            *(_QWORD *)(a1 + 204) = 0x4024000000000000;
            v268 = HIDWORD(v278[3].__r_.__value_.__r.__words[2]);
            if (!*v46)
              goto LABEL_228;
            if (*(double *)(a1 + 176) < 0.0)
              goto LABEL_228;
            v86 = *(double *)(a1 + 6184);
            if (*(double *)(a1 + 184) <= v86)
              goto LABEL_228;
            v87 = *(double *)(a1 + 160);
            if (v87 < 0.0 || v87 > *(double *)(a1 + 6192))
              goto LABEL_228;
            if (*(_DWORD *)(a1 + 6120) == 6)
              goto LABEL_227;
            if (sub_100657478((uint64_t)v278, 0x200u)
              && HIDWORD(v278[3].__r_.__value_.__r.__words[2]) == 69)
            {
              v86 = *(double *)(a1 + 6184);
LABEL_227:
              *(double *)(a1 + 184) = v86;
            }
LABEL_228:
            if (*(_BYTE *)(a1 + 2528))
            {
              v88 = *(double *)(a1 + 184);
              v89 = *(double *)(a1 + 176);
              sub_100754E74(a1 + 2424, (double *)(a1 + 176), (double *)(a1 + 184), *(double *)(a1 + 192), *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 160));
              if (v89 != *(double *)(a1 + 176) || v88 != *(double *)(a1 + 184))
              {
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                v90 = qword_1022A0008;
                if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
                {
                  v92 = *(_QWORD *)(a1 + 184);
                  v91 = *(_QWORD *)(a1 + 192);
                  v93 = *(_QWORD *)(a1 + 176);
                  v94 = *(_QWORD *)(a1 + 120);
                  v95 = *(_QWORD *)(a1 + 128);
                  v96 = *(_QWORD *)(a1 + 160);
                  *(_DWORD *)v279 = 134350849;
                  *(_QWORD *)&v279[4] = v91;
                  *(_WORD *)&v279[12] = 2050;
                  *(double *)&v279[14] = v89;
                  *(_WORD *)&v279[22] = 2050;
                  *(_QWORD *)&v279[24] = v93;
                  *(_WORD *)&v279[32] = 2050;
                  *(double *)&v279[34] = v88;
                  *(_WORD *)&v279[42] = 2050;
                  *(_QWORD *)&v279[44] = v92;
                  *(_WORD *)&v279[52] = 2049;
                  *(_QWORD *)&v279[54] = v94;
                  *(_WORD *)&v279[62] = 2049;
                  *(_QWORD *)&v279[64] = v95;
                  *(_WORD *)&v279[72] = 2050;
                  *(_QWORD *)&v279[74] = v96;
                  _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "CLAccessory,courseScreener,%{public}.2lf,prevCourse,%{public}.2lf,newCourse,%{public}.2lf,prevCourseUnc,%{public}.2lf,newCourseUnc,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf", v279, 0x52u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(v279, 0x65CuLL);
                  if (qword_1022A0000 != -1)
                    dispatch_once(&qword_1022A0000, &stru_1021506B8);
                  v198 = *(_QWORD *)(a1 + 184);
                  v197 = *(_QWORD *)(a1 + 192);
                  v199 = *(_QWORD *)(a1 + 176);
                  v200 = *(_QWORD *)(a1 + 120);
                  v201 = *(_QWORD *)(a1 + 128);
                  v202 = *(_QWORD *)(a1 + 160);
                  *(_DWORD *)v269 = 134350849;
                  *(_QWORD *)&v269[4] = v197;
                  *(_WORD *)&v269[12] = 2050;
                  *(double *)&v269[14] = v89;
                  *(_WORD *)&v269[22] = 2050;
                  *(_QWORD *)&v269[24] = v199;
                  *(_WORD *)&v269[32] = 2050;
                  *(double *)&v269[34] = v88;
                  *(_WORD *)&v269[42] = 2050;
                  *(_QWORD *)&v269[44] = v198;
                  *(_WORD *)&v269[52] = 2049;
                  *(_QWORD *)&v269[54] = v200;
                  *(_WORD *)&v269[62] = 2049;
                  *(_QWORD *)&v269[64] = v201;
                  *(_WORD *)&v269[72] = 2050;
                  *(_QWORD *)&v269[74] = v202;
                  LODWORD(v217) = 82;
                  _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,courseScreener,%{public}.2lf,prevCourse,%{public}.2lf,newCourse,%{public}.2lf,prevCourseUnc,%{public}.2lf,newCourseUnc,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf", v269, v217);
                  v204 = (char *)v203;
                  sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v203);
                  if (v204 != v279)
                    free(v204);
                }
              }
            }
            *(_QWORD *)v223 = 0;
            Current = CFAbsoluteTimeGetCurrent();
            *(double *)v223 = Current;
            if (Current - *(double *)(a1 + 1920) > 5.0)
            {
              sub_100A956D0(a1 + 992, (double *)v223, *(double *)(a1 + 176), *(double *)(a1 + 160));
              sub_1007364BC((double *)a1, Current, v98);
            }
            if (*(_QWORD *)(a1 + 1384))
            {
              sub_100197040();
              v99 = (CLMotionActivity *)sub_1000C4240();
              if ((_DWORD)v99)
              {
                *(_QWORD *)&v279[80] = 0;
                memset(v279, 0, 48);
                *(_DWORD *)&v279[88] = 1;
                memset(&v279[128], 0, 17);
                *(_QWORD *)&v279[160] = 0xBFF0000000000000;
                v279[168] = 0;
                *(_QWORD *)&v279[184] = 0xBFF0000000000000;
                v279[192] = 0;
                __asm { FMOV            V1.2D, #-1.0 }
                *(_OWORD *)&v279[200] = _Q1;
                v279[216] = 0;
                memset(&v279[224], 0, 56);
                *(_DWORD *)&v279[280] = 1065353216;
                *(_QWORD *)&v279[288] = 0x100000005;
                *(_QWORD *)&v279[296] = 0;
                *(_OWORD *)&v279[56] = *(_OWORD *)(a1 + 120);
                v101 = *(double *)(a1 + 136);
                *(_QWORD *)&v279[72] = *(_QWORD *)(a1 + 144);
                v279[48] = 1;
                *(double *)&v279[112] = v101 * 1.73241161;
                *(double *)&v279[120] = v101 * 1.73241161;
                *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 152);
                v102 = *(_QWORD *)(a1 + 160);
                *(double *)&v279[96] = v101;
                *(_QWORD *)&v279[104] = _Q1;
                *(_QWORD *)&v279[152] = v102;
                *(_QWORD *)&v279[176] = *(_QWORD *)(a1 + 176);
                *(_QWORD *)&v279[16] = *(_QWORD *)(a1 + 296);
                memset(v269, 0, 136);
                CLMotionActivity::getInit(v99);
                sub_10098B81C(*(_QWORD *)(a1 + 1384), (uint64_t)v279, (uint64_t)v269);
                if (v279[216])
                {
                  *(_OWORD *)(a1 + 272) = *(_OWORD *)&v279[224];
                  *(_QWORD *)(a1 + 288) = *(_QWORD *)&v279[240];
                }
                sub_100067A50((uint64_t)&v279[248]);
              }
            }
            if (*(_DWORD *)(a1 + 248) == 2)
            {
              *(_QWORD *)(a1 + 2536) |= 0x10uLL;
              ++*(_DWORD *)(a1 + 2796);
            }
            v104 = *(_QWORD *)(a1 + 120);
            v103 = *(_QWORD *)(a1 + 128);
            v105 = sub_100E6ED7C(a1 + 1640, a1 + 116);
            v106 = v105;
            v107 = *(_DWORD *)(a1 + 248) != 2 || v105;
            if ((v107 & 1) == 0)
            {
              if (qword_1022A0000 != -1)
                dispatch_once(&qword_1022A0000, &stru_1021506B8);
              v108 = qword_1022A0008;
              if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
              {
                v109 = *(_QWORD *)(a1 + 296);
                *(_DWORD *)v279 = 134349056;
                *(_QWORD *)&v279[4] = v109;
                _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "CLAccessory,%{public}.1lf,CLAccessory,handleShiftedAccessoryData failed, shifted data sent to client", v279, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(v279, 0x65CuLL);
                if (qword_1022A0000 != -1)
                  dispatch_once(&qword_1022A0000, &stru_1021506B8);
                v205 = *(_QWORD *)(a1 + 296);
                *(_DWORD *)v269 = 134349056;
                *(_QWORD *)&v269[4] = v205;
                LODWORD(v217) = 12;
                _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,%{public}.1lf,CLAccessory,handleShiftedAccessoryData failed, shifted data sent to client", v269, v217);
                v207 = (char *)v206;
                sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v206);
                if (v207 != v279)
                  free(v207);
              }
            }
            v110 = *(_OWORD *)(a1 + 228);
            v256 = *(_OWORD *)(a1 + 212);
            v257 = v110;
            v258[0] = *(_OWORD *)(a1 + 244);
            *(_OWORD *)((char *)v258 + 12) = *(_OWORD *)(a1 + 256);
            v111 = *(_OWORD *)(a1 + 164);
            *(_OWORD *)&__str[32] = *(_OWORD *)(a1 + 148);
            v253 = v111;
            v112 = *(_OWORD *)(a1 + 196);
            v254 = *(_OWORD *)(a1 + 180);
            v255 = v112;
            v113 = *(_OWORD *)(a1 + 132);
            *(_OWORD *)__str = *(_OWORD *)(a1 + 116);
            *(_OWORD *)&__str[16] = v113;
            memcpy(v259, (const void *)(a1 + 272), sizeof(v259));
            sub_100349198(v260, (uint64_t *)(a1 + 792));
            v114 = *(_OWORD *)(a1 + 888);
            v265 = *(_OWORD *)(a1 + 872);
            v266 = v114;
            v115 = *(_OWORD *)(a1 + 824);
            v261 = *(_OWORD *)(a1 + 808);
            v262 = v115;
            v116 = *(_OWORD *)(a1 + 856);
            v263 = *(_OWORD *)(a1 + 840);
            v264 = v116;
            v267 = *(_BYTE *)(a1 + 904);
            if (qword_1022A02F0 != -1)
              dispatch_once(&qword_1022A02F0, &stru_1021506D8);
            v117 = qword_1022A02F8;
            if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
            {
              v118 = *(_QWORD *)(a1 + 120);
              v119 = *(_QWORD *)(a1 + 128);
              v120 = *(_QWORD *)(a1 + 136);
              v121 = *(_QWORD *)(a1 + 160);
              v122 = *(_QWORD *)(a1 + 176);
              v123 = *(_QWORD *)(a1 + 272);
              v124 = *(_QWORD *)(a1 + 280);
              v126 = *(_QWORD *)(a1 + 288);
              v125 = *(_QWORD *)(a1 + 296);
              v127 = *(_QWORD *)(a1 + 2536);
              v128 = *(_QWORD *)(a1 + 1920);
              v129 = *(_DWORD *)(a1 + 244);
              v130 = *(_DWORD *)(a1 + 248);
              *(_DWORD *)v279 = 136319491;
              *(_QWORD *)&v279[4] = "CL-Accessory";
              *(_WORD *)&v279[12] = 1024;
              *(_DWORD *)&v279[14] = 1;
              *(_WORD *)&v279[18] = 2048;
              *(_QWORD *)&v279[20] = v118;
              *(_WORD *)&v279[28] = 2048;
              *(_QWORD *)&v279[30] = v119;
              *(_WORD *)&v279[38] = 2048;
              *(_QWORD *)&v279[40] = v120;
              *(_WORD *)&v279[48] = 2050;
              *(_QWORD *)&v279[50] = v121;
              *(_WORD *)&v279[58] = 2050;
              *(_QWORD *)&v279[60] = v122;
              *(_WORD *)&v279[68] = 2050;
              *(_QWORD *)&v279[70] = v125;
              *(_WORD *)&v279[78] = 1026;
              *(_DWORD *)&v279[80] = v129;
              *(_WORD *)&v279[84] = 2050;
              *(_QWORD *)&v279[86] = v123;
              *(_WORD *)&v279[94] = 2050;
              *(_QWORD *)&v279[96] = v124;
              *(_WORD *)&v279[104] = 2050;
              *(_QWORD *)&v279[106] = v126;
              *(_WORD *)&v279[114] = 1026;
              *(_DWORD *)&v279[116] = v106;
              *(_WORD *)&v279[120] = 2049;
              *(_QWORD *)&v279[122] = v104;
              *(_WORD *)&v279[130] = 2049;
              *(_QWORD *)&v279[132] = v103;
              *(_WORD *)&v279[140] = 1026;
              *(_DWORD *)&v279[142] = v127;
              *(_WORD *)&v279[146] = 2050;
              *(_QWORD *)&v279[148] = v128;
              *(_WORD *)&v279[156] = 1026;
              *(_DWORD *)&v279[158] = v130;
              _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%{public}.2f,Course,%{public}.2f,timestampGps,%{public}.2lf,integrity,%{public}d,odometer,%{public}.2f,deltaDist,%{public}.2f,deltaDistUnc,%{public}.2f,modified,%{public}d,origLL,%{private}.7lf,%{private}.7lf,accessoryType,%{public}d,lastHdtTime,%{public}.1lf,refFrame,%{public}d", v279, 0xA2u);
            }
            if (sub_1001BFF7C(117, 2))
            {
              bzero(v279, 0x65CuLL);
              if (qword_1022A02F0 != -1)
                dispatch_once(&qword_1022A02F0, &stru_1021506D8);
              v169 = *(_QWORD *)(a1 + 120);
              v170 = *(_QWORD *)(a1 + 128);
              v171 = *(_QWORD *)(a1 + 136);
              v172 = *(_QWORD *)(a1 + 160);
              v173 = *(_QWORD *)(a1 + 176);
              v174 = *(_QWORD *)(a1 + 272);
              v175 = *(_QWORD *)(a1 + 280);
              v177 = *(_QWORD *)(a1 + 288);
              v176 = *(_QWORD *)(a1 + 296);
              v178 = *(_QWORD *)(a1 + 2536);
              v179 = *(_QWORD *)(a1 + 1920);
              v180 = *(_DWORD *)(a1 + 244);
              v181 = *(_DWORD *)(a1 + 248);
              *(_DWORD *)v269 = 136319491;
              *(_QWORD *)&v269[4] = "CL-Accessory";
              *(_WORD *)&v269[12] = 1024;
              *(_DWORD *)&v269[14] = 1;
              *(_WORD *)&v269[18] = 2048;
              *(_QWORD *)&v269[20] = v169;
              *(_WORD *)&v269[28] = 2048;
              *(_QWORD *)&v269[30] = v170;
              *(_WORD *)&v269[38] = 2048;
              *(_QWORD *)&v269[40] = v171;
              *(_WORD *)&v269[48] = 2050;
              *(_QWORD *)&v269[50] = v172;
              *(_WORD *)&v269[58] = 2050;
              *(_QWORD *)&v269[60] = v173;
              *(_WORD *)&v269[68] = 2050;
              *(_QWORD *)&v269[70] = v176;
              *(_WORD *)&v269[78] = 1026;
              *(_DWORD *)&v269[80] = v180;
              *(_WORD *)&v269[84] = 2050;
              *(_QWORD *)&v269[86] = v174;
              *(_WORD *)&v269[94] = 2050;
              *(_QWORD *)&v269[96] = v175;
              *(_WORD *)&v269[104] = 2050;
              *(_QWORD *)&v269[106] = v177;
              *(_WORD *)&v269[114] = 1026;
              *(_DWORD *)&v269[116] = v106;
              *(_WORD *)&v269[120] = 2049;
              *(_QWORD *)&v269[122] = v104;
              *(_WORD *)&v269[130] = 2049;
              *(_QWORD *)&v269[132] = v103;
              *(_WORD *)&v269[140] = 1026;
              *(_DWORD *)&v269[142] = v178;
              *(_WORD *)&v269[146] = 2050;
              *(_QWORD *)&v269[148] = v179;
              *(_WORD *)&v269[156] = 1026;
              *(_DWORD *)&v269[158] = v181;
              LODWORD(v217) = 162;
              _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%{public}.2f,Course,%{public}.2f,timestampGps,%{public}.2lf,integrity,%{public}d,odometer,%{public}.2f,deltaDist,%{public}.2f,deltaDistUnc,%{public}.2f,modified,%{public}d,origLL,%{private}.7lf,%{private}.7lf,accessoryType,%{public}d,lastHdtTime,%{public}.1lf,refFrame,%{public}d", v269, v217);
              v183 = (char *)v182;
              sub_100512490("LOCATION", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v182);
              if (v183 != v279)
                free(v183);
            }
            *(_DWORD *)v279 = 0;
            (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, v279, __str, 0, 0xFFFFFFFFLL, 0);
            objc_msgSend(*(id *)(a1 + 984), "setNextFireDelay:", 5.0);
            sub_10115B980(a1 + 2544, (uint64_t)__str, *(_DWORD *)(a1 + 6120) == 6);
            sub_10012A33C(v279);
            memcpy((void *)(a1 + 272), v279, 0x201uLL);
            sub_1002B7674(a1 + 792, &v280);
            v131 = v286;
            *(_OWORD *)(a1 + 872) = v285;
            *(_OWORD *)(a1 + 888) = v131;
            *(_BYTE *)(a1 + 904) = v287;
            v132 = v282;
            *(_OWORD *)(a1 + 808) = v281;
            *(_OWORD *)(a1 + 824) = v132;
            v133 = v284;
            *(_OWORD *)(a1 + 840) = v283;
            *(_OWORD *)(a1 + 856) = v133;
            sub_100261F44((uint64_t)&v280);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_1021506F8);
            v134 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              v135 = *(_QWORD *)(a1 + 120);
              v136 = *(_QWORD *)(a1 + 128);
              v137 = *(_QWORD *)(a1 + 136);
              v138 = *(_QWORD *)(a1 + 160);
              v139 = *(_QWORD *)(a1 + 176);
              v140 = *(_QWORD *)(a1 + 2536);
              v141 = *(_DWORD *)(a1 + 248);
              v142 = *(_QWORD *)(a1 + 192);
              *(_DWORD *)v279 = 134285313;
              *(_QWORD *)&v279[4] = v135;
              *(_WORD *)&v279[12] = 2049;
              *(_QWORD *)&v279[14] = v136;
              *(_WORD *)&v279[22] = 2050;
              *(_QWORD *)&v279[24] = v137;
              *(_WORD *)&v279[32] = 2049;
              *(_QWORD *)&v279[34] = v138;
              *(_WORD *)&v279[42] = 2049;
              *(_QWORD *)&v279[44] = v139;
              *(_WORD *)&v279[52] = 1026;
              *(_DWORD *)&v279[54] = v140;
              *(_WORD *)&v279[58] = 1026;
              *(_DWORD *)&v279[60] = v141;
              *(_WORD *)&v279[64] = 2050;
              *(_QWORD *)&v279[66] = v142;
              _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "@ClxAccessory, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f,accessoryType,%{public}d,refFrame,%{public}d,timestamp,%{public}.2lf", v279, 0x4Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(v279, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_1021506F8);
              v184 = *(_QWORD *)(a1 + 120);
              v185 = *(_QWORD *)(a1 + 128);
              v186 = *(_QWORD *)(a1 + 136);
              v187 = *(_QWORD *)(a1 + 160);
              v188 = *(_QWORD *)(a1 + 176);
              v189 = *(_QWORD *)(a1 + 2536);
              v190 = *(_DWORD *)(a1 + 248);
              v191 = *(_QWORD *)(a1 + 192);
              *(_DWORD *)v269 = 134285313;
              *(_QWORD *)&v269[4] = v184;
              *(_WORD *)&v269[12] = 2049;
              *(_QWORD *)&v269[14] = v185;
              *(_WORD *)&v269[22] = 2050;
              *(_QWORD *)&v269[24] = v186;
              *(_WORD *)&v269[32] = 2049;
              *(_QWORD *)&v269[34] = v187;
              *(_WORD *)&v269[42] = 2049;
              *(_QWORD *)&v269[44] = v188;
              *(_WORD *)&v269[52] = 1026;
              *(_DWORD *)&v269[54] = v189;
              *(_WORD *)&v269[58] = 1026;
              *(_DWORD *)&v269[60] = v190;
              *(_WORD *)&v269[64] = 2050;
              *(_QWORD *)&v269[66] = v191;
              LODWORD(v217) = 74;
              _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxAccessory, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f,accessoryType,%{public}d,refFrame,%{public}d,timestamp,%{public}.2lf", v269, v217);
              v193 = (char *)v192;
              sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v192);
              if (v193 != v279)
                free(v193);
            }
            sub_1004B4F0C((uint64_t)__str);
            goto LABEL_127;
          case 4:
LABEL_118:
            *(_QWORD *)(a1 + 2536) |= 1uLL;
            sub_100CC1EB4(&__p, HIDWORD(v278[1].__r_.__value_.__r.__words[2]));
            v52 = sub_100A9508C(a1 + 992, (double *)v278, SHIDWORD(v278[1].__r_.__value_.__r.__words[1]));
            if (SHIDWORD(v278[1].__r_.__value_.__r.__words[2]) >= 1)
            {
              v53 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor", v52), "proxyForService:", CFSTR("CLGpsAssistant"));
              memcpy(__dst, v278, sizeof(__dst));
              objc_msgSend(v53, "setVehicleSpeedAssistance:vehicleSpeed:", __dst, v5);
            }
            if (vabdd_f64(*(double *)&v278[0].__r_.__value_.__l.__data_, *(double *)(a1 + 1928)) > 0.5)
            {
              v54 = HIDWORD(v278[1].__r_.__value_.__r.__words[2]) - 1;
              if ((HIDWORD(v278[1].__r_.__value_.__r.__words[2]) - 1) <= 0x31)
              {
                sub_100129CA0((uint64_t)v279);
                v288 = v278[18].__r_.__value_.__r.__words[v54 + 2];
                v289 = v278[0];
                *(_DWORD *)__str = 20;
                (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, __str, v279, 0, 0xFFFFFFFFLL, 0);
                *(_QWORD *)(a1 + 1928) = v278[0].__r_.__value_.__r.__words[0];
                sub_1004B4F0C((uint64_t)v279);
              }
            }
            sub_10115F270(a1 + 2544, (double *)v278);
            goto LABEL_127;
          case 5:
LABEL_125:
            sub_10115E978(a1 + 2544, &__p);
            sub_100CC1EB4(&__p, LODWORD(v278[0].__r_.__value_.__r.__words[1]));
            if (SLODWORD(v278[0].__r_.__value_.__r.__words[1]) >= 1)
            {
              v55 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLGpsAssistant"));
              memcpy(v221, v278, sizeof(v221));
              objc_msgSend(v55, "setVehicleGyroAssistance:vehicleGyro:", v221, v5);
            }
            goto LABEL_127;
          case 7:
LABEL_124:
            sub_10115E978(a1 + 2544, &__p);
            sub_100CC1EB4(&__p, 1);
            sub_1007364BC((double *)a1, *(double *)&v278[0].__r_.__value_.__l.__data_, *(double *)&v278[0].__r_.__value_.__l.__size_);
            *(_QWORD *)(a1 + 1920) = v278[0].__r_.__value_.__r.__words[0];
            goto LABEL_127;
          default:
LABEL_117:
            sub_10115E978(a1 + 2544, &__p);
            sub_100CC1EAC((unsigned __int8 *)&__p);
            goto LABEL_127;
        }
      }
LABEL_93:
      operator delete(v278[0].__r_.__value_.__l.__data_);
      goto LABEL_94;
    }
    bzero(__str, 5uLL);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v22 = __p.__r_.__value_.__r.__words[1];
    v23 = sub_100656D1C((uint64_t)v21, v22);
    snprintf(__str, 5uLL, "%X%X", v23 >> 4, v23 & 0xF);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v24 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      v25 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v279 = 136380931;
      *(_QWORD *)&v279[4] = v25;
      *(_WORD *)&v279[12] = 2082;
      *(_QWORD *)&v279[14] = __str;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLAccessory,#Warning bad checksum for NMEA sentence '%{private}s' - expected %{public}s", v279, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v279, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v26 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v278[0].__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)v278[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      WORD2(v278[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v278[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)__str;
      LODWORD(v218) = 22;
      _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,#Warning bad checksum for NMEA sentence '%{private}s' - expected %{public}s", v278, v218);
      v18 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v27);
LABEL_67:
      if (v18 != v279)
        free(v18);
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v14 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      v15 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v279 = 136380675;
      *(_QWORD *)&v279[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLAccessory,#Warning no NMEA sentence found in %{private}s", v279, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v279, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v16 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v278[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v278[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_send_and_compose_impl(2, 0, v279, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,#Warning no NMEA sentence found in %{private}s", v278, 12);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryNmeaReceived(const CFStringRef)", "%s\n", v17);
      goto LABEL_67;
    }
  }
LABEL_131:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10073633C(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x1308]);
  if (SLOBYTE(STACK[0xA97]) < 0)
    operator delete((void *)STACK[0xA80]);
  _Unwind_Resume(a1);
}

void sub_1007364BC(double *a1, double a2, double a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  _BYTE v16[688];
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  double v19;
  double v20;
  void *v21;
  char v22;
  std::__shared_weak_count *v23;
  id v24;

  if (vabdd_f64(a2, a1[242]) > 0.5)
  {
    sub_100129CA0((uint64_t)v16);
    v19 = a3;
    v20 = a2;
    v15 = 21;
    (*(void (**)(double *, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v15, v16, 0, 0xFFFFFFFFLL, 0);
    a1[242] = a2;

    v6 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v22 < 0)
      operator delete(v21);
    v9 = v18;
    if (v18)
    {
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_100736614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100736628(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  double v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  v7 = 0.0;
  if ((objc_msgSend(*(id *)(a1 + 1352), "syncgetReferenceTime:", &v7) & 1) != 0)
  {
    v2 = objc_msgSend((id)qword_102303BC0, "sendReferenceTime:", v7);
    *(_BYTE *)(a1 + 1977) = v2;
    if (v2)
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v3 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sent reference time %.3f to accessory", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v8 = 134217984;
        v9 = v7;
        v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "sent reference time %.3f to accessory");
LABEL_20:
        v6 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::sendReferenceTime()", "%s\n", v4);
        if (v6 != buf)
          free(v6);
      }
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning no reference time available, not sending reference time", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      LOWORD(v8) = 0;
      v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning no reference time available, not sending reference time");
      goto LABEL_20;
    }
  }
}

void sub_1007368E8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  char *v4;
  _QWORD v5[5];
  _WORD v6[8];
  uint8_t buf[1640];

  if (sub_10019CFA0() == 1)
  {
    v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLLocationController"), CFSTR("CLAccessoryLocationProvider"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100737B6C;
    v5[3] = &unk_102150608;
    v5[4] = a1;
    objc_msgSend(v2, "fetchLocationWithReply:", v5);
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning location services is disabled, not sending reference location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v6[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning location services is disabled, not sending reference location", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::sendReferenceLocation()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
}

void sub_100736AD4(uint64_t a1, CFURLRef anURL, double *a3, double *a4)
{
  const __CFString *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  void **v14;
  void **v15;
  double v16;
  double v17;
  void **v18;
  void **v19;
  NSObject *v20;
  NSObject *v21;
  void **v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  std::string *v28;
  void **v29;
  const char *v30;
  std::string *v31;
  const char *v32;
  std::string *v33;
  uint64_t v34;
  double v35;
  void *__p[2];
  int64_t v37;
  void *v38[2];
  char v39;
  int v40;
  void **v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  std::string v48;
  double v49;
  __int16 v50;
  double v51;

  v7 = CFURLGetString(anURL);
  sub_1001A486C(v7, (uint64_t)v38);
  sub_1007371A4((char *)v38, &v48);
  v8 = *(char *)(a1 + 1311);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 1288);
  else
    v9 = *(const std::string::value_type **)(a1 + 1288);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 1311);
  else
    v10 = *(_QWORD *)(a1 + 1296);
  v11 = std::string::insert(&v48, 0, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v37 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v13 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v14 = v38;
    if (v39 < 0)
      v14 = (void **)v38[0];
    v15 = __p;
    if (v37 < 0)
      v15 = (void **)__p[0];
    v16 = *a3;
    v17 = *a4;
    LODWORD(v48.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
    HIWORD(v48.__r_.__value_.__r.__words[2]) = 2050;
    v49 = v16;
    v50 = 2050;
    v51 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLAccessory,ephemeris download requested at %{private}s to %{private}s (refresh %{public}.3fs expire %{public}.3fs)", (uint8_t *)&v48, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v48, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v23 = v38;
    if (v39 < 0)
      v23 = (void **)v38[0];
    v24 = __p;
    if (v37 < 0)
      v24 = (void **)__p[0];
    v25 = *(_QWORD *)a3;
    v26 = *(_QWORD *)a4;
    v40 = 136381443;
    v41 = v23;
    v42 = 2081;
    v43 = *(double *)&v24;
    v44 = 2050;
    v45 = v25;
    v46 = 2050;
    v47 = v26;
    _os_log_send_and_compose_impl(2, 0, &v48, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,ephemeris download requested at %{private}s to %{private}s (refresh %{public}.3fs expire %{public}.3fs)", &v40, 42);
    v28 = (std::string *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryEphemerisURL(const CFURLRef, const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v27);
    if (v28 != &v48)
      free(v28);
  }
  sub_100605848(a1 + 1040);
  if (v39 >= 0)
    v18 = v38;
  else
    v18 = (void **)v38[0];
  if (v37 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  v48.__r_.__value_.__r.__words[0] = 0x404E000000000000;
  if (!sub_100604D40(a1 + 1040, (const std::string::value_type *)v18, (const std::string::value_type *)v19, (double *)&v48))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v20 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v48.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CLAccessory,could not set up ephemeris updater", (uint8_t *)&v48, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v48, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      LOWORD(v40) = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, &v48, 1628, &_mh_execute_header, qword_1022A0008, 17, "CLAccessory,could not set up ephemeris updater", &v40, v34);
      v33 = (std::string *)v32;
      sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::onAccessoryEphemerisURL(const CFURLRef, const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v32);
      if (v33 != &v48)
        free(v33);
    }
  }
  sub_10060538C(a1 + 1040, a4, a3);
  v35 = 0.0;
  if (*a4 >= 1.79769313e308)
  {
    v48.__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
    sub_100605798((double *)(a1 + 1040), (double *)&v48);
  }
  else if (sub_100603B30(a1 + 1040, &v35) && CFAbsoluteTimeGetCurrent() - v35 < *a4)
  {
    sub_1007372C4(a1);
    goto LABEL_42;
  }
  sub_100605DE4(a1 + 1040, &v35);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v21 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v22 = v38;
    if (v39 < 0)
      v22 = (void **)v38[0];
    LODWORD(v48.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 2050;
    *(double *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v35;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLAccessory,waiting for %{private}s download at %{public}.3f", (uint8_t *)&v48, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v48, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v29 = v38;
    if (v39 < 0)
      v29 = (void **)v38[0];
    v40 = 136380931;
    v41 = v29;
    v42 = 2050;
    v43 = v35;
    LODWORD(v34) = 22;
    _os_log_send_and_compose_impl(2, 0, &v48, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,waiting for %{private}s download at %{public}.3f", &v40, v34);
    v31 = (std::string *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onAccessoryEphemerisURL(const CFURLRef, const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v30);
    if (v31 != &v48)
      free(v31);
  }
LABEL_42:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
}

void sub_10073713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

char *sub_1007371A4@<X0>(char *result@<X0>, std::string *a2@<X8>)
{
  int v3;
  unint64_t size;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  if (result[23] < 0)
  {
    result = (char *)sub_100115CE4(a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)result;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)result + 2);
  }
  v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if (v3 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (size)
  {
    v5 = 0;
    if (v3 >= 0)
      v6 = (uint64_t)a2;
    else
      v6 = a2->__r_.__value_.__r.__words[0];
    while (2)
    {
      v7 = &v5[v6];
      v8 = (unsigned __int8 *)(v6 + size);
LABEL_11:
      v9 = 0;
      while (*v7 != asc_101A27F0D[v9])
      {
        if (++v9 == 31)
        {
          if (++v7 != v8)
            goto LABEL_11;
          return result;
        }
      }
      if (v7 != v8)
      {
        v10 = &v7[-v6];
        if (&v7[-v6] != (unsigned __int8 *)-1)
        {
          result = (char *)std::string::replace(a2, (std::string::size_type)&v7[-v6], 1uLL, 1uLL, 95);
          v5 = v10 + 1;
          size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          v6 = (size & 0x80u) == 0 ? (uint64_t)a2 : a2->__r_.__value_.__r.__words[0];
          if ((size & 0x80u) != 0)
            size = a2->__r_.__value_.__l.__size_;
          if (size > (unint64_t)v5)
            continue;
        }
      }
      break;
    }
  }
  return result;
}

void sub_1007372A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1007372C4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  const __CFString *v4;
  CFURLRef v5;
  NSInputStream *v6;
  NSInputStream *v7;
  id v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  NSObject *v18;
  void **v19;
  unsigned int v20;
  NSObject *v21;
  int v22;
  void **v23;
  id v24;
  void **v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  id v29;
  _BYTE *v30;
  char *v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  __int16 v45;
  id v46;
  _BYTE buf[12];
  __int16 v48;
  id v49;
  char v50;
  void *__p[2];
  char v52;

  v42 = 0;
  v2 = a1 + 1040;
  if ((sub_100603B30(a1 + 1040, &v42) & 1) != 0)
  {
    sub_100605D40(v2, (uint64_t)__p);
    if (v52 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v3, 0x8000100u, kCFAllocatorNull);
    if (v52 < 0)
      operator delete(__p[0]);
    v5 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v4, kCFURLPOSIXPathStyle, 0);
    v6 = +[NSInputStream inputStreamWithURL:](NSInputStream, "inputStreamWithURL:", v5);
    v7 = v6;
    if (v6)
    {
      -[NSInputStream open](v6, "open");
      v8 = +[NSMutableData data](NSMutableData, "data");
      if (-[NSInputStream hasBytesAvailable](v7, "hasBytesAvailable"))
      {
        do
        {
          v9 = -[NSInputStream read:maxLength:](v7, "read:maxLength:", __p, 1024);
          if (v9 >= 1)
            objc_msgSend(v8, "appendBytes:length:", __p, v9);
          v10 = -[NSInputStream hasBytesAvailable](v7, "hasBytesAvailable");
          if (v9 >= 0)
            v11 = v10;
          else
            v11 = 0;
        }
        while ((v11 & 1) != 0);
      }
      -[NSInputStream close](v7, "close");
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v18 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
      {
        sub_1001A486C(v4, (uint64_t)__p);
        v19 = v52 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "could not create input stream for ephemeris file, %{public}s", buf, 0xCu);
        if (v52 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v34 = qword_1022A0008;
        sub_1001A486C(v4, (uint64_t)buf);
        if (v50 >= 0)
          v35 = buf;
        else
          v35 = *(_BYTE **)buf;
        v43 = 136446210;
        v44 = v35;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v34, 17, "could not create input stream for ephemeris file, %{public}s", &v43, 12);
        v37 = v36;
        if (v50 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::sendReferenceEphemeris()", "%s\n", v37);
        if (v37 != (char *)__p)
          free(v37);
      }
      v8 = 0;
    }
    CFRelease(v4);
    CFRelease(v5);
    if (objc_msgSend(v8, "length"))
    {
      v20 = objc_msgSend((id)qword_102303BC0, "sendEphemeris:", v8);
      *(_BYTE *)(a1 + 1976) = v20;
      if (v20)
      {
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v21 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          sub_100605C9C(v2, (uint64_t)__p);
          v22 = v52;
          v23 = (void **)__p[0];
          v24 = objc_msgSend(v8, "length");
          v25 = __p;
          if (v22 < 0)
            v25 = v23;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v25;
          v48 = 2048;
          v49 = v24;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "sent ephemeris data %s (%lu bytes) to accessory", buf, 0x16u);
          if (v52 < 0)
            operator delete(__p[0]);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021506B8);
          v26 = qword_1022A0008;
          sub_100605C9C(v2, (uint64_t)buf);
          v27 = v50;
          v28 = *(_BYTE **)buf;
          v29 = objc_msgSend(v8, "length");
          v30 = buf;
          if (v27 < 0)
            v30 = v28;
          v43 = 136315394;
          v44 = v30;
          v45 = 2048;
          v46 = v29;
          LODWORD(v41) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v26, 2, "sent ephemeris data %s (%lu bytes) to accessory", (const char *)&v43, v41);
          v17 = v31;
          if (v50 < 0)
            operator delete(*(void **)buf);
LABEL_32:
          sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::sendReferenceEphemeris()", "%s\n", v17);
LABEL_87:
          if (v17 != (char *)__p)
            free(v17);
        }
      }
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v32 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_FAULT))
      {
        sub_100605D40(v2, (uint64_t)__p);
        v33 = v52 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "could not create data from file %{public}s", buf, 0xCu);
        if (v52 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v38 = qword_1022A0008;
        sub_100605D40(v2, (uint64_t)buf);
        if (v50 >= 0)
          v39 = buf;
        else
          v39 = *(_BYTE **)buf;
        v43 = 136446210;
        v44 = v39;
        LODWORD(v41) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v38, 17, "could not create data from file %{public}s", &v43, v41);
        v17 = v40;
        if (v50 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::sendReferenceEphemeris()", "%s\n", v17);
        goto LABEL_87;
      }
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v12 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      sub_100605C9C(v2, (uint64_t)__p);
      v13 = v52 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning ephemeris %s not available", buf, 0xCu);
      if (v52 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v14 = qword_1022A0008;
      sub_100605C9C(v2, (uint64_t)buf);
      if (v50 >= 0)
        v15 = buf;
      else
        v15 = *(_BYTE **)buf;
      v43 = 136315138;
      v44 = v15;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 0, "#Warning ephemeris %s not available", (const char *)&v43);
      v17 = v16;
      if (v50 < 0)
        operator delete(*(void **)buf);
      goto LABEL_32;
    }
  }
}

void sub_100737B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100737B6C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  char v10[4];
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;

  v4 = *(_QWORD *)(a1 + 32);
  (*(void (**)(char *__return_ptr, uint64_t))(a3 + 16))(v10, a3);
  if (a2 && v13 >= 0.0)
  {
    v5 = objc_msgSend((id)qword_102303BC0, "sendReferenceTime:locationLatitude:longitude:accuracy:", v14, v11, v12, v13);
    *(_BYTE *)(v4 + 1978) = v5;
    if (v5)
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v6 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        v22 = v11;
        v23 = 2049;
        v24 = v12;
        v25 = 2048;
        v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "sent reference pos <%{private}.8f,%{private}.8f> accuracy %.2f to accessory", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v15 = 134284033;
        v16 = v11;
        v17 = 2049;
        v18 = v12;
        v19 = 2048;
        v20 = v13;
        v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "sent reference pos <%{private}.8f,%{private}.8f> accuracy %.2f to accessory", &v15, 32);
LABEL_21:
        v9 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::sendReferenceLocation()_block_invoke", "%s\n", v7);
        if (v9 != buf)
          free(v9);
      }
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v8 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning no reference location available, not sending reference location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      LOWORD(v15) = 0;
      v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning no reference location available, not sending reference location", &v15, 2);
      goto LABEL_21;
    }
  }
}

id *sub_100737E84(id *result, uint64_t a2)
{
  id *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  int v57;

  if (*(_DWORD *)(a2 + 96) == 3 && *(_BYTE *)(a2 + 516) != 0)
  {
    v4 = result;
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_1021506D8);
    v5 = qword_1022A02F8;
    if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 4);
      v7 = *(_QWORD *)(a2 + 12);
      v8 = *(_QWORD *)(a2 + 20);
      v9 = *(_QWORD *)(a2 + 44);
      v10 = *(_QWORD *)(a2 + 60);
      v11 = *(_QWORD *)(a2 + 184);
      v12 = *(_DWORD *)(a2 + 128);
      *(_DWORD *)buf = 136317186;
      v41 = "CL-AccessoryPropagated";
      v42 = 1024;
      v43 = 1;
      v44 = 2048;
      v45 = v6;
      v46 = 2048;
      v47 = v7;
      v48 = 2048;
      v49 = v8;
      v50 = 2048;
      v51 = v9;
      v52 = 2048;
      v53 = v10;
      v54 = 2048;
      v55 = v11;
      v56 = 1024;
      v57 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d", buf, 0x54u);
    }
    if (sub_1001BFF7C(117, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_1021506D8);
      v13 = *(_QWORD *)(a2 + 4);
      v14 = *(_QWORD *)(a2 + 12);
      v15 = *(_QWORD *)(a2 + 20);
      v16 = *(_QWORD *)(a2 + 44);
      v17 = *(_QWORD *)(a2 + 60);
      v18 = *(_QWORD *)(a2 + 184);
      v19 = *(_DWORD *)(a2 + 128);
      v22 = 136317186;
      v23 = "CL-AccessoryPropagated";
      v24 = 1024;
      v25 = 1;
      v26 = 2048;
      v27 = v13;
      v28 = 2048;
      v29 = v14;
      v30 = 2048;
      v31 = v15;
      v32 = 2048;
      v33 = v16;
      v34 = 2048;
      v35 = v17;
      v36 = 2048;
      v37 = v18;
      v38 = 1024;
      v39 = v19;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d", (const char *)&v22, 84);
      v21 = (uint8_t *)v20;
      sub_100512490("LOCATION", 1, 0, 2, "void CLAccessoryLocationProvider::sendPropagatedLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    *(_DWORD *)buf = 0;
    (*((void (**)(id *, uint8_t *, uint64_t, _QWORD, uint64_t, _QWORD))*v4 + 19))(v4, buf, a2, 0, 0xFFFFFFFFLL, 0);
    return (id *)objc_msgSend(v4[123], "setNextFireDelay:", 5.0);
  }
  return result;
}

void sub_10073815C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  CFAbsoluteTime v10;
  uint8_t buf[4];
  CFAbsoluteTime Current;

  if (*a3 == 4 && *(_DWORD *)(a4 + 188) != 1)
  {
    sub_100738320(a1 + 1984);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,NmeaScreener reset", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v6 = qword_1022A0008;
      v9 = 134349056;
      v10 = CFAbsoluteTimeGetCurrent();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "CLAccessoryAWD,%{public}.1lf,NmeaScreener reset", &v9, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

__n128 sub_100738320(uint64_t a1)
{
  __n128 result;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(__n128 *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(__n128 *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(__n128 *)(a1 + 256) = result;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  *(_WORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 432) = 50;
  return result;
}

void sub_100738388(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  uint64_t **v5;
  double v6;
  void *__p[2];
  uint64_t v8;
  double v9;

  v4 = atomic_load((unsigned __int8 *)&qword_102303BF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_102303BF8))
  {
    sub_1015A2E04(&xmmword_102303BE0, "com.apple.Maps");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303BE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102303BF8);
  }
  sub_10115FE2C(a1 + 2544, *a2);
  v5 = (uint64_t **)(a1 + 6144);
  if (!sub_1001876D0((uint64_t)v5, (const void **)&xmmword_102303BE0))
  {
    v6 = sub_1001FCBB4();
    if (byte_102303BF7 < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_102303BE0, *((unint64_t *)&xmmword_102303BE0 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102303BE0;
      v8 = unk_102303BF0;
    }
    v9 = v6;
    sub_100210A64(v5, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
}

void sub_10073849C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_102303BF8);
  _Unwind_Resume(a1);
}

void sub_1007384CC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  CFAbsoluteTime v15;
  int v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  CFAbsoluteTime v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  CFAbsoluteTime v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (*a3 == 7)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v6 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *(unsigned __int8 *)(a4 + 9);
      v9 = *(_DWORD *)(a4 + 12);
      *(_DWORD *)buf = 134349568;
      v27 = Current;
      v28 = 1026;
      v29 = v8;
      v30 = 1026;
      v31 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,ReceivedBatteryNotification,connected,%{public}d,type,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v14 = qword_1022A0008;
      v15 = CFAbsoluteTimeGetCurrent();
      v16 = *(unsigned __int8 *)(a4 + 9);
      v17 = *(_DWORD *)(a4 + 12);
      v20 = 134349568;
      v21 = v15;
      v22 = 1026;
      v23 = v16;
      v24 = 1026;
      v25 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "CLAccessoryAWD,%{public}.1lf,ReceivedBatteryNotification,connected,%{public}d,type,%{public}d", &v20, 24);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    v10 = *(double *)(a1 + 6128);
    if (!*(_BYTE *)(a4 + 9) || v10 >= 0.0)
    {
      if (v10 <= 0.0 || !*(_BYTE *)(a1 + 6124))
        goto LABEL_15;
      if (*(_DWORD *)(a1 + 6136) == *(_DWORD *)(a4 + 12))
      {
        if (*(_BYTE *)(a4 + 9))
          goto LABEL_15;
        v13 = sub_1001FCBB4();
        sub_10115E8BC((uint64_t *)(a1 + 2544), *(_DWORD *)(a1 + 6136), v13, *(double *)(a1 + 6128));
        v11 = -1.0;
LABEL_10:
        *(double *)(a1 + 6128) = v11;
LABEL_15:
        *(_BYTE *)(a1 + 6124) = *(_BYTE *)(a4 + 9);
        *(_DWORD *)(a1 + 6136) = *(_DWORD *)(a4 + 12);
        return;
      }
      v12 = sub_1001FCBB4();
      sub_10115E8BC((uint64_t *)(a1 + 2544), *(_DWORD *)(a1 + 6136), v12, *(double *)(a1 + 6128));
    }
    v11 = sub_1001FCBB4();
    goto LABEL_10;
  }
}

uint64_t *sub_100738760(uint64_t a1, int a2, int a3)
{
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  uint64_t v21;

  if (a3 == 1)
  {
    if (a2)
    {
      objc_msgSend(*(id *)(a1 + 984), "nextFireDelay");
      if (v6 > 0.02)
      {
        objc_msgSend(*(id *)(a1 + 984), "nextFireDelay");
        if (v7 <= 5.0)
        {
          if (qword_1022A0000 != -1)
            dispatch_once(&qword_1022A0000, &stru_1021506B8);
          v8 = qword_1022A0008;
          if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(*(id *)(a1 + 984), "nextFireDelay");
            *(_DWORD *)buf = 67240448;
            v19 = 1;
            v20 = 2050;
            v21 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLNMEAScreener,screen,nmea log rejected, notify location is unavailable from accessory,sending unavailable notification,locTypeUsedForScreening,%{public}d,nextFireDelay,%{public}.2lf", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0000 != -1)
              dispatch_once(&qword_1022A0000, &stru_1021506B8);
            v11 = qword_1022A0008;
            objc_msgSend(*(id *)(a1 + 984), "nextFireDelay");
            v15[0] = 67240448;
            v15[1] = 1;
            v16 = 2050;
            v17 = v12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "CLNMEAScreener,screen,nmea log rejected, notify location is unavailable from accessory,sending unavailable notification,locTypeUsedForScreening,%{public}d,nextFireDelay,%{public}.2lf", v15, 18);
            v14 = (uint8_t *)v13;
            sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onNMEAScreenerCallBack(BOOL, CLLocationType)", "%s\n", v13);
            if (v14 != buf)
              free(v14);
          }
          objc_msgSend(*(id *)(a1 + 984), "setNextFireDelay:", 0.02);
        }
      }
    }
  }
  return sub_1011607FC(a1 + 2544, a2, a3);
}

void sub_1007389A8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  int v43;
  int v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  const char *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  _BYTE v57[16];
  _QWORD v58[2];
  int v59;
  _BYTE v60[24];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  unsigned int v70;
  _BYTE buf[28];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  unsigned int v79;
  __int16 v80;
  unsigned int v81;

  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v7 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    v9 = *(_QWORD *)(a1 + 6184);
    v10 = *(_QWORD *)(a1 + 6192);
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v8;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v9;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,notification,%{public}d,courseUnc,%{public}.1lf,speedThreshold,%{public}.1lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v48 = *a3;
    v49 = *(_QWORD *)(a1 + 6184);
    v50 = *(_QWORD *)(a1 + 6192);
    v59 = 67240704;
    *(_DWORD *)v60 = v48;
    *(_WORD *)&v60[4] = 2050;
    *(_QWORD *)&v60[6] = v49;
    *(_WORD *)&v60[14] = 2050;
    *(_QWORD *)&v60[16] = v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,notification,%{public}d,courseUnc,%{public}.1lf,speedThreshold,%{public}.1lf", &v59, 28);
    v52 = (char *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  if (*a3 == 2)
  {
    sub_100119F3C(v58);
    if (sub_100006BB4(a4, "GnssKnownACSettings", v58))
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v11 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,GnssKnownAC config available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        LOWORD(v59) = 0;
        LODWORD(v56) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,GnssKnownAC config available", &v59, v56);
        v54 = (char *)v53;
        sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
      sub_1017A0084(a1 + 1392, (uint64_t)v58);
    }
    if (sub_100006BB4(a4, "AccessoryConfig", v58))
    {
      v12 = (void *)qword_102303BC0;
      sub_100525028(v57);
      objc_msgSend(v12, "readMobileAssetConfiguration:", v57);
      sub_10011A5A8(v57);
      *(_BYTE *)(a1 + 2529) = objc_msgSend((id)qword_102303BC0, "getEnableAggressiveLocationScreening");
      *(double *)(a1 + 2152) = (double)(int)objc_msgSend((id)qword_102303BC0, "getLocationDiffThresholdForAggressiveScreening");
      *(_DWORD *)(a1 + 2380) = objc_msgSend((id)qword_102303BC0, "getMinContinuousFailureCountForBlockingAccessory");
      *(_DWORD *)(a1 + 2384) = objc_msgSend((id)qword_102303BC0, "getMinContinuousSuccessCountForUnblockingAccessory");
      *(_BYTE *)(a1 + 2528) = objc_msgSend((id)qword_102303BC0, "getEnableCourseScreening");
      v13 = (unsigned __int8 *)(a1 + 6200);
      *(_BYTE *)(a1 + 6200) = objc_msgSend((id)qword_102303BC0, "getAllowGPGGAOnlyAccessory");
      objc_msgSend((id)qword_102303BC0, "getCourseUncertaintyForCarPlayDRModeAtLowSpeedsInDeg");
      *(_QWORD *)(a1 + 6184) = v14;
      objc_msgSend((id)qword_102303BC0, "getSpeedThresholdForCarPlayDRModeCourseUncSettingInMPS");
      *(_QWORD *)(a1 + 6192) = v15;
      sub_1001E4804(buf);
      v16 = *(_BYTE *)(a1 + 2528);
      LOBYTE(v59) = 0;
      v17 = sub_1001E4874(*(uint64_t *)buf, "EnableAccessoryCourseScreening", (BOOL *)&v59);
      v18 = v59;
      if (!v17)
        v18 = v16;
      *(_BYTE *)(a1 + 2528) = v18;
      v19 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v22 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(a1 + 6184);
        v24 = *(_QWORD *)(a1 + 6192);
        v25 = *(unsigned __int8 *)(a1 + 2528);
        v26 = *v13;
        v27 = *(unsigned __int8 *)(a1 + 2529);
        v28 = objc_msgSend((id)qword_102303BC0, "getLocationDiffThresholdForAggressiveScreening");
        v29 = objc_msgSend((id)qword_102303BC0, "getMinContinuousFailureCountForBlockingAccessory");
        v30 = objc_msgSend((id)qword_102303BC0, "getMinContinuousSuccessCountForUnblockingAccessory");
        *(_DWORD *)buf = 134350848;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&buf[24] = v25;
        v72 = 1026;
        v73 = v26;
        v74 = 1026;
        v75 = v27;
        v76 = 1026;
        v77 = v28;
        v78 = 1026;
        v79 = v29;
        v80 = 1026;
        v81 = v30;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLAccessory,MA-OTA,Provider set courseUncertaintyAtLowSpeeds,courseUnc,%{public}.1lf,speedThreshold,%{public}.1lf,enableCourseScreening,%{public}d,allowGPGGAOnlyAccessory,%{public}d,enableAggressiveLocationScreening,%{public}d,aggressiveScreeningThreshold,%{public}d,minContFailCount,%{public}d,minContSuccessCount,%{public}d", buf, 0x3Au);
        v13 = (unsigned __int8 *)(a1 + 6200);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v31 = qword_1022A0008;
      v32 = *(_QWORD *)(a1 + 6184);
      v33 = *(_QWORD *)(a1 + 6192);
      v34 = *(unsigned __int8 *)(a1 + 2528);
      v35 = *v13;
      v36 = *(unsigned __int8 *)(a1 + 2529);
      v37 = objc_msgSend((id)qword_102303BC0, "getLocationDiffThresholdForAggressiveScreening");
      v38 = objc_msgSend((id)qword_102303BC0, "getMinContinuousFailureCountForBlockingAccessory");
      v39 = objc_msgSend((id)qword_102303BC0, "getMinContinuousSuccessCountForUnblockingAccessory");
      v59 = 134350848;
      *(_QWORD *)v60 = v32;
      *(_WORD *)&v60[8] = 2050;
      *(_QWORD *)&v60[10] = v33;
      *(_WORD *)&v60[18] = 1026;
      *(_DWORD *)&v60[20] = v34;
      v61 = 1026;
      v62 = v35;
      v63 = 1026;
      v64 = v36;
      v65 = 1026;
      v66 = v37;
      v67 = 1026;
      v68 = v38;
      v69 = 1026;
      v70 = v39;
      LODWORD(v56) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "CLAccessory,MA-OTA,Provider set courseUncertaintyAtLowSpeeds,courseUnc,%{public}.1lf,speedThreshold,%{public}.1lf,enableCourseScreening,%{public}d,allowGPGGAOnlyAccessory,%{public}d,enableAggressiveLocationScreening,%{public}d,aggressiveScreeningThreshold,%{public}d,minContFailCount,%{public}d,minContSuccessCount,%{public}d", &v59, v56);
      v41 = (char *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v40);
      if (v41 == buf)
        goto LABEL_45;
    }
    else
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v47 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "CLAccessory,MA-OTA,accessoryLocation config not available", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_45;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      LOWORD(v59) = 0;
      LODWORD(v56) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLAccessory,MA-OTA,accessoryLocation config not available", &v59, v56);
      v41 = (char *)v55;
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v55);
      if (v41 == buf)
        goto LABEL_45;
    }
    free(v41);
LABEL_45:
    sub_10011A5A8(v58);
    return;
  }
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v42 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_ERROR))
  {
    v43 = *a3;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLAccessory,MA-OTA,invalid notification,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v44 = *a3;
    v59 = 67240192;
    *(_DWORD *)v60 = v44;
    LODWORD(v56) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 16, "CLAccessory,MA-OTA,invalid notification,%{public}d", &v59, v56);
    v46 = (char *)v45;
    sub_100512490("Generic", 1, 0, 0, "void CLAccessoryLocationProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
}

void sub_1007392DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100739330()
{
  operator new();
}

void sub_1007393D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100739414()
{
  operator new();
}

void sub_1007394C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

id sub_100739500(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLAccessoryLocationProvider")), "syncgetDoSync:", a1);
}

void sub_100739538(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

double sub_100739564(uint64_t a1)
{
  uint64_t v1;
  double result;

  sub_1002433B8(a1);
  *(_BYTE *)(v1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 532) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 1140) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1176) = 0u;
  *(_OWORD *)(v1 + 1160) = 0u;
  *(_OWORD *)(v1 + 1268) = 0u;
  *(_OWORD *)(v1 + 1256) = 0u;
  *(_OWORD *)(v1 + 1240) = 0u;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  *(_OWORD *)(v1 + 1396) = 0u;
  *(_OWORD *)(v1 + 1384) = 0u;
  *(_OWORD *)(v1 + 1368) = 0u;
  *(_OWORD *)(v1 + 1416) = 0u;
  *(_OWORD *)(v1 + 1480) = 0u;
  *(_OWORD *)(v1 + 1544) = 0u;
  *(_OWORD *)(v1 + 1608) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 316) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 364) = 0u;
  *(_QWORD *)(v1 + 384) = v1 + 392;
  *(_QWORD *)(v1 + 408) = v1 + 416;
  *(_QWORD *)(v1 + 432) = v1 + 440;
  *(_QWORD *)(v1 + 456) = v1 + 464;
  *(_QWORD *)(v1 + 576) = v1 + 584;
  *(_QWORD *)(v1 + 600) = v1 + 608;
  *(_QWORD *)(v1 + 624) = v1 + 632;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_QWORD *)(v1 + 696) = v1 + 704;
  *(_QWORD *)(v1 + 720) = v1 + 728;
  *(_QWORD *)(v1 + 744) = v1 + 752;
  *(_QWORD *)(v1 + 816) = v1 + 824;
  *(_QWORD *)(v1 + 840) = v1 + 848;
  *(_QWORD *)(v1 + 864) = v1 + 872;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_QWORD *)(v1 + 944) = v1 + 952;
  *(_QWORD *)(v1 + 968) = v1 + 976;
  *(_QWORD *)(v1 + 1064) = v1 + 1072;
  *(_QWORD *)(v1 + 1192) = v1 + 1200;
  *(_QWORD *)(v1 + 1320) = v1 + 1328;
  *(_QWORD *)(v1 + 1448) = v1 + 1456;
  *(_QWORD *)(v1 + 48) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 280) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 213) = 0u;
  *(_QWORD *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 568) = 0;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 664) = 0;
  *(_QWORD *)(v1 + 688) = 0;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_QWORD *)(v1 + 808) = 0;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(_QWORD *)(v1 + 928) = 0;
  *(_DWORD *)(v1 + 936) = 0;
  *(_DWORD *)(v1 + 1008) = 0;
  *(_OWORD *)(v1 + 976) = 0u;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1200) = 0u;
  *(_DWORD *)(v1 + 1232) = 0;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1328) = 0u;
  *(_DWORD *)(v1 + 1360) = 0;
  *(_OWORD *)(v1 + 1344) = 0u;
  *(_OWORD *)(v1 + 1456) = 0u;
  *(_DWORD *)(v1 + 1440) = 0;
  *(_QWORD *)(v1 + 1432) = 0;
  *(_QWORD *)(v1 + 1472) = v1 + 1480;
  *(_OWORD *)(v1 + 1504) = 0u;
  *(_QWORD *)(v1 + 1496) = v1 + 1504;
  *(_QWORD *)(v1 + 1520) = 0;
  *(_DWORD *)(v1 + 1528) = 0;
  *(_QWORD *)(v1 + 1536) = v1 + 1544;
  *(_QWORD *)(v1 + 1560) = 0;
  *(_DWORD *)(v1 + 1568) = 0;
  *(_OWORD *)(v1 + 1584) = 0u;
  *(_QWORD *)(v1 + 1576) = v1 + 1584;
  *(_QWORD *)(v1 + 1600) = v1 + 1608;
  *(_OWORD *)(v1 + 1632) = 0u;
  *(_QWORD *)(v1 + 1624) = v1 + 1632;
  *(_OWORD *)(v1 + 1680) = 0u;
  *(_DWORD *)(v1 + 1664) = 0;
  *(_OWORD *)(v1 + 1648) = 0u;
  *(_QWORD *)(v1 + 1672) = v1 + 1680;
  *(_OWORD *)(v1 + 2921) = 0u;
  *(_OWORD *)(v1 + 2912) = 0u;
  *(_OWORD *)(v1 + 2896) = 0u;
  *(_OWORD *)(v1 + 2880) = 0u;
  *(_OWORD *)(v1 + 2864) = 0u;
  *(_OWORD *)(v1 + 2848) = 0u;
  *(_OWORD *)(v1 + 2832) = 0u;
  *(_OWORD *)(v1 + 2816) = 0u;
  *(_OWORD *)(v1 + 2800) = 0u;
  *(_OWORD *)(v1 + 2784) = 0u;
  *(_OWORD *)(v1 + 2768) = 0u;
  *(_OWORD *)(v1 + 1904) = 0u;
  *(_OWORD *)(v1 + 1888) = 0u;
  *(_OWORD *)(v1 + 1872) = 0u;
  *(_OWORD *)(v1 + 1856) = 0u;
  *(_OWORD *)(v1 + 1840) = 0u;
  *(_OWORD *)(v1 + 1824) = 0u;
  *(_OWORD *)(v1 + 1808) = 0u;
  *(_OWORD *)(v1 + 1792) = 0u;
  *(_OWORD *)(v1 + 1776) = 0u;
  *(_OWORD *)(v1 + 1760) = 0u;
  *(_OWORD *)(v1 + 1744) = 0u;
  *(_OWORD *)(v1 + 1728) = 0u;
  *(_OWORD *)(v1 + 1712) = 0u;
  *(_OWORD *)(v1 + 1696) = 0u;
  *(_WORD *)(v1 + 2937) = 257;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v1 + 2944) = _Q1;
  *(_OWORD *)(v1 + 2960) = _Q1;
  *(_OWORD *)(v1 + 2976) = _Q1;
  *(_QWORD *)(v1 + 2992) = 0xBFF0000000000000;
  *(_WORD *)(v1 + 3024) = 0;
  *(_QWORD *)(v1 + 3016) = 0;
  *(_OWORD *)(v1 + 3000) = 0u;
  return result;
}

Class sub_100739884(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_102303C08)
  {
    v4 = off_1021506A0;
    v5 = 0;
    qword_102303C08 = _sl_dlopen(&v4, &v3);
  }
  if (!qword_102303C08)
    sub_1019073AC(&v3);
  if (v3)
    free(v3);
  result = objc_getClass("CARSessionStatus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_101907410();
  qword_102303C00 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_100739960(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_10073998C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_100739A38(uint64_t a1)
{
  sub_100090AE4(a1 + 1632, *(char **)(a1 + 1640));
  sub_100008848(a1 + 1584, *(_QWORD **)(a1 + 1592));
  sub_100008848(a1 + 1560, *(_QWORD **)(a1 + 1568));
  sub_100008848(a1 + 1536, *(_QWORD **)(a1 + 1544));
  sub_100008848(a1 + 1496, *(_QWORD **)(a1 + 1504));
  sub_100090AE4(a1 + 1456, *(char **)(a1 + 1464));
  sub_100008848(a1 + 1432, *(_QWORD **)(a1 + 1440));
  sub_100008848(a1 + 1408, *(_QWORD **)(a1 + 1416));
  sub_100008848(a1 + 1280, *(_QWORD **)(a1 + 1288));
  sub_100008848(a1 + 1152, *(_QWORD **)(a1 + 1160));
  sub_100008848(a1 + 1024, *(_QWORD **)(a1 + 1032));
  sub_100008848(a1 + 928, *(_QWORD **)(a1 + 936));
  sub_100008848(a1 + 904, *(_QWORD **)(a1 + 912));
  sub_100008848(a1 + 824, *(_QWORD **)(a1 + 832));
  sub_100008848(a1 + 800, *(_QWORD **)(a1 + 808));
  sub_100008848(a1 + 776, *(_QWORD **)(a1 + 784));
  sub_100008848(a1 + 704, *(_QWORD **)(a1 + 712));
  sub_100008848(a1 + 680, *(_QWORD **)(a1 + 688));
  sub_100008848(a1 + 656, *(_QWORD **)(a1 + 664));
  sub_100008848(a1 + 584, *(_QWORD **)(a1 + 592));
  sub_100008848(a1 + 560, *(_QWORD **)(a1 + 568));
  sub_100008848(a1 + 536, *(_QWORD **)(a1 + 544));
  sub_100008848(a1 + 416, *(_QWORD **)(a1 + 424));
  sub_100008848(a1 + 392, *(_QWORD **)(a1 + 400));
  sub_100008848(a1 + 368, *(_QWORD **)(a1 + 376));
  sub_100008848(a1 + 344, *(_QWORD **)(a1 + 352));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100739C00(id a1)
{
  qword_1022A02F8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100739C2C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100739C5C()
{
  operator delete();
}

_QWORD *sub_100739C70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102150728;
  result[1] = v3;
  return result;
}

uint64_t sub_100739CA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102150728;
  a2[1] = v2;
  return result;
}

uint64_t *sub_100739CC0(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  return sub_100738760(*(_QWORD *)(a1 + 8), *a2, *a3);
}

uint64_t sub_100739CD0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100739D0C()
{
}

uint64_t sub_100739D18(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10098CA68();
    operator delete();
  }
  return result;
}

void sub_100739D58()
{
  operator delete();
}

_QWORD *sub_100739D6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021507B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100739DA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021507B8;
  a2[1] = v2;
  return result;
}

void sub_100739DBC(uint64_t a1, int *a2)
{
  sub_100738388(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_100739DC4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100739E00()
{
}

void sub_100739E0C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BBF150;
      v1[3] = unk_101BBF160;
      v1[4] = xmmword_101BBF170;
      v1[0] = xmmword_101BBF130;
      v1[1] = unk_101BBF140;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100739EE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100739EF8()
{
  sub_1015A2E04(&xmmword_102303B98, "CLAccessoryLocationProvider");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102303B98, (void *)&_mh_execute_header);
}

BOOL sub_100739F3C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  BOOL v6;
  NSObject *v7;
  double v8;
  double v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  double v13;
  double v14;
  const char *v15;
  NSObject *v16;
  double v17;
  double v18;
  const char *v19;
  NSObject *v22;
  double v23;
  double v24;
  const char *v25;
  NSObject *v26;
  double v27;
  _BOOL8 v28;
  NSObject *v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double *v40;
  unint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  _BOOL4 v60;
  double v61;
  NSObject *v62;
  double v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double v70;
  double *v71;
  double *v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  NSObject *v77;
  const char *v78;
  char *v79;
  NSObject *v80;
  const char *v81;
  NSObject *v82;
  const char *v83;
  double v84;
  int v85;
  uint64_t v86;
  double v87;
  NSObject *v88;
  const char *v89;
  double *v90;
  double v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  double v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  long double v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double *v114;
  double v115;
  double v116;
  uint64_t v117;
  double *v118;
  double v119;
  double v120;
  double v121;
  double v122;
  NSObject *v123;
  const char *v124;
  const char *v125;
  char *v126;
  NSObject *v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  char *v135;
  uint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  const char *v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  char *v147;
  uint64_t v148;
  long double __xa;
  double __x;
  double __xb;
  double v152;
  double v153;
  void *v154;
  char v155;
  _QWORD v156[2];
  void *__p;
  char v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  double __y[2];
  _BYTE v171[22];
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  _BYTE buf[22];
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;

  *(_QWORD *)a1 = *(_QWORD *)(a4 + 8);
  if (!*a2)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v12 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(double *)a1;
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,road is nullptr", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v14 = *(double *)a1;
    *(_DWORD *)v171 = 134349056;
    *(double *)&v171[4] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,road is nullptr", v171, 12);
    v11 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v15);
    goto LABEL_205;
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v16 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(double *)a1;
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,Flowline data not available", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v18 = *(double *)a1;
    *(_DWORD *)v171 = 134349056;
    *(double *)&v171[4] = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,Flowline data not available", v171, 12);
    v11 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v19);
    goto LABEL_205;
  }
  if (*(_BYTE *)(a4 + 264))
    v6 = *(_BYTE *)(a4 + 265) == 0;
  else
    v6 = 0;
  if (v6)
  {
    if (!sub_10011CE88(*(double *)(a4 + 56), *(double *)(a4 + 64))
      || sub_10011CE64(*(double *)(a4 + 56), *(double *)(a4 + 64)))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v22 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(double *)a1;
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,raw coordinate is not valid", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v24 = *(double *)a1;
      *(_DWORD *)v171 = 134349056;
      *(double *)&v171[4] = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,raw coordinate is not valid", v171, 12);
      v11 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v25);
      goto LABEL_205;
    }
    if (!sub_10011CE88(*(double *)(a4 + 288), *(double *)(a4 + 296))
      || sub_10011CE64(*(double *)(a4 + 288), *(double *)(a4 + 296)))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v26 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(double *)a1;
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,snapped coordinate is not valid", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v141 = *(double *)a1;
      *(_DWORD *)v171 = 134349056;
      *(double *)&v171[4] = v141;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,snapped coordinate is not valid", v171, 12);
      v11 = (char *)v142;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v142);
      goto LABEL_205;
    }
    v166 = 0;
    v167 = 0;
    v168 = 0;
    v28 = sub_10073B808(a1, a2, a3, a4, &v166);
    if (v28)
    {
      *(_QWORD *)a1 = *(_QWORD *)(a4 + 8);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v30 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(double *)a1;
        v32 = *(_QWORD *)(a4 + 288);
        v33 = *(_QWORD *)(a4 + 296);
        *(_DWORD *)buf = 134349825;
        *(double *)&buf[4] = v31;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v32;
        v177 = 2049;
        v178 = v33;
        v179 = 2050;
        v180 = ((char *)v167 - (char *)v166) >> 4;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,attempting lane estimation,LL,%{private}.7lf,%{private}.7lf,numFlowlines,%{public}lu", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        v143 = *(double *)a1;
        v144 = *(_QWORD *)(a4 + 288);
        v145 = *(_QWORD *)(a4 + 296);
        *(_DWORD *)v171 = 134349825;
        *(double *)&v171[4] = v143;
        *(_WORD *)&v171[12] = 2049;
        *(_QWORD *)&v171[14] = v144;
        v172 = 2049;
        v173 = v145;
        v174 = 2050;
        v175 = ((char *)v167 - (char *)v166) >> 4;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,attempting lane estimation,LL,%{private}.7lf,%{private}.7lf,numFlowlines,%{public}lu", v171, 42);
        v147 = (char *)v146;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v146);
        if (v147 != buf)
          free(v147);
      }
      v164 = 0;
      v165 = 0;
      v34 = v166;
      v35 = v167;
      if (v166 != v167)
      {
        v36 = *(double *)(a4 + 56);
        v37 = *(double *)(a4 + 64);
        v153 = -1.0;
        v152 = -1.0;
        v38 = -1.0;
        while (1)
        {
          v39 = *v34;
          if (*v34)
            break;
LABEL_164:
          v34 += 2;
          if (v34 == v35)
          {
            v136 = v164;
            if (v164)
            {
              v156[0] = v164;
              v156[1] = v165;
              if (v165)
              {
                v137 = (unint64_t *)(v165 + 8);
                do
                  v138 = __ldxr(v137);
                while (__stxr(v138 + 1, v137));
              }
              *(_DWORD *)(a1 + 24) = *((_DWORD *)v136 + 4);
              v139 = *v136;
              *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
              *(_QWORD *)(a1 + 40) = v139;
              *(_OWORD *)(a1 + 48) = v163;
              *(double *)(a1 + 64) = v153;
              *(double *)(a1 + 72) = v38;
              *(double *)(a1 + 80) = v152;
              sub_100261F44((uint64_t)v156);
              v140 = *(double *)a1;
              sub_1015A2E04(&v154, "estimatedLane");
              sub_10073C3B8(a1 + 8, v140);
              if (v155 < 0)
                operator delete(v154);
            }
            goto LABEL_200;
          }
        }
        v40 = *(double **)(v39 + 136);
        v41 = *(_QWORD *)(v39 + 144) - (_QWORD)v40;
        if ((int)(v41 >> 4) > 1)
        {
          v42 = *v40;
          v43 = v40[1];
          *(_OWORD *)buf = 0uLL;
          *(_QWORD *)v171 = 0;
          sub_10011E780((double *)(a1 + 152), (double *)buf, (double *)&buf[8], (double *)v171, v36, v37, 0.0, v42, v43, 0.0);
          v44 = 0;
          v45 = (v41 >> 4) - 1;
          v46 = 0.0;
          v47 = -1.0;
          v48 = 0.0;
          while (1)
          {
            v49 = *(_QWORD *)(v39 + 136) + v44;
            v50 = *(double *)(v49 + 16);
            v51 = *(double *)(v49 + 24);
            *(_OWORD *)v171 = 0uLL;
            __y[0] = 0.0;
            sub_10011E780((double *)(a1 + 152), (double *)v171, (double *)&v171[8], __y, v36, v37, 0.0, v50, v51, 0.0);
            v52 = (*(double *)buf - *(double *)v171) * (*(double *)buf - *(double *)v171)
                + (*(double *)&buf[8] - *(double *)&v171[8]) * (*(double *)&buf[8] - *(double *)&v171[8]);
            v53 = 0.0 - *(double *)buf;
            if (v52 >= 0.001)
            {
              v55 = ((0.0 - *(double *)&buf[8]) * (*(double *)&v171[8] - *(double *)&buf[8])
                   + v53 * (*(double *)v171 - *(double *)buf))
                  / v52;
              if (v55 < 0.0)
              {
                v57 = v53 * v53 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
                v55 = 0.0;
                goto LABEL_68;
              }
              if (v55 > 1.0)
              {
                v57 = (0.0 - *(double *)v171) * (0.0 - *(double *)v171)
                    + (0.0 - *(double *)&v171[8]) * (0.0 - *(double *)&v171[8]);
                v55 = 1.0;
                goto LABEL_68;
              }
              v54 = (0.0 - (*(double *)buf + (*(double *)v171 - *(double *)buf) * v55))
                  * (0.0 - (*(double *)buf + (*(double *)v171 - *(double *)buf) * v55));
              v56 = 0.0 - (*(double *)&buf[8] + (*(double *)&v171[8] - *(double *)&buf[8]) * v55);
            }
            else
            {
              v54 = v53 * v53;
              v55 = 0.0;
              v56 = 0.0 - *(double *)&buf[8];
            }
            v57 = v54 + v56 * v56;
LABEL_68:
            v58 = sqrt(v52);
            v59 = sqrt(v57);
            v60 = v47 < 0.0;
            if (v59 < v47)
              v60 = 1;
            v61 = v48 + v58 * v55;
            if (v60)
            {
              v47 = v59;
              v46 = v61;
            }
            v48 = v48 + v58;
            *(_OWORD *)buf = *(_OWORD *)v171;
            v44 += 16;
            if (!--v45)
            {
              if (v48 >= 0.001)
                v63 = v46 / v48;
              else
                v63 = 0.0;
              goto LABEL_84;
            }
          }
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        v62 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
        }
        v47 = -1.0;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          *(_WORD *)v171 = 0;
          LODWORD(v148) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", v171, v148);
          v126 = (char *)v125;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = CLClientLocationCoordinate]", "%s\n", v125);
          if (v126 != buf)
            free(v126);
        }
        v63 = -1.0;
LABEL_84:
        v65 = *v34;
        v64 = (std::__shared_weak_count *)v34[1];
        v161 = *v34;
        v162 = v64;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v67 = __ldxr(p_shared_owners);
          while (__stxr(v67 + 1, p_shared_owners));
        }
        *(_OWORD *)v171 = 0uLL;
        if (v65)
        {
          v68 = *(_QWORD *)(v65 + 136);
          v69 = (unint64_t)(*(_QWORD *)(v65 + 144) - v68) >> 4;
          if ((int)v69 <= 0)
          {
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102150828);
            v80 = qword_1022A00D8;
            if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
            }
            v70 = 0.0;
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_138;
            bzero(buf, 0x65CuLL);
            if (qword_1022A00D0 != -1)
              dispatch_once(&qword_1022A00D0, &stru_102150828);
            LOWORD(__y[0]) = 0;
            LODWORD(v148) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", __y, v148);
            v79 = (char *)v81;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = CLClientLocationCoordinate, RoadPtr = std::shared_ptr<CLMapFlowLine>]", "%s\n", v81);
          }
          else
          {
            v70 = 0.0;
            if ((_DWORD)v69 == 1)
              goto LABEL_138;
            v72 = *(double **)(v65 + 160);
            v71 = *(double **)(v65 + 168);
            v73 = v71 - v72;
            if (v73 == (_DWORD)v69 - 1)
            {
              if (v63 < 0.000001)
              {
                *(_OWORD *)v171 = *(_OWORD *)v68;
                v74 = *(double *)(v68 + 16);
                v75 = *(double *)(v68 + 24);
                *(_QWORD *)buf = 0;
                v169 = 0;
                __y[0] = 0.0;
                sub_10011E780((double *)(a1 + 152), (double *)buf, __y, (double *)&v169, *(double *)v171, *(double *)&v171[8], 0.0, v74, v75, 0.0);
LABEL_93:
                v76 = atan2(__y[0], *(long double *)buf);
                if (v76 < 0.0)
                  v76 = v76 + 6.28318531;
                v70 = v76 * 57.2957795;
                goto LABEL_138;
              }
              if (v63 >= 0.999999)
              {
                v90 = (double *)(v68 + 16 * v73);
                *(_OWORD *)v171 = *(_OWORD *)v90;
                v91 = sub_10073C714((double *)(a1 + 152), *(v90 - 2), *(v90 - 1), *(double *)v171, *(double *)&v171[8]);
LABEL_137:
                v70 = v91;
LABEL_138:
                if (v64)
                {
                  v92 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                if (v38 < 0.0 || v47 < v38)
                {
                  sub_100349198(&v164, v34);
                  v163 = *(_OWORD *)v171;
                  v38 = v47;
                  v152 = v63;
                  v153 = v70;
                }
                v95 = v34[1];
                v159 = *v34;
                v160 = (std::__shared_weak_count *)v95;
                if (v95)
                {
                  v96 = (unint64_t *)(v95 + 8);
                  do
                    v97 = __ldxr(v96);
                  while (__stxr(v97 + 1, v96));
                }
                sub_10073C65C((uint64_t)buf, &v159, v171, v70, 1.0, v47, v63);
                v98 = v160;
                if (v160)
                {
                  v99 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                v101 = *(double *)a1;
                sub_1015A2E04(&__p, "candidateLane");
                sub_10073C3B8((uint64_t)buf, v101);
                if (v158 < 0)
                  operator delete(__p);
                v102 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v103 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                goto LABEL_164;
              }
              if (v72 == v71)
              {
LABEL_128:
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102150828);
                v88 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_138;
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102150828);
                LOWORD(__y[0]) = 0;
                LODWORD(v148) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", __y, v148);
                v79 = (char *)v89;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = CLClientLocationCoordinate, RoadPtr = std::shared_ptr<CLMapFlowLine>]", "%s\n", v89);
              }
              else
              {
                v84 = 0.0;
                v85 = 2;
                v86 = 24;
                while (1)
                {
                  v87 = *v72 / *(double *)(v65 + 128);
                  if (vabdd_f64(v63, v84 + v87) < 0.000001)
                    break;
                  if (v84 + v87 > v63)
                  {
                    v114 = (double *)(v68 + v86);
                    v115 = *(v114 - 2);
                    v116 = *v114;
                    __xb = (v63 - v84) / v87;
                    *(double *)v171 = *(v114 - 3) + (*(v114 - 1) - *(v114 - 3)) * __xb;
                    *(double *)&v171[8] = v115 + sub_1010B9110(v115, v116) * __xb;
                    sub_100080DCC(*(long double *)&v171[8]);
                    *(_QWORD *)&v171[8] = v117;
                    v118 = (double *)(*(_QWORD *)(v65 + 136) + v86);
                    v119 = *(v118 - 3);
                    v120 = *(v118 - 2);
                    v121 = *(v118 - 1);
                    v122 = *v118;
                    *(_QWORD *)buf = 0;
                    v169 = 0;
                    __y[0] = 0.0;
                    sub_10011E780((double *)(a1 + 152), (double *)buf, __y, (double *)&v169, v119, v120, 0.0, v121, v122, 0.0);
                    goto LABEL_93;
                  }
                  ++v72;
                  v86 += 16;
                  ++v85;
                  v84 = v84 + v87;
                  if (v72 == v71)
                    goto LABEL_128;
                }
                if (v85 < (int)v69)
                {
                  v105 = v68 + v86;
                  *(_OWORD *)v171 = *(_OWORD *)(v105 - 8);
                  v106 = *(double *)(v105 - 24);
                  v107 = *(double *)(v105 - 16);
                  *(_QWORD *)buf = 0;
                  v169 = 0;
                  __y[0] = 0.0;
                  sub_10011E780((double *)(a1 + 152), (double *)buf, __y, (double *)&v169, v106, v107, 0.0, *(double *)v171, *(double *)&v171[8], 0.0);
                  v108 = __y[0];
                  __xa = *(double *)buf;
                  v109 = *(_QWORD *)(v65 + 136) + v86;
                  v110 = *(double *)(v109 + 8);
                  v111 = *(double *)(v109 + 16);
                  *(_QWORD *)buf = 0;
                  v169 = 0;
                  __y[0] = 0.0;
                  sub_10011E780((double *)(a1 + 152), (double *)buf, __y, (double *)&v169, *(double *)v171, *(double *)&v171[8], 0.0, v110, v111, 0.0);
                  v112 = atan2(v108, __xa);
                  if (v112 < 0.0)
                    v112 = v112 + 6.28318531;
                  __x = v112 * 57.2957795;
                  v113 = atan2(__y[0], *(long double *)buf);
                  if (v113 < 0.0)
                    v113 = v113 + 6.28318531;
                  sub_100512AA0(__x, v113 * 57.2957795);
                  goto LABEL_137;
                }
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102150828);
                v123 = qword_1022A00D8;
                if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
                }
                v70 = 0.0;
                if (!sub_1001BFF7C(115, 0))
                  goto LABEL_138;
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_102150828);
                LOWORD(__y[0]) = 0;
                LODWORD(v148) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", __y, v148);
                v79 = (char *)v124;
                sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = CLClientLocationCoordinate, RoadPtr = std::shared_ptr<CLMapFlowLine>]", "%s\n", v124);
              }
            }
            else
            {
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102150828);
              v82 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_138;
              bzero(buf, 0x65CuLL);
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_102150828);
              LOWORD(__y[0]) = 0;
              LODWORD(v148) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", __y, v148);
              v79 = (char *)v83;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = CLClientLocationCoordinate, RoadPtr = std::shared_ptr<CLMapFlowLine>]", "%s\n", v83);
            }
          }
        }
        else
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          v77 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
          }
          v70 = 0.0;
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_138;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          LOWORD(__y[0]) = 0;
          LODWORD(v148) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM, NULL road", __y, v148);
          v79 = (char *)v78;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = CLClientLocationCoordinate, RoadPtr = std::shared_ptr<CLMapFlowLine>]", "%s\n", v78);
        }
        if (v79 != buf)
          free(v79);
        goto LABEL_138;
      }
LABEL_200:
      sub_100261F44((uint64_t)&v164);
    }
    else
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      v127 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v128 = *(double *)a1;
        v129 = *(_QWORD *)(a4 + 288);
        v130 = *(_QWORD *)(a4 + 296);
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = v128;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v129;
        v177 = 2049;
        v178 = v130;
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,could not find flowline data,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        v131 = *(double *)a1;
        v132 = *(_QWORD *)(a4 + 288);
        v133 = *(_QWORD *)(a4 + 296);
        *(_DWORD *)v171 = 134349569;
        *(double *)&v171[4] = v131;
        *(_WORD *)&v171[12] = 2049;
        *(_QWORD *)&v171[14] = v132;
        v172 = 2049;
        v173 = v133;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,could not find flowline data,LL,%{private}.7lf,%{private}.7lf", v171, 32);
        v135 = (char *)v134;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v134);
        if (v135 != buf)
          free(v135);
      }
    }
    *(_QWORD *)buf = &v166;
    sub_1002A3684((void ***)buf);
    return v28;
  }
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102150828);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(double *)a1;
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,Solution is not matched", buf, 0xCu);
  }
  if (!sub_1001BFF7C(115, 2))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102150828);
  v9 = *(double *)a1;
  *(_DWORD *)v171 = 134349056;
  *(double *)&v171[4] = v9;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,Solution is not matched", v171, 12);
  v11 = (char *)v10;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::estimateLane(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &)", "%s\n", v10);
LABEL_205:
  if (v11 != buf)
    free(v11);
  return 0;
}

void sub_10073B76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  a37 = &a39;
  sub_1002A3684((void ***)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_10073B808(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  double v12;
  double v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  double v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  _BOOL8 result;
  const char *v29;
  char *v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double v44;
  double v45;
  double *v46;
  double *v47;
  double v48;
  int v49;
  uint64_t v50;
  double v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  long double v58;
  long double v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  NSObject *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  __int128 __y;
  _OWORD buf[102];

  v5 = *(_QWORD *)(a4 + 8);
  v6 = *a2;
  if (*a2)
  {
    if (*(_QWORD *)(a1 + 144))
    {
      v12 = *(double *)(v6 + 96);
      v13 = 0.02;
      if (a3)
        v13 = -0.02;
      v14 = v13 + *(double *)(a4 + 272);
      v15 = 1.0;
      if (v14 <= 1.0)
        v15 = v14;
      v16 = (std::__shared_weak_count *)a2[1];
      if (v14 >= 0.0)
        v17 = v15;
      else
        v17 = 0.0;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v20 = (*(_QWORD *)(v6 + 144) - *(_QWORD *)(v6 + 136)) >> 4;
      if ((int)v20 <= 0)
      {
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        v33 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
        }
        v21 = 0.0;
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_50;
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        LOWORD(__y) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,CoordinateCount is 0", &__y, 2);
        v35 = (char *)v34;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v34);
      }
      else
      {
        v21 = 0.0;
        if ((_DWORD)v20 == 1)
          goto LABEL_50;
        sub_1004078E0((_QWORD *)v6);
        v22 = (uint64_t)(*(_QWORD *)(v6 + 168) - *(_QWORD *)(v6 + 160)) >> 3;
        if (v22 != (_DWORD)v20 - 1)
        {
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          v36 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_50;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          LOWORD(__y) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,inconsistent array size", &__y, 2);
          v35 = (char *)v80;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v80);
          goto LABEL_98;
        }
        sub_1004078E0((_QWORD *)v6);
        if (v17 < 0.000001)
        {
          v23 = *(double **)(v6 + 136);
          v21 = *v23;
          v24 = v23[1];
          v25 = v23[2];
          v26 = v23[3];
          *(_QWORD *)&buf[0] = 0;
          v81 = 0;
          *(_QWORD *)&__y = 0;
          sub_10011E780((double *)(a1 + 152), (double *)buf, (double *)&__y, (double *)&v81, v21, v24, 0.0, v25, v26, 0.0);
          goto LABEL_51;
        }
        if (v17 >= 0.999999)
        {
          v54 = *(_QWORD *)(v6 + 136) + 16 * v22;
          v21 = *(double *)v54;
          v24 = *(double *)(v54 + 8);
          sub_10073C714((double *)(a1 + 152), *(double *)(v54 - 16), *(double *)(v54 - 8), *(double *)v54, v24);
          goto LABEL_51;
        }
        v46 = *(double **)(v6 + 160);
        v47 = *(double **)(v6 + 168);
        if (v46 == v47)
        {
LABEL_71:
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          v52 = qword_1022A00D8;
          if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_50;
          bzero(buf, 0x65CuLL);
          if (qword_1022A00D0 != -1)
            dispatch_once(&qword_1022A00D0, &stru_102150828);
          LOWORD(__y) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,interpolateProjections,Could not interpolate to intended projection", &__y, 2);
          v35 = (char *)v53;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v53);
          goto LABEL_98;
        }
        v48 = 0.0;
        v49 = 2;
        v50 = 24;
        while (1)
        {
          v51 = *v46 / *(double *)(v6 + 40);
          if (vabdd_f64(v17, v48 + v51) < 0.000001)
            break;
          if (v48 + v51 > v17)
          {
            v66 = (double *)(*(_QWORD *)(v6 + 136) + v50);
            v68 = *(v66 - 3);
            v67 = *(v66 - 2);
            v69 = *(v66 - 1);
            v70 = sub_1010B9110(v67, *v66);
            v71 = (v17 - v48) / v51;
            sub_100080DCC(v67 + v70 * v71);
            v24 = v72;
            v73 = (double *)(*(_QWORD *)(v6 + 136) + v50);
            v74 = *(v73 - 3);
            v75 = *(v73 - 2);
            v76 = *(v73 - 1);
            v77 = *v73;
            *(_QWORD *)&buf[0] = 0;
            v81 = 0;
            *(_QWORD *)&__y = 0;
            sub_10011E780((double *)(a1 + 152), (double *)buf, (double *)&__y, (double *)&v81, v74, v75, 0.0, v76, v77, 0.0);
            v21 = v68 + (v69 - v68) * v71;
            goto LABEL_51;
          }
          ++v46;
          v50 += 16;
          ++v49;
          v48 = v48 + v51;
          if (v46 == v47)
            goto LABEL_71;
        }
        if (v49 < (int)v20)
        {
          v55 = (double *)(*(_QWORD *)(v6 + 136) + v50);
          v21 = *(v55 - 1);
          v24 = *v55;
          v56 = *(v55 - 3);
          v57 = *(v55 - 2);
          *(_QWORD *)&buf[0] = 0;
          v81 = 0;
          *(_QWORD *)&__y = 0;
          sub_10011E780((double *)(a1 + 152), (double *)buf, (double *)&__y, (double *)&v81, v56, v57, 0.0, v21, v24, 0.0);
          v58 = *(double *)&__y;
          v59 = *(double *)buf;
          v60 = *(_QWORD *)(v6 + 136) + v50;
          v61 = *(double *)(v60 + 8);
          v62 = *(double *)(v60 + 16);
          *(_QWORD *)&buf[0] = 0;
          v81 = 0;
          *(_QWORD *)&__y = 0;
          sub_10011E780((double *)(a1 + 152), (double *)buf, (double *)&__y, (double *)&v81, v21, v24, 0.0, v61, v62, 0.0);
          v63 = atan2(v58, v59);
          if (v63 < 0.0)
            v63 = v63 + 6.28318531;
          v64 = v63 * 57.2957795;
          v65 = atan2(*(long double *)&__y, *(long double *)buf);
          if (v65 < 0.0)
            v65 = v65 + 6.28318531;
          sub_100512AA0(v64, v65 * 57.2957795);
LABEL_51:
          if (v16)
          {
            v37 = (unint64_t *)&v16->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          sub_100081058((double *)(a1 + 152), (double *)buf, (double *)buf + 1, v21, v24, *(double *)(a4 + 72), *(double *)(a4 + 168), v12 * 0.5 + 3.70000005);
          v39 = *(_QWORD *)(*a2 + 136);
          v40 = *(_QWORD *)(*a2 + 144);
          if (a3)
          {
            v41 = v40 - v39;
            if (v41)
            {
              v42 = (v41 >> 4) - 1;
              v43 = (double *)(v39 + 16 * v42);
LABEL_61:
              v44 = *v43;
              v45 = *(double *)(v39 + 16 * v42 + 8);
LABEL_63:
              sub_100081058((double *)(a1 + 152), (double *)&__y, (double *)&__y + 1, v44, v45, *(double *)(a4 + 72), *(double *)(a4 + 168), -(v12 * 0.5 + 3.70000005));
              sub_1013DE484(a1 + 88, (uint64_t)a5, *(double *)&__y, *((long double *)&__y + 1), *(double *)buf, *((long double *)buf + 1));
              return a5[1] != *a5;
            }
          }
          else if (v40 != v39)
          {
            v42 = 0;
            v43 = *(double **)(*a2 + 136);
            goto LABEL_61;
          }
          v44 = 0.0;
          v45 = 0.0;
          goto LABEL_63;
        }
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        v78 = qword_1022A00D8;
        if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
        }
        v21 = 0.0;
        if (!sub_1001BFF7C(115, 0))
        {
LABEL_50:
          v24 = 0.0;
          goto LABEL_51;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_102150828);
        LOWORD(__y) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", &__y, 2);
        v35 = (char *)v79;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v79);
      }
LABEL_98:
      if (v35 != (char *)buf)
        free(v35);
      goto LABEL_50;
    }
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v31 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134349056;
      *(_QWORD *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,Flowline data not available", (uint8_t *)buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      LODWORD(__y) = 134349056;
      *(_QWORD *)((char *)&__y + 4) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,Flowline data not available", &__y, 12);
      v30 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::getFlowlines(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &, std::vector<CLMapFlowLinePtr> &)", "%s\n", v32);
LABEL_34:
      if (v30 != (char *)buf)
        free(v30);
      return 0;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v27 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134349056;
      *(_QWORD *)((char *)buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,road is nullptr", (uint8_t *)buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102150828);
      LODWORD(__y) = 134349056;
      *(_QWORD *)((char *)&__y + 4) = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,road is nullptr", &__y, 12);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLaneEstimator::getFlowlines(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &, std::vector<CLMapFlowLinePtr> &)", "%s\n", v29);
      goto LABEL_34;
    }
  }
  return result;
}

void sub_10073C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10073C3B8(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102150828);
  v4 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_DWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 134351105;
    v42 = a2;
    v43 = 2049;
    v44 = v5;
    v45 = 2049;
    v46 = v6;
    v47 = 2049;
    v48 = v10;
    v49 = 1026;
    v50 = v7;
    v51 = 2049;
    v52 = v8;
    v53 = 2050;
    v54 = v9;
    v55 = 2050;
    v56 = v11;
    v57 = 2050;
    v58 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,laneData,LL,%{private}.7lf,%{private}.7lf,course,%{private}.1lf,laneIndex,%{public}d,id,%{private}lld,probability,%{public}.2lf,shortestDist,%{public}.2lf,proj,%{public}.2lf", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102150828);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_DWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 64);
    v20 = *(_QWORD *)(a1 + 72);
    v23 = 134351105;
    v24 = a2;
    v25 = 2049;
    v26 = v13;
    v27 = 2049;
    v28 = v14;
    v29 = 2049;
    v30 = v18;
    v31 = 1026;
    v32 = v15;
    v33 = 2049;
    v34 = v16;
    v35 = 2050;
    v36 = v17;
    v37 = 2050;
    v38 = v19;
    v39 = 2050;
    v40 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMMLE,%{public}.1lf,laneData,LL,%{private}.7lf,%{private}.7lf,course,%{private}.1lf,laneIndex,%{public}d,id,%{private}lld,probability,%{public}.2lf,shortestDist,%{public}.2lf,proj,%{public}.2lf", &v23, 88);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLLaneData::debugOutput(const CFAbsoluteTime, std::string) const", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_10073C630(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_10073C65C(uint64_t a1, uint64_t *a2, _OWORD *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v8 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
    *(double *)(a1 + 24) = a5;
    *(_OWORD *)(a1 + 40) = *a3;
    *(double *)(a1 + 56) = a4;
    *(double *)(a1 + 64) = a6;
    *(double *)(a1 + 72) = a7;
  }
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

double sub_10073C714(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  uint64_t v7;
  long double __y;
  long double v9;

  v9 = 0.0;
  v7 = 0;
  __y = 0.0;
  sub_10011E780(a1, &v9, &__y, (double *)&v7, a2, a3, 0.0, a4, a5, 0.0);
  v5 = atan2(__y, v9);
  if (v5 < 0.0)
    v5 = v5 + 6.28318531;
  return v5 * 57.2957795;
}

uint64_t sub_10073C788()
{
  if (qword_102303C40 != -1)
    dispatch_once(&qword_102303C40, &stru_102150848);
  return qword_102310C40;
}

void sub_10073C7C8(id a1)
{
  operator new();
}

void sub_10073C844()
{
  operator delete();
}

void sub_10073C868()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_102310C40)
  {
    *(_QWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)qword_102310C40 + 976))(qword_102310C40, buf);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_102310C40 + 944))(qword_102310C40) & 1) == 0)
    {
      if (qword_1022A02C0 != -1)
        dispatch_once(&qword_1022A02C0, &stru_102150D80);
      v0 = qword_1022A02C8;
      if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "could not store stats data ", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02C0 != -1)
          dispatch_once(&qword_1022A02C0, &stru_102150D80);
        v3[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02C8, 17, "could not store stats data ", v3, 2);
        v2 = (uint8_t *)v1;
        sub_100512490("Generic", 1, 0, 0, "static void CLDaemonStats::shutdownInstance()", "%s\n", v1);
        if (v2 != buf)
          free(v2);
      }
    }
  }
}

uint64_t sub_10073CA20(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  BOOL v11;

  v3 = (_QWORD *)sub_100585634(a1, a2, "stats", 1, 0, 2);
  *v3 = off_102150878;
  sub_10055D44C(v3 + 16, "CLDaemonStats", 1, 1);
  *(_BYTE *)(a1 + 144) = 0;
  sub_100197040();
  if (!sub_10075A02C())
  {
    v11 = 0;
    sub_1001E4804(&v9);
    v4 = sub_1001E4874(v9, "EnableLocationAccessorySessionDebugLog", &v11);
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v4)
      *(_BYTE *)(a1 + 144) = v11;
  }
  return a1;
}

void sub_10073CB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  sub_10055D4D0(v3);
  sub_100585DD4(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_10073CB44(_QWORD *a1)
{
  *a1 = off_102150878;
  sub_10055D4D0(a1 + 16);
  return sub_100585DD4((uint64_t)a1);
}

void sub_10073CB74(_QWORD *a1)
{
  *a1 = off_102150878;
  sub_10055D4D0(a1 + 16);
  sub_100585DD4((uint64_t)a1);
  operator delete();
}

uint64_t sub_10073CBB8(uint64_t a1, std::string *a2)
{
  uint64_t v4;

  v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_10052ACB4(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_10073CC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CC3C(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  __int16 v8;

  v5 = a1 + 128;
  v4 = *(_QWORD *)(a1 + 128);
  v7[5] = a1 + 128;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 128);
  v8 = 256;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10073CCF4;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  sub_100585ED4(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_10073CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CCF4(uint64_t a1)
{
  return sub_10073CCFC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10073CCFC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_100586288(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

void sub_10073CD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CD70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  v3 = sub_10003CA9C(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_10073CDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CDEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  v3 = sub_10023C0E0(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_10073CE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CE68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_10073CE78(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 48);
  if (v1)
    dispatch_group_leave(v1);
}

void sub_10073CE88(uint64_t a1)
{
  char *v1;
  const __CFString *v2;
  void *__p[2];
  uint64_t v4;

  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 968))(a1, __p);
  if (v4 >= 0)
    v1 = (char *)__p;
  else
    v1 = (char *)__p[0];
  v2 = sub_1001A48D8(v1);
  CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, CFSTR("Location Stats"), v2, 0);
  CFRelease(v2);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_10073CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073CF3C(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;

  v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_10011BA90((CFMutableDictionaryRef *)a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_10073CFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10073CFC8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;
  NSObject *v12;
  int v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  void **v23;
  void **v24;
  unsigned __int8 *v25;
  void **v26;
  unsigned __int8 *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  void **v50;
  void **v51;
  unsigned __int8 *v52;
  int v53;
  void *v54;
  char *v55;
  char *v56;
  int v57;
  const char *v58;
  uint8_t *v59;
  double v60;
  const char *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  int v95;
  double v96;
  int v97;
  int v98;
  double v99;
  double v100;
  void *v101;
  int v102;
  int v103;
  char v104;
  void *__p[2];
  const char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  _QWORD v111[54];
  _QWORD v112[54];
  void *v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  unsigned __int8 *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  double v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  double v147;
  __int16 v148;
  double v149;
  __int16 v150;
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  void **v161;
  __int16 v162;
  void *v163;
  __int16 v164;
  int v165;
  __int16 v166;
  double v167;
  __int16 v168;
  int v169;
  uint8_t buf[4];
  int v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  unsigned __int8 *v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  uint64_t v195;
  __int16 v196;
  double v197;
  __int16 v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  __int16 v208;
  uint64_t v209;
  __int16 v210;
  double v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  void **v219;
  __int16 v220;
  void **v221;
  __int16 v222;
  int v223;
  __int16 v224;
  double v225;
  __int16 v226;
  int v227;

  v110 = 0;
  v108 = 0u;
  v109 = 0u;
  v107 = 0u;
  v3 = (uint64_t)(a2 + 128);
  v4 = *((_DWORD *)a2 + 31);
  if (v4 < 1)
  {
    HIDWORD(v100) = 1;
    v10 = 0.0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = (float)v4;
    do
    {
      v8 = *(_DWORD *)(v3 + v5);
      *(float *)((char *)&v107 + v5) = (float)v8 / v7;
      v6 += v8;
      v5 += 4;
    }
    while (v5 != 56);
    v9 = *((_DWORD *)a2 + 46);
    v10 = (float)v9 / v7;
    v11 = v9 + v6;
    if (v9 + v6 == v4)
    {
      HIDWORD(v100) = 1;
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102150DA0);
      v12 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
      {
        v13 = *((_DWORD *)a2 + 31);
        *(_DWORD *)buf = 67109376;
        v171 = v11;
        v172 = 1024;
        LODWORD(v173) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "The sum of the delivered locations by type (%d) does not equal the delivered locations counter (%d).", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102150DA0);
        v57 = *((_DWORD *)a2 + 31);
        LODWORD(v113) = 67109376;
        HIDWORD(v113) = v11;
        v114 = 1024;
        LODWORD(v115) = v57;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "The sum of the delivered locations by type (%d) does not equal the delivered locations counter (%d).", &v113, 14);
        v59 = (uint8_t *)v58;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationUpdateSession &)", "%s\n", v58);
        if (v59 != buf)
          free(v59);
      }
      HIDWORD(v100) = 0;
    }
  }
  v14 = *((double *)a2 + 8);
  v15 = *((double *)a2 + 1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102150DA0);
  v16 = v14 - v15;
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v18 = *a2;
    v62 = *((_QWORD *)a2 + 1);
    v19 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v20 = (char)a2[39];
    v21 = a2[40];
    v64 = a2[41];
    v66 = a2[42];
    v68 = a2[43];
    v70 = *((_DWORD *)a2 + 12);
    v72 = a2[44];
    v74 = a2[52];
    v76 = *((_DWORD *)a2 + 14);
    v80 = *((_DWORD *)a2 + 15);
    v78 = *((_QWORD *)a2 + 8);
    v82 = *((_QWORD *)a2 + 24);
    v84 = *((_QWORD *)a2 + 9);
    v86 = *((_QWORD *)a2 + 11);
    v88 = *((_QWORD *)a2 + 10);
    v90 = *((_QWORD *)a2 + 12);
    v92 = *((_QWORD *)a2 + 13);
    v94 = *((double *)a2 + 14);
    v95 = a2[120];
    v97 = *((_DWORD *)a2 + 31);
    v98 = *((_DWORD *)a2 + 47);
    sub_10073DFC4(v3, &v113);
    v22 = SBYTE3(v117);
    v23 = (void **)v113;
    sub_10073E200((uint64_t)&v107, __p);
    v171 = v18;
    v24 = &v113;
    if (v22 < 0)
      v24 = v23;
    if (v20 >= 0)
      v25 = a2 + 16;
    else
      v25 = v19;
    v26 = (void **)__p[0];
    if (SHIBYTE(v106) >= 0)
      v26 = __p;
    v173 = v62;
    v175 = v25;
    v177 = v21;
    v179 = v64;
    v181 = v66;
    v183 = v68;
    v185 = v70;
    v187 = v72;
    v189 = v74;
    v191 = v76;
    v193 = v80;
    v195 = v78;
    v199 = v82;
    v201 = v84;
    v203 = v86;
    v205 = v88;
    v207 = v90;
    v209 = v92;
    v211 = v94;
    v213 = v95;
    v215 = v97;
    v217 = v98;
    v219 = v24;
    v174 = 2080;
    v218 = 2080;
    v220 = 2080;
    v221 = v26;
    v223 = *((_DWORD *)a2 + 46);
    v172 = 2048;
    v194 = 2048;
    v196 = 2048;
    v198 = 2048;
    v200 = 2048;
    v202 = 2048;
    v204 = 2048;
    v206 = 2048;
    v208 = 2048;
    v210 = 2048;
    v224 = 2048;
    v197 = v16;
    v225 = v10;
    v176 = 1024;
    v178 = 1024;
    v180 = 1024;
    v182 = 1024;
    v184 = 1024;
    v186 = 1024;
    v188 = 1024;
    v190 = 1024;
    v192 = 1024;
    v212 = 1024;
    v214 = 1024;
    v216 = 1024;
    v222 = 1024;
    v226 = 1024;
    *(_DWORD *)buf = 67116290;
    v227 = HIDWORD(v100);
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,cblsPowerSaverBkgRuntimeLoss,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,distanceFilter,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,0,deliveredLocations,%d,cblsPowerSaverLocationLoss,%d,deliveredLocationsByType,%s,deliveredLocationsByTypeFraction,%s,sdeliveredLocationsUndefined,%d,deliveredLocationsUndefinedFraction,%.4f,validDeliveredLocationsByType,%d", buf, 0xE8u);
    if (SHIBYTE(v106) < 0)
      operator delete(__p[0]);
    if (SBYTE3(v117) < 0)
      operator delete(v113);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102150DA0);
    v99 = *(double *)&qword_1022A01C8;
    v44 = *a2;
    v45 = *((_QWORD *)a2 + 1);
    v46 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v47 = (char)a2[39];
    v48 = a2[40];
    v63 = a2[41];
    v65 = a2[42];
    v67 = a2[43];
    v69 = *((_DWORD *)a2 + 12);
    v71 = a2[44];
    v73 = a2[52];
    v75 = *((_DWORD *)a2 + 14);
    v79 = *((_DWORD *)a2 + 15);
    v77 = *((_QWORD *)a2 + 8);
    v81 = *((_QWORD *)a2 + 24);
    v83 = *((_QWORD *)a2 + 9);
    v85 = *((_QWORD *)a2 + 11);
    v87 = *((double *)a2 + 10);
    v89 = *((double *)a2 + 12);
    v91 = *((double *)a2 + 13);
    v93 = *((double *)a2 + 14);
    LODWORD(v94) = a2[120];
    LODWORD(v96) = *((_DWORD *)a2 + 31);
    HIDWORD(v96) = *((_DWORD *)a2 + 47);
    sub_10073DFC4(v3, __p);
    v49 = SHIBYTE(v106);
    v50 = (void **)__p[0];
    sub_10073E200((uint64_t)&v107, &v101);
    v51 = __p;
    if (v49 < 0)
      v51 = v50;
    if (v47 >= 0)
      v52 = a2 + 16;
    else
      v52 = v46;
    v53 = *((_DWORD *)a2 + 46);
    if (v104 >= 0)
      v54 = &v101;
    else
      v54 = v101;
    LODWORD(v113) = 67116290;
    HIDWORD(v113) = v44;
    v114 = 2048;
    v115 = v45;
    v116 = 2080;
    v117 = v52;
    v118 = 1024;
    v119 = v48;
    v120 = 1024;
    v121 = v63;
    v122 = 1024;
    v123 = v65;
    v124 = 1024;
    v125 = v67;
    v126 = 1024;
    v127 = v69;
    v128 = 1024;
    v129 = v71;
    v130 = 1024;
    v131 = v73;
    v132 = 1024;
    v133 = v75;
    v134 = 1024;
    v135 = v79;
    v136 = 2048;
    v137 = v77;
    v138 = 2048;
    v139 = v16;
    v140 = 2048;
    v141 = v81;
    v142 = 2048;
    v143 = v83;
    v144 = 2048;
    v145 = v85;
    v146 = 2048;
    v147 = v87;
    v148 = 2048;
    v149 = v89;
    v150 = 2048;
    v151 = v91;
    v152 = 2048;
    v153 = v93;
    v154 = 1024;
    v155 = LODWORD(v94);
    v156 = 1024;
    v157 = LODWORD(v96);
    v158 = 1024;
    v159 = HIDWORD(v96);
    v160 = 2080;
    v161 = v51;
    v162 = 2080;
    v163 = v54;
    v164 = 1024;
    v165 = v53;
    v166 = 2048;
    v167 = v10;
    v168 = 1024;
    v169 = HIDWORD(v100);
    LODWORD(v60) = 232;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v99, 2, "metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,cblsPowerSaverBkgRuntimeLoss,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,distanceFilter,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,0,deliveredLocations,%d,cblsPowerSaverLocationLoss,%d,deliveredLocationsByType,%s,deliveredLocationsByTypeFraction,%s,sdeliveredLocationsUndefined,%d,deliveredLocationsUndefinedFraction,%.4f,validDeliveredLocationsByType,%d", &v113, v60, v61, v63, v65, v69,
      v73,
      v77,
      v79,
      v81,
      v83,
      v85,
      v87,
      v89,
      v91,
      v93,
      v94,
      v96,
      v99,
      v100,
      *(double *)&v101,
      v102,
      v103,
      LODWORD(__p[0]),
      (const char *)__p[1],
      v106,
      (_DWORD)v107,
      *((double *)&v107 + 1),
      (_DWORD)v108);
    v56 = v55;
    if (v104 < 0)
      operator delete(v101);
    if (SHIBYTE(v106) < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationUpdateSession &)", "%s\n", v56);
    if (v56 != (char *)buf)
      free(v56);
  }
  v111[0] = CFSTR("valid");
  v112[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2);
  v111[1] = CFSTR("bundleId");
  if ((a2[39] & 0x80u) == 0)
    v27 = a2 + 16;
  else
    v27 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  v112[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27);
  v111[2] = CFSTR("cellAvailable");
  v112[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[40]);
  v111[3] = CFSTR("wifiAvailable");
  v112[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[41]);
  v111[4] = CFSTR("passcodeLocked");
  v112[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[42]);
  v111[5] = CFSTR("airplaneMode");
  v112[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[43]);
  v111[6] = CFSTR("reachability");
  v112[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 12));
  v111[7] = CFSTR("accessoryConnected");
  v112[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[44]);
  v111[8] = CFSTR("powered");
  v112[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[52]);
  v111[9] = CFSTR("gpsCoexWifi");
  v112[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 14));
  v111[10] = CFSTR("gpsCoexBt");
  v112[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 15));
  v111[11] = CFSTR("duration");
  v112[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16);
  v111[12] = CFSTR("cblsPowerSaverBkgRuntimeLoss");
  v112[12] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 24));
  v111[13] = CFSTR("desiredAccuracy");
  v112[13] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 9));
  v111[14] = CFSTR("achievedAccuracy");
  v112[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 11));
  v111[15] = CFSTR("distanceFilter");
  v112[15] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 10));
  v111[16] = CFSTR("ttff");
  v112[16] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 12));
  v111[17] = CFSTR("ttffGps");
  v112[17] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 13));
  v111[18] = CFSTR("achievedSpeed");
  v112[18] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a2 + 14));
  v111[19] = CFSTR("autoStopped");
  v112[19] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[120]);
  v111[20] = CFSTR("deliveredLocations");
  v112[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 31));
  v111[21] = CFSTR("cblsPowerSaverLocationLoss");
  v112[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 47));
  v111[22] = CFSTR("deliveredLocationsUnknown");
  v112[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 32));
  v111[23] = CFSTR("deliveredLocationsUnknownFraction");
  LODWORD(v28) = v107;
  v112[23] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
  v111[24] = CFSTR("deliveredLocationsGps");
  v112[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 33));
  v111[25] = CFSTR("deliveredLocationsGpsFraction");
  LODWORD(v29) = DWORD1(v107);
  v112[25] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29);
  v111[26] = CFSTR("deliveredLocationsNmea");
  v112[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 34));
  v111[27] = CFSTR("deliveredLocationsNmeaFraction");
  LODWORD(v30) = DWORD2(v107);
  v112[27] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30);
  v111[28] = CFSTR("deliveredLocationsAccessory");
  v112[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 35));
  v111[29] = CFSTR("deliveredLocationsAccessoryFraction");
  LODWORD(v31) = HIDWORD(v107);
  v112[29] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v31);
  v111[30] = CFSTR("deliveredLocationsWifi1");
  v112[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 36));
  v111[31] = CFSTR("deliveredLocationsWifi1Fraction");
  LODWORD(v32) = v108;
  v112[31] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32);
  v111[32] = CFSTR("deliveredLocationsSkyhook");
  v112[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 37));
  v111[33] = CFSTR("deliveredLocationsSkyhookFraction");
  LODWORD(v33) = DWORD1(v108);
  v112[33] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33);
  v111[34] = CFSTR("deliveredLocationsCell");
  v112[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 38));
  v111[35] = CFSTR("deliveredLocationsCellFraction");
  LODWORD(v34) = DWORD2(v108);
  v112[35] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v34);
  v111[36] = CFSTR("deliveredLocationsLac");
  v112[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 39));
  v111[37] = CFSTR("deliveredLocationsLacFraction");
  LODWORD(v35) = HIDWORD(v108);
  v112[37] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v35);
  v111[38] = CFSTR("deliveredLocationsMcc");
  v112[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 40));
  v111[39] = CFSTR("deliveredLocationsMccFraction");
  LODWORD(v36) = v109;
  v112[39] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v36);
  v111[40] = CFSTR("deliveredLocationsGpsCoarse");
  v112[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 41));
  v111[41] = CFSTR("deliveredLocationsGpsCoarseFraction");
  LODWORD(v37) = DWORD1(v109);
  v112[41] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37);
  v111[42] = CFSTR("deliveredLocationsIndoor");
  v112[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 42));
  v111[43] = CFSTR("deliveredLocationsIndoorFraction");
  LODWORD(v38) = DWORD2(v109);
  v112[43] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38);
  v111[44] = CFSTR("deliveredLocationsWifi2");
  v112[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 43));
  v111[45] = CFSTR("deliveredLocationsWifi2Fraction");
  LODWORD(v39) = HIDWORD(v109);
  v112[45] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39);
  v111[46] = CFSTR("deliveredLocationsCompensated");
  v112[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 44));
  v111[47] = CFSTR("deliveredLocationsCompensatedFraction");
  LODWORD(v40) = v110;
  v112[47] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v40);
  v111[48] = CFSTR("deliveredLocationsLoiOverride");
  v112[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 45));
  v111[49] = CFSTR("deliveredLocationsLoiOverrideFraction");
  LODWORD(v41) = HIDWORD(v110);
  v112[49] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v41);
  v111[50] = CFSTR("deliveredLocationsUndefined");
  v112[50] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 46));
  v111[51] = CFSTR("deliveredLocationsUndefinedFraction");
  *(float *)&v42 = v10;
  v112[51] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v42);
  v112[52] = &off_10221B5B8;
  v111[52] = CFSTR("sessionCount");
  v111[53] = CFSTR("validDeliveredLocationsByType");
  v112[53] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", HIDWORD(v100));
  return AnalyticsSendEvent(CFSTR("com.apple.locationd.LocationUpdateSession"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v112, v111, 54));
}

void sub_10073DF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10073DFC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v15;
  int v16;
  void *__p;
  size_t __n;
  unsigned __int8 v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_1004E5E40((uint64_t)&v24);
  sub_1015A2E04(&v21, "[");
  if ((v23 & 0x80u) == 0)
    v4 = &v21;
  else
    v4 = v21;
  if ((v23 & 0x80u) == 0)
    v5 = v23;
  else
    v5 = v22;
  sub_100263F7C(&v24, (uint64_t)v4, v5);
  for (i = 0; i != 14; ++i)
  {
    v7 = *(_DWORD *)(a1 + 4 * i);
    std::stringbuf::str(&__p, v25);
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = __n;
    v9 = v23;
    if ((v23 & 0x80u) != 0)
      v9 = v22;
    if (v8 != v9)
    {
      if ((v20 & 0x80) != 0)
        operator delete(__p);
LABEL_30:
      sub_100263F7C(&v24, (uint64_t)", ", 2);
      goto LABEL_31;
    }
    if ((v23 & 0x80u) == 0)
      v10 = (unsigned __int8 *)&v21;
    else
      v10 = (unsigned __int8 *)v21;
    if ((v20 & 0x80) != 0)
    {
      v15 = __p;
      v16 = memcmp(__p, v10, __n);
      operator delete(v15);
      if (!v16)
        goto LABEL_31;
      goto LABEL_30;
    }
    if (v20)
    {
      v11 = 0;
      do
      {
        v12 = *((unsigned __int8 *)&__p + v11);
        v13 = v10[v11];
      }
      while (v12 == v13 && v20 - 1 != v11++);
      if (v12 != v13)
        goto LABEL_30;
    }
LABEL_31:
    std::ostream::operator<<(&v24, (float)v7);
  }
  sub_100263F7C(&v24, (uint64_t)"]", 1);
  std::stringbuf::str(a2, v25);
  if ((char)v23 < 0)
    operator delete(v21);
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_10073E1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_1004E5F2C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10073E200@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t i;
  float v7;
  size_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v15;
  int v16;
  void *__p;
  size_t __n;
  unsigned __int8 v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD v25[10];
  char v26;
  uint64_t v27;

  sub_1004E5E40((uint64_t)&v24);
  sub_1015A2E04(&v21, "[");
  if ((v23 & 0x80u) == 0)
    v4 = &v21;
  else
    v4 = v21;
  if ((v23 & 0x80u) == 0)
    v5 = v23;
  else
    v5 = v22;
  sub_100263F7C(&v24, (uint64_t)v4, v5);
  for (i = 0; i != 14; ++i)
  {
    v7 = *(float *)(a1 + 4 * i);
    std::stringbuf::str(&__p, v25);
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = __n;
    v9 = v23;
    if ((v23 & 0x80u) != 0)
      v9 = v22;
    if (v8 != v9)
    {
      if ((v20 & 0x80) != 0)
        operator delete(__p);
LABEL_30:
      sub_100263F7C(&v24, (uint64_t)", ", 2);
      goto LABEL_31;
    }
    if ((v23 & 0x80u) == 0)
      v10 = (unsigned __int8 *)&v21;
    else
      v10 = (unsigned __int8 *)v21;
    if ((v20 & 0x80) != 0)
    {
      v15 = __p;
      v16 = memcmp(__p, v10, __n);
      operator delete(v15);
      if (!v16)
        goto LABEL_31;
      goto LABEL_30;
    }
    if (v20)
    {
      v11 = 0;
      do
      {
        v12 = *((unsigned __int8 *)&__p + v11);
        v13 = v10[v11];
      }
      while (v12 == v13 && v20 - 1 != v11++);
      if (v12 != v13)
        goto LABEL_30;
    }
LABEL_31:
    std::ostream::operator<<(&v24, v7);
  }
  sub_100263F7C(&v24, (uint64_t)"]", 1);
  std::stringbuf::str(a2, v25);
  if ((char)v23 < 0)
    operator delete(v21);
  if (v26 < 0)
    operator delete((void *)v25[8]);
  std::streambuf::~streambuf(v25);
  return std::ios::~ios(&v27);
}

void sub_10073E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_1004E5F2C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10073E43C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD v13[5];
  _QWORD v14[5];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unsigned __int8 *v24;
  __int16 v25;
  unsigned __int8 *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v6 = a2 + 16;
    else
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if ((a2[63] & 0x80u) == 0)
      v7 = a2 + 40;
    else
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
    v8 = a2[112];
    v9 = a2[113];
    v10 = *((unsigned __int16 *)a2 + 58);
    v11 = a2[114];
    *(_DWORD *)buf = 68291075;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 1026;
    v20 = v4;
    v21 = 2050;
    v22 = v5;
    v23 = 2081;
    v24 = v6;
    v25 = 2081;
    v26 = v7;
    v27 = 1026;
    v28 = v8;
    v29 = 1026;
    v30 = v9;
    v31 = 1026;
    v32 = v10;
    v33 = 1026;
    v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: submit monitor session\", \"metric.valid\":%{public}d, \"metric.timestamp\":\"%{public}f\", \"metric.bundleId\":%{private, location:escape_only}s, \"onbehalfbundleid\":%{private, location:escape_only}s, \"clientSpecifiesMajor\":%{public}d, \"clientSpecifiesMinor\":%{public}d, \"totalMonitoredRegions\":%{public}d, \"foreground\":%{public}d}", buf, 0x4Eu);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10073E61C;
  v14[3] = &unk_102131FE8;
  v14[4] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.addRegionEvent"), v14);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10073E708;
  v13[3] = &unk_102131FE8;
  v13[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.addRegionEventWithBundleID"), v13);
}

NSDictionary *sub_10073E61C(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("clientSpecifiesMajor");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 112));
  v3[1] = CFSTR("clientSpecifiesMinor");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 113));
  v3[2] = CFSTR("totalMonitoredRegions");
  v4[2] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 116));
  v3[3] = CFSTR("appIsInForeground");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 114));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

NSDictionary *sub_10073E708(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v9[0] = CFSTR("bundleId");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0)
    v3 = (_QWORD *)*v3;
  v10[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v9[1] = CFSTR("regionIdentifier");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    v5 = (_QWORD *)*v5;
  v10[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v9[2] = CFSTR("proximityUUID");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(v6 + 64);
  if (*(char *)(v6 + 87) < 0)
    v7 = (_QWORD *)*v7;
  v10[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v9[3] = CFSTR("clientSpecifiesMajor");
  v10[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 112));
  v9[4] = CFSTR("clientSpecifiesMinor");
  v10[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 113));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 5);
}

uint64_t sub_10073E83C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[5];
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int8 *v21;
  __int16 v22;
  unsigned __int8 *v23;
  __int16 v24;
  int v25;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v6 = a2 + 16;
    else
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if ((a2[63] & 0x80u) == 0)
      v7 = a2 + 40;
    else
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
    v8 = *((unsigned __int16 *)a2 + 56);
    *(_DWORD *)buf = 68290307;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = v4;
    v18 = 2050;
    v19 = v5;
    v20 = 2081;
    v21 = v6;
    v22 = 2081;
    v23 = v7;
    v24 = 1026;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: submit monitor session\", \"metric.valid\":%{public}d, \"metric.timestamp\":\"%{public}f\", \"metric.bundleId\":%{private, location:escape_only}s, \"onbehalfbundleid\":%{private, location:escape_only}s, \"totalMonitoredRegions\":%{public}d}", buf, 0x3Cu);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10073E9F4;
  v11[3] = &unk_102131FE8;
  v11[4] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.removeRegionEvent"), v11);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10073EA78;
  v10[3] = &unk_102131FE8;
  v10[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.removeRegionEventWithBundleID"), v10);
}

NSDictionary *sub_10073E9F4(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("totalMonitoredRegions");
  v3 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 112));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

NSDictionary *sub_10073EA78(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v9[0] = CFSTR("bundleId");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0)
    v3 = (_QWORD *)*v3;
  v10[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v9[1] = CFSTR("regionIdentifier");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    v5 = (_QWORD *)*v5;
  v10[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v9[2] = CFSTR("proximityUUID");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(v6 + 64);
  if (*(char *)(v6 + 87) < 0)
    v7 = (_QWORD *)*v7;
  v10[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v9[3] = CFSTR("totalMonitoredRegions");
  v10[3] = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 112));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4);
}

uint64_t sub_10073EB8C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[5];
  _QWORD v11[5];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int8 *v21;
  __int16 v22;
  unsigned __int8 *v23;
  __int16 v24;
  int v25;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v6 = a2 + 16;
    else
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if ((a2[63] & 0x80u) == 0)
      v7 = a2 + 40;
    else
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
    v8 = a2[116];
    *(_DWORD *)buf = 68290307;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 1026;
    v17 = v4;
    v18 = 2050;
    v19 = v5;
    v20 = 2081;
    v21 = v6;
    v22 = 2081;
    v23 = v7;
    v24 = 1026;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: submit monitor session\", \"metric.valid\":%{public}d, \"metric.timestamp\":\"%{public}f\", \"metric.bundleId\":%{private, location:escape_only}s, \"onbehalfbundleid\":%{private, location:escape_only}s, \"foreground\":%{public}d}", buf, 0x3Cu);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10073ED44;
  v11[3] = &unk_102131FE8;
  v11[4] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.stateChangeEvent"), v11);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10073EDEC;
  v10[3] = &unk_102131FE8;
  v10[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.stateChangeEventWithBundleID"), v10);
}

NSDictionary *sub_10073ED44(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("appIsInForeground");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 116));
  v4[1] = CFSTR("beaconState");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

NSDictionary *sub_10073EDEC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v9[0] = CFSTR("bundleId");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0)
    v3 = (_QWORD *)*v3;
  v10[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v9[1] = CFSTR("regionIdentifier");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 88);
  if (*(char *)(v4 + 111) < 0)
    v5 = (_QWORD *)*v5;
  v10[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v9[2] = CFSTR("proximityUUID");
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)(v6 + 64);
  if (*(char *)(v6 + 87) < 0)
    v7 = (_QWORD *)*v7;
  v10[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v9[3] = CFSTR("beaconState");
  v10[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4);
}

uint64_t sub_10073EF00(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD v12[5];
  _QWORD v13[5];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  unsigned __int8 *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v6 = a2 + 16;
    else
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v7 = a2[80];
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3);
    v9 = *((_DWORD *)a2 + 16);
    v10 = (int)*((double *)a2 + 9);
    *(_DWORD *)buf = 68290819;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 1026;
    v19 = v4;
    v20 = 2050;
    v21 = v5;
    v22 = 2081;
    v23 = v6;
    v24 = 1026;
    v25 = v7;
    v26 = 2050;
    v27 = v8;
    v28 = 1026;
    v29 = v9;
    v30 = 1026;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: submit ranging session\", \"metric.valid\":%{public}d, \"metric.timstamp\":\"%{public}f\", \"metric.bundleId\":%{private, location:escape_only}s, \"regions\":%{public}d, \"beacons\":%{public}lu, \"measurements\":%{public}d, \"duration\":%{public}d}", buf, 0x48u);
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10073F0DC;
  v13[3] = &unk_102131FE8;
  v13[4] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.rangingSession"), v13);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10073F21C;
  v12[3] = &unk_102131FE8;
  v12[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.rangingSessionWithBundleID"), v12);
}

NSDictionary *sub_10073F0DC(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("appIsInForeground");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 81));
  v3[1] = CFSTR("rangingMeasurements");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  v3[2] = CFSTR("rangingBeacons");
  v4[2] = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96)) >> 3));
  v3[3] = CFSTR("rangingDuration");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 72));
  v3[4] = CFSTR("rangedRegions");
  v4[4] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 80));
  v3[5] = CFSTR("proximityChanges");
  v4[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

NSDictionary *sub_10073F21C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[4];
  _QWORD v8[4];

  v7[0] = CFSTR("bundleId");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0)
    v3 = (_QWORD *)*v3;
  v8[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v7[1] = CFSTR("proximityUUID");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_QWORD *)(v4 + 40);
  if (*(char *)(v4 + 63) < 0)
    v5 = (_QWORD *)*v5;
  v8[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v7[2] = CFSTR("rangingDuration");
  v8[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 72));
  v7[3] = CFSTR("rangedRegions");
  v8[3] = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 80));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 4);
}

uint64_t sub_10073F324(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD v9[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  unsigned __int8 *v19;
  __int16 v20;
  int v21;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    v6 = a2 + 16;
    if ((a2[39] & 0x80u) != 0)
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v7 = *((_DWORD *)a2 + 16);
    *(_DWORD *)buf = 68290051;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = v4;
    v16 = 2050;
    v17 = v5;
    v18 = 2081;
    v19 = v6;
    v20 = 1026;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"iB: submit error event\", \"metric.valid\":%{public}d, \"metric.timstamp\":\"%{public}f\", \"metric.bundleId\":%{private, location:escape_only}s, \"errorType\":%{public}d}", buf, 0x32u);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10073F488;
  v9[3] = &unk_102131FE8;
  v9[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.proximity.iBeacon.iBeaconErrorEvent"), v9);
}

NSDictionary *sub_10073F488(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("ErrorType");
  v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

uint64_t sub_10073F50C(const char *a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  const char *v22;
  uint8_t *v23;
  double v24;
  const char *v25;
  _QWORD v26[7];
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[6];
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD v34[2];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  unsigned __int8 *v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int8 *v44;

  v25 = a1;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_102150DE0);
  v3 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v6 = a2 + 16;
    else
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    *(_DWORD *)buf = 67109634;
    v40 = v4;
    v41 = 2048;
    v42 = v5;
    v43 = 2080;
    v44 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GpsAccessoryCA Submit Gps Accessory metric to CA,metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_102150DE0);
    v19 = *a2;
    v20 = *((_QWORD *)a2 + 1);
    if ((a2[39] & 0x80u) == 0)
      v21 = a2 + 16;
    else
      v21 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v34[0] = 67109634;
    v34[1] = v19;
    v35 = 2048;
    v36 = v20;
    v37 = 2080;
    v38 = v21;
    LODWORD(v24) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "#GpsAccessoryCA Submit Gps Accessory metric to CA,metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s", v34, v24, v25);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetrictoCA(const CLDaemonStats_Type::LocationAccessory &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  v7 = *((_DWORD *)a2 + 370);
  if (v7)
  {
    v8 = *((_DWORD *)a2 + 371);
    v9 = (double)v7;
    v10 = llround((double)v8 * 3600.0 / (double)v7);
    v11 = *((_DWORD *)a2 + 372);
    v12 = llround((double)v11 * 3600.0 / v9);
    v13 = llround((double)(v11 + v8) * 3600.0 / v9);
  }
  else
  {
    v10 = -1;
    v12 = -1;
    v13 = -1;
  }
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10073F87C;
  v30[3] = &unk_102150CF0;
  v30[4] = v25;
  v30[5] = a2;
  v31 = v10;
  v32 = v12;
  v33 = v13;
  result = AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.LocationAccessory.Statistics"), v30);
  v15 = (unsigned __int8 *)*((_QWORD *)a2 + 204);
  if (v15 != a2 + 1640)
  {
    do
    {
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1007414F8;
      v26[3] = &unk_102146810;
      v26[4] = v25;
      v26[5] = v15 + 32;
      v26[6] = a2;
      v27 = v10;
      v28 = v12;
      v29 = v13;
      result = AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.LocationAccessory.UnsupportedMessages"), v26);
      v16 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      v15 = v17;
    }
    while (v17 != a2 + 1640);
  }
  return result;
}

NSDictionary *sub_10073F87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *p_p;
  _QWORD *v11;
  NSNumber *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  double v50;
  double v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  double v57;
  double v58;
  double v59;
  unsigned int v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  double v65;
  double v66;
  double v67;
  unsigned int v68;
  double v69;
  double v70;
  double v71;
  unsigned int v72;
  double v73;
  double v74;
  double v75;
  unsigned int v76;
  double v77;
  double v78;
  double v79;
  unsigned int v80;
  double v81;
  double v82;
  double v83;
  unsigned int v84;
  double v85;
  double v86;
  double v87;
  unsigned int v88;
  double v89;
  double v90;
  double v91;
  unsigned int v92;
  double v93;
  double v94;
  double v95;
  unsigned int v96;
  double v97;
  double v98;
  double v99;
  unsigned int v100;
  double v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  double v138;
  double v139;
  NSDictionary *v140;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  std::string __p;
  _QWORD v147[3];
  _QWORD v148[125];
  _QWORD v149[125];

  v2 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v148[0] = CFSTR("AccessoryManufacturer");
  v5 = (_QWORD *)(v3 + 40);
  if (*(char *)(v3 + 63) < 0)
    v5 = (_QWORD *)*v5;
  v149[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v148[1] = CFSTR("AccessoryModel");
  v6 = (_QWORD *)(*(_QWORD *)v2 + 88);
  if (*(char *)(*(_QWORD *)v2 + 111) < 0)
    v6 = (_QWORD *)*v6;
  v149[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v148[2] = CFSTR("AccessoryName");
  v7 = (_QWORD *)(*(_QWORD *)v2 + 64);
  if (*(char *)(*(_QWORD *)v2 + 87) < 0)
    v7 = (_QWORD *)*v7;
  v149[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
  v148[3] = CFSTR("AccessoryFirmwareVersion");
  v8 = (_QWORD *)(*(_QWORD *)v2 + 112);
  if (*(char *)(*(_QWORD *)v2 + 135) < 0)
    v8 = (_QWORD *)*v8;
  v149[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
  v148[4] = CFSTR("AccessoryHardwareVersion");
  v9 = (_QWORD *)(*(_QWORD *)v2 + 136);
  if (*(char *)(*(_QWORD *)v2 + 159) < 0)
    v9 = (_QWORD *)*v9;
  v149[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9);
  v148[5] = CFSTR("BundleId");
  sub_10074132C(*(_QWORD *)v2 + 16, (_QWORD *)(*(_QWORD *)v2 + 1456), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v149[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  v148[6] = CFSTR("PPID");
  v11 = (_QWORD *)(*(_QWORD *)v2 + 160);
  if (*(char *)(*(_QWORD *)v2 + 183) < 0)
    v11 = (_QWORD *)*v11;
  v149[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  v148[7] = CFSTR("IsOnDenyList");
  v149[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)v2 + 188));
  v148[8] = CFSTR("IsCarPlaySessionWireless");
  v149[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)v2 + 208) != 0);
  v148[9] = CFSTR("IsDeviceCharging");
  v149[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)v2 + 336) != 0);
  v148[10] = CFSTR("IsAppleMapsRerouted");
  v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)v2 + 1484) != 0);
  v13 = 0;
  v149[10] = v12;
  v148[11] = CFSTR("AccessoryType");
  memset(v147, 0, sizeof(v147));
  v14 = *(_DWORD *)(v3 + 184);
  do
  {
    if (((v14 >> v13) & 1) != 0)
      *((_DWORD *)v147 + v13) = 1;
    ++v13;
  }
  while (v13 != 6);
  if (HIDWORD(v147[0]))
    v15 = LODWORD(v147[1]) == 0;
  else
    v15 = 1;
  v19 = !v15 && HIDWORD(v147[1]) == 0 && LODWORD(v147[2]) == 0 && HIDWORD(v147[2]) == 0;
  if (LODWORD(v147[0]))
  {
    if ((v19 & 1) != 0)
    {
      v20 = 1;
      goto LABEL_60;
    }
    if (!*(_QWORD *)((char *)v147 + 4) && __PAIR64__(HIDWORD(v147[1]), 0) == LODWORD(v147[2]) && !HIDWORD(v147[2]))
    {
      v20 = 3;
      goto LABEL_60;
    }
  }
  else
  {
    if ((v19 & 1) != 0)
    {
      v20 = 2;
      goto LABEL_60;
    }
    if (HIDWORD(v147[0])
      && !LODWORD(v147[1])
      && __PAIR64__(HIDWORD(v147[1]), 0) == LODWORD(v147[2])
      && !HIDWORD(v147[2]))
    {
      v20 = 4;
      goto LABEL_60;
    }
    if (!HIDWORD(v147[0]) && LODWORD(v147[1]) && !*(_QWORD *)((char *)&v147[1] + 4) && !HIDWORD(v147[2]))
    {
      v20 = 5;
      goto LABEL_60;
    }
    if (!*(_QWORD *)((char *)v147 + 4) && !HIDWORD(v147[1]) && LODWORD(v147[2]) && !HIDWORD(v147[2]))
    {
      v20 = 6;
      goto LABEL_60;
    }
  }
  v20 = 0;
LABEL_60:
  v149[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
  v148[12] = CFSTR("NumberOfLocationSession");
  v149[12] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 196));
  v148[13] = CFSTR("AccessoryConnectedDuration");
  v149[13] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 192));
  v148[14] = CFSTR("CarPlaySessionDuration");
  v149[14] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 204));
  v148[15] = CFSTR("TotalLocationSessionDuration");
  v149[15] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 200));
  v148[16] = CFSTR("DeviceLocationUnavailableEpochsCount");
  v149[16] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1004));
  v148[17] = CFSTR("DeadReckonedCount");
  v149[17] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1008));
  v148[18] = CFSTR("BadGPRMCCount");
  v149[18] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1016));
  v148[19] = CFSTR("AppleMapsRoutingEpochCount");
  v149[19] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1480));
  v148[20] = CFSTR("AppleMapsRerouteCount");
  v149[20] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1484));
  v148[21] = CFSTR("AppleMapsProceedToRouteCount");
  v149[21] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1488));
  v148[22] = CFSTR("NMEAScreeningEnabledDuration");
  v149[22] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1520));
  v148[23] = CFSTR("NMEAScreenedEpochCount");
  v149[23] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1524));
  v148[24] = CFSTR("NMEAScreenedRejectedEpochCount");
  v149[24] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 1528));
  v148[25] = CFSTR("WirelessCarPlayDuration");
  v149[25] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 208));
  v148[26] = CFSTR("NumberOfPublishedLocations");
  v149[26] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 216));
  v148[27] = CFSTR("ShiftedLocationEpochCount");
  v149[27] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)v2 + 212));
  v148[28] = CFSTR("LocationSessionPercentage");
  v23 = *(_DWORD *)(*(_QWORD *)v2 + 192);
  if (v23)
  {
    LODWORD(v22) = *(_DWORD *)(*(_QWORD *)v2 + 200);
    LODWORD(v21) = llround((double)v22 * 100.0 / (double)v23);
  }
  else
  {
    v21 = 0xFFFFFFFFLL;
  }
  v149[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
  v148[29] = CFSTR("AppleMapsRoutingPercentage");
  v26 = *(_DWORD *)(*(_QWORD *)v2 + 192);
  if (v26)
  {
    LODWORD(v25) = *(_DWORD *)(*(_QWORD *)v2 + 1480);
    LODWORD(v24) = llround((double)v25 * 100.0 / (double)v26);
  }
  else
  {
    v24 = 0xFFFFFFFFLL;
  }
  v149[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24);
  v148[30] = CFSTR("DeviceChargingPercentage");
  v29 = *(_DWORD *)(*(_QWORD *)v2 + 192);
  if (v29)
  {
    LODWORD(v28) = *(_DWORD *)(*(_QWORD *)v2 + 336);
    LODWORD(v27) = llround((double)v28 * 100.0 / (double)v29);
  }
  else
  {
    v27 = 0xFFFFFFFFLL;
  }
  v149[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v27);
  v148[31] = CFSTR("DeviceLocationAvailablePercentage");
  v31 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v31)
    LODWORD(v30) = llround((double)(v31 - *(_DWORD *)(*(_QWORD *)v2 + 1004)) * 100.0 / (double)v31);
  else
    v30 = 0xFFFFFFFFLL;
  v149[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v30);
  v148[32] = CFSTR("LocationPublishedPercentage");
  v34 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v34)
  {
    LODWORD(v33) = *(_DWORD *)(*(_QWORD *)v2 + 216);
    LODWORD(v32) = llround((double)v33 * 100.0 / (double)v34);
  }
  else
  {
    v32 = 0xFFFFFFFFLL;
  }
  v149[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32);
  v148[33] = CFSTR("ShiftedLocationPercentage");
  v37 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v37)
  {
    LODWORD(v36) = *(_DWORD *)(*(_QWORD *)v2 + 212);
    LODWORD(v35) = llround((double)v36 * 100.0 / (double)v37);
  }
  else
  {
    v35 = 0xFFFFFFFFLL;
  }
  v149[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v35);
  v148[34] = CFSTR("BadGPRMCPercentage");
  v40 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v40)
  {
    LODWORD(v39) = *(_DWORD *)(*(_QWORD *)v2 + 1016);
    LODWORD(v38) = llround((double)v39 * 100.0 / (double)v40);
  }
  else
  {
    v38 = 0xFFFFFFFFLL;
  }
  v149[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v38);
  v148[35] = CFSTR("DeadReckonedPercentage");
  v43 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v43)
  {
    LODWORD(v42) = *(_DWORD *)(*(_QWORD *)v2 + 1008);
    LODWORD(v41) = llround((double)v42 * 100.0 / (double)v43);
  }
  else
  {
    v41 = 0xFFFFFFFFLL;
  }
  v149[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41);
  v148[36] = CFSTR("NMEAScreenedPercentage");
  v46 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v46)
  {
    LODWORD(v45) = *(_DWORD *)(*(_QWORD *)v2 + 1524);
    LODWORD(v44) = llround((double)v45 * 100.0 / (double)v46);
  }
  else
  {
    v44 = 0xFFFFFFFFLL;
  }
  v149[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v44);
  v148[37] = CFSTR("NMEAScreenedRejectedPercentage");
  v49 = *(_DWORD *)(*(_QWORD *)v2 + 200);
  if (v49)
  {
    LODWORD(v48) = *(_DWORD *)(*(_QWORD *)v2 + 1528);
    LODWORD(v47) = llround((double)v48 * 100.0 / (double)v49);
  }
  else
  {
    v47 = 0xFFFFFFFFLL;
  }
  v149[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v47);
  v148[38] = CFSTR("AppleMapsReroutesPerHour");
  v149[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v148[39] = CFSTR("AppleMapsProceedToRoutesPerHour");
  v149[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v148[40] = CFSTR("AppleMapsReroutesOrPTRPerHour");
  v149[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v148[41] = CFSTR("TTFFAllAvg");
  if (*(_DWORD *)(*(_QWORD *)v2 + 240))
    v50 = *(double *)(*(_QWORD *)v2 + 248);
  else
    v50 = 0.0;
  v149[41] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v50);
  v148[42] = CFSTR("TTFFAllMax");
  v149[42] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 224));
  v148[43] = CFSTR("TTFFAllMin");
  v149[43] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 232));
  v148[44] = CFSTR("TTFFAllRMS");
  if (*(_DWORD *)(*(_QWORD *)v2 + 240))
    v51 = sqrt(*(double *)(*(_QWORD *)v2 + 264));
  else
    v51 = 0.0;
  v149[44] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v51);
  v148[45] = CFSTR("TTFFAllSTD");
  v52 = *(_DWORD *)(*(_QWORD *)v2 + 240);
  v53 = -1.0;
  if (v52 >= 2)
    v53 = sqrt(*(double *)(*(_QWORD *)v2 + 256) / (double)(v52 - 1));
  v149[45] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v53);
  v148[46] = CFSTR("TTFFNonDRAvg");
  if (*(_DWORD *)(*(_QWORD *)v2 + 288))
    v54 = *(double *)(*(_QWORD *)v2 + 296);
  else
    v54 = 0.0;
  v149[46] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v54);
  v148[47] = CFSTR("TTFFNonDRMax");
  v149[47] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 272));
  v148[48] = CFSTR("TTFFNonDRMin");
  v149[48] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 280));
  v148[49] = CFSTR("TTFFNonDRRMS");
  if (*(_DWORD *)(*(_QWORD *)v2 + 288))
    v55 = sqrt(*(double *)(*(_QWORD *)v2 + 312));
  else
    v55 = 0.0;
  v149[49] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v55);
  v148[50] = CFSTR("TTFFNonDRSTD");
  v56 = *(_DWORD *)(*(_QWORD *)v2 + 288);
  v57 = -1.0;
  if (v56 >= 2)
    v57 = sqrt(*(double *)(*(_QWORD *)v2 + 304) / (double)(v56 - 1));
  v149[50] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v57);
  v148[51] = CFSTR("HorzPosSolnDiffAvg");
  v58 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 456) >= 0x5Bu)
    v58 = *(double *)(*(_QWORD *)v2 + 464);
  v149[51] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v58);
  v148[52] = CFSTR("HorzPosSolnDiffMax");
  v149[52] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 440));
  v148[53] = CFSTR("HorzPosSolnDiffMin");
  v149[53] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 448));
  v148[54] = CFSTR("HorzPosSolnDiffRMS");
  v59 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 456) >= 0x5Bu)
    v59 = sqrt(*(double *)(*(_QWORD *)v2 + 480));
  v149[54] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v59);
  v148[55] = CFSTR("HorzPosSolnDiffSTD");
  v60 = *(_DWORD *)(*(_QWORD *)v2 + 456);
  v61 = -1.0;
  if (v60 >= 0x5B)
    v61 = sqrt(*(double *)(*(_QWORD *)v2 + 472) / (double)(v60 - 1));
  v149[55] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v61);
  v148[56] = CFSTR("HorzDRPosSolnDiffAvg");
  v62 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 624) >= 0x5Bu)
    v62 = *(double *)(*(_QWORD *)v2 + 632);
  v149[56] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v62);
  v148[57] = CFSTR("HorzDRPosSolnDiffMax");
  v149[57] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 608));
  v148[58] = CFSTR("HorzDRPosSolnDiffMin");
  v149[58] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 616));
  v148[59] = CFSTR("HorzDRPosSolnDiffRMS");
  v63 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 624) >= 0x5Bu)
    v63 = sqrt(*(double *)(*(_QWORD *)v2 + 648));
  v149[59] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v63);
  v148[60] = CFSTR("HorzDRPosSolnDiffSTD");
  v64 = *(_DWORD *)(*(_QWORD *)v2 + 624);
  v65 = -1.0;
  if (v64 >= 0x5B)
    v65 = sqrt(*(double *)(*(_QWORD *)v2 + 640) / (double)(v64 - 1));
  v149[60] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v65);
  v148[61] = CFSTR("AltitudeSolnDiffAvg");
  v66 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 744) >= 0x5Bu)
    v66 = *(double *)(*(_QWORD *)v2 + 752);
  v149[61] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v66);
  v148[62] = CFSTR("AltitudeSolnDiffMax");
  v149[62] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 728));
  v148[63] = CFSTR("AltitudeSolnDiffMin");
  v149[63] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 736));
  v148[64] = CFSTR("AltitudeSolnDiffRMS");
  v67 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 744) >= 0x5Bu)
    v67 = sqrt(*(double *)(*(_QWORD *)v2 + 768));
  v149[64] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v67);
  v148[65] = CFSTR("AltitudeSolnDiffSTD");
  v68 = *(_DWORD *)(*(_QWORD *)v2 + 744);
  v69 = -1.0;
  if (v68 >= 0x5B)
    v69 = sqrt(*(double *)(*(_QWORD *)v2 + 760) / (double)(v68 - 1));
  v149[65] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v69);
  v148[66] = CFSTR("CourseSolnDiffAvg");
  v70 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 864) >= 0x5Bu)
    v70 = *(double *)(*(_QWORD *)v2 + 872);
  v149[66] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v70);
  v148[67] = CFSTR("CourseSolnDiffMax");
  v149[67] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 848));
  v148[68] = CFSTR("CourseSolnDiffMin");
  v149[68] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 856));
  v148[69] = CFSTR("CourseSolnDiffRMS");
  v71 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 864) >= 0x5Bu)
    v71 = sqrt(*(double *)(*(_QWORD *)v2 + 888));
  v149[69] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v71);
  v148[70] = CFSTR("CourseSolnDiffSTD");
  v72 = *(_DWORD *)(*(_QWORD *)v2 + 864);
  v73 = -1.0;
  if (v72 >= 0x5B)
    v73 = sqrt(*(double *)(*(_QWORD *)v2 + 880) / (double)(v72 - 1));
  v149[70] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v73);
  v148[71] = CFSTR("SpeedSolnDiffAvg");
  v74 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 968) >= 0x5Bu)
    v74 = *(double *)(*(_QWORD *)v2 + 976);
  v149[71] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v74);
  v148[72] = CFSTR("SpeedSolnDiffMax");
  v149[72] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 952));
  v148[73] = CFSTR("SpeedSolnDiffMin");
  v149[73] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 960));
  v148[74] = CFSTR("SpeedSolnDiffRMS");
  v75 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 968) >= 0x5Bu)
    v75 = sqrt(*(double *)(*(_QWORD *)v2 + 992));
  v149[74] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v75);
  v148[75] = CFSTR("SpeedSolnDiffSTD");
  v76 = *(_DWORD *)(*(_QWORD *)v2 + 968);
  v77 = -1.0;
  if (v76 >= 0x5B)
    v77 = sqrt(*(double *)(*(_QWORD *)v2 + 984) / (double)(v76 - 1));
  v149[75] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v77);
  v148[76] = CFSTR("GPRMCLatencyAvg");
  v78 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1064) >= 0x5Bu)
    v78 = *(double *)(*(_QWORD *)v2 + 1072);
  v149[76] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v78);
  v148[77] = CFSTR("GPRMCLatencyMax");
  v149[77] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1048));
  v148[78] = CFSTR("GPRMCLatencyMin");
  v149[78] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1056));
  v148[79] = CFSTR("GPRMCLatencyRMS");
  v79 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1064) >= 0x5Bu)
    v79 = sqrt(*(double *)(*(_QWORD *)v2 + 1088));
  v149[79] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v79);
  v148[80] = CFSTR("GPRMCLatencySTD");
  v80 = *(_DWORD *)(*(_QWORD *)v2 + 1064);
  v81 = -1.0;
  if (v80 >= 0x5B)
    v81 = sqrt(*(double *)(*(_QWORD *)v2 + 1080) / (double)(v80 - 1));
  v149[80] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v81);
  v148[81] = CFSTR("GPRMCSpacingAvg");
  v82 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1112) >= 0x5Bu)
    v82 = *(double *)(*(_QWORD *)v2 + 1120);
  v149[81] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v82);
  v148[82] = CFSTR("GPRMCSpacingMax");
  v149[82] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1096));
  v148[83] = CFSTR("GPRMCSpacingMin");
  v149[83] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1104));
  v148[84] = CFSTR("GPRMCSpacingRMS");
  v83 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1112) >= 0x5Bu)
    v83 = sqrt(*(double *)(*(_QWORD *)v2 + 1136));
  v149[84] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v83);
  v148[85] = CFSTR("GPRMCSpacingSTD");
  v84 = *(_DWORD *)(*(_QWORD *)v2 + 1112);
  v85 = -1.0;
  if (v84 >= 0x5B)
    v85 = sqrt(*(double *)(*(_QWORD *)v2 + 1128) / (double)(v84 - 1));
  v149[85] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v85);
  v148[86] = CFSTR("GPGGALatencyAvg");
  v86 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1192) >= 0x5Bu)
    v86 = *(double *)(*(_QWORD *)v2 + 1200);
  v149[86] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v86);
  v148[87] = CFSTR("GPGGALatencyMax");
  v149[87] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1176));
  v148[88] = CFSTR("GPGGALatencyMin");
  v149[88] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1184));
  v148[89] = CFSTR("GPGGALatencyRMS");
  v87 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1192) >= 0x5Bu)
    v87 = sqrt(*(double *)(*(_QWORD *)v2 + 1216));
  v149[89] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v87);
  v148[90] = CFSTR("GPGGALatencySTD");
  v88 = *(_DWORD *)(*(_QWORD *)v2 + 1192);
  v89 = -1.0;
  if (v88 >= 0x5B)
    v89 = sqrt(*(double *)(*(_QWORD *)v2 + 1208) / (double)(v88 - 1));
  v149[90] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v89);
  v148[91] = CFSTR("GPGGASpacingAvg");
  v90 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1240) >= 0x5Bu)
    v90 = *(double *)(*(_QWORD *)v2 + 1248);
  v149[91] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v90);
  v148[92] = CFSTR("GPGGASpacingMax");
  v149[92] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1224));
  v148[93] = CFSTR("GPGGASpacingMin");
  v149[93] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1232));
  v148[94] = CFSTR("GPGGASpacingRMS");
  v91 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1240) >= 0x5Bu)
    v91 = sqrt(*(double *)(*(_QWORD *)v2 + 1264));
  v149[94] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v91);
  v148[95] = CFSTR("GPGGASpacingSTD");
  v92 = *(_DWORD *)(*(_QWORD *)v2 + 1240);
  v93 = -1.0;
  if (v92 >= 0x5B)
    v93 = sqrt(*(double *)(*(_QWORD *)v2 + 1256) / (double)(v92 - 1));
  v149[95] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v93);
  v148[96] = CFSTR("PASCDLatencyAvg");
  v94 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1320) >= 0x5Bu)
    v94 = *(double *)(*(_QWORD *)v2 + 1328);
  v149[96] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v94);
  v148[97] = CFSTR("PASCDLatencyMax");
  v149[97] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1304));
  v148[98] = CFSTR("PASCDLatencyMin");
  v149[98] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1312));
  v148[99] = CFSTR("PASCDLatencyRMS");
  v95 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1320) >= 0x5Bu)
    v95 = sqrt(*(double *)(*(_QWORD *)v2 + 1344));
  v149[99] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v95);
  v148[100] = CFSTR("PASCDLatencySTD");
  v96 = *(_DWORD *)(*(_QWORD *)v2 + 1320);
  v97 = -1.0;
  if (v96 >= 0x5B)
    v97 = sqrt(*(double *)(*(_QWORD *)v2 + 1336) / (double)(v96 - 1));
  v149[100] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v97);
  v148[101] = CFSTR("PASCDSpacingAvg");
  v98 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1368) >= 0x5Bu)
    v98 = *(double *)(*(_QWORD *)v2 + 1376);
  v149[101] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v98);
  v148[102] = CFSTR("PASCDSpacingMax");
  v149[102] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1352));
  v148[103] = CFSTR("PASCDSpacingMin");
  v149[103] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)v2 + 1360));
  v148[104] = CFSTR("PASCDSpacingRMS");
  v99 = -1.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 1368) >= 0x5Bu)
    v99 = sqrt(*(double *)(*(_QWORD *)v2 + 1392));
  v149[104] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v99);
  v148[105] = CFSTR("PASCDSpacingSTD");
  v100 = *(_DWORD *)(*(_QWORD *)v2 + 1368);
  v101 = -1.0;
  if (v100 >= 0x5B)
    v101 = sqrt(*(double *)(*(_QWORD *)v2 + 1384) / (double)(v100 - 1));
  v149[105] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v101);
  v148[106] = CFSTR("ChargingTypeMode");
  LODWORD(v147[0]) = 0;
  v149[106] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10074143C(v4, (unsigned int *)v147, (_QWORD *)(*(_QWORD *)v2 + 344)));
  v148[107] = CFSTR("AppleMapsRoutingType");
  v145 = 6;
  v149[107] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10074143C(v4, &v145, (_QWORD *)(*(_QWORD *)v2 + 1496)));
  v148[108] = CFSTR("NMEAScreeningLocationType");
  v144 = 0;
  v149[108] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10074143C(v4, &v144, (_QWORD *)(*(_QWORD *)v2 + 1536)));
  v148[109] = CFSTR("PASCDRavenUsedSpeedMode");
  v143 = 0;
  v149[109] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10074143C(v4, &v143, (_QWORD *)(*(_QWORD *)v2 + 1560)));
  v148[110] = CFSTR("PASCDRavenRejectedSpeedMode");
  v142 = 0;
  v149[110] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10074143C(v4, &v142, (_QWORD *)(*(_QWORD *)v2 + 1584)));
  v148[111] = CFSTR("GPSUnc0To5Percentage");
  v102 = sub_1007414A4(*(_QWORD *)v2 + 416, 1, 0);
  v104 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v104)
    LODWORD(v103) = llround((double)v102 * 100.0 / (double)v104);
  else
    v103 = 0xFFFFFFFFLL;
  v149[111] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v103);
  v148[112] = CFSTR("GPSUnc5To10Percentage");
  v105 = sub_1007414A4(*(_QWORD *)v2 + 416, 2, 0);
  v107 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v107)
    LODWORD(v106) = llround((double)v105 * 100.0 / (double)v107);
  else
    v106 = 0xFFFFFFFFLL;
  v149[112] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v106);
  v148[113] = CFSTR("GPSUnc10To15Percentage");
  v108 = sub_1007414A4(*(_QWORD *)v2 + 416, 3, 0);
  v110 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v110)
    LODWORD(v109) = llround((double)v108 * 100.0 / (double)v110);
  else
    v109 = 0xFFFFFFFFLL;
  v149[113] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v109);
  v148[114] = CFSTR("GPSUnc15To20Percentage");
  v111 = sub_1007414A4(*(_QWORD *)v2 + 416, 4, 0);
  v113 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v113)
    LODWORD(v112) = llround((double)v111 * 100.0 / (double)v113);
  else
    v112 = 0xFFFFFFFFLL;
  v149[114] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v112);
  v148[115] = CFSTR("GPSUnc20To30Percentage");
  v114 = sub_1007414A4(*(_QWORD *)v2 + 416, 5, 0);
  v116 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v116)
    LODWORD(v115) = llround((double)v114 * 100.0 / (double)v116);
  else
    v115 = 0xFFFFFFFFLL;
  v149[115] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v115);
  v148[116] = CFSTR("GPSUnc30To40Percentage");
  v117 = sub_1007414A4(*(_QWORD *)v2 + 416, 6, 0);
  v119 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v119)
    LODWORD(v118) = llround((double)v117 * 100.0 / (double)v119);
  else
    v118 = 0xFFFFFFFFLL;
  v149[116] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v118);
  v148[117] = CFSTR("GPSUnc40To50Percentage");
  v120 = sub_1007414A4(*(_QWORD *)v2 + 416, 7, 0);
  v122 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v122)
    LODWORD(v121) = llround((double)v120 * 100.0 / (double)v122);
  else
    v121 = 0xFFFFFFFFLL;
  v149[117] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v121);
  v148[118] = CFSTR("GPSUnc50To70Percentage");
  v123 = sub_1007414A4(*(_QWORD *)v2 + 416, 8, 0);
  v125 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v125)
    LODWORD(v124) = llround((double)v123 * 100.0 / (double)v125);
  else
    v124 = 0xFFFFFFFFLL;
  v149[118] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v124);
  v148[119] = CFSTR("GPSUnc70To100Percentage");
  v126 = sub_1007414A4(*(_QWORD *)v2 + 416, 9, 0);
  v128 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v128)
    LODWORD(v127) = llround((double)v126 * 100.0 / (double)v128);
  else
    v127 = 0xFFFFFFFFLL;
  v149[119] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v127);
  v148[120] = CFSTR("GPSUncOver100To200Percentage");
  v129 = sub_1007414A4(*(_QWORD *)v2 + 416, 10, 0);
  v131 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v131)
    LODWORD(v130) = llround((double)v129 * 100.0 / (double)v131);
  else
    v130 = 0xFFFFFFFFLL;
  v149[120] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v130);
  v148[121] = CFSTR("GPSUncOver200To300Percentage");
  v132 = sub_1007414A4(*(_QWORD *)v2 + 416, 11, 0);
  v134 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v134)
    LODWORD(v133) = llround((double)v132 * 100.0 / (double)v134);
  else
    v133 = 0xFFFFFFFFLL;
  v149[121] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v133);
  v148[122] = CFSTR("GPSUncOver300Percentage");
  v135 = sub_1007414A4(*(_QWORD *)v2 + 416, 12, 0);
  v137 = *(_DWORD *)(*(_QWORD *)v2 + 504);
  if (v137)
    LODWORD(v136) = llround((double)v135 * 100.0 / (double)v137);
  else
    v136 = 0xFFFFFFFFLL;
  v149[122] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v136);
  v148[123] = CFSTR("GPSUncAverage");
  v138 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 504) >= 0x5Bu)
    v138 = *(double *)(*(_QWORD *)v2 + 512);
  v149[123] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v138));
  v148[124] = CFSTR("GPSUncRMS");
  v139 = 0.0;
  if (*(_DWORD *)(*(_QWORD *)v2 + 504) >= 0x5Bu)
    v139 = sqrt(*(double *)(*(_QWORD *)v2 + 528));
  v149[124] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v139));
  v140 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v149, v148, 125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v140;
}

void sub_1007412F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void *sub_10074132C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, std::string *a3@<X8>)
{
  int v4;
  void *result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = *(char *)(a1 + 23);
  if (a2[2])
  {
    if (v4 < 0)
    {
      result = sub_100115CE4(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
    v9 = (_QWORD *)*a2;
    v7 = a2 + 1;
    v8 = v9;
    if (v9 != v7)
    {
      v10 = 0;
      do
      {
        if (v10 < *((unsigned int *)v8 + 14))
        {
          result = std::string::operator=(a3, (const std::string *)(v8 + 4));
          v10 = *((unsigned int *)v8 + 14);
        }
        v11 = (_QWORD *)v8[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v8[2];
            v13 = *v12 == (_QWORD)v8;
            v8 = v12;
          }
          while (!v13);
        }
        v8 = v12;
      }
      while (v12 != v7);
    }
  }
  else if (v4 < 0)
  {
    return sub_100115CE4(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return result;
}

void sub_100741420(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10074143C(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  result = *a2;
  if (a3[2])
  {
    v6 = (_QWORD *)*a3;
    v4 = a3 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      v7 = 0;
      do
      {
        v8 = *((unsigned int *)v5 + 8);
        v9 = v7 >= v8;
        if (v7 <= v8)
          v7 = *((unsigned int *)v5 + 8);
        if (v9)
          result = result;
        else
          result = *((unsigned int *)v5 + 7);
        v10 = (_QWORD *)v5[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v5[2];
            v12 = *v11 == (_QWORD)v5;
            v5 = v11;
          }
          while (!v12);
        }
        v5 = v11;
      }
      while (v11 != v4);
    }
  }
  return result;
}

uint64_t sub_1007414A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *i;
  int v4;
  int v6;

  v6 = a2;
  for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)*i)
  {
    v4 = *((_DWORD *)i + 7);
    if (v4 <= a2)
    {
      if (v4 >= a2)
        return *(unsigned int *)sub_10010E5FC(a1, &v6);
      ++i;
    }
  }
  return a3;
}

NSDictionary *sub_1007414F8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *p_p;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  NSDictionary *v20;
  std::string __p;
  _QWORD v23[16];
  _QWORD v24[16];

  v23[0] = CFSTR("UnsupportedMessage");
  v2 = *(uint64_t **)(a1 + 40);
  if (*((char *)v2 + 23) < 0)
    v2 = (uint64_t *)*v2;
  v24[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v23[1] = CFSTR("AccessoryManufacturer");
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (_QWORD *)(v3 + 40);
  if (*(char *)(v3 + 63) < 0)
    v4 = (_QWORD *)*v4;
  v24[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v23[2] = CFSTR("AccessoryModel");
  v5 = *(_QWORD *)(a1 + 48);
  v6 = (_QWORD *)(v5 + 88);
  if (*(char *)(v5 + 111) < 0)
    v6 = (_QWORD *)*v6;
  v24[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v23[3] = CFSTR("AccessoryName");
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (_QWORD *)(v7 + 64);
  if (*(char *)(v7 + 87) < 0)
    v8 = (_QWORD *)*v8;
  v24[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
  v23[4] = CFSTR("AccessoryFirmwareVersion");
  v9 = *(_QWORD *)(a1 + 48);
  v10 = (_QWORD *)(v9 + 112);
  if (*(char *)(v9 + 135) < 0)
    v10 = (_QWORD *)*v10;
  v24[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10);
  v23[5] = CFSTR("AccessoryHardwareVersion");
  v11 = *(_QWORD *)(a1 + 48);
  v12 = (_QWORD *)(v11 + 136);
  if (*(char *)(v11 + 159) < 0)
    v12 = (_QWORD *)*v12;
  v24[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12);
  v23[6] = CFSTR("BundleId");
  sub_10074132C(*(_QWORD *)(a1 + 48) + 16, (_QWORD *)(*(_QWORD *)(a1 + 48) + 1456), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v24[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  v23[7] = CFSTR("PPID");
  v14 = *(_QWORD *)(a1 + 48);
  v15 = (_QWORD *)(v14 + 160);
  if (*(char *)(v14 + 183) < 0)
    v15 = (_QWORD *)*v15;
  v24[7] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
  v23[8] = CFSTR("IsOnDenyList");
  v24[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 188));
  v23[9] = CFSTR("IsCarPlaySessionWireless");
  v24[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 48) + 208) != 0);
  v23[10] = CFSTR("IsDeviceCharging");
  v24[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 48) + 336) != 0);
  v23[11] = CFSTR("DeviceChargingPercentage");
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_DWORD *)(v18 + 192);
  if (v19)
  {
    LODWORD(v17) = *(_DWORD *)(v18 + 336);
    LODWORD(v16) = llround((double)v17 * 100.0 / (double)v19);
  }
  else
  {
    v16 = 0xFFFFFFFFLL;
  }
  v24[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16);
  v23[12] = CFSTR("IsAppleMapsRerouted");
  v24[12] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_DWORD *)(*(_QWORD *)(a1 + 48) + 1484) != 0);
  v23[13] = CFSTR("AppleMapsReroutesPerHour");
  v24[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v23[14] = CFSTR("AppleMapsProceedToRoutesPerHour");
  v24[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v23[15] = CFSTR("AppleMapsReroutesOrPTRPerHour");
  v24[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v20;
}

void sub_100741840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100741864(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  _QWORD v23[5];
  _DWORD v24[2];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102150E00);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    v11 = a2[7];
    *(_DWORD *)buf = 67176449;
    v40 = v4;
    v41 = 1025;
    v42 = v5;
    v43 = 1025;
    v44 = v6;
    v45 = 1025;
    v46 = v7;
    v47 = 1025;
    v48 = v8;
    v49 = 1025;
    v50 = v9;
    v51 = 1025;
    v52 = v10;
    v53 = 1025;
    v54 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gnssca,AssistanceFileCountMetrics,Submit to CA,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102150E00);
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[2];
    v16 = a2[3];
    v17 = a2[4];
    v18 = a2[5];
    v19 = a2[6];
    v20 = a2[7];
    v24[0] = 67176449;
    v24[1] = v13;
    v25 = 1025;
    v26 = v14;
    v27 = 1025;
    v28 = v15;
    v29 = 1025;
    v30 = v16;
    v31 = 1025;
    v32 = v17;
    v33 = 1025;
    v34 = v18;
    v35 = 1025;
    v36 = v19;
    v37 = 1025;
    v38 = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssca,AssistanceFileCountMetrics,Submit to CA,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", v24, 50);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::AssistanceFileDownloadCount &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100741AE8;
  v23[3] = &unk_102131FE8;
  v23[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GnssAssistanceFileDownloadMetrics"), v23);
}

NSDictionary *sub_100741AE8(uint64_t a1)
{
  _QWORD v3[8];
  _QWORD v4[8];

  v3[0] = CFSTR("shortTermOrbitAssistanceDailyDownloadCount");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("longTermOrbitAssistanceDailyDownloadCount");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4));
  v3[2] = CFSTR("rtiDailyDownloadCount");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v3[3] = CFSTR("ravenGnssAssistanceDailyDownloadCount");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v3[4] = CFSTR("shortTermOrbitAssistanceDailyDownloadLargeCount");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v3[5] = CFSTR("longTermOrbitAssistanceDailyDownloadLargeCount");
  v4[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20));
  v3[6] = CFSTR("rtiDailyDownloadLargeCount");
  v4[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v3[7] = CFSTR("ravenGnssAssistanceDailyDownloadLargeCount");
  v4[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 8);
}

uint64_t sub_100741C54(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  _QWORD v39[5];
  _QWORD v40[5];
  int v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102150E00);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a2[4];
    v9 = a2[14];
    *(_DWORD *)buf = 67175937;
    v60 = v4;
    v61 = 1025;
    v62 = v5;
    v63 = 1025;
    v64 = v6;
    v65 = 1025;
    v66 = v7;
    v67 = 1025;
    v68 = v8;
    v69 = 1025;
    v70 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gnssca,GnssPowerAnalyticMetrics,Submit to CA,totalDailyGnssUsageSeconds,%{private}d,totalDailyClientGnssUsageSeconds,%{private}d,totalDailyProactiveGnssUsageSeconds,%{private}d,totalDailyGnssDebounceSeconds,%{private}d,totalDailyExclusiveProactiveGnssSeconds,%{private}d,totalDailyGnssSecondsProactiveLocationNetBalance,%{private}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102150E00);
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v24 = a2[3];
    v25 = a2[4];
    v26 = a2[14];
    v41 = 67175937;
    v42 = v21;
    v43 = 1025;
    v44 = v22;
    v45 = 1025;
    v46 = v23;
    v47 = 1025;
    v48 = v24;
    v49 = 1025;
    v50 = v25;
    v51 = 1025;
    v52 = v26;
    v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssca,GnssPowerAnalyticMetrics,Submit to CA,totalDailyGnssUsageSeconds,%{private}d,totalDailyClientGnssUsageSeconds,%{private}d,totalDailyProactiveGnssUsageSeconds,%{private}d,totalDailyGnssDebounceSeconds,%{private}d,totalDailyExclusiveProactiveGnssSeconds,%{private}d,totalDailyGnssSecondsProactiveLocationNetBalance,%{private}d", &v41, 38);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::GnssPowerAnalyticsData &)", "%s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_1007420E0;
  v40[3] = &unk_102131FE8;
  v40[4] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GnssPowerAnalyticMetrics"), v40);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102150E00);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v11 = a2[5];
    v12 = a2[6];
    v13 = a2[7];
    v14 = a2[8];
    v15 = a2[9];
    v16 = a2[10];
    v17 = a2[11];
    v18 = a2[12];
    v19 = a2[13];
    *(_DWORD *)buf = 67176705;
    v60 = v11;
    v61 = 1025;
    v62 = v12;
    v63 = 1025;
    v64 = v13;
    v65 = 1025;
    v66 = v14;
    v67 = 1025;
    v68 = v15;
    v69 = 1025;
    v70 = v16;
    v71 = 1025;
    v72 = v17;
    v73 = 1025;
    v74 = v18;
    v75 = 1025;
    v76 = v19;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#gnssca,GnssDailyPowerAnalyticsWithContext,Submit to CA,dailyClientGnssDisplayOnOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOnInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnInsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffInsideVisitSeconds,%{private}d,dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds,%{private}d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102150E00);
    v28 = a2[5];
    v29 = a2[6];
    v30 = a2[7];
    v31 = a2[8];
    v32 = a2[9];
    v33 = a2[10];
    v34 = a2[11];
    v35 = a2[12];
    v36 = a2[13];
    v41 = 67176705;
    v42 = v28;
    v43 = 1025;
    v44 = v29;
    v45 = 1025;
    v46 = v30;
    v47 = 1025;
    v48 = v31;
    v49 = 1025;
    v50 = v32;
    v51 = 1025;
    v52 = v33;
    v53 = 1025;
    v54 = v34;
    v55 = 1025;
    v56 = v35;
    v57 = 1025;
    v58 = v36;
    LODWORD(v38) = 56;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssca,GnssDailyPowerAnalyticsWithContext,Submit to CA,dailyClientGnssDisplayOnOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOnInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnInsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffInsideVisitSeconds,%{private}d,dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds,%{private}d", &v41, v38);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::GnssPowerAnalyticsData &)", "%s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10074220C;
  v39[3] = &unk_102131FE8;
  v39[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GnssDailyPowerAnalyticsWithContext"), v39);
}

NSDictionary *sub_1007420E0(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("totalDailyGnssUsageSeconds");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("totalDailyClientGnssUsageSeconds");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4));
  v3[2] = CFSTR("totalDailyProactiveGnssUsageSeconds");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  v3[3] = CFSTR("totalDailyGnssDebounceSeconds");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v3[4] = CFSTR("totalDailyExclusiveProactiveGnssSeconds");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v3[5] = CFSTR("totalDailyProactiveLocationMinusGnssSavings");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

NSDictionary *sub_10074220C(uint64_t a1)
{
  _QWORD v3[9];
  _QWORD v4[9];

  v3[0] = CFSTR("dailyClientGnssDisplayOnOutsideVisitSeconds");
  v4[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 20));
  v3[1] = CFSTR("dailyDebouncePeriodDisplayOnOutsideVisitSeconds");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v3[2] = CFSTR("dailyClientGnssDisplayOnInsideVisitSeconds");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v3[3] = CFSTR("dailyDebouncePeriodDisplayOnInsideVisitSeconds");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v3[4] = CFSTR("dailyClientGnssDisplayOffOutsideVisitSeconds");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v3[5] = CFSTR("dailyDebouncePeriodDisplayOffOutsideVisitSeconds");
  v4[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v3[6] = CFSTR("dailyClientGnssDisplayOffInsideVisitSeconds");
  v4[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v3[7] = CFSTR("dailyDebouncePeriodDisplayOffInsideVisitSeconds");
  v4[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v3[8] = CFSTR("dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 9);
}

uint64_t sub_100742398(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  NSObject *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  NSObject *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  NSObject *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  NSObject *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  NSObject *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  NSObject *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  NSObject *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  char *v178;
  NSArray *v179;
  int v180;
  uint64_t *i;
  int v182;
  uint64_t *v183;
  uint64_t *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  BOOL v189;
  uint64_t *v190;
  int v191;
  uint64_t *v192;
  uint64_t *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  char *v198;
  NSArray *v199;
  uint64_t v200;
  uint64_t *v201;
  uint8_t *v202;
  uint64_t j;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  NSArray *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  NSArray *v216;
  int *v217;
  uint64_t v218;
  uint64_t v219;
  int *v220;
  int *v221;
  const char *v223;
  uint8_t *v224;
  _QWORD v227[8];
  _OWORD v228[3];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD v232[6];
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  _QWORD v243[6];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  _QWORD v249[6];
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  _BYTE v260[576];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  BOOL v266[800];
  _QWORD v267[6];
  _QWORD v268[6];
  uint8_t buf[8];
  _BYTE v270[10];
  __int16 v271;
  _BYTE v272[10];
  _BYTE v273[6];
  _BYTE v274[6];
  _BYTE v275[6];
  _BYTE v276[6];
  _BYTE v277[6];
  _BYTE v278[6];
  _BYTE v279[6];
  _BYTE v280[18];
  _BYTE v281[32];
  _BYTE v282[6];
  _BYTE v283[6];
  _BYTE v284[6];
  _BYTE v285[6];
  _BYTE v286[6];
  __int16 v287;
  int v288;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102150E00);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca Submit gnss session metric to CA", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102150E00);
    *(_WORD *)v266 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca Submit gnss session metric to CA", v266, 2);
    v224 = (uint8_t *)v223;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationGnssSessionStatsForCA &, const CLDaemonStats_Type::LocationGnssSessionFiltersForCA &)", "%s\n", v223);
    if (v224 != buf)
      free(v224);
  }
  sub_1001E4804(buf);
  v266[0] = 0;
  v5 = sub_1001E4874(*(uint64_t *)buf, "EnableVerboseGnssAnalyticsSubmissionLogging", v266);
  if (v266[0])
    v6 = v5;
  else
    v6 = 0;
  v7 = *(std::__shared_weak_count **)v270;
  if (!*(_QWORD *)v270)
    goto LABEL_13;
  v8 = (unint64_t *)(*(_QWORD *)v270 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
      goto LABEL_14;
  }
  else
  {
LABEL_13:
    if (v6)
    {
LABEL_14:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102150E00);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
        v12 = *(_DWORD *)(a3 + 24);
        v13 = *(unsigned __int8 *)(a3 + 212);
        v14 = *(unsigned __int8 *)(a3 + 213);
        v15 = *(unsigned __int8 *)(a3 + 28);
        v16 = *(unsigned __int8 *)(a3 + 214);
        v17 = *(unsigned __int8 *)(a3 + 29);
        v18 = *(unsigned __int8 *)(a3 + 30);
        v19 = *(unsigned __int8 *)(a3 + 31);
        v20 = *(unsigned __int8 *)(a3 + 32);
        *(_DWORD *)buf = 68291587;
        *(_WORD *)v270 = 2082;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&v270[2] = "";
        v271 = 2081;
        *(_QWORD *)v272 = v11;
        *(_WORD *)&v272[8] = 1025;
        *(_DWORD *)v273 = v12;
        *(_WORD *)&v273[4] = 1025;
        *(_DWORD *)v274 = v13;
        *(_WORD *)&v274[4] = 1025;
        *(_DWORD *)v275 = v14;
        *(_WORD *)&v275[4] = 1025;
        *(_DWORD *)v276 = v15;
        *(_WORD *)&v276[4] = 1025;
        *(_DWORD *)v277 = v16;
        *(_WORD *)&v277[4] = 1025;
        *(_DWORD *)v278 = v17;
        *(_WORD *)&v278[4] = 1025;
        *(_DWORD *)v279 = v18;
        *(_WORD *)&v279[4] = 1025;
        *(_DWORD *)v280 = v19;
        *(_WORD *)&v280[4] = 1025;
        *(_DWORD *)&v280[6] = v20;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"bundleId\":%{private, location:escape_only}s, \"ratType\":%{private}d, \"isShortTermOrbitAssistanceFileAvailable\":%{private}d, \"isLongTermOrbitAssistanceFileAvailable\":%{private}d, \"isRtiFileAvailable\":%{private}d, \"isRavenGnssAssistanceFileAvailable\":%{private}d, \"isExtendedEphemerisFileInjected\":%{private}d, \"isTimeAssistanceProvided\":%{private}d, \"isDEMAssistanceProvided\":%{private}d, \"isCPIAssistanceProvided\":%{private}d}", buf, 0x52u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_DWORD *)(a3 + 36);
        v23 = *(_DWORD *)(a3 + 40);
        v24 = *(_DWORD *)(a3 + 44);
        v25 = *(_DWORD *)(a3 + 48);
        v26 = *(_DWORD *)(a3 + 52);
        v27 = *(_DWORD *)(a3 + 56);
        v28 = *(_DWORD *)(a3 + 60);
        v29 = *(_DWORD *)(a3 + 64);
        v30 = *(_DWORD *)(a3 + 68);
        v32 = *(_DWORD *)(a3 + 116);
        v31 = *(_DWORD *)(a3 + 120);
        v33 = *(_DWORD *)(a3 + 124);
        v34 = *(_DWORD *)(a3 + 128);
        v35 = *(_DWORD *)(a3 + 132);
        v36 = *(_DWORD *)(a3 + 136);
        v37 = *(_DWORD *)(a3 + 140);
        v38 = *(_DWORD *)(a3 + 144);
        v39 = *(_DWORD *)(a3 + 148);
        v40 = *(_DWORD *)(a3 + 232);
        v41 = *(_DWORD *)(a3 + 236);
        v42 = *(_DWORD *)(a3 + 156);
        v43 = *(_DWORD *)(a3 + 160);
        *(_DWORD *)buf = 68294659;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v22;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v23;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v24;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v25;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v26;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v27;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v28;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v29;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v30;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v32;
        *(_WORD *)&v280[6] = 1025;
        *(_DWORD *)&v280[8] = v31;
        *(_WORD *)&v280[12] = 1025;
        *(_DWORD *)&v280[14] = v33;
        *(_WORD *)v281 = 1025;
        *(_DWORD *)&v281[2] = v34;
        *(_WORD *)&v281[6] = 1025;
        *(_DWORD *)&v281[8] = v35;
        *(_WORD *)&v281[12] = 1025;
        *(_DWORD *)&v281[14] = v36;
        *(_WORD *)&v281[18] = 1025;
        *(_DWORD *)&v281[20] = v37;
        *(_WORD *)&v281[24] = 1025;
        *(_DWORD *)&v281[26] = v38;
        *(_WORD *)&v281[30] = 1025;
        *(_DWORD *)v282 = v39;
        *(_WORD *)&v282[4] = 1025;
        *(_DWORD *)v283 = v42;
        *(_WORD *)&v283[4] = 1025;
        *(_DWORD *)v284 = v40;
        *(_WORD *)&v284[4] = 1025;
        *(_DWORD *)v285 = v41;
        *(_WORD *)&v285[4] = 1025;
        *(_DWORD *)v286 = v43;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"gpsL1Cn0Avg\":%{private}d, \"qzssL1Cn0Avg\":%{private}d, \"galileoL1Cn0Avg\":%{private}d, \"beidouL1Cn0Avg\":%{private}d, \"glonassL1Cn0Avg\":%{private}d, \"gpsL5Cn0Avg\":%{private}d, \"qzssL5Cn0Avg\":%{private}d, \"galileoL5Cn0Avg\":%{private}d, \"beidouL5Cn0Avg\":%{private}d, \"gpsL1SignalCountAvg\":%{private}d, \"qzssL1SignalCountAvg\":%{private}d, \"galileoL1SignalCountAvg\":%{private}d, \"beidouL1SignalCountAvg\":%{private}d, \"glonassL1SignalCountAvg\":%{private}d, \"gpsL5SignalCountAvg\":%{private}d, \"qzssL5SignalCountAvg\":%{private}d, \"galileoL5SignalCountAvg\":%{private}d, \"beidouL5SignalCountAvg\":%{private}d, \"signalEnvironmentMode\":%{private}d, \"powerMeasurementMode\":%{private}d, \"powerStateMode\":%{private}d, \"horizontalUncertaintyAvg\":%{private}d}", buf, 0x96u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v44 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v45 = *(_DWORD *)(a3 + 164);
        v46 = *(_DWORD *)(a3 + 168);
        v47 = *(_DWORD *)(a3 + 172);
        v48 = *(_DWORD *)(a3 + 176);
        v49 = *(_DWORD *)(a3 + 180);
        v50 = *(unsigned __int8 *)(a3 + 184);
        v51 = *(unsigned __int8 *)(a3 + 185);
        v52 = *(unsigned __int8 *)(a3 + 186);
        v53 = *(_DWORD *)(a3 + 188);
        v54 = *(_DWORD *)(a3 + 192);
        v55 = *(unsigned __int8 *)(a3 + 196);
        v56 = *(_DWORD *)(a3 + 200);
        v57 = *(_DWORD *)(a3 + 204);
        v58 = *(_DWORD *)(a3 + 208);
        v59 = *(_DWORD *)(a3 + 216);
        v60 = *(_DWORD *)(a3 + 220);
        v61 = *(_DWORD *)(a3 + 224);
        v62 = *(unsigned __int8 *)(a3 + 228);
        *(_DWORD *)buf = 68293635;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v45;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v46;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v47;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v48;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v49;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v50;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v51;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v52;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v53;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v54;
        *(_WORD *)&v280[6] = 1025;
        *(_DWORD *)&v280[8] = v55;
        *(_WORD *)&v280[12] = 1025;
        *(_DWORD *)&v280[14] = v56;
        *(_WORD *)v281 = 1025;
        *(_DWORD *)&v281[2] = v57;
        *(_WORD *)&v281[6] = 1025;
        *(_DWORD *)&v281[8] = v58;
        *(_WORD *)&v281[12] = 1025;
        *(_DWORD *)&v281[14] = v59;
        *(_WORD *)&v281[18] = 1025;
        *(_DWORD *)&v281[20] = v60;
        *(_WORD *)&v281[24] = 1025;
        *(_DWORD *)&v281[26] = v61;
        *(_WORD *)&v281[30] = 1025;
        *(_DWORD *)v282 = v62;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"mountStateMode\":%{private}d, \"motionActivityMode\":%{private}d, \"movingStateMode\":%{private}d, \"sessionDuration\":%{private}d, \"deviceOrientationMode\":%{private}d, \"isDisplayOn\":%{private}d, \"isReachable\":%{private}d, \"isBatterySaverModeOn\":%{private}d, \"chargerTypeHistMode\":%{private}d, \"thermalLevelAvg\":%{private}d, \"isAccessoryYieldingLocations\":%{private}d, \"l5OnOffStateMode\":%{private}d, \"positionContextStateMode\":%{private}d, \"xoCalibrationState\":%{private}d, \"sessionStartPositionAssistHorzReliability\":%{private}d, \"sessionStartPositionAssistHorzAcc\":%{private}d, \"sessionStartPositionAssistType\":%{private}d, \"wasWiFiPositioningAvailable\":%{private}d}", buf, 0x7Eu);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v63 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v64 = *((unsigned __int8 *)a2 + 384);
        v65 = *((unsigned __int8 *)a2 + 385);
        v66 = *((unsigned __int8 *)a2 + 386);
        v67 = *((unsigned __int8 *)a2 + 387);
        v68 = *((unsigned __int8 *)a2 + 388);
        v69 = *((unsigned __int8 *)a2 + 389);
        v70 = *((unsigned __int8 *)a2 + 390);
        v71 = *((unsigned __int8 *)a2 + 391);
        v72 = *((unsigned __int8 *)a2 + 392);
        v73 = *((unsigned __int8 *)a2 + 393);
        v74 = *((unsigned __int8 *)a2 + 394);
        *(_DWORD *)buf = 68291843;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v64;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v65;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v66;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v67;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v68;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v69;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v70;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v71;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v72;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v73;
        *(_WORD *)&v280[6] = 1025;
        *(_DWORD *)&v280[8] = v74;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"isTimePreceedsBuildTime\":%{private}d, \"isTimePreceedsExtendedEphemerisTime\":%{private}d, \"isTimeJumpForward100Seconds\":%{private}d, \"isTimeJumpBackward100Seconds\":%{private}d, \"isLnavAntiSpoofBitZeroOnMultipleSvs\":%{private}d, \"isOtaLeapSecondInconsistentWithExtendedEphemeris\":%{private}d, \"isExcessiveSignalStrength\":%{private}d, \"isHigherOrderOtaEphemerisAllZeroOnMultipleSvs\":%{private}d, \"isOtaUtcModelInconsistentWithExtendedEphemeris\":%{private}d, \"isOtaParameterOutOfBoundsOnMultipleSvs\":%{private}d, \"isSessionSpoofed\":%{private}d}", buf, 0x54u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v75 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v76 = *(_DWORD *)(a3 + 76);
        v77 = *(_DWORD *)(a3 + 80);
        v78 = *(_DWORD *)(a3 + 84);
        v79 = *(_DWORD *)(a3 + 88);
        v80 = *(_DWORD *)(a3 + 92);
        v81 = *(_DWORD *)(a3 + 96);
        v82 = *(_DWORD *)(a3 + 100);
        v83 = *(_DWORD *)(a3 + 104);
        v84 = *(_DWORD *)(a3 + 108);
        *(_DWORD *)buf = 68291331;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v76;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v77;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v78;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v79;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v80;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v81;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v82;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v83;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v84;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"gpsL1Cn0AvgFineRes\":%{private}d, \"qzssL1Cn0AvgFineRes\":%{private}d, \"galileoL1Cn0AvgFineRes\":%{private}d, \"beidouL1Cn0AvgFineRes\":%{private}d, \"glonassL1Cn0AvgFineRes\":%{private}d, \"gpsL5Cn0AvgFineRes\":%{private}d, \"qzssL5Cn0AvgFineRes\":%{private}d, \"galileoL5Cn0AvgFineRes\":%{private}d, \"beidouL5Cn0AvgFineRes\":%{private}d}", buf, 0x48u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v85 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v87 = *a2;
        v86 = a2[1];
        v88 = a2[2];
        v89 = a2[3];
        v90 = a2[4];
        v91 = a2[5];
        v92 = a2[6];
        v93 = a2[7];
        v94 = a2[8];
        v95 = *((_QWORD *)a2 + 5);
        v96 = a2[12];
        v97 = *((_QWORD *)a2 + 7);
        v98 = a2[16];
        v99 = a2[17];
        v100 = a2[18];
        v101 = a2[19];
        v102 = a2[20];
        v103 = a2[21];
        v104 = a2[22];
        v105 = a2[23];
        v106 = a2[24];
        v107 = a2[25];
        *(_DWORD *)buf = 68294659;
        *(_WORD *)v270 = 2082;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v86;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v88;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v87;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v89;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v90;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v91;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v92;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v93;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v94;
        *(_WORD *)v280 = 2049;
        *(_QWORD *)&v280[2] = v95;
        *(_WORD *)&v280[10] = 1025;
        *(_DWORD *)&v280[12] = v96;
        *(_WORD *)&v280[16] = 2049;
        *(_QWORD *)v281 = v97;
        *(_WORD *)&v281[8] = 1025;
        *(_DWORD *)&v281[10] = v98;
        *(_WORD *)&v281[14] = 1025;
        *(_DWORD *)&v281[16] = v99;
        *(_WORD *)&v281[20] = 1025;
        *(_DWORD *)&v281[22] = v100;
        *(_WORD *)&v281[26] = 1025;
        *(_DWORD *)&v281[28] = v101;
        *(_WORD *)v282 = 1025;
        *(_DWORD *)&v282[2] = v102;
        *(_WORD *)v283 = 1025;
        *(_DWORD *)&v283[2] = v103;
        *(_WORD *)v284 = 1025;
        *(_DWORD *)&v284[2] = v104;
        *(_WORD *)v285 = 1025;
        *(_DWORD *)&v285[2] = v105;
        *(_WORD *)v286 = 1025;
        *(_DWORD *)&v286[2] = v106;
        v287 = 1025;
        v288 = v107;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"shortTermOrbitAssistanceFileAgeSeconds\":%{private}d, \"longTermOrbitAssistanceFileAgeSeconds\":%{private}d, \"rtiFileAgeSeconds\":%{private}d, \"ravenGnssAssistanceFileAgeSeconds\":%{private}d, \"pctYield\":%{private}d, \"pctYieldPostFirstFix\":%{private}d, \"yieldCount\":%{private}d, \"ttff\":%{private}d, \"epochCount\":%{private}d, \"cellularUplinkTxBandwidth\":\"%{private}f\", \"cellularBand\":%{private}d, \"cellularUplinkTxFrequency\":\"%{private}f\", \"cellularRSRP\":%{private}d, \"cellularSNR\":%{private}d, \"cellularBandEpochCount\":%{private}d, \"mmPAssisProvPct\":%{private}d, \"demAssisProvPct\":%{private}d, \"taAssisProvPct\":%{private}d, \"timeAssisProvPct\":%{private}d, \"cpiPositionAssisProvPct\":%{private}d, \"cpiTlyCpldPosAssisProvPct\":%{private}d, \"rtiProvPct\":%{private}d}", buf, 0x9Eu);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v108 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v109 = a2[26];
        v110 = a2[27];
        v111 = a2[28];
        v112 = a2[29];
        v113 = a2[30];
        v114 = a2[31];
        v115 = a2[32];
        v116 = a2[33];
        v117 = a2[34];
        *(_DWORD *)buf = 68291331;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v109;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v110;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v111;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v112;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v113;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v114;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v115;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v116;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v117;
        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"accelDataProvPct\":%{private}d, \"gyroDataProvPct\":%{private}d, \"pressureDataProvPct\":%{private}d, \"pedSpeedDataProvPct\":%{private}d, \"pedSpeedConDataProvPct\":%{private}d, \"motionDataProvPct\":%{private}d, \"ephemerisProvPct\":%{private}d, \"mountStateProvPct\":%{private}d, \"signalEnvirDataProvPct\":%{private}d}", buf, 0x48u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v118 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v119 = a2[35];
        v120 = a2[36];
        v121 = a2[37];
        v122 = a2[38];
        v123 = a2[39];
        v124 = a2[40];
        v125 = a2[41];
        v126 = a2[42];
        v127 = a2[43];
        v128 = a2[44];
        v129 = a2[45];
        v130 = a2[46];
        v131 = a2[47];
        v132 = a2[48];
        v133 = a2[49];
        *(_DWORD *)buf = 68292867;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v119;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v120;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v121;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v122;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v123;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v124;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v125;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v126;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v127;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v128;
        *(_WORD *)&v280[6] = 1025;
        *(_DWORD *)&v280[8] = v129;
        *(_WORD *)&v280[12] = 1025;
        *(_DWORD *)&v280[14] = v130;
        *(_WORD *)v281 = 1025;
        *(_DWORD *)&v281[2] = v131;
        *(_WORD *)&v281[6] = 1025;
        *(_DWORD *)&v281[8] = v132;
        *(_WORD *)&v281[12] = 1025;
        *(_DWORD *)&v281[14] = v133;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"motionActivContextProvPct\":%{private}d, \"mmPAssisUsedPct\":%{private}d, \"demAssisUsedPct\":%{private}d, \"taAssisUsedPct\":%{private}d, \"timeAssisUsedPct\":%{private}d, \"cpiPositionAssisUsedPct\":%{private}d, \"cpiTlyCpldPosAssisUsedPct\":%{private}d, \"rtiUsedPct\":%{private}d, \"accelDataUsedPct\":%{private}d, \"gyroDataUsedPct\":%{private}d, \"pressureDataUsedPct\":%{private}d, \"pedSpeedDataUsedPct\":%{private}d, \"pedSpeedConDataUsedPct\":%{private}d, \"motionDataUsedPct\":%{private}d, \"ephemerisUsedPct\":%{private}d}", buf, 0x6Cu);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v134 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v135 = a2[50];
        v136 = a2[51];
        v137 = a2[52];
        v138 = a2[53];
        v139 = a2[54];
        v140 = a2[55];
        v141 = a2[56];
        v142 = a2[57];
        v143 = a2[58];
        v144 = a2[59];
        v145 = *((_QWORD *)a2 + 30);
        v146 = a2[62];
        v147 = a2[63];
        v148 = a2[64];
        v149 = a2[65];
        v150 = *((_QWORD *)a2 + 47);
        *(_DWORD *)buf = 68293123;
        *(_WORD *)v270 = 2082;
        *(_DWORD *)&buf[4] = 0;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v135;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v136;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v137;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v138;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v139;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v140;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v141;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v142;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v143;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v144;
        *(_WORD *)&v280[6] = 2049;
        *(_QWORD *)&v280[8] = v145;
        *(_WORD *)&v280[16] = 1025;
        *(_DWORD *)v281 = v146;
        *(_WORD *)&v281[4] = 1025;
        *(_DWORD *)&v281[6] = v147;
        *(_WORD *)&v281[10] = 1025;
        *(_DWORD *)&v281[12] = v148;
        *(_WORD *)&v281[16] = 1025;
        *(_DWORD *)&v281[18] = v149;
        *(_WORD *)&v281[22] = 2049;
        *(_QWORD *)&v281[24] = v150;
        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"mountStateUsedPct\":%{private}d, \"signalEnvirDataUsedPct\":%{private}d, \"motionActivContextUsedPct\":%{private}d, \"displayOnPct\":%{private}d, \"reachablePct\":%{private}d, \"batterySaverModeOnPct\":%{private}d, \"anomalyStatusUnknownPct\":%{private}d, \"anomalyStatusSimulatedPct\":%{private}d, \"anomalyStatusAuthenticPct\":%{private}d, \"anomalyStatusMaybeSimulatedPct\":%{private}d, \"deresFinalAltitude\":\"%{private}f\", \"antL5BestDurationPct\":%{private}d, \"antL5OtherDurationPct\":%{private}d, \"antL5WorstDurationPct\":%{private}d, \"gnssL5BlankingDurationPct\":%{private}d, \"deltaFirstFixAndPositionAssistMeters\":\"%{private}f\"}", buf, 0x7Au);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v151 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v152 = a2[110];
        v153 = a2[111];
        v154 = a2[112];
        v155 = a2[113];
        v156 = a2[114];
        v157 = a2[115];
        v158 = a2[116];
        v159 = a2[117];
        v160 = a2[118];
        v161 = a2[119];
        v162 = a2[120];
        v163 = a2[121];
        v164 = a2[122];
        v165 = a2[140];
        v166 = a2[142];
        v167 = a2[144];
        v168 = a2[139];
        v169 = a2[141];
        v170 = a2[143];
        *(_DWORD *)buf = 68293891;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v152;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v153;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v154;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v155;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v156;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v157;
        *(_WORD *)v277 = 1025;
        *(_DWORD *)&v277[2] = v158;
        *(_WORD *)v278 = 1025;
        *(_DWORD *)&v278[2] = v159;
        *(_WORD *)v279 = 1025;
        *(_DWORD *)&v279[2] = v160;
        *(_WORD *)v280 = 1025;
        *(_DWORD *)&v280[2] = v161;
        *(_WORD *)&v280[6] = 1025;
        *(_DWORD *)&v280[8] = v162;
        *(_WORD *)&v280[12] = 1025;
        *(_DWORD *)&v280[14] = v163;
        *(_WORD *)v281 = 1025;
        *(_DWORD *)&v281[2] = v164;
        *(_WORD *)&v281[6] = 1025;
        *(_DWORD *)&v281[8] = v165;
        *(_WORD *)&v281[12] = 1025;
        *(_DWORD *)&v281[14] = v166;
        *(_WORD *)&v281[18] = 1025;
        *(_DWORD *)&v281[20] = v167;
        *(_WORD *)&v281[24] = 1025;
        *(_DWORD *)&v281[26] = v168;
        *(_WORD *)&v281[30] = 1025;
        *(_DWORD *)v282 = v169;
        *(_WORD *)&v282[4] = 1025;
        *(_DWORD *)v283 = v170;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"ms_to_first_gps_code_lock\":%{private}d, \"ms_to_first_glo_code_lock\":%{private}d, \"ms_to_first_gal_code_lock\":%{private}d, \"ms_to_first_bds_code_lock\":%{private}d, \"ms_to_first_gps_tow_decoded\":%{private}d, \"ms_to_first_glo_tod_decoded\":%{private}d, \"ms_to_first_gal_tow_decoded\":%{private}d, \"ms_to_first_bds_tow_decoded\":%{private}d, \"ms_to_first_gps_full_sync\":%{private}d, \"ms_to_first_glo_full_sync\":%{private}d, \"ms_to_first_gal_full_sync\":%{private}d, \"ms_to_first_bds_full_sync\":%{private}d, \"me_clock_event_counter\":%{private}d, \"phase_lock_rate_20_25dBHz\":%{private}d, \"phase_lock_rate_25_30dBHz\":%{private}d, \"phase_lock_rate_30plusdBHz\":%{private}d, \"phase_available_rate_20_25dBHz\":%{private}d, \"phase_available_rate_25_30dBHz\":%{private}d, \"phase_available_rate_30plusdBHz\":%{private}d}", buf, 0x84u);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102150E00);
      }
      v171 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v172 = a2[145];
        v173 = a2[146];
        v174 = a2[147];
        v175 = a2[148];
        v176 = a2[149];
        v177 = a2[150];
        *(_DWORD *)buf = 68290563;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v270 = 2082;
        *(_QWORD *)&v270[2] = "";
        v271 = 1025;
        *(_DWORD *)v272 = v172;
        *(_WORD *)&v272[4] = 1025;
        *(_DWORD *)&v272[6] = v173;
        *(_WORD *)v273 = 1025;
        *(_DWORD *)&v273[2] = v174;
        *(_WORD *)v274 = 1025;
        *(_DWORD *)&v274[2] = v175;
        *(_WORD *)v275 = 1025;
        *(_DWORD *)&v275[2] = v176;
        *(_WORD *)v276 = 1025;
        *(_DWORD *)&v276[2] = v177;
        _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssca LocationGnssSessionStatsForCA Submission\", \"iono_model_percent_global_prediction\":%{private}d, \"iono_model_percent_klob\":%{private}d, \"sv_pos_percentage_brdc_file\":%{private}d, \"sv_pos_percentage_long_term_file\":%{private}d, \"sv_pos_percentage_ota\":%{private}d, \"sv_pos_percentage_short_term_file\":%{private}d}", buf, 0x36u);
      }
    }
  }
  v268[0] = _NSConcreteStackBlock;
  v268[1] = 3221225472;
  v268[2] = sub_10074382C;
  v268[3] = &unk_102139B90;
  v268[4] = a3;
  v268[5] = a2;
  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GnssSessionStats"), v268);
  v267[0] = _NSConcreteStackBlock;
  v267[1] = 3221225472;
  v267[2] = sub_100744C4C;
  v267[3] = &unk_102139B90;
  v267[4] = a2;
  v267[5] = a3;
  AnalyticsSendExplodingEventLazy(CFSTR("com.apple.locationd.position.GnssSesssionAnomalyStatus"), v267);
  bzero(v266, 0x318uLL);
  v265 = 0;
  v264 = 0u;
  v263 = 0u;
  v262 = 0u;
  v261 = 0u;
  bzero(v260, 0x240uLL);
  v259 = 0;
  v257 = 0u;
  v258 = 0u;
  v178 = (char *)&dword_101BBF4C8;
  v255 = 0u;
  v256 = 0u;
  do
  {
    v179 = objc_opt_new(NSArray);
    v180 = *(_DWORD *)v178;
    *((_QWORD *)&v261 + v180) = v179;
    *(_DWORD *)buf = v180;
    for (i = (uint64_t *)*((_QWORD *)a2 + 37); i; i = (uint64_t *)*i)
    {
      v182 = *((_DWORD *)i + 8);
      if (v182 <= v180)
      {
        if (v182 >= v180)
        {
          v183 = sub_1000B5C9C((uint64_t)(a2 + 72), (int *)buf);
          v186 = *v183;
          v184 = v183 + 1;
          v185 = (_QWORD *)v186;
          if ((uint64_t *)v186 != v184)
          {
            do
            {
              *(_QWORD *)&v266[88 * v180 + 8 * *((int *)v185 + 8)] = v185[5];
              v187 = (uint64_t *)v185[1];
              if (v187)
              {
                do
                {
                  v188 = v187;
                  v187 = (uint64_t *)*v187;
                }
                while (v187);
              }
              else
              {
                do
                {
                  v188 = (uint64_t *)v185[2];
                  v189 = *v188 == (_QWORD)v185;
                  v185 = v188;
                }
                while (!v189);
              }
              v185 = v188;
            }
            while (v188 != v184);
          }
          *((_QWORD *)&v261 + v180) = sub_1007451C0(a1, (uint64_t)&v266[88 * v180]);
          break;
        }
        ++i;
      }
    }
    *((_QWORD *)&v255 + v180) = objc_opt_new(NSArray);
    *(_DWORD *)buf = v180;
    v190 = (uint64_t *)*((_QWORD *)a2 + 34);
    if (!v190)
      goto LABEL_83;
    while (1)
    {
      v191 = *((_DWORD *)v190 + 8);
      if (v191 <= v180)
        break;
LABEL_73:
      v190 = (uint64_t *)*v190;
      if (!v190)
        goto LABEL_83;
    }
    if (v191 < v180)
    {
      ++v190;
      goto LABEL_73;
    }
    v192 = sub_1000B5C9C((uint64_t)(a2 + 66), (int *)buf);
    v195 = *v192;
    v193 = v192 + 1;
    v194 = (_QWORD *)v195;
    if ((uint64_t *)v195 != v193)
    {
      do
      {
        *(_QWORD *)&v260[64 * (uint64_t)v180 + 8 * *((int *)v194 + 8)] = v194[5];
        v196 = (uint64_t *)v194[1];
        if (v196)
        {
          do
          {
            v197 = v196;
            v196 = (uint64_t *)*v196;
          }
          while (v196);
        }
        else
        {
          do
          {
            v197 = (uint64_t *)v194[2];
            v189 = *v197 == (_QWORD)v194;
            v194 = v197;
          }
          while (!v189);
        }
        v194 = v197;
      }
      while (v197 != v193);
    }
    *((_QWORD *)&v255 + v180) = sub_100745230(a1, (uint64_t)&v260[64 * (uint64_t)v180]);
LABEL_83:
    v178 += 4;
  }
  while (v178 != "13CLDaemonStats");
  v249[0] = _NSConcreteStackBlock;
  v249[1] = 3221225472;
  v249[2] = sub_1007452A0;
  v249[3] = &unk_102150D10;
  v249[4] = a3;
  v249[5] = a2;
  v252 = v263;
  v253 = v264;
  v254 = v265;
  v250 = v261;
  v251 = v262;
  AnalyticsSendExplodingEventLazy(CFSTR("com.apple.locationd.position.GnssSessionSignalStrength"), v249);
  v243[0] = _NSConcreteStackBlock;
  v243[1] = 3221225472;
  v243[2] = sub_100745970;
  v243[3] = &unk_102150D10;
  v243[4] = a3;
  v243[5] = a2;
  v246 = v257;
  v247 = v258;
  v248 = v259;
  v244 = v255;
  v245 = v256;
  AnalyticsSendExplodingEventLazy(CFSTR("com.apple.locationd.position.GnssSession.SignalCount"), v243);
  bzero(buf, 0x360uLL);
  v242 = 0;
  v240 = 0u;
  v241 = 0u;
  v238 = 0u;
  v239 = 0u;
  v198 = (char *)&dword_101BBF4C8;
  do
  {
    v199 = objc_opt_new(NSArray);
    v200 = *(int *)v198;
    *((_QWORD *)&v238 + v200) = v199;
    LODWORD(v228[0]) = v200;
    if (sub_1001F8DEC((_QWORD *)a2 + 39, (int *)v228))
    {
      v201 = sub_1001F8DEC((_QWORD *)a2 + 39, (int *)v228);
      if (!v201)
        sub_100263950("unordered_map::at: key not found");
      v202 = &buf[96 * (int)v200];
      for (j = v201[5]; j; j = *(_QWORD *)j)
      {
        v204 = *(_DWORD *)(j + 16);
        v205 = v204 - 35;
        if ((v204 - 35) > 0x31)
        {
          if (v204 < 85)
            *(_QWORD *)v202 = 1;
          else
            *((_QWORD *)v202 + 11) = 1;
        }
        else
        {
          v206 = *(unsigned int *)(j + 20);
          if ((int)v206 >= 1)
          {
            v207 = (int)((double)v205 * 0.2 + 1.0);
            if (v207 >= 1 && v207 <= 9)
              *(_QWORD *)&v202[8 * v207] = v206;
          }
        }
      }
      *((_QWORD *)&v238 + v200) = sub_100746040(a1, (uint64_t)v202);
    }
    v198 += 4;
  }
  while (v198 != "13CLDaemonStats");
  v232[0] = _NSConcreteStackBlock;
  v232[1] = 3221225472;
  v232[2] = sub_1007460B0;
  v232[3] = &unk_102150D10;
  v232[4] = a3;
  v232[5] = a2;
  v235 = v240;
  v236 = v241;
  v237 = v242;
  v233 = v238;
  v234 = v239;
  AnalyticsSendExplodingEventLazy(CFSTR("com.apple.locationd.position.GnssSession.JammingMetrics"), v232);
  v209 = objc_opt_new(NSArray);
  v230 = 0;
  v231 = 0;
  v210 = *((_QWORD *)a2 + 44);
  v211 = *((_QWORD *)a2 + 45);
  if (v210 == v211)
  {
    v213 = 0;
  }
  else
  {
    v212 = 0;
    v213 = 0;
    do
    {
      v214 = *(_QWORD *)(v210 + 8);
      if (v214)
      {
        if ((*(_DWORD *)v210 - 2) >= 2)
        {
          if (*(_DWORD *)v210 == 1)
            v231 = *(_QWORD *)(v210 + 8);
          else
            v213 = *(_QWORD *)(v210 + 8);
        }
        else
        {
          v212 += v214;
          v230 = v212;
        }
      }
      v210 += 16;
    }
    while (v210 != v211);
  }
  v229 = v213;
  v215 = sub_1007467C0(a1, (uint64_t)&v229);
  v216 = objc_opt_new(NSArray);
  memset(v228, 0, sizeof(v228));
  v217 = (int *)*((_QWORD *)a2 + 62);
  if (v217 != a2 + 126)
  {
    do
    {
      v218 = v217[8];
      if (v218 <= 5)
      {
        v219 = *((_QWORD *)v217 + 5);
        if (v219)
          *((_QWORD *)v228 + v218) = v219;
      }
      v220 = (int *)*((_QWORD *)v217 + 1);
      if (v220)
      {
        do
        {
          v221 = v220;
          v220 = *(int **)v220;
        }
        while (v220);
      }
      else
      {
        do
        {
          v221 = (int *)*((_QWORD *)v217 + 2);
          v189 = *(_QWORD *)v221 == (_QWORD)v217;
          v217 = v221;
        }
        while (!v189);
      }
      v217 = v221;
    }
    while (v221 != a2 + 126);
  }
  v227[0] = _NSConcreteStackBlock;
  v227[1] = 3221225472;
  v227[2] = sub_1007468A0;
  v227[3] = &unk_102150D38;
  v227[6] = a3;
  v227[7] = a2;
  v227[4] = sub_100746830(a1, (uint64_t)v228);
  v227[5] = v215;
  return AnalyticsSendExplodingEventLazy(CFSTR("com.apple.locationd.position.GnssSession.L5Metrics"), v227);
}

void sub_100743810(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x8D0]);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10074382C(uint64_t a1)
{
  uint64_t *v2;
  _QWORD v4[157];
  _QWORD v5[157];

  v4[0] = CFSTR("bundleId");
  v2 = *(uint64_t **)(a1 + 32);
  if (*((char *)v2 + 23) < 0)
    v2 = (uint64_t *)*v2;
  v5[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v4[1] = CFSTR("ratType");
  v5[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v4[2] = CFSTR("isShortTermOrbitAssistanceFileAvailable");
  v5[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 212));
  v4[3] = CFSTR("isLongTermOrbitAssistanceFileAvailable");
  v5[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 213));
  v4[4] = CFSTR("isRtiFileAvailable");
  v5[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  v4[5] = CFSTR("isRavenGnssAssistanceFileAvailable");
  v5[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 214));
  v4[6] = CFSTR("isExtendedEphemerisFileInjected");
  v5[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 29));
  v4[7] = CFSTR("isTimeAssistanceProvided");
  v5[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 30));
  v4[8] = CFSTR("isDEMAssistanceProvided");
  v5[8] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 31));
  v4[9] = CFSTR("isCPIAssistanceProvided");
  v5[9] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32));
  v4[10] = CFSTR("gpsL1Cn0Avg");
  v5[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v4[11] = CFSTR("qzssL1Cn0Avg");
  v5[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v4[12] = CFSTR("galileoL1Cn0Avg");
  v5[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v4[13] = CFSTR("beidouL1Cn0Avg");
  v5[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48));
  v4[14] = CFSTR("glonassL1Cn0Avg");
  v5[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 52));
  v4[15] = CFSTR("gpsL5Cn0Avg");
  v5[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
  v4[16] = CFSTR("qzssL5Cn0Avg");
  v5[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 60));
  v4[17] = CFSTR("galileoL5Cn0Avg");
  v5[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 64));
  v4[18] = CFSTR("beidouL5Cn0Avg");
  v5[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 68));
  v4[19] = CFSTR("gpsL1SignalCountAvg");
  v5[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v4[20] = CFSTR("qzssL1SignalCountAvg");
  v5[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v4[21] = CFSTR("galileoL1SignalCountAvg");
  v5[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v4[22] = CFSTR("beidouL1SignalCountAvg");
  v5[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v4[23] = CFSTR("glonassL1SignalCountAvg");
  v5[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v4[24] = CFSTR("gpsL5SignalCountAvg");
  v5[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v4[25] = CFSTR("qzssL5SignalCountAvg");
  v5[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v4[26] = CFSTR("galileoL5SignalCountAvg");
  v5[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v4[27] = CFSTR("beidouL5SignalCountAvg");
  v5[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v4[28] = CFSTR("signalEnvironmentMode");
  v5[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v4[29] = CFSTR("horizontalUncertaintyAvg");
  v5[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v4[30] = CFSTR("mountStateMode");
  v5[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v4[31] = CFSTR("motionActivityMode");
  v5[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v4[32] = CFSTR("movingStateMode");
  v5[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v4[33] = CFSTR("sessionDuration");
  v5[33] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v4[34] = CFSTR("deviceOrientationMode");
  v5[34] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v4[35] = CFSTR("isDisplayOn");
  v5[35] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 184));
  v4[36] = CFSTR("isReachable");
  v5[36] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 185));
  v4[37] = CFSTR("isBatterySaverModeOn");
  v5[37] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 186));
  v4[38] = CFSTR("chargerTypeHistMode");
  v5[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v4[39] = CFSTR("thermalLevelAvg");
  v5[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v4[40] = CFSTR("isAccessoryYieldingLocations");
  v5[40] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 196));
  v4[41] = CFSTR("l5OnOffStateMode");
  v5[41] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v4[42] = CFSTR("positionContextStateMode");
  v5[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v4[43] = CFSTR("xoCalibrationState");
  v5[43] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v4[44] = CFSTR("sessionStartPositionAssistHorzReliability");
  v5[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v4[45] = CFSTR("sessionStartPositionAssistHorzAcc");
  v5[45] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v4[46] = CFSTR("sessionStartPositionAssistType");
  v5[46] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  v4[47] = CFSTR("wasWiFiPositioningAvailable");
  v5[47] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 228));
  v4[48] = CFSTR("powerMeasurementMode");
  v5[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 232));
  v4[49] = CFSTR("powerStateMode");
  v5[49] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 236));
  v4[50] = CFSTR("isTimePreceedsBuildTime");
  v5[50] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 384));
  v4[51] = CFSTR("isTimePreceedsExtendedEphemerisTime");
  v5[51] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 385));
  v4[52] = CFSTR("isTimeJumpForward100Seconds");
  v5[52] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 386));
  v4[53] = CFSTR("isTimeJumpBackward100Seconds");
  v5[53] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 387));
  v4[54] = CFSTR("isLnavAntiSpoofBitZeroOnMultipleSvs");
  v5[54] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 388));
  v4[55] = CFSTR("isOtaLeapSecondInconsistentWithExtendedEphemeris");
  v5[55] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 389));
  v4[56] = CFSTR("isExcessiveSignalStrength");
  v5[56] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 390));
  v4[57] = CFSTR("isHigherOrderOtaEphemerisAllZeroOnMultipleSvs");
  v5[57] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 391));
  v4[58] = CFSTR("isOtaUtcModelInconsistentWithExtendedEphemeris");
  v5[58] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 392));
  v4[59] = CFSTR("isOtaParameterOutOfBoundsOnMultipleSvs");
  v5[59] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 393));
  v4[60] = CFSTR("isSessionSpoofed");
  v5[60] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 394));
  v4[61] = CFSTR("gpsL1Cn0AvgFineRes");
  v5[61] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 76));
  v4[62] = CFSTR("qzssL1Cn0AvgFineRes");
  v5[62] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v4[63] = CFSTR("galileoL1Cn0AvgFineRes");
  v5[63] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v4[64] = CFSTR("beidouL1Cn0AvgFineRes");
  v5[64] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v4[65] = CFSTR("glonassL1Cn0AvgFineRes");
  v5[65] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v4[66] = CFSTR("gpsL5Cn0AvgFineRes");
  v5[66] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v4[67] = CFSTR("qzssL5Cn0AvgFineRes");
  v5[67] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v4[68] = CFSTR("galileoL5Cn0AvgFineRes");
  v5[68] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v4[69] = CFSTR("beidouL5Cn0AvgFineRes");
  v5[69] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v4[70] = CFSTR("shortTermOrbitAssistanceFileAgeSeconds");
  v5[70] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4));
  v4[71] = CFSTR("longTermOrbitAssistanceFileAgeSeconds");
  v5[71] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  v4[72] = CFSTR("rtiFileAgeSeconds");
  v5[72] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(a1 + 40));
  v4[73] = CFSTR("ravenGnssAssistanceFileAgeSeconds");
  v5[73] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12));
  v4[74] = CFSTR("pctYield");
  v5[74] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16));
  v4[75] = CFSTR("pctYieldPostFirstFix");
  v5[75] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20));
  v4[76] = CFSTR("yieldCount");
  v5[76] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24));
  v4[77] = CFSTR("ttff");
  v5[77] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 28));
  v4[78] = CFSTR("epochCount");
  v5[78] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 32));
  v4[79] = CFSTR("cellularUplinkTxBandwidth");
  v5[79] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 40));
  v4[80] = CFSTR("cellularBand");
  v5[80] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 48));
  v4[81] = CFSTR("cellularUplinkTxFrequency");
  v5[81] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 56));
  v4[82] = CFSTR("cellularRSRP");
  v5[82] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64));
  v4[83] = CFSTR("cellularSNR");
  v5[83] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 68));
  v4[84] = CFSTR("cellularBandEpochCount");
  v5[84] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 72));
  v4[85] = CFSTR("mmPAssisProvPct");
  v5[85] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 76));
  v4[86] = CFSTR("demAssisProvPct");
  v5[86] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 80));
  v4[87] = CFSTR("taAssisProvPct");
  v5[87] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 84));
  v4[88] = CFSTR("timeAssisProvPct");
  v5[88] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 88));
  v4[89] = CFSTR("cpiPositionAssisProvPct");
  v5[89] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 92));
  v4[90] = CFSTR("cpiTlyCpldPosAssisProvPct");
  v5[90] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 96));
  v4[91] = CFSTR("rtiProvPct");
  v5[91] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 100));
  v4[92] = CFSTR("accelDataProvPct");
  v5[92] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 104));
  v4[93] = CFSTR("gyroDataProvPct");
  v5[93] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 108));
  v4[94] = CFSTR("pressureDataProvPct");
  v5[94] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 112));
  v4[95] = CFSTR("pedSpeedDataProvPct");
  v5[95] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 116));
  v4[96] = CFSTR("pedSpeedConDataProvPct");
  v5[96] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 120));
  v4[97] = CFSTR("motionDataProvPct");
  v5[97] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 124));
  v4[98] = CFSTR("ephemerisProvPct");
  v5[98] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 128));
  v4[99] = CFSTR("mountStateProvPct");
  v5[99] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 132));
  v4[100] = CFSTR("signalEnvirDataProvPct");
  v5[100] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 136));
  v4[101] = CFSTR("motionActivContextProvPct");
  v5[101] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 140));
  v4[102] = CFSTR("mmPAssisUsedPct");
  v5[102] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 144));
  v4[103] = CFSTR("demAssisUsedPct");
  v5[103] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 148));
  v4[104] = CFSTR("taAssisUsedPct");
  v5[104] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 152));
  v4[105] = CFSTR("timeAssisUsedPct");
  v5[105] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 156));
  v4[106] = CFSTR("cpiPositionAssisUsedPct");
  v5[106] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 160));
  v4[107] = CFSTR("cpiTlyCpldPosAssisUsedPct");
  v5[107] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 164));
  v4[108] = CFSTR("rtiUsedPct");
  v5[108] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 168));
  v4[109] = CFSTR("accelDataUsedPct");
  v5[109] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 172));
  v4[110] = CFSTR("gyroDataUsedPct");
  v5[110] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v4[111] = CFSTR("pressureDataUsedPct");
  v5[111] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v4[112] = CFSTR("pedSpeedDataUsedPct");
  v5[112] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 184));
  v4[113] = CFSTR("pedSpeedConDataUsedPct");
  v5[113] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 188));
  v4[114] = CFSTR("motionDataUsedPct");
  v5[114] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 192));
  v4[115] = CFSTR("ephemerisUsedPct");
  v5[115] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 196));
  v4[116] = CFSTR("mountStateUsedPct");
  v5[116] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 200));
  v4[117] = CFSTR("signalEnvirDataUsedPct");
  v5[117] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 204));
  v4[118] = CFSTR("motionActivContextUsedPct");
  v5[118] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 208));
  v4[119] = CFSTR("displayOnPct");
  v5[119] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 212));
  v4[120] = CFSTR("reachablePct");
  v5[120] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 216));
  v4[121] = CFSTR("batterySaverModeOnPct");
  v5[121] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 220));
  v4[122] = CFSTR("anomalyStatusUnknownPct");
  v5[122] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 224));
  v4[123] = CFSTR("anomalyStatusSimulatedPct");
  v5[123] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 228));
  v4[124] = CFSTR("anomalyStatusAuthenticPct");
  v5[124] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 232));
  v4[125] = CFSTR("anomalyStatusMaybeSimulatedPct");
  v5[125] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 236));
  v4[126] = CFSTR("deresFinalAltitude");
  v5[126] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 240));
  v4[127] = CFSTR("antL5BestDurationPct");
  v5[127] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 248));
  v4[128] = CFSTR("antL5OtherDurationPct");
  v5[128] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 252));
  v4[129] = CFSTR("antL5WorstDurationPct");
  v5[129] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 256));
  v4[130] = CFSTR("gnssL5BlankingDurationPct");
  v5[130] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 260));
  v4[131] = CFSTR("deltaFirstFixAndPositionAssistMeters");
  v5[131] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 40) + 376));
  v4[132] = CFSTR("ms_to_first_gps_code_lock");
  v5[132] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 440));
  v4[133] = CFSTR("ms_to_first_glo_code_lock");
  v5[133] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 444));
  v4[134] = CFSTR("ms_to_first_gal_code_lock");
  v5[134] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 448));
  v4[135] = CFSTR("ms_to_first_bds_code_lock");
  v5[135] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 452));
  v4[136] = CFSTR("ms_to_first_gps_tow_decoded");
  v5[136] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 456));
  v4[137] = CFSTR("ms_to_first_glo_tod_decoded");
  v5[137] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 460));
  v4[138] = CFSTR("ms_to_first_gal_tow_decoded");
  v5[138] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 464));
  v4[139] = CFSTR("ms_to_first_bds_tow_decoded");
  v5[139] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 468));
  v4[140] = CFSTR("ms_to_first_gps_full_sync");
  v5[140] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 472));
  v4[141] = CFSTR("ms_to_first_glo_full_sync");
  v5[141] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 476));
  v4[142] = CFSTR("ms_to_first_gal_full_sync");
  v5[142] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 480));
  v4[143] = CFSTR("ms_to_first_bds_full_sync");
  v5[143] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 484));
  v4[144] = CFSTR("me_clock_event_counter");
  v5[144] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 488));
  v4[145] = CFSTR("phase_lock_rate_20_25dBHz");
  v5[145] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 560));
  v4[146] = CFSTR("phase_lock_rate_25_30dBHz");
  v5[146] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 568));
  v4[147] = CFSTR("phase_lock_rate_30plusdBHz");
  v5[147] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 576));
  v4[148] = CFSTR("phase_available_rate_20_25dBHz");
  v5[148] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 556));
  v4[149] = CFSTR("phase_available_rate_25_30dBHz");
  v5[149] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 564));
  v4[150] = CFSTR("phase_available_rate_30plusdBHz");
  v5[150] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 572));
  v4[151] = CFSTR("iono_model_percent_global_prediction");
  v5[151] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 580));
  v4[152] = CFSTR("iono_model_percent_klob");
  v5[152] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 584));
  v4[153] = CFSTR("sv_pos_percentage_brdc_file");
  v5[153] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 588));
  v4[154] = CFSTR("sv_pos_percentage_long_term_file");
  v5[154] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 592));
  v4[155] = CFSTR("sv_pos_percentage_ota");
  v5[155] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 596));
  v4[156] = CFSTR("sv_pos_percentage_short_term_file");
  v5[156] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 600));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 157);
}

NSDictionary *sub_100744C4C(uint64_t a1)
{
  id v2;
  uint64_t i;
  NSNumber *v4;
  _QWORD v6[38];
  _QWORD v7[38];

  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 11);
  for (i = 396; i != 440; i += 4)
    objc_msgSend(v2, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + i)));
  v6[0] = CFSTR("ratType");
  v7[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 24));
  v6[1] = CFSTR("isRtiFileAvailable");
  v7[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 28));
  v6[2] = CFSTR("isExtendedEphemerisFileInjected");
  v7[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 29));
  v6[3] = CFSTR("isTimeAssistanceProvided");
  v7[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 30));
  v6[4] = CFSTR("isDEMAssistanceProvided");
  v7[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 31));
  v6[5] = CFSTR("isCPIAssistanceProvided");
  v7[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 32));
  v6[6] = CFSTR("gpsL1Cn0Avg");
  v7[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 36));
  v6[7] = CFSTR("qzssL1Cn0Avg");
  v7[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 40));
  v6[8] = CFSTR("galileoL1Cn0Avg");
  v7[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 44));
  v6[9] = CFSTR("beidouL1Cn0Avg");
  v7[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 48));
  v6[10] = CFSTR("glonassL1Cn0Avg");
  v7[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 52));
  v6[11] = CFSTR("gpsL5Cn0Avg");
  v7[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 56));
  v6[12] = CFSTR("qzssL5Cn0Avg");
  v7[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 60));
  v6[13] = CFSTR("galileoL5Cn0Avg");
  v7[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 64));
  v6[14] = CFSTR("beidouL5Cn0Avg");
  v7[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 68));
  v6[15] = CFSTR("gpsL1SignalCountAvg");
  v7[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 116));
  v6[16] = CFSTR("qzssL1SignalCountAvg");
  v7[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 120));
  v6[17] = CFSTR("galileoL1SignalCountAvg");
  v7[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 124));
  v6[18] = CFSTR("beidouL1SignalCountAvg");
  v7[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 128));
  v6[19] = CFSTR("glonassL1SignalCountAvg");
  v7[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 132));
  v6[20] = CFSTR("gpsL5SignalCountAvg");
  v7[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 136));
  v6[21] = CFSTR("qzssL5SignalCountAvg");
  v7[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 140));
  v6[22] = CFSTR("galileoL5SignalCountAvg");
  v7[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 144));
  v6[23] = CFSTR("beidouL5SignalCountAvg");
  v7[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 148));
  v6[24] = CFSTR("signalEnvironmentMode");
  v7[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 156));
  v6[25] = CFSTR("powerMeasurementMode");
  v7[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 232));
  v6[26] = CFSTR("powerStateMode");
  v7[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 236));
  v6[27] = CFSTR("horizontalUncertaintyAvg");
  v7[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 160));
  v6[28] = CFSTR("mountStateMode");
  v7[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 164));
  v6[29] = CFSTR("motionActivityMode");
  v7[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 168));
  v6[30] = CFSTR("movingStateMode");
  v7[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 172));
  v6[31] = CFSTR("sessionDuration");
  v7[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v6[32] = CFSTR("deviceOrientationMode");
  v7[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v6[33] = CFSTR("isDisplayOn");
  v7[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 184));
  v6[34] = CFSTR("isReachable");
  v7[34] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 185));
  v6[35] = CFSTR("positionContextStateMode");
  v7[35] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 204));
  v6[36] = CFSTR("isSessionSpoofed");
  v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 394));
  v6[37] = CFSTR("anomalyStatusType");
  v7[36] = v4;
  v7[37] = v2;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 38);
}

id sub_1007451C0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t i;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 11);
  for (i = 0; i != 88; i += 8)
    objc_msgSend(v3, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + i)));
  return v3;
}

id sub_100745230(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t i;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 8);
  for (i = 0; i != 64; i += 8)
    objc_msgSend(v3, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + i)));
  return v3;
}

NSDictionary *sub_1007452A0(uint64_t a1)
{
  NSNumber *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v7[56];
  _QWORD v8[47];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v7[0] = CFSTR("ratType");
  v8[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v7[1] = CFSTR("isShortTermOrbitAssistanceFileAvailable");
  v8[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 212));
  v7[2] = CFSTR("isLongTermOrbitAssistanceFileAvailable");
  v8[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 213));
  v7[3] = CFSTR("isRtiFileAvailable");
  v8[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  v7[4] = CFSTR("isExtendedEphemerisFileInjected");
  v8[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 29));
  v7[5] = CFSTR("isTimeAssistanceProvided");
  v8[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 30));
  v7[6] = CFSTR("isDEMAssistanceProvided");
  v8[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 31));
  v7[7] = CFSTR("isCPIAssistanceProvided");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32));
  v7[8] = CFSTR("gpsL1Cn0Avg");
  v8[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 76));
  v7[9] = CFSTR("qzssL1Cn0Avg");
  v8[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v7[10] = CFSTR("galileoL1Cn0Avg");
  v8[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v7[11] = CFSTR("beidouL1Cn0Avg");
  v8[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v7[12] = CFSTR("glonassL1Cn0Avg");
  v8[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v7[13] = CFSTR("gpsL5Cn0Avg");
  v8[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v7[14] = CFSTR("qzssL5Cn0Avg");
  v8[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v7[15] = CFSTR("galileoL5Cn0Avg");
  v8[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v7[16] = CFSTR("beidouL5Cn0Avg");
  v8[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v7[17] = CFSTR("gpsL1SignalCountAvg");
  v8[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v7[18] = CFSTR("qzssL1SignalCountAvg");
  v8[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v7[19] = CFSTR("galileoL1SignalCountAvg");
  v8[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v7[20] = CFSTR("beidouL1SignalCountAvg");
  v8[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v7[21] = CFSTR("glonassL1SignalCountAvg");
  v8[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v7[22] = CFSTR("gpsL5SignalCountAvg");
  v8[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v7[23] = CFSTR("qzssL5SignalCountAvg");
  v8[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v7[24] = CFSTR("galileoL5SignalCountAvg");
  v8[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v7[25] = CFSTR("beidouL5SignalCountAvg");
  v8[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v7[26] = CFSTR("signalEnvironmentMode");
  v8[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v7[27] = CFSTR("horizontalUncertaintyAvg");
  v8[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v7[28] = CFSTR("mountStateMode");
  v8[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v7[29] = CFSTR("motionActivityMode");
  v8[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v7[30] = CFSTR("movingStateMode");
  v8[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v7[31] = CFSTR("sessionDuration");
  v8[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v7[32] = CFSTR("deviceOrientationMode");
  v8[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v7[33] = CFSTR("isDisplayOn");
  v8[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 184));
  v7[34] = CFSTR("isReachable");
  v8[34] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 185));
  v7[35] = CFSTR("isBatterySaverModeOn");
  v8[35] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 186));
  v7[36] = CFSTR("chargerTypeHistMode");
  v8[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v7[37] = CFSTR("thermalLevelAvg");
  v8[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v7[38] = CFSTR("isAccessoryYieldingLocations");
  v8[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 196));
  v7[39] = CFSTR("l5OnOffStateMode");
  v8[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v7[40] = CFSTR("positionContextStateMode");
  v8[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v7[41] = CFSTR("xoCalibrationState");
  v8[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v7[42] = CFSTR("sessionStartPositionAssistHorzReliability");
  v8[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v7[43] = CFSTR("sessionStartPositionAssistHorzAcc");
  v8[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v7[44] = CFSTR("sessionStartPositionAssistType");
  v8[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  v7[45] = CFSTR("wasWiFiPositioningAvailable");
  v8[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 228));
  v7[46] = CFSTR("isSessionSpoofed");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 394));
  v7[47] = CFSTR("signalStrengthArrayGpsL1");
  v7[48] = CFSTR("signalStrengthArrayQzssL1");
  v7[49] = CFSTR("signalStrengthArrayGalileoL1");
  v7[50] = CFSTR("signalStrengthArrayBeiDouL1");
  v7[51] = CFSTR("signalStrengthArrayGlonassL1");
  v7[52] = CFSTR("signalStrengthArrayGpsL5");
  v7[53] = CFSTR("signalStrengthArrayQzssL5");
  v7[54] = CFSTR("signalStrengthArrayGalileoL5");
  v3 = *(_OWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = v3;
  v4 = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 80);
  v12 = v4;
  v7[55] = CFSTR("signalStrengthArrayBeiDouL5");
  v5 = *(_QWORD *)(a1 + 112);
  v8[46] = v2;
  v13 = v5;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 56);
}

NSDictionary *sub_100745970(uint64_t a1)
{
  NSNumber *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v7[56];
  _QWORD v8[47];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v7[0] = CFSTR("ratType");
  v8[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v7[1] = CFSTR("isShortTermOrbitAssistanceFileAvailable");
  v8[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 212));
  v7[2] = CFSTR("isLongTermOrbitAssistanceFileAvailable");
  v8[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 213));
  v7[3] = CFSTR("isRtiFileAvailable");
  v8[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  v7[4] = CFSTR("isExtendedEphemerisFileInjected");
  v8[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 29));
  v7[5] = CFSTR("isTimeAssistanceProvided");
  v8[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 30));
  v7[6] = CFSTR("isDEMAssistanceProvided");
  v8[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 31));
  v7[7] = CFSTR("isCPIAssistanceProvided");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32));
  v7[8] = CFSTR("gpsL1Cn0Avg");
  v8[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 76));
  v7[9] = CFSTR("qzssL1Cn0Avg");
  v8[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v7[10] = CFSTR("galileoL1Cn0Avg");
  v8[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v7[11] = CFSTR("beidouL1Cn0Avg");
  v8[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v7[12] = CFSTR("glonassL1Cn0Avg");
  v8[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v7[13] = CFSTR("gpsL5Cn0Avg");
  v8[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v7[14] = CFSTR("qzssL5Cn0Avg");
  v8[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v7[15] = CFSTR("galileoL5Cn0Avg");
  v8[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v7[16] = CFSTR("beidouL5Cn0Avg");
  v8[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v7[17] = CFSTR("gpsL1SignalCountAvg");
  v8[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v7[18] = CFSTR("qzssL1SignalCountAvg");
  v8[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v7[19] = CFSTR("galileoL1SignalCountAvg");
  v8[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v7[20] = CFSTR("beidouL1SignalCountAvg");
  v8[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v7[21] = CFSTR("glonassL1SignalCountAvg");
  v8[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v7[22] = CFSTR("gpsL5SignalCountAvg");
  v8[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v7[23] = CFSTR("qzssL5SignalCountAvg");
  v8[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v7[24] = CFSTR("galileoL5SignalCountAvg");
  v8[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v7[25] = CFSTR("beidouL5SignalCountAvg");
  v8[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v7[26] = CFSTR("signalEnvironmentMode");
  v8[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v7[27] = CFSTR("horizontalUncertaintyAvg");
  v8[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v7[28] = CFSTR("mountStateMode");
  v8[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v7[29] = CFSTR("motionActivityMode");
  v8[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v7[30] = CFSTR("movingStateMode");
  v8[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v7[31] = CFSTR("sessionDuration");
  v8[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v7[32] = CFSTR("deviceOrientationMode");
  v8[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v7[33] = CFSTR("isDisplayOn");
  v8[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 184));
  v7[34] = CFSTR("isReachable");
  v8[34] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 185));
  v7[35] = CFSTR("isBatterySaverModeOn");
  v8[35] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 186));
  v7[36] = CFSTR("chargerTypeHistMode");
  v8[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v7[37] = CFSTR("thermalLevelAvg");
  v8[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v7[38] = CFSTR("isAccessoryYieldingLocations");
  v8[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 196));
  v7[39] = CFSTR("l5OnOffStateMode");
  v8[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v7[40] = CFSTR("positionContextStateMode");
  v8[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v7[41] = CFSTR("xoCalibrationState");
  v8[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v7[42] = CFSTR("sessionStartPositionAssistHorzReliability");
  v8[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v7[43] = CFSTR("sessionStartPositionAssistHorzAcc");
  v8[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v7[44] = CFSTR("sessionStartPositionAssistType");
  v8[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  v7[45] = CFSTR("wasWiFiPositioningAvailable");
  v8[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 228));
  v7[46] = CFSTR("isSessionSpoofed");
  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 394));
  v7[47] = CFSTR("signalCountArrayGpsL1");
  v7[48] = CFSTR("signalCountArrayQzssL1");
  v7[49] = CFSTR("signalCountArrayGalileoL1");
  v7[50] = CFSTR("signalCountArrayBeiDouL1");
  v7[51] = CFSTR("signalCountArrayGlonassL1");
  v7[52] = CFSTR("signalCountArrayGpsL5");
  v7[53] = CFSTR("signalCountArrayQzssL5");
  v7[54] = CFSTR("signalCountArrayGalileoL5");
  v3 = *(_OWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = v3;
  v4 = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 80);
  v12 = v4;
  v7[55] = CFSTR("signalCountArrayBeiDouL5");
  v5 = *(_QWORD *)(a1 + 112);
  v8[46] = v2;
  v13 = v5;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 56);
}

id sub_100746040(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t i;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 12);
  for (i = 0; i != 96; i += 8)
    objc_msgSend(v3, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + i)));
  return v3;
}

NSDictionary *sub_1007460B0(uint64_t a1)
{
  NSNumber *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v7[58];
  _QWORD v8[49];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v7[0] = CFSTR("ratType");
  v8[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v7[1] = CFSTR("isShortTermOrbitAssistanceFileAvailable");
  v8[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 212));
  v7[2] = CFSTR("isLongTermOrbitAssistanceFileAvailable");
  v8[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 213));
  v7[3] = CFSTR("isRtiFileAvailable");
  v8[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  v7[4] = CFSTR("isExtendedEphemerisFileInjected");
  v8[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 29));
  v7[5] = CFSTR("isTimeAssistanceProvided");
  v8[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 30));
  v7[6] = CFSTR("isDEMAssistanceProvided");
  v8[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 31));
  v7[7] = CFSTR("isCPIAssistanceProvided");
  v8[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 32));
  v7[8] = CFSTR("gpsL1Cn0Avg");
  v8[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 76));
  v7[9] = CFSTR("qzssL1Cn0Avg");
  v8[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 80));
  v7[10] = CFSTR("galileoL1Cn0Avg");
  v8[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 84));
  v7[11] = CFSTR("beidouL1Cn0Avg");
  v8[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));
  v7[12] = CFSTR("glonassL1Cn0Avg");
  v8[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 92));
  v7[13] = CFSTR("gpsL5Cn0Avg");
  v8[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v7[14] = CFSTR("qzssL5Cn0Avg");
  v8[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 100));
  v7[15] = CFSTR("galileoL5Cn0Avg");
  v8[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 104));
  v7[16] = CFSTR("beidouL5Cn0Avg");
  v8[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 108));
  v7[17] = CFSTR("gpsL1SignalCountAvg");
  v8[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v7[18] = CFSTR("qzssL1SignalCountAvg");
  v8[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v7[19] = CFSTR("galileoL1SignalCountAvg");
  v8[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v7[20] = CFSTR("beidouL1SignalCountAvg");
  v8[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v7[21] = CFSTR("glonassL1SignalCountAvg");
  v8[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v7[22] = CFSTR("gpsL5SignalCountAvg");
  v8[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v7[23] = CFSTR("qzssL5SignalCountAvg");
  v8[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v7[24] = CFSTR("galileoL5SignalCountAvg");
  v8[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v7[25] = CFSTR("beidouL5SignalCountAvg");
  v8[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v7[26] = CFSTR("signalEnvironmentMode");
  v8[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v7[27] = CFSTR("horizontalUncertaintyAvg");
  v8[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v7[28] = CFSTR("mountStateMode");
  v8[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v7[29] = CFSTR("motionActivityMode");
  v8[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 168));
  v7[30] = CFSTR("movingStateMode");
  v8[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 172));
  v7[31] = CFSTR("sessionDuration");
  v8[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 176));
  v7[32] = CFSTR("deviceOrientationMode");
  v8[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 180));
  v7[33] = CFSTR("isDisplayOn");
  v8[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 184));
  v7[34] = CFSTR("isReachable");
  v8[34] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 185));
  v7[35] = CFSTR("isBatterySaverModeOn");
  v8[35] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 186));
  v7[36] = CFSTR("chargerTypeHistMode");
  v8[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 188));
  v7[37] = CFSTR("thermalLevelAvg");
  v8[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 192));
  v7[38] = CFSTR("isAccessoryYieldingLocations");
  v8[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 196));
  v7[39] = CFSTR("l5OnOffStateMode");
  v8[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 200));
  v7[40] = CFSTR("positionContextStateMode");
  v8[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 204));
  v7[41] = CFSTR("xoCalibrationState");
  v8[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 208));
  v7[42] = CFSTR("sessionStartPositionAssistHorzReliability");
  v8[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 216));
  v7[43] = CFSTR("sessionStartPositionAssistHorzAcc");
  v8[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 220));
  v7[44] = CFSTR("sessionStartPositionAssistType");
  v8[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 224));
  v7[45] = CFSTR("wasWiFiPositioningAvailable");
  v8[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 228));
  v7[46] = CFSTR("isSessionSpoofed");
  v8[46] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 394));
  v7[47] = CFSTR("powerMeasurementMode");
  v8[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 232));
  v7[48] = CFSTR("powerStateMode");
  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 236));
  v7[49] = CFSTR("jammingMetricArrayGpsL1");
  v7[50] = CFSTR("jammingMetricArrayQzssL1");
  v7[51] = CFSTR("jammingMetricArrayGalileoL1");
  v7[52] = CFSTR("jammingMetricArrayBeiDouL1");
  v7[53] = CFSTR("jammingMetricArrayGlonassL1");
  v7[54] = CFSTR("jammingMetricArrayGpsL5");
  v7[55] = CFSTR("jammingMetricArrayQzssL5");
  v7[56] = CFSTR("jammingMetricArrayGalileoL5");
  v3 = *(_OWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = v3;
  v4 = *(_OWORD *)(a1 + 96);
  v11 = *(_OWORD *)(a1 + 80);
  v12 = v4;
  v7[57] = CFSTR("jammingMetricArrayBeiDouL5");
  v5 = *(_QWORD *)(a1 + 112);
  v8[48] = v2;
  v13 = v5;
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 58);
}

id sub_1007467C0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t i;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 3);
  for (i = 0; i != 24; i += 8)
    objc_msgSend(v3, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + i)));
  return v3;
}

id sub_100746830(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t i;

  v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 6);
  for (i = 0; i != 48; i += 8)
    objc_msgSend(v3, "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + i)));
  return v3;
}

NSDictionary *sub_1007468A0(uint64_t a1)
{
  _QWORD v3[51];
  _QWORD v4[49];
  __int128 v5;

  v3[0] = CFSTR("ratType");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24));
  v3[1] = CFSTR("isShortTermOrbitAssistanceFileAvailable");
  v4[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 212));
  v3[2] = CFSTR("isLongTermOrbitAssistanceFileAvailable");
  v4[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 213));
  v3[3] = CFSTR("isRtiFileAvailable");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 28));
  v3[4] = CFSTR("isExtendedEphemerisFileInjected");
  v4[4] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 29));
  v3[5] = CFSTR("isTimeAssistanceProvided");
  v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 30));
  v3[6] = CFSTR("isDEMAssistanceProvided");
  v4[6] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 31));
  v3[7] = CFSTR("isCPIAssistanceProvided");
  v4[7] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 32));
  v3[8] = CFSTR("gpsL1Cn0Avg");
  v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 76));
  v3[9] = CFSTR("qzssL1Cn0Avg");
  v4[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 80));
  v3[10] = CFSTR("galileoL1Cn0Avg");
  v4[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 84));
  v3[11] = CFSTR("beidouL1Cn0Avg");
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 88));
  v3[12] = CFSTR("glonassL1Cn0Avg");
  v4[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 92));
  v3[13] = CFSTR("gpsL5Cn0Avg");
  v4[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 96));
  v3[14] = CFSTR("qzssL5Cn0Avg");
  v4[14] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 100));
  v3[15] = CFSTR("galileoL5Cn0Avg");
  v4[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 104));
  v3[16] = CFSTR("beidouL5Cn0Avg");
  v4[16] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108));
  v3[17] = CFSTR("gpsL1SignalCountAvg");
  v4[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 116));
  v3[18] = CFSTR("qzssL1SignalCountAvg");
  v4[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 120));
  v3[19] = CFSTR("galileoL1SignalCountAvg");
  v4[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 124));
  v3[20] = CFSTR("beidouL1SignalCountAvg");
  v4[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 128));
  v3[21] = CFSTR("glonassL1SignalCountAvg");
  v4[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 132));
  v3[22] = CFSTR("gpsL5SignalCountAvg");
  v4[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 136));
  v3[23] = CFSTR("qzssL5SignalCountAvg");
  v4[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 140));
  v3[24] = CFSTR("galileoL5SignalCountAvg");
  v4[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 144));
  v3[25] = CFSTR("beidouL5SignalCountAvg");
  v4[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 148));
  v3[26] = CFSTR("signalEnvironmentMode");
  v4[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 156));
  v3[27] = CFSTR("horizontalUncertaintyAvg");
  v4[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 160));
  v3[28] = CFSTR("mountStateMode");
  v4[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 164));
  v3[29] = CFSTR("motionActivityMode");
  v4[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 168));
  v3[30] = CFSTR("movingStateMode");
  v4[30] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 172));
  v3[31] = CFSTR("sessionDuration");
  v4[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 176));
  v3[32] = CFSTR("deviceOrientationMode");
  v4[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 180));
  v3[33] = CFSTR("isDisplayOn");
  v4[33] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 184));
  v3[34] = CFSTR("isReachable");
  v4[34] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 185));
  v3[35] = CFSTR("isBatterySaverModeOn");
  v4[35] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 186));
  v3[36] = CFSTR("chargerTypeHistMode");
  v4[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 188));
  v3[37] = CFSTR("thermalLevelAvg");
  v4[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 192));
  v3[38] = CFSTR("isAccessoryYieldingLocations");
  v4[38] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 196));
  v3[39] = CFSTR("l5OnOffStateMode");
  v4[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 200));
  v3[40] = CFSTR("positionContextStateMode");
  v4[40] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 204));
  v3[41] = CFSTR("xoCalibrationState");
  v4[41] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 208));
  v3[42] = CFSTR("sessionStartPositionAssistHorzReliability");
  v4[42] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 216));
  v3[43] = CFSTR("sessionStartPositionAssistHorzAcc");
  v4[43] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 220));
  v3[44] = CFSTR("sessionStartPositionAssistType");
  v4[44] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 224));
  v3[45] = CFSTR("wasWiFiPositioningAvailable");
  v4[45] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 228));
  v3[46] = CFSTR("isSessionSpoofed");
  v4[46] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 394));
  v3[47] = CFSTR("powerMeasurementMode");
  v4[47] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 232));
  v3[48] = CFSTR("powerStateMode");
  v4[48] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 48) + 236));
  v3[49] = CFSTR("l5ForceOffReasonHist");
  v3[50] = CFSTR("l5BandUsageHist");
  v5 = *(_OWORD *)(a1 + 32);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 51);
}

uint64_t sub_100746F58(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  _QWORD v14[5];
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102150E20);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = a2[1];
    v7 = a2[2];
    v6 = a2[3];
    *(_DWORD *)buf = 67175425;
    v23 = v4;
    v24 = 1025;
    v25 = v5;
    v26 = 1025;
    v27 = v6;
    v28 = 1025;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gnssca Submit,BaroAlt,DriftRate Core Analytics Data,closeLoopError,%{private}d,durationSinceLastCalibEv,%{private}d,distanceFromLastCalibEv,%{private}d,estAltUnc,%{private}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102150E20);
    v9 = *a2;
    v10 = a2[1];
    v12 = a2[2];
    v11 = a2[3];
    v15[0] = 67175425;
    v15[1] = v9;
    v16 = 1025;
    v17 = v10;
    v18 = 1025;
    v19 = v11;
    v20 = 1025;
    v21 = v12;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#gnssca Submit,BaroAlt,DriftRate Core Analytics Data,closeLoopError,%{private}d,durationSinceLastCalibEv,%{private}d,distanceFromLastCalibEv,%{private}d,estAltUnc,%{private}d", v15, 26);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonStats::submitMetric(const CLDaemonStats_Type::BarometricAltitudeDriftRateInfo &)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100747188;
  v14[3] = &unk_102131FE8;
  v14[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.postion.BarometricAltitudeDriftRateInfo"), v14);
}

NSDictionary *sub_100747188(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("BaroAltCloseLoopErr");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("BaroAltDistFromLastCalibEv");
  v4[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12));
  v3[2] = CFSTR("BaroAltDurationSinceLastCalibEv");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4));
  v3[3] = CFSTR("BaroAltEstAltUncAtCalibEv");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

uint64_t sub_100747274(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = *((unsigned __int8 *)a2 + 8);
    v7 = *((_QWORD *)a2 + 2);
    v8 = *((_QWORD *)a2 + 3);
    v9 = a2[8];
    v10 = a2[9];
    v11 = a2[10];
    v12 = a2[11];
    v13 = *((_QWORD *)a2 + 6);
    v14 = *((_QWORD *)a2 + 7);
    v15 = *((_QWORD *)a2 + 8);
    *(_DWORD *)buf = 68292098;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = v13;
    v24 = 1026;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 1026;
    v29 = v6;
    v30 = 2050;
    v31 = v7;
    v32 = 2050;
    v33 = v8;
    v34 = 1026;
    v35 = v9;
    v36 = 1026;
    v37 = v10;
    v38 = 1026;
    v39 = v11;
    v40 = 1026;
    v41 = v12;
    v42 = 2050;
    v43 = v14;
    v44 = 2050;
    v45 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRG: submit CLRGSessionMetric session\", \"sessionDuration\":\"%{public}f\", \"activityType\":%{public}d, \"CLRPowerMode\":%{public}d, \"sessionLeeched\":%{public}d, \"ttff_s\":\"%{public}f\", \"horizontalUncFF_m\":\"%{public}f\", \"hUnc5SecAfterFF_m\":%{public}d, \"hUnc10SecAfterFF_m\":%{public}d, \"hUnc15SecAfterFF_m\":%{public}d, \"hUnc20SecAfterFF_m\":%{public}d, \"intendedInterSessionDuration_s\":\"%{public}f\", \"realInterSessionDuration_s\":\"%{public}f\"}", buf, 0x6Eu);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100747414;
  v17[3] = &unk_102131FE8;
  v17[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.CLRGSessionMetric"), v17);
}

NSDictionary *sub_100747414(uint64_t a1)
{
  _QWORD v3[12];
  _QWORD v4[12];

  v3[0] = CFSTR("sessionDuration");
  v4[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 48));
  v3[1] = CFSTR("activityType");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 32));
  v3[2] = CFSTR("CLRPowerMode");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4));
  v3[3] = CFSTR("sessionLeeched");
  v4[3] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 8));
  v3[4] = CFSTR("ttff_s");
  v4[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 16));
  v3[5] = CFSTR("horizontalUncFF_m");
  v4[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 24));
  v3[6] = CFSTR("hUnc5SecAfterFF_m");
  v4[6] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  v3[7] = CFSTR("hUnc10SecAfterFF_m");
  v4[7] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
  v3[8] = CFSTR("hUnc15SecAfterFF_m");
  v4[8] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 40));
  v3[9] = CFSTR("hUnc20SecAfterFF_m");
  v4[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  v3[10] = CFSTR("intendedInterSessionDuration_s");
  v4[10] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 56));
  v3[11] = CFSTR("realInterSessionDuration_s");
  v4[11] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 12);
}

uint64_t sub_100747600(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 1);
    v6 = a2[4];
    v7 = *((_QWORD *)a2 + 3);
    *(_DWORD *)buf = 68290050;
    v12 = 2082;
    v11 = 0;
    v13 = "";
    v14 = 1026;
    v15 = v4;
    v16 = 2050;
    v17 = v5;
    v18 = 1026;
    v19 = v6;
    v20 = 2050;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRG: submit CLRGClientMetric session\", \"CLRPowerMode\":%{public}d, \"CLRActiveLifeDuration\":\"%{public}f\", \"CLRGnssSessionCount\":%{public}d, \"CLRGnssSessionDuration\":\"%{public}f\"}", buf, 0x32u);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100747750;
  v9[3] = &unk_102131FE8;
  v9[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.CLRGClientMetric"), v9);
}

NSDictionary *sub_100747750(uint64_t a1)
{
  _QWORD v3[4];
  _QWORD v4[4];

  v3[0] = CFSTR("CLRPowerMode");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("CLRActiveLifeDuration");
  v4[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 8));
  v3[2] = CFSTR("CLRGnssSessionCount");
  v4[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16));
  v3[3] = CFSTR("CLRGnssSessionDuration");
  v4[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 24));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

uint64_t sub_10074783C(uint64_t a1, int *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  _QWORD v8[5];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102150DC0);
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[2];
    *(_DWORD *)buf = 68289794;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = v4;
    v15 = 1026;
    v16 = v5;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRG: submit DailyGnss usage detail\", \"totalGnssInADay_s\":%{public}d, \"totalLeechedGnssInADay_s\":%{public}d, \"totalProactiveGnssInADay_s\":%{public}d}", buf, 0x24u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100747978;
  v8[3] = &unk_102131FE8;
  v8[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.CLRGDailyMetric"), v8);
}

NSDictionary *sub_100747978(uint64_t a1)
{
  _QWORD v3[3];
  _QWORD v4[3];

  v3[0] = CFSTR("totalGnssInADay_s");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", **(unsigned int **)(a1 + 32));
  v3[1] = CFSTR("totalLeechedGnssInADay_s");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4));
  v3[2] = CFSTR("totalProactiveGnssInADay_s");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 3);
}

void sub_100747A44(id a1)
{
  qword_1022A02C8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

void sub_100747A70(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100747A9C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100747AC8(id a1)
{
  qword_1022A0008 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_100747AF4(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100747B20(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100747B4C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BBF488;
      v1[3] = unk_101BBF498;
      v1[4] = xmmword_101BBF4A8;
      v1[0] = xmmword_101BBF468;
      v1[1] = unk_101BBF478;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100747C20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100747C38()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100747CD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100747CEC()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100747D78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100747D90()
{
  sub_1015A2E04(qword_102303C10, "t");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303C10, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102303C28, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303C28, (void *)&_mh_execute_header);
}

uint64_t sub_100749078(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMVector<float, 2>::operator[](const size_t) [T = float, N = 2]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 4 * a2;
}

uint64_t sub_100749250(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<float, 2>::operator()(size_t, size_t) [T = float, M = 2, N = 2]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<float, 2>::operator()(size_t, size_t) [T = float, M = 2, N = 2]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 4 * (a2 + 2 * a3);
}

void sub_10074962C(uint64_t a1, xpc_activity_t activity)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (!xpc_activity_get_state(activity))
  {
    objc_msgSend(*(id *)(a1 + 32), "_setXPCCriteriaForActivity:withDescription:", activity, *(_QWORD *)(a1 + 40));
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Register %@ on DAS", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v7 = *(_QWORD *)(a1 + 40);
      v13 = 138412290;
      v14 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Register %@ on DAS", &v13, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator registerAndRunXPCActivity:withActivityIdentifier:andDescription:]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (xpc_activity_get_state(activity) == 2)
  {
    if (xpc_activity_set_state(activity, 4))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    else
    {
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v6 = qword_10229FE88;
      if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error: cannot set xpc activity state to CONTINUE", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE80 != -1)
          dispatch_once(&qword_10229FE80, &stru_102150F80);
        LOWORD(v13) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Error: cannot set xpc activity state to CONTINUE", &v13, v12);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator registerAndRunXPCActivity:withActivityIdentifier:andDescription:]_block_invoke", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

NSDictionary *sub_100749B44(uint64_t a1)
{
  const __CFString *v2;
  NSNumber *v3;

  v2 = CFSTR("xpcTaskWaitingTime");
  v3 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v3, &v2, 1);
}

id sub_100749C70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102150F80);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134218240;
    v17 = v3;
    v18 = 2048;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "start to compute MSLP,startTime,%f,endTime,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v12 = 134218240;
    v13 = v7;
    v14 = 2048;
    v15 = v8;
    LODWORD(v11) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "start to compute MSLP,startTime,%f,endTime,%f", COERCE_DOUBLE(&v12), v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator computeHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = objc_alloc_init((Class)NSMutableArray);
  objc_alloc_init((Class)NSMutableArray);
  return objc_msgSend(*(id *)(a1 + 32), "_elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:", v5, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

id sub_100749EA8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 32), "sendAnalyticsEventWithXpcTaskWaitingTime:", (CFAbsoluteTimeGetCurrent() - *(double *)(*(_QWORD *)(a1 + 32) + 24)) / 60.0);
  objc_msgSend(*(id *)(a1 + 32), "_sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));

  if (xpc_activity_set_state(*(xpc_activity_t *)(a1 + 56), 5))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finish MSLP estimation scheduled by DAS", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Finish MSLP estimation scheduled by DAS", v7, 2, v7[0]);
LABEL_19:
      v6 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator computeHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:]_block_invoke", "%s\n", v3);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error: cannot set xpc activity state to Done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Error: cannot set xpc activity state to Done", v7, 2, v7[0]);
      goto LABEL_19;
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "setRegisteredXPCTaskMSLP:", 0);
}

void sub_10074A514(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  uint64_t v6;
  void *v7;
  id v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint8_t *v62;
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint8_t *v83;
  NSObject *v84;
  id v85;
  id v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  NSObject *v104;
  const char *v105;
  uint8_t *v106;
  uint64_t v107;
  double v108;
  double v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[128];
  int v121;
  id v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  uint8_t buf[4];
  id v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  _BYTE v149[128];

  if (a2)
  {
    NSLog(CFSTR("%@"), objc_msgSend(a2, "userInfo"));

    return;
  }
  v3 = objc_alloc_init((Class)NSMutableArray);
  v4 = *(double *)(a1 + 80) + 29.72;
  v5 = *(double *)(a1 + 88) + -29.72;
  LODWORD(v6) = vcvtad_u64_f64((v4 - v5 + v4 - v5) / 2.56);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "fetchElevationsWithStartTime:andEndTime:andBatchSize:andElevationArray:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v6), v3, v5, v4);
  v110 = v3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 40))
  {
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v7 = *(void **)(a1 + 32);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v116, v149, 16);
    if (v8)
    {
      v10 = v8;
      v11 = *(_QWORD *)v117;
      *(_QWORD *)&v9 = 134219520;
      v111 = v9;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v117 != v11)
            objc_enumerationMutation(v7);
          v13 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * (_QWORD)v12);
          if (qword_10229FE80 != -1)
            dispatch_once(&qword_10229FE80, &stru_102150F80);
          v14 = qword_10229FE88;
          if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
          {
            v15 = *(void **)(a1 + 96);
            objc_msgSend(v13, "timestamp");
            v17 = v16;
            objc_msgSend(v13, "elevation");
            v19 = v18;
            objc_msgSend(v13, "verticalAccuracy");
            v21 = v20;
            objc_msgSend(v13, "latitude");
            v23 = v22;
            objc_msgSend(v13, "longitude");
            v25 = v24;
            objc_msgSend(v13, "horizontalAccuracy");
            *(_DWORD *)buf = v111;
            v136 = v15;
            v137 = 2048;
            v138 = v17;
            v139 = 2048;
            v140 = v19;
            v141 = 2048;
            v142 = v21;
            v143 = 2048;
            v144 = v23;
            v145 = 2048;
            v146 = v25;
            v147 = 2048;
            v148 = v26;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "enumerate locations fetched from DB,taskType,%lu,timestamp,%f,elevation,%f,verticalAccuracy,%f,lat,%f,lon,%f,horizontalAccuracy,%f", buf, 0x48u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE80 != -1)
              dispatch_once(&qword_10229FE80, &stru_102150F80);
            v27 = qword_10229FE88;
            v28 = *(void **)(a1 + 96);
            objc_msgSend(v13, "timestamp");
            v30 = v29;
            objc_msgSend(v13, "elevation");
            v32 = v31;
            objc_msgSend(v13, "verticalAccuracy");
            v34 = v33;
            objc_msgSend(v13, "latitude");
            v36 = v35;
            objc_msgSend(v13, "longitude");
            v38 = v37;
            objc_msgSend(v13, "horizontalAccuracy");
            v121 = v111;
            v122 = v28;
            v123 = 2048;
            v124 = v30;
            v125 = 2048;
            v126 = v32;
            v127 = 2048;
            v128 = v34;
            v129 = 2048;
            v130 = v36;
            v131 = 2048;
            v132 = v38;
            v133 = 2048;
            v134 = v39;
            LODWORD(v108) = 72;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 2, "enumerate locations fetched from DB,taskType,%lu,timestamp,%f,elevation,%f,verticalAccuracy,%f,lat,%f,lon,%f,horizontalAccuracy,%f", &v121, v108, v109, *(double *)&v110, *(double *)&v111, *((double *)&v111 + 1), *(double *)&v112);
            v41 = (uint8_t *)v40;
            sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v40);
            if (v41 != buf)
              free(v41);
          }
          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v42 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v116, v149, 16);
        v10 = v42;
      }
      while (v42);
    }
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v3 = v110;
    v43 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v112, v120, 16);
    if (v43)
    {
      v44 = v43;
      v45 = *(_QWORD *)v113;
      do
      {
        v46 = 0;
        do
        {
          if (*(_QWORD *)v113 != v45)
            objc_enumerationMutation(v3);
          v47 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)v46);
          v48 = *(double *)(a1 + 88);
          objc_msgSend(v47, "timestamp");
          if (v48 < v49)
          {
            objc_msgSend(v47, "timestamp");
            if (v50 < *(double *)(a1 + 80))
            {
              if (qword_10229FE80 != -1)
                dispatch_once(&qword_10229FE80, &stru_102150F80);
              v51 = qword_10229FE88;
              if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
              {
                v52 = *(void **)(a1 + 96);
                objc_msgSend(v47, "timestamp");
                v54 = v53;
                objc_msgSend(v47, "pressure");
                *(_DWORD *)buf = 134218496;
                v136 = v52;
                v3 = v110;
                v137 = 2048;
                v138 = v54;
                v139 = 2048;
                v140 = v55;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "enumerate elevations fetched from DB,taskType,%lu,timestamp,%f,pressure,%f", buf, 0x20u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FE80 != -1)
                  dispatch_once(&qword_10229FE80, &stru_102150F80);
                v56 = qword_10229FE88;
                v57 = *(void **)(a1 + 96);
                objc_msgSend(v47, "timestamp");
                v59 = v58;
                objc_msgSend(v47, "pressure");
                v121 = 134218496;
                v122 = v57;
                v123 = 2048;
                v124 = v59;
                v125 = 2048;
                v126 = v60;
                LODWORD(v108) = 32;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 2, "enumerate elevations fetched from DB,taskType,%lu,timestamp,%f,pressure,%f", &v121, v108, v109);
                v62 = (uint8_t *)v61;
                sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v61);
                if (v62 != buf)
                  free(v62);
                v3 = v110;
              }
            }
          }
          v46 = (char *)v46 + 1;
        }
        while (v44 != v46);
        v63 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v112, v120, 16);
        v44 = v63;
      }
      while (v63);
    }
  }
  v64 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (v64)
  {
    v65 = v64;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v66 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstObject"), "timestamp");
      v68 = v67;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstObject"), "elevation");
      v70 = v69;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastObject"), "timestamp");
      v72 = v71;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastObject"), "elevation");
      *(_DWORD *)buf = 134350080;
      v136 = v65;
      v137 = 2050;
      v138 = v68;
      v139 = 2048;
      v140 = v70;
      v141 = 2050;
      v142 = v72;
      v143 = 2048;
      v144 = v73;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "total locations,%{public}lu,first timestamp,%{public}f,first elevation,%f,last timestamp,%{public}f,last elevation,%f", buf, 0x34u);
    }
    v3 = v110;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v74 = qword_10229FE88;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstObject"), "timestamp");
      v76 = v75;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstObject"), "elevation");
      v78 = v77;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastObject"), "timestamp");
      v80 = v79;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "lastObject"), "elevation");
      v121 = 134350080;
      v122 = v65;
      v123 = 2050;
      v124 = v76;
      v125 = 2048;
      v126 = v78;
      v127 = 2050;
      v128 = v80;
      v129 = 2048;
      v130 = v81;
      LODWORD(v108) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 0, "total locations,%{public}lu,first timestamp,%{public}f,first elevation,%f,last timestamp,%{public}f,last elevation,%f", &v121, *(_QWORD *)&v108);
      v83 = (uint8_t *)v82;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v82);
      if (v83 == buf)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v84 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "total locations,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      LOWORD(v121) = 0;
      LODWORD(v108) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "total locations,0", &v121, *(_QWORD *)&v108);
      v83 = (uint8_t *)v105;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v105);
      if (v83 == buf)
        goto LABEL_51;
LABEL_50:
      free(v83);
LABEL_51:
      v3 = v110;
    }
  }
  v85 = objc_msgSend(v3, "count");
  if (v85)
  {
    v86 = v85;
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v87 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(v110, "firstObject"), "timestamp");
      v89 = v88;
      objc_msgSend(objc_msgSend(v110, "firstObject"), "pressure");
      v91 = v90;
      objc_msgSend(objc_msgSend(v110, "lastObject"), "timestamp");
      v93 = v92;
      objc_msgSend(objc_msgSend(v110, "lastObject"), "pressure");
      *(_DWORD *)buf = 134350080;
      v136 = v86;
      v137 = 2050;
      v138 = v89;
      v139 = 2048;
      v140 = v91;
      v141 = 2050;
      v142 = v93;
      v143 = 2048;
      v144 = v94;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "total elevations,%{public}lu,first timestamp,%{public}f,first pressure,%f,last timestamp,%{public}f,last pressure,%f", buf, 0x34u);
    }
    v3 = v110;
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_71;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v95 = qword_10229FE88;
    objc_msgSend(objc_msgSend(v110, "firstObject"), "timestamp");
    v97 = v96;
    objc_msgSend(objc_msgSend(v110, "firstObject"), "pressure");
    v99 = v98;
    objc_msgSend(objc_msgSend(v110, "lastObject"), "timestamp");
    v101 = v100;
    objc_msgSend(objc_msgSend(v110, "lastObject"), "pressure");
    v121 = 134350080;
    v122 = v86;
    v123 = 2050;
    v124 = v97;
    v125 = 2048;
    v126 = v99;
    v127 = 2050;
    v128 = v101;
    v129 = 2048;
    v130 = v102;
    LODWORD(v108) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 0, "total elevations,%{public}lu,first timestamp,%{public}f,first pressure,%f,last timestamp,%{public}f,last pressure,%f", &v121, *(_QWORD *)&v108);
  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v104 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "total elevations,0", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_71;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    LOWORD(v121) = 0;
    LODWORD(v108) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "total elevations,0", &v121, *(_QWORD *)&v108);
  }
  v106 = (uint8_t *)v103;
  sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:]_block_invoke", "%s\n", v103);
  if (v106 != buf)
    free(v106);
  v3 = v110;
LABEL_71:
  LODWORD(v107) = *(_DWORD *)(a1 + 112);
  objc_msgSend(*(id *)(a1 + 40), "_decimateLocationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andRawLocationArray:andRawElevationArray:andTaskType:andVisitArray:andVisitSearchStartIndex:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), v3, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64), *(double *)(a1 + 88), *(double *)(a1 + 80), v107);

  objc_msgSend(*(id *)(a1 + 40), "_gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 112), *(_QWORD *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 104));
}

BOOL sub_10074BF38(uint64_t a1, uint64_t a2)
{
  float v2;
  uint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _BOOL8 result;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  unint64_t v17;
  uint8_t buf[4];
  unint64_t v19;

  v2 = *(float *)(a2 + 8) - *(float *)(a2 + 4);
  if (v2 < 0.0)
    v2 = -v2;
  if (v2 > 1.0e-16)
    return 0;
  v5 = a1 + 8;
  v6 = 1;
  while (1)
  {
    v7 = sub_10074FF04(a2, v6, v6);
    if (!v6)
    {
      v8 = *(float *)sub_10075025C(v5, 0, 1uLL);
      v9 = *(float *)sub_10075025C(v5, 0, 1uLL);
      v7 = v7 + (float)((float)-(float)(v8 * v9) * *(float *)sub_1007505B4(a1, 1uLL));
    }
    *(float *)sub_1007505B4(a1, v6) = v7;
    if (*(float *)sub_1007505B4(a1, v6) <= 0.0)
      break;
    if (v6)
    {
      v10 = sub_10074FF04(a2, v6 - 1, v6);
      v11 = v10 / *(float *)sub_1007505B4(a1, v6);
      *(float *)sub_10075025C(v5, v6 - 1, v6) = v11;
    }
    if (--v6 == -1)
      return 1;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102150FC0);
  v13 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v16 = 134217984;
    v17 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D(%zu) <= 0 non-positive definite matrix!", (size_t)&v16);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 2>::factor(const CMMatrix<T, N, N> &) [T = float, N = 2]", "%s\n", v14);
    if (v15 != buf)
      free(v15);
    return 0;
  }
  return result;
}

void sub_10074C6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  float v10;
  float v11;
  float *v12;
  _DWORD *v13;
  uint64_t i;
  unint64_t v15;
  unint64_t v16;
  char v17;
  float v18;
  char v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  char v28;
  char v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  unint64_t v36;
  char v37;
  char v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  int v45;
  int v46;
  NSObject *v47;
  const char *v48;
  uint8_t *v49;
  _BYTE v50[16];
  int v51;
  unint64_t v52;
  uint8_t buf[4];
  unint64_t v54;
  _DWORD v55[2];

  v6 = 0;
  v7 = a1 + 8;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = *(float *)sub_100749250(a2, v6, 0);
    v11 = *(float *)sub_10075025C(v7, 0, 1uLL);
    v12 = (float *)sub_100749250(a2, v6, 1uLL);
    *v12 = *v12 + (float)(v10 * v11);
    *(_DWORD *)sub_100749250((uint64_t)v50, v6, 1uLL) = 0;
    *(_DWORD *)sub_100749250((uint64_t)v50, v6, 0) = 0;
    v13 = (_DWORD *)sub_100749250((uint64_t)v50, v6, v6);
    v8 = 0;
    *v13 = 1065353216;
    v6 = 1;
  }
  while ((v9 & 1) != 0);
  for (i = 1; ; i = v16 - 1)
  {
    v15 = 0;
    v16 = i;
    v55[i] = 0;
    v17 = 1;
    v18 = 0.0;
    do
    {
      v19 = v17;
      v20 = *(float *)sub_100749250(a2, v16, v15);
      v21 = v20 * *(float *)sub_100749250(a2, v16, v15);
      v22 = v18 + (float)(v21 * *(float *)sub_1007505B4(a1, v15));
      v23 = *(float *)sub_100749250((uint64_t)v50, v16, v15);
      v24 = v23 * *(float *)sub_100749250((uint64_t)v50, v16, v15);
      v25 = sub_10075078C(a3, v15);
      v17 = 0;
      v18 = v22 + (float)(v24 * v25);
      *(float *)&v55[v16] = v18;
      v15 = 1;
    }
    while ((v19 & 1) != 0);
    if (v18 <= 0.0)
      break;
    if (!v16)
    {
      v45 = v55[0];
      *(_DWORD *)sub_1007505B4(a1, 0) = v45;
      v46 = v55[1];
      *(_DWORD *)sub_1007505B4(a1, 1uLL) = v46;
      return;
    }
    v26 = 0;
    v27 = 0.0;
    v28 = 1;
    do
    {
      v29 = v28;
      v30 = *(float *)sub_100749250(a2, 0, v26);
      v31 = v30 * *(float *)sub_1007505B4(a1, v26);
      v32 = v27 + (float)(v31 * *(float *)sub_100749250(a2, v16, v26));
      v33 = *(float *)sub_100749250((uint64_t)v50, 0, v26);
      v34 = v33 * sub_10075078C(a3, v26);
      v35 = (float *)sub_100749250((uint64_t)v50, v16, v26);
      v28 = 0;
      v27 = v32 + (float)(v34 * *v35);
      v26 = 1;
    }
    while ((v29 & 1) != 0);
    v36 = 0;
    *(float *)sub_10075025C(v7, 0, v16) = v27 / v18;
    v37 = 1;
    do
    {
      v38 = v37;
      v39 = *(float *)sub_10075025C(v7, 0, v16);
      v40 = *(float *)sub_100749250(a2, v16, v36);
      v41 = (float *)sub_100749250(a2, 0, v36);
      *v41 = *v41 - (float)(v39 * v40);
      v42 = *(float *)sub_10075025C(v7, 0, v16);
      v43 = *(float *)sub_100749250((uint64_t)v50, v16, v36);
      v44 = (float *)sub_100749250((uint64_t)v50, 0, v36);
      v37 = 0;
      *v44 = *v44 - (float)(v42 * v43);
      v36 = 1;
    }
    while ((v38 & 1) != 0);
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102150FC0);
  v47 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v54 = v16;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v51 = 134217984;
    v52 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D[%zu] <= 0, matrix ! positive definite", (size_t)&v51);
    v49 = (uint8_t *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 2>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 2]", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
}

void sub_10074CC94(float *a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;

  v28 = 0;
  v8 = (uint64_t)(a1 + 2);
  v9 = sub_100750964(a2, 0, 0);
  v10 = v9 * *(float *)sub_1007505B4((uint64_t)a1, 0);
  v11 = sub_100750964(a2, 0, 1uLL);
  v12 = sub_100750964(a2, 0, 0);
  v13 = *(float *)sub_10075025C(v8, 0, 1uLL);
  v14 = (float *)sub_1007505B4((uint64_t)a1, 1uLL);
  v15 = *a3 + (float)(v9 * v10);
  if (v15 <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v24 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 == -1)
    {
LABEL_18:
      v29 = 134217984;
      v30 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "%zu: alpha <= 0, matrix ! positive definite", &v29);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 2>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 2, P = 1UL]", "%s\n", v26);
      if (v27 != buf)
        free(v27);
      return;
    }
LABEL_20:
    dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    goto LABEL_18;
  }
  v16 = v11 + (float)(v12 * v13);
  v17 = v16 * *v14;
  *a1 = (float)(*a3 * (float)(1.0 / v15)) * *a1;
  v18 = v15 + (float)(v16 * v17);
  if (v18 > 0.0)
  {
    v19 = a1[2];
    a1[1] = (float)(v15 * (float)(1.0 / v18)) * a1[1];
    a1[2] = v19 + (float)(v10 * (float)-(float)(v16 * (float)(1.0 / v15)));
    v20 = v10 + (float)(v17 * v19);
    v21 = (float)(1.0 / v18) * *a4;
    v22 = (float *)sub_100749078((uint64_t)&v28, 0);
    *v22 = *v22 + (float)(v21 * v20);
    v23 = (float *)sub_100749078((uint64_t)&v28, 1uLL);
    *v23 = *v23 + (float)(v21 * v17);
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102150FC0);
  v25 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 == -1)
      goto LABEL_18;
    goto LABEL_20;
  }
}

float sub_10074E024(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  float v16;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = 0;
    v7 = v5;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = sub_10074FF04(a1, v4, 0);
      v11 = v10 * sub_10074FF04(a2, 0, v6);
      *(float *)sub_100749250((uint64_t)&v16, v4, v6) = v11;
      v12 = sub_10074FF04(a1, v4, 1uLL);
      v13 = sub_10074FF04(a2, 1uLL, v6);
      v14 = (float *)sub_100749250((uint64_t)&v16, v4, v6);
      v8 = 0;
      *v14 = *v14 + (float)(v12 * v13);
      v6 = 1;
    }
    while ((v9 & 1) != 0);
    v5 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v16;
}

float *sub_10074E11C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float *result;
  _DWORD v11[4];

  *(float *)v11 = a2;
  *(float *)&v11[1] = a3;
  *(float *)&v11[2] = a4;
  *(float *)&v11[3] = a5;
  v6 = sub_10074FF04((uint64_t)v11, 0, 0);
  *(float *)sub_100749250(a1, 0, 0) = v6;
  v7 = sub_10074FF04((uint64_t)v11, 0, 1uLL);
  *(float *)sub_100749250(a1, 1uLL, 0) = v7;
  v8 = sub_10074FF04((uint64_t)v11, 1uLL, 0);
  *(float *)sub_100749250(a1, 0, 1uLL) = v8;
  v9 = sub_10074FF04((uint64_t)v11, 1uLL, 1uLL);
  result = (float *)sub_100749250(a1, 1uLL, 1uLL);
  *result = v9;
  return result;
}

BOOL sub_10074E1F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char i;
  char v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float *v12;
  float v13;
  float *v14;
  float v15;
  NSObject *v16;
  const char *v18;
  uint8_t *v19;
  int v20;
  unint64_t v21;
  uint8_t buf[4];
  unint64_t v23;

  v4 = 0;
  for (i = 1; ; i = 0)
  {
    v6 = i;
    v7 = sub_100751340(a1, v4);
    if (v7 == 0.0)
      break;
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      v8 = *(float *)sub_100749078(a2, 1uLL);
      v9 = sub_100750FE8(a1 + 8, 0, 1uLL);
      v10 = (float *)sub_100749078(a2, 0);
      *v10 = *v10 - (float)(v8 * v9);
      v11 = sub_100751340(a1, 0);
      v12 = (float *)sub_100749078(a2, 0);
      *v12 = *v12 / v11;
      v13 = sub_100751340(a1, 1uLL);
      v14 = (float *)sub_100749078(a2, 1uLL);
      *v14 = *v14 / v13;
      v15 = *(float *)sub_100749078(a2, 0);
      *(float *)(a2 + 4) = *(float *)(a2 + 4) - (float)(v15 * sub_100750FE8(a1 + 8, 0, 1uLL));
      return v7 != 0.0;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102150FC0);
  v16 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v20 = 134217984;
    v21 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "D[%zu] == 0, semidefinite matrix!", (size_t)&v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 2>::solve(CMVector<T, N> &) const [T = float, N = 2]", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  return v7 != 0.0;
}

float sub_10074E4A4(uint64_t a1, float *a2)
{
  unint64_t v4;
  char v5;
  char v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v12;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = sub_10074FF04(a1, v4, 0) * *a2;
    *(float *)sub_100749078((uint64_t)&v12, v4) = v7;
    v8 = sub_10074FF04(a1, v4, 1uLL);
    v9 = a2[1];
    v10 = (float *)sub_100749078((uint64_t)&v12, v4);
    v5 = 0;
    *v10 = *v10 + (float)(v8 * v9);
    v4 = 1;
  }
  while ((v6 & 1) != 0);
  return v12;
}

float sub_10074E550(uint64_t a1, float a2, float a3, float a4, float a5)
{
  unint64_t v6;
  _DWORD v8[4];

  v6 = 0;
  *(float *)v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  do
  {
    *(float *)&v8[v6] = sub_100751518(a1, v6) + *(float *)&v8[v6];
    ++v6;
  }
  while (v6 != 4);
  return *(float *)v8;
}

float sub_10074E5B8(uint64_t a1, float a2, float a3, float a4, float a5)
{
  unint64_t v6;
  _DWORD v8[4];

  v6 = 0;
  *(float *)v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  do
  {
    *(float *)&v8[v6] = *(float *)&v8[v6] - sub_100751518(a1, v6);
    ++v6;
  }
  while (v6 != 4);
  return *(float *)v8;
}

void sub_10074E9D4(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  unsigned int v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  if (a2 == 0x7FFFFFFF)
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v3 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 72);
      v5 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      v23 = v4;
      v24 = 2048;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "elevation batch processing returns early due to an error in querying visit with startTime,%f,endTime,%f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v9 = *(_QWORD *)(a1 + 72);
      v10 = *(_QWORD *)(a1 + 80);
      v18 = 134218240;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      LODWORD(v17) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 16, "elevation batch processing returns early due to an error in querying visit with startTime,%f,endTime,%f", COERCE_DOUBLE(&v18), v17);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "-[CLElevationProfileEstimator _elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:]_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v6 = objc_alloc_init((Class)NSMutableArray);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v7 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEBUG))
    {
      v8 = objc_msgSend(*(id *)(a1 + 32), "count");
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "historicalVisits array count,count,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v13 = qword_10229FE88;
      v14 = objc_msgSend(*(id *)(a1 + 32), "count");
      v18 = 67109120;
      LODWORD(v19) = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "historicalVisits array count,count,%d", &v18);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:]_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    objc_msgSend(*(id *)(a1 + 40), "_gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:", *(_QWORD *)(a1 + 48), v6);

  }
}

uint64_t sub_10074EDA8(uint64_t a1)
{
  id v2;
  char v3;
  char v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  const char *v19;
  uint8_t *v20;
  double v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;

  objc_msgSend(*(id *)(a1 + 40), "_alignElevationArray:andLocationArray:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 40), "_logValuesOfLocationArray:andElevationArray:andTaskType:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80));
  if (objc_msgSend(*(id *)(a1 + 56), "count") && objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    v2 = objc_alloc_init((Class)NSMutableArray);
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = v4;
      if (!objc_msgSend(*(id *)(a1 + 40), "_forwardProcessingWithLocationArray:andElevationArray:andKFEstimatesBuffer:andKeepAllLocations:andTaskType:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), v2, v3 & 1, *(_QWORD *)(a1 + 80)))break;
      objc_msgSend(v2, "removeAllObjects");
      v4 = 0;
      v3 = 1;
    }
    while ((v5 & 1) != 0);
    objc_msgSend(*(id *)(a1 + 56), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 48), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 40), "_backwardProcessingWithKFEstimatesBuffer:andKSEstimatesBuffer:", v2, *(_QWORD *)(a1 + 64));

  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v6 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 80);
      v8 = *(_QWORD *)(a1 + 88);
      v9 = *(_QWORD *)(a1 + 96);
      v10 = objc_msgSend(*(id *)(a1 + 56), "count");
      v11 = objc_msgSend(*(id *)(a1 + 48), "count");
      *(_DWORD *)buf = 134219008;
      v33 = v7;
      v34 = 2048;
      v35 = v8;
      v36 = 2048;
      v37 = v9;
      v38 = 2048;
      v39 = v10;
      v40 = 2048;
      v41 = v11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No data available,taskType,%lu,startTime,%f,endTime,%f,locationCount,%lu,elevationCount,%lu", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      v13 = qword_10229FE88;
      v14 = *(_QWORD *)(a1 + 80);
      v15 = *(_QWORD *)(a1 + 88);
      v16 = *(_QWORD *)(a1 + 96);
      v17 = objc_msgSend(*(id *)(a1 + 56), "count");
      v18 = objc_msgSend(*(id *)(a1 + 48), "count");
      v22 = 134219008;
      v23 = v14;
      v24 = 2048;
      v25 = v15;
      v26 = 2048;
      v27 = v16;
      v28 = 2048;
      v29 = v17;
      v30 = 2048;
      v31 = v18;
      LODWORD(v21) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "No data available,taskType,%lu,startTime,%f,endTime,%f,locationCount,%lu,elevationCount,%lu", &v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator _elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:]_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

id sub_10074F130(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (qword_10229FE80 != -1)
    dispatch_once(&qword_10229FE80, &stru_102150F80);
  v2 = qword_10229FE88;
  if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134218240;
    v17 = v3;
    v18 = 2048;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "start to compute elevation profile,startTime,%f,endTime,%f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v12 = 134218240;
    v13 = v7;
    v14 = 2048;
    v15 = v8;
    LODWORD(v11) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "start to compute elevation profile,startTime,%f,endTime,%f", COERCE_DOUBLE(&v12), v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator computeElevationProfileWithStartTime:andEndTime:]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = objc_alloc_init((Class)NSMutableArray);
  objc_alloc_init((Class)NSMutableArray);
  return objc_msgSend(*(id *)(a1 + 32), "_elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:", v5, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_10074F364(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[4];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 88);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10074F3DC;
  v4[3] = &unk_10212BBA8;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = v2;
  objc_msgSend(v3, "sendElevationsFromEstimates:withCompletionBlock:", (_QWORD)v5, v4);

}

id sub_10074F3DC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint8_t *v6;
  _QWORD v7[2];
  uint8_t buf[1640];

  if (xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 5))
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v2 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finish elevation profile calculation scheduled by DAS", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Finish elevation profile calculation scheduled by DAS", v7, 2, v7[0]);
LABEL_19:
      v6 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "-[CLElevationProfileEstimator computeElevationProfileWithStartTime:andEndTime:]_block_invoke", "%s\n", v3);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FE80 != -1)
      dispatch_once(&qword_10229FE80, &stru_102150F80);
    v4 = qword_10229FE88;
    if (os_log_type_enabled((os_log_t)qword_10229FE88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error: cannot set xpc activity state to Done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE80 != -1)
        dispatch_once(&qword_10229FE80, &stru_102150F80);
      LOWORD(v7[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE88, 0, "Error: cannot set xpc activity state to Done", v7, 2, v7[0]);
      goto LABEL_19;
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 88), "setRegisteredXPCTaskElevationProfile:", 0);
}

void sub_10074FE80(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10074FEAC(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_10074FED8(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

float sub_10074FF04(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 2>::operator()(size_t, size_t) const [T = float, M = 2, N = 2]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 2>::operator()(size_t, size_t) const [T = float, M = 2, N = 2]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(float *)(a1 + 4 * (a2 + 2 * a3));
}

uint64_t sub_10075025C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 2]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 2]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_1007505B4(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 2>::DiagonalMatrix::operator()(size_t) [T = float, N = 2]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 4 * a2;
}

float sub_10075078C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMVector<float, 2>::operator[](const size_t) const [T = float, N = 2]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_100750964(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 1, 2>::operator()(size_t, size_t) const [T = float, M = 1, N = 2]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 1, 2>::operator()(size_t, size_t) const [T = float, M = 1, N = 2]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(float *)(a1 + 4 * (a3 + a2));
}

float *sub_100750CB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v6;
  float v7;
  unint64_t v8;
  float v9;
  float v10;
  float *result;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  int v16;
  uint8_t buf[1640];

  if (a3 | a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Assertion failed: i0 < N-Ni+1 && j0 < N-Nj+1, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 302,indices exceed factored matrix size.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i0 < N-Ni+1 && j0 < N-Nj+1, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 302,indices exceed factored matrix size.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "CMMatrix<T, Ni, Nj> CMFactoredMatrix<float, 2>::submatrix(size_t, size_t) const [T = float, N = 2, Ni = 2UL, Nj = 2UL]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v6 = sub_100750F18(a1, a2, a3);
  *(float *)sub_100749250((uint64_t)&v16, 0, 0) = v6;
  v7 = sub_100750F18(a1, a2, a3 + 1);
  *(float *)sub_100749250((uint64_t)&v16, 0, 1uLL) = v7;
  v8 = a2 + 1;
  v9 = sub_100750F18(a1, v8, a3);
  *(float *)sub_100749250((uint64_t)&v16, 1uLL, 0) = v9;
  v10 = sub_100750F18(a1, v8, a3 + 1);
  result = (float *)sub_100749250((uint64_t)&v16, 1uLL, 1uLL);
  *result = v10;
  return result;
}

float sub_100750F18(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  float v4;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;

  if (a2 <= a3)
    v3 = a3;
  else
    v3 = a2;
  v4 = 0.0;
  if (v3 <= 1)
  {
    v8 = a1 + 8;
    do
    {
      v9 = v3;
      v10 = 1.0;
      v11 = 1.0;
      if (v3 != a3)
      {
        v11 = 0.0;
        if (v3 > a3)
          v11 = sub_100750FE8(v8, 0, v3);
      }
      if (v9 != a2)
      {
        v10 = 0.0;
        if (v9 > a2)
          v10 = sub_100750FE8(v8, 0, v9);
      }
      v4 = v4 + (float)((float)(v10 * sub_100751340(a1, v9)) * v11);
      v3 = 1;
    }
    while (!v9);
  }
  return v4;
}

float sub_100750FE8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a3 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 2]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = a2;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 2]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(float *)(a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1)));
}

float sub_100751340(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 2>::DiagonalMatrix::operator()(size_t) const [T = float, N = 2]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_100751518(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102150FC0);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102150FC0);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 2>::operator[](size_t) const [T = float, M = 2, N = 2]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

uint64_t sub_1007516F0()
{
  sub_1015A2E04(qword_102303C48, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102303C48, (void *)&_mh_execute_header);
}

void sub_1007517D8(id a1)
{
  qword_102303C78 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLFilteredLocationControllerSilo"));
}

uint64_t sub_10075188C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007519EC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102303C88 != -1)
    dispatch_once(&qword_102303C88, block);
  return qword_102310C48;
}

void sub_1007519EC()
{
  operator new();
}

void sub_100751A34()
{
  operator delete();
}

void sub_100751A58(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  double v5;
  std::string v11;

  v3 = (_QWORD *)sub_1006DAF10(a1, "filtered", a2);
  v3[15] = off_102151160;
  v4 = v3 + 15;
  *v3 = off_102151010;
  v5 = sub_1002433B8((uint64_t)(v3 + 16));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_101223F70(a1 + 184, *(_QWORD *)(a1 + 32), v4, v5);
  *(_QWORD *)(a1 + 1016) = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "newTimer");
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1024) = _Q0;
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = xmmword_101BBF5C0;
  v11.__r_.__value_.__r.__words[2] = 2;
  sub_100752C88(a1 + 1040, (int *)&v11, 3);
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1064) = a1 + 1072;
  *(_QWORD *)(a1 + 1088) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1096) = 0;
  sub_100E4A53C();
}

void sub_100751CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  sub_100008848(v20 + 1064, *(_QWORD **)(v20 + 1072));
  sub_100008848(v22, *(_QWORD **)(v20 + 1048));
  sub_101223FD0(v21);
  v25 = *(_QWORD *)(v20 + 176);
  *(_QWORD *)(v20 + 176) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v23;
  *v23 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_1006DB4AC(v20);
  _Unwind_Resume(a1);
}

void sub_100751D44(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLFilteredLocationController::onManagerNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102151218);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFilteredLocationController::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102151218);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFilteredLocationController::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100752284(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100751EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100751F1C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 1016), "invalidate");

  *(_QWORD *)(a1 + 1016) = 0;
}

uint64_t sub_100751F4C(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  int buf[410];

  sub_10003DFD4(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102151238);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    buf[0] = 67109120;
    buf[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLIENT: Clearing cached notification for %d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v8 = *a2;
    v11[0] = 67109120;
    v11[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "CLIENT: Clearing cached notification for %d", v11);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLFilteredLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
    if (v10 != (uint8_t *)buf)
      free(v10);
  }
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 120))(a1, a2);
  v6 = *a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), *a2);
  if (v6 <= 2)
  {
    *(_QWORD *)buf = a2;
    *((_BYTE *)sub_1001AFE94((uint64_t **)(a1 + 1040), (int *)a2, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
    buf[0] = 0;
    if (!sub_1001B7864(a1, buf, 1))
    {
      buf[0] = 2;
      if (!sub_1001B7864(a1, buf, 1))
      {
        buf[0] = 1;
        if (!sub_1001B7864(a1, buf, 1))
        {
          objc_msgSend(*(id *)(a1 + 1016), "setNextFireDelay:", 1.79769313e308);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
        }
      }
    }
  }
  return 1;
}

void sub_1007521CC(uint64_t a1)
{
  CFAbsoluteTime Current;

  if (&_CPScheduleWakeAtDateWithIdentifier)
  {
    sub_100752234(a1);
    if (*(double *)(a1 + 1088) > 0.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)(a1 + 1096) = CFDateCreate(kCFAllocatorDefault, Current + *(double *)(a1 + 1088));
      CPScheduleWakeAtDateWithIdentifier();
    }
  }
}

void sub_100752234(uint64_t a1)
{
  uint64_t v2;

  if (&_CPCancelWakeAtDateWithIdentifier)
  {
    v2 = *(_QWORD *)(a1 + 1096);
    if (v2)
    {
      CPCancelWakeAtDateWithIdentifier(v2, CFSTR("CLFilteredLocationControllerWake"));
      CFRelease(*(CFTypeRef *)(a1 + 1096));
      *(_QWORD *)(a1 + 1096) = 0;
    }
  }
}

void sub_100752284(id *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v5;
  id v6;
  uint64_t *v7;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;

  if (*a3 == 4)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Location Services state changed, clearing local cache\"}", (uint8_t *)&v11, 0x12u);
    }
    (*((void (**)(id *))*a1 + 38))(a1);
    v10 = (uint64_t)(a1 + 23);
    if (*(_DWORD *)(a4 + 188) == 1)
      sub_101223FD4(v10);
    else
      sub_101224248(v10);
  }
  else if (!*a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Location Services reset, clearing local cache\"}", (uint8_t *)&v11, 0x12u);
    }
    (*((void (**)(id *))*a1 + 38))(a1);
    sub_101224284((uint64_t)(a1 + 23));
    v6 = objc_msgSend(objc_msgSend(a1[4], "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_102303C77 >= 0)
      v7 = &qword_102303C60;
    else
      v7 = (uint64_t *)qword_102303C60;
    objc_msgSend(v6, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  }
}

void sub_100752494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  CFAbsoluteTime v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  const char *v35;
  double v36;
  int v37;
  uint64_t v38;
  CFAbsoluteTime v39;
  int v40;
  const char *v41;
  char *v42;
  double v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  CFAbsoluteTime v64;
  __int16 v65;
  int v66;
  _BYTE buf[32];
  __int128 v68;
  _BYTE v69[32];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  _BYTE v74[513];
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  std::__shared_weak_count *v84;
  void *__p;
  char v86;
  std::__shared_weak_count *v87;
  id v88;

  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v33 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No valid last confident location\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a2 + 4);
      v8 = *(_QWORD *)(a2 + 12);
      v9 = *(_QWORD *)(a2 + 20);
      v10 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
      v11 = a3;
      v12 = a1;
      v13 = *(_DWORD *)(a2 + 84);
      v14 = *(double *)(a2 + 76);
      v47 = *(_QWORD *)(a2 + 88);
      v15 = CFAbsoluteTimeGetCurrent() - v14;
      v16 = *(_DWORD *)(a2 + 128);
      *(_DWORD *)buf = 134220034;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v9;
      LOWORD(v68) = 2080;
      *(_QWORD *)((char *)&v68 + 2) = v10;
      WORD5(v68) = 1024;
      HIDWORD(v68) = v13;
      a1 = v12;
      a3 = v11;
      *(_WORD *)v69 = 2048;
      *(double *)&v69[2] = v14;
      *(_WORD *)&v69[10] = 2048;
      *(_QWORD *)&v69[12] = v47;
      *(_WORD *)&v69[20] = 2048;
      *(CFAbsoluteTime *)&v69[22] = v15;
      *(_WORD *)&v69[30] = 1024;
      LODWORD(v70) = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d", buf, 0x54u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102151238);
      v34 = *(_QWORD *)(a2 + 4);
      v45 = *(const char **)(a2 + 12);
      v46 = *(_QWORD *)(a2 + 20);
      v48 = *(double *)&qword_1022A01D8;
      v35 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
      v36 = *(double *)(a2 + 76);
      v37 = *(_DWORD *)(a2 + 84);
      v38 = *(_QWORD *)(a2 + 88);
      v39 = CFAbsoluteTimeGetCurrent() - v36;
      v40 = *(_DWORD *)(a2 + 128);
      v49 = 134220034;
      v50 = v34;
      v51 = 2048;
      v52 = v45;
      v53 = 2048;
      v54 = v46;
      v55 = 2080;
      v56 = v35;
      v57 = 1024;
      v58 = v37;
      v59 = 2048;
      v60 = v36;
      v61 = 2048;
      v62 = v38;
      v63 = 2048;
      v64 = v39;
      v65 = 1024;
      v66 = v40;
      LODWORD(v43) = 84;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v48, 2, "Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d", COERCE_DOUBLE(&v49), v43, v44, v45, v46, v48);
      v42 = (char *)v41;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFilteredLocationController::lastConfidentLocationNotification(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v41);
      if (v42 != buf)
        free(v42);
    }
    sub_100129CA0((uint64_t)buf);
    v17 = *(_OWORD *)(a2 + 112);
    v71 = *(_OWORD *)(a2 + 96);
    v72 = v17;
    v73[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)(a2 + 140);
    v18 = *(_OWORD *)(a2 + 48);
    v68 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)v69 = v18;
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v69[16] = *(_OWORD *)(a2 + 64);
    v70 = v19;
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v20;
    memcpy(v74, (const void *)a3, sizeof(v74));
    sub_100349198(&v75, (uint64_t *)(a3 + 520));
    v21 = *(_OWORD *)(a3 + 616);
    v81 = *(_OWORD *)(a3 + 600);
    v82 = v21;
    v22 = *(_OWORD *)(a3 + 552);
    v77 = *(_OWORD *)(a3 + 536);
    v78 = v22;
    v23 = *(_OWORD *)(a3 + 584);
    v79 = *(_OWORD *)(a3 + 568);
    v80 = v23;
    v83 = *(_BYTE *)(a3 + 632);
    v49 = 0;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v49, buf, 1, 0xFFFFFFFFLL, 0);

    v24 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v86 < 0)
      operator delete(__p);
    v27 = v84;
    if (v84)
    {
      v28 = (unint64_t *)&v84->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v76;
    if (v76)
    {
      v31 = (unint64_t *)&v76->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_100752990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Resume(exception_object);
}

void sub_1007529BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100752494(a1 - 120, a2, a3);
}

uint64_t sub_1007529C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102151010;
  *(_QWORD *)(a1 + 120) = off_102151160;
  sub_100008848(a1 + 1064, *(_QWORD **)(a1 + 1072));
  sub_100008848(a1 + 1040, *(_QWORD **)(a1 + 1048));
  sub_101223FD0(a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1006DB4AC(a1);
}

void sub_100752A48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102151010;
  *(_QWORD *)(a1 + 120) = off_102151160;
  sub_100008848(a1 + 1064, *(_QWORD **)(a1 + 1072));
  sub_100008848(a1 + 1040, *(_QWORD **)(a1 + 1048));
  sub_101223FD0(a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006DB4AC(a1);
  operator delete();
}

uint64_t sub_100752AE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 - 120) = off_102151010;
  v2 = a1 - 120;
  *(_QWORD *)a1 = off_102151160;
  sub_100008848(a1 + 944, *(_QWORD **)(a1 + 952));
  sub_100008848(a1 + 920, *(_QWORD **)(a1 + 928));
  sub_101223FD0(a1 + 64);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_1006DB4AC(v2);
}

void sub_100752B68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 - 120) = off_102151010;
  v2 = a1 - 120;
  *(_QWORD *)a1 = off_102151160;
  sub_100008848(a1 + 944, *(_QWORD **)(a1 + 952));
  sub_100008848(a1 + 920, *(_QWORD **)(a1 + 928));
  sub_101223FD0(a1 + 64);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1006DB4AC(v2);
  operator delete();
}

void sub_100752C04(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100752C30(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100752C5C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100752C88(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_100752D04((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100752CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100752D04(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_1005FFF94(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1000145B0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

void sub_100752D88()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BBF588;
      v1[3] = unk_101BBF598;
      v1[4] = xmmword_101BBF5A8;
      v1[0] = xmmword_101BBF568;
      v1[1] = unk_101BBF578;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100752E5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100752E74()
{
  sub_1015A2E04(&qword_102303C60, "FilteredLocationController");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102303C60, (void *)&_mh_execute_header);
}

_QWORD *sub_100752EB8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

uint64_t sub_100752EC4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

id *sub_100752EFC(id *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*a3 == 3)
  {
    v5 = result;
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_102151278);
    v6 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v13 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLXOTASubscription Mobile asset notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_102151278);
      v7 = qword_1022A0038;
      v10 = 138477827;
      v11 = sub_10011A5AC(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "CLXOTASubscription Mobile asset notification data: %{private}@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLXOTASubscription::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return (id *)objc_msgSend(v5[1], "onUpdatedSettings:", sub_10011A5AC(a4));
  }
  return result;
}

id sub_1007530E0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    sub_1013DF780();
  return objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 3, 0);
}

void sub_100753170(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLXOTASubscription::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102151298);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLXOTASubscription::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102151298);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLXOTASubscription::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100752EFC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100753328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100753348(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[2];
  if (v1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "unregister:forNotification:", *(_QWORD *)(v1 + 8), 3);
    result = (_QWORD *)v2[2];
    v2[2] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100753398(id a1)
{
  qword_1022A0038 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1007533C4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1007533F0(uint64_t a1, double a2, double a3, double a4)
{
  double v4;
  uint64_t v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  int v11;
  double v12;
  __int16 v13;
  int v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  int v18;

  v4 = fabs(a4 * 15.0) + *(double *)(a1 + 24) + *(double *)(a1 + 48);
  if (v4 >= a2 && a2 <= a3)
    v6 = 50;
  else
    v6 = 25;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021512B8);
  v7 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    v16 = v4;
    v17 = 1026;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLNmeaScreener,integrity,positionDiffBoundMediumIntegrity,%{public}.2lf,locIntegrity,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v11 = 134349312;
    v12 = v4;
    v13 = 1026;
    v14 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLNmeaScreener,integrity,positionDiffBoundMediumIntegrity,%{public}.2lf,locIntegrity,%{public}d", &v11, 18);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "CLLocationIntegrity CLNmeaScreener::ExternalLocationData::determineLocationIntegrity(const double, const double, const double) const", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return v6;
}

BOOL sub_1007535E8(uint64_t a1, double *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;

  v12 = vabdd_f64(a7, *(double *)(a1 + 16));
  v13 = sub_10011E634(a2, a5, a6, *(double *)a1, *(double *)(a1 + 8), 0.0);
  v14 = fabs(v12 * a4) + *(double *)(a1 + 24);
  if (v14 >= *(double *)(a1 + 40))
    v15 = v14;
  else
    v15 = *(double *)(a1 + 40);
  *a3 = sub_1007533F0(a1, v13, v15, v12);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021512B8);
  v16 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(double *)a1;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 24);
    v21 = *(_DWORD *)(a1 + 32);
    v22 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)buf = 134351873;
    v57 = v19;
    v58 = 2050;
    v59 = v13;
    v60 = 2050;
    v61 = v15;
    v62 = 2049;
    v63 = a5;
    v64 = 2049;
    v65 = a6;
    v66 = 2049;
    v67 = v17;
    v68 = 2049;
    v69 = v18;
    v70 = 1026;
    v71 = v21;
    v72 = 2050;
    v73 = v20;
    v74 = 1026;
    v75 = v22;
    v76 = 2050;
    v77 = v12;
    v78 = 2050;
    v79 = a4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLNmeaScreener,screen,time,%{public}.1lf,posDiff,%{public}.2lf,positionDiffBound,%{public}.2lf,accessoryLL,%{private}.7lf,%{private}.7lf,referenceLL,%{private}.7lf,%{private}.7lf,type,%{public}d,hunc,%{public}.2lf,refFrame,%{public}d,timeDiff,%{public}.2lf,maxSpeed,%{public}.2lf", buf, 0x72u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v24 = *(double *)a1;
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *(_DWORD *)(a1 + 32);
    v29 = *(_DWORD *)(a1 + 36);
    v32 = 134351873;
    v33 = v26;
    v34 = 2050;
    v35 = v13;
    v36 = 2050;
    v37 = v15;
    v38 = 2049;
    v39 = a5;
    v40 = 2049;
    v41 = a6;
    v42 = 2049;
    v43 = v24;
    v44 = 2049;
    v45 = v25;
    v46 = 1026;
    v47 = v28;
    v48 = 2050;
    v49 = v27;
    v50 = 1026;
    v51 = v29;
    v52 = 2050;
    v53 = v12;
    v54 = 2050;
    v55 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNmeaScreener,screen,time,%{public}.1lf,posDiff,%{public}.2lf,positionDiffBound,%{public}.2lf,accessoryLL,%{private}.7lf,%{private}.7lf,referenceLL,%{private}.7lf,%{private}.7lf,type,%{public}d,hunc,%{public}.2lf,refFrame,%{public}d,timeDiff,%{public}.2lf,maxSpeed,%{public}.2lf", &v32, 114);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNmeaScreener::ExternalLocationData::isLocationWithinBoundsAndSetLocIntegrity(CLDistanceCalc &, double, double, double, CFAbsoluteTime, CLLocationIntegrity &) const", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  return v13 <= v15;
}

uint64_t sub_1007538FC(uint64_t a1, uint64_t a2)
{
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[6];
  int v19;
  uint8_t buf[8];
  std::__shared_weak_count *v21;

  *(_WORD *)a1 = 256;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1002433B8(a1 + 32);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_101BBF6B0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = _Q0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_101BBF6C0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = _Q0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_101BBF6D0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = _Q0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0x40F1170000000000;
  *(_QWORD *)(a1 + 288) = 0x40E86A0000000000;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(int64x2_t *)(a1 + 336) = vdupq_n_s64(0x410E848000000000uLL);
  sub_100270E34(a1 + 352, a2);
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 396) = 0xB40000000ALL;
  *(_QWORD *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 432) = 50;
  v19 = 0;
  sub_1001E4804(buf);
  v9 = sub_1001E4B84(*(uint64_t *)buf, "GpsSimulatorTestMode", &v19);
  if (v19)
    v10 = v9;
  else
    v10 = 0;
  v11 = v21;
  if (!v21)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      return a1;
  }
  else
  {
LABEL_8:
    if (!v10)
      return a1;
  }
  *(_BYTE *)a1 = 1;
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021512B8);
  v14 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLNmeaScreener,fSimulatorMode,1", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v18[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNmeaScreener,fSimulatorMode,1", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "CLNmeaScreener::CLNmeaScreener(NMEAScreenerCallback)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  return a1;
}

void sub_100753C08(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  _QWORD *v5;
  uint64_t v6;

  sub_100E3E4AC((id *)(v1 + 408));
  v5 = *(_QWORD **)(v1 + 376);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = v2;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void sub_100753C7C(uint64_t a1, char a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  NSObject *v8;
  uint8_t *v9;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  sub_100197040();
  if ((sub_1007629CC() & 1) != 0)
  {
    *(_BYTE *)(a1 + 2) = a2;
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v4 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_INFO))
    {
      v5 = *(unsigned __int8 *)(a1 + 2);
      *(_DWORD *)buf = 67240192;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLNMEAScreener,isExternalLocationDisablementAllowed,1,PauseExternalLocation,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      v6 = *(unsigned __int8 *)(a1 + 2);
      LODWORD(v10[0]) = 67240192;
      HIDWORD(v10[0]) = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 1, "CLNMEAScreener,isExternalLocationDisablementAllowed,1,PauseExternalLocation,%{public}d", v10, 8, v10[0]);
LABEL_19:
      v9 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLNmeaScreener::pauseExternalLocation(const BOOL)", "%s\n", v7);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v8 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLNMEAScreener,isExternalLocationDisablementAllowed,0", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      LOWORD(v10[0]) = 0;
      v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLNMEAScreener,isExternalLocationDisablementAllowed,0", v10, 2, v10[0]);
      goto LABEL_19;
    }
  }
}

